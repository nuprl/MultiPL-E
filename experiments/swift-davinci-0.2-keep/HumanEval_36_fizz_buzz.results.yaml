language: swift
name: HumanEval_36_fizz_buzz
results:
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let s = String(i)\n            for c in s {\n     \
    \           if c == \"7\" {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var number = i\n            while number > 0 {\n  \
    \              if number % 10 == 7 {\n                    count += 1\n       \
    \         }\n                number /= 10\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp2ejhgm_0/tmp2ejhgm_0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61076b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61073b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61073b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61073af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ejhgm_0                        0x00005595463a5233 <unavailable> + 4659

    5    libc.so.6                          0x00002b61078a5460 __libc_start_main +
    245

    6    tmp2ejhgm_0                        0x00005595463a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp2ejhgm_0/tmp2ejhgm_0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61076b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61073b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61073b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61073af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ejhgm_0                        0x00005595463a5233 <unavailable> + 4659

    5    libc.so.6                          0x00002b61078a5460 __libc_start_main +
    245

    6    tmp2ejhgm_0                        0x00005595463a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 0..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 0..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1...n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpj4wfo5gt.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var j = i\n            while j > 0 {\n            \
    \    if j % 10 == 7 {\n                    count += 1\n                }\n   \
    \             j /= 10\n            }\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if (i % 11 == 0 || i\
    \ % 13 == 0) && i.description.contains(\"7\") {\n            count += 1\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp9q1u1ic1/tmp9q1u1ic1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad316e1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad316b11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad316b11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad316b107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9q1u1ic1                        0x000055727abc7603 <unavailable> + 5635

    5    libc.so.6                          0x00002ad317006460 __libc_start_main +
    245

    6    tmp9q1u1ic1                        0x000055727abc7239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if (i % 11 == 0 || i\
    \ % 13 == 0) && i.description.contains(\"7\") {\n            count += 1\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp9q1u1ic1/tmp9q1u1ic1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad316e1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad316b11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad316b11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad316b107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9q1u1ic1                        0x000055727abc7603 <unavailable> + 5635

    5    libc.so.6                          0x00002ad317006460 __libc_start_main +
    245

    6    tmp9q1u1ic1                        0x000055727abc7239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var j = i\n            while j > 0 {\n            \
    \    if j % 10 == 7 {\n                    count += 1\n                }\n   \
    \             j /= 10\n            }\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var result = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            result += count_sevens(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpbtigc6uy.swift:13:23: error: cannot find 'count_sevens' in scope\n\
    \            result += count_sevens(i)\n                      ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if (i % 11 == 0 || i\
    \ % 13 == 0) && i.description.contains(\"7\") {\n            count += 1\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp9q1u1ic1/tmp9q1u1ic1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad316e1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad316b11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad316b11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad316b107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9q1u1ic1                        0x000055727abc7603 <unavailable> + 5635

    5    libc.so.6                          0x00002ad317006460 __libc_start_main +
    245

    6    tmp9q1u1ic1                        0x000055727abc7239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let s = String(i)\n            for c in s {\n     \
    \           if c == \"7\" {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 0..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var j = i\n            while j > 0 {\n            \
    \    if j % 10 == 7 {\n                    count += 1\n                }\n   \
    \             j /= 10\n            }\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var j = i\n            while j > 0 {\n            \
    \    if j % 10 == 7 {\n                    count += 1\n                }\n   \
    \             j /= 10\n            }\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp2ejhgm_0/tmp2ejhgm_0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61076b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61073b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61073b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61073af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ejhgm_0                        0x00005595463a5233 <unavailable> + 4659

    5    libc.so.6                          0x00002b61078a5460 __libc_start_main +
    245

    6    tmp2ejhgm_0                        0x00005595463a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var j = i\n            while j > 0 {\n            \
    \    if j % 10 == 7 {\n                    count += 1\n                }\n   \
    \             j /= 10\n            }\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(n: i)\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpcmaheqe5.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(n: i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp2ejhgm_0/tmp2ejhgm_0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61076b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61073b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61073b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61073af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ejhgm_0                        0x00005595463a5233 <unavailable> + 4659

    5    libc.so.6                          0x00002b61078a5460 __libc_start_main +
    245

    6    tmp2ejhgm_0                        0x00005595463a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if (i % 11 == 0 || i\
    \ % 13 == 0) && i.description.contains(\"7\") {\n            count += 1\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp9q1u1ic1/tmp9q1u1ic1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad316e1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad316b11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad316b11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad316b107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9q1u1ic1                        0x000055727abc7603 <unavailable> + 5635

    5    libc.so.6                          0x00002ad317006460 __libc_start_main +
    245

    6    tmp9q1u1ic1                        0x000055727abc7239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var j = i\n            while j > 0 {\n            \
    \    if j % 10 == 7 {\n                    count += 1\n                }\n   \
    \             j /= 10\n            }\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 0..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpeic2xjl_.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if (i % 11 == 0 || i\
    \ % 13 == 0) && i.contains(7) {\n            count += 1\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpxje3c_s_.swift:12:46: error: value of type 'Int' has no member\
    \ 'contains'\n        if (i % 11 == 0 || i % 13 == 0) && i.contains(7) {\n   \
    \                                        ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(n: i)\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpcmaheqe5.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(n: i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += i.digitCount(7)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpgz9szqb4.swift:13:24: error: value of type 'Int' has no member\
    \ 'digitCount'\n            count += i.digitCount(7)\n                     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var j = i\n            while j > 0 {\n            \
    \    if j % 10 == 7 {\n                    count += 1\n                }\n   \
    \             j /= 10\n            }\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for char in str {\n\
    \                if char == \"7\" {\n                    count += 1\n        \
    \        }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_7(i)\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmptxzn1avr.swift:13:22: error: cannot find 'count_7' in scope\n \
    \           count += count_7(i)\n                     ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1...n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpj4wfo5gt.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp2ejhgm_0/tmp2ejhgm_0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61076b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61073b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61073b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61073af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ejhgm_0                        0x00005595463a5233 <unavailable> + 4659

    5    libc.so.6                          0x00002b61078a5460 __libc_start_main +
    245

    6    tmp2ejhgm_0                        0x00005595463a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if (i % 11 == 0 || i\
    \ % 13 == 0) && i.description.contains(\"7\") {\n            count += 1\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp9q1u1ic1/tmp9q1u1ic1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad316e1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad316b11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad316b11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad316b107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9q1u1ic1                        0x000055727abc7603 <unavailable> + 5635

    5    libc.so.6                          0x00002ad317006460 __libc_start_main +
    245

    6    tmp9q1u1ic1                        0x000055727abc7239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 0..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var number = i\n            while number > 0 {\n  \
    \              if number % 10 == 7 {\n                    count += 1\n       \
    \         }\n                number /= 10\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp2ejhgm_0/tmp2ejhgm_0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61076b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61073b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61073b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61073af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ejhgm_0                        0x00005595463a5233 <unavailable> + 4659

    5    libc.so.6                          0x00002b61078a5460 __libc_start_main +
    245

    6    tmp2ejhgm_0                        0x00005595463a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp2ejhgm_0/tmp2ejhgm_0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61076b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61073b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61073b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61073af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ejhgm_0                        0x00005595463a5233 <unavailable> + 4659

    5    libc.so.6                          0x00002b61078a5460 __libc_start_main +
    245

    6    tmp2ejhgm_0                        0x00005595463a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += number_of_sevens(i)\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpjbb62sxv.swift:13:22: error: cannot find 'number_of_sevens' in\
    \ scope\n            count += number_of_sevens(i)\n                     ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp2ejhgm_0/tmp2ejhgm_0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61076b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61073b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61073b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61073af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ejhgm_0                        0x00005595463a5233 <unavailable> + 4659

    5    libc.so.6                          0x00002b61078a5460 __libc_start_main +
    245

    6    tmp2ejhgm_0                        0x00005595463a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var j = i\n            while j > 0 {\n            \
    \    if j % 10 == 7 {\n                    count += 1\n                }\n   \
    \             j /= 10\n            }\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += i.digits.filter { $0 == 7 }.count\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpo29zqv7k.swift:13:24: error: value of type 'Int' has no member\
    \ 'digits'\n            count += i.digits.filter { $0 == 7 }.count\n         \
    \            ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var j = i\n            while j > 0 {\n            \
    \    if j % 10 == 7 {\n                    count += 1\n                }\n   \
    \             j /= 10\n            }\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var temp = i\n            while temp > 0 {\n      \
    \          if temp % 10 == 7 {\n                    count += 1\n             \
    \   }\n                temp /= 10\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            for c in String(i) {\n                if c == \"7\"\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var j = i\n            while j > 0 {\n            \
    \    if j % 10 == 7 {\n                    count += 1\n                }\n   \
    \             j /= 10\n            }\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp2ejhgm_0/tmp2ejhgm_0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61076b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61073b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61073b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61073af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ejhgm_0                        0x00005595463a5233 <unavailable> + 4659

    5    libc.so.6                          0x00002b61078a5460 __libc_start_main +
    245

    6    tmp2ejhgm_0                        0x00005595463a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_7(i)\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmptxzn1avr.swift:13:22: error: cannot find 'count_7' in scope\n \
    \           count += count_7(i)\n                     ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if (i % 11 == 0 || i\
    \ % 13 == 0) && i.description.contains(\"7\") {\n            count += 1\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp9q1u1ic1/tmp9q1u1ic1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad316e1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad316b11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad316b11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad316b107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9q1u1ic1                        0x000055727abc7603 <unavailable> + 5635

    5    libc.so.6                          0x00002ad317006460 __libc_start_main +
    245

    6    tmp9q1u1ic1                        0x000055727abc7239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var j = i\n            while j > 0 {\n            \
    \    if j % 10 == 7 {\n                    count += 1\n                }\n   \
    \             j /= 10\n            }\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if (i % 11 == 0 || i\
    \ % 13 == 0) && i.description.contains(\"7\") {\n            count += 1\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp9q1u1ic1/tmp9q1u1ic1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad316e1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad316b11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad316b11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad316b107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9q1u1ic1                        0x000055727abc7603 <unavailable> + 5635

    5    libc.so.6                          0x00002ad317006460 __libc_start_main +
    245

    6    tmp9q1u1ic1                        0x000055727abc7239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1...n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp0_cr6j5a/tmp0_cr6j5a.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5988010c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5987d07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5987d07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5987d067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_cr6j5a                        0x00005629f3ac7623 <unavailable> + 5667

    5    libc.so.6                          0x00002b59881fc460 __libc_start_main +
    245

    6    tmp0_cr6j5a                        0x00005629f3ac7259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var j = i\n            while j > 0 {\n            \
    \    if j % 10 == 7 {\n                    count += 1\n                }\n   \
    \             j /= 10\n            }\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var j = i\n            while j > 0 {\n            \
    \    if j % 10 == 7 {\n                    count += 1\n                }\n   \
    \             j /= 10\n            }\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let s = String(i)\n            for c in s {\n     \
    \           if c == \"7\" {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n:\
    \ 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\n\
    assert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n:\
    \ 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: -4
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n:\
    \ 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: Exception
  stderr: 'tmp2ejhgm_0/tmp2ejhgm_0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61076b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61073b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61073b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61073af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ejhgm_0                        0x00005595463a5233 <unavailable> + 4659

    5    libc.so.6                          0x00002b61078a5460 __libc_start_main +
    245

    6    tmp2ejhgm_0                        0x00005595463a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\n\
    assert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmp__pgpgcf.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let str = String(i)\n            for c in str {\n \
    \               if c == \"7\" {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78) == 2)\n\
    assert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 1
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            count += count_sevens(n: i)\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fizz_buzz(n: 50) ==\
    \ 0)\nassert(fizz_buzz(n: 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n:\
    \ 100) == 3)\nassert(fizz_buzz(n: 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\n\
    assert(fizz_buzz(n: 10000) == 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: SyntaxError
  stderr: "/tmp/tmpcmaheqe5.swift:13:22: error: cannot find 'count_sevens' in scope\n\
    \            count += count_sevens(n: i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var j = i\n            while j > 0 {\n            \
    \    if j % 10 == 7 {\n                    count += 1\n                }\n   \
    \             j /= 10\n            }\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
- exit_code: 0
  program: "\n/// Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>>\
    \ fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfunc fizz_buzz(n: Int) ->\
    \ Int {\n    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            var num = i\n            while num > 0 {\n        \
    \        if num % 10 == 7 {\n                    count += 1\n                }\n\
    \                num /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n: 78)\
    \ == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
    \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) ==\
    \ 639)\nassert(fizz_buzz(n: 100000) == 8026)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013817
