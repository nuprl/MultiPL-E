language: swift
name: HumanEval_105_by_length
results:
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sortedArr\
    \ = arr.sorted()\n    let reversedArr = sortedArr.reversed()\n    for num in reversedArr\
    \ {\n        switch num {\n        case 1:\n            result.append(\"One\"\
    )\n        case 2:\n            result.append(\"Two\")\n        case 3:\n    \
    \        result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let mapped = reversed.map\
    \ { String($0) }\n    return mapped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmplgr0ox6d/tmplgr0ox6d.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d09759c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d09450b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d09450988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d0944f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplgr0ox6d                        0x000055c0be90a9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b3d09945460 __libc_start_main +
    245

    6    tmplgr0ox6d                        0x000055c0be90a479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sortedArr\
    \ = arr.sorted()\n    let reversedArr = sortedArr.reversed()\n    for num in reversedArr\
    \ {\n        switch num {\n        case 1:\n            result.append(\"One\"\
    )\n        case 2:\n            result.append(\"Two\")\n        case 3:\n    \
    \        result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let mapped = reversed.map\
    \ { String($0) }\n    return mapped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmplgr0ox6d/tmplgr0ox6d.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d09759c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d09450b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d09450988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d0944f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplgr0ox6d                        0x000055c0be90a9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b3d09945460 __libc_start_main +
    245

    6    tmplgr0ox6d                        0x000055c0be90a479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var sorted\
    \ = arr.filter({$0 >= 1 && $0 <= 9}).sorted()\n    sorted.reverse()\n    for i\
    \ in sorted {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    for i\
    \ in arr {\n        if i == 1 {\n            result.append(\"One\")\n        }\
    \ else if i == 2 {\n            result.append(\"Two\")\n        } else if i ==\
    \ 3 {\n            result.append(\"Three\")\n        } else if i == 4 {\n    \
    \        result.append(\"Four\")\n        } else if i == 5 {\n            result.append(\"\
    Five\")\n        } else if i == 6 {\n            result.append(\"Six\")\n    \
    \    } else if i == 7 {\n            result.append(\"Seven\")\n        } else\
    \ if i == 8 {\n            result.append(\"Eight\")\n        } else if i == 9\
    \ {\n            result.append(\"Nine\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpz0pbms8t/tmpz0pbms8t.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5843d77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5843a6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5843a6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5843a6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz0pbms8t                        0x0000555876e07841 <unavailable> + 6209

    5    libc.so.6                          0x00002b5843f63460 __libc_start_main +
    245

    6    tmpz0pbms8t                        0x0000555876e072e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({ $0 >= 1 &&\
    \ $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    return reversed.map({\
    \ String($0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpqvkwud_m/tmpqvkwud_m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ac49bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ac46b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ac46b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ac46b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqvkwud_m                        0x0000557972f9c9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b4ac4ba8460 __libc_start_main +
    245

    6    tmpqvkwud_m                        0x0000557972f9c479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    var\
    \ sortedArr = arr.filter{$0 > 0 && $0 < 10}.sorted()\n    sortedArr.reverse()\n\
    \    for i in sortedArr {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    var\
    \ sortedArr = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    sortedArr.reverse()\n\
    \    for num in sortedArr {\n        switch num {\n        case 1:\n         \
    \   result.append(\"One\")\n        case 2:\n            result.append(\"Two\"\
    )\n        case 3:\n            result.append(\"Three\")\n        case 4:\n  \
    \          result.append(\"Four\")\n        case 5:\n            result.append(\"\
    Five\")\n        case 6:\n            result.append(\"Six\")\n        case 7:\n\
    \            result.append(\"Seven\")\n        case 8:\n            result.append(\"\
    Eight\")\n        case 9:\n            result.append(\"Nine\")\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    return reversed.map\
    \ {\n        switch $0 {\n        case 1: return \"One\"\n        case 2: return\
    \ \"Two\"\n        case 3: return \"Three\"\n        case 4: return \"Four\"\n\
    \        case 5: return \"Five\"\n        case 6: return \"Six\"\n        case\
    \ 7: return \"Seven\"\n        case 8: return \"Eight\"\n        case 9: return\
    \ \"Nine\"\n        default: return \"\"\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({ $0 >= 1 &&\
    \ $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let mapped =\
    \ reversed.map({ String($0) })\n    return mapped\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpk_kse3g4/tmpk_kse3g4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9660530c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9660227b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9660227988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96602267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk_kse3g4                        0x000055d6c98429d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b966071c460 __libc_start_main +
    245

    6    tmpk_kse3g4                        0x000055d6c9842479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let stringArray\
    \ = reversed.map { String($0) }\n    let result = stringArray.map {\n        switch\
    \ $0 {\n        case \"1\":\n            return \"One\"\n        case \"2\":\n\
    \            return \"Two\"\n        case \"3\":\n            return \"Three\"\
    \n        case \"4\":\n            return \"Four\"\n        case \"5\":\n    \
    \        return \"Five\"\n        case \"6\":\n            return \"Six\"\n  \
    \      case \"7\":\n            return \"Seven\"\n        case \"8\":\n      \
    \      return \"Eight\"\n        case \"9\":\n            return \"Nine\"\n  \
    \      default:\n            return \"\"\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let result = reversed.map\
    \ { String($0) }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp7zf8wsxj/tmp7zf8wsxj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba881431c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba881128b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba881128988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8811277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7zf8wsxj                        0x000055de6ee6f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ba88161d460 __libc_start_main +
    245

    6    tmp7zf8wsxj                        0x000055de6ee6f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted(by: <)\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var sorted\
    \ = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    sorted.reverse()\n    for\
    \ num in sorted {\n        switch num {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 > 0 &&\
    \ $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let result = reversed.map\
    \ { String($0) }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpti8_cd_w/tmpti8_cd_w.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13bffe2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13bfcd9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13bfcd9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13bfcd87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpti8_cd_w                        0x0000562bbea939d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b13c01ce460 __libc_start_main +
    245

    6    tmpti8_cd_w                        0x0000562bbea93479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpafr26m3a/tmpafr26m3a.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4b62bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4b5fb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4b5fb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4b5fb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafr26m3a                        0x00005591414c8621 <unavailable> + 5665

    5    libc.so.6                          0x00002ba4b64a7460 __libc_start_main +
    245

    6    tmpafr26m3a                        0x00005591414c80c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let strings =\
    \ reversed.map { String($0) }\n    return strings\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmps1m2j112/tmps1m2j112.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc5e132c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc5de29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc5de29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc5de287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1m2j112                        0x00005595651b89d1 <unavailable> + 6609

    5    libc.so.6                          0x00002adc5e31e460 __libc_start_main +
    245

    6    tmps1m2j112                        0x00005595651b8479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({ $0 >= 1 &&\
    \ $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let result =\
    \ reversed.map({ String($0) })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp_1yhib47/tmp_1yhib47.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9826f48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9826c3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9826c3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9826c3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_1yhib47                        0x000055cbcd52a9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b9827134460 __libc_start_main +
    245

    6    tmp_1yhib47                        0x000055cbcd52a479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0 >= 1 &&\
    \ $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    let names = reversed.map({String($0)})\n\
    \    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnlm3z8a3/tmpnlm3z8a3.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b3deb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b3dbafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b3dbaf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b3dbae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnlm3z8a3                        0x000055846f6e09d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b8b3e0a4460 __libc_start_main +
    245

    6    tmpnlm3z8a3                        0x000055846f6e0479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        if i == 1 {\n            result.append(\"One\")\n        } else if\
    \ i == 2 {\n            result.append(\"Two\")\n        } else if i == 3 {\n \
    \           result.append(\"Three\")\n        } else if i == 4 {\n           \
    \ result.append(\"Four\")\n        } else if i == 5 {\n            result.append(\"\
    Five\")\n        } else if i == 6 {\n            result.append(\"Six\")\n    \
    \    } else if i == 7 {\n            result.append(\"Seven\")\n        } else\
    \ if i == 8 {\n            result.append(\"Eight\")\n        } else if i == 9\
    \ {\n            result.append(\"Nine\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var sorted\
    \ = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    sorted.reverse()\n    for\
    \ i in sorted {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var sorted\
    \ = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    sorted.reverse()\n    for\
    \ num in sorted {\n        switch num {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 > 0 &&\
    \ $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let strings =\
    \ reversed.map { String($0) }\n    return strings\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp66wfa4pj/tmp66wfa4pj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b4bb15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b4b80cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b4b80c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b4b80b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp66wfa4pj                        0x000055e1527779d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b9b4bd01460 __libc_start_main +
    245

    6    tmp66wfa4pj                        0x000055e152777479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    return sorted.reversed().map { String($0) }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpjvapgzdv/tmpjvapgzdv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a786a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a7839eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a7839e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a7839d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjvapgzdv                        0x000055edaf75b9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5a78893460 __libc_start_main +
    245

    6    tmpjvapgzdv                        0x000055edaf75b479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let numbers\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    let names = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    for number\
    \ in arr {\n        if numbers.contains(number) {\n            result.append(names[numbers.index(of:\
    \ number)!])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpkyednlbd/tmpkyednlbd.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e5ca4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e5c746b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e5c746988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e5c7457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkyednlbd                        0x0000555c6888e9f1 <unavailable> + 6641

    5    libc.so.6                          0x00002b2e5cc3b460 __libc_start_main +
    245

    6    tmpkyednlbd                        0x0000555c6888e499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sortedArr\
    \ = arr.sorted(by: <)\n    let reversedArr = sortedArr.reversed()\n    for number\
    \ in reversedArr {\n        switch number {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    let\
    \ numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    let names = [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    let\
    \ sorted = arr.sorted(by: {$0 < $1})\n    let reversed = sorted.reversed()\n \
    \   for i in reversed {\n        if numbers.contains(i) {\n            result.append(names[numbers.index(of:\
    \ i)!])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let numbers = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9]\n    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"]\n    var result = [String]()\n    for number\
    \ in arr {\n        if numbers.contains(number) {\n            result.append(names[numbers.index(of:\
    \ number)!])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpe1h1blk7/tmpe1h1blk7.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28bcf93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28bcc8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28bcc8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28bcc897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe1h1blk7                        0x00005651692c59f1 <unavailable> + 6641

    5    libc.so.6                          0x00002b28bd17f460 __libc_start_main +
    245

    6    tmpe1h1blk7                        0x00005651692c5499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({ $0 >= 1 &&\
    \ $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let words = reversed.map({\
    \ String($0) })\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmptvwsgdr0/tmptvwsgdr0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac9996dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac99664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac99664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac996637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptvwsgdr0                        0x000055ddad3bf9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002aac99b59460 __libc_start_main +
    245

    6    tmptvwsgdr0                        0x000055ddad3bf479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0 >= 1 &&\
    \ $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    let names = reversed.map({String($0)})\n\
    \    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnlm3z8a3/tmpnlm3z8a3.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b3deb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b3dbafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b3dbaf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b3dbae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnlm3z8a3                        0x000055846f6e09d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b8b3e0a4460 __libc_start_main +
    245

    6    tmpnlm3z8a3                        0x000055846f6e0479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    var\
    \ sortedArr = arr.filter{$0 >= 1 && $0 <= 9}.sorted()\n    sortedArr.reverse()\n\
    \    for num in sortedArr {\n        switch num {\n        case 1:\n         \
    \   result.append(\"One\")\n        case 2:\n            result.append(\"Two\"\
    )\n        case 3:\n            result.append(\"Three\")\n        case 4:\n  \
    \          result.append(\"Four\")\n        case 5:\n            result.append(\"\
    Five\")\n        case 6:\n            result.append(\"Six\")\n        case 7:\n\
    \            result.append(\"Seven\")\n        case 8:\n            result.append(\"\
    Eight\")\n        case 9:\n            result.append(\"Nine\")\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let result = reversed.map\
    \ { String($0) }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp7zf8wsxj/tmp7zf8wsxj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba881431c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba881128b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba881128988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8811277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7zf8wsxj                        0x000055de6ee6f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ba88161d460 __libc_start_main +
    245

    6    tmp7zf8wsxj                        0x000055de6ee6f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let result = reversed.map\
    \ { String($0) }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp7zf8wsxj/tmp7zf8wsxj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba881431c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba881128b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba881128988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8811277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7zf8wsxj                        0x000055de6ee6f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ba88161d460 __libc_start_main +
    245

    6    tmp7zf8wsxj                        0x000055de6ee6f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    for i\
    \ in arr {\n        if i == 1 {\n            result.append(\"One\")\n        }\
    \ else if i == 2 {\n            result.append(\"Two\")\n        } else if i ==\
    \ 3 {\n            result.append(\"Three\")\n        } else if i == 4 {\n    \
    \        result.append(\"Four\")\n        } else if i == 5 {\n            result.append(\"\
    Five\")\n        } else if i == 6 {\n            result.append(\"Six\")\n    \
    \    } else if i == 7 {\n            result.append(\"Seven\")\n        } else\
    \ if i == 8 {\n            result.append(\"Eight\")\n        } else if i == 9\
    \ {\n            result.append(\"Nine\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpz0pbms8t/tmpz0pbms8t.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5843d77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5843a6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5843a6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5843a6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz0pbms8t                        0x0000555876e07841 <unavailable> + 6209

    5    libc.so.6                          0x00002b5843f63460 __libc_start_main +
    245

    6    tmpz0pbms8t                        0x0000555876e072e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 > 0 &&\
    \ $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let words = reversed.map\
    \ { String($0) }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp10iyku14/tmp10iyku14.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5168ed8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5168bcfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5168bcf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5168bce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10iyku14                        0x0000561fa3d6d9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b51690c4460 __libc_start_main +
    245

    6    tmp10iyku14                        0x0000561fa3d6d479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for num in reversed\
    \ {\n        switch num {\n        case 1:\n            result.append(\"One\"\
    )\n        case 2:\n            result.append(\"Two\")\n        case 3:\n    \
    \        result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sortedArr\
    \ = arr.sorted()\n    let reversedArr = sortedArr.reversed()\n    for num in reversedArr\
    \ {\n        switch num {\n        case 1:\n            result.append(\"One\"\
    )\n        case 2:\n            result.append(\"Two\")\n        case 3:\n    \
    \        result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let result = reversed.map\
    \ { String($0) }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp7zf8wsxj/tmp7zf8wsxj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba881431c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba881128b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba881128988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8811277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7zf8wsxj                        0x000055de6ee6f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ba88161d460 __libc_start_main +
    245

    6    tmp7zf8wsxj                        0x000055de6ee6f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    for i in sorted.reversed() {\n        if i > 0 && i < 10\
    \ {\n            switch i {\n            case 1:\n                result.append(\"\
    One\")\n            case 2:\n                result.append(\"Two\")\n        \
    \    case 3:\n                result.append(\"Three\")\n            case 4:\n\
    \                result.append(\"Four\")\n            case 5:\n              \
    \  result.append(\"Five\")\n            case 6:\n                result.append(\"\
    Six\")\n            case 7:\n                result.append(\"Seven\")\n      \
    \      case 8:\n                result.append(\"Eight\")\n            case 9:\n\
    \                result.append(\"Nine\")\n            default:\n             \
    \   break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0 > 0 &&\
    \ $0 < 10}).sorted()\n    let reversed = sorted.reversed()\n    let strings =\
    \ reversed.map({String($0)})\n    return strings\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpy_7cqxjr/tmpy_7cqxjr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b866b02dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b866ad24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b866ad24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b866ad237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy_7cqxjr                        0x0000560b90a949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b866b219460 __libc_start_main +
    245

    6    tmpy_7cqxjr                        0x0000560b90a94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    let\
    \ sorted = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            continue\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    for num in sorted.reversed() {\n        if num > 0 && num\
    \ < 10 {\n            switch num {\n            case 1:\n                result.append(\"\
    One\")\n            case 2:\n                result.append(\"Two\")\n        \
    \    case 3:\n                result.append(\"Three\")\n            case 4:\n\
    \                result.append(\"Four\")\n            case 5:\n              \
    \  result.append(\"Five\")\n            case 6:\n                result.append(\"\
    Six\")\n            case 7:\n                result.append(\"Seven\")\n      \
    \      case 8:\n                result.append(\"Eight\")\n            case 9:\n\
    \                result.append(\"Nine\")\n            default:\n             \
    \   break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    for i in sorted.reversed() {\n        switch i {\n     \
    \   case 1:\n            result.append(\"One\")\n        case 2:\n           \
    \ result.append(\"Two\")\n        case 3:\n            result.append(\"Three\"\
    )\n        case 4:\n            result.append(\"Four\")\n        case 5:\n   \
    \         result.append(\"Five\")\n        case 6:\n            result.append(\"\
    Six\")\n        case 7:\n            result.append(\"Seven\")\n        case 8:\n\
    \            result.append(\"Eight\")\n        case 9:\n            result.append(\"\
    Nine\")\n        default:\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    var\
    \ sortedArr = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    sortedArr.reverse()\n\
    \    for num in sortedArr {\n        switch num {\n        case 1:\n         \
    \   result.append(\"One\")\n        case 2:\n            result.append(\"Two\"\
    )\n        case 3:\n            result.append(\"Three\")\n        case 4:\n  \
    \          result.append(\"Four\")\n        case 5:\n            result.append(\"\
    Five\")\n        case 6:\n            result.append(\"Six\")\n        case 7:\n\
    \            result.append(\"Seven\")\n        case 8:\n            result.append(\"\
    Eight\")\n        case 9:\n            result.append(\"Nine\")\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let names = reversed.map\
    \ { String($0) }\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp59q8bwlj/tmp59q8bwlj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae59e44dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae59e144b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae59e144988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae59e1437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59q8bwlj                        0x000055864f32f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae59e639460 __libc_start_main +
    245

    6    tmp59q8bwlj                        0x000055864f32f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    return reversed.map\
    \ { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp3u1lvfgk/tmp3u1lvfgk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b964a067c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9649d5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9649d5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9649d5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3u1lvfgk                        0x00005588eba389d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b964a253460 __libc_start_main +
    245

    6    tmp3u1lvfgk                        0x00005588eba38479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    return reversed.map\
    \ { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp3u1lvfgk/tmp3u1lvfgk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b964a067c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9649d5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9649d5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9649d5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3u1lvfgk                        0x00005588eba389d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b964a253460 __libc_start_main +
    245

    6    tmp3u1lvfgk                        0x00005588eba38479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let names = reversed.map\
    \ { String($0) }\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp59q8bwlj/tmp59q8bwlj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae59e44dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae59e144b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae59e144988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae59e1437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59q8bwlj                        0x000055864f32f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae59e639460 __libc_start_main +
    245

    6    tmp59q8bwlj                        0x000055864f32f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 > 0 &&\
    \ $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let mapped = reversed.map\
    \ { String($0) }\n    return mapped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmprljceoij/tmprljceoij.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b222250cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2222203b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2222203988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22222027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprljceoij                        0x000055db59a8b9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b22226f8460 __libc_start_main +
    245

    6    tmprljceoij                        0x000055db59a8b479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({ $0 >= 1 &&\
    \ $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let mapped =\
    \ reversed.map({ String($0) })\n    return mapped\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpk_kse3g4/tmpk_kse3g4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9660530c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9660227b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9660227988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96602267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk_kse3g4                        0x000055d6c98429d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b966071c460 __libc_start_main +
    245

    6    tmpk_kse3g4                        0x000055d6c9842479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let words = reversed.map\
    \ { String($0) }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpza6c120g/tmpza6c120g.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b305e460c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b305e157b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b305e157988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b305e1567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpza6c120g                        0x00005646801249d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b305e64c460 __libc_start_main +
    245

    6    tmpza6c120g                        0x0000564680124479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    return reversed.map\
    \ { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp3u1lvfgk/tmp3u1lvfgk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b964a067c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9649d5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9649d5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9649d5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3u1lvfgk                        0x00005588eba389d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b964a253460 __libc_start_main +
    245

    6    tmp3u1lvfgk                        0x00005588eba38479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    var\
    \ sortedArr = arr.filter {$0 >= 1 && $0 <= 9}.sorted()\n    sortedArr.reverse()\n\
    \    for i in sortedArr {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let numbers = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9]\n    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"]\n    var result = [String]()\n    for num\
    \ in arr {\n        if numbers.contains(num) {\n            result.append(names[numbers.index(of:\
    \ num)!])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpjiod3i4p/tmpjiod3i4p.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0e8de9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0e8ae0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0e8ae0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0e8adf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjiod3i4p                        0x000055825b4cd9f1 <unavailable> + 6641

    5    libc.so.6                          0x00002af0e8fd5460 __libc_start_main +
    245

    6    tmpjiod3i4p                        0x000055825b4cd499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let mapped = reversed.map\
    \ { String($0) }\n    return mapped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmplgr0ox6d/tmplgr0ox6d.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d09759c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d09450b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d09450988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d0944f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplgr0ox6d                        0x000055c0be90a9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b3d09945460 __libc_start_main +
    245

    6    tmplgr0ox6d                        0x000055c0be90a479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            continue\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    var\
    \ numbers: [Int] = []\n    for i in arr {\n        if i >= 1 && i <= 9 {\n   \
    \         numbers.append(i)\n        }\n    }\n    numbers.sort()\n    for i in\
    \ numbers.reversed() {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0 >= 1 &&\
    \ $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    return reversed.map({String($0)})\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmp5qn5yh8f/tmp5qn5yh8f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae442c5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae442954b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae442954988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4429537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5qn5yh8f                        0x000055d736b1a9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae442e49460 __libc_start_main +
    245

    6    tmp5qn5yh8f                        0x000055d736b1a479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    for i in sorted.reversed() {\n        if i > 0 && i < 10\
    \ {\n            switch i {\n            case 1:\n                result.append(\"\
    One\")\n            case 2:\n                result.append(\"Two\")\n        \
    \    case 3:\n                result.append(\"Three\")\n            case 4:\n\
    \                result.append(\"Four\")\n            case 5:\n              \
    \  result.append(\"Five\")\n            case 6:\n                result.append(\"\
    Six\")\n            case 7:\n                result.append(\"Seven\")\n      \
    \      case 8:\n                result.append(\"Eight\")\n            case 9:\n\
    \                result.append(\"Nine\")\n            default:\n             \
    \   break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    var\
    \ numbers: [Int] = []\n    for i in arr {\n        if i > 0 && i < 10 {\n    \
    \        numbers.append(i)\n        }\n    }\n    numbers.sort()\n    numbers.reverse()\n\
    \    for i in numbers {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let numbers = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9]\n    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"]\n    var result = [String]()\n    for i\
    \ in arr {\n        if numbers.contains(i) {\n            result.append(names[numbers.index(of:\
    \ i)!])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpkbw6ob8r/tmpkbw6ob8r.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6abaf8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6abac82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6abac82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6abac817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkbw6ob8r                        0x00005611feeeb9f1 <unavailable> + 6641

    5    libc.so.6                          0x00002b6abb177460 __libc_start_main +
    245

    6    tmpkbw6ob8r                        0x00005611feeeb499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({ $0 >= 1 &&\
    \ $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let stringArray\
    \ = reversed.map({ String($0) })\n    let result = stringArray.map({\n       \
    \ switch $0 {\n        case \"1\":\n            return \"One\"\n        case \"\
    2\":\n            return \"Two\"\n        case \"3\":\n            return \"Three\"\
    \n        case \"4\":\n            return \"Four\"\n        case \"5\":\n    \
    \        return \"Five\"\n        case \"6\":\n            return \"Six\"\n  \
    \      case \"7\":\n            return \"Seven\"\n        case \"8\":\n      \
    \      return \"Eight\"\n        case \"9\":\n            return \"Nine\"\n  \
    \      default:\n            return \"\"\n        }\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 > 0 &&\
    \ $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let names = reversed.map\
    \ { number in\n        switch number {\n        case 1: return \"One\"\n     \
    \   case 2: return \"Two\"\n        case 3: return \"Three\"\n        case 4:\
    \ return \"Four\"\n        case 5: return \"Five\"\n        case 6: return \"\
    Six\"\n        case 7: return \"Seven\"\n        case 8: return \"Eight\"\n  \
    \      case 9: return \"Nine\"\n        default: return \"\"\n        }\n    }\n\
    \    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var sorted\
    \ = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    sorted.reverse()\n    for\
    \ i in sorted {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for num in reversed\
    \ {\n        switch num {\n        case 1:\n            result.append(\"One\"\
    )\n        case 2:\n            result.append(\"Two\")\n        case 3:\n    \
    \        result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let strings =\
    \ reversed.map { String($0) }\n    return strings\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmps1m2j112/tmps1m2j112.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc5e132c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc5de29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc5de29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc5de287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1m2j112                        0x00005595651b89d1 <unavailable> + 6609

    5    libc.so.6                          0x00002adc5e31e460 __libc_start_main +
    245

    6    tmps1m2j112                        0x00005595651b8479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let names = reversed.map\
    \ { String($0) }\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp59q8bwlj/tmp59q8bwlj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae59e44dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae59e144b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae59e144988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae59e1437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59q8bwlj                        0x000055864f32f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae59e639460 __libc_start_main +
    245

    6    tmp59q8bwlj                        0x000055864f32f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let mapped = reversed.map\
    \ { String($0) }\n    return mapped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmplgr0ox6d/tmplgr0ox6d.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d09759c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d09450b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d09450988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d0944f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplgr0ox6d                        0x000055c0be90a9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b3d09945460 __libc_start_main +
    245

    6    tmplgr0ox6d                        0x000055c0be90a479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let names = reversed.map\
    \ { String($0) }\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp59q8bwlj/tmp59q8bwlj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae59e44dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae59e144b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae59e144988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae59e1437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59q8bwlj                        0x000055864f32f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae59e639460 __libc_start_main +
    245

    6    tmp59q8bwlj                        0x000055864f32f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({ $0 >= 1 &&\
    \ $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let names = reversed.map({\
    \ String($0) })\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpl0jnsdzb/tmpl0jnsdzb.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9843a7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9843773b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9843773988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98437727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl0jnsdzb                        0x0000563b564d39d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b9843c68460 __libc_start_main +
    245

    6    tmpl0jnsdzb                        0x0000563b564d3479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for num in reversed\
    \ {\n        if num == 1 {\n            result.append(\"One\")\n        } else\
    \ if num == 2 {\n            result.append(\"Two\")\n        } else if num ==\
    \ 3 {\n            result.append(\"Three\")\n        } else if num == 4 {\n  \
    \          result.append(\"Four\")\n        } else if num == 5 {\n           \
    \ result.append(\"Five\")\n        } else if num == 6 {\n            result.append(\"\
    Six\")\n        } else if num == 7 {\n            result.append(\"Seven\")\n \
    \       } else if num == 8 {\n            result.append(\"Eight\")\n        }\
    \ else if num == 9 {\n            result.append(\"Nine\")\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    let\
    \ sorted = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            continue\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sortedArr\
    \ = arr.sorted()\n    let reversedArr = sortedArr.reversed()\n    for i in reversedArr\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let strings =\
    \ reversed.map { String($0) }\n    let result = strings.map {\n        switch\
    \ $0 {\n        case \"1\": return \"One\"\n        case \"2\": return \"Two\"\
    \n        case \"3\": return \"Three\"\n        case \"4\": return \"Four\"\n\
    \        case \"5\": return \"Five\"\n        case \"6\": return \"Six\"\n   \
    \     case \"7\": return \"Seven\"\n        case \"8\": return \"Eight\"\n   \
    \     case \"9\": return \"Nine\"\n        default: return \"\"\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var sortedArr\
    \ = arr.filter({$0 >= 1 && $0 <= 9}).sorted()\n    sortedArr.reverse()\n    for\
    \ num in sortedArr {\n        switch num {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let strings =\
    \ reversed.map { String($0) }\n    return strings\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmps1m2j112/tmps1m2j112.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc5e132c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc5de29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc5de29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc5de287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1m2j112                        0x00005595651b89d1 <unavailable> + 6609

    5    libc.so.6                          0x00002adc5e31e460 __libc_start_main +
    245

    6    tmps1m2j112                        0x00005595651b8479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0 > 0 &&\
    \ $0 < 10}).sorted()\n    let reversed = sorted.reversed()\n    let result = reversed.map({String($0)})\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp9a6n2sgx/tmp9a6n2sgx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5690bfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56908f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56908f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56908f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9a6n2sgx                        0x000055e741ee99d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5690de8460 __libc_start_main +
    245

    6    tmp9a6n2sgx                        0x000055e741ee9479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    return reversed.map\
    \ { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp3u1lvfgk/tmp3u1lvfgk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b964a067c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9649d5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9649d5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9649d5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3u1lvfgk                        0x00005588eba389d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b964a253460 __libc_start_main +
    245

    6    tmp3u1lvfgk                        0x00005588eba38479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    var\
    \ sortedArr = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    sortedArr.reverse()\n\
    \    for i in sortedArr {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var sorted\
    \ = arr.filter({$0 >= 1 && $0 <= 9}).sorted()\n    sorted.reverse()\n    for i\
    \ in sorted {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let strings =\
    \ reversed.map { String($0) }\n    let result = strings.map {\n        switch\
    \ $0 {\n        case \"1\": return \"One\"\n        case \"2\": return \"Two\"\
    \n        case \"3\": return \"Three\"\n        case \"4\": return \"Four\"\n\
    \        case \"5\": return \"Five\"\n        case \"6\": return \"Six\"\n   \
    \     case \"7\": return \"Seven\"\n        case \"8\": return \"Eight\"\n   \
    \     case \"9\": return \"Nine\"\n        default: return \"\"\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    let\
    \ numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for number in arr {\n        if numbers.contains(number)\
    \ {\n            result.append(String(number))\n        }\n    }\n    result.sort()\n\
    \    result.reverse()\n    var resultString: [String] = []\n    for number in\
    \ result {\n        switch number {\n        case \"1\":\n            resultString.append(\"\
    One\")\n        case \"2\":\n            resultString.append(\"Two\")\n      \
    \  case \"3\":\n            resultString.append(\"Three\")\n        case \"4\"\
    :\n            resultString.append(\"Four\")\n        case \"5\":\n          \
    \  resultString.append(\"Five\")\n        case \"6\":\n            resultString.append(\"\
    Six\")\n        case \"7\":\n            resultString.append(\"Seven\")\n    \
    \    case \"8\":\n            resultString.append(\"Eight\")\n        case \"\
    9\":\n            resultString.append(\"Nine\")\n        default:\n          \
    \  break\n        }\n    }\n    return resultString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var sorted\
    \ = arr.filter({$0 >= 1 && $0 <= 9}).sorted()\n    sorted.reverse()\n    for i\
    \ in sorted {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    let\
    \ sortedArr = arr.sorted(by: <)\n    let reversedArr = sortedArr.reversed()\n\
    \    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"]\n    for num in reversedArr {\n        if num >\
    \ 0 && num < 10 {\n            result.append(names[num - 1])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let numbers\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    let names = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    for i in arr\
    \ {\n        if numbers.contains(i) {\n            result.append(names[numbers.index(of:\
    \ i)!])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpiqkn5ux1/tmpiqkn5ux1.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aace6876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aace656db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aace656d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aace656c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqkn5ux1                        0x0000558ba1e9d9f1 <unavailable> + 6641

    5    libc.so.6                          0x00002aace6a62460 __libc_start_main +
    245

    6    tmpiqkn5ux1                        0x0000558ba1e9d499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let strings =\
    \ reversed.map { String($0) }\n    let result = strings.map {\n        switch\
    \ $0 {\n        case \"1\": return \"One\"\n        case \"2\": return \"Two\"\
    \n        case \"3\": return \"Three\"\n        case \"4\": return \"Four\"\n\
    \        case \"5\": return \"Five\"\n        case \"6\": return \"Six\"\n   \
    \     case \"7\": return \"Seven\"\n        case \"8\": return \"Eight\"\n   \
    \     case \"9\": return \"Nine\"\n        default: return \"\"\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let result = reversed.map\
    \ { String($0) }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp7zf8wsxj/tmp7zf8wsxj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba881431c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba881128b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba881128988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8811277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7zf8wsxj                        0x000055de6ee6f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ba88161d460 __libc_start_main +
    245

    6    tmp7zf8wsxj                        0x000055de6ee6f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    let\
    \ sorted = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    let\
    \ sorted = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        if i == 1 {\n            result.append(\"One\")\n        } else if\
    \ i == 2 {\n            result.append(\"Two\")\n        } else if i == 3 {\n \
    \           result.append(\"Three\")\n        } else if i == 4 {\n           \
    \ result.append(\"Four\")\n        } else if i == 5 {\n            result.append(\"\
    Five\")\n        } else if i == 6 {\n            result.append(\"Six\")\n    \
    \    } else if i == 7 {\n            result.append(\"Seven\")\n        } else\
    \ if i == 8 {\n            result.append(\"Eight\")\n        } else if i == 9\
    \ {\n            result.append(\"Nine\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sortedArr = arr.filter({$0 > 0\
    \ && $0 < 10}).sorted()\n    let reversedArr = sortedArr.reversed()\n    let result\
    \ = reversedArr.map({String($0)})\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpro1ldp1u/tmpro1ldp1u.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2217d54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2217a4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2217a4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2217a4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpro1ldp1u                        0x00005601e928d9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b2217f40460 __libc_start_main +
    245

    6    tmpro1ldp1u                        0x00005601e928d479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    var\
    \ sortedArr = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    sortedArr.reverse()\n\
    \    for i in sortedArr {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var sorted\
    \ = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    sorted.reverse()\n    for\
    \ i in sorted {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let result = reversed.map\
    \ { String($0) }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp7zf8wsxj/tmp7zf8wsxj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba881431c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba881128b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba881128988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8811277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7zf8wsxj                        0x000055de6ee6f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ba88161d460 __libc_start_main +
    245

    6    tmp7zf8wsxj                        0x000055de6ee6f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    var\
    \ sortedArr = arr.filter({$0 >= 1 && $0 <= 9}).sorted()\n    sortedArr.reverse()\n\
    \    for i in sortedArr {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let numbers = [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    let\
    \ sorted = arr.filter { $0 > 0 && $0 < 10 }.sorted()\n    return sorted.reversed().map\
    \ { numbers[$0 - 1] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let mapped = reversed.map\
    \ { String($0) }\n    let replaced = mapped.map { $0.replacingOccurrences(of:\
    \ \"1\", with: \"One\") }\n    let replaced2 = replaced.map { $0.replacingOccurrences(of:\
    \ \"2\", with: \"Two\") }\n    let replaced3 = replaced2.map { $0.replacingOccurrences(of:\
    \ \"3\", with: \"Three\") }\n    let replaced4 = replaced3.map { $0.replacingOccurrences(of:\
    \ \"4\", with: \"Four\") }\n    let replaced5 = replaced4.map { $0.replacingOccurrences(of:\
    \ \"5\", with: \"Five\") }\n    let replaced6 = replaced5.map { $0.replacingOccurrences(of:\
    \ \"6\", with: \"Six\") }\n    let replaced7 = replaced6.map { $0.replacingOccurrences(of:\
    \ \"7\", with: \"Seven\") }\n    let replaced8 = replaced7.map { $0.replacingOccurrences(of:\
    \ \"8\", with: \"Eight\") }\n    let replaced9 = replaced8.map { $0.replacingOccurrences(of:\
    \ \"9\", with: \"Nine\") }\n    return replaced9\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgs_tgaqg.swift:22:36: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let replaced = mapped.map { $0.replacingOccurrences(of:\
    \ \"1\", with: \"One\") }\n                                ~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let numbers = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9]\n    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"]\n    var result = [String]()\n    for i\
    \ in arr {\n        if numbers.contains(i) {\n            result.append(names[numbers.index(of:\
    \ i)!])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpkbw6ob8r/tmpkbw6ob8r.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6abaf8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6abac82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6abac82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6abac817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkbw6ob8r                        0x00005611feeeb9f1 <unavailable> + 6641

    5    libc.so.6                          0x00002b6abb177460 __libc_start_main +
    245

    6    tmpkbw6ob8r                        0x00005611feeeb499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sortedArr = arr.filter({$0 >= 1\
    \ && $0 <= 9}).sorted()\n    let reversedArr = sortedArr.reversed()\n    let result\
    \ = reversedArr.map({String($0)})\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpdxhqyx7e/tmpdxhqyx7e.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b703efe9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b703ece0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b703ece0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703ecdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdxhqyx7e                        0x00005590afb919d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b703f1d5460 __libc_start_main +
    245

    6    tmpdxhqyx7e                        0x00005590afb91479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        if i == 1 {\n            result.append(\"One\")\n        } else if\
    \ i == 2 {\n            result.append(\"Two\")\n        } else if i == 3 {\n \
    \           result.append(\"Three\")\n        } else if i == 4 {\n           \
    \ result.append(\"Four\")\n        } else if i == 5 {\n            result.append(\"\
    Five\")\n        } else if i == 6 {\n            result.append(\"Six\")\n    \
    \    } else if i == 7 {\n            result.append(\"Seven\")\n        } else\
    \ if i == 8 {\n            result.append(\"Eight\")\n        } else if i == 9\
    \ {\n            result.append(\"Nine\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted(by: {$0 < $1})\n    let reversed = sorted.reversed()\n    for i\
    \ in reversed {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let mapped = reversed.map\
    \ { String($0) }\n    return mapped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmplgr0ox6d/tmplgr0ox6d.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d09759c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d09450b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d09450988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d0944f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplgr0ox6d                        0x000055c0be90a9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b3d09945460 __libc_start_main +
    245

    6    tmplgr0ox6d                        0x000055c0be90a479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0 >= 1 &&\
    \ $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    let mapped = reversed.map({String($0)})\n\
    \    return mapped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmph4eh94u8/tmph4eh94u8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b366b896c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b366b58db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b366b58d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b366b58c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph4eh94u8                        0x00005631d1c5f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b366ba82460 __libc_start_main +
    245

    6    tmph4eh94u8                        0x00005631d1c5f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    let\
    \ numbers = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    let sortedArr = arr.sorted()\n    for num in sortedArr.reversed()\
    \ {\n        if num >= 1 && num <= 9 {\n            result.append(numbers[num\
    \ - 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let mapped = reversed.map\
    \ { String($0) }\n    return mapped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmplgr0ox6d/tmplgr0ox6d.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d09759c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d09450b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d09450988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d0944f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplgr0ox6d                        0x000055c0be90a9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b3d09945460 __libc_start_main +
    245

    6    tmplgr0ox6d                        0x000055c0be90a479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let strings =\
    \ reversed.map { String($0) }\n    let result = strings.map { number_to_string($0)\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmprbhpdxb8.swift:22:32: error: cannot find 'number_to_string' in\
    \ scope\n    let result = strings.map { number_to_string($0) }\n             \
    \                  ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({ $0 > 0 &&\
    \ $0 < 10 }).sorted()\n    let reversed = sorted.reversed()\n    let names = reversed.map({\
    \ String($0) })\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmptwzs98_b/tmptwzs98_b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bdc4a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bdc1a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bdc1a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bdc19f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptwzs98_b                        0x0000562aff9c49d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b9bdc695460 __libc_start_main +
    245

    6    tmptwzs98_b                        0x0000562aff9c4479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013938
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    return reversed.map\
    \ { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp3u1lvfgk/tmp3u1lvfgk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b964a067c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9649d5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9649d5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9649d5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3u1lvfgk                        0x00005588eba389d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b964a253460 __libc_start_main +
    245

    6    tmp3u1lvfgk                        0x00005588eba38479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sortedArr\
    \ = arr.sorted()\n    let reversedArr = sortedArr.reversed()\n    for i in reversedArr\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    return reversed.map\
    \ { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp3u1lvfgk/tmp3u1lvfgk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b964a067c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9649d5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9649d5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9649d5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3u1lvfgk                        0x00005588eba389d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b964a253460 __libc_start_main +
    245

    6    tmp3u1lvfgk                        0x00005588eba38479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    let\
    \ numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    let names = [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    for\
    \ number in arr {\n        if numbers.contains(number) {\n            result.append(names[numbers.index(of:\
    \ number)!])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpjp0c2ye9/tmpjp0c2ye9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af18b721c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af18b418b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af18b418988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af18b4177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjp0c2ye9                        0x000055adda6089a1 <unavailable> + 6561

    5    libc.so.6                          0x00002af18b90d460 __libc_start_main +
    245

    6    tmpjp0c2ye9                        0x000055adda608449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013938
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    let\
    \ sorted = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        if i > 0 && i < 10 {\n            switch i {\n            case 1:\n\
    \                result.append(\"One\")\n            case 2:\n               \
    \ result.append(\"Two\")\n            case 3:\n                result.append(\"\
    Three\")\n            case 4:\n                result.append(\"Four\")\n     \
    \       case 5:\n                result.append(\"Five\")\n            case 6:\n\
    \                result.append(\"Six\")\n            case 7:\n               \
    \ result.append(\"Seven\")\n            case 8:\n                result.append(\"\
    Eight\")\n            case 9:\n                result.append(\"Nine\")\n     \
    \       default:\n                break\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpafr26m3a/tmpafr26m3a.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4b62bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4b5fb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4b5fb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4b5fb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafr26m3a                        0x00005591414c8621 <unavailable> + 5665

    5    libc.so.6                          0x00002ba4b64a7460 __libc_start_main +
    245

    6    tmpafr26m3a                        0x00005591414c80c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let names = reversed.map\
    \ { String($0) }\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp59q8bwlj/tmp59q8bwlj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae59e44dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae59e144b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae59e144988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae59e1437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59q8bwlj                        0x000055864f32f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae59e639460 __libc_start_main +
    245

    6    tmp59q8bwlj                        0x000055864f32f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    return reversed.map\
    \ { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp3u1lvfgk/tmp3u1lvfgk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b964a067c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9649d5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9649d5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9649d5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3u1lvfgk                        0x00005588eba389d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b964a253460 __libc_start_main +
    245

    6    tmp3u1lvfgk                        0x00005588eba38479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let numbers = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9]\n    var result: [String] = []\n    for number in arr {\n        if numbers.contains(number)\
    \ {\n            result.append(String(number))\n        }\n    }\n    result.sort()\n\
    \    result.reverse()\n    var resultString: [String] = []\n    for number in\
    \ result {\n        switch number {\n        case \"1\":\n            resultString.append(\"\
    One\")\n        case \"2\":\n            resultString.append(\"Two\")\n      \
    \  case \"3\":\n            resultString.append(\"Three\")\n        case \"4\"\
    :\n            resultString.append(\"Four\")\n        case \"5\":\n          \
    \  resultString.append(\"Five\")\n        case \"6\":\n            resultString.append(\"\
    Six\")\n        case \"7\":\n            resultString.append(\"Seven\")\n    \
    \    case \"8\":\n            resultString.append(\"Eight\")\n        case \"\
    9\":\n            resultString.append(\"Nine\")\n        default:\n          \
    \  break\n        }\n    }\n    return resultString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 > 0 &&\
    \ $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let strings =\
    \ reversed.map { String($0) }\n    let result = strings.map {\n        switch\
    \ $0 {\n        case \"1\": return \"One\"\n        case \"2\": return \"Two\"\
    \n        case \"3\": return \"Three\"\n        case \"4\": return \"Four\"\n\
    \        case \"5\": return \"Five\"\n        case \"6\": return \"Six\"\n   \
    \     case \"7\": return \"Seven\"\n        case \"8\": return \"Eight\"\n   \
    \     case \"9\": return \"Nine\"\n        default: return \"\"\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var arr\
    \ = arr.filter { $0 >= 1 && $0 <= 9 }\n    arr.sort()\n    arr.reverse()\n   \
    \ for i in arr {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let mapped = reversed.map\
    \ { String($0) }\n    return mapped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmplgr0ox6d/tmplgr0ox6d.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d09759c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d09450b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d09450988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d0944f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplgr0ox6d                        0x000055c0be90a9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b3d09945460 __libc_start_main +
    245

    6    tmplgr0ox6d                        0x000055c0be90a479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let names = reversed.map\
    \ { String($0) }\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp59q8bwlj/tmp59q8bwlj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae59e44dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae59e144b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae59e144988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae59e1437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59q8bwlj                        0x000055864f32f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae59e639460 __libc_start_main +
    245

    6    tmp59q8bwlj                        0x000055864f32f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let numbers = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9]\n    var result = [String]()\n    for number in arr {\n        if numbers.contains(number)\
    \ {\n            result.append(String(number))\n        }\n    }\n    result.sort()\n\
    \    result.reverse()\n    for (index, number) in result.enumerated() {\n    \
    \    switch number {\n        case \"1\":\n            result[index] = \"One\"\
    \n        case \"2\":\n            result[index] = \"Two\"\n        case \"3\"\
    :\n            result[index] = \"Three\"\n        case \"4\":\n            result[index]\
    \ = \"Four\"\n        case \"5\":\n            result[index] = \"Five\"\n    \
    \    case \"6\":\n            result[index] = \"Six\"\n        case \"7\":\n \
    \           result[index] = \"Seven\"\n        case \"8\":\n            result[index]\
    \ = \"Eight\"\n        case \"9\":\n            result[index] = \"Nine\"\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted(by: <)\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        if i == 1 {\n            result.append(\"One\")\n        } else if\
    \ i == 2 {\n            result.append(\"Two\")\n        } else if i == 3 {\n \
    \           result.append(\"Three\")\n        } else if i == 4 {\n           \
    \ result.append(\"Four\")\n        } else if i == 5 {\n            result.append(\"\
    Five\")\n        } else if i == 6 {\n            result.append(\"Six\")\n    \
    \    } else if i == 7 {\n            result.append(\"Seven\")\n        } else\
    \ if i == 8 {\n            result.append(\"Eight\")\n        } else if i == 9\
    \ {\n            result.append(\"Nine\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    let\
    \ numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    let names = [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    for\
    \ i in arr {\n        if numbers.contains(i) {\n            result.append(names[numbers.index(of:\
    \ i)!])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmptodxvv_1/tmptodxvv_1.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affb2ff9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affb2cf0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affb2cf0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affb2cef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptodxvv_1                        0x000055be007e79a1 <unavailable> + 6561

    5    libc.so.6                          0x00002affb31e5460 __libc_start_main +
    245

    6    tmptodxvv_1                        0x000055be007e7449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013938
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpafr26m3a/tmpafr26m3a.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4b62bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4b5fb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4b5fb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4b5fb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafr26m3a                        0x00005591414c8621 <unavailable> + 5665

    5    libc.so.6                          0x00002ba4b64a7460 __libc_start_main +
    245

    6    tmpafr26m3a                        0x00005591414c80c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    return reversed.map\
    \ { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp3u1lvfgk/tmp3u1lvfgk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b964a067c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9649d5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9649d5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9649d5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3u1lvfgk                        0x00005588eba389d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b964a253460 __libc_start_main +
    245

    6    tmp3u1lvfgk                        0x00005588eba38479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    return sorted.reversed().map { String($0) }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpjvapgzdv/tmpjvapgzdv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a786a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a7839eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a7839e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a7839d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjvapgzdv                        0x000055edaf75b9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5a78893460 __libc_start_main +
    245

    6    tmpjvapgzdv                        0x000055edaf75b479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for num in reversed\
    \ {\n        switch num {\n        case 1:\n            result.append(\"One\"\
    )\n        case 2:\n            result.append(\"Two\")\n        case 3:\n    \
    \        result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        if i == 1 {\n            result.append(\"One\")\n        } else if\
    \ i == 2 {\n            result.append(\"Two\")\n        } else if i == 3 {\n \
    \           result.append(\"Three\")\n        } else if i == 4 {\n           \
    \ result.append(\"Four\")\n        } else if i == 5 {\n            result.append(\"\
    Five\")\n        } else if i == 6 {\n            result.append(\"Six\")\n    \
    \    } else if i == 7 {\n            result.append(\"Seven\")\n        } else\
    \ if i == 8 {\n            result.append(\"Eight\")\n        } else if i == 9\
    \ {\n            result.append(\"Nine\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    return reversed.map\
    \ { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp3u1lvfgk/tmp3u1lvfgk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b964a067c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9649d5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9649d5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9649d5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3u1lvfgk                        0x00005588eba389d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b964a253460 __libc_start_main +
    245

    6    tmp3u1lvfgk                        0x00005588eba38479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted(by: <)\n    let reversed = sorted.reversed()\n    for num in reversed\
    \ {\n        switch num {\n        case 1:\n            result.append(\"One\"\
    )\n        case 2:\n            result.append(\"Two\")\n        case 3:\n    \
    \        result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    for i in sorted.reversed() {\n        switch i {\n     \
    \   case 1:\n            result.append(\"One\")\n        case 2:\n           \
    \ result.append(\"Two\")\n        case 3:\n            result.append(\"Three\"\
    )\n        case 4:\n            result.append(\"Four\")\n        case 5:\n   \
    \         result.append(\"Five\")\n        case 6:\n            result.append(\"\
    Six\")\n        case 7:\n            result.append(\"Seven\")\n        case 8:\n\
    \            result.append(\"Eight\")\n        case 9:\n            result.append(\"\
    Nine\")\n        default:\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    let\
    \ numbers = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    let sorted = arr.sorted()\n    let reversed = sorted.reversed()\n\
    \    for i in reversed {\n        if i > 0 && i < 10 {\n            result.append(numbers[i\
    \ - 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({ $0 >= 1 &&\
    \ $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let strings =\
    \ reversed.map({ String($0) })\n    return strings\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpd69txh18/tmpd69txh18.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c1c1bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c1beb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c1beb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c1beb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd69txh18                        0x0000562cc32839d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b1c1c3aa460 __libc_start_main +
    245

    6    tmpd69txh18                        0x0000562cc3283479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013938
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    let\
    \ dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5:\
    \ \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    let sorted\
    \ = arr.sorted().filter { $0 >= 1 && $0 <= 9 }\n    for i in sorted.reversed()\
    \ {\n        result.append(dict[i]!)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0 > 0 &&\
    \ $0 < 10}).sorted()\n    let reversed = sorted.reversed()\n    let result = reversed.map({String($0)})\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp9a6n2sgx/tmp9a6n2sgx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5690bfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56908f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56908f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56908f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9a6n2sgx                        0x000055e741ee99d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b5690de8460 __libc_start_main +
    245

    6    tmp9a6n2sgx                        0x000055e741ee9479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sortedArr\
    \ = arr.sorted()\n    let reversedArr = sortedArr.reversed()\n    for i in reversedArr\
    \ {\n        if i == 1 {\n            result.append(\"One\")\n        } else if\
    \ i == 2 {\n            result.append(\"Two\")\n        } else if i == 3 {\n \
    \           result.append(\"Three\")\n        } else if i == 4 {\n           \
    \ result.append(\"Four\")\n        } else if i == 5 {\n            result.append(\"\
    Five\")\n        } else if i == 6 {\n            result.append(\"Six\")\n    \
    \    } else if i == 7 {\n            result.append(\"Seven\")\n        } else\
    \ if i == 8 {\n            result.append(\"Eight\")\n        } else if i == 9\
    \ {\n            result.append(\"Nine\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    return arr.filter { $0 >= 1 && $0 <=\
    \ 9 }.sorted().reversed().map {\n        switch $0 {\n        case 1: return \"\
    One\"\n        case 2: return \"Two\"\n        case 3: return \"Three\"\n    \
    \    case 4: return \"Four\"\n        case 5: return \"Five\"\n        case 6:\
    \ return \"Six\"\n        case 7: return \"Seven\"\n        case 8: return \"\
    Eight\"\n        case 9: return \"Nine\"\n        default: return \"\"\n     \
    \   }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let mapped = reversed.map\
    \ { String($0) }\n    return mapped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmplgr0ox6d/tmplgr0ox6d.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d09759c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d09450b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d09450988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d0944f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplgr0ox6d                        0x000055c0be90a9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b3d09945460 __libc_start_main +
    245

    6    tmplgr0ox6d                        0x000055c0be90a479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        if i == 1 {\n            result.append(\"One\")\n        } else if\
    \ i == 2 {\n            result.append(\"Two\")\n        } else if i == 3 {\n \
    \           result.append(\"Three\")\n        } else if i == 4 {\n           \
    \ result.append(\"Four\")\n        } else if i == 5 {\n            result.append(\"\
    Five\")\n        } else if i == 6 {\n            result.append(\"Six\")\n    \
    \    } else if i == 7 {\n            result.append(\"Seven\")\n        } else\
    \ if i == 8 {\n            result.append(\"Eight\")\n        } else if i == 9\
    \ {\n            result.append(\"Nine\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    let\
    \ sortedArr = arr.sorted(by: <)\n    let reversedArr = sortedArr.reversed()\n\
    \    for i in reversedArr {\n        switch i {\n        case 1:\n           \
    \ result.append(\"One\")\n        case 2:\n            result.append(\"Two\")\n\
    \        case 3:\n            result.append(\"Three\")\n        case 4:\n    \
    \        result.append(\"Four\")\n        case 5:\n            result.append(\"\
    Five\")\n        case 6:\n            result.append(\"Six\")\n        case 7:\n\
    \            result.append(\"Seven\")\n        case 8:\n            result.append(\"\
    Eight\")\n        case 9:\n            result.append(\"Nine\")\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    var\
    \ sortedArr = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    sortedArr.reverse()\n\
    \    for i in sortedArr {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var sorted\
    \ = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    sorted.reverse()\n    for\
    \ i in sorted {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for num in reversed\
    \ {\n        if num >= 1 && num <= 9 {\n            switch num {\n           \
    \ case 1:\n                result.append(\"One\")\n            case 2:\n     \
    \           result.append(\"Two\")\n            case 3:\n                result.append(\"\
    Three\")\n            case 4:\n                result.append(\"Four\")\n     \
    \       case 5:\n                result.append(\"Five\")\n            case 6:\n\
    \                result.append(\"Six\")\n            case 7:\n               \
    \ result.append(\"Seven\")\n            case 8:\n                result.append(\"\
    Eight\")\n            case 9:\n                result.append(\"Nine\")\n     \
    \       default:\n                break\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sortedArr\
    \ = arr.sorted()\n    let reversedArr = sortedArr.reversed()\n    for num in reversedArr\
    \ {\n        switch num {\n        case 1:\n            result.append(\"One\"\
    )\n        case 2:\n            result.append(\"Two\")\n        case 3:\n    \
    \        result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let numbers = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9]\n    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"]\n    var result = [String]()\n    for num\
    \ in arr {\n        if numbers.contains(num) {\n            result.append(names[numbers.index(of:\
    \ num)!])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpjiod3i4p/tmpjiod3i4p.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0e8de9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0e8ae0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0e8ae0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0e8adf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjiod3i4p                        0x000055825b4cd9f1 <unavailable> + 6641

    5    libc.so.6                          0x00002af0e8fd5460 __libc_start_main +
    245

    6    tmpjiod3i4p                        0x000055825b4cd499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sortedArr\
    \ = arr.sorted()\n    let reversedArr = sortedArr.reversed()\n    for num in reversedArr\
    \ {\n        switch num {\n        case 1:\n            result.append(\"One\"\
    )\n        case 2:\n            result.append(\"Two\")\n        case 3:\n    \
    \        result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        if i == 1 {\n            result.append(\"One\")\n        } else if\
    \ i == 2 {\n            result.append(\"Two\")\n        } else if i == 3 {\n \
    \           result.append(\"Three\")\n        } else if i == 4 {\n           \
    \ result.append(\"Four\")\n        } else if i == 5 {\n            result.append(\"\
    Five\")\n        } else if i == 6 {\n            result.append(\"Six\")\n    \
    \    } else if i == 7 {\n            result.append(\"Seven\")\n        } else\
    \ if i == 8 {\n            result.append(\"Eight\")\n        } else if i == 9\
    \ {\n            result.append(\"Nine\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let names = reversed.map\
    \ { String($0) }\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp59q8bwlj/tmp59q8bwlj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae59e44dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae59e144b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae59e144988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae59e1437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59q8bwlj                        0x000055864f32f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae59e639460 __libc_start_main +
    245

    6    tmp59q8bwlj                        0x000055864f32f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    return reversed.map\
    \ {\n        switch $0 {\n        case 1: return \"One\"\n        case 2: return\
    \ \"Two\"\n        case 3: return \"Three\"\n        case 4: return \"Four\"\n\
    \        case 5: return \"Five\"\n        case 6: return \"Six\"\n        case\
    \ 7: return \"Seven\"\n        case 8: return \"Eight\"\n        case 9: return\
    \ \"Nine\"\n        default: return \"\"\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    for i in sorted.reversed() {\n        if i >= 1 && i <=\
    \ 9 {\n            switch i {\n            case 1:\n                result.append(\"\
    One\")\n            case 2:\n                result.append(\"Two\")\n        \
    \    case 3:\n                result.append(\"Three\")\n            case 4:\n\
    \                result.append(\"Four\")\n            case 5:\n              \
    \  result.append(\"Five\")\n            case 6:\n                result.append(\"\
    Six\")\n            case 7:\n                result.append(\"Seven\")\n      \
    \      case 8:\n                result.append(\"Eight\")\n            case 9:\n\
    \                result.append(\"Nine\")\n            default:\n             \
    \   break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let names = reversed.map\
    \ { String($0) }\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp59q8bwlj/tmp59q8bwlj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae59e44dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae59e144b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae59e144988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae59e1437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59q8bwlj                        0x000055864f32f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae59e639460 __libc_start_main +
    245

    6    tmp59q8bwlj                        0x000055864f32f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let mapped = reversed.map\
    \ { String($0) }\n    return mapped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmplgr0ox6d/tmplgr0ox6d.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d09759c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d09450b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d09450988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d0944f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplgr0ox6d                        0x000055c0be90a9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b3d09945460 __libc_start_main +
    245

    6    tmplgr0ox6d                        0x000055c0be90a479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let names = reversed.map\
    \ { String($0) }\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp59q8bwlj/tmp59q8bwlj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae59e44dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae59e144b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae59e144988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae59e1437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59q8bwlj                        0x000055864f32f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae59e639460 __libc_start_main +
    245

    6    tmp59q8bwlj                        0x000055864f32f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    var\
    \ sortedArr = arr.filter({$0 >= 1 && $0 <= 9}).sorted()\n    sortedArr.reverse()\n\
    \    for i in sortedArr {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({ $0 >= 1 &&\
    \ $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let names = reversed.map({\
    \ String($0) })\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpl0jnsdzb/tmpl0jnsdzb.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9843a7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9843773b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9843773988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98437727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl0jnsdzb                        0x0000563b564d39d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b9843c68460 __libc_start_main +
    245

    6    tmpl0jnsdzb                        0x0000563b564d3479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sortedArray\
    \ = arr.sorted(by: <)\n    let reversedArray = sortedArray.reversed()\n    for\
    \ number in reversedArray {\n        switch number {\n        case 1:\n      \
    \      result.append(\"One\")\n        case 2:\n            result.append(\"Two\"\
    )\n        case 3:\n            result.append(\"Three\")\n        case 4:\n  \
    \          result.append(\"Four\")\n        case 5:\n            result.append(\"\
    Five\")\n        case 6:\n            result.append(\"Six\")\n        case 7:\n\
    \            result.append(\"Seven\")\n        case 8:\n            result.append(\"\
    Eight\")\n        case 9:\n            result.append(\"Nine\")\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    for i\
    \ in arr {\n        if i == 1 {\n            result.append(\"One\")\n        }\
    \ else if i == 2 {\n            result.append(\"Two\")\n        } else if i ==\
    \ 3 {\n            result.append(\"Three\")\n        } else if i == 4 {\n    \
    \        result.append(\"Four\")\n        } else if i == 5 {\n            result.append(\"\
    Five\")\n        } else if i == 6 {\n            result.append(\"Six\")\n    \
    \    } else if i == 7 {\n            result.append(\"Seven\")\n        } else\
    \ if i == 8 {\n            result.append(\"Eight\")\n        } else if i == 9\
    \ {\n            result.append(\"Nine\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpz0pbms8t/tmpz0pbms8t.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5843d77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5843a6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5843a6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5843a6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz0pbms8t                        0x0000555876e07841 <unavailable> + 6209

    5    libc.so.6                          0x00002b5843f63460 __libc_start_main +
    245

    6    tmpz0pbms8t                        0x0000555876e072e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let names = reversed.map\
    \ { number -> String in\n        switch number {\n        case 1:\n          \
    \  return \"One\"\n        case 2:\n            return \"Two\"\n        case 3:\n\
    \            return \"Three\"\n        case 4:\n            return \"Four\"\n\
    \        case 5:\n            return \"Five\"\n        case 6:\n            return\
    \ \"Six\"\n        case 7:\n            return \"Seven\"\n        case 8:\n  \
    \          return \"Eight\"\n        case 9:\n            return \"Nine\"\n  \
    \      default:\n            return \"\"\n        }\n    }\n    return names\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    for i\
    \ in arr {\n        if i > 0 && i < 10 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            result[i] = \"\"\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let numbers = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9]\n    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"]\n    var result = [String]()\n    for i\
    \ in arr {\n        if numbers.contains(i) {\n            result.append(names[numbers.index(of:\
    \ i)!])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpkbw6ob8r/tmpkbw6ob8r.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6abaf8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6abac82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6abac82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6abac817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkbw6ob8r                        0x00005611feeeb9f1 <unavailable> + 6641

    5    libc.so.6                          0x00002b6abb177460 __libc_start_main +
    245

    6    tmpkbw6ob8r                        0x00005611feeeb499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpafr26m3a/tmpafr26m3a.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4b62bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4b5fb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4b5fb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4b5fb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafr26m3a                        0x00005591414c8621 <unavailable> + 5665

    5    libc.so.6                          0x00002ba4b64a7460 __libc_start_main +
    245

    6    tmpafr26m3a                        0x00005591414c80c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let result = reversed.map\
    \ { String($0) }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp7zf8wsxj/tmp7zf8wsxj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba881431c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba881128b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba881128988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8811277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7zf8wsxj                        0x000055de6ee6f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ba88161d460 __libc_start_main +
    245

    6    tmp7zf8wsxj                        0x000055de6ee6f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for num in reversed\
    \ {\n        switch num {\n        case 1:\n            result.append(\"One\"\
    )\n        case 2:\n            result.append(\"Two\")\n        case 3:\n    \
    \        result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    let\
    \ sorted = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        switch i {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result: [String] = []\n    let\
    \ dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5:\
    \ \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    let sorted\
    \ = arr.sorted(by: {$0 < $1})\n    let reversed = sorted.reversed()\n    for i\
    \ in reversed {\n        if i > 0 && i < 10 {\n            result.append(dict[i]!)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let names = reversed.map\
    \ { String($0) }\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp59q8bwlj/tmp59q8bwlj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae59e44dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae59e144b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae59e144988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae59e1437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59q8bwlj                        0x000055864f32f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae59e639460 __libc_start_main +
    245

    6    tmp59q8bwlj                        0x000055864f32f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for num in reversed\
    \ {\n        switch num {\n        case 1:\n            result.append(\"One\"\
    )\n        case 2:\n            result.append(\"Two\")\n        case 3:\n    \
    \        result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            continue\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let numbers = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9]\n    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"]\n    var result: [String] = []\n    var\
    \ sortedArr = arr.filter { numbers.contains($0) }.sorted()\n    sortedArr.reverse()\n\
    \    for i in sortedArr {\n        result.append(names[numbers.index(of: i)!])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sortedArr\
    \ = arr.sorted()\n    let reversedArr = sortedArr.reversed()\n    for num in reversedArr\
    \ {\n        switch num {\n        case 1:\n            result.append(\"One\"\
    )\n        case 2:\n            result.append(\"Two\")\n        case 3:\n    \
    \        result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            continue\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let mapped = reversed.map\
    \ { String($0) }\n    return mapped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmplgr0ox6d/tmplgr0ox6d.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d09759c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d09450b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d09450988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d0944f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplgr0ox6d                        0x000055c0be90a9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b3d09945460 __libc_start_main +
    245

    6    tmplgr0ox6d                        0x000055c0be90a479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    if arr.count\
    \ == 0 {\n        return result\n    }\n    let sorted = arr.sorted()\n    let\
    \ reversed = sorted.reversed()\n    for i in reversed {\n        switch i {\n\
    \        case 1:\n            result.append(\"One\")\n        case 2:\n      \
    \      result.append(\"Two\")\n        case 3:\n            result.append(\"Three\"\
    )\n        case 4:\n            result.append(\"Four\")\n        case 5:\n   \
    \         result.append(\"Five\")\n        case 6:\n            result.append(\"\
    Six\")\n        case 7:\n            result.append(\"Seven\")\n        case 8:\n\
    \            result.append(\"Eight\")\n        case 9:\n            result.append(\"\
    Nine\")\n        default:\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let mapped = reversed.map\
    \ { String($0) }\n    return mapped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmplgr0ox6d/tmplgr0ox6d.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d09759c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d09450b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d09450988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d0944f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplgr0ox6d                        0x000055c0be90a9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b3d09945460 __libc_start_main +
    245

    6    tmplgr0ox6d                        0x000055c0be90a479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for i in reversed\
    \ {\n        if i == 1 {\n            result.append(\"One\")\n        } else if\
    \ i == 2 {\n            result.append(\"Two\")\n        } else if i == 3 {\n \
    \           result.append(\"Three\")\n        } else if i == 4 {\n           \
    \ result.append(\"Four\")\n        } else if i == 5 {\n            result.append(\"\
    Five\")\n        } else if i == 6 {\n            result.append(\"Six\")\n    \
    \    } else if i == 7 {\n            result.append(\"Seven\")\n        } else\
    \ if i == 8 {\n            result.append(\"Eight\")\n        } else if i == 9\
    \ {\n            result.append(\"Nine\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    for i\
    \ in arr {\n        if i >= 1 && i <= 9 {\n            switch i {\n          \
    \  case 1:\n                result.append(\"One\")\n            case 2:\n    \
    \            result.append(\"Two\")\n            case 3:\n                result.append(\"\
    Three\")\n            case 4:\n                result.append(\"Four\")\n     \
    \       case 5:\n                result.append(\"Five\")\n            case 6:\n\
    \                result.append(\"Six\")\n            case 7:\n               \
    \ result.append(\"Seven\")\n            case 8:\n                result.append(\"\
    Eight\")\n            case 9:\n                result.append(\"Nine\")\n     \
    \       default:\n                break\n            }\n        }\n    }\n   \
    \ return result.sorted().reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmphzxnacm7/tmphzxnacm7.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d06b6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d06862b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d06862988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d068617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphzxnacm7                        0x0000563112c22941 <unavailable> + 6465

    5    libc.so.6                          0x00002b0d06d57460 __libc_start_main +
    245

    6    tmphzxnacm7                        0x0000563112c223e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013938
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var sorted\
    \ = arr.filter({$0 >= 1 && $0 <= 9}).sorted()\n    sorted.reverse()\n    for i\
    \ in sorted {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013936
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 > 0 &&\
    \ $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let names = reversed.map\
    \ { String($0) }\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmphjv3ynyp/tmphjv3ynyp.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43da5e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43da2dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43da2da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43da2d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphjv3ynyp                        0x00005571b4d6b9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b43da7cf460 __libc_start_main +
    245

    6    tmphjv3ynyp                        0x00005571b4d6b479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013938
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({ $0 >= 1 &&\
    \ $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let result =\
    \ reversed.map({ String($0) })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp_1yhib47/tmp_1yhib47.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9826f48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9826c3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9826c3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9826c3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_1yhib47                        0x000055cbcd52a9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b9827134460 __libc_start_main +
    245

    6    tmp_1yhib47                        0x000055cbcd52a479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013936
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    for i in sorted.reversed() {\n        switch i {\n     \
    \   case 1:\n            result.append(\"One\")\n        case 2:\n           \
    \ result.append(\"Two\")\n        case 3:\n            result.append(\"Three\"\
    )\n        case 4:\n            result.append(\"Four\")\n        case 5:\n   \
    \         result.append(\"Five\")\n        case 6:\n            result.append(\"\
    Six\")\n        case 7:\n            result.append(\"Seven\")\n        case 8:\n\
    \            result.append(\"Eight\")\n        case 9:\n            result.append(\"\
    Nine\")\n        default:\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013937
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var sortedArr\
    \ = arr.sorted()\n    sortedArr.reverse()\n    for i in sortedArr {\n        if\
    \ i == 1 {\n            result.append(\"One\")\n        } else if i == 2 {\n \
    \           result.append(\"Two\")\n        } else if i == 3 {\n            result.append(\"\
    Three\")\n        } else if i == 4 {\n            result.append(\"Four\")\n  \
    \      } else if i == 5 {\n            result.append(\"Five\")\n        } else\
    \ if i == 6 {\n            result.append(\"Six\")\n        } else if i == 7 {\n\
    \            result.append(\"Seven\")\n        } else if i == 8 {\n          \
    \  result.append(\"Eight\")\n        } else if i == 9 {\n            result.append(\"\
    Nine\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013938
