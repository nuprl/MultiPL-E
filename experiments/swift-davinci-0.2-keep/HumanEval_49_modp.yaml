name: HumanEval_49_modp
language: swift
prompt: "\n/// Return 2^n modulo p (be aware of numerics).\n/// >>> modp(3, 5)\n///\
  \ 3\n/// >>> modp(1101, 101)\n/// 2\n/// >>> modp(0, 101)\n/// 1\n/// >>> modp(3,\
  \ 11)\n/// 8\n/// >>> modp(100, 101)\n/// 1\nfunc modp(n: Int, p: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(modp(n: 3, p: 5) == 3)\nassert(modp(n: 1101,\
  \ p: 101) == 2)\nassert(modp(n: 0, p: 101) == 1)\nassert(modp(n: 3, p: 11) == 8)\n\
  assert(modp(n: 100, p: 101) == 1)\nassert(modp(n: 30, p: 5) == 4)\nassert(modp(n:\
  \ 31, p: 5) == 3)"
completions: ["    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n   \
    \     let x = modp(n / 2, p: p)\n        return (x * x) % p\n    }\n    return\
    \ (n * modp(n - 1, p: p)) % p", "    var result = 1\n    var n = n\n    var p\
    \ = p\n    while n > 0 {\n        if n % 2 == 1 {\n            result = (result\
    \ * n) % p\n        }\n        n = n / 2\n        p = (p * p) % p\n    }\n   \
    \ return result", "    var n = n\n    var res = 1\n    while n > 0 {\n       \
    \ if n % 2 == 1 {\n            res = (res * n) % p\n        }\n        n = n /\
    \ 2\n    }\n    return res", "    var n = n\n    var p = p\n    if n < 0 {\n \
    \       n = -n\n    }\n    if p < 0 {\n        p = -p\n    }\n    var result =\
    \ 1\n    for _ in 0..<n {\n        result = (result * 2) % p\n    }\n    return\
    \ result", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n  \
    \      return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n\
    \ / 2, p: p) * modp(n / 2, p: p) * 2 % p", "    if n == 0 {\n        return 1\n\
    \    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p:\
    \ p) % p\n    }\n    return modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p", " \
    \   if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return\
    \ modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n / 2, p:\
    \ p) * modp(n / 2, p: p) * 2 % p", "    if n == 0 {\n        return 1\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n/2, p: p) * modp(n/2, p: p) % p\n \
    \   }\n    return modp(n-1, p: p) * modp(n, p: p) % p", "    var n = n\n    var\
    \ p = p\n    var result = 1\n    while n > 0 {\n        if n & 1 == 1 {\n    \
    \        result = (result * n) % p\n        }\n        n = n >> 1\n        p =\
    \ (p * p) % p\n    }\n    return result", "    var result = 1\n    var n = n\n\
    \    while n > 0 {\n        if n % 2 == 1 {\n            result = (result * n)\
    \ % p\n        }\n        n = n / 2\n    }\n    return result", "    if n == 0\
    \ {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n /\
    \ 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p: p)\
    \ * modp(n: 1, p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if n\
    \ % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n\
    \    }\n    return modp(n: n - 1, p: p) * modp(n: 1, p: p) % p", "    var n =\
    \ n\n    var r = 1\n    while n > 0 {\n        if n % 2 == 1 {\n            r\
    \ = (r * n) % p\n        }\n        n = n / 2\n    }\n    return r", "    if n\
    \ == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p:\
    \ p) * modp(n: 1, p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n == 1 {\n        return n % p\n    }\n    var n = n\n    var result = 1\n \
    \   while n > 0 {\n        if n % 2 == 1 {\n            result = (result * n)\
    \ % p\n        }\n        n = n / 2\n    }\n    return result", "    var n = n\n\
    \    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n            result\
    \ = (result * n) % p\n        }\n        n = n / 2\n    }\n    return result",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p:\
    \ p) * modp(n: 1, p: p) % p", "    var n = n\n    var p = p\n    var result =\
    \ 1\n    n %= p\n    while n > 0 {\n        if n & 1 == 1 {\n            result\
    \ = (result * n) % p\n        }\n        n = n >> 1\n        n = (n * n) % p\n\
    \    }\n    return result", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n\
    \    }\n    return modp(n: n - 1, p: p) * modp(n: 1, p: p) % p", "    if n ==\
    \ 0 {\n        return 1\n    }\n    if n == 1 {\n        return n % p\n    }\n\
    \    var res = modp(n: n / 2, p: p)\n    res = (res * res) % p\n    if n % 2 ==\
    \ 1 {\n        res = (res * n) % p\n    }\n    return res", "    if n == 0 {\n\
    \        return 1\n    } else if n % 2 == 0 {\n        let m = modp(n / 2, p:\
    \ p)\n        return (m * m) % p\n    } else {\n        return (modp(n - 1, p:\
    \ p) * n) % p\n    }", "    if n == 0 {\n        return 1\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n  \
    \  return modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p", "    var n = n\n   \
    \ var p = p\n    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            result = (result * n) % p\n        }\n        n = n / 2\n       \
    \ p = (p * p) % p\n    }\n    return result", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        let m = modp(n / 2, p: p)\n        return\
    \ (m * m) % p\n    }\n    return (modp(n - 1, p: p) * n) % p", "    if n == 0\
    \ {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n /\
    \ 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p: p)\
    \ * modp(n: 1, p: p) % p", "    var n = n\n    var result = 1\n    while n > 0\
    \ {\n        if n % 2 == 1 {\n            result = (result * n) % p\n        }\n\
    \        n = n / 2\n    }\n    return result", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2,\
    \ p: p) % p\n    }\n    return modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        let m =\
    \ modp(n / 2, p: p)\n        return (m * m) % p\n    }\n    return (modp(n - 1,\
    \ p: p) * n) % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 ==\
    \ 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return\
    \ modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2,\
    \ p: p) % p\n    }\n    return modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p:\
    \ p) * modp(n: 1, p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n   \
    \ }\n    return modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p", "    if n == 0\
    \ {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2,\
    \ p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n / 2, p: p) * modp(n\
    \ / 2, p: p) * 2 % p", "    var n = n\n    var p = p\n    var result = 1\n   \
    \ while n > 0 {\n        if n % 2 == 1 {\n            result = (result * n) %\
    \ p\n        }\n        n = n / 2\n        p = (p * p) % p\n    }\n    return\
    \ result", "    var r = 1\n    var b = n\n    var e = p - 2\n    while e > 0 {\n\
    \        if e % 2 == 1 {\n            r = (r * b) % p\n        }\n        e =\
    \ e / 2\n        b = (b * b) % p\n    }\n    return r", "    var n = n\n    var\
    \ p = p\n    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n    \
    \        result = (result * n) % p\n        }\n        n = n / 2\n        n =\
    \ (n * n) % p\n    }\n    return result", "    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return n % p\n    }\n    if n % 2 == 0 {\n  \
    \      return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n    return\
    \ modp(n: n / 2, p: p) * modp(n: n / 2, p: p) * 2 % p", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p: p) * modp(n/2,\
    \ p: p) % p\n    }\n    return modp(n-1, p: p) * modp(n, p: p) % p", "    if n\
    \ == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p:\
    \ p) * modp(n: 1, p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n   \
    \ }\n    return modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p", "    var n = n\n\
    \    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n            result\
    \ = (result * n) % p\n        }\n        n = n / 2\n    }\n    return result",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p:\
    \ p) * modp(n: 1, p: p) % p", "    var n = n\n    var result = 1\n    while n\
    \ > 0 {\n        if n % 2 == 1 {\n            result = (result * p) % 101\n  \
    \      }\n        n = n / 2\n        p = (p * p) % 101\n    }\n    return result",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        let m =\
    \ modp(n / 2, p: p)\n        return (m * m) % p\n    }\n    return (n * modp(n\
    \ - 1, p: p)) % p", "    var n = n\n    var result = 1\n    while n > 0 {\n  \
    \      if n % 2 == 1 {\n            result = (result * n) % p\n        }\n   \
    \     n = n / 2\n    }\n    return result", "    if n == 0 {\n        return 1\n\
    \    }\n    if n % 2 == 0 {\n        let x = modp(n / 2, p: p)\n        return\
    \ (x * x) % p\n    }\n    return (modp(n - 1, p: p) * n) % p", "    if n == 0\
    \ {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n /\
    \ 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p: p)\
    \ * modp(n: 1, p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if n\
    \ % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n\
    \    }\n    return modp(n: n - 1, p: p) * modp(n: 1, p: p) % p", "    var n =\
    \ n\n    var p = p\n    var res = 1\n    while n > 0 {\n        if n % 2 == 1\
    \ {\n            res = (res * n) % p\n        }\n        n = n / 2\n        p\
    \ = (p * p) % p\n    }\n    return res", "    var result = 1\n    var n = n\n\
    \    var p = p\n    while n > 0 {\n        if n & 1 == 1 {\n            result\
    \ = (result * n) % p\n        }\n        n = n >> 1\n        p = (p * p) % p\n\
    \    }\n    return result", "    var result = 1\n    var n = n\n    var p = p\n\
    \    while n > 0 {\n        if n % 2 == 1 {\n            result = (result * n)\
    \ % p\n        }\n        n = n / 2\n        p = (p * p) % p\n    }\n    return\
    \ result", "    var n = n\n    var p = p\n    var result = 1\n    while n > 0\
    \ {\n        if n % 2 == 1 {\n            result = (result * n) % p\n        }\n\
    \        n = n / 2\n        n = (n * n) % p\n    }\n    return result", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n\
    \ / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n / 2, p: p) * modp(n\
    \ / 2, p: p) * 2 % p", "    var n = n\n    var p = p\n    var result = 1\n   \
    \ while n > 0 {\n        if n & 1 == 1 {\n            result = (result * n) %\
    \ p\n        }\n        n = n >> 1\n        p = (p * p) % p\n    }\n    return\
    \ result", "    var n = n\n    var p = p\n    if n == 0 {\n        return 1\n\
    \    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n /\
    \ 2, p: p) % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n: n,\
    \ p: p) % p\n    }", "    if n == 0 {\n        return 1\n    }\n    if n % 2 ==\
    \ 0 {\n        return modp(n/2, p: p) * modp(n/2, p: p) % p\n    }\n    return\
    \ modp(n/2, p: p) * modp(n/2, p: p) * 2 % p", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2,\
    \ p: p) % p\n    }\n    return modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n\
    \ / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n / 2, p: p) * modp(n\
    \ / 2, p: p) * 2 % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n  \
    \  return modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p", "    if n == 0 {\n \
    \       return 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p:\
    \ p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p: p) * modp(n:\
    \ 1, p: p) % p", "    var n = n\n    var p = p\n    var result = 1\n    n %= p\n\
    \    while n > 0 {\n        if n & 1 == 1 {\n            result = (result * n)\
    \ % p\n        }\n        n = n >> 1\n        n = (n * n) % p\n    }\n    return\
    \ result", "    var n = n\n    var p = p\n    var result = 1\n    while n > 0\
    \ {\n        if n % 2 == 1 {\n            result = (result * n) % p\n        }\n\
    \        n = n / 2\n        n = (n * n) % p\n    }\n    return result", "    var\
    \ result = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if n %\
    \ 2 == 1 {\n            result = (result * n) % p\n        }\n        n = n /\
    \ 2\n        p = (p * p) % p\n    }\n    return result", "    if n == 0 {\n  \
    \      return 1\n    }\n    if n % 2 == 0 {\n        let t = modp(n / 2, p: p)\n\
    \        return (t * t) % p\n    }\n    return (modp(n - 1, p: p) * n) % p", " \
    \   var result = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if\
    \ n % 2 == 1 {\n            result = (result * n) % p\n        }\n        n =\
    \ n / 2\n        p = (p * p) % p\n    }\n    return result", "    var n = n\n\
    \    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n            result\
    \ = (result * n) % p\n        }\n        n = n / 2\n    }\n    return result",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p:\
    \ p) * modp(n: 1, p: p) % p", "    var n = n\n    var result = 1\n    while n\
    \ > 0 {\n        if n % 2 == 1 {\n            result = (result * n) % p\n    \
    \    }\n        n = n / 2\n    }\n    return result", "    if n == 0 {\n     \
    \   return 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p)\
    \ * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p: p) * modp(n:\
    \ 1, p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0\
    \ {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n \
    \   return modp(n: n - 1, p: p) * modp(n: 1, p: p) % p", "    var n = n\n    var\
    \ result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n            result =\
    \ (result * n) % p\n        }\n        n = n / 2\n    }\n    return result", " \
    \   var n = n\n    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            result = (result * n) % p\n        }\n        n = n / 2\n    }\n\
    \    return result", "    if n == 0 {\n        return 1\n    }\n    if n % 2 ==\
    \ 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n\
    \    return modp(n: n - 1, p: p) * modp(n: 1, p: p) % p", "    if n == 0 {\n \
    \       return 1\n    }\n    if n % 2 == 0 {\n        let m = modp(n / 2, p: p)\n\
    \        return (m * m) % p\n    }\n    return (modp(n - 1, p: p) * n) % p", " \
    \   var n = n\n    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            result = (result * n) % p\n        }\n        n = n / 2\n    }\n\
    \    return result", "    var result = 1\n    var n = n\n    var p = p\n    while\
    \ n > 0 {\n        if n % 2 == 1 {\n            result = (result * n) % p\n  \
    \      }\n        n = n / 2\n        p = (p * p) % p\n    }\n    return result",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p: p) * modp(n/2, p: p) % p\n    }\n    return modp(n/2, p: p) * modp(n/2, p:\
    \ p) * 2 % p", "    var res = 1\n    var n = n\n    var p = p\n    while n > 0\
    \ {\n        if n % 2 == 1 {\n            res = (res * n) % p\n        }\n   \
    \     n = n / 2\n        p = (p * p) % p\n    }\n    return res", "    if n ==\
    \ 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2,\
    \ p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n / 2, p: p) * modp(n\
    \ / 2, p: p) * 2 % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n   \
    \ }\n    return modp(n: n - 1, p: p) * modp(n: 1, p: p) % p", "    if n == 0 {\n\
    \        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p:\
    \ p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p: p) * modp(n:\
    \ 1, p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0\
    \ {\n        let x = modp(n / 2, p: p)\n        return (x * x) % p\n    }\n  \
    \  return (modp(n - 1, p: p) * n) % p", "    if n == 0 {\n        return 1\n \
    \   }\n    if n % 2 == 0 {\n        return modp(n/2, p: p) * modp(n/2, p: p) %\
    \ p\n    }\n    return modp(n/2, p: p) * modp(n/2, p: p) * 2 % p", "    if n ==\
    \ 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2,\
    \ p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n / 2, p: p) * modp(n\
    \ / 2, p: p) * 2 % p", "    var n = n\n    var p = p\n    var result = 1\n   \
    \ while n > 0 {\n        if n & 1 == 1 {\n            result = (result * n) %\
    \ p\n        }\n        n = n >> 1\n        p = (p * p) % p\n    }\n    return\
    \ result", "    var n = n\n    var p = p\n    var result = 1\n    while n > 0\
    \ {\n        if n % 2 == 1 {\n            result = (result * n) % p\n        }\n\
    \        n = n / 2\n        p = (p * p) % p\n    }\n    return result", "    var\
    \ n = n\n    var r = 1\n    while n > 0 {\n        if n & 1 == 1 {\n         \
    \   r = (r * n) % p\n        }\n        n = n >> 1\n    }\n    return r", "  \
    \  var n = n\n    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            result = (result * n) % p\n        }\n        n = n / 2\n    }\n\
    \    return result", "    var n = n\n    var p = p\n    var result = 1\n    while\
    \ n > 0 {\n        if n % 2 == 1 {\n            result = (result * n) % p\n  \
    \      }\n        n = n / 2\n        p = (p * p) % p\n    }\n    return result",
  "    var n = n\n    var p = p\n    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n\
    \    } else {\n        return modp(n: n - 1, p: p) * modp(n: n, p: p) % p\n  \
    \  }", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n      \
    \  return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n\
    \ / 2, p: p) * modp(n / 2, p: p) * modp(n, p: p) % p", "    var result = 1\n \
    \   for _ in 0..<n {\n        result = (result * 2) % p\n    }\n    return result",
  "    var n = n\n    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            result = (result * n) % p\n        }\n        n = n / 2\n    }\n\
    \    return result", "    var n = n\n    var result = 1\n    while n > 0 {\n \
    \       if n % 2 == 1 {\n            result = (result * n) % p\n        }\n  \
    \      n = n / 2\n    }\n    return result", "    var n = n\n    var result =\
    \ 1\n    while n > 0 {\n        if n % 2 == 1 {\n            result = (result\
    \ * n) % p\n        }\n        n = n / 2\n    }\n    return result", "    if n\
    \ == 0 {\n        return 1\n    }\n    var result = 1\n    var n = n\n    var\
    \ p = p\n    while n > 0 {\n        if n & 1 == 1 {\n            result = (result\
    \ * n) % p\n        }\n        n = n >> 1\n        p = (p * p) % p\n    }\n  \
    \  return result", "    if n == 0 {\n        return 1\n    }\n    if n % 2 ==\
    \ 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n\
    \    return modp(n: n - 1, p: p) * modp(n: 1, p: p) % p", "    var n = n\n   \
    \ var p = p\n    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            result = (result * n) % p\n        }\n        n = n / 2\n       \
    \ p = (p * p) % p\n    }\n    return result", "    var res = 1\n    var n = n\n\
    \    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n            res =\
    \ (res * n) % p\n        }\n        n = n / 2\n        p = (p * p) % p\n    }\n\
    \    return res", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0\
    \ {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return\
    \ modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n:\
    \ n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p: p) * modp(n: 1, p: p)\
    \ % p", "    if n == 0 {\n        return 1\n    } else if n % 2 == 0 {\n     \
    \   return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    } else {\n        return\
    \ modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p\n    }", "    var n = n\n    var\
    \ p = p\n    var result = 1\n    while n > 0 {\n        if n & 1 == 1 {\n    \
    \        result = (result * n) % p\n        }\n        n = n >> 1\n        p =\
    \ (p * p) % p\n    }\n    return result", "    var n = n\n    var p = p\n    if\
    \ n < 0 {\n        n = n + p\n    }\n    if n == 0 {\n        return 1\n    }\n\
    \    if n == 1 {\n        return n\n    }\n    var result = 1\n    var i = 0\n\
    \    while i < n {\n        result = (result * 2) % p\n        i += 1\n    }\n\
    \    return result", "    if n == 0 {\n        return 1\n    }\n    if n % 2 ==\
    \ 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return\
    \ modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n:\
    \ n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p: p) * modp(n: 1, p: p)\
    \ % p", "    var result = 1\n    var n = n\n    var p = p\n    while n > 0 {\n\
    \        if n % 2 == 1 {\n            result = (result * n) % p\n        }\n \
    \       n = n / 2\n        p = (p * p) % p\n    }\n    return result", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        let m = modp(n/2,\
    \ p: p)\n        return (m * m) % p\n    }\n    return (modp(n-1, p: p) * n) %\
    \ p", "    var n = n\n    var p = p\n    var result = 1\n    while n > 0 {\n \
    \       if n % 2 == 1 {\n            result = (result * n) % p\n        }\n  \
    \      n = n / 2\n        p = (p * p) % p\n    }\n    return result", "    var\
    \ n = n\n    var p = p\n    var result = 1\n    while n > 0 {\n        if n %\
    \ 2 == 1 {\n            result = (result * n) % p\n        }\n        n = n /\
    \ 2\n        n = (n * n) % p\n    }\n    return result", "    if n == 0 {\n  \
    \      return 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p:\
    \ p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p: p) * modp(n:\
    \ 1, p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0\
    \ {\n        let m = modp(n / 2, p: p)\n        return (m * m) % p\n    }\n  \
    \  return (modp(n - 1, p: p) * n) % p", "    if n == 0 {\n        return 1\n \
    \   }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p:\
    \ p) % p\n    }\n    return modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p", " \
    \   if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return\
    \ modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n / 2, p:\
    \ p) * modp(n / 2, p: p) * 2 % p", "    if n == 0 {\n        return 1\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p:\
    \ p) % p\n    }\n    return modp(n: n - 1, p: p) * modp(n: 1, p: p) % p", "  \
    \  var n = n\n    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            result = (result * n) % p\n        }\n        n = n / 2\n    }\n\
    \    return result", "    var n = n\n    var result = 1\n    while n > 0 {\n \
    \       if n % 2 == 1 {\n            result = (result * n) % p\n        }\n  \
    \      n = n / 2\n    }\n    return result", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2,\
    \ p: p) % p\n    }\n    return modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p:\
    \ p) * modp(n: 1, p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n   \
    \ }\n    return modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p", "    var n = n\n\
    \    var p = p\n    var result = 1\n    while n > 0 {\n        if n & 1 == 1 {\n\
    \            result = (result * n) % p\n        }\n        n = n >> 1\n      \
    \  p = (p * p) % p\n    }\n    return result", "    var n = n\n    var p = p\n\
    \    if n < 0 {\n        n = -n\n    }\n    var result = 1\n    for _ in 0..<n\
    \ {\n        result = (result * 2) % p\n    }\n    return result", "    var n\
    \ = n\n    var p = p\n    var result = 1\n    while n > 0 {\n        if n % 2\
    \ == 1 {\n            result = (result * n) % p\n        }\n        n = n / 2\n\
    \        n = (n * n) % p\n    }\n    return result", "    var n = n\n    var p\
    \ = p\n    if n < 0 {\n        n = p - (-n % p)\n    }\n    if n >= p {\n    \
    \    n %= p\n    }\n    if n == 0 {\n        return 1\n    }\n    var result =\
    \ 1\n    for _ in 0..<n {\n        result = (result * 2) % p\n    }\n    return\
    \ result", "    var result = 1\n    for _ in 0..<n {\n        result = (result\
    \ * 2) % p\n    }\n    return result", "    var result = 1\n    var n = n\n  \
    \  var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n            result =\
    \ (result * n) % p\n        }\n        n = n / 2\n        p = (p * p) % p\n  \
    \  }\n    return result", "    if n == 0 {\n        return 1\n    }\n    if n\
    \ % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n\
    \    return modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p", "    var n = n\n \
    \   var p = p\n    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            result = (result * n) % p\n        }\n        n = n / 2\n       \
    \ p = (p * p) % p\n    }\n    return result", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2,\
    \ p: p) % p\n    }\n    return modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p",
  "    var n = n\n    var p = p\n    var result = 1\n    while n > 0 {\n        if\
    \ n % 2 == 1 {\n            result = (result * n) % p\n        }\n        n =\
    \ n / 2\n        p = (p * p) % p\n    }\n    return result", "    if n == 0 {\n\
    \        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p)\
    \ * modp(n / 2, p: p) % p\n    }\n    return modp(n / 2, p: p) * modp(n / 2, p:\
    \ p) * 2 % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n\
    \ / 2, p: p) * modp(n / 2, p: p) * 2 % p", "    if n == 0 {\n        return 1\n\
    \    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p:\
    \ p) % p\n    }\n    return modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p", " \
    \   if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return\
    \ modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n / 2, p:\
    \ p) * modp(n / 2, p: p) * 2 % p", "    if n == 0 {\n        return 1\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p:\
    \ p) % p\n    }\n    return modp(n: n - 1, p: p) * modp(n: 1, p: p) % p", "  \
    \  var n = n\n    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            result = (result * n) % p\n        }\n        n = n / 2\n    }\n\
    \    return result", "    var result = 1\n    var n = n\n    var p = p\n    while\
    \ n > 0 {\n        if n % 2 == 1 {\n            result = (result * n) % p\n  \
    \      }\n        n = n / 2\n        p = (p * p) % p\n    }\n    return result",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n\
    \ / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n / 2, p: p) * modp(n\
    \ / 2, p: p) * 2 % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n  \
    \  return modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p", "    var n = n\n   \
    \ var r = 1\n    while n > 0 {\n        if n % 2 == 1 {\n            r = (r *\
    \ n) % p\n        }\n        n = n / 2\n    }\n    return r", "    if n == 0 {\n\
    \        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p)\
    \ * modp(n / 2, p: p) % p\n    }\n    return modp(n / 2, p: p) * modp(n / 2, p:\
    \ p) * 2 % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n\
    \ / 2, p: p) * modp(n / 2, p: p) * 2 % p", "    var n = n\n    var p = p\n   \
    \ var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n            result\
    \ = (result * n) % p\n        }\n        n = n / 2\n        n = (n * n) % p\n\
    \    }\n    return result", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n   \
    \ }\n    return modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p", "    var result\
    \ = 1\n    var base = n\n    var exponent = p\n    while exponent > 0 {\n    \
    \    if exponent % 2 == 1 {\n            result = (result * base) % p\n      \
    \  }\n        exponent = exponent >> 1\n        base = (base * base) % p\n   \
    \ }\n    return result", "    var result = 1\n    for _ in 0..<n {\n        result\
    \ = (result * 2) % p\n    }\n    return result", "    var n = n\n    var p = p\n\
    \    var result = 1\n    while n > 0 {\n        if n & 1 == 1 {\n            result\
    \ = (result * p) % MODULO\n        }\n        n = n >> 1\n        p = (p * p)\
    \ % MODULO\n    }\n    return result", "    var result = 1\n    var n = n\n  \
    \  while n > 0 {\n        if n % 2 == 1 {\n            result = (result * n) %\
    \ p\n        }\n        n = n / 2\n    }\n    return result", "    if n == 0 {\n\
    \        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p:\
    \ p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p: p) * modp(n:\
    \ 1, p: p) % p", "    var n = n\n    var result = 1\n    while n > 0 {\n     \
    \   if n % 2 == 1 {\n            result = (result * n) % p\n        }\n      \
    \  n = n / 2\n    }\n    return result", "    if n == 0 {\n        return 1\n\
    \    }\n    if n % 2 == 0 {\n        let m = modp(n / 2, p: p)\n        return\
    \ (m * m) % p\n    }\n    return (modp(n - 1, p: p) * n) % p", "    var result\
    \ = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1\
    \ {\n            result = (result * n) % p\n        }\n        n = n / 2\n   \
    \     p = (p * p) % p\n    }\n    return result", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n:\
    \ n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p: p) * modp(n: 1, p: p)\
    \ % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n     \
    \   return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n    return\
    \ modp(n: n - 1, p: p) * modp(n: 1, p: p) % p", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n:\
    \ n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p: p) * modp(n: 1, p: p)\
    \ % p", "    var n = n\n    var result = 1\n    while n > 0 {\n        if n %\
    \ 2 == 1 {\n            result = (result * n) % p\n        }\n        n = n /\
    \ 2\n    }\n    return result", "    if n == 0 {\n        return 1\n    }\n  \
    \  var result = 1\n    var n = n\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            result = (result * n) % p\n        }\n        n = n / 2\n    }\n\
    \    return result", "    if n == 0 {\n        return 1\n    }\n    if n % 2 ==\
    \ 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n\
    \    return modp(n: n - 1, p: p) * modp(n: 1, p: p) % p", "    var n = n\n   \
    \ var p = p\n    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            result = (result * n) % p\n        }\n        n = n / 2\n       \
    \ p = (p * p) % p\n    }\n    return result", "    if n == 0 {\n        return\
    \ 1\n    }\n    var n = n\n    var result = 1\n    while n > 0 {\n        if n\
    \ % 2 == 1 {\n            result = (result * p) % n\n        }\n        n = n\
    \ / 2\n        p = (p * p) % n\n    }\n    return result", "    var n = n\n  \
    \  var p = p\n    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            result = (result * n) % p\n        }\n        n = n / 2\n       \
    \ p = (p * p) % p\n    }\n    return result", "    var n = n\n    var p = p\n\
    \    if n < 0 {\n        n = -n\n    }\n    if p < 0 {\n        p = -p\n    }\n\
    \    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return\
    \ modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else {\n        return\
    \ modp(n: n / 2, p: p) * modp(n: n / 2, p: p) * modp(n: 2, p: p) % p\n    }",
  "    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return n % p\n\
    \    } else {\n        return (modp(n: n - 1, p: p) * n) % p\n    }", "    var\
    \ result = 1\n    for _ in 0..<n {\n        result = (result * 2) % p\n    }\n\
    \    return result", "    if n == 0 {\n        return 1\n    }\n    if n % 2 ==\
    \ 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return\
    \ modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2,\
    \ p: p) % p\n    }\n    return modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p",
  "    var r = 1\n    var b = n\n    while b > 0 {\n        if b % 2 == 1 {\n    \
    \        r = (r * n) % p\n        }\n        b /= 2\n        n = (n * n) % p\n\
    \    }\n    return r", "    if n == 0 {\n        return 1\n    }\n    var x =\
    \ modp(n / 2, p: p)\n    x = (x * x) % p\n    if n % 2 == 1 {\n        x = (x\
    \ * 2) % p\n    }\n    return x", "    if n == 0 {\n        return 1\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p:\
    \ p) % p\n    }\n    return modp(n: n - 1, p: p) * modp(n: 1, p: p) % p", "  \
    \  if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n\
    \ / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n / 2, p: p) * modp(n\
    \ / 2, p: p) * 2 % p", "    var n = n\n    var result = 1\n    while n > 0 {\n\
    \        if n % 2 == 1 {\n            result = (result * n) % p\n        }\n \
    \       n = n / 2\n    }\n    return result", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n:\
    \ n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p: p) * modp(n: 1, p: p)\
    \ % p", "    var n = n\n    var p = p\n    var result = 1\n    while n > 0 {\n\
    \        if n % 2 == 1 {\n            result = (result * n) % p\n        }\n \
    \       n = n / 2\n        n = (n * n) % p\n    }\n    return result", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p:\
    \ p) * modp(n: 1, p: p) % p", "    var n = n\n    var result = 1\n    while n\
    \ > 0 {\n        if n % 2 == 1 {\n            result = (result * n) % p\n    \
    \    }\n        n = n / 2\n    }\n    return result", "    var n = n\n    var\
    \ p = p\n    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n    \
    \        result = (result * n) % p\n        }\n        n = n / 2\n        p =\
    \ (p * p) % p\n    }\n    return result", "    if n == 0 {\n        return 1\n\
    \    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n /\
    \ 2, p: p) % p\n    }\n    return modp(n: n - 1, p: p) * modp(n: 1, p: p) % p",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p:\
    \ p) * modp(n: 1, p: p) % p", "    var result = 1\n    for _ in 0..<n {\n    \
    \    result = (result * 2) % p\n    }\n    return result", "    var n = n\n  \
    \  var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n            result\
    \ = (result * n) % p\n        }\n        n = n / 2\n    }\n    return result",
  "    var n = n\n    var p = p\n    var result = 1\n    while n > 0 {\n        if\
    \ n % 2 == 1 {\n            result = (result * n) % p\n        }\n        n =\
    \ n / 2\n        p = (p * p) % p\n    }\n    return result", "    if n == 0 {\n\
    \        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p:\
    \ p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p: p) * modp(n:\
    \ 1, p: p) % p", "    var result = 1\n    for _ in 0..<n {\n        result = (result\
    \ * 2) % p\n    }\n    return result", "    if n == 0 {\n        return 1\n  \
    \  }\n    var result = modp(n / 2, p: p)\n    result = (result * result) % p\n\
    \    if n % 2 == 1 {\n        result = (result * 2) % p\n    }\n    return result",
  "    var n = n\n    var res = 1\n    while n > 0 {\n        if n & 1 == 1 {\n  \
    \          res = (res * n) % p\n        }\n        n = n >> 1\n    }\n    return\
    \ res", "    var n = n\n    var p = p\n    var result = 1\n    while n > 0 {\n\
    \        if n % 2 == 1 {\n            result = (result * n) % p\n        }\n \
    \       n = n / 2\n        p = (p * p) % p\n    }\n    return result", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n\
    \ / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n / 2, p: p) * modp(n\
    \ / 2, p: p) * 2 % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n  \
    \  return modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p", "    if n == 0 {\n \
    \       return 1\n    }\n    if n % 2 == 0 {\n        let x = modp(n / 2, p: p)\n\
    \        return (x * x) % p\n    }\n    return (n * modp(n - 1, p: p)) % p", " \
    \   var n = n\n    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            result = (result * n) % p\n        }\n        n = n / 2\n    }\n\
    \    return result", "    var n = n\n    var result = 1\n    while n > 0 {\n \
    \       if n % 2 == 1 {\n            result = (result * n) % p\n        }\n  \
    \      n = n / 2\n    }\n    return result", "    var n = n\n    var p = p\n \
    \   var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n            result\
    \ = (result * n) % p\n        }\n        n = n / 2\n        p = (p * p) % p\n\
    \    }\n    return result", "    var n = n\n    var result = 1\n    while n >\
    \ 0 {\n        if n % 2 == 1 {\n            result = (result * n) % p\n      \
    \  }\n        n = n / 2\n    }\n    return result", "    var n = n\n    var result\
    \ = 1\n    while n > 0 {\n        if n % 2 == 1 {\n            result = (result\
    \ * n) % p\n        }\n        n = n / 2\n    }\n    return result", "    if n\
    \ == 0 {\n        return 1\n    }\n    var n = n\n    var result = 1\n    while\
    \ n > 0 {\n        if n % 2 == 1 {\n            result = (result * n) % p\n  \
    \      }\n        n = n / 2\n    }\n    return result", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) *\
    \ modp(n / 2, p: p) % p\n    }\n    return modp(n / 2, p: p) * modp(n / 2, p:\
    \ p) * 2 % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n    return\
    \ modp(n: n - 1, p: p) * modp(n: 1, p: p) % p", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2,\
    \ p: p) % p\n    }\n    return modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p",
  "    var result = 1\n    var base = n\n    var exponent = p\n    while exponent\
    \ > 0 {\n        if exponent % 2 == 1 {\n            result = (result * base)\
    \ % p\n        }\n        exponent = exponent >> 1\n        base = (base * base)\
    \ % p\n    }\n    return result", "    if n == 0 {\n        return 1\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n/2, p: p) * modp(n/2, p: p) % p\n \
    \   }\n    return modp(n/2, p: p) * modp(n/2, p: p) * 2 % p"]
stop_tokens:
- "\n}"
