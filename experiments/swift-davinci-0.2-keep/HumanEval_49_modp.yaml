name: HumanEval_49_modp
language: swift
prompt: "\n/// Return 2^n modulo p (be aware of numerics).\n/// >>> modp(3, 5)\n///\
  \ 3\n/// >>> modp(1101, 101)\n/// 2\n/// >>> modp(0, 101)\n/// 1\n/// >>> modp(3,\
  \ 11)\n/// 8\n/// >>> modp(100, 101)\n/// 1\nfunc modp(n: Int, p: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(modp(n: 3, p: 5) == 3)\nassert(modp(n: 1101,\
  \ p: 101) == 2)\nassert(modp(n: 0, p: 101) == 1)\nassert(modp(n: 3, p: 11) == 8)\n\
  assert(modp(n: 100, p: 101) == 1)\nassert(modp(n: 30, p: 5) == 4)\nassert(modp(n:\
  \ 31, p: 5) == 3)"
completions: ["    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n   \
    \     let x = modp(n / 2, p: p)\n        return (x * x) % p\n    }\n    return\
    \ (n * modp(n - 1, p: p)) % p", "    var result = 1\n    var n = n\n    var p\
    \ = p\n    while n > 0 {\n        if n % 2 == 1 {\n            result = (result\
    \ * n) % p\n        }\n        n = n / 2\n        p = (p * p) % p\n    }\n   \
    \ return result", "    var n = n\n    var res = 1\n    while n > 0 {\n       \
    \ if n % 2 == 1 {\n            res = (res * n) % p\n        }\n        n = n /\
    \ 2\n    }\n    return res", "    var n = n\n    var p = p\n    if n < 0 {\n \
    \       n = -n\n    }\n    if p < 0 {\n        p = -p\n    }\n    var result =\
    \ 1\n    for _ in 0..<n {\n        result = (result * 2) % p\n    }\n    return\
    \ result", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n  \
    \      return modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n\
    \ / 2, p: p) * modp(n / 2, p: p) * 2 % p", "    if n == 0 {\n        return 1\n\
    \    }\n    if n % 2 == 0 {\n        return modp(n / 2, p: p) * modp(n / 2, p:\
    \ p) % p\n    }\n    return modp(n / 2, p: p) * modp(n / 2, p: p) * 2 % p", " \
    \   if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return\
    \ modp(n / 2, p: p) * modp(n / 2, p: p) % p\n    }\n    return modp(n / 2, p:\
    \ p) * modp(n / 2, p: p) * 2 % p", "    if n == 0 {\n        return 1\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n/2, p: p) * modp(n/2, p: p) % p\n \
    \   }\n    return modp(n-1, p: p) * modp(n, p: p) % p", "    var n = n\n    var\
    \ p = p\n    var result = 1\n    while n > 0 {\n        if n & 1 == 1 {\n    \
    \        result = (result * n) % p\n        }\n        n = n >> 1\n        p =\
    \ (p * p) % p\n    }\n    return result", "    var result = 1\n    var n = n\n\
    \    while n > 0 {\n        if n % 2 == 1 {\n            result = (result * n)\
    \ % p\n        }\n        n = n / 2\n    }\n    return result", "    if n == 0\
    \ {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n /\
    \ 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p: p)\
    \ * modp(n: 1, p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if n\
    \ % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n\
    \    }\n    return modp(n: n - 1, p: p) * modp(n: 1, p: p) % p", "    var n =\
    \ n\n    var r = 1\n    while n > 0 {\n        if n % 2 == 1 {\n            r\
    \ = (r * n) % p\n        }\n        n = n / 2\n    }\n    return r", "    if n\
    \ == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p:\
    \ p) * modp(n: 1, p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n == 1 {\n        return n % p\n    }\n    var n = n\n    var result = 1\n \
    \   while n > 0 {\n        if n % 2 == 1 {\n            result = (result * n)\
    \ % p\n        }\n        n = n / 2\n    }\n    return result", "    var n = n\n\
    \    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n            result\
    \ = (result * n) % p\n        }\n        n = n / 2\n    }\n    return result",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    }\n    return modp(n: n - 1, p:\
    \ p) * modp(n: 1, p: p) % p", "    var n = n\n    var p = p\n    var result =\
    \ 1\n    n %= p\n    while n > 0 {\n        if n & 1 == 1 {\n            result\
    \ = (result * n) % p\n        }\n        n = n >> 1\n        n = (n * n) % p\n\
    \    }\n    return result", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n\
    \    }\n    return modp(n: n - 1, p: p) * modp(n: 1, p: p) % p", "    if n ==\
    \ 0 {\n        return 1\n    }\n    if n == 1 {\n        return n % p\n    }\n\
    \    var res = modp(n: n / 2, p: p)\n    res = (res * res) % p\n    if n % 2 ==\
    \ 1 {\n        res = (res * n) % p\n    }\n    return res"]
stop_tokens:
- "\n}"
