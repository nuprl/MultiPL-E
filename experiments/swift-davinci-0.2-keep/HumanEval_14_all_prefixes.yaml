name: HumanEval_14_all_prefixes
language: swift
prompt: "\n/// Return list of all prefixes from shortest to longest of the input string\n\
  /// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string: String)\
  \ -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
  assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
  asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"\
  WWW\"])"
completions: ["    var prefixes = [String]()\n    for i in 0..<string.count {\n  \
    \      prefixes.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return prefixes", "    var prefixes = [String]()\n    for\
    \ i in 0..<string.characters.count {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(string[0..<i+1])\n    }\n    return prefixes", " \
    \   var result: [String] = []\n    for i in 0..<string.count {\n        result.append(string.prefix(i\
    \ + 1))\n    }\n    return result", "    var result = [String]()\n    for i in\
    \ 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var prefixes = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return result", "    var result: [String] = []\n    for i\
    \ in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var prefixes = [String]()\n\
    \    for i in 0..<string.characters.count {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var prefixes = [String]()\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes", "    var result = [String]()\n\
    \    for i in 0...string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result", "    var result = [String]()\n \
    \   for i in 0..<string.count {\n        result.append(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)])\n    }\n    return result", "    var prefixes = [String]()\n\
    \    for i in 0..<string.characters.count {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var prefixes: [String] =\
    \ []\n    for i in 0..<string.characters.count {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes", "    var prefixes: [String] = []\n    for\
    \ i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes", "    var result = [String]()\n\
    \    for i in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes", "    var result = [String]()\n    for i\
    \ in 0..<string.count {\n        result.append(string[0..<i+1])\n    }\n    return\
    \ result", "    var result = [String]()\n    for i in 0..<string.count {\n   \
    \     result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result", "    var prefixes: [String]\
    \ = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes", "    var result: [String] =\
    \ []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(string[0..<i])\n    }\n\
    \    return result", "    var prefixes: [String] = []\n    for i in 0...string.characters.count\
    \ {\n        prefixes.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: i)))\n    }\n    return prefixes", "    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(string[0..<i+1])\n   \
    \ }\n    return result", "    var prefixes: [String] = []\n    for i in 1...string.count\
    \ {\n        prefixes.append(string.prefix(i))\n    }\n    return prefixes", " \
    \   var result = [String]()\n    for i in 0..<string.characters.count {\n    \
    \    result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result", "    let length = string.characters.count\n\
    \    var result = [String]()\n    for i in 0..<length {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes", "    var result: [String] =\
    \ []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result", "    var result = [String]()\n \
    \   for i in 0...string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i)))\n\
    \    }\n    return result", "    var prefixes = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result", "    var prefixes: [String] = []\n    for\
    \ i in 0..<string.characters.count {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(string[0..<i+1])\n    }\n    return result", "    var\
    \ prefixes: [String] = []\n    for i in 0..<string.characters.count {\n      \
    \  prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var prefixes: [String] = []\n    for i in 1...string.count\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes", "    var prefixes: [String] =\
    \ []\n    for i in 0..<string.characters.count {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes", "    var prefixes: [String] = []\n    for\
    \ i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes", "    var result = [String]()\n\
    \    for i in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var prefixes = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(string[0..<i+1])\n    }\n    return prefixes", " \
    \   var prefixes = [String]()\n    for i in 0..<string.characters.count {\n  \
    \      prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result", "    var result: [String] =\
    \ []\n    for i in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var prefixes: [String] =\
    \ []\n    for i in 0..<string.characters.count {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes", "    var prefixes = [String]()\n    for\
    \ i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes", "    var prefixes: [String]\
    \ = []\n    for i in 0..<string.characters.count {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(string[0..<i+1])\n\
    \    }\n    return prefixes", "    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes", "    var result: [String] =\
    \ []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes", "    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes", "    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(string[0..<i+1])\n   \
    \ }\n    return result", "    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result", "    var prefixes: [String] = []\n    for\
    \ i in 0..<string.characters.count {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(string[0..<i+1])\n    }\n    return result", "    var\
    \ result: [String] = []\n    for index in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: index)]))\n    }\n    return result", "    var result: [String] =\
    \ []\n    for i in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return result", "    var result = [String]()\n    for i in\
    \ 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result", "    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result", "    var result = [String]()\n \
    \   for i in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes", "    var result = [String]()\n    for i\
    \ in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result", "    var result: [String] = []\n    for i\
    \ in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result", "    var result = [String]()\n    for i in\
    \ 1...string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result", "    var prefixes: [String] = []\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes", "    var result: [String] = []\n\
    \    for i in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var prefixes: [String] = []\n    for i in 1...string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i)))\n\
    \    }\n    return prefixes", "    var result = [String]()\n    for i in 1...string.count\
    \ {\n        result.append(string.prefix(i))\n    }\n    return result", "   \
    \ var result: [String] = []\n    for i in 0..<string.characters.count {\n    \
    \    result.append(string.substringToIndex(string.startIndex.advancedBy(i + 1)))\n\
    \    }\n    return result", "    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(string.prefix(i+1))\n    }\n    return result", " \
    \   var result = [String]()\n    for i in 0..<string.characters.count {\n    \
    \    result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result", "    var result: [String] =\
    \ []\n    for i in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(string.prefix(i + 1))\n    }\n    return result", " \
    \   var result: [String] = []\n    for i in 0..<string.characters.count {\n  \
    \      result.append(string.substringToIndex(string.startIndex.advancedBy(i +\
    \ 1)))\n    }\n    return result", "    var result = [String]()\n    for i in\
    \ 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return result", "    var prefixes: [String] = []\n    for\
    \ i in 0..<string.characters.count {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return result", "    var prefixes = [String]()\n    for i\
    \ in 0..<string.count {\n        prefixes.append(string[0..<i])\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    for i in 1...string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i)))\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes", "    var result: [String] =\
    \ []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes", "    var result: [String] = []\n\
    \    for i in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return result", "    var result: [String] = []\n    for i\
    \ in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var prefixes: [String] =\
    \ []\n    for i in 0...string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes", "    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)])\n    }\n    return result", "    var result: [String] = []\n\
    \    for i in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return result", "    var result: [String] = []\n    for i\
    \ in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result", "    var result = [String]()\n \
    \   for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result", "    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result", "    var result: [String] =\
    \ []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes", "    var prefixes: [String]\
    \ = []\n    for i in 0..<string.characters.count {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result", "    var result: [String] =\
    \ []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(string[0..<i+1])\n   \
    \ }\n    return result", "    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes", "    var result: [String]\
    \ = []\n    for i in 0..<string.characters.count {\n        result.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i + 1)))\n    }\n    return result",
  "    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var prefixes: [String] =\
    \ []\n    for i in 0..<string.characters.count {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return result", "    var prefixes: [String] = []\n    for\
    \ i in 0..<string.characters.count {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var prefixes = [String]()\n    let chars = Array(string)\n\
    \    for i in 0..<chars.count {\n        prefixes.append(String(chars[0...i]))\n\
    \    }\n    return prefixes", "    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes", "    var result = [String]()\n    for i\
    \ in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes", "    var prefixes = [String]()\n    for\
    \ i in 0..<string.characters.count {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes", "    var result = [String]()\n    for i\
    \ in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var prefixes = [String]()\n\
    \    for i in 0..<string.characters.count {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result", "    var prefixes: [String] = []\n    for\
    \ i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes", "    var result: [String] = []\n\
    \    for i in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return result", "    var prefixes = [String]()\n    for i\
    \ in 0..<string.characters.count {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes", "    var prefixes: [String] = []\n    for\
    \ i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes", "    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result", "    var result: [String] =\
    \ []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var result = [String]()\n\
    \    for i in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result = [String]()\n    for i in 0...string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result", "    var result: [String] = []\n    for i\
    \ in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(string.prefix(i+1))\n    }\n    return result", " \
    \   var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(string.prefix(i + 1))\n\
    \    }\n    return result", "    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes", "    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(string[0..<i])\n    }\n\
    \    return result", "    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(string[0..<i])\n    }\n    return prefixes", "  \
    \  var prefixes = [String]()\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes", "    var result: [String]\
    \ = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var result = [String]()\n\
    \    for i in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var result = [String]()\n\
    \    for i in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result: [String] = []\n    for i in 1...string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result", "    var prefixes: [String] = []\n    for\
    \ i in 0..<string.characters.count {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes", "    var result: [String] = []\n    for\
    \ i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result", "    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes", "    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(string.prefix(i + 1))\n\
    \    }\n    return result", "    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes", "    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result", "    var result = [String]()\n \
    \   for i in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(string.prefix(i + 1))\n    }\n    return result", " \
    \   var result = [String]()\n    for i in 0..<string.characters.count {\n    \
    \    result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(string[0..<i+1])\n    }\n    return result", "    var\
    \ result: [String] = []\n    for i in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var result = [String]()\n\
    \    for i in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var prefixes: [String] =\
    \ []\n    for i in 0..<string.characters.count {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes", "    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(string[0..<i])\n    }\n    return prefixes", "  \
    \  var result = [String]()\n    for i in 0..<string.characters.count {\n     \
    \   result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var prefixes = [String]()\n    for i in 0...string.characters.count\
    \ {\n        let index = string.index(string.startIndex, offsetBy: i)\n      \
    \  prefixes.append(string.substring(to: index))\n    }\n    return prefixes",
  "    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes", "    var prefixes: [String]\
    \ = []\n    for i in 0..<string.count {\n        prefixes.append(string[0..<i])\n\
    \    }\n    return prefixes", "    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var prefixes: [String] =\
    \ []\n    for i in 0..<string.characters.count {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes", "    var result = [String]()\n    for i\
    \ in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var prefixes: [String] = []\n    for i in 0...string.count\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes", "    var result: [String] = []\n\
    \    for i in 0..<string.characters.count {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result", "    var prefixes = [String]()\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes", "    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result", "    var prefixes: [String] = []\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes"]
stop_tokens:
- "\n}"
