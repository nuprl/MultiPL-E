language: swift
name: HumanEval_135_can_arrange
results:
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <=\
    \ arr[i + 1] {\n            maxIndex = i + 1\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpxb3pc2l1/tmpxb3pc2l1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b018861ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0188315b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0188315988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01883147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxb3pc2l1                        0x00005605dba4a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b018880a460 __libc_start_main +
    245

    6    tmpxb3pc2l1                        0x00005605dba4a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 1..<arr.count {\n        if arr[i] <= arr[i-1]\
    \ {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7601ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7601bcc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7601bcc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7601bcc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7601bcbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwxte51a9                        0x000055d20aa149c2 <unavailable> + 6594

    6    tmpwxte51a9                        0x000055d20aa1481c <unavailable> + 6172

    7    libc.so.6                          0x00002b76020c1460 __libc_start_main +
    245

    8    tmpwxte51a9                        0x000055d20aa141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] < max {\n            return i - 1\n        }\n        if arr[i]\
    \ > max {\n            max = arr[i]\n            maxIndex = i\n        }\n   \
    \ }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprdcy5ohr/tmprdcy5ohr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3487675c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b348736cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b348736c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b348736b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdcy5ohr                        0x000056394896d552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3487861460 __libc_start_main +
    245

    6    tmprdcy5ohr                        0x000056394896d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpnz5vgugc/tmpnz5vgugc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3868e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3865ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3865dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3865dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnz5vgugc                        0x0000557445e6361f <unavailable> + 5663

    5    libc.so.6                          0x00002ad386ad2460 __libc_start_main +
    245

    6    tmpnz5vgugc                        0x0000557445e631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var result = -1\n    for i in 1..<arr.count {\n        if arr[i] <= arr[i-1]\
    \ {\n            result = i\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3add0c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3adcdbd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3adcdbd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3adcdbd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3adcdbcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpmhw1zg1h                        0x0000556ced4ea9c2 <unavailable> + 6594

    6    tmpmhw1zg1h                        0x0000556ced4ea81c <unavailable> + 6172

    7    libc.so.6                          0x00002b3add2b2460 __libc_start_main +
    245

    8    tmpmhw1zg1h                        0x0000556ced4ea1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var index = -1\n    for i in 0..<arr.count-1 {\n        if arr[i] >= arr[i+1]\
    \ {\n            index = i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwia4xj83/tmpwia4xj83.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34898adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34895a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34895a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34895a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwia4xj83                        0x000055a4518ad552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3489a99460 __libc_start_main +
    245

    6    tmpwia4xj83                        0x000055a4518ad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count-1 {\n        if arr[i] >= arr[i+1]\
    \ {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ge0h1i7/tmp7ge0h1i7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ec7eb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ec7ba8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ec7ba8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ec7ba77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ge0h1i7                        0x000055acd53e4552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0ec809d460 __libc_start_main +
    245

    6    tmp7ge0h1i7                        0x000055acd53e41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpmmcwce71/tmpmmcwce71.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e8e0e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e8dddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e8dddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e8ddda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmcwce71                        0x000055d31b72b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e8e2d0460 __libc_start_main +
    245

    6    tmpmmcwce71                        0x000055d31b72b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] < max {\n            return i - 1\n        }\n        if arr[i]\
    \ > max {\n            max = arr[i]\n            maxIndex = i\n        }\n   \
    \ }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprdcy5ohr/tmprdcy5ohr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3487675c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b348736cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b348736c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b348736b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdcy5ohr                        0x000056394896d552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3487861460 __libc_start_main +
    245

    6    tmprdcy5ohr                        0x000056394896d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] > arr[max] {\n\
    \            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4ftutbch/tmp4ftutbch.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56445cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac564153b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac564153988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5641527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ftutbch                        0x000055d00ea52552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac564648460 __libc_start_main +
    245

    6    tmp4ftutbch                        0x000055d00ea521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var index = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            index = i\n        }\n    }\n    return index\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwfr9ftvf/tmpwfr9ftvf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59fb2e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59fafd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59fafd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59fafd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwfr9ftvf                        0x0000556f9e0f2552 <unavailable> + 5458

    5    libc.so.6                          0x00002b59fb4cd460 __libc_start_main +
    245

    6    tmpwfr9ftvf                        0x0000556f9e0f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <=\
    \ arr[i + 1] {\n            maxIndex = i + 1\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpxb3pc2l1/tmpxb3pc2l1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b018861ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0188315b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0188315988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01883147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxb3pc2l1                        0x00005605dba4a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b018880a460 __libc_start_main +
    245

    6    tmpxb3pc2l1                        0x00005605dba4a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    if maxIndex == arr.count - 1 {\n        return -1\n   \
    \ }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbdwr49s6/tmpbdwr49s6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7193b96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b719388db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b719388d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b719388c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdwr49s6                        0x000056116fa93552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7193d82460 __libc_start_main +
    245

    6    tmpbdwr49s6                        0x000056116fa931a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4e7avsx8/tmp4e7avsx8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c49c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c46b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c46b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c46b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7avsx8                        0x000055a0b6786552 <unavailable> + 5458

    5    libc.so.6                          0x00002b42c4bae460 __libc_start_main +
    245

    6    tmp4e7avsx8                        0x000055a0b67861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp_kzbvyyy/tmp_kzbvyyy.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05b5a94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05b578bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05b578b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05b578a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kzbvyyy                        0x0000559294e90312 <unavailable> + 4882

    5    libc.so.6                          0x00002b05b5c80460 __libc_start_main +
    245

    6    tmp_kzbvyyy                        0x0000559294e8ff69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var largestIndex = -1\n    for i in 1..<arr.count {\n        if arr[i] <=\
    \ arr[i-1] {\n            largestIndex = i\n        }\n    }\n    return largestIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b381c9d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b381c6c7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b381c6c7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b381c6c713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b381c6c6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_c3yqeak                        0x000055c5119f79c2 <unavailable> + 6594

    6    tmp_c3yqeak                        0x000055c5119f781c <unavailable> + 6172

    7    libc.so.6                          0x00002b381cbbc460 __libc_start_main +
    245

    8    tmp_c3yqeak                        0x000055c5119f71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count-1 {\n        if arr[i] >= arr[i+1]\
    \ {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ge0h1i7/tmp7ge0h1i7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ec7eb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ec7ba8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ec7ba8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ec7ba77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ge0h1i7                        0x000055acd53e4552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0ec809d460 __libc_start_main +
    245

    6    tmp7ge0h1i7                        0x000055acd53e41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count-1 {\n        if arr[i] >= arr[i+1]\
    \ {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ge0h1i7/tmp7ge0h1i7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ec7eb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ec7ba8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ec7ba8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ec7ba77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ge0h1i7                        0x000055acd53e4552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0ec809d460 __libc_start_main +
    245

    6    tmp7ge0h1i7                        0x000055acd53e41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >=\
    \ arr[i + 1] {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpfnlx96am/tmpfnlx96am.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5f17dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5f14d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5f14d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5f14d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfnlx96am                        0x000055d6c2f5f552 <unavailable> + 5458

    5    libc.so.6                          0x00002af5f19c7460 __libc_start_main +
    245

    6    tmpfnlx96am                        0x000055d6c2f5f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var result = -1\n    for i in 1..<arr.count {\n        if arr[i] <= arr[i-1]\
    \ {\n            result = i\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3add0c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3adcdbd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3adcdbd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3adcdbd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3adcdbcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpmhw1zg1h                        0x0000556ced4ea9c2 <unavailable> + 6594

    6    tmpmhw1zg1h                        0x0000556ced4ea81c <unavailable> + 6172

    7    libc.so.6                          0x00002b3add2b2460 __libc_start_main +
    245

    8    tmpmhw1zg1h                        0x0000556ced4ea1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    if arr.count < 2 {\n        return -1\n    }\n    var maxIndex = -1\n   \
    \ var maxValue = arr[0]\n    for i in 1..<arr.count {\n        if arr[i] > maxValue\
    \ {\n            maxIndex = i\n            maxValue = arr[i]\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpsdueq9uc/tmpsdueq9uc.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b663aad9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b663a7d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b663a7d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b663a7cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsdueq9uc                        0x00005613f67f7552 <unavailable> + 5458

    5    libc.so.6                          0x00002b663acc5460 __libc_start_main +
    245

    6    tmpsdueq9uc                        0x00005613f67f71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] < max {\n            return i - 1\n        }\n        if arr[i]\
    \ > max {\n            max = arr[i]\n            maxIndex = i\n        }\n   \
    \ }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprdcy5ohr/tmprdcy5ohr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3487675c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b348736cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b348736c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b348736b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdcy5ohr                        0x000056394896d552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3487861460 __libc_start_main +
    245

    6    tmprdcy5ohr                        0x000056394896d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpmmcwce71/tmpmmcwce71.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e8e0e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e8dddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e8dddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e8ddda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmcwce71                        0x000055d31b72b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e8e2d0460 __libc_start_main +
    245

    6    tmpmmcwce71                        0x000055d31b72b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <=\
    \ arr[i + 1] {\n            maxIndex = i + 1\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpxb3pc2l1/tmpxb3pc2l1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b018861ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0188315b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0188315988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01883147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxb3pc2l1                        0x00005605dba4a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b018880a460 __libc_start_main +
    245

    6    tmpxb3pc2l1                        0x00005605dba4a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 1..<arr.count {\n        if arr[i] < arr[i-1]\
    \ {\n            max = i-1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0glnozy7/tmp0glnozy7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17ad4b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17ad1acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17ad1ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17ad1ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0glnozy7                        0x000055beb2332552 <unavailable> + 5458

    5    libc.so.6                          0x00002b17ad6a1460 __libc_start_main +
    245

    6    tmp0glnozy7                        0x000055beb23321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    for i in 0..<arr.count {\n        if i == maxIndex {\n\
    \            continue\n        }\n        if arr[i] > arr[i+1] {\n           \
    \ return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpuvauttu4/tmpuvauttu4.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4395da4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4395a9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4395a9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4395a9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuvauttu4                        0x000055bd7ba5a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b4395f90460 __libc_start_main +
    245

    6    tmpuvauttu4                        0x000055bd7ba5a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4e7avsx8/tmp4e7avsx8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c49c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c46b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c46b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c46b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7avsx8                        0x000055a0b6786552 <unavailable> + 5458

    5    libc.so.6                          0x00002b42c4bae460 __libc_start_main +
    245

    6    tmp4e7avsx8                        0x000055a0b67861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4e7avsx8/tmp4e7avsx8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c49c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c46b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c46b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c46b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7avsx8                        0x000055a0b6786552 <unavailable> + 5458

    5    libc.so.6                          0x00002b42c4bae460 __libc_start_main +
    245

    6    tmp4e7avsx8                        0x000055a0b67861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpnz5vgugc/tmpnz5vgugc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3868e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3865ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3865dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3865dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnz5vgugc                        0x0000557445e6361f <unavailable> + 5663

    5    libc.so.6                          0x00002ad386ad2460 __libc_start_main +
    245

    6    tmpnz5vgugc                        0x0000557445e631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    for i in 0..<arr.count-1 {\n        if arr[i] > arr[i+1]\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp220lfqcl/tmp220lfqcl.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00cded7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00cdbceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00cdbce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00cdbcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp220lfqcl                        0x0000559692f20552 <unavailable> + 5458

    5    libc.so.6                          0x00002b00ce0c3460 __libc_start_main +
    245

    6    tmp220lfqcl                        0x0000559692f201a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] > arr[max] {\n\
    \            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4ftutbch/tmp4ftutbch.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56445cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac564153b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac564153988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5641527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ftutbch                        0x000055d00ea52552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac564648460 __libc_start_main +
    245

    6    tmp4ftutbch                        0x000055d00ea521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 0..<arr.count-1 {\n        if arr[i] <= arr[i+1]\
    \ {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpz51qe12g/tmpz51qe12g.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14c4870c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14c4567b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14c4567988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14c45667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz51qe12g                        0x0000559c249b261f <unavailable> + 5663

    5    libc.so.6                          0x00002b14c4a5c460 __libc_start_main +
    245

    6    tmpz51qe12g                        0x0000559c249b21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpnz5vgugc/tmpnz5vgugc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3868e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3865ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3865dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3865dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnz5vgugc                        0x0000557445e6361f <unavailable> + 5663

    5    libc.so.6                          0x00002ad386ad2460 __libc_start_main +
    245

    6    tmpnz5vgugc                        0x0000557445e631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] > arr[max] {\n\
    \            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4ftutbch/tmp4ftutbch.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56445cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac564153b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac564153988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5641527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ftutbch                        0x000055d00ea52552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac564648460 __libc_start_main +
    245

    6    tmp4ftutbch                        0x000055d00ea521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 1..<arr.count {\n        if arr[i] <= arr[i-1]\
    \ {\n            max = i-1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpoerhdweg/tmpoerhdweg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f1060ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f10305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f10305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f103047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoerhdweg                        0x000055bfa12de552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8f107fa460 __libc_start_main +
    245

    6    tmpoerhdweg                        0x000055bfa12de1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4e7avsx8/tmp4e7avsx8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c49c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c46b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c46b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c46b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7avsx8                        0x000055a0b6786552 <unavailable> + 5458

    5    libc.so.6                          0x00002b42c4bae460 __libc_start_main +
    245

    6    tmp4e7avsx8                        0x000055a0b67861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var largest = -1\n    for i in 1..<arr.count {\n        if arr[i] <= arr[i-1]\
    \ {\n            largest = i-1\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp68xyqzgm/tmp68xyqzgm.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab47cebdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab47cbb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab47cbb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab47cbb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp68xyqzgm                        0x000055dbb6107552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab47d0a9460 __libc_start_main +
    245

    6    tmp68xyqzgm                        0x000055dbb61071a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var largestIndex = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ <= arr[i + 1] {\n            largestIndex = i + 1\n        }\n    }\n    return\
    \ largestIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpqut7q3pl/tmpqut7q3pl.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af37d600c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af37d2f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af37d2f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af37d2f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqut7q3pl                        0x0000560499e9c552 <unavailable> + 5458

    5    libc.so.6                          0x00002af37d7ec460 __libc_start_main +
    245

    6    tmpqut7q3pl                        0x0000560499e9c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max {\n\
    \            if i == 0 {\n                return -1\n            }\n         \
    \   if arr[i-1] == max {\n                return -1\n            }\n         \
    \   return maxIndex\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi0ptx6gh/tmpi0ptx6gh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e3f8c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e3f5bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e3f5ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e3f5b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi0ptx6gh                        0x00005620dd8ec552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e3faaf460 __libc_start_main +
    245

    6    tmpi0ptx6gh                        0x00005620dd8ec1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max {\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp_03ydrrt/tmp_03ydrrt.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7f0cb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7f09aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7f09ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7f09ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_03ydrrt                        0x0000559611e6b552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab7f0ea3460 __libc_start_main +
    245

    6    tmp_03ydrrt                        0x0000559611e6b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpmmcwce71/tmpmmcwce71.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e8e0e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e8dddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e8dddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e8ddda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmcwce71                        0x000055d31b72b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e8e2d0460 __libc_start_main +
    245

    6    tmpmmcwce71                        0x000055d31b72b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max {\n\
    \            if i == 0 {\n                return -1\n            }\n         \
    \   if arr[i - 1] < max {\n                return maxIndex\n            }\n  \
    \      }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9klupx9n/tmp9klupx9n.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc87dffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc87af6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc87af6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc87af57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9klupx9n                        0x0000562c25c7c552 <unavailable> + 5458

    5    libc.so.6                          0x00002afc87feb460 __libc_start_main +
    245

    6    tmp9klupx9n                        0x0000562c25c7c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var index = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <= arr[i\
    \ + 1] {\n            index = i\n        }\n    }\n    return index\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpmowj_8eq/tmpmowj_8eq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cb7d3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cb7a32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cb7a32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cb7a317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmowj_8eq                        0x000055e5463a161f <unavailable> + 5663

    5    libc.so.6                          0x00002b1cb7f27460 __libc_start_main +
    245

    6    tmpmowj_8eq                        0x000055e5463a11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for i in 0..<arr.count - 1 {\n        if arr[i] < arr[i\
    \ + 1] {\n            max = i + 1\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpcjsgbrnu/tmpcjsgbrnu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c84bb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c848abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c848ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c848aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcjsgbrnu                        0x000056242b4c5552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9c84da0460 __libc_start_main +
    245

    6    tmpcjsgbrnu                        0x000056242b4c51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var max_index = 0\n    for i in 1..<arr.count {\n \
    \       if arr[i] > max {\n            max = arr[i]\n            max_index = i\n\
    \        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max {\n\
    \            if i == 0 {\n                return -1\n            }\n         \
    \   if arr[i - 1] < max {\n                return max_index\n            }\n \
    \       }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmphco3e_6s/tmphco3e_6s.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acacff30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acacfc27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acacfc27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acacfc267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphco3e_6s                        0x000055a052e8f552 <unavailable> + 5458

    5    libc.so.6                          0x00002acad011c460 __libc_start_main +
    245

    6    tmphco3e_6s                        0x000055a052e8f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpnz5vgugc/tmpnz5vgugc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3868e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3865ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3865dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3865dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnz5vgugc                        0x0000557445e6361f <unavailable> + 5663

    5    libc.so.6                          0x00002ad386ad2460 __libc_start_main +
    245

    6    tmpnz5vgugc                        0x0000557445e631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxValue = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxIndex = i\n            maxValue\
    \ = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpnnk77x3j/tmpnnk77x3j.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e88432c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e88129b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e88129988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e881287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnnk77x3j                        0x000055f801780552 <unavailable> + 5458

    5    libc.so.6                          0x00002b4e8861e460 __libc_start_main +
    245

    6    tmpnnk77x3j                        0x000055f8017801a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4e7avsx8/tmp4e7avsx8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c49c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c46b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c46b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c46b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7avsx8                        0x000055a0b6786552 <unavailable> + 5458

    5    libc.so.6                          0x00002b42c4bae460 __libc_start_main +
    245

    6    tmp4e7avsx8                        0x000055a0b67861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpmmcwce71/tmpmmcwce71.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e8e0e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e8dddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e8dddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e8ddda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmcwce71                        0x000055d31b72b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e8e2d0460 __libc_start_main +
    245

    6    tmpmmcwce71                        0x000055d31b72b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4e7avsx8/tmp4e7avsx8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c49c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c46b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c46b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c46b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7avsx8                        0x000055a0b6786552 <unavailable> + 5458

    5    libc.so.6                          0x00002b42c4bae460 __libc_start_main +
    245

    6    tmp4e7avsx8                        0x000055a0b67861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    for i in 0..<arr.count {\n        if i == maxIndex {\n\
    \            continue\n        }\n        if arr[i] >= max {\n            return\
    \ -1\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpf12h9kl8/tmpf12h9kl8.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba14054fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba140246b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba140246988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1402457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf12h9kl8                        0x00005650ddd63552 <unavailable> + 5458

    5    libc.so.6                          0x00002ba14073b460 __libc_start_main +
    245

    6    tmpf12h9kl8                        0x00005650ddd631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] > arr[max] {\n\
    \            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4ftutbch/tmp4ftutbch.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56445cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac564153b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac564153988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5641527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ftutbch                        0x000055d00ea52552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac564648460 __libc_start_main +
    245

    6    tmp4ftutbch                        0x000055d00ea521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpmmcwce71/tmpmmcwce71.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e8e0e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e8dddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e8dddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e8ddda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmcwce71                        0x000055d31b72b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e8e2d0460 __libc_start_main +
    245

    6    tmpmmcwce71                        0x000055d31b72b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp_kzbvyyy/tmp_kzbvyyy.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05b5a94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05b578bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05b578b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05b578a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kzbvyyy                        0x0000559294e90312 <unavailable> + 4882

    5    libc.so.6                          0x00002b05b5c80460 __libc_start_main +
    245

    6    tmp_kzbvyyy                        0x0000559294e8ff69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpnz5vgugc/tmpnz5vgugc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3868e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3865ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3865dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3865dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnz5vgugc                        0x0000557445e6361f <unavailable> + 5663

    5    libc.so.6                          0x00002ad386ad2460 __libc_start_main +
    245

    6    tmpnz5vgugc                        0x0000557445e631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count-1 {\n        if arr[i] <= arr[i+1]\
    \ {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpoy3hw7du/tmpoy3hw7du.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e2f5b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e2f2a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e2f2a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e2f2a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoy3hw7du                        0x000055a266c9f61f <unavailable> + 5663

    5    libc.so.6                          0x00002b1e2f79c460 __libc_start_main +
    245

    6    tmpoy3hw7du                        0x000055a266c9f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var last = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n    \
    \    if arr[i] < last {\n            index = i\n            last = arr[i]\n  \
    \      }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpqgoy6wim/tmpqgoy6wim.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6232656c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b623234db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b623234d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b623234c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqgoy6wim                        0x000055e2c37d0552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6232842460 __libc_start_main +
    245

    6    tmpqgoy6wim                        0x000055e2c37d01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] > arr[max] {\n\
    \            max = i\n        }\n    }\n    for i in 0..<arr.count {\n       \
    \ if arr[i] > arr[i+1] {\n            return i\n        }\n    }\n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpvtno1i1u/tmpvtno1i1u.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32f928fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32f8f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32f8f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32f8f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvtno1i1u                        0x00005558a16d8552 <unavailable> + 5458

    5    libc.so.6                          0x00002b32f947b460 __libc_start_main +
    245

    6    tmpvtno1i1u                        0x00005558a16d81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: 0
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var i = arr.count - 1\n    while i > 0 {\n        if arr[i] >= arr[i - 1]\
    \ {\n            i -= 1\n        } else {\n            return i\n        }\n \
    \   }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4e7avsx8/tmp4e7avsx8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c49c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c46b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c46b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c46b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7avsx8                        0x000055a0b6786552 <unavailable> + 5458

    5    libc.so.6                          0x00002b42c4bae460 __libc_start_main +
    245

    6    tmp4e7avsx8                        0x000055a0b67861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    for i in 1..<arr.count {\n        if arr[i] < arr[i-1] {\n            return\
    \ i-1\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmp7hrif1tm/tmp7hrif1tm.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5fc45ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5fc151b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5fc151988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5fc1507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hrif1tm                        0x0000561b3756a552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab5fc646460 __libc_start_main +
    245

    6    tmp7hrif1tm                        0x0000561b3756a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4e7avsx8/tmp4e7avsx8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c49c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c46b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c46b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c46b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7avsx8                        0x000055a0b6786552 <unavailable> + 5458

    5    libc.so.6                          0x00002b42c4bae460 __libc_start_main +
    245

    6    tmp4e7avsx8                        0x000055a0b67861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var result = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            result = i\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpb2tbs0si/tmpb2tbs0si.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3c9c44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3c993bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3c993b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3c993a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb2tbs0si                        0x0000555eeabd0552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae3c9e30460 __libc_start_main +
    245

    6    tmpb2tbs0si                        0x0000555eeabd01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var index = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            index = i\n        }\n    }\n    return index\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwfr9ftvf/tmpwfr9ftvf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59fb2e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59fafd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59fafd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59fafd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwfr9ftvf                        0x0000556f9e0f2552 <unavailable> + 5458

    5    libc.so.6                          0x00002b59fb4cd460 __libc_start_main +
    245

    6    tmpwfr9ftvf                        0x0000556f9e0f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max {\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp_03ydrrt/tmp_03ydrrt.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7f0cb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7f09aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7f09ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7f09ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_03ydrrt                        0x0000559611e6b552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab7f0ea3460 __libc_start_main +
    245

    6    tmp_03ydrrt                        0x0000559611e6b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var index = -1\n    for i in 1..<arr.count {\n        if arr[i] < arr[i-1]\
    \ {\n            index = i\n            break\n        }\n    }\n    return index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpay_6s5t3/tmpay_6s5t3.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74a8776c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74a846db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74a846d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74a846c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpay_6s5t3                        0x00005650f0f7b7f9 <unavailable> + 6137

    5    libc.so.6                          0x00002b74a8962460 __libc_start_main +
    245

    6    tmpay_6s5t3                        0x00005650f0f7b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpnz5vgugc/tmpnz5vgugc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3868e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3865ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3865dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3865dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnz5vgugc                        0x0000557445e6361f <unavailable> + 5663

    5    libc.so.6                          0x00002ad386ad2460 __libc_start_main +
    245

    6    tmpnz5vgugc                        0x0000557445e631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 1..<arr.count {\n        if arr[i] <= arr[i-1]\
    \ {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7601ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7601bcc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7601bcc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7601bcc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7601bcbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwxte51a9                        0x000055d20aa149c2 <unavailable> + 6594

    6    tmpwxte51a9                        0x000055d20aa1481c <unavailable> + 6172

    7    libc.so.6                          0x00002b76020c1460 __libc_start_main +
    245

    8    tmpwxte51a9                        0x000055d20aa141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4e7avsx8/tmp4e7avsx8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c49c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c46b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c46b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c46b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7avsx8                        0x000055a0b6786552 <unavailable> + 5458

    5    libc.so.6                          0x00002b42c4bae460 __libc_start_main +
    245

    6    tmp4e7avsx8                        0x000055a0b67861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpmmcwce71/tmpmmcwce71.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e8e0e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e8dddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e8dddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e8ddda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmcwce71                        0x000055d31b72b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e8e2d0460 __libc_start_main +
    245

    6    tmpmmcwce71                        0x000055d31b72b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4e7avsx8/tmp4e7avsx8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c49c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c46b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c46b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c46b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7avsx8                        0x000055a0b6786552 <unavailable> + 5458

    5    libc.so.6                          0x00002b42c4bae460 __libc_start_main +
    245

    6    tmp4e7avsx8                        0x000055a0b67861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for (index, value) in arr.enumerated()\
    \ {\n        if value > max {\n            max = value\n            maxIndex =\
    \ index\n        }\n    }\n    if maxIndex == arr.count - 1 {\n        return\
    \ -1\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpum13winy/tmpum13winy.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51781bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5177eb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5177eb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5177eb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpum13winy                        0x0000559ae1c315e2 <unavailable> + 5602

    5    libc.so.6                          0x00002b51783a6460 __libc_start_main +
    245

    6    tmpum13winy                        0x0000559ae1c31239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpnz5vgugc/tmpnz5vgugc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3868e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3865ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3865dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3865dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnz5vgugc                        0x0000557445e6361f <unavailable> + 5663

    5    libc.so.6                          0x00002ad386ad2460 __libc_start_main +
    245

    6    tmpnz5vgugc                        0x0000557445e631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 1..<arr.count {\n        if arr[i] <= arr[i-1]\
    \ {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7601ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7601bcc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7601bcc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7601bcc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7601bcbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwxte51a9                        0x000055d20aa149c2 <unavailable> + 6594

    6    tmpwxte51a9                        0x000055d20aa1481c <unavailable> + 6172

    7    libc.so.6                          0x00002b76020c1460 __libc_start_main +
    245

    8    tmpwxte51a9                        0x000055d20aa141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var index = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            index = i\n        }\n    }\n    return index\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwfr9ftvf/tmpwfr9ftvf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59fb2e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59fafd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59fafd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59fafd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwfr9ftvf                        0x0000556f9e0f2552 <unavailable> + 5458

    5    libc.so.6                          0x00002b59fb4cd460 __libc_start_main +
    245

    6    tmpwfr9ftvf                        0x0000556f9e0f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 1..<arr.count {\n        if arr[i] <= arr[i-1]\
    \ {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7601ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7601bcc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7601bcc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7601bcc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7601bcbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwxte51a9                        0x000055d20aa149c2 <unavailable> + 6594

    6    tmpwxte51a9                        0x000055d20aa1481c <unavailable> + 6172

    7    libc.so.6                          0x00002b76020c1460 __libc_start_main +
    245

    8    tmpwxte51a9                        0x000055d20aa141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count-1 {\n        if arr[i] >= arr[i+1]\
    \ {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ge0h1i7/tmp7ge0h1i7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ec7eb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ec7ba8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ec7ba8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ec7ba77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ge0h1i7                        0x000055acd53e4552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0ec809d460 __libc_start_main +
    245

    6    tmp7ge0h1i7                        0x000055acd53e41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4e7avsx8/tmp4e7avsx8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c49c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c46b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c46b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c46b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7avsx8                        0x000055a0b6786552 <unavailable> + 5458

    5    libc.so.6                          0x00002b42c4bae460 __libc_start_main +
    245

    6    tmp4e7avsx8                        0x000055a0b67861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for i in 0..<arr.count - 1 {\n        if arr[i] < arr[i\
    \ + 1] {\n            max = i + 1\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpcjsgbrnu/tmpcjsgbrnu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c84bb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c848abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c848ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c848aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcjsgbrnu                        0x000056242b4c5552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9c84da0460 __libc_start_main +
    245

    6    tmpcjsgbrnu                        0x000056242b4c51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for i in 1..<arr.count {\n        if arr[i] > arr[i-1] {\n\
    \            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4lmz87u5/tmp4lmz87u5.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54725afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54722a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54722a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54722a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lmz87u5                        0x000055f1afdb5552 <unavailable> + 5458

    5    libc.so.6                          0x00002b547279b460 __libc_start_main +
    245

    6    tmp4lmz87u5                        0x000055f1afdb51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] > arr[max] {\n\
    \            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4ftutbch/tmp4ftutbch.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56445cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac564153b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac564153988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5641527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ftutbch                        0x000055d00ea52552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac564648460 __libc_start_main +
    245

    6    tmp4ftutbch                        0x000055d00ea521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    for i in 0..<arr.count-1 {\n        if arr[i] > arr[i+1]\
    \ {\n            return -1\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpinhme78x/tmpinhme78x.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90c3cf8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90c39efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90c39ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90c39ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinhme78x                        0x0000560337403552 <unavailable> + 5458

    5    libc.so.6                          0x00002b90c3ee4460 __libc_start_main +
    245

    6    tmpinhme78x                        0x00005603374031a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var index = -1\n    for i in 1..<arr.count {\n        if arr[i] < arr[i-1]\
    \ {\n            index = i\n            break\n        }\n    }\n    return index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpay_6s5t3/tmpay_6s5t3.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74a8776c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74a846db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74a846d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74a846c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpay_6s5t3                        0x00005650f0f7b7f9 <unavailable> + 6137

    5    libc.so.6                          0x00002b74a8962460 __libc_start_main +
    245

    6    tmpay_6s5t3                        0x00005650f0f7b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpnz5vgugc/tmpnz5vgugc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3868e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3865ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3865dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3865dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnz5vgugc                        0x0000557445e6361f <unavailable> + 5663

    5    libc.so.6                          0x00002ad386ad2460 __libc_start_main +
    245

    6    tmpnz5vgugc                        0x0000557445e631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <=\
    \ arr[i + 1] {\n            maxIndex = i + 1\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpxb3pc2l1/tmpxb3pc2l1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b018861ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0188315b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0188315988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01883147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxb3pc2l1                        0x00005605dba4a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b018880a460 __libc_start_main +
    245

    6    tmpxb3pc2l1                        0x00005605dba4a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max {\n\
    \            if i == arr.count - 1 {\n                return -1\n            }\n\
    \            if arr[i + 1] < max {\n                return i\n            }\n\
    \        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpfosyskrm/tmpfosyskrm.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34b45aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34b42a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34b42a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34b42a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfosyskrm                        0x000055668c640552 <unavailable> + 5458

    5    libc.so.6                          0x00002b34b4796460 __libc_start_main +
    245

    6    tmpfosyskrm                        0x000055668c6401a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 1..<arr.count {\n        if arr[i] <= arr[i-1]\
    \ {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7601ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7601bcc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7601bcc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7601bcc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7601bcbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwxte51a9                        0x000055d20aa149c2 <unavailable> + 6594

    6    tmpwxte51a9                        0x000055d20aa1481c <unavailable> + 6172

    7    libc.so.6                          0x00002b76020c1460 __libc_start_main +
    245

    8    tmpwxte51a9                        0x000055d20aa141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] < max && arr[i]\
    \ > arr[i+1] {\n            return i\n        }\n    }\n    return -1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp6cbn7tq5/tmp6cbn7tq5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86dc83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86dc534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86dc534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86dc5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6cbn7tq5                        0x000055fea0b0d552 <unavailable> + 5458

    5    libc.so.6                          0x00002b86dca29460 __libc_start_main +
    245

    6    tmp6cbn7tq5                        0x000055fea0b0d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpmmcwce71/tmpmmcwce71.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e8e0e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e8dddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e8dddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e8ddda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmcwce71                        0x000055d31b72b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e8e2d0460 __libc_start_main +
    245

    6    tmpmmcwce71                        0x000055d31b72b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max {\n\
    \            if i == arr.count - 1 {\n                return -1\n            }\n\
    \            if arr[i + 1] < max {\n                return i\n            }\n\
    \        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpfosyskrm/tmpfosyskrm.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34b45aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34b42a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34b42a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34b42a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfosyskrm                        0x000055668c640552 <unavailable> + 5458

    5    libc.so.6                          0x00002b34b4796460 __libc_start_main +
    245

    6    tmpfosyskrm                        0x000055668c6401a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    var index = -1\n    for i in 0..<arr.count {\n        if\
    \ arr[i] > max {\n            max = arr[i]\n            index = i\n        }\n\
    \    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpilffz8vu/tmpilffz8vu.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d23f30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d23c27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d23c27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d23c267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpilffz8vu                        0x000055dd9969d552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d2411c460 __libc_start_main +
    245

    6    tmpilffz8vu                        0x000055dd9969d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var index = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            index = i\n        }\n    }\n    return index\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwfr9ftvf/tmpwfr9ftvf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59fb2e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59fafd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59fafd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59fafd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwfr9ftvf                        0x0000556f9e0f2552 <unavailable> + 5458

    5    libc.so.6                          0x00002b59fb4cd460 __libc_start_main +
    245

    6    tmpwfr9ftvf                        0x0000556f9e0f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for i in 0..<arr.count - 1 {\n        if arr[i] < arr[i\
    \ + 1] {\n            max = i + 1\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpcjsgbrnu/tmpcjsgbrnu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c84bb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c848abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c848ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c848aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcjsgbrnu                        0x000056242b4c5552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9c84da0460 __libc_start_main +
    245

    6    tmpcjsgbrnu                        0x000056242b4c51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var index = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            index = i\n        }\n    }\n    return index\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwfr9ftvf/tmpwfr9ftvf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59fb2e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59fafd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59fafd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59fafd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwfr9ftvf                        0x0000556f9e0f2552 <unavailable> + 5458

    5    libc.so.6                          0x00002b59fb4cd460 __libc_start_main +
    245

    6    tmpwfr9ftvf                        0x0000556f9e0f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var index = -1\n    for i in 1..<arr.count {\n        if arr[i] < arr[i-1]\
    \ {\n            index = i\n            break\n        }\n    }\n    return index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpay_6s5t3/tmpay_6s5t3.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74a8776c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74a846db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74a846d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74a846c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpay_6s5t3                        0x00005650f0f7b7f9 <unavailable> + 6137

    5    libc.so.6                          0x00002b74a8962460 __libc_start_main +
    245

    6    tmpay_6s5t3                        0x00005650f0f7b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxValue = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxIndex = i\n            maxValue\
    \ = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpnnk77x3j/tmpnnk77x3j.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e88432c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e88129b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e88129988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e881287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnnk77x3j                        0x000055f801780552 <unavailable> + 5458

    5    libc.so.6                          0x00002b4e8861e460 __libc_start_main +
    245

    6    tmpnnk77x3j                        0x000055f8017801a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for (i, v) in arr.enumerated() {\n\
    \        if v > max {\n            max = v\n            index = i\n        }\n\
    \    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp_bycq61p/tmp_bycq61p.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61d229cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61d1f93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61d1f93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61d1f927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_bycq61p                        0x00005607b756f582 <unavailable> + 5506

    5    libc.so.6                          0x00002b61d2488460 __libc_start_main +
    245

    6    tmp_bycq61p                        0x00005607b756f1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count-1 {\n        if arr[i] >= arr[i+1]\
    \ {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ge0h1i7/tmp7ge0h1i7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ec7eb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ec7ba8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ec7ba8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ec7ba77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ge0h1i7                        0x000055acd53e4552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0ec809d460 __libc_start_main +
    245

    6    tmp7ge0h1i7                        0x000055acd53e41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] < max {\n            return i - 1\n        }\n        if arr[i]\
    \ > max {\n            max = arr[i]\n            index = i\n        }\n    }\n\
    \    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp16d2dyuh/tmp16d2dyuh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aead7f86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aead7c7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aead7c7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aead7c7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16d2dyuh                        0x0000563b84309552 <unavailable> + 5458

    5    libc.so.6                          0x00002aead8172460 __libc_start_main +
    245

    6    tmp16d2dyuh                        0x0000563b843091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4e7avsx8/tmp4e7avsx8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c49c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c46b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c46b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c46b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7avsx8                        0x000055a0b6786552 <unavailable> + 5458

    5    libc.so.6                          0x00002b42c4bae460 __libc_start_main +
    245

    6    tmp4e7avsx8                        0x000055a0b67861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxValue = Int.min\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n         \
    \   maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4qzffve2/tmp4qzffve2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab996305c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab995ffcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab995ffc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab995ffb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4qzffve2                        0x0000561f70981552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab9964f1460 __libc_start_main +
    245

    6    tmp4qzffve2                        0x0000561f709811a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var i = arr.count - 1\n    while i > 0 {\n        if arr[i] < arr[i - 1]\
    \ {\n            return i - 1\n        }\n        i -= 1\n    }\n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3mm2ztho/tmp3mm2ztho.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bcb9d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bcb6cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bcb6cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bcb6ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3mm2ztho                        0x0000557a07fca3c2 <unavailable> + 5058

    5    libc.so.6                          0x00002b5bcbbc0460 __libc_start_main +
    245

    6    tmp3mm2ztho                        0x0000557a07fca019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpmmcwce71/tmpmmcwce71.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e8e0e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e8dddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e8dddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e8ddda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmcwce71                        0x000055d31b72b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e8e2d0460 __libc_start_main +
    245

    6    tmpmmcwce71                        0x000055d31b72b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    guard arr.count > 1 else { return -1 }\n    var maxIndex = -1\n    for i\
    \ in 1..<arr.count {\n        if arr[i] >= arr[i-1] {\n            maxIndex =\
    \ i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps8a6s27f/tmps8a6s27f.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaea685cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaea6553b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaea6553988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaea65527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps8a6s27f                        0x000055f20d7f3552 <unavailable> + 5458

    5    libc.so.6                          0x00002aaea6a48460 __libc_start_main +
    245

    6    tmps8a6s27f                        0x000055f20d7f31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpmmcwce71/tmpmmcwce71.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e8e0e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e8dddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e8dddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e8ddda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmcwce71                        0x000055d31b72b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e8e2d0460 __libc_start_main +
    245

    6    tmpmmcwce71                        0x000055d31b72b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 1..<arr.count {\n        if arr[i] <= arr[i-1]\
    \ {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aacb09b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacb06a8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aacb06a8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aacb06a813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aacb06a7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpghlo2_0z                        0x00005610f21969c2 <unavailable> + 6594

    6    tmpghlo2_0z                        0x00005610f219681c <unavailable> + 6172

    7    libc.so.6                          0x00002aacb0b9d460 __libc_start_main +
    245

    8    tmpghlo2_0z                        0x00005610f21961a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <=\
    \ arr[i + 1] {\n            maxIndex = i + 1\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpxb3pc2l1/tmpxb3pc2l1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b018861ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0188315b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0188315988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01883147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxb3pc2l1                        0x00005605dba4a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b018880a460 __libc_start_main +
    245

    6    tmpxb3pc2l1                        0x00005605dba4a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max {\n\
    \            if i == 0 {\n                return -1\n            }\n         \
    \   if arr[i-1] < max {\n                return maxIndex\n            }\n    \
    \    }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpj3_nozjg/tmpj3_nozjg.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd1919bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd18e92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd18e92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd18e917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_nozjg                        0x00005616ee4fd552 <unavailable> + 5458

    5    libc.so.6                          0x00002abd19387460 __libc_start_main +
    245

    6    tmpj3_nozjg                        0x00005616ee4fd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    for i in 0..<arr.count {\n        if i == maxIndex {\n\
    \            continue\n        }\n        if arr[i] > arr[i+1] {\n           \
    \ return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpuvauttu4/tmpuvauttu4.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4395da4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4395a9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4395a9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4395a9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuvauttu4                        0x000055bd7ba5a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b4395f90460 __libc_start_main +
    245

    6    tmpuvauttu4                        0x000055bd7ba5a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 1..<arr.count {\n        if arr[i] <= arr[i-1]\
    \ {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7601ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7601bcc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7601bcc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7601bcc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7601bcbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwxte51a9                        0x000055d20aa149c2 <unavailable> + 6594

    6    tmpwxte51a9                        0x000055d20aa1481c <unavailable> + 6172

    7    libc.so.6                          0x00002b76020c1460 __libc_start_main +
    245

    8    tmpwxte51a9                        0x000055d20aa141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4e7avsx8/tmp4e7avsx8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c49c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c46b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c46b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c46b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7avsx8                        0x000055a0b6786552 <unavailable> + 5458

    5    libc.so.6                          0x00002b42c4bae460 __libc_start_main +
    245

    6    tmp4e7avsx8                        0x000055a0b67861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count-1 {\n        if arr[i] >= arr[i+1]\
    \ {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ge0h1i7/tmp7ge0h1i7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ec7eb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ec7ba8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ec7ba8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ec7ba77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ge0h1i7                        0x000055acd53e4552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0ec809d460 __libc_start_main +
    245

    6    tmp7ge0h1i7                        0x000055acd53e41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max {\n\
    \            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5khv4ho_/tmp5khv4ho_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac21724dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac216f44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac216f44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac216f437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5khv4ho_                        0x00005581832f7552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac217439460 __libc_start_main +
    245

    6    tmp5khv4ho_                        0x00005581832f71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >=\
    \ arr[i + 1] {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpfnlx96am/tmpfnlx96am.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5f17dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5f14d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5f14d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5f14d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfnlx96am                        0x000055d6c2f5f552 <unavailable> + 5458

    5    libc.so.6                          0x00002af5f19c7460 __libc_start_main +
    245

    6    tmpfnlx96am                        0x000055d6c2f5f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4e7avsx8/tmp4e7avsx8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c49c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c46b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c46b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c46b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7avsx8                        0x000055a0b6786552 <unavailable> + 5458

    5    libc.so.6                          0x00002b42c4bae460 __libc_start_main +
    245

    6    tmp4e7avsx8                        0x000055a0b67861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <=\
    \ arr[i + 1] {\n            maxIndex = i + 1\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpxb3pc2l1/tmpxb3pc2l1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b018861ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0188315b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0188315988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01883147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxb3pc2l1                        0x00005605dba4a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b018880a460 __libc_start_main +
    245

    6    tmpxb3pc2l1                        0x00005605dba4a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for i in 0..<arr.count - 1 {\n        if arr[i] < arr[i\
    \ + 1] {\n            max = i + 1\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpcjsgbrnu/tmpcjsgbrnu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c84bb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c848abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c848ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c848aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcjsgbrnu                        0x000056242b4c5552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9c84da0460 __libc_start_main +
    245

    6    tmpcjsgbrnu                        0x000056242b4c51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4e7avsx8/tmp4e7avsx8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c49c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c46b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c46b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c46b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7avsx8                        0x000055a0b6786552 <unavailable> + 5458

    5    libc.so.6                          0x00002b42c4bae460 __libc_start_main +
    245

    6    tmp4e7avsx8                        0x000055a0b67861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxValue = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxIndex = i\n            maxValue\
    \ = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpnnk77x3j/tmpnnk77x3j.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e88432c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e88129b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e88129988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e881287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnnk77x3j                        0x000055f801780552 <unavailable> + 5458

    5    libc.so.6                          0x00002b4e8861e460 __libc_start_main +
    245

    6    tmpnnk77x3j                        0x000055f8017801a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxValue = -1\n    for i in 0..<arr.count {\n\
    \        if arr[i] > maxValue {\n            maxValue = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp_1dy53nt/tmp_1dy53nt.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4dfaffcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dfacf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dfacf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dfacf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_1dy53nt                        0x00005595d8b24552 <unavailable> + 5458

    5    libc.so.6                          0x00002b4dfb1e8460 __libc_start_main +
    245

    6    tmp_1dy53nt                        0x00005595d8b241a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var index = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            index = i\n        }\n    }\n    return index\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwfr9ftvf/tmpwfr9ftvf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59fb2e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59fafd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59fafd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59fafd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwfr9ftvf                        0x0000556f9e0f2552 <unavailable> + 5458

    5    libc.so.6                          0x00002b59fb4cd460 __libc_start_main +
    245

    6    tmpwfr9ftvf                        0x0000556f9e0f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] <= max {\n            max = arr[i]\n            index = i\n    \
    \    }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbls0r3ut/tmpbls0r3ut.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2533256c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2532f4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2532f4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2532f4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbls0r3ut                        0x000055fc66d3d552 <unavailable> + 5458

    5    libc.so.6                          0x00002b2533442460 __libc_start_main +
    245

    6    tmpbls0r3ut                        0x000055fc66d3d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    for i in 0..<arr.count-1 {\n        if arr[i] > arr[i+1]\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp220lfqcl/tmp220lfqcl.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00cded7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00cdbceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00cdbce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00cdbcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp220lfqcl                        0x0000559692f20552 <unavailable> + 5458

    5    libc.so.6                          0x00002b00ce0c3460 __libc_start_main +
    245

    6    tmp220lfqcl                        0x0000559692f201a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpnz5vgugc/tmpnz5vgugc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3868e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3865ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3865dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3865dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnz5vgugc                        0x0000557445e6361f <unavailable> + 5663

    5    libc.so.6                          0x00002ad386ad2460 __libc_start_main +
    245

    6    tmpnz5vgugc                        0x0000557445e631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var result = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            result = i\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpb2tbs0si/tmpb2tbs0si.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3c9c44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3c993bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3c993b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3c993a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb2tbs0si                        0x0000555eeabd0552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae3c9e30460 __libc_start_main +
    245

    6    tmpb2tbs0si                        0x0000555eeabd01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var index = -1\n    for i in 1..<arr.count {\n        if\
    \ arr[i] <= arr[i-1] {\n            if max < arr[i-1] {\n                max =\
    \ arr[i-1]\n                index = i-1\n            }\n        }\n    }\n   \
    \ return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpgcmben22/tmpgcmben22.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60186c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60183bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60183bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60183ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgcmben22                        0x000055c9aa42d552 <unavailable> + 5458

    5    libc.so.6                          0x00002b60188b0460 __libc_start_main +
    245

    6    tmpgcmben22                        0x000055c9aa42d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpmmcwce71/tmpmmcwce71.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e8e0e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e8dddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e8dddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e8ddda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmcwce71                        0x000055d31b72b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e8e2d0460 __libc_start_main +
    245

    6    tmpmmcwce71                        0x000055d31b72b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpnz5vgugc/tmpnz5vgugc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3868e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3865ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3865dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3865dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnz5vgugc                        0x0000557445e6361f <unavailable> + 5663

    5    libc.so.6                          0x00002ad386ad2460 __libc_start_main +
    245

    6    tmpnz5vgugc                        0x0000557445e631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp_kzbvyyy/tmp_kzbvyyy.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05b5a94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05b578bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05b578b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05b578a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kzbvyyy                        0x0000559294e90312 <unavailable> + 4882

    5    libc.so.6                          0x00002b05b5c80460 __libc_start_main +
    245

    6    tmp_kzbvyyy                        0x0000559294e8ff69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: 0
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var i = arr.count - 1\n    while i > 0 {\n        if arr[i] >= arr[i - 1]\
    \ {\n            i -= 1\n        } else {\n            return i\n        }\n \
    \   }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpmmcwce71/tmpmmcwce71.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e8e0e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e8dddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e8dddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e8ddda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmcwce71                        0x000055d31b72b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e8e2d0460 __libc_start_main +
    245

    6    tmpmmcwce71                        0x000055d31b72b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var index = -1\n    for i in 1..<arr.count {\n        if arr[i] < arr[i-1]\
    \ {\n            index = i\n            break\n        }\n    }\n    return index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpay_6s5t3/tmpay_6s5t3.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74a8776c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74a846db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74a846d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74a846c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpay_6s5t3                        0x00005650f0f7b7f9 <unavailable> + 6137

    5    libc.so.6                          0x00002b74a8962460 __libc_start_main +
    245

    6    tmpay_6s5t3                        0x00005650f0f7b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 1..<arr.count {\n        if arr[i] <= arr[i-1]\
    \ {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7601ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7601bcc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7601bcc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7601bcc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7601bcbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwxte51a9                        0x000055d20aa149c2 <unavailable> + 6594

    6    tmpwxte51a9                        0x000055d20aa1481c <unavailable> + 6172

    7    libc.so.6                          0x00002b76020c1460 __libc_start_main +
    245

    8    tmpwxte51a9                        0x000055d20aa141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4e7avsx8/tmp4e7avsx8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c49c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c46b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c46b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c46b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7avsx8                        0x000055a0b6786552 <unavailable> + 5458

    5    libc.so.6                          0x00002b42c4bae460 __libc_start_main +
    245

    6    tmp4e7avsx8                        0x000055a0b67861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count-1 {\n        if arr[i] <= arr[i+1]\
    \ {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpoy3hw7du/tmpoy3hw7du.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e2f5b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e2f2a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e2f2a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e2f2a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoy3hw7du                        0x000055a266c9f61f <unavailable> + 5663

    5    libc.so.6                          0x00002b1e2f79c460 __libc_start_main +
    245

    6    tmpoy3hw7du                        0x000055a266c9f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] < max {\n            return i - 1\n        }\n        if arr[i]\
    \ > max {\n            max = arr[i]\n            index = i\n        }\n    }\n\
    \    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp16d2dyuh/tmp16d2dyuh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aead7f86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aead7c7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aead7c7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aead7c7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16d2dyuh                        0x0000563b84309552 <unavailable> + 5458

    5    libc.so.6                          0x00002aead8172460 __libc_start_main +
    245

    6    tmp16d2dyuh                        0x0000563b843091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 1..<arr.count {\n        if arr[i] <= arr[i-1]\
    \ {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7601ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7601bcc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7601bcc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7601bcc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7601bcbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwxte51a9                        0x000055d20aa149c2 <unavailable> + 6594

    6    tmpwxte51a9                        0x000055d20aa1481c <unavailable> + 6172

    7    libc.so.6                          0x00002b76020c1460 __libc_start_main +
    245

    8    tmpwxte51a9                        0x000055d20aa141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var index = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            index = i\n        }\n    }\n    return index\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwfr9ftvf/tmpwfr9ftvf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59fb2e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59fafd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59fafd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59fafd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwfr9ftvf                        0x0000556f9e0f2552 <unavailable> + 5458

    5    libc.so.6                          0x00002b59fb4cd460 __libc_start_main +
    245

    6    tmpwfr9ftvf                        0x0000556f9e0f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var result = -1\n    for i in 0..<arr.count-1 {\n        if arr[i] >= arr[i+1]\
    \ {\n            result = i\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpqxdcwkg2/tmpqxdcwkg2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b928f6fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b928f3f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b928f3f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b928f3f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqxdcwkg2                        0x000055ae52c6d552 <unavailable> + 5458

    5    libc.so.6                          0x00002b928f8e8460 __libc_start_main +
    245

    6    tmpqxdcwkg2                        0x000055ae52c6d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] > arr[max] {\n\
    \            max = i\n        }\n    }\n    if max == 0 {\n        return -1\n\
    \    }\n    for i in 0..<max {\n        if arr[i] > arr[max] {\n            return\
    \ -1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpt3_rnscn/tmpt3_rnscn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac76d529c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac76d220b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac76d220988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac76d21f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt3_rnscn                        0x0000558c1796a552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac76d715460 __libc_start_main +
    245

    6    tmpt3_rnscn                        0x0000558c1796a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var index = arr.count - 1\n    while index > 0 {\n        if arr[index] <\
    \ arr[index - 1] {\n            return index - 1\n        }\n        index -=\
    \ 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8pp9t9tg/tmp8pp9t9tg.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42028ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42025f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42025f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42025f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8pp9t9tg                        0x000056385710d3c2 <unavailable> + 5058

    5    libc.so.6                          0x00002b4202aeb460 __libc_start_main +
    245

    6    tmp8pp9t9tg                        0x000056385710d019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var index = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            index = i\n        }\n    }\n    return index\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwfr9ftvf/tmpwfr9ftvf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59fb2e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59fafd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59fafd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59fafd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwfr9ftvf                        0x0000556f9e0f2552 <unavailable> + 5458

    5    libc.so.6                          0x00002b59fb4cd460 __libc_start_main +
    245

    6    tmpwfr9ftvf                        0x0000556f9e0f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count-1 {\n        if arr[i] >= arr[i+1]\
    \ {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ge0h1i7/tmp7ge0h1i7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ec7eb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ec7ba8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ec7ba8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ec7ba77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ge0h1i7                        0x000055acd53e4552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0ec809d460 __libc_start_main +
    245

    6    tmp7ge0h1i7                        0x000055acd53e41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >=\
    \ arr[i + 1] {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpfnlx96am/tmpfnlx96am.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5f17dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5f14d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5f14d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5f14d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfnlx96am                        0x000055d6c2f5f552 <unavailable> + 5458

    5    libc.so.6                          0x00002af5f19c7460 __libc_start_main +
    245

    6    tmpfnlx96am                        0x000055d6c2f5f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpmmcwce71/tmpmmcwce71.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e8e0e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e8dddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e8dddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e8ddda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmcwce71                        0x000055d31b72b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e8e2d0460 __libc_start_main +
    245

    6    tmpmmcwce71                        0x000055d31b72b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var index = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            index = i\n        }\n    }\n    return index\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwfr9ftvf/tmpwfr9ftvf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59fb2e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59fafd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59fafd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59fafd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwfr9ftvf                        0x0000556f9e0f2552 <unavailable> + 5458

    5    libc.so.6                          0x00002b59fb4cd460 __libc_start_main +
    245

    6    tmpwfr9ftvf                        0x0000556f9e0f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp_kzbvyyy/tmp_kzbvyyy.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05b5a94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05b578bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05b578b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05b578a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kzbvyyy                        0x0000559294e90312 <unavailable> + 4882

    5    libc.so.6                          0x00002b05b5c80460 __libc_start_main +
    245

    6    tmp_kzbvyyy                        0x0000559294e8ff69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var index = -1\n    for i in 1..<arr.count {\n        if arr[i] <= arr[i-1]\
    \ {\n            index = i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d5b7a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d5b49c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0d5b49c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0d5b49c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0d5b49bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpecr4n50j                        0x000055bfb04bc9c2 <unavailable> + 6594

    6    tmpecr4n50j                        0x000055bfb04bc81c <unavailable> + 6172

    7    libc.so.6                          0x00002b0d5b991460 __libc_start_main +
    245

    8    tmpecr4n50j                        0x000055bfb04bc1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <=\
    \ arr[i + 1] {\n            maxIndex = i + 1\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpxb3pc2l1/tmpxb3pc2l1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b018861ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0188315b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0188315988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01883147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxb3pc2l1                        0x00005605dba4a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b018880a460 __libc_start_main +
    245

    6    tmpxb3pc2l1                        0x00005605dba4a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4e7avsx8/tmp4e7avsx8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c49c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c46b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c46b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c46b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7avsx8                        0x000055a0b6786552 <unavailable> + 5458

    5    libc.so.6                          0x00002b42c4bae460 __libc_start_main +
    245

    6    tmp4e7avsx8                        0x000055a0b67861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 1..<arr.count {\n        if arr[i] >= arr[i-1]\
    \ {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpn8vk0_uj/tmpn8vk0_uj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25b0dd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25b0aceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25b0ace988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25b0acd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8vk0_uj                        0x0000563908faf552 <unavailable> + 5458

    5    libc.so.6                          0x00002b25b0fc3460 __libc_start_main +
    245

    6    tmpn8vk0_uj                        0x0000563908faf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count-1 {\n        if arr[i] >= arr[i+1]\
    \ {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ge0h1i7/tmp7ge0h1i7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ec7eb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ec7ba8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ec7ba8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ec7ba77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ge0h1i7                        0x000055acd53e4552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0ec809d460 __libc_start_main +
    245

    6    tmp7ge0h1i7                        0x000055acd53e41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4e7avsx8/tmp4e7avsx8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c49c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c46b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c46b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c46b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7avsx8                        0x000055a0b6786552 <unavailable> + 5458

    5    libc.so.6                          0x00002b42c4bae460 __libc_start_main +
    245

    6    tmp4e7avsx8                        0x000055a0b67861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = -1\n    for i in 0..<arr.count {\n      \
    \  if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n   \
    \     }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpvnlqipqo/tmpvnlqipqo.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af715cd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7159c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7159c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7159c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvnlqipqo                        0x000055f9803c7552 <unavailable> + 5458

    5    libc.so.6                          0x00002af715ebc460 __libc_start_main +
    245

    6    tmpvnlqipqo                        0x000055f9803c71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var index = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            index = i\n        }\n    }\n    return index\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwfr9ftvf/tmpwfr9ftvf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59fb2e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59fafd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59fafd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59fafd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwfr9ftvf                        0x0000556f9e0f2552 <unavailable> + 5458

    5    libc.so.6                          0x00002b59fb4cd460 __libc_start_main +
    245

    6    tmpwfr9ftvf                        0x0000556f9e0f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <=\
    \ arr[i + 1] {\n            maxIndex = i + 1\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpxb3pc2l1/tmpxb3pc2l1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b018861ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0188315b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0188315988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01883147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxb3pc2l1                        0x00005605dba4a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b018880a460 __libc_start_main +
    245

    6    tmpxb3pc2l1                        0x00005605dba4a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var index = -1\n    for i in 0..<arr.count-1 {\n        if arr[i] >= arr[i+1]\
    \ {\n            index = i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwia4xj83/tmpwia4xj83.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34898adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34895a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34895a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34895a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwia4xj83                        0x000055a4518ad552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3489a99460 __libc_start_main +
    245

    6    tmpwia4xj83                        0x000055a4518ad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4e7avsx8/tmp4e7avsx8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c49c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c46b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c46b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c46b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7avsx8                        0x000055a0b6786552 <unavailable> + 5458

    5    libc.so.6                          0x00002b42c4bae460 __libc_start_main +
    245

    6    tmp4e7avsx8                        0x000055a0b67861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: 0
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    guard arr.count > 1 else { return -1 }\n    var maxIndex = -1\n    for i\
    \ in 1..<arr.count {\n        if arr[i] <= arr[i-1] {\n            maxIndex =\
    \ i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxValue = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxIndex = i\n            maxValue\
    \ = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpnnk77x3j/tmpnnk77x3j.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e88432c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e88129b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e88129988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e881287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnnk77x3j                        0x000055f801780552 <unavailable> + 5458

    5    libc.so.6                          0x00002b4e8861e460 __libc_start_main +
    245

    6    tmpnnk77x3j                        0x000055f8017801a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpmmcwce71/tmpmmcwce71.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e8e0e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e8dddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e8dddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e8ddda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmcwce71                        0x000055d31b72b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e8e2d0460 __libc_start_main +
    245

    6    tmpmmcwce71                        0x000055d31b72b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var index = -1\n    for i in 0..<arr.count-1 {\n        if arr[i] >= arr[i+1]\
    \ {\n            index = i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwia4xj83/tmpwia4xj83.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34898adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34895a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34895a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34895a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwia4xj83                        0x000055a4518ad552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3489a99460 __libc_start_main +
    245

    6    tmpwia4xj83                        0x000055a4518ad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] > arr[max] {\n\
    \            max = i\n        }\n    }\n    if arr[max] > arr[max - 1] {\n   \
    \     return max\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmp9mwkdlnf/tmp9mwkdlnf.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b900b369c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b900b060b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b900b060988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b900b05f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9mwkdlnf                        0x00005604eb16c552 <unavailable> + 5458

    5    libc.so.6                          0x00002b900b555460 __libc_start_main +
    245

    6    tmp9mwkdlnf                        0x00005604eb16c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for (index, element) in arr.enumerated()\
    \ {\n        if element > max {\n            max = element\n            maxIndex\
    \ = index\n        }\n    }\n    if maxIndex == arr.count - 1 {\n        return\
    \ -1\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpt7ps3n3s/tmpt7ps3n3s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52904e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52901d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52901d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52901d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt7ps3n3s                        0x000056541ce635e2 <unavailable> + 5602

    5    libc.so.6                          0x00002b52906ce460 __libc_start_main +
    245

    6    tmpt7ps3n3s                        0x000056541ce63239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <=\
    \ arr[i + 1] {\n            maxIndex = i + 1\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpxb3pc2l1/tmpxb3pc2l1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b018861ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0188315b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0188315988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01883147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxb3pc2l1                        0x00005605dba4a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b018880a460 __libc_start_main +
    245

    6    tmpxb3pc2l1                        0x00005605dba4a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count-1 {\n        if arr[i] >= arr[i+1]\
    \ {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ge0h1i7/tmp7ge0h1i7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ec7eb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ec7ba8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ec7ba8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ec7ba77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ge0h1i7                        0x000055acd53e4552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0ec809d460 __libc_start_main +
    245

    6    tmp7ge0h1i7                        0x000055acd53e41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i] <= arr[i\
    \ + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpnz5vgugc/tmpnz5vgugc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3868e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3865ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3865dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3865dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnz5vgugc                        0x0000557445e6361f <unavailable> + 5663

    5    libc.so.6                          0x00002ad386ad2460 __libc_start_main +
    245

    6    tmpnz5vgugc                        0x0000557445e631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] < max {\n            return i - 1\n        }\n        if arr[i]\
    \ > max {\n            max = arr[i]\n            index = i\n        }\n    }\n\
    \    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp16d2dyuh/tmp16d2dyuh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aead7f86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aead7c7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aead7c7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aead7c7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16d2dyuh                        0x0000563b84309552 <unavailable> + 5458

    5    libc.so.6                          0x00002aead8172460 __libc_start_main +
    245

    6    tmp16d2dyuh                        0x0000563b843091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n    if maxIndex == arr.count - 1 {\n        return -1\n   \
    \ }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbdwr49s6/tmpbdwr49s6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7193b96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b719388db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b719388d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b719388c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdwr49s6                        0x000056116fa93552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7193d82460 __libc_start_main +
    245

    6    tmpbdwr49s6                        0x000056116fa931a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for i in 1..<arr.count {\n        if arr[i] > arr[i-1] {\n\
    \            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4lmz87u5/tmp4lmz87u5.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54725afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54722a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54722a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54722a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lmz87u5                        0x000055f1afdb5552 <unavailable> + 5458

    5    libc.so.6                          0x00002b547279b460 __libc_start_main +
    245

    6    tmp4lmz87u5                        0x000055f1afdb51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n     \
    \   if arr[i] > max {\n            max = arr[i]\n            index = i\n     \
    \   }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpit530hpd/tmpit530hpd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2201dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d21d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d21d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d21d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit530hpd                        0x000055bb5cf1a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5d22209460 __libc_start_main +
    245

    6    tmpit530hpd                        0x000055bb5cf1a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    if arr.count == 0 {\n        return -1\n    }\n    var max = arr[0]\n   \
    \ var index = 0\n    for i in 1..<arr.count {\n        if arr[i] > max {\n   \
    \         max = arr[i]\n            index = i\n        }\n    }\n    return index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7xpb04m7/tmp7xpb04m7.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba48c8ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba48c5f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba48c5f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba48c5f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xpb04m7                        0x000055f581c4d552 <unavailable> + 5458

    5    libc.so.6                          0x00002ba48caeb460 __libc_start_main +
    245

    6    tmp7xpb04m7                        0x000055f581c4d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824379
