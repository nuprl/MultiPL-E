language: swift
name: HumanEval_90_next_smallest
results:
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var next = lst[1]\n    for\
    \ i in 1..<lst.count {\n        if lst[i] < min {\n            next = min\n  \
    \          min = lst[i]\n        } else if lst[i] < next {\n            next =\
    \ lst[i]\n        }\n    }\n    return next\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb2hvigrz/tmpb2hvigrz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b547d096c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b547cd8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b547cd8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b547cd8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb2hvigrz                        0x000055be344519aa <unavailable> + 6570

    5    libc.so.6                          0x00002b547d282460 __libc_start_main +
    245

    6    tmpb2hvigrz                        0x000055be344511a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ {\n        return nil\n    }\n    var min = lst[0]\n    var min2 = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            min2 = min\n\
    \            min = lst[i]\n        } else if lst[i] < min2 {\n            min2\
    \ = lst[i]\n        }\n    }\n    return min2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpkd7lpxgj/tmpkd7lpxgj.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b086209ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0861d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0861d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0861d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkd7lpxgj                        0x000056510a7907c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b0862286460 __libc_start_main +
    245

    6    tmpkd7lpxgj                        0x000056510a7901a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var min2 = lst[1]\n    for i in lst\
    \ {\n        if i < min {\n            min2 = min\n            min = i\n     \
    \   } else if i < min2 {\n            min2 = i\n        }\n    }\n    return min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcoa3hc4s/tmpcoa3hc4s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b228481ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2284511b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2284511988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22845107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcoa3hc4s                        0x0000557286b23601 <unavailable> + 5633

    5    libc.so.6                          0x00002b2284a06460 __libc_start_main +
    245

    6    tmpcoa3hc4s                        0x0000557286b23189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    if min > secondMin {\n        min = lst[1]\n        secondMin = lst[0]\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp4p4m0h7j/tmp4p4m0h7j.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31c496dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31c4664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31c4664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31c46637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4p4m0h7j                        0x00005625c87939aa <unavailable> + 6570

    5    libc.so.6                          0x00002b31c4b59460 __libc_start_main +
    245

    6    tmp4p4m0h7j                        0x00005625c87931a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var next = lst[1]\n    for i in lst\
    \ {\n        if i < min {\n            next = min\n            min = i\n     \
    \   } else if i < next {\n            next = i\n        }\n    }\n    return next\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmph72_a6ea/tmph72_a6ea.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b266b4fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b266b1f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b266b1f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b266b1f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph72_a6ea                        0x000055a32fd92601 <unavailable> + 5633

    5    libc.so.6                          0x00002b266b6e7460 __libc_start_main +
    245

    6    tmph72_a6ea                        0x000055a32fd92189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var second = lst[1]\n  \
    \  for i in 1..<lst.count {\n        if lst[i] < min {\n            second = min\n\
    \            min = lst[i]\n        } else if lst[i] < second {\n            second\
    \ = lst[i]\n        }\n    }\n    return second\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpejux0ms9/tmpejux0ms9.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab938bcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9388c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9388c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9388c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpejux0ms9                        0x000055ff581f69aa <unavailable> + 6570

    5    libc.so.6                          0x00002ab938db6460 __libc_start_main +
    245

    6    tmpejux0ms9                        0x000055ff581f61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var secondMin = Int.max\n    for i in lst {\n        if i < min {\n      \
    \      secondMin = min\n            min = i\n        } else if i < secondMin {\n\
    \            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp0wx0cn3y/tmp0wx0cn3y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40f79acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40f76a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40f76a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40f76a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wx0cn3y                        0x0000561ead0968da <unavailable> + 6362

    5    libc.so.6                          0x00002b40f7b98460 __libc_start_main +
    245

    6    tmp0wx0cn3y                        0x0000561ead0960d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    let sorted = lst.sorted()\n    var last = sorted[0]\n  \
    \  for i in 1..<sorted.count {\n        if sorted[i] != last {\n            return\
    \ sorted[i]\n        }\n        last = sorted[i]\n    }\n    return nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i\
    \ in 2..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < secondMin {\n          \
    \  secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplbbtvvac/tmplbbtvvac.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4582e84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4582b7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4582b7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4582b7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplbbtvvac                        0x0000556c915c97c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b4583070460 __libc_start_main +
    245

    6    tmplbbtvvac                        0x0000556c915c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var secondMin = Int.max\n    for i in lst {\n        if i < min {\n      \
    \      secondMin = min\n            min = i\n        } else if i < secondMin {\n\
    \            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp0wx0cn3y/tmp0wx0cn3y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40f79acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40f76a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40f76a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40f76a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wx0cn3y                        0x0000561ead0968da <unavailable> + 6362

    5    libc.so.6                          0x00002b40f7b98460 __libc_start_main +
    245

    6    tmp0wx0cn3y                        0x0000561ead0960d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   if min > nextMin {\n        min = nextMin\n        nextMin = lst[0]\n    }\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n    \
    \        nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpp0zgohk0/tmpp0zgohk0.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7213453c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b721314ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b721314a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72131497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0zgohk0                        0x000055fde035e9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b721363f460 __libc_start_main +
    245

    6    tmpp0zgohk0                        0x000055fde035e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var min2 = Int.max\n    for i in lst {\n        if i < min {\n           \
    \ min2 = min\n            min = i\n        } else if i < min2 {\n            min2\
    \ = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprapvg7zh/tmprapvg7zh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb78a12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb78709b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb78709988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb787087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprapvg7zh                        0x0000561e1c0e08da <unavailable> + 6362

    5    libc.so.6                          0x00002adb78bfe460 __libc_start_main +
    245

    6    tmprapvg7zh                        0x0000561e1c0e00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var secondMin = Int.max\n    for item in lst {\n        if item < min {\n\
    \            secondMin = min\n            min = item\n        } else if item <\
    \ secondMin {\n            secondMin = item\n        }\n    }\n    return secondMin\
    \ == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmphz73ru22/tmphz73ru22.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f8989c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f8680b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f8680988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f867f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphz73ru22                        0x0000562892b2b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab9f8b75460 __libc_start_main +
    245

    6    tmphz73ru22                        0x0000562892b2b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ {\n        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n    \
    \        nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp6pu75zrv/tmp6pu75zrv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b77947c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b7763eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b7763e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b7763d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6pu75zrv                        0x0000555e069457c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b4b77b33460 __libc_start_main +
    245

    6    tmp6pu75zrv                        0x0000555e069451a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in lst {\n        if i < min {\n            nextMin = min\n        \
    \    min = i\n        } else if i < nextMin {\n            nextMin = i\n     \
    \   }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpshmjl6sh/tmpshmjl6sh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e8ceeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e8cbe5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e8cbe5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e8cbe47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshmjl6sh                        0x000055d80fa41601 <unavailable> + 5633

    5    libc.so.6                          0x00002b3e8d0da460 __libc_start_main +
    245

    6    tmpshmjl6sh                        0x000055d80fa41189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpq3xtrw_5/tmpq3xtrw_5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5966c3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5966936b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5966936988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59669357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3xtrw_5                        0x0000556757df8601 <unavailable> + 5633

    5    libc.so.6                          0x00002b5966e2b460 __libc_start_main +
    245

    6    tmpq3xtrw_5                        0x0000556757df8189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = lst[0]\n  \
    \  var nextMin = lst[0]\n    for i in lst {\n        if i < min {\n          \
    \  nextMin = min\n            min = i\n        } else if i < nextMin {\n     \
    \       nextMin = i\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpm2vxxupg/tmpm2vxxupg.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1060eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab105de1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab105de1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab105de07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm2vxxupg                        0x000055d34e3ca5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ab1062d6460 __libc_start_main +
    245

    6    tmpm2vxxupg                        0x000055d34e3ca129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    if min > secondMin {\n        min = lst[1]\n        secondMin = lst[0]\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp4p4m0h7j/tmp4p4m0h7j.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31c496dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31c4664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31c4664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31c46637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4p4m0h7j                        0x00005625c87939aa <unavailable> + 6570

    5    libc.so.6                          0x00002b31c4b59460 __libc_start_main +
    245

    6    tmp4p4m0h7j                        0x00005625c87931a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var min2 = lst[1]\n    if\
    \ min > min2 {\n        min = min2\n        min2 = lst[0]\n    }\n    for i in\
    \ 2..<lst.count {\n        if lst[i] < min {\n            min2 = min\n       \
    \     min = lst[i]\n        } else if lst[i] < min2 {\n            min2 = lst[i]\n\
    \        }\n    }\n    return min2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7mu2jbi8/tmp7mu2jbi8.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff68715c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff6840cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff6840c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff6840b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7mu2jbi8                        0x00005605e2b2b9aa <unavailable> + 6570

    5    libc.so.6                          0x00002aff68901460 __libc_start_main +
    245

    6    tmp7mu2jbi8                        0x00005605e2b2b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in lst {\n        if i < min {\n            nextMin = min\n        \
    \    min = i\n        } else if i < nextMin {\n            nextMin = i\n     \
    \   }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpshmjl6sh/tmpshmjl6sh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e8ceeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e8cbe5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e8cbe5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e8cbe47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshmjl6sh                        0x000055d80fa41601 <unavailable> + 5633

    5    libc.so.6                          0x00002b3e8d0da460 __libc_start_main +
    245

    6    tmpshmjl6sh                        0x000055d80fa41189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i\
    \ in 2..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < secondMin {\n          \
    \  secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplbbtvvac/tmplbbtvvac.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4582e84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4582b7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4582b7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4582b7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplbbtvvac                        0x0000556c915c97c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b4583070460 __libc_start_main +
    245

    6    tmplbbtvvac                        0x0000556c915c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpo3kef7xn/tmpo3kef7xn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a4f179c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a4ee70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a4ee70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a4ee6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3kef7xn                        0x00005569799717c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1a4f365460 __libc_start_main +
    245

    6    tmpo3kef7xn                        0x00005569799711a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ 2..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n    \
    \        min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpltscwpa0/tmpltscwpa0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6fe8a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6fe598b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6fe598988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6fe5977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltscwpa0                        0x000055e7d333f7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ba6fea8d460 __libc_start_main +
    245

    6    tmpltscwpa0                        0x000055e7d333f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var min2 = Int.max\n    for i in lst {\n        if i < min {\n           \
    \ min2 = min\n            min = i\n        } else if i < min2 {\n            min2\
    \ = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprapvg7zh/tmprapvg7zh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb78a12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb78709b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb78709988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb787087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprapvg7zh                        0x0000561e1c0e08da <unavailable> + 6362

    5    libc.so.6                          0x00002adb78bfe460 __libc_start_main +
    245

    6    tmprapvg7zh                        0x0000561e1c0e00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ 1..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n    \
    \        min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_cdctd2b/tmp_cdctd2b.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f73adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f70a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f70a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f70a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cdctd2b                        0x000055fbc58529aa <unavailable> + 6570

    5    libc.so.6                          0x00002b00f7599460 __libc_start_main +
    245

    6    tmp_cdctd2b                        0x000055fbc58521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ {\n        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            nextMin = min\n       \
    \     min = i\n        } else if i < nextMin {\n            nextMin = i\n    \
    \    }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9j5ki81k/tmp9j5ki81k.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b491eaaac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b491e7a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b491e7a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b491e7a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9j5ki81k                        0x000055c3ce1a4601 <unavailable> + 5633

    5    libc.so.6                          0x00002b491ec96460 __libc_start_main +
    245

    6    tmp9j5ki81k                        0x000055c3ce1a4189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var secondMin = Int.max\n    for i in lst {\n        if i < min {\n      \
    \      secondMin = min\n            min = i\n        } else if i < secondMin {\n\
    \            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp0wx0cn3y/tmp0wx0cn3y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40f79acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40f76a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40f76a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40f76a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wx0cn3y                        0x0000561ead0968da <unavailable> + 6362

    5    libc.so.6                          0x00002b40f7b98460 __libc_start_main +
    245

    6    tmp0wx0cn3y                        0x0000561ead0960d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var next = lst[1]\n    for\
    \ i in 1..<lst.count {\n        if lst[i] < min {\n            next = min\n  \
    \          min = lst[i]\n        } else if lst[i] < next {\n            next =\
    \ lst[i]\n        }\n    }\n    return next\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb2hvigrz/tmpb2hvigrz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b547d096c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b547cd8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b547cd8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b547cd8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb2hvigrz                        0x000055be344519aa <unavailable> + 6570

    5    libc.so.6                          0x00002b547d282460 __libc_start_main +
    245

    6    tmpb2hvigrz                        0x000055be344511a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i\
    \ in 2..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < secondMin {\n          \
    \  secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplbbtvvac/tmplbbtvvac.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4582e84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4582b7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4582b7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4582b7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplbbtvvac                        0x0000556c915c97c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b4583070460 __libc_start_main +
    245

    6    tmplbbtvvac                        0x0000556c915c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ 1..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n    \
    \        min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_cdctd2b/tmp_cdctd2b.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f73adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f70a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f70a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f70a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cdctd2b                        0x000055fbc58529aa <unavailable> + 6570

    5    libc.so.6                          0x00002b00f7599460 __libc_start_main +
    245

    6    tmp_cdctd2b                        0x000055fbc58521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var min2 = lst[1]\n    for\
    \ i in lst {\n        if i < min {\n            min2 = min\n            min =\
    \ i\n        } else if i < min2 {\n            min2 = i\n        }\n    }\n  \
    \  return min2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcdd8tuno/tmpcdd8tuno.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af30e417c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af30e10eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af30e10e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af30e10d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcdd8tuno                        0x000055f52f6fe601 <unavailable> + 5633

    5    libc.so.6                          0x00002af30e603460 __libc_start_main +
    245

    6    tmpcdd8tuno                        0x000055f52f6fe189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i\
    \ in lst {\n        if i < min {\n            secondMin = min\n            min\
    \ = i\n        } else if i < secondMin {\n            secondMin = i\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpxj2m6mwj/tmpxj2m6mwj.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17f083ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17f0531b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17f0531988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17f05307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxj2m6mwj                        0x0000564b24d2d601 <unavailable> + 5633

    5    libc.so.6                          0x00002b17f0a26460 __libc_start_main +
    245

    6    tmpxj2m6mwj                        0x0000564b24d2d189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i\
    \ in lst {\n        if i < min {\n            secondMin = min\n            min\
    \ = i\n        } else if i < secondMin {\n            secondMin = i\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpxj2m6mwj/tmpxj2m6mwj.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17f083ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17f0531b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17f0531988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17f05307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxj2m6mwj                        0x0000564b24d2d601 <unavailable> + 5633

    5    libc.so.6                          0x00002b17f0a26460 __libc_start_main +
    245

    6    tmpxj2m6mwj                        0x0000564b24d2d189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpq3xtrw_5/tmpq3xtrw_5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5966c3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5966936b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5966936988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59669357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3xtrw_5                        0x0000556757df8601 <unavailable> + 5633

    5    libc.so.6                          0x00002b5966e2b460 __libc_start_main +
    245

    6    tmpq3xtrw_5                        0x0000556757df8189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ 2..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n    \
    \        min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpltscwpa0/tmpltscwpa0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6fe8a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6fe598b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6fe598988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6fe5977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltscwpa0                        0x000055e7d333f7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ba6fea8d460 __libc_start_main +
    245

    6    tmpltscwpa0                        0x000055e7d333f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpo3kef7xn/tmpo3kef7xn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a4f179c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a4ee70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a4ee70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a4ee6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3kef7xn                        0x00005569799717c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1a4f365460 __libc_start_main +
    245

    6    tmpo3kef7xn                        0x00005569799711a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var next_min = lst[1]\n\
    \    if min > next_min {\n        min = next_min\n        next_min = lst[0]\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            next_min\
    \ = min\n            min = lst[i]\n        } else if lst[i] < next_min {\n   \
    \         next_min = lst[i]\n        }\n    }\n    return next_min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpopk_3xu1/tmpopk_3xu1.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af37301bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af372d12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af372d12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af372d117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopk_3xu1                        0x000055c2f16539aa <unavailable> + 6570

    5    libc.so.6                          0x00002af373207460 __libc_start_main +
    245

    6    tmpopk_3xu1                        0x000055c2f16531a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpq3xtrw_5/tmpq3xtrw_5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5966c3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5966936b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5966936988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59669357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3xtrw_5                        0x0000556757df8601 <unavailable> + 5633

    5    libc.so.6                          0x00002b5966e2b460 __libc_start_main +
    245

    6    tmpq3xtrw_5                        0x0000556757df8189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    let sorted = lst.sorted()\n    var prev = sorted[0]\n  \
    \  for i in 1..<sorted.count {\n        if sorted[i] != prev {\n            return\
    \ sorted[i]\n        }\n        prev = sorted[i]\n    }\n    return nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var sorted = lst.sorted()\n    var prev = sorted.removeFirst()\n\
    \    for i in sorted {\n        if i != prev {\n            return i\n       \
    \ }\n        prev = i\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var next = lst[1]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < min {\n            next = min\n            min = lst[i]\n\
    \        } else if lst[i] < next {\n            next = lst[i]\n        }\n   \
    \ }\n    return next == min ? nil : next\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpo3kef7xn/tmpo3kef7xn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a4f179c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a4ee70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a4ee70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a4ee6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3kef7xn                        0x00005569799717c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1a4f365460 __libc_start_main +
    245

    6    tmpo3kef7xn                        0x00005569799711a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min1 = lst[0]\n    var min2 = lst[1]\n    if min1 >\
    \ min2 {\n        (min1, min2) = (min2, min1)\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min1 {\n            min2 = min1\n            min1 = lst[i]\n\
    \        } else if lst[i] < min2 {\n            min2 = lst[i]\n        }\n   \
    \ }\n    return min2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp62j_z5c4/tmp62j_z5c4.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4f0501c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4f01f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4f01f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4f01f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp62j_z5c4                        0x00005633907679aa <unavailable> + 6570

    5    libc.so.6                          0x00002ba4f06ed460 __libc_start_main +
    245

    6    tmp62j_z5c4                        0x00005633907671a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var secondMin = Int.max\n    for i in lst {\n        if i < min {\n      \
    \      secondMin = min\n            min = i\n        } else if i < secondMin {\n\
    \            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp0wx0cn3y/tmp0wx0cn3y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40f79acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40f76a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40f76a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40f76a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wx0cn3y                        0x0000561ead0968da <unavailable> + 6362

    5    libc.so.6                          0x00002b40f7b98460 __libc_start_main +
    245

    6    tmp0wx0cn3y                        0x0000561ead0960d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = lst[0]\n  \
    \  var secondMin = lst[0]\n    for i in lst {\n        if i < min {\n        \
    \    secondMin = min\n            min = i\n        } else if i < secondMin {\n\
    \            secondMin = i\n        }\n    }\n    return secondMin\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpxug7q_ng/tmpxug7q_ng.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81efda5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81efa9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81efa9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81efa9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxug7q_ng                        0x0000560b24aa15a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b81eff91460 __libc_start_main +
    245

    6    tmpxug7q_ng                        0x0000560b24aa1129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var second = Int.max\n    for i in lst {\n        if i < min {\n         \
    \   second = min\n            min = i\n        } else if i < second {\n      \
    \      second = i\n        }\n    }\n    return second == Int.max ? nil : second\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjufow6lb/tmpjufow6lb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add9d5fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add9d2f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add9d2f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add9d2f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjufow6lb                        0x0000560b44a768da <unavailable> + 6362

    5    libc.so.6                          0x00002add9d7e9460 __libc_start_main +
    245

    6    tmpjufow6lb                        0x0000560b44a760d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 1..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpkwb10j4j/tmpkwb10j4j.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dc91d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dc8ecfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dc8ecf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dc8ece7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkwb10j4j                        0x000055fa1cbc79aa <unavailable> + 6570

    5    libc.so.6                          0x00002b6dc93c4460 __libc_start_main +
    245

    6    tmpkwb10j4j                        0x000055fa1cbc71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var min2 = lst[1]\n    if\
    \ min > min2 {\n        (min, min2) = (min2, min)\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            min2 = min\n            min = lst[i]\n\
    \        } else if lst[i] < min2 {\n            min2 = lst[i]\n        }\n   \
    \ }\n    return min2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpewr40iig/tmpewr40iig.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f8a756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f8a44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f8a44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f8a44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewr40iig                        0x0000563d89f0f9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b9f8a942460 __libc_start_main +
    245

    6    tmpewr40iig                        0x0000563d89f0f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var secondMin = Int.max\n    for i in lst {\n        if i < min {\n      \
    \      secondMin = min\n            min = i\n        } else if i < secondMin {\n\
    \            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp0wx0cn3y/tmp0wx0cn3y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40f79acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40f76a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40f76a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40f76a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wx0cn3y                        0x0000561ead0968da <unavailable> + 6362

    5    libc.so.6                          0x00002b40f7b98460 __libc_start_main +
    245

    6    tmp0wx0cn3y                        0x0000561ead0960d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i\
    \ in lst {\n        if i < min {\n            secondMin = min\n            min\
    \ = i\n        } else if i < secondMin {\n            secondMin = i\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpxj2m6mwj/tmpxj2m6mwj.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17f083ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17f0531b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17f0531988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17f05307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxj2m6mwj                        0x0000564b24d2d601 <unavailable> + 5633

    5    libc.so.6                          0x00002b17f0a26460 __libc_start_main +
    245

    6    tmpxj2m6mwj                        0x0000564b24d2d189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in lst {\n        if i < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = i\n       \
    \ } else if i < secondSmallest {\n            secondSmallest = i\n        }\n\
    \    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzavksmlb/tmpzavksmlb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2387446c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b238713db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b238713d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b238713c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzavksmlb                        0x000055dcf48175a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b2387632460 __libc_start_main +
    245

    6    tmpzavksmlb                        0x000055dcf4817129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpo3kef7xn/tmpo3kef7xn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a4f179c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a4ee70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a4ee70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a4ee6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3kef7xn                        0x00005569799717c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1a4f365460 __libc_start_main +
    245

    6    tmpo3kef7xn                        0x00005569799711a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var secondMin = Int.max\n    for i in lst {\n        if i < min {\n      \
    \      secondMin = min\n            min = i\n        } else if i < secondMin {\n\
    \            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp0wx0cn3y/tmp0wx0cn3y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40f79acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40f76a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40f76a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40f76a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wx0cn3y                        0x0000561ead0968da <unavailable> + 6362

    5    libc.so.6                          0x00002b40f7b98460 __libc_start_main +
    245

    6    tmp0wx0cn3y                        0x0000561ead0960d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var sorted = lst.sorted()\n    var prev = sorted.removeFirst()\n\
    \    while let next = sorted.first {\n        if next != prev {\n            return\
    \ next\n        }\n        prev = sorted.removeFirst()\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    if min > secondMin {\n        min = lst[1]\n        secondMin = lst[0]\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp4p4m0h7j/tmp4p4m0h7j.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31c496dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31c4664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31c4664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31c46637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4p4m0h7j                        0x00005625c87939aa <unavailable> + 6570

    5    libc.so.6                          0x00002b31c4b59460 __libc_start_main +
    245

    6    tmp4p4m0h7j                        0x00005625c87931a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    if min\
    \ > secondMin {\n        swap(&min, &secondMin)\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_24yhoq7/tmp_24yhoq7.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac62f72bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac62f422b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac62f422988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac62f4217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_24yhoq7                        0x000055fbd6edd9fa <unavailable> + 6650

    5    libc.so.6                          0x00002ac62f917460 __libc_start_main +
    245

    6    tmp_24yhoq7                        0x000055fbd6edd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpo3kef7xn/tmpo3kef7xn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a4f179c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a4ee70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a4ee70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a4ee6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3kef7xn                        0x00005569799717c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1a4f365460 __libc_start_main +
    245

    6    tmpo3kef7xn                        0x00005569799711a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ 1..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n    \
    \        min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_cdctd2b/tmp_cdctd2b.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f73adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f70a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f70a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f70a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cdctd2b                        0x000055fbc58529aa <unavailable> + 6570

    5    libc.so.6                          0x00002b00f7599460 __libc_start_main +
    245

    6    tmp_cdctd2b                        0x000055fbc58521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    if min\
    \ > secondMin {\n        min = lst[1]\n        secondMin = lst[0]\n    }\n   \
    \ for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n    \
    \        secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqe4xyo4k/tmpqe4xyo4k.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75fec81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75fe978b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75fe978988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75fe9777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqe4xyo4k                        0x000055f48795c9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b75fee6d460 __libc_start_main +
    245

    6    tmpqe4xyo4k                        0x000055f48795c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    if min > secondMin {\n        min = lst[1]\n        secondMin = lst[0]\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] > min && lst[i] <\
    \ secondMin {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpu0nts0z9/tmpu0nts0z9.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b433e875c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b433e56cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b433e56c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b433e56b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu0nts0z9                        0x0000561b336239aa <unavailable> + 6570

    5    libc.so.6                          0x00002b433ea61460 __libc_start_main +
    245

    6    tmpu0nts0z9                        0x0000561b336231a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var min2 = lst[1]\n    if\
    \ min > min2 {\n        min = min2\n        min2 = lst[0]\n    }\n    for i in\
    \ 2..<lst.count {\n        if lst[i] < min {\n            min2 = min\n       \
    \     min = lst[i]\n        } else if lst[i] < min2 {\n            min2 = lst[i]\n\
    \        }\n    }\n    return min2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7mu2jbi8/tmp7mu2jbi8.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff68715c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff6840cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff6840c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff6840b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7mu2jbi8                        0x00005605e2b2b9aa <unavailable> + 6570

    5    libc.so.6                          0x00002aff68901460 __libc_start_main +
    245

    6    tmp7mu2jbi8                        0x00005605e2b2b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var sorted = lst.sorted()\n\
    \    var prev = sorted.removeFirst()\n    for i in sorted {\n        if i != prev\
    \ {\n            return i\n        }\n        prev = i\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:623: Fatal error: Can''t remove
    first element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b3db22b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3db1fae561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3db1fae286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3db1fae13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3db1fadbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b3db1f9dff0 RangeReplaceableCollection.removeFirst()
    + 272

    6    tmpr2k6wudo                        0x000055a962813f4e <unavailable> + 8014

    7    tmpr2k6wudo                        0x000055a962813858 <unavailable> + 6232

    8    libc.so.6                          0x00002b3db24a3460 __libc_start_main +
    245

    9    tmpr2k6wudo                        0x000055a962813219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    let sorted = lst.sorted()\n\
    \    if sorted.count < 2 {\n        return nil\n    }\n    return sorted[1]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp73caxvsr/tmp73caxvsr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9cc8dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9cc5d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9cc5d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9cc5d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp73caxvsr                        0x00005642657a88ba <unavailable> + 6330

    5    libc.so.6                          0x00002ae9ccac6460 __libc_start_main +
    245

    6    tmp73caxvsr                        0x00005642657a80b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ 1..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n    \
    \        min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_cdctd2b/tmp_cdctd2b.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f73adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f70a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f70a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f70a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cdctd2b                        0x000055fbc58529aa <unavailable> + 6570

    5    libc.so.6                          0x00002b00f7599460 __libc_start_main +
    245

    6    tmp_cdctd2b                        0x000055fbc58521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var next_min = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            next_min\
    \ = min\n            min = lst[i]\n        } else if lst[i] < next_min {\n   \
    \         next_min = lst[i]\n        }\n    }\n    return next_min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqzf8plw4/tmpqzf8plw4.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b027230cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0272003b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0272003988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02720027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqzf8plw4                        0x00005596387207c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b02724f8460 __libc_start_main +
    245

    6    tmpqzf8plw4                        0x00005596387201a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpo3kef7xn/tmpo3kef7xn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a4f179c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a4ee70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a4ee70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a4ee6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3kef7xn                        0x00005569799717c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1a4f365460 __libc_start_main +
    245

    6    tmpo3kef7xn                        0x00005569799711a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ 2..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n    \
    \        min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpltscwpa0/tmpltscwpa0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6fe8a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6fe598b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6fe598988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6fe5977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltscwpa0                        0x000055e7d333f7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ba6fea8d460 __libc_start_main +
    245

    6    tmpltscwpa0                        0x000055e7d333f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i\
    \ in 1..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < secondMin {\n          \
    \  secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9dvlv4gk/tmp9dvlv4gk.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b846d0b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b846cdacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b846cdac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b846cdab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dvlv4gk                        0x0000564b85af29aa <unavailable> + 6570

    5    libc.so.6                          0x00002b846d2a1460 __libc_start_main +
    245

    6    tmp9dvlv4gk                        0x0000564b85af21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpq3xtrw_5/tmpq3xtrw_5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5966c3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5966936b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5966936988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59669357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3xtrw_5                        0x0000556757df8601 <unavailable> + 5633

    5    libc.so.6                          0x00002b5966e2b460 __libc_start_main +
    245

    6    tmpq3xtrw_5                        0x0000556757df8189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var min2 = lst[1]\n    for\
    \ i in lst {\n        if i < min {\n            min2 = min\n            min =\
    \ i\n        } else if i < min2 {\n            min2 = i\n        }\n    }\n  \
    \  return min2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcdd8tuno/tmpcdd8tuno.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af30e417c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af30e10eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af30e10e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af30e10d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcdd8tuno                        0x000055f52f6fe601 <unavailable> + 5633

    5    libc.so.6                          0x00002af30e603460 __libc_start_main +
    245

    6    tmpcdd8tuno                        0x000055f52f6fe189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpq3xtrw_5/tmpq3xtrw_5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5966c3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5966936b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5966936988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59669357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3xtrw_5                        0x0000556757df8601 <unavailable> + 5633

    5    libc.so.6                          0x00002b5966e2b460 __libc_start_main +
    245

    6    tmpq3xtrw_5                        0x0000556757df8189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var sorted = lst.sorted()\n    var last = sorted.removeFirst()\n\
    \    for i in sorted {\n        if i != last {\n            return i\n       \
    \ }\n        last = i\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ 1..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n    \
    \        min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_cdctd2b/tmp_cdctd2b.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f73adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f70a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f70a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f70a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cdctd2b                        0x000055fbc58529aa <unavailable> + 6570

    5    libc.so.6                          0x00002b00f7599460 __libc_start_main +
    245

    6    tmp_cdctd2b                        0x000055fbc58521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var nextMin = Int.max\n    for num in lst {\n        if num < min {\n    \
    \        nextMin = min\n            min = num\n        } else if num < nextMin\
    \ {\n            nextMin = num\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp6z7lrll7/tmp6z7lrll7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acdbdaa7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdbd79eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdbd79e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdbd79d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6z7lrll7                        0x0000557c4b0ef8da <unavailable> + 6362

    5    libc.so.6                          0x00002acdbdc93460 __libc_start_main +
    245

    6    tmp6z7lrll7                        0x0000557c4b0ef0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i\
    \ in 2..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < secondMin {\n          \
    \  secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplbbtvvac/tmplbbtvvac.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4582e84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4582b7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4582b7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4582b7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplbbtvvac                        0x0000556c915c97c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b4583070460 __libc_start_main +
    245

    6    tmplbbtvvac                        0x0000556c915c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var sorted = lst.sorted()\n\
    \    var prev: Int?\n    for item in sorted {\n        if prev != nil && prev\
    \ != item {\n            return item\n        }\n        prev = item\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var next_min = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            next_min = min\n      \
    \      min = i\n        } else if i < next_min {\n            next_min = i\n \
    \       }\n    }\n    return next_min\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_3vympcl/tmp_3vympcl.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9226985c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b922667cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b922667c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b922667b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_3vympcl                        0x000055ea040cb601 <unavailable> + 5633

    5    libc.so.6                          0x00002b9226b71460 __libc_start_main +
    245

    6    tmp_3vympcl                        0x000055ea040cb189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpq3xtrw_5/tmpq3xtrw_5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5966c3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5966936b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5966936988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59669357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3xtrw_5                        0x0000556757df8601 <unavailable> + 5633

    5    libc.so.6                          0x00002b5966e2b460 __libc_start_main +
    245

    6    tmpq3xtrw_5                        0x0000556757df8189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpo3kef7xn/tmpo3kef7xn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a4f179c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a4ee70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a4ee70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a4ee6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3kef7xn                        0x00005569799717c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1a4f365460 __libc_start_main +
    245

    6    tmpo3kef7xn                        0x00005569799711a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var sorted = lst.sorted()\n\
    \    var last: Int?\n    for i in sorted {\n        if last == nil {\n       \
    \     last = i\n        } else if last != i {\n            return i\n        }\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in lst {\n        if i < min {\n            nextMin = min\n        \
    \    min = i\n        } else if i < nextMin {\n            nextMin = i\n     \
    \   }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpshmjl6sh/tmpshmjl6sh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e8ceeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e8cbe5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e8cbe5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e8cbe47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshmjl6sh                        0x000055d80fa41601 <unavailable> + 5633

    5    libc.so.6                          0x00002b3e8d0da460 __libc_start_main +
    245

    6    tmpshmjl6sh                        0x000055d80fa41189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ lst {\n        if i < min {\n            nextMin = min\n            min = i\n\
    \        } else if i < nextMin {\n            nextMin = i\n        }\n    }\n\
    \    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpsesu9ta6/tmpsesu9ta6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea7dbe3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea7d8dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea7d8da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea7d8d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsesu9ta6                        0x000055826a49d601 <unavailable> + 5633

    5    libc.so.6                          0x00002aea7ddcf460 __libc_start_main +
    245

    6    tmpsesu9ta6                        0x000055826a49d189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpo3kef7xn/tmpo3kef7xn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a4f179c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a4ee70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a4ee70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a4ee6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3kef7xn                        0x00005569799717c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1a4f365460 __libc_start_main +
    245

    6    tmpo3kef7xn                        0x00005569799711a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var min2 = Int.max\n    for i in lst {\n        if i < min {\n           \
    \ min2 = min\n            min = i\n        } else if i < min2 {\n            min2\
    \ = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprapvg7zh/tmprapvg7zh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb78a12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb78709b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb78709988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb787087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprapvg7zh                        0x0000561e1c0e08da <unavailable> + 6362

    5    libc.so.6                          0x00002adb78bfe460 __libc_start_main +
    245

    6    tmprapvg7zh                        0x0000561e1c0e00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var next = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < min {\n            next = min\n            min = lst[i]\n\
    \        } else if lst[i] < next {\n            next = lst[i]\n        }\n   \
    \ }\n    return next\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpmna7uka0/tmpmna7uka0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac148b60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac148857b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac148857988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1488567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmna7uka0                        0x000056449e070621 <unavailable> + 5665

    5    libc.so.6                          0x00002ac148d4c460 __libc_start_main +
    245

    6    tmpmna7uka0                        0x000056449e0701a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var min2 = lst[1]\n    for\
    \ i in lst {\n        if i < min {\n            min2 = min\n            min =\
    \ i\n        } else if i < min2 {\n            min2 = i\n        }\n    }\n  \
    \  return min2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcdd8tuno/tmpcdd8tuno.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af30e417c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af30e10eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af30e10e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af30e10d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcdd8tuno                        0x000055f52f6fe601 <unavailable> + 5633

    5    libc.so.6                          0x00002af30e603460 __libc_start_main +
    245

    6    tmpcdd8tuno                        0x000055f52f6fe189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpq3xtrw_5/tmpq3xtrw_5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5966c3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5966936b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5966936988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59669357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3xtrw_5                        0x0000556757df8601 <unavailable> + 5633

    5    libc.so.6                          0x00002b5966e2b460 __libc_start_main +
    245

    6    tmpq3xtrw_5                        0x0000556757df8189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var next = lst[1]\n    for\
    \ i in 1..<lst.count {\n        if lst[i] < min {\n            next = min\n  \
    \          min = lst[i]\n        } else if lst[i] < next {\n            next =\
    \ lst[i]\n        }\n    }\n    return next\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb2hvigrz/tmpb2hvigrz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b547d096c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b547cd8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b547cd8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b547cd8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb2hvigrz                        0x000055be344519aa <unavailable> + 6570

    5    libc.so.6                          0x00002b547d282460 __libc_start_main +
    245

    6    tmpb2hvigrz                        0x000055be344511a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ {\n        return nil\n    }\n    var min = lst[0]\n    var min2 = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            min2 = min\n          \
    \  min = i\n        } else if i < min2 {\n            min2 = i\n        }\n  \
    \  }\n    return min2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpsojmq72q/tmpsojmq72q.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55b6372c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55b6069b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55b6069988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55b60687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsojmq72q                        0x0000559ece43e601 <unavailable> + 5633

    5    libc.so.6                          0x00002b55b655e460 __libc_start_main +
    245

    6    tmpsojmq72q                        0x0000559ece43e189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    return lst.sorted()[1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplc0psood/tmplc0psood.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51589cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51586c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51586c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51586c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplc0psood                        0x000055618bcb58ba <unavailable> + 6330

    5    libc.so.6                          0x00002b5158bba460 __libc_start_main +
    245

    6    tmplc0psood                        0x000055618bcb50b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = lst[0]\n  \
    \  var nextMin = lst[0]\n    var found = false\n    for i in lst {\n        if\
    \ i < min {\n            nextMin = min\n            min = i\n            found\
    \ = true\n        } else if i < nextMin && i != min {\n            nextMin = i\n\
    \            found = true\n        }\n    }\n    return found ? nextMin : nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpsdprt9nb/tmpsdprt9nb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee80737c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee8042eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee8042e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee8042d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsdprt9nb                        0x000055f002e435a1 <unavailable> + 5537

    5    libc.so.6                          0x00002aee80923460 __libc_start_main +
    245

    6    tmpsdprt9nb                        0x000055f002e43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var sorted = lst.sorted()\n    var last = sorted.removeFirst()\n\
    \    for i in sorted {\n        if i != last {\n            return i\n       \
    \ }\n        last = i\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i\
    \ in lst {\n        if i < min {\n            secondMin = min\n            min\
    \ = i\n        } else if i < secondMin {\n            secondMin = i\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpxj2m6mwj/tmpxj2m6mwj.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17f083ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17f0531b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17f0531988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17f05307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxj2m6mwj                        0x0000564b24d2d601 <unavailable> + 5633

    5    libc.so.6                          0x00002b17f0a26460 __libc_start_main +
    245

    6    tmpxj2m6mwj                        0x0000564b24d2d189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    if min > secondMin {\n        min = lst[1]\n        secondMin = lst[0]\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp4p4m0h7j/tmp4p4m0h7j.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31c496dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31c4664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31c4664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31c46637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4p4m0h7j                        0x00005625c87939aa <unavailable> + 6570

    5    libc.so.6                          0x00002b31c4b59460 __libc_start_main +
    245

    6    tmp4p4m0h7j                        0x00005625c87931a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i\
    \ in 2..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < secondMin {\n          \
    \  secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplbbtvvac/tmplbbtvvac.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4582e84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4582b7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4582b7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4582b7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplbbtvvac                        0x0000556c915c97c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b4583070460 __libc_start_main +
    245

    6    tmplbbtvvac                        0x0000556c915c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ 1..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n    \
    \        min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_cdctd2b/tmp_cdctd2b.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f73adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f70a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f70a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f70a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cdctd2b                        0x000055fbc58529aa <unavailable> + 6570

    5    libc.so.6                          0x00002b00f7599460 __libc_start_main +
    245

    6    tmp_cdctd2b                        0x000055fbc58521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var min2 = Int.max\n    for i in lst {\n        if i < min {\n           \
    \ min2 = min\n            min = i\n        } else if i < min2 {\n            min2\
    \ = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprapvg7zh/tmprapvg7zh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb78a12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb78709b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb78709988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb787087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprapvg7zh                        0x0000561e1c0e08da <unavailable> + 6362

    5    libc.so.6                          0x00002adb78bfe460 __libc_start_main +
    245

    6    tmprapvg7zh                        0x0000561e1c0e00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ lst {\n        if i < min {\n            nextMin = min\n            min = i\n\
    \        } else if i < nextMin {\n            nextMin = i\n        }\n    }\n\
    \    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpsesu9ta6/tmpsesu9ta6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea7dbe3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea7d8dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea7d8da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea7d8d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsesu9ta6                        0x000055826a49d601 <unavailable> + 5633

    5    libc.so.6                          0x00002aea7ddcf460 __libc_start_main +
    245

    6    tmpsesu9ta6                        0x000055826a49d189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ lst {\n        if i < min {\n            nextMin = min\n            min = i\n\
    \        } else if i < nextMin {\n            nextMin = i\n        }\n    }\n\
    \    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpsesu9ta6/tmpsesu9ta6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea7dbe3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea7d8dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea7d8da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea7d8d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsesu9ta6                        0x000055826a49d601 <unavailable> + 5633

    5    libc.so.6                          0x00002aea7ddcf460 __libc_start_main +
    245

    6    tmpsesu9ta6                        0x000055826a49d189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var next_min = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            next_min = min\n      \
    \      min = i\n        } else if i < next_min {\n            next_min = i\n \
    \       }\n    }\n    return next_min\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_3vympcl/tmp_3vympcl.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9226985c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b922667cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b922667c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b922667b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_3vympcl                        0x000055ea040cb601 <unavailable> + 5633

    5    libc.so.6                          0x00002b9226b71460 __libc_start_main +
    245

    6    tmp_3vympcl                        0x000055ea040cb189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var sorted = lst.sorted()\n    var prev = sorted.removeFirst()\n\
    \    for i in sorted {\n        if i != prev {\n            return i\n       \
    \ }\n        prev = i\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var next_min = lst[1]\n\
    \    if min > next_min {\n        min = next_min\n        next_min = lst[0]\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            next_min\
    \ = min\n            min = lst[i]\n        } else if lst[i] < next_min {\n   \
    \         next_min = lst[i]\n        }\n    }\n    return next_min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpopk_3xu1/tmpopk_3xu1.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af37301bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af372d12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af372d12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af372d117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopk_3xu1                        0x000055c2f16539aa <unavailable> + 6570

    5    libc.so.6                          0x00002af373207460 __libc_start_main +
    245

    6    tmpopk_3xu1                        0x000055c2f16531a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in lst {\n        if i < min {\n            nextMin = min\n        \
    \    min = i\n        } else if i < nextMin {\n            nextMin = i\n     \
    \   }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpshmjl6sh/tmpshmjl6sh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e8ceeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e8cbe5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e8cbe5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e8cbe47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshmjl6sh                        0x000055d80fa41601 <unavailable> + 5633

    5    libc.so.6                          0x00002b3e8d0da460 __libc_start_main +
    245

    6    tmpshmjl6sh                        0x000055d80fa41189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    if min > secondMin {\n        min = lst[1]\n        secondMin = lst[0]\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp4p4m0h7j/tmp4p4m0h7j.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31c496dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31c4664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31c4664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31c46637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4p4m0h7j                        0x00005625c87939aa <unavailable> + 6570

    5    libc.so.6                          0x00002b31c4b59460 __libc_start_main +
    245

    6    tmp4p4m0h7j                        0x00005625c87931a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var min2 = Int.max\n    for i in lst {\n        if i < min {\n           \
    \ min2 = min\n            min = i\n        } else if i < min2 {\n            min2\
    \ = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprapvg7zh/tmprapvg7zh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb78a12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb78709b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb78709988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb787087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprapvg7zh                        0x0000561e1c0e08da <unavailable> + 6362

    5    libc.so.6                          0x00002adb78bfe460 __libc_start_main +
    245

    6    tmprapvg7zh                        0x0000561e1c0e00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpo3kef7xn/tmpo3kef7xn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a4f179c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a4ee70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a4ee70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a4ee6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3kef7xn                        0x00005569799717c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1a4f365460 __libc_start_main +
    245

    6    tmpo3kef7xn                        0x00005569799711a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpo3kef7xn/tmpo3kef7xn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a4f179c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a4ee70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a4ee70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a4ee6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3kef7xn                        0x00005569799717c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1a4f365460 __libc_start_main +
    245

    6    tmpo3kef7xn                        0x00005569799711a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ 1..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n    \
    \        min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return min == nextMin ? nil : nextMin\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var sorted = lst.sorted()\n\
    \    var prev = sorted.removeFirst()\n    for i in sorted {\n        if i != prev\
    \ {\n            return i\n        }\n        prev = i\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:623: Fatal error: Can''t remove
    first element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b3db22b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3db1fae561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3db1fae286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3db1fae13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3db1fadbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b3db1f9dff0 RangeReplaceableCollection.removeFirst()
    + 272

    6    tmpr2k6wudo                        0x000055a962813f4e <unavailable> + 8014

    7    tmpr2k6wudo                        0x000055a962813858 <unavailable> + 6232

    8    libc.so.6                          0x00002b3db24a3460 __libc_start_main +
    245

    9    tmpr2k6wudo                        0x000055a962813219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in lst {\n        if i < min {\n            nextMin = min\n        \
    \    min = i\n        } else if i < nextMin {\n            nextMin = i\n     \
    \   }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpshmjl6sh/tmpshmjl6sh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e8ceeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e8cbe5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e8cbe5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e8cbe47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshmjl6sh                        0x000055d80fa41601 <unavailable> + 5633

    5    libc.so.6                          0x00002b3e8d0da460 __libc_start_main +
    245

    6    tmpshmjl6sh                        0x000055d80fa41189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp8d2waeo7/tmp8d2waeo7.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0aab0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0aa803b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0aa803988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0aa8027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8d2waeo7                        0x000055b64ff237c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ae0aacf8460 __libc_start_main +
    245

    6    tmp8d2waeo7                        0x000055b64ff231a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i\
    \ in 2..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < secondMin {\n          \
    \  secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplbbtvvac/tmplbbtvvac.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4582e84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4582b7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4582b7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4582b7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplbbtvvac                        0x0000556c915c97c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b4583070460 __libc_start_main +
    245

    6    tmplbbtvvac                        0x0000556c915c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ lst {\n        if i < min {\n            nextMin = min\n            min = i\n\
    \        } else if i < nextMin {\n            nextMin = i\n        }\n    }\n\
    \    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpsesu9ta6/tmpsesu9ta6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea7dbe3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea7d8dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea7d8da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea7d8d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsesu9ta6                        0x000055826a49d601 <unavailable> + 5633

    5    libc.so.6                          0x00002aea7ddcf460 __libc_start_main +
    245

    6    tmpsesu9ta6                        0x000055826a49d189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    if min\
    \ > secondMin {\n        min = lst[1]\n        secondMin = lst[0]\n    }\n   \
    \ for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n    \
    \        secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqe4xyo4k/tmpqe4xyo4k.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75fec81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75fe978b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75fe978988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75fe9777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqe4xyo4k                        0x000055f48795c9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b75fee6d460 __libc_start_main +
    245

    6    tmpqe4xyo4k                        0x000055f48795c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i\
    \ in 1..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < secondMin {\n          \
    \  secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9dvlv4gk/tmp9dvlv4gk.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b846d0b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b846cdacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b846cdac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b846cdab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dvlv4gk                        0x0000564b85af29aa <unavailable> + 6570

    5    libc.so.6                          0x00002b846d2a1460 __libc_start_main +
    245

    6    tmp9dvlv4gk                        0x0000564b85af21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ 1..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n    \
    \        min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_cdctd2b/tmp_cdctd2b.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f73adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f70a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f70a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f70a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cdctd2b                        0x000055fbc58529aa <unavailable> + 6570

    5    libc.so.6                          0x00002b00f7599460 __libc_start_main +
    245

    6    tmp_cdctd2b                        0x000055fbc58521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in lst {\n        if i < min {\n            nextMin = min\n        \
    \    min = i\n        } else if i < nextMin {\n            nextMin = i\n     \
    \   }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpshmjl6sh/tmpshmjl6sh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e8ceeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e8cbe5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e8cbe5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e8cbe47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshmjl6sh                        0x000055d80fa41601 <unavailable> + 5633

    5    libc.so.6                          0x00002b3e8d0da460 __libc_start_main +
    245

    6    tmpshmjl6sh                        0x000055d80fa41189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ {\n        return nil\n    }\n    var sortedLst = lst.sorted()\n    var prev\
    \ = sortedLst[0]\n    for i in 1..<sortedLst.count {\n        if sortedLst[i]\
    \ != prev {\n            return sortedLst[i]\n        }\n        prev = sortedLst[i]\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 1..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpkwb10j4j/tmpkwb10j4j.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dc91d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dc8ecfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dc8ecf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dc8ece7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkwb10j4j                        0x000055fa1cbc79aa <unavailable> + 6570

    5    libc.so.6                          0x00002b6dc93c4460 __libc_start_main +
    245

    6    tmpkwb10j4j                        0x000055fa1cbc71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ 1..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n    \
    \        min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return min == nextMin ? nil : nextMin\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var secondMin = Int.max\n    for i in lst {\n        if i < min {\n      \
    \      secondMin = min\n            min = i\n        } else if i < secondMin {\n\
    \            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp0wx0cn3y/tmp0wx0cn3y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40f79acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40f76a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40f76a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40f76a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wx0cn3y                        0x0000561ead0968da <unavailable> + 6362

    5    libc.so.6                          0x00002b40f7b98460 __libc_start_main +
    245

    6    tmp0wx0cn3y                        0x0000561ead0960d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpq3xtrw_5/tmpq3xtrw_5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5966c3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5966936b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5966936988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59669357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3xtrw_5                        0x0000556757df8601 <unavailable> + 5633

    5    libc.so.6                          0x00002b5966e2b460 __libc_start_main +
    245

    6    tmpq3xtrw_5                        0x0000556757df8189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i\
    \ in 2..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < secondMin {\n          \
    \  secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplbbtvvac/tmplbbtvvac.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4582e84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4582b7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4582b7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4582b7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplbbtvvac                        0x0000556c915c97c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b4583070460 __libc_start_main +
    245

    6    tmplbbtvvac                        0x0000556c915c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var sorted = lst.sorted()\n\
    \    var last = sorted.removeFirst()\n    for i in sorted {\n        if i != last\
    \ {\n            return i\n        }\n        last = i\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:623: Fatal error: Can''t remove
    first element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b9835c7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9835973561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9835973286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b983597313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9835972bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b9835962ff0 RangeReplaceableCollection.removeFirst()
    + 272

    6    tmprj8if5j4                        0x0000560e6311df4e <unavailable> + 8014

    7    tmprj8if5j4                        0x0000560e6311d858 <unavailable> + 6232

    8    libc.so.6                          0x00002b9835e68460 __libc_start_main +
    245

    9    tmprj8if5j4                        0x0000560e6311d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpq3xtrw_5/tmpq3xtrw_5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5966c3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5966936b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5966936988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59669357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3xtrw_5                        0x0000556757df8601 <unavailable> + 5633

    5    libc.so.6                          0x00002b5966e2b460 __libc_start_main +
    245

    6    tmpq3xtrw_5                        0x0000556757df8189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    let sorted = lst.sorted()\n\
    \    if sorted.count < 2 {\n        return nil\n    }\n    return sorted[1]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp73caxvsr/tmp73caxvsr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9cc8dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9cc5d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9cc5d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9cc5d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp73caxvsr                        0x00005642657a88ba <unavailable> + 6330

    5    libc.so.6                          0x00002ae9ccac6460 __libc_start_main +
    245

    6    tmp73caxvsr                        0x00005642657a80b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 1..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpkwb10j4j/tmpkwb10j4j.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dc91d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dc8ecfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dc8ecf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dc8ece7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkwb10j4j                        0x000055fa1cbc79aa <unavailable> + 6570

    5    libc.so.6                          0x00002b6dc93c4460 __libc_start_main +
    245

    6    tmpkwb10j4j                        0x000055fa1cbc71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 1..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpkwb10j4j/tmpkwb10j4j.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dc91d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dc8ecfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dc8ecf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dc8ece7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkwb10j4j                        0x000055fa1cbc79aa <unavailable> + 6570

    5    libc.so.6                          0x00002b6dc93c4460 __libc_start_main +
    245

    6    tmpkwb10j4j                        0x000055fa1cbc71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var secondMin = Int.max\n    for i in lst {\n        if i < min {\n      \
    \      secondMin = min\n            min = i\n        } else if i < secondMin {\n\
    \            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp0wx0cn3y/tmp0wx0cn3y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40f79acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40f76a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40f76a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40f76a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wx0cn3y                        0x0000561ead0968da <unavailable> + 6362

    5    libc.so.6                          0x00002b40f7b98460 __libc_start_main +
    245

    6    tmp0wx0cn3y                        0x0000561ead0960d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var min2 = lst[1]\n    if\
    \ min > min2 {\n        min = min2\n        min2 = lst[0]\n    }\n    for i in\
    \ 2..<lst.count {\n        if lst[i] < min {\n            min2 = min\n       \
    \     min = lst[i]\n        } else if lst[i] < min2 {\n            min2 = lst[i]\n\
    \        }\n    }\n    return min2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp7mu2jbi8/tmp7mu2jbi8.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff68715c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff6840cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff6840c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff6840b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7mu2jbi8                        0x00005605e2b2b9aa <unavailable> + 6570

    5    libc.so.6                          0x00002aff68901460 __libc_start_main +
    245

    6    tmp7mu2jbi8                        0x00005605e2b2b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    let sorted = lst.sorted()\n    return sorted[1]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyde2c0eo/tmpyde2c0eo.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b960c484c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b960c17bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b960c17b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b960c17a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyde2c0eo                        0x0000562f1a6288ba <unavailable> + 6330

    5    libc.so.6                          0x00002b960c670460 __libc_start_main +
    245

    6    tmpyde2c0eo                        0x0000562f1a6280b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = lst[0]\n  \
    \  var nextMin = lst[0]\n    for i in lst {\n        if i < min {\n          \
    \  nextMin = min\n            min = i\n        } else if i < nextMin {\n     \
    \       nextMin = i\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpm2vxxupg/tmpm2vxxupg.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1060eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab105de1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab105de1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab105de07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm2vxxupg                        0x000055d34e3ca5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ab1062d6460 __libc_start_main +
    245

    6    tmpm2vxxupg                        0x000055d34e3ca129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i\
    \ in 2..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < secondMin {\n          \
    \  secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplbbtvvac/tmplbbtvvac.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4582e84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4582b7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4582b7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4582b7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplbbtvvac                        0x0000556c915c97c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b4583070460 __libc_start_main +
    245

    6    tmplbbtvvac                        0x0000556c915c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var min2 = Int.max\n    for i in lst {\n        if i < min {\n           \
    \ min2 = min\n            min = i\n        } else if i < min2 {\n            min2\
    \ = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprapvg7zh/tmprapvg7zh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb78a12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb78709b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb78709988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb787087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprapvg7zh                        0x0000561e1c0e08da <unavailable> + 6362

    5    libc.so.6                          0x00002adb78bfe460 __libc_start_main +
    245

    6    tmprapvg7zh                        0x0000561e1c0e00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var next_min = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            next_min\
    \ = min\n            min = lst[i]\n        } else if lst[i] < next_min {\n   \
    \         next_min = lst[i]\n        }\n    }\n    return next_min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqzf8plw4/tmpqzf8plw4.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b027230cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0272003b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0272003988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02720027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqzf8plw4                        0x00005596387207c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b02724f8460 __libc_start_main +
    245

    6    tmpqzf8plw4                        0x00005596387201a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var next = Int.max\n    for i in lst {\n        if i < min {\n           \
    \ next = min\n            min = i\n        } else if i < next {\n            next\
    \ = i\n        }\n    }\n    return next == Int.max ? nil : next\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpxotof5b7/tmpxotof5b7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb6e466c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb6e15db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb6e15d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb6e15c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxotof5b7                        0x00005609b25078da <unavailable> + 6362

    5    libc.so.6                          0x00002adb6e652460 __libc_start_main +
    245

    6    tmpxotof5b7                        0x00005609b25070d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpo3kef7xn/tmpo3kef7xn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a4f179c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a4ee70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a4ee70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a4ee6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3kef7xn                        0x00005569799717c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1a4f365460 __libc_start_main +
    245

    6    tmpo3kef7xn                        0x00005569799711a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var secondMin = Int.max\n    for i in lst {\n        if i < min {\n      \
    \      secondMin = min\n            min = i\n        } else if i < secondMin {\n\
    \            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp0wx0cn3y/tmp0wx0cn3y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40f79acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40f76a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40f76a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40f76a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wx0cn3y                        0x0000561ead0968da <unavailable> + 6362

    5    libc.so.6                          0x00002b40f7b98460 __libc_start_main +
    245

    6    tmp0wx0cn3y                        0x0000561ead0960d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var next_min = lst[1]\n\
    \    if min > next_min {\n        min = next_min\n        next_min = lst[0]\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            next_min\
    \ = min\n            min = lst[i]\n        } else if lst[i] < next_min {\n   \
    \         next_min = lst[i]\n        }\n    }\n    return next_min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpopk_3xu1/tmpopk_3xu1.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af37301bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af372d12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af372d12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af372d117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopk_3xu1                        0x000055c2f16539aa <unavailable> + 6570

    5    libc.so.6                          0x00002af373207460 __libc_start_main +
    245

    6    tmpopk_3xu1                        0x000055c2f16531a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var smallest = lst[0]\n    var secondSmallest = Int.max\n\
    \    for i in lst {\n        if i < smallest {\n            secondSmallest = smallest\n\
    \            smallest = i\n        } else if i < secondSmallest {\n          \
    \  secondSmallest = i\n        }\n    }\n    return secondSmallest == Int.max\
    \ ? nil : secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmperoh8o71/tmperoh8o71.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada028acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada025a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada025a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada025a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmperoh8o71                        0x0000560c6fa6a601 <unavailable> + 5633

    5    libc.so.6                          0x00002ada02a98460 __libc_start_main +
    245

    6    tmperoh8o71                        0x0000560c6fa6a189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var secondMin = Int.max\n    for i in lst {\n        if i < min {\n      \
    \      secondMin = min\n            min = i\n        } else if i < secondMin {\n\
    \            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp0wx0cn3y/tmp0wx0cn3y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40f79acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40f76a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40f76a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40f76a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wx0cn3y                        0x0000561ead0968da <unavailable> + 6362

    5    libc.so.6                          0x00002b40f7b98460 __libc_start_main +
    245

    6    tmp0wx0cn3y                        0x0000561ead0960d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var next = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            next = min\n            min = lst[i]\n\
    \        } else if lst[i] < next {\n            next = lst[i]\n        }\n   \
    \ }\n    return next\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp0orkemuf/tmp0orkemuf.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e45ecec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e45bc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e45bc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e45bc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0orkemuf                        0x00005599a18ce7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b6e460ba460 __libc_start_main +
    245

    6    tmp0orkemuf                        0x00005599a18ce1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp6klu3dwv/tmp6klu3dwv.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3347ec9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3347bc0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3347bc0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3347bbf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6klu3dwv                        0x00005624318437c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b33480b5460 __libc_start_main +
    245

    6    tmp6klu3dwv                        0x00005624318431a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in lst {\n        if i < min {\n            nextMin = min\n        \
    \    min = i\n        } else if i < nextMin {\n            nextMin = i\n     \
    \   }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpshmjl6sh/tmpshmjl6sh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e8ceeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e8cbe5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e8cbe5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e8cbe47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshmjl6sh                        0x000055d80fa41601 <unavailable> + 5633

    5    libc.so.6                          0x00002b3e8d0da460 __libc_start_main +
    245

    6    tmpshmjl6sh                        0x000055d80fa41189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpq3xtrw_5/tmpq3xtrw_5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5966c3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5966936b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5966936988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59669357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3xtrw_5                        0x0000556757df8601 <unavailable> + 5633

    5    libc.so.6                          0x00002b5966e2b460 __libc_start_main +
    245

    6    tmpq3xtrw_5                        0x0000556757df8189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ lst {\n        if i < min {\n            nextMin = min\n            min = i\n\
    \        } else if i < nextMin {\n            nextMin = i\n        }\n    }\n\
    \    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpsesu9ta6/tmpsesu9ta6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea7dbe3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea7d8dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea7d8da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea7d8d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsesu9ta6                        0x000055826a49d601 <unavailable> + 5633

    5    libc.so.6                          0x00002aea7ddcf460 __libc_start_main +
    245

    6    tmpsesu9ta6                        0x000055826a49d189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i\
    \ in 1..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < secondMin {\n          \
    \  secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9dvlv4gk/tmp9dvlv4gk.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b846d0b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b846cdacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b846cdac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b846cdab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dvlv4gk                        0x0000564b85af29aa <unavailable> + 6570

    5    libc.so.6                          0x00002b846d2a1460 __libc_start_main +
    245

    6    tmp9dvlv4gk                        0x0000564b85af21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min1 = lst[0]\n    var min2 = lst[1]\n    if min1 >\
    \ min2 {\n        min1 = lst[1]\n        min2 = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min1 {\n            min2 = min1\n            min1 = lst[i]\n\
    \        } else if lst[i] < min2 {\n            min2 = lst[i]\n        }\n   \
    \ }\n    return min2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprpl1ya4d/tmprpl1ya4d.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f05ca7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f0599eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f0599e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f0599d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpl1ya4d                        0x000055abc17af9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b8f05e93460 __libc_start_main +
    245

    6    tmprpl1ya4d                        0x000055abc17af1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 1..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpkwb10j4j/tmpkwb10j4j.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dc91d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dc8ecfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dc8ecf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dc8ece7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkwb10j4j                        0x000055fa1cbc79aa <unavailable> + 6570

    5    libc.so.6                          0x00002b6dc93c4460 __libc_start_main +
    245

    6    tmpkwb10j4j                        0x000055fa1cbc71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var lst = lst\n    if\
    \ lst.count < 2 {\n        return nil\n    }\n    lst.sort()\n    for i in 1..<lst.count\
    \ {\n        if lst[i] != lst[i - 1] {\n            return lst[i]\n        }\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpq3xtrw_5/tmpq3xtrw_5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5966c3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5966936b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5966936988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59669357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3xtrw_5                        0x0000556757df8601 <unavailable> + 5633

    5    libc.so.6                          0x00002b5966e2b460 __libc_start_main +
    245

    6    tmpq3xtrw_5                        0x0000556757df8189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in lst {\n        if i < min {\n            nextMin = min\n        \
    \    min = i\n        } else if i < nextMin {\n            nextMin = i\n     \
    \   }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpshmjl6sh/tmpshmjl6sh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e8ceeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e8cbe5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e8cbe5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e8cbe47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshmjl6sh                        0x000055d80fa41601 <unavailable> + 5633

    5    libc.so.6                          0x00002b3e8d0da460 __libc_start_main +
    245

    6    tmpshmjl6sh                        0x000055d80fa41189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var lst = lst\n    lst.sort()\n\
    \    var smallest = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] >\
    \ smallest {\n            return lst[i]\n        }\n    }\n    return nil\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab218d46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab218a3d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab218a3d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab218a3d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab218a3cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab21883ce83 <unavailable> + 188035

    6    tmps1psojoc                        0x000055fed498b011 <unavailable> + 8209

    7    tmps1psojoc                        0x000055fed498a908 <unavailable> + 6408

    8    libc.so.6                          0x00002ab218f32460 __libc_start_main +
    245

    9    tmps1psojoc                        0x000055fed498a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var sorted = lst.sorted()\n    var last = sorted.removeFirst()\n\
    \    while let next = sorted.first {\n        if next > last {\n            return\
    \ next\n        }\n        last = next\n        sorted.removeFirst()\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ 2..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n    \
    \        min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpltscwpa0/tmpltscwpa0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6fe8a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6fe598b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6fe598988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6fe5977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltscwpa0                        0x000055e7d333f7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ba6fea8d460 __libc_start_main +
    245

    6    tmpltscwpa0                        0x000055e7d333f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var min2 = Int.max\n    for i in lst {\n        if i < min {\n           \
    \ min2 = min\n            min = i\n        } else if i < min2 {\n            min2\
    \ = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprapvg7zh/tmprapvg7zh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb78a12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb78709b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb78709988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb787087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprapvg7zh                        0x0000561e1c0e08da <unavailable> + 6362

    5    libc.so.6                          0x00002adb78bfe460 __libc_start_main +
    245

    6    tmprapvg7zh                        0x0000561e1c0e00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ 1..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n    \
    \        min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_cdctd2b/tmp_cdctd2b.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f73adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f70a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f70a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f70a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cdctd2b                        0x000055fbc58529aa <unavailable> + 6570

    5    libc.so.6                          0x00002b00f7599460 __libc_start_main +
    245

    6    tmp_cdctd2b                        0x000055fbc58521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var next_min = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            next_min = min\n      \
    \      min = i\n        } else if i < next_min {\n            next_min = i\n \
    \       }\n    }\n    return next_min\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_3vympcl/tmp_3vympcl.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9226985c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b922667cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b922667c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b922667b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_3vympcl                        0x000055ea040cb601 <unavailable> + 5633

    5    libc.so.6                          0x00002b9226b71460 __libc_start_main +
    245

    6    tmp_3vympcl                        0x000055ea040cb189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    if min > secondMin {\n        min = lst[1]\n        secondMin = lst[0]\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp4p4m0h7j/tmp4p4m0h7j.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31c496dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31c4664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31c4664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31c46637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4p4m0h7j                        0x00005625c87939aa <unavailable> + 6570

    5    libc.so.6                          0x00002b31c4b59460 __libc_start_main +
    245

    6    tmp4p4m0h7j                        0x00005625c87931a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var secondMin = Int.max\n    for i in lst {\n        if i < min {\n      \
    \      secondMin = min\n            min = i\n        } else if i < secondMin {\n\
    \            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp0wx0cn3y/tmp0wx0cn3y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40f79acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40f76a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40f76a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40f76a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wx0cn3y                        0x0000561ead0968da <unavailable> + 6362

    5    libc.so.6                          0x00002b40f7b98460 __libc_start_main +
    245

    6    tmp0wx0cn3y                        0x0000561ead0960d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = Int.max\n    for i in\
    \ 1..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n    \
    \        min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return nextMin == Int.max ? nil : nextMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpmher384d/tmpmher384d.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b269fc81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b269f978b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b269f978988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b269f9777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmher384d                        0x0000558cc1ad99aa <unavailable> + 6570

    5    libc.so.6                          0x00002b269fe6d460 __libc_start_main +
    245

    6    tmpmher384d                        0x0000558cc1ad91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpo3kef7xn/tmpo3kef7xn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a4f179c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a4ee70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a4ee70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a4ee6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3kef7xn                        0x00005569799717c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1a4f365460 __libc_start_main +
    245

    6    tmpo3kef7xn                        0x00005569799711a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpo3kef7xn/tmpo3kef7xn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a4f179c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a4ee70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a4ee70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a4ee6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3kef7xn                        0x00005569799717c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1a4f365460 __libc_start_main +
    245

    6    tmpo3kef7xn                        0x00005569799711a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in lst {\n        if i < min {\n            nextMin = min\n        \
    \    min = i\n        } else if i < nextMin {\n            nextMin = i\n     \
    \   }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpshmjl6sh/tmpshmjl6sh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e8ceeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e8cbe5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e8cbe5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e8cbe47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshmjl6sh                        0x000055d80fa41601 <unavailable> + 5633

    5    libc.so.6                          0x00002b3e8d0da460 __libc_start_main +
    245

    6    tmpshmjl6sh                        0x000055d80fa41189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var sorted = lst.sorted()\n    var last = sorted.removeFirst()\n\
    \    for i in sorted {\n        if i != last {\n            return i\n       \
    \ }\n        last = i\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var smallest = lst[0]\n    var nextSmallest = lst[1]\n \
    \   for i in lst {\n        if i < smallest {\n            nextSmallest = smallest\n\
    \            smallest = i\n        } else if i < nextSmallest {\n            nextSmallest\
    \ = i\n        }\n    }\n    return nextSmallest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp808yf8k9/tmp808yf8k9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b346441ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3464115b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3464115988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34641147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp808yf8k9                        0x000055bc76486601 <unavailable> + 5633

    5    libc.so.6                          0x00002b346460a460 __libc_start_main +
    245

    6    tmp808yf8k9                        0x000055bc76486189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var min2 = lst[1]\n    for i in lst\
    \ {\n        if i < min {\n            min2 = min\n            min = i\n     \
    \   } else if i < min2 {\n            min2 = i\n        }\n    }\n    return min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcoa3hc4s/tmpcoa3hc4s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b228481ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2284511b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2284511988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22845107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcoa3hc4s                        0x0000557286b23601 <unavailable> + 5633

    5    libc.so.6                          0x00002b2284a06460 __libc_start_main +
    245

    6    tmpcoa3hc4s                        0x0000557286b23189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ {\n        return nil\n    }\n    var min = lst[0]\n    var next_min = lst[1]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < min {\n            next_min\
    \ = min\n            min = lst[i]\n        } else if lst[i] < next_min {\n   \
    \         next_min = lst[i]\n        }\n    }\n    return next_min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmptkvyen1i/tmptkvyen1i.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93a1d39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93a1a30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93a1a30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93a1a2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptkvyen1i                        0x000056015238a9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b93a1f25460 __libc_start_main +
    245

    6    tmptkvyen1i                        0x000056015238a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    if min > secondMin {\n        min = lst[1]\n        secondMin = lst[0]\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp4p4m0h7j/tmp4p4m0h7j.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31c496dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31c4664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31c4664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31c46637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4p4m0h7j                        0x00005625c87939aa <unavailable> + 6570

    5    libc.so.6                          0x00002b31c4b59460 __libc_start_main +
    245

    6    tmp4p4m0h7j                        0x00005625c87931a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in lst {\n        if i < min {\n            nextMin = min\n        \
    \    min = i\n        } else if i < nextMin {\n            nextMin = i\n     \
    \   }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpshmjl6sh/tmpshmjl6sh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e8ceeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e8cbe5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e8cbe5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e8cbe47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshmjl6sh                        0x000055d80fa41601 <unavailable> + 5633

    5    libc.so.6                          0x00002b3e8d0da460 __libc_start_main +
    245

    6    tmpshmjl6sh                        0x000055d80fa41189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var min2 = lst[1]\n    for\
    \ i in 1..<lst.count {\n        if lst[i] < min {\n            min2 = min\n  \
    \          min = lst[i]\n        } else if lst[i] < min2 {\n            min2 =\
    \ lst[i]\n        }\n    }\n    return min2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpv_9ipftr/tmpv_9ipftr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba41df75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba41dc6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba41dc6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba41dc6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv_9ipftr                        0x000056005f2d89aa <unavailable> + 6570

    5    libc.so.6                          0x00002ba41e161460 __libc_start_main +
    245

    6    tmpv_9ipftr                        0x000056005f2d81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    if min > secondMin {\n        min = lst[1]\n        secondMin = lst[0]\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp4p4m0h7j/tmp4p4m0h7j.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31c496dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31c4664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31c4664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31c46637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4p4m0h7j                        0x00005625c87939aa <unavailable> + 6570

    5    libc.so.6                          0x00002b31c4b59460 __libc_start_main +
    245

    6    tmp4p4m0h7j                        0x00005625c87931a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpw9inwprk/tmpw9inwprk.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b084bfe5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b084bcdcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b084bcdc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b084bcdb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw9inwprk                        0x000055c05e2939aa <unavailable> + 6570

    5    libc.so.6                          0x00002b084c1d1460 __libc_start_main +
    245

    6    tmpw9inwprk                        0x000055c05e2931a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var min2 = lst[1]\n    for\
    \ i in lst {\n        if i < min {\n            min2 = min\n            min =\
    \ i\n        } else if i < min2 {\n            min2 = i\n        }\n    }\n  \
    \  return min2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcdd8tuno/tmpcdd8tuno.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af30e417c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af30e10eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af30e10e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af30e10d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcdd8tuno                        0x000055f52f6fe601 <unavailable> + 5633

    5    libc.so.6                          0x00002af30e603460 __libc_start_main +
    245

    6    tmpcdd8tuno                        0x000055f52f6fe189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest = Int.max\n\
    \    var secondSmallest = Int.max\n    for num in lst {\n        if num < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = num\n     \
    \   } else if num < secondSmallest {\n            secondSmallest = num\n     \
    \   }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp93vk924f/tmp93vk924f.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8ea029c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8e9d20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8e9d20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8e9d1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp93vk924f                        0x00005640f82908da <unavailable> + 6362

    5    libc.so.6                          0x00002ab8ea215460 __libc_start_main +
    245

    6    tmp93vk924f                        0x00005640f82900d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 1..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpkwb10j4j/tmpkwb10j4j.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dc91d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dc8ecfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dc8ecf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dc8ece7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkwb10j4j                        0x000055fa1cbc79aa <unavailable> + 6570

    5    libc.so.6                          0x00002b6dc93c4460 __libc_start_main +
    245

    6    tmpkwb10j4j                        0x000055fa1cbc71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013258
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    if min > secondMin {\n        min = lst[1]\n        secondMin = lst[0]\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp4p4m0h7j/tmp4p4m0h7j.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31c496dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31c4664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31c4664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31c46637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4p4m0h7j                        0x00005625c87939aa <unavailable> + 6570

    5    libc.so.6                          0x00002b31c4b59460 __libc_start_main +
    245

    6    tmp4p4m0h7j                        0x00005625c87931a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min = Int.max\n \
    \   var secondMin = Int.max\n    for i in lst {\n        if i < min {\n      \
    \      secondMin = min\n            min = i\n        } else if i < secondMin {\n\
    \            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp0wx0cn3y/tmp0wx0cn3y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40f79acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40f76a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40f76a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40f76a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wx0cn3y                        0x0000561ead0968da <unavailable> + 6362

    5    libc.so.6                          0x00002b40f7b98460 __libc_start_main +
    245

    6    tmp0wx0cn3y                        0x0000561ead0960d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i\
    \ in 2..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < secondMin {\n          \
    \  secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplbbtvvac/tmplbbtvvac.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4582e84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4582b7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4582b7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4582b7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplbbtvvac                        0x0000556c915c97c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b4583070460 __libc_start_main +
    245

    6    tmplbbtvvac                        0x0000556c915c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n\
    \        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcgxprk71/tmpcgxprk71.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18d862ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18d8321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18d8321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18d83207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgxprk71                        0x00005585f65b47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b18d8816460 __libc_start_main +
    245

    6    tmpcgxprk71                        0x00005585f65b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013257
