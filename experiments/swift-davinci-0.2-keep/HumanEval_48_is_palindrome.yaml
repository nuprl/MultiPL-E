name: HumanEval_48_is_palindrome
language: swift
prompt: "\n/// Checks if given string is a palindrome\n/// >>> is_palindrome('')\n\
  /// True\n/// >>> is_palindrome('aba')\n/// True\n/// >>> is_palindrome('aaaaa')\n\
  /// True\n/// >>> is_palindrome('zbcd')\n/// False\nfunc is_palindrome(text: String)\
  \ -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_palindrome(text: \"\") == true)\nassert(is_palindrome(text:\
  \ \"aba\") == true)\nassert(is_palindrome(text: \"aaaaa\") == true)\nassert(is_palindrome(text:\
  \ \"zbcd\") == false)\nassert(is_palindrome(text: \"xywyx\") == true)\nassert(is_palindrome(text:\
  \ \"xywyz\") == false)\nassert(is_palindrome(text: \"xywzx\") == false)"
completions: ["    let length = text.count\n    if length < 2 {\n        return true\n\
    \    }\n    let mid = length / 2\n    let end = length - 1\n    for i in 0..<mid\
    \ {\n        if text[i] != text[end - i] {\n            return false\n       \
    \ }\n    }\n    return true", '    return text == String(text.characters.reverse())',
  '    return text == String(text.characters.reverse())', "    let lowercase = text.lowercased()\n\
    \    let reversed = String(lowercase.reversed())\n    return lowercase == reversed",
  '    return text == String(text.characters.reverse())', "    let chars = text.characters\n\
    \    let count = chars.count\n    if count <= 1 {\n        return true\n    }\n\
    \    let mid = count / 2\n    for i in 0..<mid {\n        if chars[chars.startIndex.advancedBy(i)]\
    \ != chars[chars.startIndex.advancedBy(count - i - 1)] {\n            return false\n\
    \        }\n    }\n    return true", '    return text == String(text.characters.reverse())',
  "    let length = text.count\n    for i in 0..<length/2 {\n        if text[i] !=\
    \ text[length-i-1] {\n            return false\n        }\n    }\n    return true",
  "    var chars = Array(text)\n    var i = 0\n    var j = chars.count - 1\n    while\
    \ i < j {\n        if chars[i] != chars[j] {\n            return false\n     \
    \   }\n        i += 1\n        j -= 1\n    }\n    return true", '    return text
    == String(text.characters.reverse())', "    let text_length = text.characters.count\n\
    \    if text_length <= 1 {\n        return true\n    }\n    let first_char = text[text.startIndex]\n\
    \    let last_char = text[text.index(before: text.endIndex)]\n    if first_char\
    \ != last_char {\n        return false\n    }\n    let range = text.index(after:\
    \ text.startIndex)..<text.index(before: text.endIndex)\n    return is_palindrome(text:\
    \ text[range])", '    return text == String(text.characters.reverse())', "   \
    \ let len = text.characters.count\n    for i in 0..<len/2 {\n        if text[text.index(text.startIndex,\
    \ offsetBy: i)] != text[text.index(text.startIndex, offsetBy: len-i-1)] {\n  \
    \          return false\n        }\n    }\n    return true", "    let chars =\
    \ Array(text)\n    for i in 0..<chars.count / 2 {\n        if chars[i] != chars[chars.count\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true", '    return
    text == String(text.characters.reverse())', "    let length = text.characters.count\n\
    \    for i in 0..<length/2 {\n        if text[text.index(text.startIndex, offsetBy:\
    \ i)] != text[text.index(text.startIndex, offsetBy: length-i-1)] {\n         \
    \   return false\n        }\n    }\n    return true", "    let reversed = String(text.reversed())\n\
    \    return text == reversed", "    let length = text.characters.count\n    if\
    \ length <= 1 {\n        return true\n    }\n    let mid = length / 2\n    let\
    \ left = text.index(text.startIndex, offsetBy: mid)\n    let right = text.index(text.endIndex,\
    \ offsetBy: -mid)\n    let left_text = text.substring(to: left)\n    let right_text\
    \ = text.substring(from: right)\n    return left_text == right_text.reversed()",
  "    let text_len = text.characters.count\n    if text_len == 0 {\n        return\
    \ true\n    }\n    for i in 0..<text_len/2 {\n        let left_char = text[text.index(text.startIndex,\
    \ offsetBy: i)]\n        let right_char = text[text.index(text.startIndex, offsetBy:\
    \ text_len - i - 1)]\n        if left_char != right_char {\n            return\
    \ false\n        }\n    }\n    return true", "    let chars = Array(text)\n  \
    \  let length = chars.count\n    for i in 0..<length {\n        if chars[i] !=\
    \ chars[length - i - 1] {\n            return false\n        }\n    }\n    return\
    \ true"]
stop_tokens:
- "\n}"
