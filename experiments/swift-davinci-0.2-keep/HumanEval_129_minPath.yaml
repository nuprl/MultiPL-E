name: HumanEval_129_minPath
language: swift
prompt: "\n/// Given a grid with N rows and N columns (N >= 2) and a positive integer\
  \ k, \n/// each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n/// inclusive appears exactly once on the cells of the grid.\n/// You\
  \ have to find the minimum path of length k in the grid. You can start\n/// from\
  \ any cell, and in each step you can move to any of the neighbor cells,\n/// in\
  \ other words, you can go to cells which share an edge with you current\n/// cell.\n\
  /// Please note that a path of length k means visiting exactly k cells (not\n///\
  \ necessarily distinct).\n/// You CANNOT go off the grid.\n/// A path A (of length\
  \ k) is considered less than a path B (of length k) if\n/// after making the ordered\
  \ lists of the values on the cells that A and B go\n/// through (let's call them\
  \ lst_A and lst_B), lst_A is lexicographically less\n/// than lst_B, in other words,\
  \ there exist an integer index i (1 <= i <= k)\n/// such that lst_A[i] < lst_B[i]\
  \ and for any j (1 <= j < i) we have\n/// lst_A[j] = lst_B[j].\n/// It is guaranteed\
  \ that the answer is unique.\n/// Return an ordered list of the values on the cells\
  \ that the minimum path go through.\n/// Examples:\n/// Input: grid = [ [1,2,3],\
  \ [4,5,6], [7,8,9]], k = 3\n/// Output: [1, 2, 1]\n/// Input: grid = [ [5,9,3],\
  \ [4,1,6], [7,8,2]], k = 1\n/// Output: [1]\nfunc minPath(grid: [[Int]], k: Int)\
  \ -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(minPath(grid: [[1, 2, 3], [4, 5, 6], [7,\
  \ 8, 9]], k: 3) == [1, 2, 1])\nassert(minPath(grid: [[5, 9, 3], [4, 1, 6], [7, 8,\
  \ 2]], k: 1) == [1])\nassert(minPath(grid: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10,\
  \ 11, 12], [13, 14, 15, 16]], k: 4) == [1, 2, 1, 2])\nassert(minPath(grid: [[6,\
  \ 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], k: 7) == [1, 10, 1,\
  \ 10, 1, 10, 1])\nassert(minPath(grid: [[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1,\
  \ 12], [3, 10, 11, 16]], k: 5) == [1, 7, 1, 7, 1])\nassert(minPath(grid: [[11, 8,\
  \ 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], k: 9) == [1, 6, 1, 6,\
  \ 1, 6, 1, 6, 1])\nassert(minPath(grid: [[12, 13, 10, 1], [9, 3, 15, 6], [5, 16,\
  \ 14, 4], [11, 8, 7, 2]], k: 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\nassert(minPath(grid:\
  \ [[2, 7, 4], [3, 1, 5], [6, 8, 9]], k: 8) == [1, 3, 1, 3, 1, 3, 1, 3])\nassert(minPath(grid:\
  \ [[6, 1, 5], [3, 8, 9], [2, 7, 4]], k: 8) == [1, 5, 1, 5, 1, 5, 1, 5])\nassert(minPath(grid:\
  \ [[1, 2], [3, 4]], k: 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\nassert(minPath(grid:\
  \ [[1, 3], [3, 2]], k: 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3])"
completions: ['    return []', "    let n = grid.count\n    var dp = Array(repeating:\
    \ Array(repeating: Array(repeating: Int.max, count: n), count: n), count: k +\
    \ 1)\n    for i in 0..<n {\n        for j in 0..<n {\n            dp[1][i][j]\
    \ = grid[i][j]\n        }\n    }\n    for l in 2...k {\n        for i in 0..<n\
    \ {\n            for j in 0..<n {\n                if i > 0 {\n              \
    \      dp[l][i][j] = min(dp[l][i][j], dp[l - 1][i - 1][j])\n                }\n\
    \                if i < n - 1 {\n                    dp[l][i][j] = min(dp[l][i][j],\
    \ dp[l - 1][i + 1][j])\n                }\n                if j > 0 {\n      \
    \              dp[l][i][j] = min(dp[l][i][j], dp[l - 1][i][j - 1])\n         \
    \       }\n                if j < n - 1 {\n                    dp[l][i][j] = min(dp[l][i][j],\
    \ dp[l - 1][i][j + 1])\n                }\n                dp[l][i][j] += grid[i][j]\n\
    \            }\n        }\n    }\n    var res = Int.max\n    var x = 0\n    var\
    \ y = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if dp[k][i][j]\
    \ < res {\n                res = dp[k][i][j]\n                x = i\n        \
    \        y = j\n            }\n        }\n    }\n    var ans = [Int]()\n    ans.append(grid[x][y])\n\
    \    var cur = dp[k][x][y] - grid[x][y]\n    for _ in 1..<k {\n        if x >\
    \ 0 && dp[k - 1][x - 1][y] == cur {\n            x -= 1\n        } else if x <\
    \ n - 1 && dp[", "    let n = grid.count\n    var dp = Array(repeating: Array(repeating:\
    \ Array(repeating: Int.max, count: n), count: n), count: k + 1)\n    var minPath\
    \ = Array(repeating: 0, count: k)\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            dp[1][i][j] = grid[i][j]\n        }\n    }\n    for i in 2...k\
    \ {\n        for j in 0..<n {\n            for l in 0..<n {\n                for\
    \ m in 0..<n {\n                    if j == l && abs(m - l) == 1 {\n         \
    \               dp[i][j][l] = min(dp[i][j][l], dp[i - 1][j][m])\n            \
    \        }\n                    if j == m && abs(m - l) == 1 {\n             \
    \           dp[i][j][l] = min(dp[i][j][l], dp[i - 1][j][m])\n                \
    \    }\n                    if abs(j - l) == 1 && m == l {\n                 \
    \       dp[i][j][l] = min(dp[i][j][l], dp[i - 1][j][m])\n                    }\n\
    \                    if abs(j - m) == 1 && m == l {\n                        dp[i][j][l]\
    \ = min(dp[i][j][l], dp[i - 1][j][m])\n                    }\n               \
    \ }\n            }\n        }\n    }\n    var minValue = Int.max\n    for i in\
    \ 0..<n {\n        for j in 0..<n {\n            minValue = min(minValue, dp[k][i][j])\n\
    \        }\n    }\n    minPath[k - 1] = minValue\n    var i = k - 1\n    var j\
    \ = 0\n    var l = 0\n    while i > 0 {\n        var minValue = Int.max\n    \
    \    var minJ = 0\n        var minL = 0\n        for m in 0..<n {\n          \
    \  if j == l && abs(m - l) == 1 {\n                if", "    let n = grid.count\n\
    \    var dp = [[Int]](repeating: [Int](repeating: Int.max, count: n), count: n)\n\
    \    var visited = [[Bool]](repeating: [Bool](repeating: false, count: n), count:\
    \ n)\n    var minPath = [Int]()\n    var minSum = Int.max\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            dfs(grid: grid, dp: &dp, visited: &visited,\
    \ i: i, j: j, k: k, sum: 0, path: [])\n        }\n    }\n    return minPath",
  "    let n = grid.count\n    var minPath = [Int]()\n    var minSum = Int.max\n \
    \   var minPaths = [[Int]]()\n    var visited = [[Bool]](repeating: [Bool](repeating:\
    \ false, count: n), count: n)\n    var path = [Int]()\n    var sum = 0\n    var\
    \ paths = [[Int]]()\n    var dfs = { (i: Int, j: Int, k: Int) in\n        if k\
    \ == 0 {\n            if sum < minSum {\n                minSum = sum\n      \
    \          minPaths = paths\n            }\n            return\n        }\n  \
    \      if i < 0 || i >= n || j < 0 || j >= n || visited[i][j] {\n            return\n\
    \        }\n        visited[i][j] = true\n        path.append(grid[i][j])\n  \
    \      sum += grid[i][j]\n        paths.append(path)\n        dfs(i - 1, j, k\
    \ - 1)\n        dfs(i + 1, j, k - 1)\n        dfs(i, j - 1, k - 1)\n        dfs(i,\
    \ j + 1, k - 1)\n        visited[i][j] = false\n        path.removeLast()\n  \
    \      sum -= grid[i][j]\n        paths.removeLast()\n    }\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            dfs(i, j, k)\n        }\n    }\n  \
    \  for i in 0..<minPaths.count {\n        if minPaths[i] < minPath {\n       \
    \     minPath = minPaths[i]\n        }\n    }\n    return minPath", "    let n\
    \ = grid.count\n    var dp = Array(repeating: Array(repeating: Int.max, count:\
    \ n), count: n)\n    var path = Array(repeating: Array(repeating: [Int](), count:\
    \ n), count: n)\n    for i in 0..<n {\n        for j in 0..<n {\n            dp[i][j]\
    \ = grid[i][j]\n            path[i][j] = [grid[i][j]]\n        }\n    }\n    for\
    \ _ in 0..<k - 1 {\n        var newDp = Array(repeating: Array(repeating: Int.max,\
    \ count: n), count: n)\n        var newPath = Array(repeating: Array(repeating:\
    \ [Int](), count: n), count: n)\n        for i in 0..<n {\n            for j in\
    \ 0..<n {\n                if i > 0 {\n                    if dp[i - 1][j] < dp[i][j]\
    \ {\n                        newDp[i][j] = dp[i - 1][j]\n                    \
    \    newPath[i][j] = path[i - 1][j]\n                    } else if dp[i - 1][j]\
    \ == dp[i][j] {\n                        if path[i - 1][j] < path[i][j] {\n  \
    \                          newDp[i][j] = dp[i - 1][j]\n                      \
    \      newPath[i][j] = path[i - 1][j]\n                        } else {\n    \
    \                        newDp[i][j] = dp[i][j]\n                            newPath[i][j]\
    \ = path[i][j]\n                        }\n                    } else {\n    \
    \                    newDp[i][j] = dp[i][j]\n                        newPath[i][j]\
    \ = path[i][j]\n                    }\n                }\n                if j\
    \ > 0 {\n                    if dp[i][j - 1] < newDp[i][j] {\n               \
    \         newDp[i][j] = dp[i][j - 1]\n                        newPath[i][j] =\
    \ path[i][j -", "    let n = grid.count\n    var minPath = [Int]()\n    var minSum\
    \ = Int.max\n    var minPaths = [[Int]]()\n    var minSums = [Int]()\n    var\
    \ visited = [[Bool]](repeating: [Bool](repeating: false, count: n), count: n)\n\
    \    var path = [Int]()\n    var sum = 0\n    var paths = [[Int]]()\n    var sums\
    \ = [Int]()\n    var i = 0\n    var j = 0\n    var d = 0\n    var directions =\
    \ [[0, 1], [0, -1], [1, 0], [-1, 0]]\n    var queue = [(i: Int, j: Int, d: Int,\
    \ path: [Int], sum: Int)]()\n    queue.append((i: 0, j: 0, d: 0, path: [grid[0][0]],\
    \ sum: grid[0][0]))\n    visited[0][0] = true\n    while !queue.isEmpty {\n  \
    \      (i, j, d, path, sum) = queue.removeFirst()\n        if d == k {\n     \
    \       if sum < minSum {\n                minSum = sum\n                minPath\
    \ = path\n                minPaths = [path]\n                minSums = [sum]\n\
    \            } else if sum == minSum {\n                minPaths.append(path)\n\
    \                minSums.append(sum)\n            }\n            continue\n  \
    \      }\n        for direction in directions {\n            let newI = i + direction[0]\n\
    \            let newJ = j + direction[1]\n            if newI >= 0 && newI < n\
    \ && newJ >= 0 && newJ < n && !visited[newI][newJ] {\n                var newPath\
    \ = path\n                newPath.append(grid[newI][newJ])\n                var\
    \ newSum = sum + grid[newI][newJ]\n                if newSum < minSum {\n    \
    \                queue.append((i: newI, j: newJ, d: d + 1, path: newPath, sum:\
    \ newSum))\n                    visited[newI][newJ] = true\n                }\
    \ else if newSum == minSum {\n                   ", '    return []', "    let\
    \ n = grid.count\n    var visited = Array(repeating: Array(repeating: false, count:\
    \ n), count: n)\n    var minPath = [Int]()\n    var minSum = Int.max\n    for\
    \ i in 0..<n {\n        for j in 0..<n {\n            var path = [Int]()\n   \
    \         var sum = 0\n            dfs(grid: grid, i: i, j: j, k: k, path: &path,\
    \ sum: &sum, visited: &visited)\n            if sum < minSum {\n             \
    \   minSum = sum\n                minPath = path\n            }\n        }\n \
    \   }\n    return minPath", "    let n = grid.count\n    var dp = Array(repeating:\
    \ Array(repeating: Array(repeating: Int.max, count: n), count: n), count: k +\
    \ 1)\n    var minPath = Array(repeating: 0, count: k)\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            dp[1][i][j] = grid[i][j]\n        }\n \
    \   }\n    for i in 2...k {\n        for x in 0..<n {\n            for y in 0..<n\
    \ {\n                for dx in -1...1 {\n                    for dy in -1...1\
    \ {\n                        if dx == 0 && dy == 0 {\n                       \
    \     continue\n                        }\n                        let nx = x\
    \ + dx\n                        let ny = y + dy\n                        if nx\
    \ < 0 || nx >= n || ny < 0 || ny >= n {\n                            continue\n\
    \                        }\n                        dp[i][x][y] = min(dp[i][x][y],\
    \ dp[i - 1][nx][ny])\n                    }\n                }\n            }\n\
    \        }\n    }\n    var minVal = Int.max\n    var minX = 0\n    var minY =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if dp[k][i][j]\
    \ < minVal {\n                minVal = dp[k][i][j]\n                minX = i\n\
    \                minY = j\n            }\n        }\n    }\n    minPath[k - 1]\
    \ = minVal\n    for i in (0..<k - 1).reversed() {\n        for dx in -1...1 {\n\
    \            for dy in -1...1 {\n                if dx == 0 && dy == 0 {\n   \
    \                 continue\n                }\n                let nx = minX +\
    \ dx\n                let ny = minY + dy\n                if nx < 0 || nx >= n\
    \ || ny < 0 || ny >= n {\n                    continue\n                }\n  \
    \              if dp[i + 1][nx][ny] == minPath[i + 1] {\n                    minPath[i",
  '    return []', "    let n = grid.count\n    var minPath = [Int]()\n    var minSum\
    \ = Int.max\n    var minPaths = [[Int]]()\n    var visited = [[Bool]](repeating:\
    \ [Bool](repeating: false, count: n), count: n)\n    var path = [Int]()\n    var\
    \ sum = 0\n    var paths = [[Int]]()\n    var i = 0\n    var j = 0\n    while\
    \ i < n {\n        while j < n {\n            dfs(grid: grid, i: i, j: j, k: k,\
    \ visited: &visited, path: &path, sum: &sum, paths: &paths)\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    for path in paths {\n        if path.count\
    \ == k {\n            if path.reduce(0, +) < minSum {\n                minSum\
    \ = path.reduce(0, +)\n                minPaths = [path]\n            } else if\
    \ path.reduce(0, +) == minSum {\n                minPaths.append(path)\n     \
    \       }\n        }\n    }\n    minPaths.sort()\n    return minPaths[0]", " \
    \   let n = grid.count\n    var dp = [[[Int]]](repeating: [[Int]](repeating: [Int](repeating:\
    \ Int.max, count: n), count: n), count: k + 1)\n    for i in 0..<n {\n       \
    \ for j in 0..<n {\n            dp[0][i][j] = grid[i][j]\n        }\n    }\n \
    \   for i in 1...k {\n        for j in 0..<n {\n            for l in 0..<n {\n\
    \                if j > 0 {\n                    dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i - 1][j - 1][l])\n                }\n                if j < n - 1 {\n  \
    \                  dp[i][j][l] = min(dp[i][j][l], dp[i - 1][j + 1][l])\n     \
    \           }\n                if l > 0 {\n                    dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1])\n                }\n                if l < n - 1 {\n  \
    \                  dp[i][j][l] = min(dp[i][j][l], dp[i - 1][j][l + 1])\n     \
    \           }\n            }\n        }\n    }\n    var result = [Int]()\n   \
    \ var i = 0, j = 0\n    for _ in 0..<k {\n        result.append(dp[k - i][j][i])\n\
    \        if j > 0 && dp[k - i][j - 1][i] < dp[k - i][j][i] {\n            j -=\
    \ 1\n        } else if j < n - 1 && dp[k - i][j + 1][i] < dp[k - i][j][i] {\n\
    \            j += 1\n        } else if i < n - 1 && dp[k - i - 1][j][i + 1] <\
    \ dp[k - i][j][i] {\n            i += 1\n        }\n    }\n    return result",
  "    // TODO:\n    return []", "    let n = grid.count\n    var dp = Array(repeating:\
    \ Array(repeating: Int.max, count: n), count: n)\n    var visited = Array(repeating:\
    \ Array(repeating: false, count: n), count: n)\n    var path = [Int]()\n    var\
    \ min = Int.max\n    for i in 0..<n {\n        for j in 0..<n {\n            dfs(grid:\
    \ grid, i: i, j: j, k: k, dp: &dp, visited: &visited, path: &path, min: &min)\n\
    \        }\n    }\n    return path", "    let n = grid.count\n    var visited\
    \ = [[Bool]](repeating: [Bool](repeating: false, count: n), count: n)\n    var\
    \ minPath = [Int]()\n    var minSum = Int.max\n    var minPaths = [[Int]]()\n\
    \    func dfs(_ i: Int, _ j: Int, _ path: [Int], _ sum: Int) {\n        if i <\
    \ 0 || i >= n || j < 0 || j >= n || visited[i][j] {\n            return\n    \
    \    }\n        if path.count == k {\n            if sum < minSum {\n        \
    \        minSum = sum\n                minPath = path\n                minPaths\
    \ = [path]\n            } else if sum == minSum {\n                minPaths.append(path)\n\
    \            }\n            return\n        }\n        visited[i][j] = true\n\
    \        dfs(i - 1, j, path + [grid[i][j]], sum + grid[i][j])\n        dfs(i +\
    \ 1, j, path + [grid[i][j]], sum + grid[i][j])\n        dfs(i, j - 1, path + [grid[i][j]],\
    \ sum + grid[i][j])\n        dfs(i, j + 1, path + [grid[i][j]], sum + grid[i][j])\n\
    \        visited[i][j] = false\n    }\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            dfs(i, j, [], 0)\n        }\n    }\n    var minPathIndex\
    \ = 0\n    for i in 1..<minPaths.count {\n        if minPaths[i] < minPaths[minPathIndex]\
    \ {\n            minPathIndex = i\n        }\n    }\n    return minPaths[minPathIndex]",
  '    return []', '    return []', '    return []', "    let n = grid.count\n   \
    \ var dp = Array(repeating: Array(repeating: Int.max, count: n), count: n)\n \
    \   var visited = Array(repeating: Array(repeating: false, count: n), count: n)\n\
    \    var minPath = [Int]()\n    var minSum = Int.max\n    for i in 0..<n {\n \
    \       for j in 0..<n {\n            dfs(grid: grid, i: i, j: j, k: k, dp: &dp,\
    \ visited: &visited, path: [], sum: 0, minPath: &minPath, minSum: &minSum)\n \
    \       }\n    }\n    return minPath", "    let n = grid.count\n    var minPath\
    \ = [Int]()\n    var minSum = Int.max\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            var path = [Int]()\n            var sum = 0\n         \
    \   var visited = [[Bool]](repeating: [Bool](repeating: false, count: n), count:\
    \ n)\n            visited[i][j] = true\n            path.append(grid[i][j])\n\
    \            sum += grid[i][j]\n            dfs(grid: grid, i: i, j: j, k: k,\
    \ visited: &visited, path: &path, sum: &sum, minPath: &minPath, minSum: &minSum)\n\
    \        }\n    }\n    return minPath", "    let n = grid.count\n    var dp =\
    \ [[[Int]]](repeating: [[Int]](repeating: [Int](repeating: Int.max, count: n),\
    \ count: n), count: k + 1)\n    for i in 0..<n {\n        for j in 0..<n {\n \
    \           dp[0][i][j] = grid[i][j]\n        }\n    }\n    for step in 1...k\
    \ {\n        for i in 0..<n {\n            for j in 0..<n {\n                if\
    \ i > 0 {\n                    dp[step][i][j] = min(dp[step][i][j], dp[step -\
    \ 1][i - 1][j])\n                }\n                if i < n - 1 {\n         \
    \           dp[step][i][j] = min(dp[step][i][j], dp[step - 1][i + 1][j])\n   \
    \             }\n                if j > 0 {\n                    dp[step][i][j]\
    \ = min(dp[step][i][j], dp[step - 1][i][j - 1])\n                }\n         \
    \       if j < n - 1 {\n                    dp[step][i][j] = min(dp[step][i][j],\
    \ dp[step - 1][i][j + 1])\n                }\n            }\n        }\n    }\n\
    \    var res = [Int]()\n    var i = 0, j = 0\n    for step in 0..<k {\n      \
    \  res.append(dp[step][i][j])\n        if i > 0 && dp[step][i - 1][j] == dp[step\
    \ + 1][i][j] {\n            i -= 1\n        } else if i < n - 1 && dp[step][i\
    \ + 1][j] == dp[step + 1][i][j] {\n            i += 1\n        } else if j > 0\
    \ && dp[step][i][j - 1] == dp[step + 1][i][j] {\n            j -= 1\n        }\
    \ else if j < n - 1 && dp[step][i][j + 1] == dp[step + 1][i][j] {\n", "    let\
    \ n = grid.count\n    guard n >= 2 && k >= 1 && k <= n * n else {\n        return\
    \ []\n    }\n    let m = grid[0].count\n    guard m == n else {\n        return\
    \ []\n    }\n    var path = [Int]()\n    var minPath = [Int]()\n    var minSum\
    \ = Int.max\n    var visited = [[Bool]](repeating: [Bool](repeating: false, count:\
    \ n), count: n)\n    func dfs(_ i: Int, _ j: Int, _ sum: Int) {\n        if i\
    \ < 0 || i >= n || j < 0 || j >= m || visited[i][j] {\n            return\n  \
    \      }\n        path.append(grid[i][j])\n        visited[i][j] = true\n    \
    \    let newSum = sum + grid[i][j]\n        if path.count == k {\n           \
    \ if newSum < minSum {\n                minSum = newSum\n                minPath\
    \ = path\n            } else if newSum == minSum {\n                if path <\
    \ minPath {\n                    minPath = path\n                }\n         \
    \   }\n        } else {\n            dfs(i - 1, j, newSum)\n            dfs(i\
    \ + 1, j, newSum)\n            dfs(i, j - 1, newSum)\n            dfs(i, j + 1,\
    \ newSum)\n        }\n        path.removeLast()\n        visited[i][j] = false\n\
    \    }\n    for i in 0..<n {\n        for j in 0..<m {\n            dfs(i, j,\
    \ 0)\n        }\n    }\n    return minPath", "    var grid = grid\n    var result\
    \ = [Int]()\n    var min = Int.max\n    var minPath = [Int]()\n    var visited\
    \ = [[Bool]](repeating: [Bool](repeating: false, count: grid.count), count: grid.count)\n\
    \    var queue = [(Int, Int)]()\n    queue.append((0, 0))\n    visited[0][0] =\
    \ true\n    while !queue.isEmpty {\n        let (row, col) = queue.removeFirst()\n\
    \        result.append(grid[row][col])\n        if result.count == k {\n     \
    \       if result.lexicographicallyPrecedes(minPath) {\n                minPath\
    \ = result\n            }\n            result.removeLast()\n            continue\n\
    \        }\n        if row > 0 && !visited[row - 1][col] {\n            queue.append((row\
    \ - 1, col))\n            visited[row - 1][col] = true\n        }\n        if\
    \ row < grid.count - 1 && !visited[row + 1][col] {\n            queue.append((row\
    \ + 1, col))\n            visited[row + 1][col] = true\n        }\n        if\
    \ col > 0 && !visited[row][col - 1] {\n            queue.append((row, col - 1))\n\
    \            visited[row][col - 1] = true\n        }\n        if col < grid.count\
    \ - 1 && !visited[row][col + 1] {\n            queue.append((row, col + 1))\n\
    \            visited[row][col + 1] = true\n        }\n    }\n    return minPath",
  "    let n = grid.count\n    var dp = [[Int]](repeating: [Int](repeating: Int.max,\
    \ count: n), count: n)\n    var path = [[Int]](repeating: [Int](repeating: 0,\
    \ count: n), count: n)\n    for i in 0..<n {\n        for j in 0..<n {\n     \
    \       if i == 0 && j == 0 {\n                dp[i][j] = grid[i][j]\n       \
    \         path[i][j] = 1\n            } else if i == 0 {\n                dp[i][j]\
    \ = dp[i][j - 1] + grid[i][j]\n                path[i][j] = path[i][j - 1] + 1\n\
    \            } else if j == 0 {\n                dp[i][j] = dp[i - 1][j] + grid[i][j]\n\
    \                path[i][j] = path[i - 1][j] + 1\n            } else {\n     \
    \           if dp[i - 1][j] < dp[i][j - 1] {\n                    dp[i][j] = dp[i\
    \ - 1][j] + grid[i][j]\n                    path[i][j] = path[i - 1][j] + 1\n\
    \                } else if dp[i - 1][j] > dp[i][j - 1] {\n                   \
    \ dp[i][j] = dp[i][j - 1] + grid[i][j]\n                    path[i][j] = path[i][j\
    \ - 1] + 1\n                } else {\n                    dp[i][j] = dp[i - 1][j]\
    \ + grid[i][j]\n                    path[i][j] = max(path[i - 1][j], path[i][j\
    \ - 1]) + 1\n                }\n            }\n        }\n    }\n    var res =\
    \ [Int]()\n    var i = n - 1\n    var j = n - 1\n    while i >= 0 && j >= 0 {\n\
    \        if i == 0 && j == 0 {\n            res.append(grid[i][j])\n         \
    \   break\n        }", "    let n = grid.count\n    var minPath = [Int]()\n  \
    \  var minSum = Int.max\n    var minPaths = [[Int]]()\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            var path = [Int]()\n            var paths\
    \ = [[Int]]()\n            var sum = 0\n            dfs(&path, &paths, &sum, grid,\
    \ i, j, k, n)\n            if sum < minSum {\n                minSum = sum\n \
    \               minPath = path\n                minPaths = paths\n           \
    \ } else if sum == minSum {\n                if path < minPath {\n           \
    \         minPath = path\n                    minPaths = paths\n             \
    \   } else if path == minPath {\n                    minPaths.append(path)\n \
    \               }\n            }\n        }\n    }\n    return minPath", "   \
    \ let n = grid.count\n    var minPath = [Int]()\n    var minSum = Int.max\n  \
    \  var minPaths = [[Int]]()\n    var visited = [[Bool]](repeating: [Bool](repeating:\
    \ false, count: n), count: n)\n    for i in 0..<n {\n        for j in 0..<n {\n\
    \            var path = [Int]()\n            var sum = 0\n            dfs(grid:\
    \ grid, i: i, j: j, k: k, path: &path, sum: &sum, visited: &visited)\n       \
    \     if sum < minSum {\n                minSum = sum\n                minPaths\
    \ = [[Int]]()\n                minPaths.append(path)\n            } else if sum\
    \ == minSum {\n                minPaths.append(path)\n            }\n        }\n\
    \    }\n    minPaths.sort { (a, b) -> Bool in\n        for i in 0..<a.count {\n\
    \            if a[i] < b[i] {\n                return true\n            } else\
    \ if a[i] > b[i] {\n                return false\n            }\n        }\n \
    \       return false\n    }\n    return minPaths[0]", "    let n = grid.count\n\
    \    var dp = [[[Int]]](repeating: [[Int]](repeating: [Int](repeating: Int.max,\
    \ count: n), count: n), count: k + 1)\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            dp[0][i][j] = grid[i][j]\n        }\n    }\n    for i in\
    \ 1...k {\n        for j in 0..<n {\n            for k in 0..<n {\n          \
    \      if j > 0 {\n                    dp[i][j][k] = min(dp[i][j][k], dp[i - 1][j\
    \ - 1][k])\n                }\n                if j < n - 1 {\n              \
    \      dp[i][j][k] = min(dp[i][j][k], dp[i - 1][j + 1][k])\n                }\n\
    \                if k > 0 {\n                    dp[i][j][k] = min(dp[i][j][k],\
    \ dp[i - 1][j][k - 1])\n                }\n                if k < n - 1 {\n  \
    \                  dp[i][j][k] = min(dp[i][j][k], dp[i - 1][j][k + 1])\n     \
    \           }\n            }\n        }\n    }\n    var result = [Int]()\n   \
    \ var i = k\n    var j = 0\n    var l = 0\n    while i > 0 {\n        result.append(dp[i][j][l])\n\
    \        let next = dp[i - 1][j][l]\n        if j > 0 && dp[i - 1][j - 1][l] ==\
    \ next {\n            j -= 1\n        } else if j < n - 1 && dp[i - 1][j + 1][l]\
    \ == next {\n            j += 1\n        } else if l > 0 && dp[i - 1][j][l - 1]\
    \ == next {\n            l -= 1\n        } else if l < n - 1 && dp[i - 1][j][l\
    \ + 1] == next {\n            l += 1\n        }\n        i -=", "    let n = grid.count\n\
    \    var dp = Array(repeating: Array(repeating: Int.max, count: n), count: n)\n\
    \    var visited = Array(repeating: Array(repeating: false, count: n), count:\
    \ n)\n    var queue = [(Int, Int, Int)]()\n    queue.append((0, 0, 0))\n    dp[0][0]\
    \ = grid[0][0]\n    visited[0][0] = true\n    var minPath = [Int]()\n    while\
    \ !queue.isEmpty {\n        let (x, y, len) = queue.removeFirst()\n        if\
    \ len == k {\n            if minPath.isEmpty || dp[x][y] < minPath[0] {\n    \
    \            minPath = [dp[x][y]]\n            } else if dp[x][y] == minPath[0]\
    \ {\n                minPath.append(dp[x][y])\n            }\n            continue\n\
    \        }\n        if x > 0 && !visited[x - 1][y] {\n            visited[x -\
    \ 1][y] = true\n            dp[x - 1][y] = dp[x][y] + grid[x - 1][y]\n       \
    \     queue.append((x - 1, y, len + 1))\n        }\n        if x < n - 1 && !visited[x\
    \ + 1][y] {\n            visited[x + 1][y] = true\n            dp[x + 1][y] =\
    \ dp[x][y] + grid[x + 1][y]\n            queue.append((x + 1, y, len + 1))\n \
    \       }\n        if y > 0 && !visited[x][y - 1] {\n            visited[x][y\
    \ - 1] = true\n            dp[x][y - 1] = dp[x][y] + grid[x][y - 1]\n        \
    \    queue.append((x, y - 1, len + 1))\n        }\n        if y < n - 1 && !visited[x][y\
    \ + 1] {\n            visited[x][y + 1] = true\n            dp[x][y + 1] = dp[x][",
  "    let n = grid.count\n    var minPath = [Int]()\n    var minSum = Int.max\n \
    \   var minPaths = [[Int]]()\n    var visited = [[Bool]](repeating: [Bool](repeating:\
    \ false, count: n), count: n)\n    var path = [Int]()\n    var sum = 0\n    var\
    \ paths = [[Int]]()\n    var i = 0\n    var j = 0\n    while i < n {\n       \
    \ while j < n {\n            dfs(grid: grid, i: i, j: j, k: k, visited: &visited,\
    \ path: &path, sum: &sum, paths: &paths)\n            j += 1\n        }\n    \
    \    i += 1\n    }\n    for path in paths {\n        if path.count == k {\n  \
    \          if path.reduce(0, +) < minSum {\n                minSum = path.reduce(0,\
    \ +)\n                minPaths = [path]\n            } else if path.reduce(0,\
    \ +) == minSum {\n                minPaths.append(path)\n            }\n     \
    \   }\n    }\n    minPaths.sort()\n    minPath = minPaths[0]\n    return minPath",
  '    return []', "    let n = grid.count\n    var dp = Array(repeating: Array(repeating:\
    \ Int.max, count: n), count: n)\n    var prev = Array(repeating: Array(repeating:\
    \ -1, count: n), count: n)\n    for i in 0..<n {\n        for j in 0..<n {\n \
    \           if i == 0 && j == 0 {\n                dp[i][j] = grid[i][j]\n   \
    \         } else if i == 0 {\n                dp[i][j] = dp[i][j - 1] + grid[i][j]\n\
    \                prev[i][j] = 1\n            } else if j == 0 {\n            \
    \    dp[i][j] = dp[i - 1][j] + grid[i][j]\n                prev[i][j] = 0\n  \
    \          } else {\n                if dp[i - 1][j] < dp[i][j - 1] {\n      \
    \              dp[i][j] = dp[i - 1][j] + grid[i][j]\n                    prev[i][j]\
    \ = 0\n                } else {\n                    dp[i][j] = dp[i][j - 1] +\
    \ grid[i][j]\n                    prev[i][j] = 1\n                }\n        \
    \    }\n        }\n    }\n    var i = n - 1\n    var j = n - 1\n    var path =\
    \ [Int]()\n    while k > 0 {\n        path.append(grid[i][j])\n        if prev[i][j]\
    \ == 0 {\n            i -= 1\n        } else {\n            j -= 1\n        }\n\
    \        k -= 1\n    }\n    return path", "    let n = grid.count\n    var dp\
    \ = Array(repeating: Array(repeating: Int.max, count: n), count: n)\n    var minPath\
    \ = Array(repeating: Array(repeating: [Int](), count: n), count: n)\n    for i\
    \ in 0..<n {\n        for j in 0..<n {\n            dp[i][j] = grid[i][j]\n  \
    \          minPath[i][j] = [grid[i][j]]\n        }\n    }\n    for _ in 1..<k\
    \ {\n        var newDp = Array(repeating: Array(repeating: Int.max, count: n),\
    \ count: n)\n        var newMinPath = Array(repeating: Array(repeating: [Int](),\
    \ count: n), count: n)\n        for i in 0..<n {\n            for j in 0..<n {\n\
    \                if i > 0 && dp[i - 1][j] < dp[i][j] {\n                    newDp[i][j]\
    \ = dp[i - 1][j]\n                    newMinPath[i][j] = minPath[i - 1][j]\n \
    \               } else if i > 0 && dp[i - 1][j] == dp[i][j] {\n              \
    \      newDp[i][j] = dp[i - 1][j]\n                    newMinPath[i][j] = min(minPath[i\
    \ - 1][j], minPath[i][j])\n                } else {\n                    newDp[i][j]\
    \ = dp[i][j]\n                    newMinPath[i][j] = minPath[i][j]\n         \
    \       }\n                if j > 0 && dp[i][j - 1] < newDp[i][j] {\n        \
    \            newDp[i][j] = dp[i][j - 1]\n                    newMinPath[i][j]\
    \ = minPath[i][j - 1]\n                } else if j > 0 && dp[i][j - 1] == newDp[i][j]\
    \ {\n                    newDp[i][j] = dp[i][j - 1]\n                   ", " \
    \   // TODO\n    return []", "    let n = grid.count\n    var dp = Array(repeating:\
    \ Array(repeating: Array(repeating: Int.max, count: n), count: n), count: k +\
    \ 1)\n    for i in 0..<n {\n        for j in 0..<n {\n            dp[1][i][j]\
    \ = grid[i][j]\n        }\n    }\n    for l in 2...k {\n        for i in 0..<n\
    \ {\n            for j in 0..<n {\n                for d in 0..<4 {\n        \
    \            let ni = i + dx[d]\n                    let nj = j + dy[d]\n    \
    \                if ni >= 0 && ni < n && nj >= 0 && nj < n {\n               \
    \         dp[l][i][j] = min(dp[l][i][j], dp[l - 1][ni][nj])\n                \
    \    }\n                }\n                dp[l][i][j] += grid[i][j]\n       \
    \     }\n        }\n    }\n    var res = Int.max\n    var ri = 0\n    var rj =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if dp[k][i][j]\
    \ < res {\n                res = dp[k][i][j]\n                ri = i\n       \
    \         rj = j\n            }\n        }\n    }\n    var ans = [Int]()\n   \
    \ for _ in 0..<k {\n        ans.append(grid[ri][rj])\n        for d in 0..<4 {\n\
    \            let ni = ri + dx[d]\n            let nj = rj + dy[d]\n          \
    \  if ni >= 0 && ni < n && nj >= 0 && nj < n && dp[k][ni][nj] == res - grid[ri][rj]\
    \ {\n                ri = ni\n                rj = nj\n                break\n\
    \            }\n        }\n        res -= grid[ri][rj]\n    }\n    return ans",
  "    let n = grid.count\n    var dp = [[Int]](repeating: [Int](repeating: Int.max,\
    \ count: n), count: n)\n    var minPath = [Int]()\n    for i in 0..<n {\n    \
    \    for j in 0..<n {\n            if i == 0 && j == 0 {\n                dp[i][j]\
    \ = 0\n            } else if i == 0 {\n                dp[i][j] = dp[i][j - 1]\
    \ + 1\n            } else if j == 0 {\n                dp[i][j] = dp[i - 1][j]\
    \ + 1\n            } else {\n                dp[i][j] = min(dp[i - 1][j], dp[i][j\
    \ - 1]) + 1\n            }\n        }\n    }\n    var i = n - 1\n    var j = n\
    \ - 1\n    while i >= 0 && j >= 0 {\n        minPath.append(grid[i][j])\n    \
    \    if dp[i][j] == 1 {\n            break\n        }\n        if i == 0 {\n \
    \           j -= 1\n        } else if j == 0 {\n            i -= 1\n        }\
    \ else {\n            if dp[i - 1][j] < dp[i][j - 1] {\n                i -= 1\n\
    \            } else {\n                j -= 1\n            }\n        }\n    }\n\
    \    return minPath", '    return []', "    let n = grid.count\n    var minPath\
    \ = [Int]()\n    var minSum = Int.max\n    var minPaths = [[Int]]()\n    var visited\
    \ = Array(repeating: Array(repeating: false, count: n), count: n)\n    for i in\
    \ 0..<n {\n        for j in 0..<n {\n            var path = [Int]()\n        \
    \    var sum = 0\n            var paths = [[Int]]()\n            var visited =\
    \ Array(repeating: Array(repeating: false, count: n), count: n)\n            dfs(grid:\
    \ grid, i: i, j: j, k: k, path: &path, sum: &sum, paths: &paths, visited: &visited)\n\
    \            if sum < minSum {\n                minSum = sum\n               \
    \ minPaths = paths\n            }\n        }\n    }\n    for path in minPaths\
    \ {\n        if path.count == k {\n            return path\n        }\n    }\n\
    \    return minPath", "    let n = grid.count\n    var dp = [[Int]](repeating:\
    \ [Int](repeating: Int.max, count: n), count: n)\n    var path = [[Int]](repeating:\
    \ [Int](repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            dp[i][j] = grid[i][j]\n            path[i][j] = grid[i][j]\n\
    \        }\n    }\n    for _ in 1..<k {\n        var next = [[Int]](repeating:\
    \ [Int](repeating: Int.max, count: n), count: n)\n        var nextPath = [[Int]](repeating:\
    \ [Int](repeating: 0, count: n), count: n)\n        for i in 0..<n {\n       \
    \     for j in 0..<n {\n                if i > 0 && dp[i - 1][j] < next[i][j]\
    \ {\n                    next[i][j] = dp[i - 1][j]\n                    nextPath[i][j]\
    \ = path[i - 1][j]\n                }\n                if j > 0 && dp[i][j - 1]\
    \ < next[i][j] {\n                    next[i][j] = dp[i][j - 1]\n            \
    \        nextPath[i][j] = path[i][j - 1]\n                }\n                if\
    \ i < n - 1 && dp[i + 1][j] < next[i][j] {\n                    next[i][j] = dp[i\
    \ + 1][j]\n                    nextPath[i][j] = path[i + 1][j]\n             \
    \   }\n                if j < n - 1 && dp[i][j + 1] < next[i][j] {\n         \
    \           next[i][j] = dp[i][j + 1]\n                    nextPath[i][j] = path[i][j\
    \ + 1]\n                }\n                next[i][j] += grid[i][j]\n        \
    \        nextPath[i][j] += grid[i][j]\n            }\n        }\n        dp =\
    \ next", "    // TODO: Implement\n    return []", "    let n = grid.count\n  \
    \  var dp = Array(repeating: Array(repeating: Int.max, count: n), count: n)\n\
    \    var visited = Array(repeating: Array(repeating: false, count: n), count:\
    \ n)\n    var minPath = [Int]()\n    var minVal = Int.max\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            dfs(grid: grid, i: i, j: j, k: k, dp:\
    \ &dp, visited: &visited, path: [], minPath: &minPath, minVal: &minVal)\n    \
    \    }\n    }\n    return minPath", "    let n = grid.count\n    var dp = [[Int]](repeating:\
    \ [Int](repeating: Int.max, count: n), count: n)\n    var path = [[Int]](repeating:\
    \ [Int](repeating: -1, count: n), count: n)\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if i == 0 && j == 0 {\n                dp[i][j] =\
    \ grid[i][j]\n            } else if i == 0 {\n                dp[i][j] = dp[i][j\
    \ - 1] + grid[i][j]\n                path[i][j] = j - 1\n            } else if\
    \ j == 0 {\n                dp[i][j] = dp[i - 1][j] + grid[i][j]\n           \
    \     path[i][j] = i - 1\n            } else {\n                if dp[i - 1][j]\
    \ < dp[i][j - 1] {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j]\n\
    \                    path[i][j] = i - 1\n                } else {\n          \
    \          dp[i][j] = dp[i][j - 1] + grid[i][j]\n                    path[i][j]\
    \ = j - 1\n                }\n            }\n        }\n    }\n    var result\
    \ = [Int]()\n    var i = n - 1\n    var j = n - 1\n    while k > 0 {\n       \
    \ result.append(grid[i][j])\n        if path[i][j] < 0 {\n            break\n\
    \        } else if path[i][j] < n {\n            i = path[i][j]\n        } else\
    \ {\n            j = path[i][j] - n\n        }\n        k -= 1\n    }\n    return\
    \ result", "    let n = grid.count\n    var minPath = [Int]()\n    for _ in 0..<k\
    \ {\n        minPath.append(Int.max)\n    }\n    var visited = [[Bool]]()\n  \
    \  for _ in 0..<n {\n        var row = [Bool]()\n        for _ in 0..<n {\n  \
    \          row.append(false)\n        }\n        visited.append(row)\n    }\n\
    \    var min = Int.max\n    for i in 0..<n {\n        for j in 0..<n {\n     \
    \       var path = [Int]()\n            dfs(grid: grid, i: i, j: j, k: k, path:\
    \ &path, visited: &visited, min: &min, minPath: &minPath)\n        }\n    }\n\
    \    return minPath", "    let n = grid.count\n    var dp = Array(repeating: Array(repeating:\
    \ Int.max, count: n), count: n)\n    var visited = Array(repeating: Array(repeating:\
    \ false, count: n), count: n)\n    var queue = [(Int, Int, Int)]()\n    queue.append((0,\
    \ 0, 0))\n    dp[0][0] = 0\n    visited[0][0] = true\n    while !queue.isEmpty\
    \ {\n        let (i, j, l) = queue.removeFirst()\n        if l == k {\n      \
    \      break\n        }\n        if i > 0 && !visited[i - 1][j] {\n          \
    \  dp[i - 1][j] = min(dp[i - 1][j], dp[i][j] + grid[i - 1][j])\n            queue.append((i\
    \ - 1, j, l + 1))\n            visited[i - 1][j] = true\n        }\n        if\
    \ i < n - 1 && !visited[i + 1][j] {\n            dp[i + 1][j] = min(dp[i + 1][j],\
    \ dp[i][j] + grid[i + 1][j])\n            queue.append((i + 1, j, l + 1))\n  \
    \          visited[i + 1][j] = true\n        }\n        if j > 0 && !visited[i][j\
    \ - 1] {\n            dp[i][j - 1] = min(dp[i][j - 1], dp[i][j] + grid[i][j -\
    \ 1])\n            queue.append((i, j - 1, l + 1))\n            visited[i][j -\
    \ 1] = true\n        }\n        if j < n - 1 && !visited[i][j + 1] {\n       \
    \     dp[i][j + 1] = min(dp[i][j + 1], dp[i][j] + grid[i][j + 1])\n          \
    \  queue.append((i, j + 1, l + 1))\n            visited[i][j + 1] = true\n   \
    \     }\n    }\n    var result = [Int]()\n    var", "    let n = grid.count\n\
    \    var dp = Array(repeating: Array(repeating: Int.max, count: n), count: n)\n\
    \    var path = Array(repeating: Array(repeating: [Int](), count: n), count: n)\n\
    \    for i in 0..<n {\n        for j in 0..<n {\n            if i == 0 && j ==\
    \ 0 {\n                dp[i][j] = grid[i][j]\n                path[i][j] = [grid[i][j]]\n\
    \            } else if i == 0 {\n                dp[i][j] = dp[i][j - 1] + grid[i][j]\n\
    \                path[i][j] = path[i][j - 1] + [grid[i][j]]\n            } else\
    \ if j == 0 {\n                dp[i][j] = dp[i - 1][j] + grid[i][j]\n        \
    \        path[i][j] = path[i - 1][j] + [grid[i][j]]\n            } else {\n  \
    \              if dp[i - 1][j] < dp[i][j - 1] {\n                    dp[i][j]\
    \ = dp[i - 1][j] + grid[i][j]\n                    path[i][j] = path[i - 1][j]\
    \ + [grid[i][j]]\n                } else if dp[i - 1][j] > dp[i][j - 1] {\n  \
    \                  dp[i][j] = dp[i][j - 1] + grid[i][j]\n                    path[i][j]\
    \ = path[i][j - 1] + [grid[i][j]]\n                } else {\n                \
    \    dp[i][j] = dp[i - 1][j] + grid[i][j]\n                    path[i][j] = min(path[i\
    \ - 1][j] + [grid[i][j]], path[i][j - 1] + [grid[i][j]])\n                }\n\
    \            }\n        }\n    }\n    return Array(path[n - 1][n - 1].prefix(k))",
  "    let n = grid.count\n    var dp = Array(repeating: Array(repeating: Array(repeating:\
    \ Int.max, count: n), count: n), count: k + 1)\n    for i in 0..<n {\n       \
    \ for j in 0..<n {\n            dp[1][i][j] = grid[i][j]\n        }\n    }\n \
    \   for step in 2...k {\n        for i in 0..<n {\n            for j in 0..<n\
    \ {\n                if i > 0 {\n                    dp[step][i][j] = min(dp[step][i][j],\
    \ dp[step - 1][i - 1][j])\n                }\n                if i < n - 1 {\n\
    \                    dp[step][i][j] = min(dp[step][i][j], dp[step - 1][i + 1][j])\n\
    \                }\n                if j > 0 {\n                    dp[step][i][j]\
    \ = min(dp[step][i][j], dp[step - 1][i][j - 1])\n                }\n         \
    \       if j < n - 1 {\n                    dp[step][i][j] = min(dp[step][i][j],\
    \ dp[step - 1][i][j + 1])\n                }\n            }\n        }\n    }\n\
    \    var result = [Int]()\n    var i = 0, j = 0\n    while result.count < k {\n\
    \        result.append(grid[i][j])\n        let next = dp[k - result.count][i][j]\n\
    \        if i > 0 && dp[k - result.count + 1][i - 1][j] == next {\n          \
    \  i -= 1\n        } else if i < n - 1 && dp[k - result.count + 1][i + 1][j] ==\
    \ next {\n            i += 1\n        } else if j > 0 && dp[k - result.count +\
    \ 1][i][j - 1] == next {\n            j -= 1\n        } else {\n            j\
    \ += 1\n        }\n    }\n    return result", "    let n = grid.count\n    var\
    \ visited = Array(repeating: Array(repeating: false, count: n), count: n)\n  \
    \  var minPath = [Int]()\n    var minSum = Int.max\n    for i in 0..<n {\n   \
    \     for j in 0..<n {\n            var path = [Int]()\n            var sum =\
    \ 0\n            dfs(grid: grid, i: i, j: j, k: k, visited: &visited, path: &path,\
    \ sum: &sum)\n            if sum < minSum {\n                minSum = sum\n  \
    \              minPath = path\n            }\n        }\n    }\n    return minPath",
  "    let n = grid.count\n    var result = [Int]()\n    var min = Int.max\n    var\
    \ minPath = [Int]()\n    for i in 0..<n {\n        for j in 0..<n {\n        \
    \    var path = [Int]()\n            var visited = [[Bool]](repeating: [Bool](repeating:\
    \ false, count: n), count: n)\n            dfs(grid: grid, path: &path, visited:\
    \ &visited, i: i, j: j, k: k, min: &min, minPath: &minPath)\n        }\n    }\n\
    \    return minPath", "    let n = grid.count\n    var dp = [[[Int]]](repeating:\
    \ [[Int]](repeating: [Int](repeating: Int.max, count: n), count: n), count: k\
    \ + 1)\n    var minPath = [Int]()\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            dp[0][i][j] = grid[i][j]\n        }\n    }\n    for i in 1...k\
    \ {\n        for j in 0..<n {\n            for l in 0..<n {\n                var\
    \ min = Int.max\n                if j > 0 {\n                    min = min < dp[i\
    \ - 1][j - 1][l] ? min : dp[i - 1][j - 1][l]\n                }\n            \
    \    if j < n - 1 {\n                    min = min < dp[i - 1][j + 1][l] ? min\
    \ : dp[i - 1][j + 1][l]\n                }\n                if l > 0 {\n     \
    \               min = min < dp[i - 1][j][l - 1] ? min : dp[i - 1][j][l - 1]\n\
    \                }\n                if l < n - 1 {\n                    min =\
    \ min < dp[i - 1][j][l + 1] ? min : dp[i - 1][j][l + 1]\n                }\n \
    \               dp[i][j][l] = min\n            }\n        }\n    }\n    var min\
    \ = Int.max\n    for i in 0..<n {\n        for j in 0..<n {\n            min =\
    \ min < dp[k][i][j] ? min : dp[k][i][j]\n        }\n    }\n    minPath.append(min)\n\
    \    var i = k\n    var j = 0\n    var l = 0\n    while i > 0 {\n        if j\
    \ > 0 && dp[i - 1][j - 1][l] == minPath.last! {\n            minPath.append(grid[j\
    \ - 1][l])\n            j -= 1\n        } else if j < n - 1 && dp[i - 1][j +",
  '    return []', '    return []', "    let n = grid.count\n    var dp = Array(repeating:\
    \ Array(repeating: Array(repeating: Int.max, count: n), count: n), count: k +\
    \ 1)\n    var path = Array(repeating: Array(repeating: Array(repeating: 0, count:\
    \ n), count: n), count: k + 1)\n    for i in 0..<n {\n        for j in 0..<n {\n\
    \            dp[1][i][j] = grid[i][j]\n            path[1][i][j] = grid[i][j]\n\
    \        }\n    }\n    for l in 2...k {\n        for i in 0..<n {\n          \
    \  for j in 0..<n {\n                for d in 0..<4 {\n                    let\
    \ ni = i + dx[d]\n                    let nj = j + dy[d]\n                   \
    \ if ni >= 0 && ni < n && nj >= 0 && nj < n {\n                        if dp[l][i][j]\
    \ > dp[l - 1][ni][nj] {\n                            dp[l][i][j] = dp[l - 1][ni][nj]\n\
    \                            path[l][i][j] = path[l - 1][ni][nj]\n           \
    \             }\n                        if dp[l][i][j] == dp[l - 1][ni][nj] {\n\
    \                            path[l][i][j] = min(path[l][i][j], path[l - 1][ni][nj])\n\
    \                        }\n                    }\n                }\n       \
    \         dp[l][i][j] += grid[i][j]\n                path[l][i][j] = min(path[l][i][j],\
    \ grid[i][j])\n            }\n        }\n    }\n    var ans = [Int]()\n    var\
    \ i = 0, j = 0\n    for l in 1...k {\n        ans.append(path[l][i][j])\n    \
    \    for d in 0..<4 {\n            let ni = i + dx[d]\n            let nj = j\
    \ + dy[d]\n            if ni >= 0 && ni < n &&", "    var result = [Int]()\n \
    \   return result", "    let n = grid.count\n    var minPath = [Int]()\n    var\
    \ minSum = Int.max\n    var minPaths = [[Int]]()\n    var visited = Array(repeating:\
    \ Array(repeating: false, count: n), count: n)\n    for i in 0..<n {\n       \
    \ for j in 0..<n {\n            var path = [Int]()\n            var sum = 0\n\
    \            dfs(&path, &sum, &visited, grid, i, j, k)\n            if sum < minSum\
    \ {\n                minSum = sum\n                minPaths = [path]\n       \
    \     } else if sum == minSum {\n                minPaths.append(path)\n     \
    \       }\n        }\n    }\n    minPaths.sort { (a, b) -> Bool in\n        for\
    \ i in 0..<a.count {\n            if a[i] < b[i] {\n                return true\n\
    \            } else if a[i] > b[i] {\n                return false\n         \
    \   }\n        }\n        return false\n    }\n    return minPaths[0]", "    let\
    \ n = grid.count\n    var dp = Array(repeating: Array(repeating: Array(repeating:\
    \ Int.max, count: n), count: n), count: k + 1)\n    for i in 0..<n {\n       \
    \ for j in 0..<n {\n            dp[1][i][j] = grid[i][j]\n        }\n    }\n \
    \   for l in 2...k {\n        for i in 0..<n {\n            for j in 0..<n {\n\
    \                if i > 0 {\n                    dp[l][i][j] = min(dp[l][i][j],\
    \ dp[l - 1][i - 1][j])\n                }\n                if i < n - 1 {\n  \
    \                  dp[l][i][j] = min(dp[l][i][j], dp[l - 1][i + 1][j])\n     \
    \           }\n                if j > 0 {\n                    dp[l][i][j] = min(dp[l][i][j],\
    \ dp[l - 1][i][j - 1])\n                }\n                if j < n - 1 {\n  \
    \                  dp[l][i][j] = min(dp[l][i][j], dp[l - 1][i][j + 1])\n     \
    \           }\n                dp[l][i][j] += grid[i][j]\n            }\n    \
    \    }\n    }\n    var res = Int.max\n    var ri = 0\n    var rj = 0\n    for\
    \ i in 0..<n {\n        for j in 0..<n {\n            if dp[k][i][j] < res {\n\
    \                res = dp[k][i][j]\n                ri = i\n                rj\
    \ = j\n            }\n        }\n    }\n    var ans = [Int]()\n    ans.append(grid[ri][rj])\n\
    \    var cur = res - grid[ri][rj]\n    for _ in 1..<k {\n        var ni = -1\n\
    \        var nj = -1\n        if ri > 0 && dp[k - 1][ri - 1][rj] == cur {\n  \
    \          ni =", "    var result = [Int]()\n    var visited = [[Bool]](repeating:\
    \ [Bool](repeating: false, count: grid.count), count: grid.count)\n    var minPath\
    \ = [Int]()\n    var minSum = Int.max\n    var minPathSum = Int.max\n    var minPathCount\
    \ = Int.max\n    var minPathCountSum = Int.max\n    var minPathCountSumIndex =\
    \ 0\n    var minPathCountSumIndexCount = 0\n    var minPathCountSumIndexCountSum\
    \ = Int.max\n    var minPathCountSumIndexCountSumIndex = 0\n    var minPathCountSumIndexCountSumIndexCount\
    \ = 0\n    var minPathCountSumIndexCountSumIndexCountSum = Int.max\n    var minPathCountSumIndexCountSumIndexCountSumIndex\
    \ = 0\n    var minPathCountSumIndexCountSumIndexCountSumIndexCount = 0\n    var\
    \ minPathCountSumIndexCountSumIndexCountSumIndexCountSum = Int.max\n    var minPathCountSumIndexCountSumIndexCountSumIndexCountSumIndex\
    \ = 0\n    var minPathCountSumIndexCountSumIndexCountSumIndexCountSumIndexCount\
    \ = 0\n    var minPathCountSumIndexCountSumIndexCountSumIndexCountSumIndexCountSum\
    \ = Int.max\n    var minPathCountSumIndexCountSumIndexCountSumIndexCountSumIndexCountSumIndex\
    \ = 0\n    var minPathCountSumIndexCountSumIndexCountSumIndexCountSumIndexCountSumIndexCount\
    \ = 0\n    var minPathCountSumIndexCountSumIndexCountSumIndexCountSumIndexCountSumIndexCountSum\
    \ = Int.max\n    var minPathCountSumIndexCountSumIndexCountSumIndexCountSumIndexCountSumIndexCountSumIndex\
    \ = 0\n    var minPathCountSumIndexCountSumIndexCountSumIndexCountSumIndexCountSumIndexCountSumIndexCount\
    \ = 0\n    var minPathCountSumIndexCountSumIndexCountSumIndexCountSumIndexCountSumIndexCountSumIndexCountSum\
    \ = Int.max\n    var minPathCountSumIndexCountSumIndexCountSumIndexCountSumIndexCountSumIndexCountSumIndexCountSumIndex\
    \ = 0\n    var minPathCountSumIndexCountSumIndexCountSumIndexCountSumIndexCountSumIndexCountSumIndexCountSumIndexCount\
    \ = 0\n    var minPathCountSumIndexCountSumIndexCountSumIndexCountSumIndex", " \
    \   let n = grid.count\n    var dp = [[[Int]]](repeating: [[Int]](repeating: [Int](repeating:\
    \ Int.max, count: n * n + 1), count: n), count: n)\n    var q = [(Int, Int, Int)]()\n\
    \    q.append((0, 0, grid[0][0]))\n    dp[0][0][grid[0][0]] = 0\n    while !q.isEmpty\
    \ {\n        let (i, j, v) = q.removeFirst()\n        if i > 0 {\n           \
    \ let v2 = v + grid[i - 1][j]\n            if dp[i - 1][j][v2] == Int.max {\n\
    \                dp[i - 1][j][v2] = dp[i][j][v] + 1\n                q.append((i\
    \ - 1, j, v2))\n            }\n        }\n        if i < n - 1 {\n           \
    \ let v2 = v + grid[i + 1][j]\n            if dp[i + 1][j][v2] == Int.max {\n\
    \                dp[i + 1][j][v2] = dp[i][j][v] + 1\n                q.append((i\
    \ + 1, j, v2))\n            }\n        }\n        if j > 0 {\n            let\
    \ v2 = v + grid[i][j - 1]\n            if dp[i][j - 1][v2] == Int.max {\n    \
    \            dp[i][j - 1][v2] = dp[i][j][v] + 1\n                q.append((i,\
    \ j - 1, v2))\n            }\n        }\n        if j < n - 1 {\n            let\
    \ v2 = v + grid[i][j + 1]\n            if dp[i][j + 1][v2] == Int.max {\n    \
    \            dp[i][j + 1][v2] = dp[i][j][v] + 1\n                q.append((i,\
    \ j + 1, v2))\n            }\n        }\n    }\n    var ans = [Int]()\n    var\
    \ min = Int.max\n", '    return []', "    let n = grid.count\n    var minPath\
    \ = [Int]()\n    var minSum = Int.max\n    var minPaths = [[Int]]()\n    var visited\
    \ = Array(repeating: Array(repeating: false, count: n), count: n)\n    func dfs(_\
    \ i: Int, _ j: Int, _ path: [Int], _ sum: Int) {\n        if i < 0 || i >= n ||\
    \ j < 0 || j >= n || visited[i][j] {\n            return\n        }\n        if\
    \ path.count == k {\n            if sum < minSum {\n                minSum = sum\n\
    \                minPaths = [path]\n            } else if sum == minSum {\n  \
    \              minPaths.append(path)\n            }\n            return\n    \
    \    }\n        visited[i][j] = true\n        dfs(i - 1, j, path + [grid[i][j]],\
    \ sum + grid[i][j])\n        dfs(i + 1, j, path + [grid[i][j]], sum + grid[i][j])\n\
    \        dfs(i, j - 1, path + [grid[i][j]], sum + grid[i][j])\n        dfs(i,\
    \ j + 1, path + [grid[i][j]], sum + grid[i][j])\n        visited[i][j] = false\n\
    \    }\n    for i in 0..<n {\n        for j in 0..<n {\n            dfs(i, j,\
    \ [], 0)\n        }\n    }\n    for path in minPaths {\n        if path < minPath\
    \ {\n            minPath = path\n        }\n    }\n    return minPath", "    let\
    \ n = grid.count\n    var minPath = [Int]()\n    var minSum = Int.max\n    var\
    \ minPaths = [[Int]]()\n    for i in 0..<n {\n        for j in 0..<n {\n     \
    \       var path = [Int]()\n            var sum = 0\n            var paths = [[Int]]()\n\
    \            dfs(grid: grid, i: i, j: j, k: k, path: &path, sum: &sum, paths:\
    \ &paths)\n            if sum < minSum {\n                minSum = sum\n     \
    \           minPath = path\n                minPaths = paths\n            } else\
    \ if sum == minSum {\n                if path < minPath {\n                  \
    \  minPath = path\n                    minPaths = paths\n                } else\
    \ if path == minPath {\n                    minPaths.append(contentsOf: paths)\n\
    \                }\n            }\n        }\n    }\n    print(minPaths)\n   \
    \ return minPath", "    let n = grid.count\n    var minPath = [Int]()\n    var\
    \ minSum = Int.max\n    var minPaths = [[Int]]()\n    var visited = Array(repeating:\
    \ Array(repeating: false, count: n), count: n)\n    for i in 0..<n {\n       \
    \ for j in 0..<n {\n            var path = [Int]()\n            var sum = 0\n\
    \            var paths = [[Int]]()\n            var visited = Array(repeating:\
    \ Array(repeating: false, count: n), count: n)\n            dfs(grid: grid, i:\
    \ i, j: j, k: k, path: &path, sum: &sum, paths: &paths, visited: &visited)\n \
    \           if sum < minSum {\n                minSum = sum\n                minPaths\
    \ = paths\n            }\n        }\n    }\n    for path in minPaths {\n     \
    \   if path.count == k {\n            minPath = path\n            break\n    \
    \    }\n    }\n    return minPath", "    let n = grid.count\n    var minPath =\
    \ [Int]()\n    var minSum = Int.max\n    var minPaths = [[Int]]()\n    for i in\
    \ 0..<n {\n        for j in 0..<n {\n            var path = [Int]()\n        \
    \    var sum = 0\n            var paths = [[Int]]()\n            minPathHelper(grid:\
    \ grid, i: i, j: j, k: k, path: &path, sum: &sum, paths: &paths)\n           \
    \ if sum < minSum {\n                minSum = sum\n                minPaths =\
    \ paths\n            }\n        }\n    }\n    for path in minPaths {\n       \
    \ if path.count == k {\n            minPath = path\n            break\n      \
    \  }\n    }\n    return minPath", "    let n = grid.count\n    var result = [Int]()\n\
    \    var visited = [[Bool]](repeating: [Bool](repeating: false, count: n), count:\
    \ n)\n    var minPath = [Int]()\n    var minSum = Int.max\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            if visited[i][j] == false {\n     \
    \           result.append(grid[i][j])\n                visited[i][j] = true\n\
    \                dfs(grid: grid, k: k, n: n, i: i, j: j, visited: &visited, result:\
    \ &result, minPath: &minPath, minSum: &minSum)\n                result.removeLast()\n\
    \                visited[i][j] = false\n            }\n        }\n    }\n    return\
    \ minPath", '    return [1]', "    let n = grid.count\n    var minPath = [Int]()\n\
    \    var minPathSum = Int.max\n    var visited = [[Bool]](repeating: [Bool](repeating:\
    \ false, count: n), count: n)\n    var curPath = [Int]()\n    var curPathSum =\
    \ 0\n    var curRow = 0\n    var curCol = 0\n    var curStep = 0\n    while curStep\
    \ < k {\n        visited[curRow][curCol] = true\n        curPath.append(grid[curRow][curCol])\n\
    \        curPathSum += grid[curRow][curCol]\n        if curPathSum < minPathSum\
    \ {\n            minPath = curPath\n            minPathSum = curPathSum\n    \
    \    }\n        if curRow > 0 && !visited[curRow - 1][curCol] {\n            curRow\
    \ -= 1\n        } else if curRow < n - 1 && !visited[curRow + 1][curCol] {\n \
    \           curRow += 1\n        } else if curCol > 0 && !visited[curRow][curCol\
    \ - 1] {\n            curCol -= 1\n        } else if curCol < n - 1 && !visited[curRow][curCol\
    \ + 1] {\n            curCol += 1\n        } else {\n            break\n     \
    \   }\n        curStep += 1\n    }\n    return minPath", "    var result = [Int]()\n\
    \    var visited = [[Bool]](repeating: [Bool](repeating: false, count: grid.count),\
    \ count: grid.count)\n    var minPath = [Int]()\n    var minSum = Int.max\n  \
    \  var minPaths = [[Int]]()\n    var paths = [[Int]]()\n    var path = [Int]()\n\
    \    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n       \
    \     minPath.append(grid[i][j])\n            visited[i][j] = true\n         \
    \   dfs(grid: grid, i: i, j: j, k: k, visited: &visited, path: &path, paths: &paths)\n\
    \            visited[i][j] = false\n            minPath.removeLast()\n       \
    \ }\n    }\n    for path in paths {\n        var sum = 0\n        for i in 0..<path.count\
    \ {\n            sum += path[i]\n        }\n        if sum < minSum {\n      \
    \      minSum = sum\n            minPaths = [path]\n        } else if sum == minSum\
    \ {\n            minPaths.append(path)\n        }\n    }\n    for path in minPaths\
    \ {\n        if path < minPath {\n            minPath = path\n        }\n    }\n\
    \    return minPath", "    let n = grid.count\n    var dp = Array(repeating: Array(repeating:\
    \ Int.max, count: n), count: n)\n    var minPath = [Int]()\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            dfs(grid: grid, dp: &dp, i: i, j: j,\
    \ k: k, minPath: &minPath)\n        }\n    }\n    return minPath", '    return
    []', "    let n = grid.count\n    var minPath = [Int]()\n    var minSum = Int.max\n\
    \    var minPaths = [[Int]]()\n    var visited = [[Bool]](repeating: [Bool](repeating:\
    \ false, count: n), count: n)\n    var path = [Int]()\n    var sum = 0\n    for\
    \ i in 0..<n {\n        for j in 0..<n {\n            path.append(grid[i][j])\n\
    \            sum += grid[i][j]\n            visited[i][j] = true\n           \
    \ dfs(grid: grid, i: i, j: j, k: k, visited: &visited, path: &path, sum: &sum,\
    \ minPaths: &minPaths, minSum: &minSum)\n            path.removeLast()\n     \
    \       sum -= grid[i][j]\n            visited[i][j] = false\n        }\n    }\n\
    \    minPaths.sort()\n    return minPaths[0]", "    let n = grid.count\n    var\
    \ minPath = [Int]()\n    var minSum = Int.max\n    var minPaths = [[Int]]()\n\
    \    var visited = [[Bool]](repeating: [Bool](repeating: false, count: n), count:\
    \ n)\n    func dfs(_ i: Int, _ j: Int, _ sum: Int, _ path: [Int]) {\n        if\
    \ i < 0 || i >= n || j < 0 || j >= n || visited[i][j] {\n            return\n\
    \        }\n        visited[i][j] = true\n        var path = path\n        path.append(grid[i][j])\n\
    \        let sum = sum + grid[i][j]\n        if path.count == k {\n          \
    \  if sum < minSum {\n                minSum = sum\n                minPath =\
    \ path\n                minPaths = [path]\n            } else if sum == minSum\
    \ {\n                minPaths.append(path)\n            }\n        } else {\n\
    \            dfs(i - 1, j, sum, path)\n            dfs(i + 1, j, sum, path)\n\
    \            dfs(i, j - 1, sum, path)\n            dfs(i, j + 1, sum, path)\n\
    \        }\n        visited[i][j] = false\n    }\n    for i in 0..<n {\n     \
    \   for j in 0..<n {\n            dfs(i, j, 0, [])\n        }\n    }\n    return\
    \ minPath", "    let n = grid.count\n    var dp = Array(repeating: Array(repeating:\
    \ Int.max, count: n), count: n)\n    var visited = Array(repeating: Array(repeating:\
    \ false, count: n), count: n)\n    var path = [Int]()\n    var minPath = [Int]()\n\
    \    var minValue = Int.max\n    for i in 0..<n {\n        for j in 0..<n {\n\
    \            dfs(grid: grid, i: i, j: j, k: k, dp: &dp, visited: &visited, path:\
    \ &path, minPath: &minPath, minValue: &minValue)\n        }\n    }\n    return\
    \ minPath", "    let n = grid.count\n    var dp = [[Int]](repeating: [Int](repeating:\
    \ Int.max, count: n), count: n)\n    var visited = [[Bool]](repeating: [Bool](repeating:\
    \ false, count: n), count: n)\n    var queue = PriorityQueue<(Int, Int, Int)>(sort:\
    \ { $0.2 < $1.2 })\n    queue.push((0, 0, grid[0][0]))\n    dp[0][0] = grid[0][0]\n\
    \    while !queue.isEmpty {\n        let (i, j, value) = queue.pop()!\n      \
    \  if visited[i][j] {\n            continue\n        }\n        visited[i][j]\
    \ = true\n        if i > 0 && dp[i - 1][j] > value + grid[i - 1][j] {\n      \
    \      dp[i - 1][j] = value + grid[i - 1][j]\n            queue.push((i - 1, j,\
    \ dp[i - 1][j]))\n        }\n        if i < n - 1 && dp[i + 1][j] > value + grid[i\
    \ + 1][j] {\n            dp[i + 1][j] = value + grid[i + 1][j]\n            queue.push((i\
    \ + 1, j, dp[i + 1][j]))\n        }\n        if j > 0 && dp[i][j - 1] > value\
    \ + grid[i][j - 1] {\n            dp[i][j - 1] = value + grid[i][j - 1]\n    \
    \        queue.push((i, j - 1, dp[i][j - 1]))\n        }\n        if j < n - 1\
    \ && dp[i][j + 1] > value + grid[i][j + 1] {\n            dp[i][j + 1] = value\
    \ + grid[i][j + 1]\n            queue.push((i, j + 1, dp[i][j + 1]))\n       \
    \ }\n    }\n    var i = n - 1\n    var j = n - 1\n    var result = [Int", "  \
    \  let n = grid.count\n    var dp = Array(repeating: Array(repeating: Int.max,\
    \ count: n), count: n)\n    for i in 0..<n {\n        for j in 0..<n {\n     \
    \       dp[i][j] = min(dp[i][j], grid[i][j])\n        }\n    }\n    for _ in 0..<k\
    \ {\n        var next = Array(repeating: Array(repeating: Int.max, count: n),\
    \ count: n)\n        for i in 0..<n {\n            for j in 0..<n {\n        \
    \        if i > 0 {\n                    next[i][j] = min(next[i][j], dp[i - 1][j])\n\
    \                }\n                if j > 0 {\n                    next[i][j]\
    \ = min(next[i][j], dp[i][j - 1])\n                }\n                if i < n\
    \ - 1 {\n                    next[i][j] = min(next[i][j], dp[i + 1][j])\n    \
    \            }\n                if j < n - 1 {\n                    next[i][j]\
    \ = min(next[i][j], dp[i][j + 1])\n                }\n            }\n        }\n\
    \        dp = next\n    }\n    var result = [Int]()\n    for i in 0..<n {\n  \
    \      for j in 0..<n {\n            if dp[i][j] == grid[i][j] {\n           \
    \     result.append(grid[i][j])\n            }\n        }\n    }\n    return result",
  "    let n = grid.count\n    var dp = Array(repeating: Array(repeating: Int.max,\
    \ count: n), count: n)\n    var visited = Array(repeating: Array(repeating: false,\
    \ count: n), count: n)\n    var minPath = [Int]()\n    var minSum = Int.max\n\
    \    for i in 0..<n {\n        for j in 0..<n {\n            dfs(grid: grid, i:\
    \ i, j: j, k: k, dp: &dp, visited: &visited, path: [], sum: 0, minPath: &minPath,\
    \ minSum: &minSum)\n        }\n    }\n    return minPath", "    let n = grid.count\n\
    \    var minPath = [Int]()\n    var minSum = Int.max\n    var minPaths = [[Int]]()\n\
    \    var visited = [[Bool]](repeating: [Bool](repeating: false, count: n), count:\
    \ n)\n    var path = [Int]()\n    var sum = 0\n    var paths = [[Int]]()\n   \
    \ var dfs = { (i: Int, j: Int, k: Int) in\n        if i < 0 || i >= n || j < 0\
    \ || j >= n || visited[i][j] {\n            return\n        }\n        if k ==\
    \ 0 {\n            if sum < minSum {\n                minSum = sum\n         \
    \       minPaths = paths\n            }\n            return\n        }\n     \
    \   visited[i][j] = true\n        path.append(grid[i][j])\n        sum += grid[i][j]\n\
    \        paths.append(path)\n        dfs(i: i - 1, j: j, k: k - 1)\n        dfs(i:\
    \ i + 1, j: j, k: k - 1)\n        dfs(i: i, j: j - 1, k: k - 1)\n        dfs(i:\
    \ i, j: j + 1, k: k - 1)\n        visited[i][j] = false\n        path.removeLast()\n\
    \        sum -= grid[i][j]\n        paths.removeLast()\n    }\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            dfs(i: i, j: j, k: k)\n        }\n\
    \    }\n    for i in 0..<minPaths.count {\n        if minPaths[i] < minPath {\n\
    \            minPath = minPaths[i]\n        }\n    }\n    return minPath", " \
    \   let n = grid.count\n    var dp = Array(repeating: Array(repeating: Array(repeating:\
    \ Int.max, count: k + 1), count: n), count: n)\n    var res = [Int]()\n    for\
    \ i in 0..<n {\n        for j in 0..<n {\n            dp[i][j][1] = grid[i][j]\n\
    \        }\n    }\n    for l in 2...k {\n        for i in 0..<n {\n          \
    \  for j in 0..<n {\n                if i > 0 {\n                    dp[i][j][l]\
    \ = min(dp[i][j][l], dp[i - 1][j][l - 1])\n                }\n               \
    \ if i < n - 1 {\n                    dp[i][j][l] = min(dp[i][j][l], dp[i + 1][j][l\
    \ - 1])\n                }\n                if j > 0 {\n                    dp[i][j][l]\
    \ = min(dp[i][j][l], dp[i][j - 1][l - 1])\n                }\n               \
    \ if j < n - 1 {\n                    dp[i][j][l] = min(dp[i][j][l], dp[i][j +\
    \ 1][l - 1])\n                }\n            }\n        }\n    }\n    var min\
    \ = Int.max\n    for i in 0..<n {\n        for j in 0..<n {\n            if dp[i][j][k]\
    \ < min {\n                min = dp[i][j][k]\n            }\n        }\n    }\n\
    \    res.append(min)\n    var i = 0, j = 0\n    for l in 2...k {\n        if i\
    \ > 0 && dp[i - 1][j][l - 1] == min {\n            i -= 1\n        } else if i\
    \ < n - 1 && dp[i + 1][j][l - 1] == min {\n            i += 1\n        } else\
    \ if j > 0 && dp[i][j - 1][l - 1] == min {\n            j -= 1\n        } else\
    \ if j < n", "    let n = grid.count\n    var dp = Array(repeating: Array(repeating:\
    \ Int.max, count: n), count: n)\n    var prev = Array(repeating: Array(repeating:\
    \ Int.max, count: n), count: n)\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            dp[i][j] = grid[i][j]\n            prev[i][j] = -1\n        }\n\
    \    }\n    for _ in 0..<k {\n        var next = Array(repeating: Array(repeating:\
    \ Int.max, count: n), count: n)\n        var nextPrev = Array(repeating: Array(repeating:\
    \ Int.max, count: n), count: n)\n        for i in 0..<n {\n            for j in\
    \ 0..<n {\n                if i > 0 {\n                    if dp[i][j] > dp[i\
    \ - 1][j] {\n                        next[i][j] = dp[i - 1][j]\n             \
    \           nextPrev[i][j] = i - 1\n                    } else if dp[i][j] ==\
    \ dp[i - 1][j] {\n                        next[i][j] = dp[i][j]\n            \
    \            nextPrev[i][j] = min(nextPrev[i][j], i - 1)\n                   \
    \ } else {\n                        next[i][j] = dp[i][j]\n                  \
    \      nextPrev[i][j] = nextPrev[i][j]\n                    }\n              \
    \  }\n                if j > 0 {\n                    if dp[i][j] > dp[i][j -\
    \ 1] {\n                        next[i][j] = dp[i][j - 1]\n                  \
    \      nextPrev[i][j] = n * i + j - 1\n                    } else if dp[i][j]\
    \ == dp[i][j - 1] {\n                        next[i][j] = dp[i][j]\n         \
    \               nextPrev[i][j] = min(nextPrev[i][j], n * i + j - 1)\n        \
    \            } else {\n                        next[i][j] = dp[", "    let n =\
    \ grid.count\n    var dp = [[[Int]]](repeating: [[Int]](repeating: [Int](repeating:\
    \ Int.max, count: n), count: n), count: k + 1)\n    for i in 0..<n {\n       \
    \ for j in 0..<n {\n            dp[0][i][j] = grid[i][j]\n        }\n    }\n \
    \   for i in 1...k {\n        for j in 0..<n {\n            for l in 0..<n {\n\
    \                if j > 0 {\n                    dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i - 1][j - 1][l])\n                }\n                if j < n - 1 {\n  \
    \                  dp[i][j][l] = min(dp[i][j][l], dp[i - 1][j + 1][l])\n     \
    \           }\n                if l > 0 {\n                    dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1])\n                }\n                if l < n - 1 {\n  \
    \                  dp[i][j][l] = min(dp[i][j][l], dp[i - 1][j][l + 1])\n     \
    \           }\n            }\n        }\n    }\n    var res = [Int](repeating:\
    \ Int.max, count: k)\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if dp[k][i][j] < res[k - 1] {\n                res[k - 1] = dp[k][i][j]\n\
    \            }\n        }\n    }\n    return res", "    var result = [Int]()\n\
    \    return result", "    let n = grid.count\n    var result = [Int]()\n    var\
    \ minSum = Int.max\n    var minPath = [Int]()\n    var visited = [[Bool]](repeating:\
    \ [Bool](repeating: false, count: n), count: n)\n    var path = [Int]()\n    var\
    \ sum = 0\n    var row = 0\n    var col = 0\n    while row < n {\n        while\
    \ col < n {\n            dfs(grid: grid, row: row, col: col, k: k, path: &path,\
    \ sum: &sum, visited: &visited, minSum: &minSum, minPath: &minPath)\n        \
    \    col += 1\n        }\n        row += 1\n    }\n    return minPath", "    let\
    \ n = grid.count\n    var minPath = [Int]()\n    var minSum = Int.max\n    var\
    \ visited = Set<Int>()\n    var path = [Int]()\n    var sum = 0\n    dfs(grid:\
    \ grid, n: n, i: 0, j: 0, k: k, visited: &visited, path: &path, sum: &sum, minPath:\
    \ &minPath, minSum: &minSum)\n    return minPath", "    let n = grid.count\n \
    \   var dp = Array(repeating: Array(repeating: Int.max, count: n), count: n)\n\
    \    var prev = Array(repeating: Array(repeating: Int.max, count: n), count: n)\n\
    \    for i in 0..<n {\n        for j in 0..<n {\n            if i == 0 && j ==\
    \ 0 {\n                dp[i][j] = grid[i][j]\n                prev[i][j] = -1\n\
    \            } else if i == 0 {\n                dp[i][j] = dp[i][j - 1] + grid[i][j]\n\
    \                prev[i][j] = j - 1\n            } else if j == 0 {\n        \
    \        dp[i][j] = dp[i - 1][j] + grid[i][j]\n                prev[i][j] = i\
    \ - 1\n            } else {\n                if dp[i - 1][j] < dp[i][j - 1] {\n\
    \                    dp[i][j] = dp[i - 1][j] + grid[i][j]\n                  \
    \  prev[i][j] = i - 1\n                } else {\n                    dp[i][j]\
    \ = dp[i][j - 1] + grid[i][j]\n                    prev[i][j] = j - 1\n      \
    \          }\n            }\n        }\n    }\n    var res = [Int]()\n    var\
    \ i = n - 1\n    var j = n - 1\n    while k > 0 {\n        res.append(grid[i][j])\n\
    \        if prev[i][j] == -1 {\n            break\n        } else if prev[i][j]\
    \ < n {\n            i = prev[i][j]\n        } else {\n            j = prev[i][j]\
    \ - n\n        }\n        k -= 1\n    }\n    return res", "    let n = grid.count\n\
    \    var visited = [[Bool]](repeating: [Bool](repeating: false, count: n), count:\
    \ n)\n    var minPath = [Int]()\n    var minSum = Int.max\n    var minPaths =\
    \ [[Int]]()\n    var paths = [[Int]]()\n    var path = [Int]()\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            minPath.append(grid[i][j])\n      \
    \      visited[i][j] = true\n            dfs(grid: grid, i: i, j: j, visited:\
    \ &visited, path: &path, paths: &paths, k: k)\n            visited[i][j] = false\n\
    \            minPath.removeLast()\n        }\n    }\n    for path in paths {\n\
    \        var sum = 0\n        for i in 0..<k {\n            sum += path[i]\n \
    \       }\n        if sum < minSum {\n            minSum = sum\n            minPaths\
    \ = [path]\n        } else if sum == minSum {\n            minPaths.append(path)\n\
    \        }\n    }\n    var minPath = minPaths[0]\n    for i in 1..<minPaths.count\
    \ {\n        if minPaths[i] < minPath {\n            minPath = minPaths[i]\n \
    \       }\n    }\n    return minPath", '    return []', "    var result = [Int]()\n\
    \    var visited = [[Bool]](repeating: [Bool](repeating: false, count: grid.count),\
    \ count: grid.count)\n    var minPath = [Int]()\n    var minSum = Int.max\n  \
    \  for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n         \
    \   var path = [Int]()\n            var sum = 0\n            dfs(grid: grid, i:\
    \ i, j: j, k: k, visited: &visited, path: &path, sum: &sum)\n            if sum\
    \ < minSum {\n                minSum = sum\n                minPath = path\n \
    \           }\n        }\n    }\n    return minPath", "    let n = grid.count\n\
    \    var result = [Int]()\n    var visited = [[Bool]](repeating: [Bool](repeating:\
    \ false, count: n), count: n)\n    var minPath = [Int]()\n    var minSum = Int.max\n\
    \    for i in 0..<n {\n        for j in 0..<n {\n            var path = [Int]()\n\
    \            var sum = 0\n            dfs(grid: grid, i: i, j: j, k: k, path:\
    \ &path, sum: &sum, visited: &visited)\n            if sum < minSum {\n      \
    \          minSum = sum\n                minPath = path\n            }\n     \
    \   }\n    }\n    return minPath", "    let n = grid.count\n    var minPath =\
    \ [Int]()\n    var minSum = Int.max\n    var minPaths = [[Int]]()\n    var visited\
    \ = [[Bool]](repeating: [Bool](repeating: false, count: n), count: n)\n    var\
    \ path = [Int]()\n    var sum = 0\n    var paths = [[Int]]()\n    var dfs = {\
    \ (i: Int, j: Int, k: Int) in\n        if k == 0 {\n            if sum < minSum\
    \ {\n                minSum = sum\n                minPaths = paths\n        \
    \    }\n            return\n        }\n        if i < 0 || i >= n || j < 0 ||\
    \ j >= n || visited[i][j] {\n            return\n        }\n        visited[i][j]\
    \ = true\n        path.append(grid[i][j])\n        sum += grid[i][j]\n       \
    \ paths.append(path)\n        dfs(i + 1, j, k - 1)\n        dfs(i - 1, j, k -\
    \ 1)\n        dfs(i, j + 1, k - 1)\n        dfs(i, j - 1, k - 1)\n        visited[i][j]\
    \ = false\n        path.removeLast()\n        sum -= grid[i][j]\n        paths.removeLast()\n\
    \    }\n    for i in 0..<n {\n        for j in 0..<n {\n            dfs(i, j,\
    \ k)\n        }\n    }\n    for path in minPaths {\n        if path.count < minPath.count\
    \ {\n            minPath = path\n        } else if path.count == minPath.count\
    \ {\n            for i in 0..<path.count {\n                if path[i] < minPath[i]\
    \ {\n                    minPath = path\n                    break\n         \
    \       } else if path[i] > minPath[i] {\n                    break\n        \
    \        }\n            }\n        }\n    }\n    return minPath", '    return
    []', "    let n = grid.count\n    var dp = Array(repeating: Array(repeating: Int.max,\
    \ count: n), count: n)\n    var visited = Array(repeating: Array(repeating: false,\
    \ count: n), count: n)\n    var queue = [(Int, Int, Int)]()\n    queue.append((0,\
    \ 0, 0))\n    visited[0][0] = true\n    dp[0][0] = grid[0][0]\n    var minPath\
    \ = [Int]()\n    while !queue.isEmpty {\n        let (i, j, path) = queue.removeFirst()\n\
    \        if path > k {\n            continue\n        }\n        if path == k\
    \ {\n            if minPath.isEmpty || dp[i][j] < dp[minPath[0]][minPath[1]] {\n\
    \                minPath = [i, j]\n            }\n            continue\n     \
    \   }\n        if i > 0 && !visited[i - 1][j] {\n            visited[i - 1][j]\
    \ = true\n            dp[i - 1][j] = dp[i][j] + grid[i - 1][j]\n            queue.append((i\
    \ - 1, j, path + 1))\n        }\n        if i < n - 1 && !visited[i + 1][j] {\n\
    \            visited[i + 1][j] = true\n            dp[i + 1][j] = dp[i][j] + grid[i\
    \ + 1][j]\n            queue.append((i + 1, j, path + 1))\n        }\n       \
    \ if j > 0 && !visited[i][j - 1] {\n            visited[i][j - 1] = true\n   \
    \         dp[i][j - 1] = dp[i][j] + grid[i][j - 1]\n            queue.append((i,\
    \ j - 1, path + 1))\n        }\n        if j < n - 1 && !visited[i][j + 1] {\n\
    \            visited[i][j + 1] = true\n            dp[i][j + 1] = dp[i][j] + grid[i][j\
    \ + 1]\n", "    let n = grid.count\n    var dp = Array(repeating: Array(repeating:\
    \ Int.max, count: n), count: n)\n    var visited = Array(repeating: Array(repeating:\
    \ false, count: n), count: n)\n    var minPath = [Int]()\n    var minSum = Int.max\n\
    \    for i in 0..<n {\n        for j in 0..<n {\n            dfs(grid: grid, i:\
    \ i, j: j, k: k, dp: &dp, visited: &visited, path: [], sum: 0, minPath: &minPath,\
    \ minSum: &minSum)\n        }\n    }\n    return minPath", "    let n = grid.count\n\
    \    var minPath = [Int]()\n    var minSum = Int.max\n    var minPaths = [[Int]]()\n\
    \    var visited = [[Bool]](repeating: [Bool](repeating: false, count: n), count:\
    \ n)\n    var path = [Int]()\n    var sum = 0\n    var paths = [[Int]]()\n   \
    \ var dfs = { (i: Int, j: Int, k: Int) in\n        if i < 0 || i >= n || j < 0\
    \ || j >= n || visited[i][j] {\n            return\n        }\n        if k ==\
    \ 0 {\n            if sum < minSum {\n                minSum = sum\n         \
    \       minPaths = paths\n            }\n            return\n        }\n     \
    \   visited[i][j] = true\n        path.append(grid[i][j])\n        sum += grid[i][j]\n\
    \        paths.append(path)\n        dfs(i: i + 1, j: j, k: k - 1)\n        dfs(i:\
    \ i - 1, j: j, k: k - 1)\n        dfs(i: i, j: j + 1, k: k - 1)\n        dfs(i:\
    \ i, j: j - 1, k: k - 1)\n        visited[i][j] = false\n        path.removeLast()\n\
    \        sum -= grid[i][j]\n        paths.removeLast()\n    }\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            dfs(i: i, j: j, k: k)\n        }\n\
    \    }\n    for path in minPaths {\n        if path.count < minPath.count {\n\
    \            minPath = path\n        } else if path.count == minPath.count {\n\
    \            for i in 0..<path.count {\n                if path[i] < minPath[i]\
    \ {\n                    minPath = path\n                    break\n         \
    \       } else if path[i] > minPath[i] {\n                    break\n        \
    \        }\n            }\n        }\n    }\n    return minPath", "    let n =\
    \ grid.count\n    var dp = Array(repeating: Array(repeating: Int.max, count: n),\
    \ count: n)\n    var visited = Array(repeating: Array(repeating: false, count:\
    \ n), count: n)\n    var queue = [(Int, Int, Int)]()\n    queue.append((0, 0,\
    \ 0))\n    dp[0][0] = grid[0][0]\n    visited[0][0] = true\n    while !queue.isEmpty\
    \ {\n        let (x, y, d) = queue.removeFirst()\n        if d == k {\n      \
    \      break\n        }\n        for i in 0..<4 {\n            let nx = x + dx[i]\n\
    \            let ny = y + dy[i]\n            if nx >= 0 && nx < n && ny >= 0 &&\
    \ ny < n && !visited[nx][ny] {\n                visited[nx][ny] = true\n     \
    \           dp[nx][ny] = dp[x][y] + grid[nx][ny]\n                queue.append((nx,\
    \ ny, d + 1))\n            }\n        }\n    }\n    var res = [Int]()\n    var\
    \ x = 0, y = 0\n    for _ in 0..<k {\n        res.append(grid[x][y])\n       \
    \ var minDp = Int.max\n        var minX = -1, minY = -1\n        for i in 0..<4\
    \ {\n            let nx = x + dx[i]\n            let ny = y + dy[i]\n        \
    \    if nx >= 0 && nx < n && ny >= 0 && ny < n && dp[nx][ny] < minDp {\n     \
    \           minDp = dp[nx][ny]\n                minX = nx\n                minY\
    \ = ny\n            }\n        }\n        x = minX\n        y = minY\n    }\n\
    \    return res", '    return []', '    return []', "    let n = grid.count\n\
    \    var minPath = [Int]()\n    var minSum = Int.max\n    var minPaths = [[Int]]()\n\
    \    for i in 0..<n {\n        for j in 0..<n {\n            let path = minPath(grid:\
    \ grid, k: k, i: i, j: j, sum: 0, path: [])\n            if path.count == k {\n\
    \                let sum = path.reduce(0, +)\n                if sum < minSum\
    \ {\n                    minSum = sum\n                    minPaths = [path]\n\
    \                } else if sum == minSum {\n                    minPaths.append(path)\n\
    \                }\n            }\n        }\n    }\n    minPaths.sort { (a, b)\
    \ -> Bool in\n        for i in 0..<a.count {\n            if a[i] < b[i] {\n \
    \               return true\n            } else if a[i] > b[i] {\n           \
    \     return false\n            }\n        }\n        return false\n    }\n  \
    \  return minPaths[0]", "    let n = grid.count\n    var dp = Array(repeating:\
    \ Array(repeating: Array(repeating: Int.max, count: n), count: n), count: k +\
    \ 1)\n    for i in 0..<n {\n        for j in 0..<n {\n            dp[1][i][j]\
    \ = grid[i][j]\n        }\n    }\n    for l in 2...k {\n        for i in 0..<n\
    \ {\n            for j in 0..<n {\n                if i > 0 {\n              \
    \      dp[l][i][j] = min(dp[l][i][j], dp[l - 1][i - 1][j])\n                }\n\
    \                if i < n - 1 {\n                    dp[l][i][j] = min(dp[l][i][j],\
    \ dp[l - 1][i + 1][j])\n                }\n                if j > 0 {\n      \
    \              dp[l][i][j] = min(dp[l][i][j], dp[l - 1][i][j - 1])\n         \
    \       }\n                if j < n - 1 {\n                    dp[l][i][j] = min(dp[l][i][j],\
    \ dp[l - 1][i][j + 1])\n                }\n                dp[l][i][j] += grid[i][j]\n\
    \            }\n        }\n    }\n    var res = Int.max\n    var x = 0\n    var\
    \ y = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if dp[k][i][j]\
    \ < res {\n                res = dp[k][i][j]\n                x = i\n        \
    \        y = j\n            }\n        }\n    }\n    var ans = [Int]()\n    ans.append(grid[x][y])\n\
    \    var cur = res - grid[x][y]\n    for _ in 1..<k {\n        if x > 0 && dp[k\
    \ - 1][x - 1][y] == cur {\n            ans.append(grid[x - 1][y])\n          \
    \  cur -= grid[x - 1][y]\n", "    let n = grid.count\n    var minPath = [Int]()\n\
    \    var minSum = Int.max\n    var minPaths = [[Int]]()\n    var visited = [[Bool]](repeating:\
    \ [Bool](repeating: false, count: n), count: n)\n    var path = [Int]()\n    var\
    \ sum = 0\n    var paths = [[Int]]()\n    var dfs = { (i: Int, j: Int, k: Int)\
    \ in\n        if i < 0 || i >= n || j < 0 || j >= n || visited[i][j] {\n     \
    \       return\n        }\n        if k == 0 {\n            if sum < minSum {\n\
    \                minSum = sum\n                minPaths = paths\n            }\n\
    \            return\n        }\n        visited[i][j] = true\n        path.append(grid[i][j])\n\
    \        sum += grid[i][j]\n        paths.append(path)\n        dfs(i: i + 1,\
    \ j: j, k: k - 1)\n        dfs(i: i - 1, j: j, k: k - 1)\n        dfs(i: i, j:\
    \ j + 1, k: k - 1)\n        dfs(i: i, j: j - 1, k: k - 1)\n        visited[i][j]\
    \ = false\n        path.removeLast()\n        sum -= grid[i][j]\n        paths.removeLast()\n\
    \    }\n    for i in 0..<n {\n        for j in 0..<n {\n            dfs(i: i,\
    \ j: j, k: k)\n        }\n    }\n    for path in minPaths {\n        if path.count\
    \ < minPath.count {\n            minPath = path\n        } else if path.count\
    \ == minPath.count {\n            for i in 0..<path.count {\n                if\
    \ path[i] < minPath[i] {\n                    minPath = path\n               \
    \     break\n                } else if path[i] > minPath[i] {\n              \
    \      break\n                }\n            }\n        }\n    }\n    return minPath",
  "    let n = grid.count\n    guard n >= 2 && k >= 1 && k <= n * n else {\n     \
    \   return []\n    }\n    let m = grid[0].count\n    guard m == n else {\n   \
    \     return []\n    }\n    var dp = [[[Int]]](repeating: [[Int]](repeating: [Int](repeating:\
    \ Int.max, count: n * m + 1), count: n), count: n)\n    for i in 0..<n {\n   \
    \     for j in 0..<m {\n            dp[i][j][1] = grid[i][j]\n        }\n    }\n\
    \    for l in 2...k {\n        for i in 0..<n {\n            for j in 0..<m {\n\
    \                if i > 0 {\n                    dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1])\n                }\n                if i < n - 1 {\n  \
    \                  dp[i][j][l] = min(dp[i][j][l], dp[i + 1][j][l - 1])\n     \
    \           }\n                if j > 0 {\n                    dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1])\n                }\n                if j < m - 1 {\n  \
    \                  dp[i][j][l] = min(dp[i][j][l], dp[i][j + 1][l - 1])\n     \
    \           }\n            }\n        }\n    }\n    var result = [Int]()\n   \
    \ var i = 0, j = 0\n    for l in 1...k {\n        result.append(grid[i][j])\n\
    \        if i > 0 && dp[i - 1][j][k - l + 1] < dp[i][j][k - l + 1] {\n       \
    \     i -= 1\n        } else if i < n - 1 && dp[i + 1][j][k - l + 1] < dp[i][j][k\
    \ - l + 1] {\n            i += 1\n        } else if j > 0 && dp[i", "    let n\
    \ = grid.count\n    var visited = Array(repeating: Array(repeating: false, count:\
    \ n), count: n)\n    var minPath = Array(repeating: Array(repeating: Int.max,\
    \ count: n), count: n)\n    var minPathValues = [Int]()\n    var minPathSum =\
    \ Int.max\n    for i in 0..<n {\n        for j in 0..<n {\n            minPath[i][j]\
    \ = grid[i][j]\n            if minPath[i][j] < minPathSum {\n                minPathSum\
    \ = minPath[i][j]\n                minPathValues = [grid[i][j]]\n            }\n\
    \        }\n    }\n    var queue = [(Int, Int)]()\n    for i in 0..<n {\n    \
    \    for j in 0..<n {\n            if minPath[i][j] == minPathSum {\n        \
    \        queue.append((i, j))\n                visited[i][j] = true\n        \
    \    }\n        }\n    }\n    var step = 1\n    while step < k {\n        var\
    \ newQueue = [(Int, Int)]()\n        for (i, j) in queue {\n            if i >\
    \ 0 && !visited[i - 1][j] {\n                visited[i - 1][j] = true\n      \
    \          newQueue.append((i - 1, j))\n                if minPath[i - 1][j] >\
    \ minPath[i][j] + grid[i - 1][j] {\n                    minPath[i - 1][j] = minPath[i][j]\
    \ + grid[i - 1][j]\n                    if minPath[i - 1][j] < minPathSum {\n\
    \                        minPathSum = minPath[i - 1][j]\n                    \
    \    minPathValues = [grid[i - 1][j]]\n                    } else if minPath[i\
    \ - 1][j] == minPathSum {\n                        minPathValues.append(grid[i\
    \ - 1][j])\n                    }\n                }\n            }\n        \
    \    if i < n - 1 && !visited[i + 1][j] {\n                visited[i + 1][j] =\
    \ true\n                newQueue.append((i +", "    let n = grid.count\n    var\
    \ dp = Array(repeating: Array(repeating: Array(repeating: Int.max, count: n),\
    \ count: n), count: k + 1)\n    for i in 0..<n {\n        for j in 0..<n {\n \
    \           dp[1][i][j] = grid[i][j]\n        }\n    }\n    for l in 2...k {\n\
    \        for i in 0..<n {\n            for j in 0..<n {\n                for di\
    \ in -1...1 {\n                    for dj in -1...1 {\n                      \
    \  if abs(di) + abs(dj) == 1 {\n                            let ni = i + di\n\
    \                            let nj = j + dj\n                            if ni\
    \ >= 0 && ni < n && nj >= 0 && nj < n {\n                                dp[l][i][j]\
    \ = min(dp[l][i][j], dp[l - 1][ni][nj])\n                            }\n     \
    \                   }\n                    }\n                }\n            }\n\
    \        }\n    }\n    var res = [Int]()\n    var i = 0\n    var j = 0\n    for\
    \ l in 1...k {\n        res.append(dp[l][i][j])\n        var minVal = Int.max\n\
    \        var ni = 0\n        var nj = 0\n        for di in -1...1 {\n        \
    \    for dj in -1...1 {\n                if abs(di) + abs(dj) == 1 {\n       \
    \             let ni = i + di\n                    let nj = j + dj\n         \
    \           if ni >= 0 && ni < n && nj >= 0 && nj < n {\n                    \
    \    if dp[l][ni][nj] < minVal {\n                            minVal = dp[l][ni][nj]\n\
    \                            ni = ni\n                            nj = nj\n  \
    \                      }\n                    }\n                }\n         \
    \   }\n        }\n        i = ni\n        j = nj\n    }\n    return res", "  \
    \  let n = grid.count\n    var dp = Array(repeating: Array(repeating: Array(repeating:\
    \ Int.max, count: n), count: n), count: k + 1)\n    var path = Array(repeating:\
    \ Array(repeating: Array(repeating: -1, count: n), count: n), count: k + 1)\n\
    \    for i in 0..<n {\n        for j in 0..<n {\n            dp[1][i][j] = grid[i][j]\n\
    \            path[1][i][j] = grid[i][j]\n        }\n    }\n    for i in 2...k\
    \ {\n        for j in 0..<n {\n            for l in 0..<n {\n                for\
    \ m in 0..<n {\n                    for o in 0..<n {\n                       \
    \ if abs(j - m) + abs(l - o) == 1 {\n                            if dp[i - 1][m][o]\
    \ < dp[i][j][l] {\n                                dp[i][j][l] = dp[i - 1][m][o]\n\
    \                                path[i][j][l] = grid[j][l]\n                \
    \            }\n                        }\n                    }\n           \
    \     }\n            }\n        }\n    }\n    var min = Int.max\n    var minI\
    \ = -1\n    var minJ = -1\n    for i in 0..<n {\n        for j in 0..<n {\n  \
    \          if dp[k][i][j] < min {\n                min = dp[k][i][j]\n       \
    \         minI = i\n                minJ = j\n            }\n        }\n    }\n\
    \    var result = [Int]()\n    var i = k\n    var j = minI\n    var l = minJ\n\
    \    while i > 0 {\n        result.append(path[i][j][l])\n        for m in 0..<n\
    \ {\n            for o in 0..<n {\n                if abs(j - m) + abs(l - o)\
    \ == 1 && dp[i - 1][m][o] == dp[i][j][l] - grid[j][l", "    let n = grid.count\n\
    \    var dp = Array(repeating: Array(repeating: Array(repeating: Int.max, count:\
    \ n), count: n), count: k + 1)\n    for i in 0..<n {\n        for j in 0..<n {\n\
    \            dp[1][i][j] = grid[i][j]\n        }\n    }\n    for i in 2...k {\n\
    \        for j in 0..<n {\n            for l in 0..<n {\n                for m\
    \ in 0..<n {\n                    for o in 0..<n {\n                        if\
    \ abs(j - m) + abs(l - o) == 1 {\n                            dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i - 1][m][o] + grid[j][l])\n                        }\n                 \
    \   }\n                }\n            }\n        }\n    }\n    var res = Int.max\n\
    \    var x = 0\n    var y = 0\n    for i in 0..<n {\n        for j in 0..<n {\n\
    \            if dp[k][i][j] < res {\n                res = dp[k][i][j]\n     \
    \           x = i\n                y = j\n            }\n        }\n    }\n  \
    \  var ans = [Int]()\n    ans.append(grid[x][y])\n    for i in stride(from: k\
    \ - 1, through: 1, by: -1) {\n        for j in 0..<n {\n            for l in 0..<n\
    \ {\n                if abs(x - j) + abs(y - l) == 1 && dp[i][j][l] + grid[x][y]\
    \ == dp[i + 1][x][y] {\n                    ans.append(grid[j][l])\n         \
    \           x = j\n                    y = l\n                    break\n    \
    \            }\n            }\n        }\n    }\n    return ans", '    return
    []', "    let n = grid.count\n    var dp = Array(repeating: Array(repeating: Array(repeating:\
    \ Int.max, count: n), count: n), count: k + 1)\n    for i in 0..<n {\n       \
    \ for j in 0..<n {\n            dp[1][i][j] = grid[i][j]\n        }\n    }\n \
    \   for i in 2...k {\n        for x in 0..<n {\n            for y in 0..<n {\n\
    \                for dx in -1...1 {\n                    for dy in -1...1 {\n\
    \                        if dx == 0 && dy == 0 {\n                           \
    \ continue\n                        }\n                        let nx = x + dx\n\
    \                        let ny = y + dy\n                        if nx < 0 ||\
    \ nx >= n || ny < 0 || ny >= n {\n                            continue\n     \
    \                   }\n                        dp[i][x][y] = min(dp[i][x][y],\
    \ dp[i - 1][nx][ny])\n                    }\n                }\n            }\n\
    \        }\n    }\n    var result = [Int]()\n    var x = 0\n    var y = 0\n  \
    \  for i in 1...k {\n        result.append(dp[i][x][y])\n        var nx = -1\n\
    \        var ny = -1\n        for dx in -1...1 {\n            for dy in -1...1\
    \ {\n                if dx == 0 && dy == 0 {\n                    continue\n \
    \               }\n                let tx = x + dx\n                let ty = y\
    \ + dy\n                if tx < 0 || tx >= n || ty < 0 || ty >= n {\n        \
    \            continue\n                }\n                if nx == -1 || dp[i][tx][ty]\
    \ < dp[i][nx][ny] {\n                    nx = tx\n                    ny = ty\n\
    \                }\n            }\n        }\n        x = nx\n        y = ny\n\
    \    }\n    return result", "    let n = grid.count\n    var minPath = [Int]()\n\
    \    var minSum = Int.max\n    var minPaths = [[Int]]()\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            var path = [Int]()\n            var sum\
    \ = 0\n            var paths = [[Int]]()\n            dfs(grid: grid, i: i, j:\
    \ j, k: k, path: &path, sum: &sum, paths: &paths)\n            if sum < minSum\
    \ {\n                minSum = sum\n                minPath = path\n          \
    \      minPaths = paths\n            } else if sum == minSum {\n             \
    \   if path < minPath {\n                    minPath = path\n                \
    \    minPaths = paths\n                } else if path == minPath {\n         \
    \           minPaths.append(contentsOf: paths)\n                }\n          \
    \  }\n        }\n    }\n    return minPath", "    let n = grid.count\n    var\
    \ dp = Array(repeating: Array(repeating: Int.max, count: n), count: n)\n    var\
    \ prev = Array(repeating: Array(repeating: 0, count: n), count: n)\n    var q\
    \ = [(0, 0, 0)]\n    while !q.isEmpty {\n        let (x, y, d) = q.removeFirst()\n\
    \        if d > k {\n            break\n        }\n        if dp[x][y] > d {\n\
    \            dp[x][y] = d\n            prev[x][y] = 0\n        }\n        if x\
    \ > 0 {\n            let d1 = d + grid[x - 1][y]\n            if d1 < dp[x - 1][y]\
    \ {\n                dp[x - 1][y] = d1\n                prev[x - 1][y] = 1\n \
    \               q.append((x - 1, y, d1))\n            }\n        }\n        if\
    \ x < n - 1 {\n            let d1 = d + grid[x + 1][y]\n            if d1 < dp[x\
    \ + 1][y] {\n                dp[x + 1][y] = d1\n                prev[x + 1][y]\
    \ = 2\n                q.append((x + 1, y, d1))\n            }\n        }\n  \
    \      if y > 0 {\n            let d1 = d + grid[x][y - 1]\n            if d1\
    \ < dp[x][y - 1] {\n                dp[x][y - 1] = d1\n                prev[x][y\
    \ - 1] = 3\n                q.append((x, y - 1, d1))\n            }\n        }\n\
    \        if y < n - 1 {\n            let d1 = d + grid[x][y + 1]\n           \
    \ if d1 < dp[x][y + 1] {\n                dp[x][y + 1] = d1\n                prev[x][y\
    \ + 1] = 4\n                q.append((x, y + 1, d1))\n            }\n        }\n\
    \    }\n    var x = 0\n    var y = 0\n", "    let n = grid.count\n    var minPath\
    \ = [Int]()\n    var minSum = Int.max\n    var minPaths = [[Int]]()\n    for i\
    \ in 0..<n {\n        for j in 0..<n {\n            var path = [Int]()\n     \
    \       var sum = 0\n            var paths = [[Int]]()\n            dfs(grid:\
    \ grid, i: i, j: j, k: k, path: &path, sum: &sum, paths: &paths)\n           \
    \ if sum < minSum {\n                minSum = sum\n                minPath = path\n\
    \                minPaths = paths\n            } else if sum == minSum {\n   \
    \             for p in paths {\n                    if p < minPath {\n       \
    \                 minPath = p\n                        minPaths = [p]\n      \
    \              } else if p == minPath {\n                        minPaths.append(p)\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return minPath", "    let n = grid.count\n    var dp = Array(repeating: Array(repeating:\
    \ Int.max, count: n), count: n)\n    var pq = PriorityQueue<(Int, Int, Int)>(ascending:\
    \ true) { $0.0 < $1.0 }\n    pq.push((0, 0, 0))\n    while !pq.isEmpty {\n   \
    \     let (cost, i, j) = pq.pop()!\n        if i == n - 1 && j == n - 1 {\n  \
    \          var res = [Int]()\n            var i = n - 1, j = n - 1\n         \
    \   for _ in 0..<k {\n                res.append(grid[i][j])\n               \
    \ if i > 0 && dp[i - 1][j] < dp[i][j - 1] {\n                    i -= 1\n    \
    \            } else {\n                    j -= 1\n                }\n       \
    \     }\n            return res\n        }\n        if dp[i][j] <= cost {\n  \
    \          continue\n        }\n        dp[i][j] = cost\n        if i > 0 {\n\
    \            pq.push((cost + grid[i - 1][j], i - 1, j))\n        }\n        if\
    \ j > 0 {\n            pq.push((cost + grid[i][j - 1], i, j - 1))\n        }\n\
    \    }\n    return []", "    let n = grid.count\n    var minPath = [Int]()\n \
    \   var minSum = Int.max\n    var minPaths = [[Int]]()\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            var path = [Int]()\n            var sum\
    \ = 0\n            var paths = [[Int]]()\n            dfs(grid: grid, i: i, j:\
    \ j, k: k, path: &path, sum: &sum, paths: &paths)\n            if sum < minSum\
    \ {\n                minSum = sum\n                minPath = path\n          \
    \      minPaths = paths\n            } else if sum == minSum {\n             \
    \   if path < minPath {\n                    minPath = path\n                \
    \    minPaths = paths\n                } else if path == minPath {\n         \
    \           minPaths.append(contentsOf: paths)\n                }\n          \
    \  }\n        }\n    }\n    return minPath", "    var result = [Int]()\n    return\
    \ result", "    var result = [Int]()\n    let n = grid.count\n    var min = Int.max\n\
    \    var minPath = [Int]()\n    for i in 0..<n {\n        for j in 0..<n {\n \
    \           var path = [Int]()\n            var visited = Set<Int>()\n       \
    \     var queue = [(i, j)]\n            while !queue.isEmpty {\n             \
    \   let (x, y) = queue.removeFirst()\n                if visited.contains(x *\
    \ n + y) {\n                    continue\n                }\n                visited.insert(x\
    \ * n + y)\n                path.append(grid[x][y])\n                if path.count\
    \ == k {\n                    if path.lexicographicallyPrecedes(minPath) {\n \
    \                       minPath = path\n                    }\n              \
    \      break\n                }\n                if x > 0 {\n                \
    \    queue.append((x - 1, y))\n                }\n                if x < n - 1\
    \ {\n                    queue.append((x + 1, y))\n                }\n       \
    \         if y > 0 {\n                    queue.append((x, y - 1))\n         \
    \       }\n                if y < n - 1 {\n                    queue.append((x,\
    \ y + 1))\n                }\n            }\n        }\n    }\n    return minPath",
  "    // TODO\n    return []", "    // TODO:\n    return []", "    let n = grid.count\n\
    \    var minPath = [Int]()\n    var minSum = Int.max\n    var minPaths = [[Int]]()\n\
    \    for r in 0..<n {\n        for c in 0..<n {\n            var path = [Int]()\n\
    \            var sum = 0\n            var paths = [[Int]]()\n            dfs(grid:\
    \ grid, r: r, c: c, k: k, path: &path, sum: &sum, paths: &paths)\n           \
    \ if sum < minSum {\n                minSum = sum\n                minPath = path\n\
    \                minPaths = paths\n            } else if sum == minSum {\n   \
    \             if path < minPath {\n                    minPath = path\n      \
    \              minPaths = paths\n                }\n            }\n        }\n\
    \    }\n    print(minPaths)\n    return minPath", "    let n = grid.count\n  \
    \  var dp = Array(repeating: Array(repeating: Int.max, count: n), count: n)\n\
    \    var minPath = Array(repeating: Array(repeating: [Int](), count: n), count:\
    \ n)\n    for i in 0..<n {\n        for j in 0..<n {\n            if i == 0 &&\
    \ j == 0 {\n                dp[i][j] = 0\n                minPath[i][j] = [grid[i][j]]\n\
    \            } else {\n                if i > 0 {\n                    if dp[i\
    \ - 1][j] + 1 < dp[i][j] {\n                        dp[i][j] = dp[i - 1][j] +\
    \ 1\n                        minPath[i][j] = minPath[i - 1][j] + [grid[i][j]]\n\
    \                    } else if dp[i - 1][j] + 1 == dp[i][j] {\n              \
    \          if minPath[i - 1][j] + [grid[i][j]] < minPath[i][j] {\n           \
    \                 minPath[i][j] = minPath[i - 1][j] + [grid[i][j]]\n         \
    \               }\n                    }\n                }\n                if\
    \ j > 0 {\n                    if dp[i][j - 1] + 1 < dp[i][j] {\n            \
    \            dp[i][j] = dp[i][j - 1] + 1\n                        minPath[i][j]\
    \ = minPath[i][j - 1] + [grid[i][j]]\n                    } else if dp[i][j -\
    \ 1] + 1 == dp[i][j] {\n                        if minPath[i][j - 1] + [grid[i][j]]\
    \ < minPath[i][j] {\n                            minPath[i][j] = minPath[i][j\
    \ - 1] + [grid[i][j]]\n                        }\n                    }\n    \
    \            }\n            }\n        }\n    }\n    return minPath[n - 1][n -\
    \ 1]", "    let n = grid.count\n    var dp = Array(repeating: Array(repeating:\
    \ Array(repeating: Int.max, count: n), count: n), count: k + 1)\n    for i in\
    \ 0..<n {\n        for j in 0..<n {\n            dp[1][i][j] = grid[i][j]\n  \
    \      }\n    }\n    for l in 2...k {\n        for i in 0..<n {\n            for\
    \ j in 0..<n {\n                if i > 0 {\n                    dp[l][i][j] =\
    \ min(dp[l][i][j], dp[l - 1][i - 1][j])\n                }\n                if\
    \ i < n - 1 {\n                    dp[l][i][j] = min(dp[l][i][j], dp[l - 1][i\
    \ + 1][j])\n                }\n                if j > 0 {\n                  \
    \  dp[l][i][j] = min(dp[l][i][j], dp[l - 1][i][j - 1])\n                }\n  \
    \              if j < n - 1 {\n                    dp[l][i][j] = min(dp[l][i][j],\
    \ dp[l - 1][i][j + 1])\n                }\n                dp[l][i][j] += grid[i][j]\n\
    \            }\n        }\n    }\n    var res = Int.max\n    var x = 0\n    var\
    \ y = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if dp[k][i][j]\
    \ < res {\n                res = dp[k][i][j]\n                x = i\n        \
    \        y = j\n            }\n        }\n    }\n    var ans = [Int]()\n    ans.append(grid[x][y])\n\
    \    var cur = res - grid[x][y]\n    for _ in 1..<k {\n        if x > 0 && dp[k\
    \ - 1][x - 1][y] == cur {\n            ans.append(grid[x - 1][y])\n          \
    \  cur -= grid[x - 1][y]\n", '    return []', "    let n = grid.count\n    var\
    \ minPath = [Int]()\n    var minSum = Int.max\n    var minPaths = [[Int]]()\n\
    \    var visited = [[Bool]](repeating: [Bool](repeating: false, count: n), count:\
    \ n)\n    func dfs(_ i: Int, _ j: Int, _ path: [Int], _ sum: Int) {\n        if\
    \ i < 0 || i >= n || j < 0 || j >= n || visited[i][j] {\n            return\n\
    \        }\n        if path.count == k {\n            if sum < minSum {\n    \
    \            minSum = sum\n                minPaths = [[Int]]()\n            \
    \    minPaths.append(path)\n            } else if sum == minSum {\n          \
    \      minPaths.append(path)\n            }\n            return\n        }\n \
    \       visited[i][j] = true\n        dfs(i - 1, j, path + [grid[i][j]], sum +\
    \ grid[i][j])\n        dfs(i + 1, j, path + [grid[i][j]], sum + grid[i][j])\n\
    \        dfs(i, j - 1, path + [grid[i][j]], sum + grid[i][j])\n        dfs(i,\
    \ j + 1, path + [grid[i][j]], sum + grid[i][j])\n        visited[i][j] = false\n\
    \    }\n    for i in 0..<n {\n        for j in 0..<n {\n            dfs(i, j,\
    \ [], 0)\n        }\n    }\n    for path in minPaths {\n        if path < minPath\
    \ {\n            minPath = path\n        }\n    }\n    return minPath", "    let\
    \ n = grid.count\n    var dp = [[[Int]]](repeating: [[Int]](repeating: [Int](repeating:\
    \ Int.max, count: n), count: n), count: k + 1)\n    for i in 0..<n {\n       \
    \ for j in 0..<n {\n            dp[0][i][j] = grid[i][j]\n        }\n    }\n \
    \   for i in 1...k {\n        for j in 0..<n {\n            for l in 0..<n {\n\
    \                if j > 0 {\n                    dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i - 1][j - 1][l])\n                }\n                if j < n - 1 {\n  \
    \                  dp[i][j][l] = min(dp[i][j][l], dp[i - 1][j + 1][l])\n     \
    \           }\n                if l > 0 {\n                    dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1])\n                }\n                if l < n - 1 {\n  \
    \                  dp[i][j][l] = min(dp[i][j][l], dp[i - 1][j][l + 1])\n     \
    \           }\n            }\n        }\n    }\n    var res = [Int](repeating:\
    \ Int.max, count: k)\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if dp[k][i][j] < res[k - 1] {\n                res[k - 1] = dp[k][i][j]\n\
    \            }\n        }\n    }\n    return res", "    let n = grid.count\n \
    \   var dp = Array(repeating: Array(repeating: Array(repeating: Int.max, count:\
    \ n), count: n), count: k + 1)\n    var path = Array(repeating: Array(repeating:\
    \ Array(repeating: -1, count: n), count: n), count: k + 1)\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            dp[1][i][j] = grid[i][j]\n        \
    \    path[1][i][j] = grid[i][j]\n        }\n    }\n    for l in 2...k {\n    \
    \    for i in 0..<n {\n            for j in 0..<n {\n                for d in\
    \ 0..<4 {\n                    let ni = i + dx[d]\n                    let nj\
    \ = j + dy[d]\n                    if ni < 0 || ni >= n || nj < 0 || nj >= n {\n\
    \                        continue\n                    }\n                   \
    \ if dp[l][i][j] > dp[l - 1][ni][nj] {\n                        dp[l][i][j] =\
    \ dp[l - 1][ni][nj]\n                        path[l][i][j] = path[l - 1][ni][nj]\n\
    \                    }\n                    if dp[l][i][j] == dp[l - 1][ni][nj]\
    \ {\n                        path[l][i][j] = min(path[l][i][j], path[l - 1][ni][nj])\n\
    \                    }\n                }\n                dp[l][i][j] += grid[i][j]\n\
    \                path[l][i][j] = min(path[l][i][j], grid[i][j])\n            }\n\
    \        }\n    }\n    var ans = [Int]()\n    var i = 0, j = 0\n    for l in 1...k\
    \ {\n        ans.append(path[l][i][j])\n        for d in 0..<4 {\n           \
    \ let ni = i + dx[d]\n            let nj = j + dy[d]\n            if ni < 0 ||\
    \ ni >= n", '    return []', "    let n = grid.count\n    var dp = Array(repeating:\
    \ Array(repeating: Array(repeating: Int.max, count: n), count: n), count: k +\
    \ 1)\n    for i in 0..<n {\n        for j in 0..<n {\n            dp[1][i][j]\
    \ = grid[i][j]\n        }\n    }\n    for l in 2...k {\n        for i in 0..<n\
    \ {\n            for j in 0..<n {\n                for d in 0..<4 {\n        \
    \            let ni = i + dx[d]\n                    let nj = j + dy[d]\n    \
    \                if ni >= 0 && ni < n && nj >= 0 && nj < n {\n               \
    \         dp[l][i][j] = min(dp[l][i][j], dp[l - 1][ni][nj])\n                \
    \    }\n                }\n                dp[l][i][j] += grid[i][j]\n       \
    \     }\n        }\n    }\n    var res = [Int]()\n    var i = 0\n    var j = 0\n\
    \    for l in 1...k {\n        res.append(grid[i][j])\n        var minV = Int.max\n\
    \        var minI = 0\n        var minJ = 0\n        for d in 0..<4 {\n      \
    \      let ni = i + dx[d]\n            let nj = j + dy[d]\n            if ni >=\
    \ 0 && ni < n && nj >= 0 && nj < n {\n                if dp[l][ni][nj] < minV\
    \ {\n                    minV = dp[l][ni][nj]\n                    minI = ni\n\
    \                    minJ = nj\n                }\n            }\n        }\n\
    \        i = minI\n        j = minJ\n    }\n    return res", "    let n = grid.count\n\
    \    var dp = Array(repeating: Array(repeating: Int.max, count: n), count: n)\n\
    \    var minPath = Array(repeating: Array(repeating: [Int](), count: n), count:\
    \ n)\n    for i in 0..<n {\n        for j in 0..<n {\n            if i == 0 &&\
    \ j == 0 {\n                dp[i][j] = grid[i][j]\n                minPath[i][j]\
    \ = [grid[i][j]]\n            } else if i == 0 {\n                dp[i][j] = dp[i][j\
    \ - 1] + grid[i][j]\n                minPath[i][j] = minPath[i][j - 1] + [grid[i][j]]\n\
    \            } else if j == 0 {\n                dp[i][j] = dp[i - 1][j] + grid[i][j]\n\
    \                minPath[i][j] = minPath[i - 1][j] + [grid[i][j]]\n          \
    \  } else {\n                if dp[i - 1][j] < dp[i][j - 1] {\n              \
    \      dp[i][j] = dp[i - 1][j] + grid[i][j]\n                    minPath[i][j]\
    \ = minPath[i - 1][j] + [grid[i][j]]\n                } else if dp[i - 1][j] >\
    \ dp[i][j - 1] {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j]\n \
    \                   minPath[i][j] = minPath[i][j - 1] + [grid[i][j]]\n       \
    \         } else {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j]\n\
    \                    minPath[i][j] = min(minPath[i - 1][j] + [grid[i][j]], minPath[i][j\
    \ - 1] + [grid[i][j]])\n                }\n            }\n        }\n    }\n \
    \   return Array(minPath[n -", "    let n = grid.count\n    var result = [Int]()\n\
    \    var minSum = Int.max\n    var minPath = [Int]()\n    var visited = [[Bool]](repeating:\
    \ [Bool](repeating: false, count: n), count: n)\n    func dfs(_ i: Int, _ j: Int,\
    \ _ sum: Int, _ path: [Int]) {\n        guard i >= 0 && i < n && j >= 0 && j <\
    \ n && !visited[i][j] else {\n            return\n        }\n        visited[i][j]\
    \ = true\n        var path = path\n        path.append(grid[i][j])\n        let\
    \ sum = sum + grid[i][j]\n        if path.count == k {\n            if sum < minSum\
    \ {\n                minSum = sum\n                minPath = path\n          \
    \  } else if sum == minSum {\n                if path < minPath {\n          \
    \          minPath = path\n                }\n            }\n        } else {\n\
    \            dfs(i - 1, j, sum, path)\n            dfs(i + 1, j, sum, path)\n\
    \            dfs(i, j - 1, sum, path)\n            dfs(i, j + 1, sum, path)\n\
    \        }\n        visited[i][j] = false\n    }\n    for i in 0..<n {\n     \
    \   for j in 0..<n {\n            dfs(i, j, 0, [])\n        }\n    }\n    return\
    \ minPath", "    let n = grid.count\n    var dp = Array(repeating: Array(repeating:\
    \ Array(repeating: Int.max, count: n), count: n), count: k + 1)\n    for i in\
    \ 0..<n {\n        for j in 0..<n {\n            dp[1][i][j] = grid[i][j]\n  \
    \      }\n    }\n    for l in 2...k {\n        for i in 0..<n {\n            for\
    \ j in 0..<n {\n                for di in -1...1 {\n                    for dj\
    \ in -1...1 {\n                        if di == 0 && dj == 0 {\n             \
    \               continue\n                        }\n                        let\
    \ ni = i + di\n                        let nj = j + dj\n                     \
    \   if ni < 0 || ni >= n || nj < 0 || nj >= n {\n                            continue\n\
    \                        }\n                        dp[l][i][j] = min(dp[l][i][j],\
    \ dp[l - 1][ni][nj])\n                    }\n                }\n            }\n\
    \        }\n    }\n    var minVal = Int.max\n    var minI = -1\n    var minJ =\
    \ -1\n    for i in 0..<n {\n        for j in 0..<n {\n            if dp[k][i][j]\
    \ < minVal {\n                minVal = dp[k][i][j]\n                minI = i\n\
    \                minJ = j\n            }\n        }\n    }\n    var res = [Int]()\n\
    \    res.append(minVal)\n    var curI = minI\n    var curJ = minJ\n    for l in\
    \ (1..<k).reversed() {\n        for di in -1...1 {\n            for dj in -1...1\
    \ {\n                if di == 0 && dj == 0 {\n                    continue\n \
    \               }\n                let ni = curI + di\n                let nj\
    \ = curJ + dj\n                if ni < 0 || ni >= n || nj < 0 || nj >= n {\n \
    \                   continue\n                }\n                if dp[l][ni][nj]\
    \ == dp[l + 1][curI][curJ] {\n                    cur", '    return []', '    return
    []', "    // TODO\n    return []", "    let n = grid.count\n    var visited =\
    \ Array(repeating: Array(repeating: false, count: n), count: n)\n    var minPath\
    \ = Array(repeating: Array(repeating: Int.max, count: n), count: n)\n    var minPathValues\
    \ = [Int]()\n    var minPathSum = Int.max\n    var minPathLength = Int.max\n \
    \   func dfs(_ i: Int, _ j: Int, _ path: [Int], _ pathSum: Int, _ pathLength:\
    \ Int) {\n        if i < 0 || i >= n || j < 0 || j >= n || visited[i][j] {\n \
    \           return\n        }\n        if pathLength > k {\n            return\n\
    \        }\n        if pathLength == k {\n            if pathSum < minPathSum\
    \ {\n                minPathValues = path\n                minPathSum = pathSum\n\
    \                minPathLength = pathLength\n            } else if pathSum ==\
    \ minPathSum {\n                if pathLength < minPathLength {\n            \
    \        minPathValues = path\n                    minPathSum = pathSum\n    \
    \                minPathLength = pathLength\n                } else if pathLength\
    \ == minPathLength {\n                    if path < minPathValues {\n        \
    \                minPathValues = path\n                        minPathSum = pathSum\n\
    \                        minPathLength = pathLength\n                    }\n \
    \               }\n            }\n            return\n        }\n        visited[i][j]\
    \ = true\n        dfs(i - 1, j, path + [grid[i][j]], pathSum + grid[i][j], pathLength\
    \ + 1)\n        dfs(i + 1, j, path + [grid[i][j]], pathSum + grid[i][j], pathLength\
    \ + 1)\n        dfs(i, j - 1, path + [grid[i][j]], pathSum + grid[i][j], pathLength\
    \ + 1)\n        dfs(i, j + 1, path + [grid[i][j]], pathSum + grid[i][j], pathLength\
    \ + 1)\n        visited[i][j] = false\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            dfs(i, j, [grid[", "    let n = grid.count\n    var\
    \ visited = Array(repeating: Array(repeating: false, count: n), count: n)\n  \
    \  var result = [Int]()\n    var minSum = Int.max\n    var minPath = [Int]()\n\
    \    func dfs(_ i: Int, _ j: Int, _ sum: Int, _ path: [Int]) {\n        if i <\
    \ 0 || i >= n || j < 0 || j >= n || visited[i][j] {\n            return\n    \
    \    }\n        visited[i][j] = true\n        path.append(grid[i][j])\n      \
    \  if path.count == k {\n            if sum < minSum {\n                minSum\
    \ = sum\n                minPath = path\n            } else if sum == minSum {\n\
    \                if path < minPath {\n                    minPath = path\n   \
    \             }\n            }\n        } else {\n            dfs(i + 1, j, sum\
    \ + grid[i][j], path)\n            dfs(i - 1, j, sum + grid[i][j], path)\n   \
    \         dfs(i, j + 1, sum + grid[i][j], path)\n            dfs(i, j - 1, sum\
    \ + grid[i][j], path)\n        }\n        visited[i][j] = false\n    }\n    for\
    \ i in 0..<n {\n        for j in 0..<n {\n            dfs(i, j, 0, [])\n     \
    \   }\n    }\n    return minPath", "    let n = grid.count\n    var dp = [[[Int]:\
    \ [Int]]]()\n    for _ in 0..<n {\n        dp.append(Array(repeating: [:], count:\
    \ n))\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            dp[i][j][grid[i][j]]\
    \ = [grid[i][j]]\n        }\n    }\n    for _ in 1..<k {\n        var newDp =\
    \ [[[Int]: [Int]]]()\n        for _ in 0..<n {\n            newDp.append(Array(repeating:\
    \ [:], count: n))\n        }\n        for i in 0..<n {\n            for j in 0..<n\
    \ {\n                for (key, value) in dp[i][j] {\n                    if i\
    \ > 0 {\n                        let newKey = key + grid[i - 1][j]\n         \
    \               if let newValue = newDp[i - 1][j][newKey] {\n                \
    \            if value < newValue {\n                                newDp[i -\
    \ 1][j][newKey] = value\n                            }\n                     \
    \   } else {\n                            newDp[i - 1][j][newKey] = value\n  \
    \                      }\n                    }\n                    if i < n\
    \ - 1 {\n                        let newKey = key + grid[i + 1][j]\n         \
    \               if let newValue = newDp[i + 1][j][newKey] {\n                \
    \            if value < newValue {\n                                newDp[i +\
    \ 1][j][newKey] = value\n                            }\n                     \
    \   } else {\n                            newDp[i + 1][j][newKey] = value\n  \
    \                      }\n                    }\n                    if j > 0\
    \ {\n                        let newKey = key + grid[i][j - 1]\n             \
    \           if let newValue = newDp[i][j - 1][newKey] {\n                    \
    \        if value < newValue {\n                                newDp[i][j - 1][newKey]\
    \ = value\n                            }\n                        } else {\n \
    \                           newDp[i][j - 1][newKey] = value\n                \
    \        }\n", "    let n = grid.count\n    var minPath = [Int]()\n    var minSum\
    \ = Int.max\n    var minPaths = [[Int]]()\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            var path = [Int]()\n            var sum = 0\n      \
    \      var paths = [[Int]]()\n            minPath(grid: grid, i: i, j: j, k: k,\
    \ path: &path, sum: &sum, paths: &paths)\n            if sum < minSum {\n    \
    \            minSum = sum\n                minPath = path\n                minPaths\
    \ = paths\n            }\n        }\n    }\n    print(minPaths)\n    return minPath",
  '    return []', '    return []', "    let n = grid.count\n    var dp = Array(repeating:\
    \ Array(repeating: Array(repeating: Int.max, count: n), count: n), count: k +\
    \ 1)\n    for i in 0..<n {\n        for j in 0..<n {\n            dp[1][i][j]\
    \ = grid[i][j]\n        }\n    }\n    for l in 2...k {\n        for i in 0..<n\
    \ {\n            for j in 0..<n {\n                if i > 0 {\n              \
    \      dp[l][i][j] = min(dp[l][i][j], dp[l - 1][i - 1][j])\n                }\n\
    \                if i < n - 1 {\n                    dp[l][i][j] = min(dp[l][i][j],\
    \ dp[l - 1][i + 1][j])\n                }\n                if j > 0 {\n      \
    \              dp[l][i][j] = min(dp[l][i][j], dp[l - 1][i][j - 1])\n         \
    \       }\n                if j < n - 1 {\n                    dp[l][i][j] = min(dp[l][i][j],\
    \ dp[l - 1][i][j + 1])\n                }\n                dp[l][i][j] += grid[i][j]\n\
    \            }\n        }\n    }\n    var minValue = Int.max\n    var minI = -1\n\
    \    var minJ = -1\n    for i in 0..<n {\n        for j in 0..<n {\n         \
    \   if dp[k][i][j] < minValue {\n                minValue = dp[k][i][j]\n    \
    \            minI = i\n                minJ = j\n            }\n        }\n  \
    \  }\n    var result = [Int]()\n    result.append(grid[minI][minJ])\n    var i\
    \ = minI\n    var j = minJ\n    for l in (1..<k).reversed() {\n        var minValue\
    \ = Int.max\n        var minI = -1\n        var minJ = -1\n        if i > 0 {",
  "    var result = [Int]()\n    return result", "    let n = grid.count\n    var\
    \ dp = Array(repeating: Array(repeating: Array(repeating: Int.max, count: n),\
    \ count: n), count: k + 1)\n    for i in 0..<n {\n        for j in 0..<n {\n \
    \           dp[1][i][j] = grid[i][j]\n        }\n    }\n    for l in 2...k {\n\
    \        for i in 0..<n {\n            for j in 0..<n {\n                for d\
    \ in 0..<4 {\n                    let ni = i + dx[d]\n                    let\
    \ nj = j + dy[d]\n                    if ni >= 0 && ni < n && nj >= 0 && nj <\
    \ n {\n                        dp[l][i][j] = min(dp[l][i][j], dp[l - 1][ni][nj])\n\
    \                    }\n                }\n                dp[l][i][j] += grid[i][j]\n\
    \            }\n        }\n    }\n    var ans = Int.max\n    var x = 0\n    var\
    \ y = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if dp[k][i][j]\
    \ < ans {\n                ans = dp[k][i][j]\n                x = i\n        \
    \        y = j\n            }\n        }\n    }\n    var res = [Int]()\n    res.append(grid[x][y])\n\
    \    for _ in 1..<k {\n        var minVal = Int.max\n        var minX = 0\n  \
    \      var minY = 0\n        for d in 0..<4 {\n            let ni = x + dx[d]\n\
    \            let nj = y + dy[d]\n            if ni >= 0 && ni < n && nj >= 0 &&\
    \ nj < n {\n                if dp[k - 1][ni][nj] < minVal {\n                \
    \    minVal = dp[k - 1][ni][nj]\n                    minX = ni\n             \
    \       minY = nj\n                }\n            }\n        }\n        res.append(grid[minX][minY])\n\
    \        x =", "    let n = grid.count\n    var dp = [[[Int]]](repeating: [[Int]](repeating:\
    \ [Int](repeating: Int.max, count: n), count: n), count: k + 1)\n    for i in\
    \ 0..<n {\n        for j in 0..<n {\n            dp[0][i][j] = grid[i][j]\n  \
    \      }\n    }\n    for i in 1...k {\n        for j in 0..<n {\n            for\
    \ l in 0..<n {\n                if j > 0 {\n                    dp[i][j][l] =\
    \ min(dp[i][j][l], dp[i - 1][j - 1][l])\n                }\n                if\
    \ j < n - 1 {\n                    dp[i][j][l] = min(dp[i][j][l], dp[i - 1][j\
    \ + 1][l])\n                }\n                if l > 0 {\n                  \
    \  dp[i][j][l] = min(dp[i][j][l], dp[i - 1][j][l - 1])\n                }\n  \
    \              if l < n - 1 {\n                    dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i - 1][j][l + 1])\n                }\n            }\n        }\n    }\n \
    \   var res = [Int](repeating: Int.max, count: k)\n    for i in 0..<n {\n    \
    \    for j in 0..<n {\n            if dp[k][i][j] < res[k - 1] {\n           \
    \     res[k - 1] = dp[k][i][j]\n            }\n        }\n    }\n    return res",
  "    let n = grid.count\n    var dp = Array(repeating: Array(repeating: Int.max,\
    \ count: n), count: n)\n    var visited = Array(repeating: Array(repeating: false,\
    \ count: n), count: n)\n    var queue = [(Int, Int, Int)]()\n    queue.append((0,\
    \ 0, 0))\n    dp[0][0] = grid[0][0]\n    visited[0][0] = true\n    while !queue.isEmpty\
    \ {\n        let (x, y, step) = queue.removeFirst()\n        if step == k {\n\
    \            break\n        }\n        let nextStep = step + 1\n        if x +\
    \ 1 < n && !visited[x + 1][y] {\n            let next = grid[x + 1][y]\n     \
    \       if next < dp[x + 1][y] {\n                dp[x + 1][y] = next\n      \
    \          queue.append((x + 1, y, nextStep))\n            }\n            visited[x\
    \ + 1][y] = true\n        }\n        if y + 1 < n && !visited[x][y + 1] {\n  \
    \          let next = grid[x][y + 1]\n            if next < dp[x][y + 1] {\n \
    \               dp[x][y + 1] = next\n                queue.append((x, y + 1, nextStep))\n\
    \            }\n            visited[x][y + 1] = true\n        }\n        if x\
    \ - 1 >= 0 && !visited[x - 1][y] {\n            let next = grid[x - 1][y]\n  \
    \          if next < dp[x - 1][y] {\n                dp[x - 1][y] = next\n   \
    \             queue.append((x - 1, y, nextStep))\n            }\n            visited[x\
    \ - 1][y] = true\n        }\n        if y - 1 >= 0 && !visited[x][y - 1] {\n \
    \           let next = grid[x][y - 1]\n            if next < dp[x][y - 1] {\n\
    \                dp[x][y - 1] = next\n                queue.append((x, y -", '    return
    []', "    let n = grid.count\n    var dp = [[Int]](repeating: [Int](repeating:\
    \ Int.max, count: n), count: n)\n    var minPath = [Int]()\n    var minSum = Int.max\n\
    \    for i in 0..<n {\n        for j in 0..<n {\n            dfs(grid: grid, dp:\
    \ &dp, i: i, j: j, k: k, path: [grid[i][j]], sum: grid[i][j])\n        }\n   \
    \ }\n    return minPath", "    let n = grid.count\n    var dp = Array(repeating:\
    \ Array(repeating: Int.max, count: n), count: n)\n    var pq = PriorityQueue<(Int,\
    \ Int, Int)>(ascending: true) { $0.0 < $1.0 }\n    pq.push((0, 0, 0))\n    dp[0][0]\
    \ = 0\n    while !pq.isEmpty {\n        let (d, i, j) = pq.pop()!\n        if\
    \ d > dp[i][j] {\n            continue\n        }\n        if d == k {\n     \
    \       break\n        }\n        for (di, dj) in [(0, 1), (0, -1), (1, 0), (-1,\
    \ 0)] {\n            let ni = i + di\n            let nj = j + dj\n          \
    \  if ni < 0 || ni >= n || nj < 0 || nj >= n {\n                continue\n   \
    \         }\n            let nd = d + 1\n            if nd < dp[ni][nj] {\n  \
    \              dp[ni][nj] = nd\n                pq.push((nd, ni, nj))\n      \
    \      }\n        }\n    }\n    var res = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while k > 0 {\n        res.append(grid[i][j])\n        k -= 1\n     \
    \   var best = Int.max\n        var besti = -1\n        var bestj = -1\n     \
    \   for (di, dj) in [(0, 1), (0, -1), (1, 0), (-1, 0)] {\n            let ni =\
    \ i + di\n            let nj = j + dj\n            if ni < 0 || ni >= n || nj\
    \ < 0 || nj >= n {\n                continue\n            }\n            if dp[ni][nj]\
    \ < best {\n                best = dp[ni][nj]\n                besti = ni\n  \
    \              bestj = nj\n            }\n        }\n        i = besti\n     \
    \   j = bestj\n    }\n    return res", '    return []', "    let n = grid.count\n\
    \    var dp = [[[Int]]](repeating: [[Int]](repeating: [Int](repeating: Int.max,\
    \ count: n), count: n), count: k + 1)\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            dp[0][i][j] = grid[i][j]\n        }\n    }\n    for t in\
    \ 1...k {\n        for i in 0..<n {\n            for j in 0..<n {\n          \
    \      if i > 0 {\n                    dp[t][i][j] = min(dp[t][i][j], dp[t - 1][i\
    \ - 1][j])\n                }\n                if i < n - 1 {\n              \
    \      dp[t][i][j] = min(dp[t][i][j], dp[t - 1][i + 1][j])\n                }\n\
    \                if j > 0 {\n                    dp[t][i][j] = min(dp[t][i][j],\
    \ dp[t - 1][i][j - 1])\n                }\n                if j < n - 1 {\n  \
    \                  dp[t][i][j] = min(dp[t][i][j], dp[t - 1][i][j + 1])\n     \
    \           }\n            }\n        }\n    }\n    var result = [Int]()\n   \
    \ var i = 0, j = 0\n    for t in 0..<k {\n        result.append(dp[t][i][j])\n\
    \        if i > 0 && dp[t + 1][i - 1][j] == dp[t][i][j] {\n            i -= 1\n\
    \        } else if i < n - 1 && dp[t + 1][i + 1][j] == dp[t][i][j] {\n       \
    \     i += 1\n        } else if j > 0 && dp[t + 1][i][j - 1] == dp[t][i][j] {\n\
    \            j -= 1\n        } else if j < n - 1 && dp[t + 1][i][j + 1] == dp[t][i][j]\
    \ {\n", '    return []', "    let n = grid.count\n    var dp = [[[Int]]](repeating:\
    \ [[Int]](repeating: [Int](repeating: Int.max, count: n), count: n), count: k\
    \ + 1)\n    var path = [[[Int]]](repeating: [[Int]](repeating: [Int](repeating:\
    \ -1, count: n), count: n), count: k + 1)\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            dp[0][i][j] = grid[i][j]\n        }\n    }\n    for\
    \ i in 1...k {\n        for j in 0..<n {\n            for l in 0..<n {\n     \
    \           for m in 0..<4 {\n                    let x = j + dx[m]\n        \
    \            let y = l + dy[m]\n                    if x >= 0 && x < n && y >=\
    \ 0 && y < n {\n                        if dp[i][j][l] > dp[i - 1][x][y] {\n \
    \                           dp[i][j][l] = dp[i - 1][x][y]\n                  \
    \          path[i][j][l] = m\n                        }\n                    }\n\
    \                }\n            }\n        }\n    }\n    var ans = [Int]()\n \
    \   var x = 0, y = 0\n    for i in stride(from: k, through: 1, by: -1) {\n   \
    \     ans.append(grid[x][y])\n        let m = path[i][x][y]\n        x += dx[m]\n\
    \        y += dy[m]\n    }\n    ans.append(grid[x][y])\n    return ans", "   \
    \ let n = grid.count\n    guard n >= 2 else {\n        return []\n    }\n    var\
    \ dp = [[[Int]]](repeating: [[Int]](repeating: [Int](repeating: Int.max, count:\
    \ n), count: n), count: k + 1)\n    for i in 0..<n {\n        for j in 0..<n {\n\
    \            dp[0][i][j] = grid[i][j]\n        }\n    }\n    for i in 1...k {\n\
    \        for j in 0..<n {\n            for l in 0..<n {\n                if j\
    \ > 0 {\n                    dp[i][j][l] = min(dp[i][j][l], dp[i - 1][j - 1][l])\n\
    \                }\n                if j < n - 1 {\n                    dp[i][j][l]\
    \ = min(dp[i][j][l], dp[i - 1][j + 1][l])\n                }\n               \
    \ if l > 0 {\n                    dp[i][j][l] = min(dp[i][j][l], dp[i - 1][j][l\
    \ - 1])\n                }\n                if l < n - 1 {\n                 \
    \   dp[i][j][l] = min(dp[i][j][l], dp[i - 1][j][l + 1])\n                }\n \
    \           }\n        }\n    }\n    var result = [Int]()\n    var i = k\n   \
    \ var j = 0\n    var l = 0\n    while i > 0 {\n        result.append(dp[i][j][l])\n\
    \        if j > 0 && dp[i - 1][j - 1][l] == dp[i][j][l] {\n            j -= 1\n\
    \        } else if j < n - 1 && dp[i - 1][j + 1][l] == dp[i][j][l] {\n       \
    \     j += 1\n        } else if l > 0 && dp[i - 1][j][l - 1] == dp[i][j][l] {\n\
    \            l -= 1\n        } else if l < n - 1 && dp[i -", "    let n = grid.count\n\
    \    var dp = Array(repeating: Array(repeating: Int.max, count: n), count: n)\n\
    \    var pq = PriorityQueue<(Int, Int, Int)>(sort: { $0.2 < $1.2 })\n    dp[0][0]\
    \ = 0\n    pq.push((0, 0, 0))\n    while !pq.isEmpty {\n        let (i, j, _)\
    \ = pq.pop()!\n        if i > 0 {\n            let newCost = dp[i][j] + grid[i\
    \ - 1][j]\n            if newCost < dp[i - 1][j] {\n                dp[i - 1][j]\
    \ = newCost\n                pq.push((i - 1, j, newCost))\n            }\n   \
    \     }\n        if i < n - 1 {\n            let newCost = dp[i][j] + grid[i +\
    \ 1][j]\n            if newCost < dp[i + 1][j] {\n                dp[i + 1][j]\
    \ = newCost\n                pq.push((i + 1, j, newCost))\n            }\n   \
    \     }\n        if j > 0 {\n            let newCost = dp[i][j] + grid[i][j -\
    \ 1]\n            if newCost < dp[i][j - 1] {\n                dp[i][j - 1] =\
    \ newCost\n                pq.push((i, j - 1, newCost))\n            }\n     \
    \   }\n        if j < n - 1 {\n            let newCost = dp[i][j] + grid[i][j\
    \ + 1]\n            if newCost < dp[i][j + 1] {\n                dp[i][j + 1]\
    \ = newCost\n                pq.push((i, j + 1, newCost))\n            }\n   \
    \     }\n    }\n    var ans = [Int]()\n    var i = n - 1, j = n - 1\n    while\
    \ k > 0 {\n        ans.append(grid[i][j])\n        if i > 0 && dp[i - 1][j] <\
    \ dp[i][", "    let n = grid.count\n    var minPath = [Int]()\n    var minSum\
    \ = Int.max\n    for i in 0..<n {\n        for j in 0..<n {\n            let path\
    \ = minPath(grid: grid, k: k, i: i, j: j, sum: 0)\n            if path.count ==\
    \ k {\n                let sum = path.reduce(0, +)\n                if sum < minSum\
    \ {\n                    minSum = sum\n                    minPath = path\n  \
    \              }\n            }\n        }\n    }\n    return minPath", '    return
    []', '    return []', "    let n = grid.count\n    var dp = Array(repeating: Array(repeating:\
    \ Int.max, count: n), count: n)\n    var pq = PriorityQueue<(Int, Int, Int)>(sort:\
    \ { $0.2 < $1.2 })\n    pq.push((0, 0, grid[0][0]))\n    dp[0][0] = grid[0][0]\n\
    \    while !pq.isEmpty {\n        let (i, j, val) = pq.pop()!\n        if i ==\
    \ n - 1 && j == n - 1 {\n            var res = [Int]()\n            res.append(val)\n\
    \            for _ in 1..<k {\n                res.append(dp[i][j])\n        \
    \    }\n            return res\n        }\n        if i > 0 && dp[i - 1][j] >\
    \ val {\n            dp[i - 1][j] = val\n            pq.push((i - 1, j, grid[i\
    \ - 1][j]))\n        }\n        if i < n - 1 && dp[i + 1][j] > val {\n       \
    \     dp[i + 1][j] = val\n            pq.push((i + 1, j, grid[i + 1][j]))\n  \
    \      }\n        if j > 0 && dp[i][j - 1] > val {\n            dp[i][j - 1] =\
    \ val\n            pq.push((i, j - 1, grid[i][j - 1]))\n        }\n        if\
    \ j < n - 1 && dp[i][j + 1] > val {\n            dp[i][j + 1] = val\n        \
    \    pq.push((i, j + 1, grid[i][j + 1]))\n        }\n    }\n    return []", " \
    \   var result = [Int]()\n    return result", "    var result = [Int]()\n    var\
    \ visited = [[Bool]](repeating: [Bool](repeating: false, count: grid.count), count:\
    \ grid.count)\n    var minPath = [Int]()\n    var minSum = Int.max\n    for i\
    \ in 0..<grid.count {\n        for j in 0..<grid[i].count {\n            var path\
    \ = [Int]()\n            var sum = 0\n            dfs(grid: grid, i: i, j: j,\
    \ k: k, visited: &visited, path: &path, sum: &sum)\n            if sum < minSum\
    \ {\n                minSum = sum\n                minPath = path\n          \
    \  }\n        }\n    }\n    return minPath", "    let n = grid.count\n    var\
    \ minPath = [Int]()\n    var minSum = Int.max\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            var path = [Int]()\n            var sum = 0\n    \
    \        var visited = [[Bool]](repeating: [Bool](repeating: false, count: n),\
    \ count: n)\n            dfs(grid: grid, i: i, j: j, k: k, path: &path, sum: &sum,\
    \ visited: &visited)\n            if sum < minSum {\n                minSum =\
    \ sum\n                minPath = path\n            }\n        }\n    }\n    return\
    \ minPath", '    return []', "    let n = grid.count\n    var minPath = [Int]()\n\
    \    var minSum = Int.max\n    var minPaths = [[Int]]()\n    var visited = [[Bool]](repeating:\
    \ [Bool](repeating: false, count: n), count: n)\n    var path = [Int]()\n    var\
    \ sum = 0\n    var paths = [[Int]]()\n    var dfs = { (i: Int, j: Int, k: Int)\
    \ in\n        if k == 0 {\n            if sum < minSum {\n                minSum\
    \ = sum\n                minPaths = paths\n            }\n            return\n\
    \        }\n        if i < 0 || i >= n || j < 0 || j >= n || visited[i][j] {\n\
    \            return\n        }\n        visited[i][j] = true\n        path.append(grid[i][j])\n\
    \        sum += grid[i][j]\n        paths.append(path)\n        dfs(i: i - 1,\
    \ j: j, k: k - 1)\n        dfs(i: i + 1, j: j, k: k - 1)\n        dfs(i: i, j:\
    \ j - 1, k: k - 1)\n        dfs(i: i, j: j + 1, k: k - 1)\n        visited[i][j]\
    \ = false\n        path.removeLast()\n        sum -= grid[i][j]\n        paths.removeLast()\n\
    \    }\n    for i in 0..<n {\n        for j in 0..<n {\n            dfs(i: i,\
    \ j: j, k: k)\n        }\n    }\n    for i in 0..<minPaths.count {\n        if\
    \ minPaths[i].count < minPath.count {\n            minPath = minPaths[i]\n   \
    \     } else if minPaths[i].count == minPath.count {\n            for j in 0..<minPaths[i].count\
    \ {\n                if minPaths[i][j] < minPath[j] {\n                    minPath\
    \ = minPaths[i]\n                    break\n                } else if minPaths[i][j]\
    \ > minPath[j]", "    let n = grid.count\n    var dp = Array(repeating: Array(repeating:\
    \ Int.max, count: n), count: n)\n    var prev = Array(repeating: Array(repeating:\
    \ -1, count: n), count: n)\n    dp[0][0] = 0\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if i > 0 {\n                if dp[i - 1][j] + 1 <\
    \ dp[i][j] {\n                    dp[i][j] = dp[i - 1][j] + 1\n              \
    \      prev[i][j] = 0\n                }\n            }\n            if j > 0\
    \ {\n                if dp[i][j - 1] + 1 < dp[i][j] {\n                    dp[i][j]\
    \ = dp[i][j - 1] + 1\n                    prev[i][j] = 1\n                }\n\
    \            }\n        }\n    }\n    var result = [Int]()\n    var i = n - 1\n\
    \    var j = n - 1\n    while k > 0 {\n        result.append(grid[i][j])\n   \
    \     if prev[i][j] == 0 {\n            i -= 1\n        } else {\n           \
    \ j -= 1\n        }\n        k -= 1\n    }\n    return result", "    let n = grid.count\n\
    \    var minPath = [Int]()\n    var minSum = Int.max\n    var minPaths = [[Int]]()\n\
    \    var visited = [[Bool]](repeating: [Bool](repeating: false, count: n), count:\
    \ n)\n    var path = [Int]()\n    var sum = 0\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            visited[i][j] = true\n            path.append(grid[i][j])\n\
    \            sum += grid[i][j]\n            dfs(grid: grid, i: i, j: j, k: k,\
    \ visited: &visited, path: &path, sum: &sum, minPath: &minPath, minSum: &minSum,\
    \ minPaths: &minPaths)\n            visited[i][j] = false\n            path.removeLast()\n\
    \            sum -= grid[i][j]\n        }\n    }\n    return minPath", "    let\
    \ n = grid.count\n    var dp = [[[Int]]](repeating: [[Int]](repeating: [Int](repeating:\
    \ Int.max, count: n), count: n), count: k + 1)\n    for i in 0..<n {\n       \
    \ for j in 0..<n {\n            dp[0][i][j] = grid[i][j]\n        }\n    }\n \
    \   for l in 1...k {\n        for i in 0..<n {\n            for j in 0..<n {\n\
    \                if i > 0 {\n                    dp[l][i][j] = min(dp[l][i][j],\
    \ dp[l - 1][i - 1][j])\n                }\n                if i < n - 1 {\n  \
    \                  dp[l][i][j] = min(dp[l][i][j], dp[l - 1][i + 1][j])\n     \
    \           }\n                if j > 0 {\n                    dp[l][i][j] = min(dp[l][i][j],\
    \ dp[l - 1][i][j - 1])\n                }\n                if j < n - 1 {\n  \
    \                  dp[l][i][j] = min(dp[l][i][j], dp[l - 1][i][j + 1])\n     \
    \           }\n            }\n        }\n    }\n    var res = [Int]()\n    var\
    \ i = 0, j = 0\n    for l in 0..<k {\n        res.append(dp[l][i][j])\n      \
    \  if i > 0 && dp[l + 1][i - 1][j] == dp[l][i][j] {\n            i -= 1\n    \
    \    } else if i < n - 1 && dp[l + 1][i + 1][j] == dp[l][i][j] {\n           \
    \ i += 1\n        } else if j > 0 && dp[l + 1][i][j - 1] == dp[l][i][j] {\n  \
    \          j -= 1\n        } else if j < n - 1 && dp[l + 1][i][j + 1] == dp[l][i][j]\
    \ {\n", "    // TODO:\n    return []", "    let n = grid.count\n    var minPath\
    \ = [Int]()\n    var minSum = Int.max\n    var visited = [[Bool]](repeating: [Bool](repeating:\
    \ false, count: n), count: n)\n    for i in 0..<n {\n        for j in 0..<n {\n\
    \            var path = [Int]()\n            var sum = 0\n            dfs(grid:\
    \ grid, i: i, j: j, k: k, path: &path, sum: &sum, visited: &visited)\n       \
    \     if sum < minSum {\n                minSum = sum\n                minPath\
    \ = path\n            }\n        }\n    }\n    return minPath", "    let n = grid.count\n\
    \    var dp = Array(repeating: Array(repeating: Int.max, count: n), count: n)\n\
    \    var path = Array(repeating: Array(repeating: [Int](), count: n), count: n)\n\
    \    for i in 0..<n {\n        for j in 0..<n {\n            if i == 0 && j ==\
    \ 0 {\n                dp[i][j] = grid[i][j]\n                path[i][j] = [grid[i][j]]\n\
    \            } else if i == 0 {\n                dp[i][j] = dp[i][j - 1] + grid[i][j]\n\
    \                path[i][j] = path[i][j - 1] + [grid[i][j]]\n            } else\
    \ if j == 0 {\n                dp[i][j] = dp[i - 1][j] + grid[i][j]\n        \
    \        path[i][j] = path[i - 1][j] + [grid[i][j]]\n            } else {\n  \
    \              if dp[i - 1][j] < dp[i][j - 1] {\n                    dp[i][j]\
    \ = dp[i - 1][j] + grid[i][j]\n                    path[i][j] = path[i - 1][j]\
    \ + [grid[i][j]]\n                } else if dp[i - 1][j] > dp[i][j - 1] {\n  \
    \                  dp[i][j] = dp[i][j - 1] + grid[i][j]\n                    path[i][j]\
    \ = path[i][j - 1] + [grid[i][j]]\n                } else {\n                \
    \    dp[i][j] = dp[i - 1][j] + grid[i][j]\n                    path[i][j] = min(path[i\
    \ - 1][j] + [grid[i][j]], path[i][j - 1] + [grid[i][j]])\n                }\n\
    \            }\n        }\n    }\n    return Array(path[n - 1][n - 1].prefix(k))",
  "    let n = grid.count\n    let m = grid[0].count\n    var dp = Array(repeating:\
    \ Array(repeating: Int.max, count: m), count: n)\n    var prev = Array(repeating:\
    \ Array(repeating: -1, count: m), count: n)\n    var q = [(Int, Int)]()\n    for\
    \ i in 0..<n {\n        for j in 0..<m {\n            if grid[i][j] == 1 {\n \
    \               dp[i][j] = 0\n                q.append((i, j))\n            }\n\
    \        }\n    }\n    var dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    while\
    \ !q.isEmpty {\n        let p = q.removeFirst()\n        for d in dirs {\n   \
    \         let x = p.0 + d.0\n            let y = p.1 + d.1\n            if x >=\
    \ 0 && x < n && y >= 0 && y < m && dp[x][y] > dp[p.0][p.1] + 1 {\n           \
    \     dp[x][y] = dp[p.0][p.1] + 1\n                prev[x][y] = p.0 * m + p.1\n\
    \                q.append((x, y))\n            }\n        }\n    }\n    var ans\
    \ = [Int]()\n    var x = -1\n    var y = -1\n    for i in 0..<n {\n        for\
    \ j in 0..<m {\n            if dp[i][j] == k {\n                x = i\n      \
    \          y = j\n            }\n        }\n    }\n    while x != -1 && y != -1\
    \ {\n        ans.append(grid[x][y])\n        let p = prev[x][y]\n        x = p\
    \ / m\n        y = p % m\n    }\n    return ans.reversed()", "    let n = grid.count\n\
    \    var dp = Array(repeating: Array(repeating: Int.max, count: n), count: n)\n\
    \    for i in 0..<n {\n        for j in 0..<n {\n            if i == 0 && j ==\
    \ 0 {\n                dp[i][j] = 0\n            } else if i == 0 {\n        \
    \        dp[i][j] = dp[i][j - 1] + 1\n            } else if j == 0 {\n       \
    \         dp[i][j] = dp[i - 1][j] + 1\n            } else {\n                dp[i][j]\
    \ = min(dp[i - 1][j], dp[i][j - 1]) + 1\n            }\n        }\n    }\n   \
    \ var result = [Int]()\n    var i = n - 1\n    var j = n - 1\n    while k > 0\
    \ {\n        result.append(grid[i][j])\n        if i == 0 && j == 0 {\n      \
    \      break\n        } else if i == 0 {\n            j -= 1\n        } else if\
    \ j == 0 {\n            i -= 1\n        } else {\n            if dp[i - 1][j]\
    \ < dp[i][j - 1] {\n                i -= 1\n            } else {\n           \
    \     j -= 1\n            }\n        }\n        k -= 1\n    }\n    return result",
  '    return []', '    return []', "    let n = grid.count\n    var minPath = [Int]()\n\
    \    var minSum = Int.max\n    var minPaths = [[Int]]()\n    var visited = [[Bool]](repeating:\
    \ [Bool](repeating: false, count: n), count: n)\n    var path = [Int]()\n    var\
    \ sum = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            path.append(grid[i][j])\n\
    \            sum += grid[i][j]\n            visited[i][j] = true\n           \
    \ dfs(grid: grid, i: i, j: j, k: k, visited: &visited, path: &path, sum: &sum,\
    \ minPaths: &minPaths, minSum: &minSum)\n            path.removeLast()\n     \
    \       sum -= grid[i][j]\n            visited[i][j] = false\n        }\n    }\n\
    \    minPaths.sort()\n    return minPaths[0]", "    let n = grid.count\n    guard\
    \ n >= 2 else {\n        return []\n    }\n    guard k >= 1 else {\n        return\
    \ []\n    }\n    var minPath = [Int]()\n    var minSum = Int.max\n    for i in\
    \ 0..<n {\n        for j in 0..<n {\n            var sum = 0\n            var\
    \ path = [Int]()\n            var visited = [[Bool]](repeating: [Bool](repeating:\
    \ false, count: n), count: n)\n            dfs(grid: grid, i: i, j: j, k: k, sum:\
    \ &sum, path: &path, visited: &visited)\n            if sum < minSum {\n     \
    \           minSum = sum\n                minPath = path\n            }\n    \
    \    }\n    }\n    return minPath", "    // TODO:\n    return []", "    let n\
    \ = grid.count\n    var dp = Array(repeating: Array(repeating: Array(repeating:\
    \ Int.max, count: n), count: n), count: k + 1)\n    var prev = Array(repeating:\
    \ Array(repeating: Array(repeating: -1, count: n), count: n), count: k + 1)\n\
    \    for i in 0..<n {\n        for j in 0..<n {\n            dp[1][i][j] = grid[i][j]\n\
    \        }\n    }\n    for i in 2...k {\n        for x in 0..<n {\n          \
    \  for y in 0..<n {\n                for dx in -1...1 {\n                    for\
    \ dy in -1...1 {\n                        if dx == 0 && dy == 0 {\n          \
    \                  continue\n                        }\n                     \
    \   let nx = x + dx\n                        let ny = y + dy\n               \
    \         if nx < 0 || nx >= n || ny < 0 || ny >= n {\n                      \
    \      continue\n                        }\n                        if dp[i][x][y]\
    \ > dp[i - 1][nx][ny] {\n                            dp[i][x][y] = dp[i - 1][nx][ny]\n\
    \                            prev[i][x][y] = nx * n + ny\n                   \
    \     }\n                    }\n                }\n            }\n        }\n\
    \    }\n    var ans = [Int]()\n    var x = 0, y = 0\n    for i in stride(from:\
    \ k, through: 1, by: -1) {\n        ans.append(grid[x][y])\n        let nx = prev[i][x][y]\
    \ / n\n        let ny = prev[i][x][y] % n\n        x = nx\n        y = ny\n  \
    \  }\n    return ans", "    let n = grid.count\n    var minPath = [Int]()\n  \
    \  var minSum = Int.max\n    for i in 0..<n {\n        for j in 0..<n {\n    \
    \        var path = [Int]()\n            var sum = 0\n            var visited\
    \ = [[Bool]](repeating: [Bool](repeating: false, count: n), count: n)\n      \
    \      minPath(grid: grid, i: i, j: j, k: k, path: &path, sum: &sum, visited:\
    \ &visited)\n            if sum < minSum {\n                minSum = sum\n   \
    \             minPath = path\n            }\n        }\n    }\n    return minPath",
  '    return []', '    return []', "    let n = grid.count\n    var dp = [[Int]](repeating:\
    \ [Int](repeating: Int.max, count: n), count: n)\n    var visited = [[Bool]](repeating:\
    \ [Bool](repeating: false, count: n), count: n)\n    var queue = [(Int, Int, Int)]()\n\
    \    queue.append((0, 0, 0))\n    visited[0][0] = true\n    dp[0][0] = grid[0][0]\n\
    \    while !queue.isEmpty {\n        let (i, j, d) = queue.removeFirst()\n   \
    \     if d == k {\n            break\n        }\n        if i > 0 && !visited[i\
    \ - 1][j] {\n            visited[i - 1][j] = true\n            dp[i - 1][j] =\
    \ min(dp[i - 1][j], dp[i][j] + grid[i - 1][j])\n            queue.append((i -\
    \ 1, j, d + 1))\n        }\n        if i < n - 1 && !visited[i + 1][j] {\n   \
    \         visited[i + 1][j] = true\n            dp[i + 1][j] = min(dp[i + 1][j],\
    \ dp[i][j] + grid[i + 1][j])\n            queue.append((i + 1, j, d + 1))\n  \
    \      }\n        if j > 0 && !visited[i][j - 1] {\n            visited[i][j -\
    \ 1] = true\n            dp[i][j - 1] = min(dp[i][j - 1], dp[i][j] + grid[i][j\
    \ - 1])\n            queue.append((i, j - 1, d + 1))\n        }\n        if j\
    \ < n - 1 && !visited[i][j + 1] {\n            visited[i][j + 1] = true\n    \
    \        dp[i][j + 1] = min(dp[i][j + 1], dp[i][j] + grid[i][j + 1])\n       \
    \     queue.append((i, j + 1, d + 1))\n        }\n   ", "    let n = grid.count\n\
    \    var minPath = [Int]()\n    var minSum = Int.max\n    var minPaths = [[Int]]()\n\
    \    for i in 0..<n {\n        for j in 0..<n {\n            var path = [Int]()\n\
    \            var sum = 0\n            var paths = [[Int]]()\n            dfs(grid:\
    \ grid, i: i, j: j, k: k, path: &path, sum: &sum, paths: &paths)\n           \
    \ if sum < minSum {\n                minSum = sum\n                minPath = path\n\
    \                minPaths = paths\n            } else if sum == minSum {\n   \
    \             if path < minPath {\n                    minPath = path\n      \
    \              minPaths = paths\n                } else if path == minPath {\n\
    \                    minPaths.append(contentsOf: paths)\n                }\n \
    \           }\n        }\n    }\n    print(minPaths)\n    return minPath", " \
    \   let n = grid.count\n    var dp = Array(repeating: Array(repeating: Int.max,\
    \ count: n), count: n)\n    var pq = PriorityQueue<(Int, Int, Int)>(sort: { $0.0\
    \ < $1.0 })\n    dp[0][0] = 0\n    pq.push((0, 0, 0))\n    while !pq.isEmpty {\n\
    \        let (d, i, j) = pq.pop()!\n        if d > dp[i][j] {\n            continue\n\
    \        }\n        if d == k {\n            break\n        }\n        for (ni,\
    \ nj) in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)] {\n            if ni\
    \ >= 0 && ni < n && nj >= 0 && nj < n {\n                let nd = d + grid[ni][nj]\n\
    \                if nd < dp[ni][nj] {\n                    dp[ni][nj] = nd\n \
    \                   pq.push((nd, ni, nj))\n                }\n            }\n\
    \        }\n    }\n    var ans = [Int]()\n    var i = n - 1\n    var j = n - 1\n\
    \    while k > 0 {\n        ans.append(grid[i][j])\n        k -= 1\n        var\
    \ ni = -1\n        var nj = -1\n        var nd = Int.max\n        for (di, dj)\
    \ in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)] {\n            if di >=\
    \ 0 && di < n && dj >= 0 && dj < n {\n                let d = dp[di][dj]\n   \
    \             if d < nd {\n                    ni = di\n                    nj\
    \ = dj\n                    nd = d\n                }\n            }\n       \
    \ }\n        i = ni\n        j = nj\n    }\n    return ans.reversed()", "    let\
    \ n = grid.count\n    var dp = Array(repeating: Array(repeating: Int.max, count:\
    \ n), count: n)\n    var visited = Array(repeating: Array(repeating: false, count:\
    \ n), count: n)\n    var minPath = [Int]()\n    var minSum = Int.max\n    for\
    \ i in 0..<n {\n        for j in 0..<n {\n            dfs(grid: grid, i: i, j:\
    \ j, k: k, dp: &dp, visited: &visited, path: [], sum: 0, minPath: &minPath, minSum:\
    \ &minSum)\n        }\n    }\n    return minPath", "    let n = grid.count\n \
    \   var minPath = [Int]()\n    var minSum = Int.max\n    var minPaths = [[Int]]()\n\
    \    var visited = Array(repeating: Array(repeating: false, count: n), count:\
    \ n)\n    for i in 0..<n {\n        for j in 0..<n {\n            var path = [Int]()\n\
    \            var sum = 0\n            dfs(grid: grid, i: i, j: j, k: k, visited:\
    \ &visited, path: &path, sum: &sum)\n            if sum < minSum {\n         \
    \       minSum = sum\n                minPaths = [[Int]]()\n                minPaths.append(path)\n\
    \            } else if sum == minSum {\n                minPaths.append(path)\n\
    \            }\n        }\n    }\n    minPaths.sort()\n    return minPaths[0]",
  '    return []', "    // TODO:\n    return []", "    let n = grid.count\n    var\
    \ minPath = [Int]()\n    var minSum = Int.max\n    var minPaths = [[Int]]()\n\
    \    var visited = [[Bool]](repeating: [Bool](repeating: false, count: n), count:\
    \ n)\n    var path = [Int]()\n    var sum = 0\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            dfs(grid: grid, i: i, j: j, k: k, visited: &visited,\
    \ path: &path, sum: &sum, minPaths: &minPaths, minSum: &minSum)\n        }\n \
    \   }\n    return minPaths.first!", '    return []', "    let n = grid.count\n\
    \    var dp = [[[Int]]](repeating: [[Int]](repeating: [Int](repeating: Int.max,\
    \ count: n), count: n), count: k + 1)\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            dp[0][i][j] = grid[i][j]\n        }\n    }\n    for i in\
    \ 1...k {\n        for j in 0..<n {\n            for k in 0..<n {\n          \
    \      if j > 0 {\n                    dp[i][j][k] = min(dp[i][j][k], dp[i - 1][j\
    \ - 1][k])\n                }\n                if j < n - 1 {\n              \
    \      dp[i][j][k] = min(dp[i][j][k], dp[i - 1][j + 1][k])\n                }\n\
    \                if k > 0 {\n                    dp[i][j][k] = min(dp[i][j][k],\
    \ dp[i - 1][j][k - 1])\n                }\n                if k < n - 1 {\n  \
    \                  dp[i][j][k] = min(dp[i][j][k], dp[i - 1][j][k + 1])\n     \
    \           }\n            }\n        }\n    }\n    var res = [Int](repeating:\
    \ Int.max, count: k)\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if dp[k][i][j] < res[k - 1] {\n                res[k - 1] = dp[k][i][j]\n\
    \            }\n        }\n    }\n    return res", "    let n = grid.count\n \
    \   var visited = [[Bool]](repeating: [Bool](repeating: false, count: n), count:\
    \ n)\n    var minPath = [Int]()\n    var minSum = Int.max\n    var minPaths =\
    \ [[Int]]()\n    var path = [Int]()\n    var sum = 0\n    var paths = [[Int]]()\n\
    \    func dfs(_ i: Int, _ j: Int, _ k: Int) {\n        if i < 0 || i >= n || j\
    \ < 0 || j >= n || visited[i][j] || k < 0 {\n            return\n        }\n \
    \       if k == 0 {\n            if sum < minSum {\n                minSum = sum\n\
    \                minPaths = paths\n            } else if sum == minSum {\n   \
    \             minPaths.append(contentsOf: paths)\n            }\n            return\n\
    \        }\n        visited[i][j] = true\n        path.append(grid[i][j])\n  \
    \      sum += grid[i][j]\n        paths.append(path)\n        dfs(i - 1, j, k\
    \ - 1)\n        dfs(i + 1, j, k - 1)\n        dfs(i, j - 1, k - 1)\n        dfs(i,\
    \ j + 1, k - 1)\n        visited[i][j] = false\n        path.removeLast()\n  \
    \      sum -= grid[i][j]\n        paths.removeLast()\n    }\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            dfs(i, j, k)\n        }\n    }\n  \
    \  for path in minPaths {\n        if path.lexicographicallyPrecedes(minPath)\
    \ {\n            minPath = path\n        }\n    }\n    return minPath", "    let\
    \ n = grid.count\n    let m = grid[0].count\n    var dp = Array(repeating: Array(repeating:\
    \ Array(repeating: Int.max, count: k + 1), count: m), count: n)\n    var minPath\
    \ = Array(repeating: Array(repeating: Array(repeating: [Int](), count: k + 1),\
    \ count: m), count: n)\n    for i in 0..<n {\n        for j in 0..<m {\n     \
    \       dp[i][j][1] = grid[i][j]\n            minPath[i][j][1] = [grid[i][j]]\n\
    \        }\n    }\n    for i in 0..<n {\n        for j in 0..<m {\n          \
    \  for l in 2...k {\n                if i > 0 {\n                    if dp[i -\
    \ 1][j][l - 1] < dp[i][j][l] {\n                        dp[i][j][l] = dp[i - 1][j][l\
    \ - 1]\n                        minPath[i][j][l] = minPath[i - 1][j][l - 1]\n\
    \                        minPath[i][j][l].append(grid[i][j])\n               \
    \     } else if dp[i - 1][j][l - 1] == dp[i][j][l] {\n                       \
    \ let path = minPath[i - 1][j][l - 1]\n                        path.append(grid[i][j])\n\
    \                        if path < minPath[i][j][l] {\n                      \
    \      minPath[i][j][l] = path\n                        }\n                  \
    \  }\n                }\n                if j > 0 {\n                    if dp[i][j\
    \ - 1][l - 1] < dp[i][j][l] {\n                        dp[i][j][l] = dp[i][j -\
    \ 1][l - 1]\n                        minPath[i][j][l] = minPath[i][j - 1][l -\
    \ 1]\n                        minPath[i][j][l].append(grid[i][j])\n          \
    \          } else if dp[i][j - 1][l - 1] == dp", '    return []', "    // TODO:\n\
    \    return []", '    return []', "    let n = grid.count\n    guard n >= 2 &&\
    \ k >= 1 && k <= n * n else {\n        return []\n    }\n    var visited = Set<Int>()\n\
    \    var queue = [(0, 0, 0, [Int]())]\n    while !queue.isEmpty {\n        let\
    \ (i, j, d, path) = queue.removeFirst()\n        if d == k {\n            return\
    \ path\n        }\n        let id = i * n + j\n        if visited.contains(id)\
    \ {\n            continue\n        }\n        visited.insert(id)\n        let\
    \ nextPath = path + [grid[i][j]]\n        if i > 0 {\n            queue.append((i\
    \ - 1, j, d + 1, nextPath))\n        }\n        if i < n - 1 {\n            queue.append((i\
    \ + 1, j, d + 1, nextPath))\n        }\n        if j > 0 {\n            queue.append((i,\
    \ j - 1, d + 1, nextPath))\n        }\n        if j < n - 1 {\n            queue.append((i,\
    \ j + 1, d + 1, nextPath))\n        }\n    }\n    return []", "    let n = grid.count\n\
    \    var dp = Array(repeating: Array(repeating: Int.max, count: n), count: n)\n\
    \    var minPath = Array(repeating: Array(repeating: [Int](), count: n), count:\
    \ n)\n    for i in 0..<n {\n        for j in 0..<n {\n            if i == 0 &&\
    \ j == 0 {\n                dp[i][j] = grid[i][j]\n                minPath[i][j]\
    \ = [grid[i][j]]\n            } else if i == 0 {\n                dp[i][j] = dp[i][j\
    \ - 1] + grid[i][j]\n                minPath[i][j] = minPath[i][j - 1] + [grid[i][j]]\n\
    \            } else if j == 0 {\n                dp[i][j] = dp[i - 1][j] + grid[i][j]\n\
    \                minPath[i][j] = minPath[i - 1][j] + [grid[i][j]]\n          \
    \  } else {\n                if dp[i - 1][j] < dp[i][j - 1] {\n              \
    \      dp[i][j] = dp[i - 1][j] + grid[i][j]\n                    minPath[i][j]\
    \ = minPath[i - 1][j] + [grid[i][j]]\n                } else if dp[i - 1][j] >\
    \ dp[i][j - 1] {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j]\n \
    \                   minPath[i][j] = minPath[i][j - 1] + [grid[i][j]]\n       \
    \         } else {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j]\n\
    \                    if minPath[i - 1][j] < minPath[i][j - 1] {\n            \
    \            minPath[i][j] = minPath[i - 1][j] + [grid[i][j]]\n              \
    \      } else {\n                        minPath[i][j] = minPath[i][", "    let\
    \ n = grid.count\n    var minPath = [Int]()\n    var minSum = Int.max\n    var\
    \ minPaths = [[Int]]()\n    for i in 0..<n {\n        for j in 0..<n {\n     \
    \       let path = getMinPath(grid: grid, i: i, j: j, k: k)\n            let sum\
    \ = path.reduce(0, +)\n            if sum < minSum {\n                minSum =\
    \ sum\n                minPaths = [path]\n            } else if sum == minSum\
    \ {\n                minPaths.append(path)\n            }\n        }\n    }\n\
    \    minPaths.sort()\n    return minPaths[0]", "    let n = grid.count\n    var\
    \ dp = Array(repeating: Array(repeating: Int.max, count: n), count: n)\n    var\
    \ prev = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i\
    \ in 0..<n {\n        for j in 0..<n {\n            if i == 0 && j == 0 {\n  \
    \              dp[i][j] = grid[i][j]\n                prev[i][j] = -1\n      \
    \      } else if i == 0 {\n                dp[i][j] = dp[i][j - 1] + grid[i][j]\n\
    \                prev[i][j] = 1\n            } else if j == 0 {\n            \
    \    dp[i][j] = dp[i - 1][j] + grid[i][j]\n                prev[i][j] = 2\n  \
    \          } else {\n                if dp[i - 1][j] < dp[i][j - 1] {\n      \
    \              dp[i][j] = dp[i - 1][j] + grid[i][j]\n                    prev[i][j]\
    \ = 2\n                } else {\n                    dp[i][j] = dp[i][j - 1] +\
    \ grid[i][j]\n                    prev[i][j] = 1\n                }\n        \
    \    }\n        }\n    }\n    var res = [Int]()\n    var i = n - 1\n    var j\
    \ = n - 1\n    while k > 0 {\n        res.append(grid[i][j])\n        if prev[i][j]\
    \ == 1 {\n            j -= 1\n        } else if prev[i][j] == 2 {\n          \
    \  i -= 1\n        }\n        k -= 1\n    }\n    return res", "    let n = grid.count\n\
    \    var minPath = [Int]()\n    var minSum = Int.max\n    var minPaths = [[Int]]()\n\
    \    var visited = [[Bool]](repeating: [Bool](repeating: false, count: n), count:\
    \ n)\n    var path = [Int]()\n    var sum = 0\n    var paths = [[Int]]()\n   \
    \ var i = 0\n    var j = 0\n    while i < n {\n        while j < n {\n       \
    \     dfs(grid: grid, i: i, j: j, k: k, visited: &visited, path: &path, sum: &sum,\
    \ paths: &paths)\n            j += 1\n        }\n        i += 1\n    }\n    for\
    \ path in paths {\n        if path.count == k {\n            if sum < minSum {\n\
    \                minSum = sum\n                minPaths = [path]\n           \
    \ } else if sum == minSum {\n                minPaths.append(path)\n         \
    \   }\n        }\n    }\n    for path in minPaths {\n        if path < minPath\
    \ {\n            minPath = path\n        }\n    }\n    return minPath", "    let\
    \ n = grid.count\n    var dp = Array(repeating: Array(repeating: Array(repeating:\
    \ Int.max, count: n), count: n), count: k + 1)\n    for i in 0..<n {\n       \
    \ for j in 0..<n {\n            dp[1][i][j] = grid[i][j]\n        }\n    }\n \
    \   for l in 2...k {\n        for i in 0..<n {\n            for j in 0..<n {\n\
    \                for x in 0..<n {\n                    for y in 0..<n {\n    \
    \                    if abs(x - i) + abs(y - j) == 1 {\n                     \
    \       dp[l][i][j] = min(dp[l][i][j], dp[l - 1][x][y])\n                    \
    \    }\n                    }\n                }\n            }\n        }\n \
    \   }\n    var res = [Int]()\n    var minVal = Int.max\n    var minI = 0\n   \
    \ var minJ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if\
    \ dp[k][i][j] < minVal {\n                minVal = dp[k][i][j]\n             \
    \   minI = i\n                minJ = j\n            }\n        }\n    }\n    res.append(minVal)\n\
    \    var curI = minI\n    var curJ = minJ\n    for l in (1..<k).reversed() {\n\
    \        for x in 0..<n {\n            for y in 0..<n {\n                if abs(x\
    \ - curI) + abs(y - curJ) == 1 && dp[l][x][y] + grid[curI][curJ] == dp[l + 1][curI][curJ]\
    \ {\n                    res.append(dp[l][x][y])\n                    curI = x\n\
    \                    curJ = y\n                    break\n                }\n\
    \            }\n        }\n    }\n    return res.reversed()", "    var result\
    \ = [Int]()\n    var min = Int.max\n    var minPath = [Int]()\n    var visited\
    \ = [[Bool]](repeating: [Bool](repeating: false, count: grid.count), count: grid.count)\n\
    \    var queue = [(Int, Int, Int, [Int])]()\n    queue.append((0, 0, 0, [grid[0][0]]))\n\
    \    while !queue.isEmpty {\n        let (i, j, count, path) = queue.removeFirst()\n\
    \        if count == k {\n            if path.lexicographicallyPrecedes(minPath)\
    \ {\n                minPath = path\n            }\n            continue\n   \
    \     }\n        if i > 0 && !visited[i - 1][j] {\n            visited[i - 1][j]\
    \ = true\n            var newPath = path\n            newPath.append(grid[i -\
    \ 1][j])\n            queue.append((i - 1, j, count + 1, newPath))\n        }\n\
    \        if i < grid.count - 1 && !visited[i + 1][j] {\n            visited[i\
    \ + 1][j] = true\n            var newPath = path\n            newPath.append(grid[i\
    \ + 1][j])\n            queue.append((i + 1, j, count + 1, newPath))\n       \
    \ }\n        if j > 0 && !visited[i][j - 1] {\n            visited[i][j - 1] =\
    \ true\n            var newPath = path\n            newPath.append(grid[i][j -\
    \ 1])\n            queue.append((i, j - 1, count + 1, newPath))\n        }\n \
    \       if j < grid.count - 1 && !visited[i][j + 1] {\n            visited[i][j\
    \ + 1] = true\n            var newPath = path\n            newPath.append(grid[i][j\
    \ + 1])\n            queue.append((i, j + 1, count + 1, newPath))\n        }\n\
    \    }\n    return minPath", "    let n = grid.count\n    var dp = Array(repeating:\
    \ Array(repeating: Int.max, count: n), count: n)\n    var visited = Array(repeating:\
    \ Array(repeating: false, count: n), count: n)\n    var queue = [(0, 0, 0)]\n\
    \    dp[0][0] = grid[0][0]\n    visited[0][0] = true\n    while !queue.isEmpty\
    \ {\n        let (x, y, step) = queue.removeFirst()\n        if step == k {\n\
    \            continue\n        }\n        for (dx, dy) in [(0, 1), (0, -1), (1,\
    \ 0), (-1, 0)] {\n            let nx = x + dx\n            let ny = y + dy\n \
    \           if nx < 0 || nx >= n || ny < 0 || ny >= n {\n                continue\n\
    \            }\n            if visited[nx][ny] {\n                continue\n \
    \           }\n            let newVal = dp[x][y] * 10 + grid[nx][ny]\n       \
    \     if newVal < dp[nx][ny] {\n                dp[nx][ny] = newVal\n        \
    \        queue.append((nx, ny, step + 1))\n            }\n        }\n    }\n \
    \   var result = [Int]()\n    var val = dp[n - 1][n - 1]\n    while val > 0 {\n\
    \        result.append(val % 10)\n        val /= 10\n    }\n    return result.reversed()",
  '    return []', "    let n = grid.count\n    var dp = Array(repeating: Array(repeating:\
    \ Array(repeating: Int.max, count: n), count: n), count: k + 1)\n    for i in\
    \ 0..<n {\n        for j in 0..<n {\n            dp[1][i][j] = grid[i][j]\n  \
    \      }\n    }\n    for l in 2...k {\n        for i in 0..<n {\n            for\
    \ j in 0..<n {\n                for x in [i - 1, i, i + 1] {\n               \
    \     for y in [j - 1, j, j + 1] {\n                        if x >= 0 && x < n\
    \ && y >= 0 && y < n {\n                            dp[l][i][j] = min(dp[l][i][j],\
    \ dp[l - 1][x][y])\n                        }\n                    }\n       \
    \         }\n                dp[l][i][j] += grid[i][j]\n            }\n      \
    \  }\n    }\n    var res = [Int]()\n    var min = Int.max\n    var x = 0\n   \
    \ var y = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if dp[k][i][j]\
    \ < min {\n                min = dp[k][i][j]\n                x = i\n        \
    \        y = j\n            }\n        }\n    }\n    res.append(grid[x][y])\n\
    \    for l in stride(from: k - 1, through: 1, by: -1) {\n        for i in [x -\
    \ 1, x, x + 1] {\n            for j in [y - 1, y, y + 1] {\n                if\
    \ i >= 0 && i < n && j >= 0 && j < n && dp[l][i][j] + grid[x][y] == dp[l + 1][x][y]\
    \ {\n                    x = i\n                    y = j\n                  \
    \  res.append(grid[x][y])\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return res", "    let n = grid.count\n    var\
    \ dp = [[Int]](repeating: [Int](repeating: Int.max, count: n), count: n)\n   \
    \ var prev = [[Int]](repeating: [Int](repeating: -1, count: n), count: n)\n  \
    \  var q = [(Int, Int)]()\n    for i in 0..<n {\n        for j in 0..<n {\n  \
    \          if grid[i][j] == 1 {\n                dp[i][j] = 0\n              \
    \  q.append((i, j))\n            }\n        }\n    }\n    while !q.isEmpty {\n\
    \        let (i, j) = q.removeFirst()\n        if i > 0 && dp[i - 1][j] > dp[i][j]\
    \ + 1 {\n            dp[i - 1][j] = dp[i][j] + 1\n            prev[i - 1][j] =\
    \ i * n + j\n            q.append((i - 1, j))\n        }\n        if i < n - 1\
    \ && dp[i + 1][j] > dp[i][j] + 1 {\n            dp[i + 1][j] = dp[i][j] + 1\n\
    \            prev[i + 1][j] = i * n + j\n            q.append((i + 1, j))\n  \
    \      }\n        if j > 0 && dp[i][j - 1] > dp[i][j] + 1 {\n            dp[i][j\
    \ - 1] = dp[i][j] + 1\n            prev[i][j - 1] = i * n + j\n            q.append((i,\
    \ j - 1))\n        }\n        if j < n - 1 && dp[i][j + 1] > dp[i][j] + 1 {\n\
    \            dp[i][j + 1] = dp[i][j] + 1\n            prev[i][j + 1] = i * n +\
    \ j\n            q.append((i, j + 1))\n        }\n    }\n    var result = [Int]()\n\
    \    var i = 0, j = 0\n    while k > 0"]
stop_tokens:
- "\n}"
