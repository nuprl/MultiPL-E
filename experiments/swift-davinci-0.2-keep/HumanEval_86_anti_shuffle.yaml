name: HumanEval_86_anti_shuffle
language: swift
prompt: "\n/// Write a function that takes a string and returns an ordered version\
  \ of it.\n/// Ordered version of string, is a string where all words (separated\
  \ by space)\n/// are replaced by a new word where all the characters arranged in\n\
  /// ascending order based on ascii value.\n/// Note: You should keep the order of\
  \ words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
  \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
  \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
  \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
  assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\"\
  ) == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s:\
  \ \"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
  \ How aer ?ouy\")"
completions: ["    let words = s.components(separatedBy: \" \")\n    let sortedWords\
    \ = words.map { String($0.sorted()) }\n    return sortedWords.joined(separator:\
    \ \" \")", '    return s.split(separator: " ").map { String($0.sorted()) }.joined(separator:
    " ")', "    var result = \"\"\n    for word in s.components(separatedBy: \" \"\
    ) {\n        result += String(word.sorted()) + \" \"\n    }\n    return String(result.dropLast())",
  "    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n     \
    \   if c == \" \" {\n            result += word.characters.sorted().map { String($0)\
    \ }.joined()\n            result += \" \"\n            word = \"\"\n        }\
    \ else {\n            word += String(c)\n        }\n    }\n    result += word.characters.sorted().map\
    \ { String($0) }.joined()\n    return result", '    return ""', '    return s.components(separatedBy:
    " ").map { $0.sorted() }.joined(separator: " ")', "    var result = \"\"\n   \
    \ var word = \"\"\n    for c in s.characters {\n        if c == \" \" {\n    \
    \        result += word\n            result += \" \"\n            word = \"\"\n\
    \        } else {\n            word += String(c)\n            word = String(word.characters.sorted())\n\
    \        }\n    }\n    result += word\n    return result", "    var result = \"\
    \"\n    var word = \"\"\n    for char in s.characters {\n        if char == \"\
    \ \" {\n            result += word.characters.sorted().map { String($0) }.joined()\n\
    \            result += \" \"\n            word = \"\"\n        } else {\n    \
    \        word += String(char)\n        }\n    }\n    result += word.characters.sorted().map\
    \ { String($0) }.joined()\n    return result", "    var result = \"\"\n    var\
    \ word = \"\"\n    for c in s.characters {\n        if c == \" \" {\n        \
    \    result += word.characters.sorted().map{String($0)}.joined(separator: \"\"\
    ) + \" \"\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    result += word.characters.sorted().map{String($0)}.joined(separator:\
    \ \"\")\n    return result", '    return s.split(separator: " ").map { String($0.sorted())
    }.joined(separator: " ")', "    let words = s.components(separatedBy: \" \")\n\
    \    var result = \"\"\n    for word in words {\n        let sortedWord = String(word.sorted())\n\
    \        result += sortedWord + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)", "    var result = \"\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        let sortedWord = String(word.sorted())\n\
    \        result += sortedWord + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)", "    var result = \"\"\n    var word = \"\"\n    for char in\
    \ s.characters {\n        if char == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", +)\n            result += \" \"\n            word = \"\"\n        } else {\n\
    \            word += String(char)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", +)\n    return result", "    var result = \"\"\n    var word = \"\"\n    for\
    \ char in s.characters {\n        if char == \" \" {\n            result += word.characters.sorted().map\
    \ { String($0) }.joined()\n            result += \" \"\n            word = \"\"\
    \n        } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.characters.sorted().map { String($0) }.joined()\n    return result",
  "    var result = \"\"\n    var word = \"\"\n    for char in s.characters {\n  \
    \      if char == \" \" {\n            result += word + \" \"\n            word\
    \ = \"\"\n        } else {\n            word += String(char)\n        }\n    }\n\
    \    result += word\n    return result", '    return s.components(separatedBy:
    " ").map { $0.sorted() }.joined(separator: " ")', '    return s.split(separator:
    " ").map { String($0.sorted()) }.joined(separator: " ")', '    return s.components(separatedBy:
    " ").map { $0.sorted() }.joined(separator: " ")', "    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        result += String(word.sorted())\
    \ + \" \"\n    }\n    return result.trimmingCharacters(in: .whitespaces)", " \
    \   var result = \"\"\n    var word = \"\"\n    for char in s.characters {\n \
    \       if char == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)}) + \" \"\n            word = \"\"\n        } else {\n  \
    \          word += String(char)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n    return result"]
stop_tokens:
- "\n}"
