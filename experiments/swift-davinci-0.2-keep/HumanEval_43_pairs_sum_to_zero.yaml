name: HumanEval_43_pairs_sum_to_zero
language: swift
prompt: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
  \ True if there are two distinct elements in the list that\n/// sum to zero, and\
  \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
  \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
  \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
  /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) -> Bool\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
  assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
  \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\n\
  assert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9,\
  \ -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) ==\
  \ true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l:\
  \ [-3, 9, -1, 4, 2, 31]) == false)"
completions: ["    // YOUR CODE GOES HERE\n    return false", "    var set: Set<Int>\
    \ = []\n    for i in l {\n        if set.contains(-i) {\n            return true\n\
    \        }\n        set.insert(i)\n    }\n    return false", "    // YOUR CODE\
    \ GOES HERE\n    return false", "    var set = Set<Int>()\n    for i in l {\n\
    \        if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", '    return false', "    // YOUR CODE GOES HERE\n \
    \   return false", '    return false', "    var set = Set<Int>()\n    for i in\
    \ l {\n        if set.contains(-i) {\n            return true\n        }\n   \
    \     set.insert(i)\n    }\n    return false", "    var dict: [Int: Int] = [:]\n\
    \    for i in l {\n        if dict[i] != nil {\n            return true\n    \
    \    }\n        dict[-i] = i\n    }\n    return false", "    var seen: Set<Int>\
    \ = []\n    for i in l {\n        if seen.contains(-i) {\n            return true\n\
    \        }\n        seen.insert(i)\n    }\n    return false", "    var i = 0\n\
    \    var j = 0\n    for i in 0..<l.count {\n        for j in 0..<l.count {\n \
    \           if i != j && l[i] + l[j] == 0 {\n                return true\n   \
    \         }\n        }\n    }\n    return false", "    var sum = 0\n    for i\
    \ in l {\n        sum += i\n    }\n    if sum == 0 {\n        return true\n  \
    \  }\n    return false", "    var set = Set<Int>()\n    for i in l {\n       \
    \ if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var set = Set<Int>()\n    for i in l {\n     \
    \   if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    // YOUR CODE GOES HERE\n    return false", " \
    \   if l.count < 2 {\n        return false\n    }\n    for i in 0..<l.count {\n\
    \        for j in i+1..<l.count {\n            if l[i] + l[j] == 0 {\n       \
    \         return true\n            }\n        }\n    }\n    return false", " \
    \   var set: Set<Int> = []\n    for i in l {\n        if set.contains(-i) {\n\
    \            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var s = Set<Int>()\n    for i in l {\n        if s.contains(-i)\
    \ {\n            return true\n        }\n        s.insert(i)\n    }\n    return\
    \ false", "    var dict: [Int: Int] = [:]\n    for i in l {\n        if dict[i]\
    \ != nil {\n            return true\n        }\n        dict[-i] = 1\n    }\n\
    \    return false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false"]
stop_tokens:
- "\n}"
