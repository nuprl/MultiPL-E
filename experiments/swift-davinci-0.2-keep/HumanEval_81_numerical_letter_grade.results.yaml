language: swift
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      switch grade {\n        case 4.0:\n            result.append(\"A+\")\n\
    \        case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        default:\n            result.append(\"E\")\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1cskcr2g/tmp1cskcr2g.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b34192c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b33e89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b33e89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b33e887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1cskcr2g                        0x0000560cf25ab8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b6b3437e460 __libc_start_main +
    245

    6    tmp1cskcr2g                        0x0000560cf25ab3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp7njyvvb9/tmp7njyvvb9.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf74d2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf74a26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf74a26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf74a257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7njyvvb9                        0x0000561ae80c6926 <unavailable> + 6438

    5    libc.so.6                          0x00002aaf74f1b460 __libc_start_main +
    245

    6    tmp7njyvvb9                        0x0000561ae80c6449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade > 3.7 {\n            letter_grades.append(\"A\")\n     \
    \   } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n      \
    \  } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n       \
    \ } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letter_grades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letter_grades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letter_grades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letter_grades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letter_grades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letter_grades.append(\"D-\")\n        } else {\n            letter_grades.append(\"\
    E\")\n        }\n    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    return grades.map {\n        switch $0 {\n        case 4.0:\n\
    \            return \"A+\"\n        case 3.7..<4.0:\n            return \"A\"\n\
    \        case 3.3..<3.7:\n            return \"A-\"\n        case 3.0..<3.3:\n\
    \            return \"B+\"\n        case 2.7..<3.0:\n            return \"B\"\n\
    \        case 2.3..<2.7:\n            return \"B-\"\n        case 2.0..<2.3:\n\
    \            return \"C+\"\n        case 1.7..<2.0:\n            return \"C\"\n\
    \        case 1.3..<1.7:\n            return \"C-\"\n        case 1.0..<1.3:\n\
    \            return \"D+\"\n        case 0.7..<1.0:\n            return \"D\"\n\
    \        case 0.0..<0.7:\n            return \"D-\"\n        default:\n      \
    \      return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdja9us_w/tmpdja9us_w.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61c832cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61c8023b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61c8023988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61c80227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdja9us_w                        0x000055e9712e97b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b61c8518460 __libc_start_main +
    245

    6    tmpdja9us_w                        0x000055e9712e92d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpj2w1eoh4/tmpj2w1eoh4.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e10f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e0dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2w1eoh4                        0x000055c33c3757a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b78e12e0460 __libc_start_main +
    245

    6    tmpj2w1eoh4                        0x000055c33c3752c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      switch grade {\n        case 4.0:\n            result.append(\"A+\")\n\
    \        case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        default:\n            result.append(\"E\")\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1cskcr2g/tmp1cskcr2g.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b34192c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b33e89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b33e89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b33e887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1cskcr2g                        0x0000560cf25ab8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b6b3437e460 __libc_start_main +
    245

    6    tmp1cskcr2g                        0x0000560cf25ab3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg0avl9a3/tmpg0avl9a3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7616a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0avl9a3                        0x0000562c53f9b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba761890460 __libc_start_main +
    245

    6    tmpg0avl9a3                        0x0000562c53f9b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpj2w1eoh4/tmpj2w1eoh4.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e10f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e0dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2w1eoh4                        0x000055c33c3757a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b78e12e0460 __libc_start_main +
    245

    6    tmpj2w1eoh4                        0x000055c33c3752c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      switch grade {\n        case 4.0:\n            result.append(\"A+\")\n\
    \        case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        default:\n            result.append(\"E\")\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1cskcr2g/tmp1cskcr2g.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b34192c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b33e89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b33e89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b33e887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1cskcr2g                        0x0000560cf25ab8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b6b3437e460 __libc_start_main +
    245

    6    tmp1cskcr2g                        0x0000560cf25ab3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade > 3.7 {\n            letter_grades.append(\"A\")\n     \
    \   } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n      \
    \  } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n       \
    \ } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letter_grades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letter_grades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letter_grades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letter_grades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letter_grades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letter_grades.append(\"D-\")\n        } else {\n            letter_grades.append(\"\
    E\")\n        }\n    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp52aaxb2m/tmp52aaxb2m.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76c3790c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76c3487b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76c3487988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76c34867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52aaxb2m                        0x000056346698b8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b76c397c460 __libc_start_main +
    245

    6    tmp52aaxb2m                        0x000056346698b3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpwpvmyvps/tmpwpvmyvps.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e60885c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e6057cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e6057c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e6057b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpvmyvps                        0x0000556fe0f608d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b3e60a71460 __libc_start_main +
    245

    6    tmpwpvmyvps                        0x0000556fe0f603f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result = [String]()\n    for grade in grades {\n    \
    \    if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if grade\
    \ >= 3.7 {\n            result.append(\"A\")\n        } else if grade >= 3.3 {\n\
    \            result.append(\"A-\")\n        } else if grade >= 3.0 {\n       \
    \     result.append(\"B+\")\n        } else if grade >= 2.7 {\n            result.append(\"\
    B\")\n        } else if grade >= 2.3 {\n            result.append(\"B-\")\n  \
    \      } else if grade >= 2.0 {\n            result.append(\"C+\")\n        }\
    \ else if grade >= 1.7 {\n            result.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            result.append(\"C-\")\n        } else if grade >=\
    \ 1.0 {\n            result.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            result.append(\"D\")\n        } else if grade >= 0.0 {\n        \
    \    result.append(\"D-\")\n        } else {\n            result.append(\"E\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppk4_5yff/tmppk4_5yff.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f6b0b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f6adacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f6adac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f6adab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppk4_5yff                        0x000055ac9ba6e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b5f6b2a1460 __libc_start_main +
    245

    6    tmppk4_5yff                        0x000055ac9ba6e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpj2w1eoh4/tmpj2w1eoh4.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e10f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e0dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2w1eoh4                        0x000055c33c3757a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b78e12e0460 __libc_start_main +
    245

    6    tmpj2w1eoh4                        0x000055c33c3752c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result = [String]()\n    for grade in grades {\n    \
    \    if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if grade\
    \ >= 3.7 {\n            result.append(\"A\")\n        } else if grade >= 3.3 {\n\
    \            result.append(\"A-\")\n        } else if grade >= 3.0 {\n       \
    \     result.append(\"B+\")\n        } else if grade >= 2.7 {\n            result.append(\"\
    B\")\n        } else if grade >= 2.3 {\n            result.append(\"B-\")\n  \
    \      } else if grade >= 2.0 {\n            result.append(\"C+\")\n        }\
    \ else if grade >= 1.7 {\n            result.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            result.append(\"C-\")\n        } else if grade >=\
    \ 1.0 {\n            result.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            result.append(\"D\")\n        } else if grade >= 0.0 {\n        \
    \    result.append(\"D-\")\n        } else {\n            result.append(\"E\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppk4_5yff/tmppk4_5yff.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f6b0b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f6adacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f6adac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f6adab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppk4_5yff                        0x000055ac9ba6e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b5f6b2a1460 __libc_start_main +
    245

    6    tmppk4_5yff                        0x000055ac9ba6e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp52aaxb2m/tmp52aaxb2m.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76c3790c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76c3487b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76c3487988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76c34867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52aaxb2m                        0x000056346698b8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b76c397c460 __libc_start_main +
    245

    6    tmp52aaxb2m                        0x000056346698b3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg0avl9a3/tmpg0avl9a3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7616a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0avl9a3                        0x0000562c53f9b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba761890460 __libc_start_main +
    245

    6    tmpg0avl9a3                        0x0000562c53f9b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpj2w1eoh4/tmpj2w1eoh4.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e10f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e0dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2w1eoh4                        0x000055c33c3757a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b78e12e0460 __libc_start_main +
    245

    6    tmpj2w1eoh4                        0x000055c33c3752c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    // Write your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpy5rhxr27/tmpy5rhxr27.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09dea38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09de72fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09de72f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09de72e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5rhxr27                        0x000055b2a4bbc5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b09dec24460 __libc_start_main +
    245

    6    tmpy5rhxr27                        0x000055b2a4bbc109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpj2w1eoh4/tmpj2w1eoh4.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e10f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e0dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2w1eoh4                        0x000055c33c3757a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b78e12e0460 __libc_start_main +
    245

    6    tmpj2w1eoh4                        0x000055c33c3752c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade > 3.7 {\n            letter_grades.append(\"A\")\n     \
    \   } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n      \
    \  } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n       \
    \ } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letter_grades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letter_grades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letter_grades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letter_grades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letter_grades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letter_grades.append(\"D-\")\n        } else {\n            letter_grades.append(\"\
    E\")\n        }\n    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    return grades.map {\n        switch $0 {\n        case 4.0:\n\
    \            return \"A+\"\n        case 3.7..<4.0:\n            return \"A\"\n\
    \        case 3.3..<3.7:\n            return \"A-\"\n        case 3.0..<3.3:\n\
    \            return \"B+\"\n        case 2.7..<3.0:\n            return \"B\"\n\
    \        case 2.3..<2.7:\n            return \"B-\"\n        case 2.0..<2.3:\n\
    \            return \"C+\"\n        case 1.7..<2.0:\n            return \"C\"\n\
    \        case 1.3..<1.7:\n            return \"C-\"\n        case 1.0..<1.3:\n\
    \            return \"D+\"\n        case 0.7..<1.0:\n            return \"D\"\n\
    \        case 0.0..<0.7:\n            return \"D-\"\n        default:\n      \
    \      return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdja9us_w/tmpdja9us_w.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61c832cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61c8023b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61c8023988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61c80227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdja9us_w                        0x000055e9712e97b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b61c8518460 __libc_start_main +
    245

    6    tmpdja9us_w                        0x000055e9712e92d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    return grades.map {\n        switch $0 {\n        case 4.0:\
    \ return \"A+\"\n        case 3.7..<4.0: return \"A\"\n        case 3.3..<3.7:\
    \ return \"A-\"\n        case 3.0..<3.3: return \"B+\"\n        case 2.7..<3.0:\
    \ return \"B\"\n        case 2.3..<2.7: return \"B-\"\n        case 2.0..<2.3:\
    \ return \"C+\"\n        case 1.7..<2.0: return \"C\"\n        case 1.3..<1.7:\
    \ return \"C-\"\n        case 1.0..<1.3: return \"D+\"\n        case 0.7..<1.0:\
    \ return \"D\"\n        case 0.0..<0.7: return \"D-\"\n        default: return\
    \ \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpixm_0u8t/tmpixm_0u8t.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84d6d01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84d69f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84d69f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84d69f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpixm_0u8t                        0x000055a84f72e7b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b84d6eed460 __libc_start_main +
    245

    6    tmpixm_0u8t                        0x000055a84f72e2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    return grades.map {\n        switch $0 {\n        case 4.0:\n\
    \            return \"A+\"\n        case 3.7..<4.0:\n            return \"A\"\n\
    \        case 3.3..<3.7:\n            return \"A-\"\n        case 3.0..<3.3:\n\
    \            return \"B+\"\n        case 2.7..<3.0:\n            return \"B\"\n\
    \        case 2.3..<2.7:\n            return \"B-\"\n        case 2.0..<2.3:\n\
    \            return \"C+\"\n        case 1.7..<2.0:\n            return \"C\"\n\
    \        case 1.3..<1.7:\n            return \"C-\"\n        case 1.0..<1.3:\n\
    \            return \"D+\"\n        case 0.7..<1.0:\n            return \"D\"\n\
    \        case 0.0..<0.7:\n            return \"D-\"\n        default:\n      \
    \      return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdja9us_w/tmpdja9us_w.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61c832cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61c8023b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61c8023988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61c80227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdja9us_w                        0x000055e9712e97b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b61c8518460 __libc_start_main +
    245

    6    tmpdja9us_w                        0x000055e9712e92d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letters: [String] = []\n    for grade in grades {\n \
    \       if grade >= 4.0 {\n            letters.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            letters.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            letters.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            letters.append(\"B+\")\n        } else if grade >= 2.7 {\n  \
    \          letters.append(\"B\")\n        } else if grade >= 2.3 {\n         \
    \   letters.append(\"B-\")\n        } else if grade >= 2.0 {\n            letters.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            letters.append(\"C\")\n \
    \       } else if grade >= 1.3 {\n            letters.append(\"C-\")\n       \
    \ } else if grade >= 1.0 {\n            letters.append(\"D+\")\n        } else\
    \ if grade >= 0.7 {\n            letters.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letters.append(\"D-\")\n        } else {\n           \
    \ letters.append(\"E\")\n        }\n    }\n    return letters\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpblie8lnt/tmpblie8lnt.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f5f11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f5c08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f5c08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f5c077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblie8lnt                        0x00005586189597a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ab9f60fd460 __libc_start_main +
    245

    6    tmpblie8lnt                        0x00005586189592c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    return grades.map {\n        switch $0 {\n        case 4.0:\
    \ return \"A+\"\n        case 3.7..<4.0: return \"A\"\n        case 3.3..<3.7:\
    \ return \"A-\"\n        case 3.0..<3.3: return \"B+\"\n        case 2.7..<3.0:\
    \ return \"B\"\n        case 2.3..<2.7: return \"B-\"\n        case 2.0..<2.3:\
    \ return \"C+\"\n        case 1.7..<2.0: return \"C\"\n        case 1.3..<1.7:\
    \ return \"C-\"\n        case 1.0..<1.3: return \"D+\"\n        case 0.7..<1.0:\
    \ return \"D\"\n        case 0.0..<0.7: return \"D-\"\n        default: return\
    \ \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpixm_0u8t/tmpixm_0u8t.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84d6d01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84d69f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84d69f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84d69f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpixm_0u8t                        0x000055a84f72e7b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b84d6eed460 __libc_start_main +
    245

    6    tmpixm_0u8t                        0x000055a84f72e2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpj2w1eoh4/tmpj2w1eoh4.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e10f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e0dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2w1eoh4                        0x000055c33c3757a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b78e12e0460 __libc_start_main +
    245

    6    tmpj2w1eoh4                        0x000055c33c3752c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpj2w1eoh4/tmpj2w1eoh4.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e10f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e0dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2w1eoh4                        0x000055c33c3757a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b78e12e0460 __libc_start_main +
    245

    6    tmpj2w1eoh4                        0x000055c33c3752c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      switch grade {\n        case 4.0:\n            result.append(\"A+\")\n\
    \        case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        default:\n            result.append(\"E\")\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1cskcr2g/tmp1cskcr2g.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b34192c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b33e89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b33e89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b33e887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1cskcr2g                        0x0000560cf25ab8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b6b3437e460 __libc_start_main +
    245

    6    tmp1cskcr2g                        0x0000560cf25ab3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg0avl9a3/tmpg0avl9a3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7616a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0avl9a3                        0x0000562c53f9b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba761890460 __libc_start_main +
    245

    6    tmpg0avl9a3                        0x0000562c53f9b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg0avl9a3/tmpg0avl9a3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7616a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0avl9a3                        0x0000562c53f9b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba761890460 __libc_start_main +
    245

    6    tmpg0avl9a3                        0x0000562c53f9b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    return grades.map {\n        switch $0 {\n        case 4.0:\n\
    \            return \"A+\"\n        case 3.7..<4.0:\n            return \"A\"\n\
    \        case 3.3..<3.7:\n            return \"A-\"\n        case 3.0..<3.3:\n\
    \            return \"B+\"\n        case 2.7..<3.0:\n            return \"B\"\n\
    \        case 2.3..<2.7:\n            return \"B-\"\n        case 2.0..<2.3:\n\
    \            return \"C+\"\n        case 1.7..<2.0:\n            return \"C\"\n\
    \        case 1.3..<1.7:\n            return \"C-\"\n        case 1.0..<1.3:\n\
    \            return \"D+\"\n        case 0.7..<1.0:\n            return \"D\"\n\
    \        case 0.0..<0.7:\n            return \"D-\"\n        default:\n      \
    \      return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdja9us_w/tmpdja9us_w.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61c832cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61c8023b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61c8023988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61c80227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdja9us_w                        0x000055e9712e97b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b61c8518460 __libc_start_main +
    245

    6    tmpdja9us_w                        0x000055e9712e92d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp52aaxb2m/tmp52aaxb2m.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76c3790c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76c3487b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76c3487988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76c34867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52aaxb2m                        0x000056346698b8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b76c397c460 __libc_start_main +
    245

    6    tmp52aaxb2m                        0x000056346698b3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      switch grade {\n        case 4.0:\n            result.append(\"A+\")\n\
    \        case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        default:\n            result.append(\"E\")\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1cskcr2g/tmp1cskcr2g.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b34192c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b33e89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b33e89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b33e887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1cskcr2g                        0x0000560cf25ab8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b6b3437e460 __libc_start_main +
    245

    6    tmp1cskcr2g                        0x0000560cf25ab3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpj2w1eoh4/tmpj2w1eoh4.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e10f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e0dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2w1eoh4                        0x000055c33c3757a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b78e12e0460 __libc_start_main +
    245

    6    tmpj2w1eoh4                        0x000055c33c3752c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result = [String]()\n    for grade in grades {\n    \
    \    if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if grade\
    \ >= 3.7 {\n            result.append(\"A\")\n        } else if grade >= 3.3 {\n\
    \            result.append(\"A-\")\n        } else if grade >= 3.0 {\n       \
    \     result.append(\"B+\")\n        } else if grade >= 2.7 {\n            result.append(\"\
    B\")\n        } else if grade >= 2.3 {\n            result.append(\"B-\")\n  \
    \      } else if grade >= 2.0 {\n            result.append(\"C+\")\n        }\
    \ else if grade >= 1.7 {\n            result.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            result.append(\"C-\")\n        } else if grade >=\
    \ 1.0 {\n            result.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            result.append(\"D\")\n        } else if grade >= 0.0 {\n        \
    \    result.append(\"D-\")\n        } else {\n            result.append(\"E\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppk4_5yff/tmppk4_5yff.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f6b0b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f6adacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f6adac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f6adab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppk4_5yff                        0x000055ac9ba6e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b5f6b2a1460 __libc_start_main +
    245

    6    tmppk4_5yff                        0x000055ac9ba6e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpj2w1eoh4/tmpj2w1eoh4.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e10f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e0dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2w1eoh4                        0x000055c33c3757a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b78e12e0460 __libc_start_main +
    245

    6    tmpj2w1eoh4                        0x000055c33c3752c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg0avl9a3/tmpg0avl9a3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7616a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0avl9a3                        0x0000562c53f9b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba761890460 __libc_start_main +
    245

    6    tmpg0avl9a3                        0x0000562c53f9b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade == 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade > 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n        } else\
    \ if grade > 3.0 {\n            letter_grades.append(\"B+\")\n        } else if\
    \ grade > 2.7 {\n            letter_grades.append(\"B\")\n        } else if grade\
    \ > 2.3 {\n            letter_grades.append(\"B-\")\n        } else if grade >\
    \ 2.0 {\n            letter_grades.append(\"C+\")\n        } else if grade > 1.7\
    \ {\n            letter_grades.append(\"C\")\n        } else if grade > 1.3 {\n\
    \            letter_grades.append(\"C-\")\n        } else if grade > 1.0 {\n \
    \           letter_grades.append(\"D+\")\n        } else if grade > 0.7 {\n  \
    \          letter_grades.append(\"D\")\n        } else if grade > 0.0 {\n    \
    \        letter_grades.append(\"D-\")\n        } else {\n            letter_grades.append(\"\
    E\")\n        }\n    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014026
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        if grade == 4.0 {\n            letterGrades.append(\"A+\")\n        }\
    \ else if grade > 3.7 {\n            letterGrades.append(\"A\")\n        } else\
    \ if grade > 3.3 {\n            letterGrades.append(\"A-\")\n        } else if\
    \ grade > 3.0 {\n            letterGrades.append(\"B+\")\n        } else if grade\
    \ > 2.7 {\n            letterGrades.append(\"B\")\n        } else if grade > 2.3\
    \ {\n            letterGrades.append(\"B-\")\n        } else if grade > 2.0 {\n\
    \            letterGrades.append(\"C+\")\n        } else if grade > 1.7 {\n  \
    \          letterGrades.append(\"C\")\n        } else if grade > 1.3 {\n     \
    \       letterGrades.append(\"C-\")\n        } else if grade > 1.0 {\n       \
    \     letterGrades.append(\"D+\")\n        } else if grade > 0.7 {\n         \
    \   letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n            letterGrades.append(\"\
    D-\")\n        } else {\n            letterGrades.append(\"E\")\n        }\n \
    \   }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg0avl9a3/tmpg0avl9a3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7616a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0avl9a3                        0x0000562c53f9b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba761890460 __libc_start_main +
    245

    6    tmpg0avl9a3                        0x0000562c53f9b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppqu01fjs/tmppqu01fjs.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafec5c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafec2b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafec2b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafec2b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppqu01fjs                        0x000055ffe438c926 <unavailable> + 6438

    5    libc.so.6                          0x00002aafec7ad460 __libc_start_main +
    245

    6    tmppqu01fjs                        0x000055ffe438c449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp7njyvvb9/tmp7njyvvb9.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf74d2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf74a26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf74a26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf74a257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7njyvvb9                        0x0000561ae80c6926 <unavailable> + 6438

    5    libc.so.6                          0x00002aaf74f1b460 __libc_start_main +
    245

    6    tmp7njyvvb9                        0x0000561ae80c6449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg0avl9a3/tmpg0avl9a3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7616a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0avl9a3                        0x0000562c53f9b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba761890460 __libc_start_main +
    245

    6    tmpg0avl9a3                        0x0000562c53f9b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var output = [String]()\n    for grade in grades {\n    \
    \    switch grade {\n        case 4.0:\n            output.append(\"A+\")\n  \
    \      case 3.7..<4.0:\n            output.append(\"A\")\n        case 3.3..<3.7:\n\
    \            output.append(\"A-\")\n        case 3.0..<3.3:\n            output.append(\"\
    B+\")\n        case 2.7..<3.0:\n            output.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            output.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         output.append(\"C+\")\n        case 1.7..<2.0:\n            output.append(\"\
    C\")\n        case 1.3..<1.7:\n            output.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            output.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         output.append(\"D\")\n        case 0.0..<0.7:\n            output.append(\"\
    D-\")\n        case 0.0:\n            output.append(\"E\")\n        default:\n\
    \            output.append(\"Invalid\")\n        }\n    }\n    return output\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp0agq01x8/tmp0agq01x8.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fb581bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fb5512b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fb5512988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fb55117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0agq01x8                        0x000055ee0543b926 <unavailable> + 6438

    5    libc.so.6                          0x00002b0fb5a07460 __libc_start_main +
    245

    6    tmp0agq01x8                        0x000055ee0543b449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    return grades.map {\n        switch $0 {\n        case 4.0:\
    \ return \"A+\"\n        case 3.7..<4.0: return \"A\"\n        case 3.3..<3.7:\
    \ return \"A-\"\n        case 3.0..<3.3: return \"B+\"\n        case 2.7..<3.0:\
    \ return \"B\"\n        case 2.3..<2.7: return \"B-\"\n        case 2.0..<2.3:\
    \ return \"C+\"\n        case 1.7..<2.0: return \"C\"\n        case 1.3..<1.7:\
    \ return \"C-\"\n        case 1.0..<1.3: return \"D+\"\n        case 0.7..<1.0:\
    \ return \"D\"\n        case 0.0..<0.7: return \"D-\"\n        default: return\
    \ \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpixm_0u8t/tmpixm_0u8t.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84d6d01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84d69f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84d69f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84d69f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpixm_0u8t                        0x000055a84f72e7b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b84d6eed460 __libc_start_main +
    245

    6    tmpixm_0u8t                        0x000055a84f72e2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg0avl9a3/tmpg0avl9a3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7616a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0avl9a3                        0x0000562c53f9b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba761890460 __libc_start_main +
    245

    6    tmpg0avl9a3                        0x0000562c53f9b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp52aaxb2m/tmp52aaxb2m.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76c3790c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76c3487b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76c3487988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76c34867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52aaxb2m                        0x000056346698b8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b76c397c460 __libc_start_main +
    245

    6    tmp52aaxb2m                        0x000056346698b3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg0avl9a3/tmpg0avl9a3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7616a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0avl9a3                        0x0000562c53f9b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba761890460 __libc_start_main +
    245

    6    tmpg0avl9a3                        0x0000562c53f9b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result = [String]()\n    for grade in grades {\n    \
    \    if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if grade\
    \ >= 3.7 {\n            result.append(\"A\")\n        } else if grade >= 3.3 {\n\
    \            result.append(\"A-\")\n        } else if grade >= 3.0 {\n       \
    \     result.append(\"B+\")\n        } else if grade >= 2.7 {\n            result.append(\"\
    B\")\n        } else if grade >= 2.3 {\n            result.append(\"B-\")\n  \
    \      } else if grade >= 2.0 {\n            result.append(\"C+\")\n        }\
    \ else if grade >= 1.7 {\n            result.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            result.append(\"C-\")\n        } else if grade >=\
    \ 1.0 {\n            result.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            result.append(\"D\")\n        } else if grade >= 0.0 {\n        \
    \    result.append(\"D-\")\n        } else {\n            result.append(\"E\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppk4_5yff/tmppk4_5yff.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f6b0b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f6adacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f6adac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f6adab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppk4_5yff                        0x000055ac9ba6e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b5f6b2a1460 __libc_start_main +
    245

    6    tmppk4_5yff                        0x000055ac9ba6e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp7njyvvb9/tmp7njyvvb9.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf74d2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf74a26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf74a26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf74a257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7njyvvb9                        0x0000561ae80c6926 <unavailable> + 6438

    5    libc.so.6                          0x00002aaf74f1b460 __libc_start_main +
    245

    6    tmp7njyvvb9                        0x0000561ae80c6449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    return grades.map {\n        switch $0 {\n        case 4.0:\n\
    \            return \"A+\"\n        case 3.7..<4.0:\n            return \"A\"\n\
    \        case 3.3..<3.7:\n            return \"A-\"\n        case 3.0..<3.3:\n\
    \            return \"B+\"\n        case 2.7..<3.0:\n            return \"B\"\n\
    \        case 2.3..<2.7:\n            return \"B-\"\n        case 2.0..<2.3:\n\
    \            return \"C+\"\n        case 1.7..<2.0:\n            return \"C\"\n\
    \        case 1.3..<1.7:\n            return \"C-\"\n        case 1.0..<1.3:\n\
    \            return \"D+\"\n        case 0.7..<1.0:\n            return \"D\"\n\
    \        case 0.0..<0.7:\n            return \"D-\"\n        default:\n      \
    \      return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdja9us_w/tmpdja9us_w.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61c832cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61c8023b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61c8023988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61c80227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdja9us_w                        0x000055e9712e97b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b61c8518460 __libc_start_main +
    245

    6    tmpdja9us_w                        0x000055e9712e92d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp52aaxb2m/tmp52aaxb2m.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76c3790c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76c3487b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76c3487988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76c34867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52aaxb2m                        0x000056346698b8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b76c397c460 __libc_start_main +
    245

    6    tmp52aaxb2m                        0x000056346698b3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade > 3.7 {\n            letter_grades.append(\"A\")\n     \
    \   } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n      \
    \  } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n       \
    \ } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letter_grades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letter_grades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letter_grades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letter_grades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letter_grades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letter_grades.append(\"D-\")\n        } else {\n            letter_grades.append(\"\
    E\")\n        }\n    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      switch grade {\n        case 4.0:\n            result.append(\"A+\")\n\
    \        case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        default:\n            result.append(\"E\")\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1cskcr2g/tmp1cskcr2g.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b34192c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b33e89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b33e89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b33e887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1cskcr2g                        0x0000560cf25ab8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b6b3437e460 __libc_start_main +
    245

    6    tmp1cskcr2g                        0x0000560cf25ab3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_letter: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            grades_letter.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            grades_letter.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            grades_letter.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            grades_letter.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            grades_letter.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            grades_letter.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            grades_letter.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            grades_letter.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            grades_letter.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            grades_letter.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            grades_letter.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            grades_letter.append(\"D-\")\n       \
    \ } else {\n            grades_letter.append(\"E\")\n        }\n    }\n    return\
    \ grades_letter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmposs9cmcz/tmposs9cmcz.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fb2d0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fb2a02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fb2a02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fb2a017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmposs9cmcz                        0x0000558682bab7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2fb2ef7460 __libc_start_main +
    245

    6    tmposs9cmcz                        0x0000558682bab2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg0avl9a3/tmpg0avl9a3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7616a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0avl9a3                        0x0000562c53f9b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba761890460 __libc_start_main +
    245

    6    tmpg0avl9a3                        0x0000562c53f9b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp52aaxb2m/tmp52aaxb2m.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76c3790c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76c3487b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76c3487988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76c34867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52aaxb2m                        0x000056346698b8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b76c397c460 __libc_start_main +
    245

    6    tmp52aaxb2m                        0x000056346698b3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpj2w1eoh4/tmpj2w1eoh4.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e10f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e0dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2w1eoh4                        0x000055c33c3757a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b78e12e0460 __libc_start_main +
    245

    6    tmpj2w1eoh4                        0x000055c33c3752c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpj2w1eoh4/tmpj2w1eoh4.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e10f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e0dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2w1eoh4                        0x000055c33c3757a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b78e12e0460 __libc_start_main +
    245

    6    tmpj2w1eoh4                        0x000055c33c3752c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n        }\
    \ else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n        } else\
    \ if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n        } else if\
    \ grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        } else if grade\
    \ >= 2.7 {\n            letterGrades.append(\"B\")\n        } else if grade >=\
    \ 2.3 {\n            letterGrades.append(\"B-\")\n        } else if grade >= 2.0\
    \ {\n            letterGrades.append(\"C+\")\n        } else if grade >= 1.7 {\n\
    \            letterGrades.append(\"C\")\n        } else if grade >= 1.3 {\n  \
    \          letterGrades.append(\"C-\")\n        } else if grade >= 1.0 {\n   \
    \         letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n    \
    \        letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n      \
    \      letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpazxdsnvs/tmpazxdsnvs.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bf8ab1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bf87a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bf87a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bf87a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpazxdsnvs                        0x0000562b952a07f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b7bf8c9d460 __libc_start_main +
    245

    6    tmpazxdsnvs                        0x0000562b952a0319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades = grades\n    var letterGrades = [String]()\n\
    \    for i in 0..<grades.count {\n        if grades[i] >= 4.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if grades[i] >= 3.7 {\n            letterGrades.append(\"\
    A\")\n        } else if grades[i] >= 3.3 {\n            letterGrades.append(\"\
    A-\")\n        } else if grades[i] >= 3.0 {\n            letterGrades.append(\"\
    B+\")\n        } else if grades[i] >= 2.7 {\n            letterGrades.append(\"\
    B\")\n        } else if grades[i] >= 2.3 {\n            letterGrades.append(\"\
    B-\")\n        } else if grades[i] >= 2.0 {\n            letterGrades.append(\"\
    C+\")\n        } else if grades[i] >= 1.7 {\n            letterGrades.append(\"\
    C\")\n        } else if grades[i] >= 1.3 {\n            letterGrades.append(\"\
    C-\")\n        } else if grades[i] >= 1.0 {\n            letterGrades.append(\"\
    D+\")\n        } else if grades[i] >= 0.7 {\n            letterGrades.append(\"\
    D\")\n        } else if grades[i] >= 0.0 {\n            letterGrades.append(\"\
    D-\")\n        } else {\n            letterGrades.append(\"E\")\n        }\n \
    \   }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpc7ntztxa/tmpc7ntztxa.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b520158ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5201285b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5201285988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52012847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7ntztxa                        0x000055f3c8e578c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b520177a460 __libc_start_main +
    245

    6    tmpc7ntztxa                        0x000055f3c8e573e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp52aaxb2m/tmp52aaxb2m.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76c3790c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76c3487b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76c3487988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76c34867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52aaxb2m                        0x000056346698b8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b76c397c460 __libc_start_main +
    245

    6    tmp52aaxb2m                        0x000056346698b3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   default:\n            letterGrades.append(\"E\")\n        }\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppznhjtgf/tmppznhjtgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7a26b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7a23afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7a23af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7a23ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppznhjtgf                        0x000055c60fd1a926 <unavailable> + 6438

    5    libc.so.6                          0x00002ab7a28a4460 __libc_start_main +
    245

    6    tmppznhjtgf                        0x000055c60fd1a449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp52aaxb2m/tmp52aaxb2m.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76c3790c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76c3487b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76c3487988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76c34867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52aaxb2m                        0x000056346698b8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b76c397c460 __libc_start_main +
    245

    6    tmp52aaxb2m                        0x000056346698b3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result = [String]()\n    for grade in grades {\n    \
    \    if grade == 4.0 {\n            result.append(\"A+\")\n        } else if grade\
    \ > 3.7 {\n            result.append(\"A\")\n        } else if grade > 3.3 {\n\
    \            result.append(\"A-\")\n        } else if grade > 3.0 {\n        \
    \    result.append(\"B+\")\n        } else if grade > 2.7 {\n            result.append(\"\
    B\")\n        } else if grade > 2.3 {\n            result.append(\"B-\")\n   \
    \     } else if grade > 2.0 {\n            result.append(\"C+\")\n        } else\
    \ if grade > 1.7 {\n            result.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            result.append(\"C-\")\n        } else if grade > 1.0 {\n\
    \            result.append(\"D+\")\n        } else if grade > 0.7 {\n        \
    \    result.append(\"D\")\n        } else if grade > 0.0 {\n            result.append(\"\
    D-\")\n        } else {\n            result.append(\"E\")\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    return grades.map {\n        switch $0 {\n        case 4.0:\
    \ return \"A+\"\n        case 3.7..<4.0: return \"A\"\n        case 3.3..<3.7:\
    \ return \"A-\"\n        case 3.0..<3.3: return \"B+\"\n        case 2.7..<3.0:\
    \ return \"B\"\n        case 2.3..<2.7: return \"B-\"\n        case 2.0..<2.3:\
    \ return \"C+\"\n        case 1.7..<2.0: return \"C\"\n        case 1.3..<1.7:\
    \ return \"C-\"\n        case 1.0..<1.3: return \"D+\"\n        case 0.7..<1.0:\
    \ return \"D\"\n        case 0.0..<0.7: return \"D-\"\n        default: return\
    \ \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpixm_0u8t/tmpixm_0u8t.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84d6d01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84d69f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84d69f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84d69f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpixm_0u8t                        0x000055a84f72e7b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b84d6eed460 __libc_start_main +
    245

    6    tmpixm_0u8t                        0x000055a84f72e2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg0avl9a3/tmpg0avl9a3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7616a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0avl9a3                        0x0000562c53f9b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba761890460 __libc_start_main +
    245

    6    tmpg0avl9a3                        0x0000562c53f9b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg0avl9a3/tmpg0avl9a3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7616a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0avl9a3                        0x0000562c53f9b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba761890460 __libc_start_main +
    245

    6    tmpg0avl9a3                        0x0000562c53f9b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    case 0.0:\n            letter_grades.append(\"E\")\n        default:\n  \
    \          letter_grades.append(\"Invalid\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpcmfgus5f/tmpcmfgus5f.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cc31dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cc2ed5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cc2ed5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cc2ed47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcmfgus5f                        0x0000558a178c2926 <unavailable> + 6438

    5    libc.so.6                          0x00002b7cc33ca460 __libc_start_main +
    245

    6    tmpcmfgus5f                        0x0000558a178c2449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade > 3.7 {\n            letter_grades.append(\"A\")\n     \
    \   } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n      \
    \  } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n       \
    \ } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letter_grades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letter_grades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letter_grades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letter_grades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letter_grades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letter_grades.append(\"D-\")\n        } else {\n            letter_grades.append(\"\
    E\")\n        }\n    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpj2w1eoh4/tmpj2w1eoh4.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e10f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e0dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2w1eoh4                        0x000055c33c3757a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b78e12e0460 __libc_start_main +
    245

    6    tmpj2w1eoh4                        0x000055c33c3752c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    return grades.map {\n        switch $0 {\n        case 4.0:\n\
    \            return \"A+\"\n        case 3.7..<4.0:\n            return \"A\"\n\
    \        case 3.3..<3.7:\n            return \"A-\"\n        case 3.0..<3.3:\n\
    \            return \"B+\"\n        case 2.7..<3.0:\n            return \"B\"\n\
    \        case 2.3..<2.7:\n            return \"B-\"\n        case 2.0..<2.3:\n\
    \            return \"C+\"\n        case 1.7..<2.0:\n            return \"C\"\n\
    \        case 1.3..<1.7:\n            return \"C-\"\n        case 1.0..<1.3:\n\
    \            return \"D+\"\n        case 0.7..<1.0:\n            return \"D\"\n\
    \        case 0.0..<0.7:\n            return \"D-\"\n        default:\n      \
    \      return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdja9us_w/tmpdja9us_w.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61c832cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61c8023b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61c8023988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61c80227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdja9us_w                        0x000055e9712e97b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b61c8518460 __libc_start_main +
    245

    6    tmpdja9us_w                        0x000055e9712e92d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result = [String]()\n    for grade in grades {\n    \
    \    switch grade {\n        case 4.0:\n            result.append(\"A+\")\n  \
    \      case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        default:\n            result.append(\"E\")\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpkut0nie6/tmpkut0nie6.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae216a25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae21671cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae21671c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae21671b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkut0nie6                        0x000056175903e926 <unavailable> + 6438

    5    libc.so.6                          0x00002ae216c11460 __libc_start_main +
    245

    6    tmpkut0nie6                        0x000056175903e449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade > 3.7 {\n            letter_grades.append(\"A\")\n     \
    \   } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n      \
    \  } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n       \
    \ } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letter_grades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letter_grades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letter_grades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letter_grades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letter_grades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letter_grades.append(\"D-\")\n        } else {\n            letter_grades.append(\"\
    E\")\n        }\n    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result = [String]()\n    for grade in grades {\n    \
    \    if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if grade\
    \ >= 3.7 {\n            result.append(\"A\")\n        } else if grade >= 3.3 {\n\
    \            result.append(\"A-\")\n        } else if grade >= 3.0 {\n       \
    \     result.append(\"B+\")\n        } else if grade >= 2.7 {\n            result.append(\"\
    B\")\n        } else if grade >= 2.3 {\n            result.append(\"B-\")\n  \
    \      } else if grade >= 2.0 {\n            result.append(\"C+\")\n        }\
    \ else if grade >= 1.7 {\n            result.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            result.append(\"C-\")\n        } else if grade >=\
    \ 1.0 {\n            result.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            result.append(\"D\")\n        } else if grade >= 0.0 {\n        \
    \    result.append(\"D-\")\n        } else {\n            result.append(\"E\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppk4_5yff/tmppk4_5yff.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f6b0b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f6adacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f6adac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f6adab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppk4_5yff                        0x000055ac9ba6e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b5f6b2a1460 __libc_start_main +
    245

    6    tmppk4_5yff                        0x000055ac9ba6e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg0avl9a3/tmpg0avl9a3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7616a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0avl9a3                        0x0000562c53f9b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba761890460 __libc_start_main +
    245

    6    tmpg0avl9a3                        0x0000562c53f9b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    case 0.0:\n            letter_grades.append(\"E\")\n        default:\n  \
    \          letter_grades.append(\"Invalid\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpcmfgus5f/tmpcmfgus5f.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cc31dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cc2ed5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cc2ed5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cc2ed47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcmfgus5f                        0x0000558a178c2926 <unavailable> + 6438

    5    libc.so.6                          0x00002b7cc33ca460 __libc_start_main +
    245

    6    tmpcmfgus5f                        0x0000558a178c2449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg0avl9a3/tmpg0avl9a3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7616a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0avl9a3                        0x0000562c53f9b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba761890460 __libc_start_main +
    245

    6    tmpg0avl9a3                        0x0000562c53f9b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n        }\
    \ else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n        } else\
    \ if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n        } else if\
    \ grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        } else if grade\
    \ >= 2.7 {\n            letterGrades.append(\"B\")\n        } else if grade >=\
    \ 2.3 {\n            letterGrades.append(\"B-\")\n        } else if grade >= 2.0\
    \ {\n            letterGrades.append(\"C+\")\n        } else if grade >= 1.7 {\n\
    \            letterGrades.append(\"C\")\n        } else if grade >= 1.3 {\n  \
    \          letterGrades.append(\"C-\")\n        } else if grade >= 1.0 {\n   \
    \         letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n    \
    \        letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n      \
    \      letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpazxdsnvs/tmpazxdsnvs.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bf8ab1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bf87a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bf87a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bf87a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpazxdsnvs                        0x0000562b952a07f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b7bf8c9d460 __libc_start_main +
    245

    6    tmpazxdsnvs                        0x0000562b952a0319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpj2w1eoh4/tmpj2w1eoh4.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e10f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e0dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2w1eoh4                        0x000055c33c3757a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b78e12e0460 __libc_start_main +
    245

    6    tmpj2w1eoh4                        0x000055c33c3752c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg0avl9a3/tmpg0avl9a3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7616a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0avl9a3                        0x0000562c53f9b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba761890460 __libc_start_main +
    245

    6    tmpg0avl9a3                        0x0000562c53f9b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    let grade_table = [\n        4.0: \"A+\",\n        3.7: \"\
    A\",\n        3.3: \"A-\",\n        3.0: \"B+\",\n        2.7: \"B\",\n      \
    \  2.3: \"B-\",\n        2.0: \"C+\",\n        1.7: \"C\",\n        1.3: \"C-\"\
    ,\n        1.0: \"D+\",\n        0.7: \"D\",\n        0.0: \"D-\",\n        -1.0:\
    \ \"E\"\n    ]\n    var result: [String] = []\n    for grade in grades {\n   \
    \     for (key, value) in grade_table {\n            if grade >= key {\n     \
    \           result.append(value)\n                break\n            }\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp3hzf4hk2/tmp3hzf4hk2.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f5662cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f56323b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f56323988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f563227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3hzf4hk2                        0x000055bd8f9479c6 <unavailable> + 6598

    5    libc.so.6                          0x00002b9f56818460 __libc_start_main +
    245

    6    tmp3hzf4hk2                        0x000055bd8f9474e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg0avl9a3/tmpg0avl9a3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7616a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0avl9a3                        0x0000562c53f9b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba761890460 __libc_start_main +
    245

    6    tmpg0avl9a3                        0x0000562c53f9b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpj2w1eoh4/tmpj2w1eoh4.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e10f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e0dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2w1eoh4                        0x000055c33c3757a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b78e12e0460 __libc_start_main +
    245

    6    tmpj2w1eoh4                        0x000055c33c3752c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg0avl9a3/tmpg0avl9a3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7616a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0avl9a3                        0x0000562c53f9b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba761890460 __libc_start_main +
    245

    6    tmpg0avl9a3                        0x0000562c53f9b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp7njyvvb9/tmp7njyvvb9.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf74d2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf74a26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf74a26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf74a257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7njyvvb9                        0x0000561ae80c6926 <unavailable> + 6438

    5    libc.so.6                          0x00002aaf74f1b460 __libc_start_main +
    245

    6    tmp7njyvvb9                        0x0000561ae80c6449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    default:\n            letter_grades.append(\"E\")\n        }\n    }\n   \
    \ return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp7njyvvb9/tmp7njyvvb9.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf74d2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf74a26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf74a26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf74a257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7njyvvb9                        0x0000561ae80c6926 <unavailable> + 6438

    5    libc.so.6                          0x00002aaf74f1b460 __libc_start_main +
    245

    6    tmp7njyvvb9                        0x0000561ae80c6449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpj2w1eoh4/tmpj2w1eoh4.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e10f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e0dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2w1eoh4                        0x000055c33c3757a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b78e12e0460 __libc_start_main +
    245

    6    tmpj2w1eoh4                        0x000055c33c3752c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg0avl9a3/tmpg0avl9a3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7616a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0avl9a3                        0x0000562c53f9b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba761890460 __libc_start_main +
    245

    6    tmpg0avl9a3                        0x0000562c53f9b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    let grade_table = [\n        4.0: \"A+\",\n        3.7: \"\
    A\",\n        3.3: \"A-\",\n        3.0: \"B+\",\n        2.7: \"B\",\n      \
    \  2.3: \"B-\",\n        2.0: \"C+\",\n        1.7: \"C\",\n        1.3: \"C-\"\
    ,\n        1.0: \"D+\",\n        0.7: \"D\",\n        0.0: \"D-\",\n        -1.0:\
    \ \"E\"\n    ]\n    var result = [String]()\n    for grade in grades {\n     \
    \   for (key, value) in grade_table {\n            if grade >= key {\n       \
    \         result.append(value)\n                break\n            }\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpi8ui_f7t/tmpi8ui_f7t.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9577ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9574f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9574f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9574f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi8ui_f7t                        0x00005598ef2caa16 <unavailable> + 6678

    5    libc.so.6                          0x00002ab9579eb460 __libc_start_main +
    245

    6    tmpi8ui_f7t                        0x00005598ef2ca539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpj2w1eoh4/tmpj2w1eoh4.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e10f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e0dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2w1eoh4                        0x000055c33c3757a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b78e12e0460 __libc_start_main +
    245

    6    tmpj2w1eoh4                        0x000055c33c3752c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n        }\
    \ else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n        } else\
    \ if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n        } else if\
    \ grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        } else if grade\
    \ >= 2.7 {\n            letterGrades.append(\"B\")\n        } else if grade >=\
    \ 2.3 {\n            letterGrades.append(\"B-\")\n        } else if grade >= 2.0\
    \ {\n            letterGrades.append(\"C+\")\n        } else if grade >= 1.7 {\n\
    \            letterGrades.append(\"C\")\n        } else if grade >= 1.3 {\n  \
    \          letterGrades.append(\"C-\")\n        } else if grade >= 1.0 {\n   \
    \         letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n    \
    \        letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n      \
    \      letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpazxdsnvs/tmpazxdsnvs.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bf8ab1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bf87a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bf87a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bf87a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpazxdsnvs                        0x0000562b952a07f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b7bf8c9d460 __libc_start_main +
    245

    6    tmpazxdsnvs                        0x0000562b952a0319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    return grades.map {\n        switch $0 {\n        case 4.0:\n\
    \            return \"A+\"\n        case 3.7..<4.0:\n            return \"A\"\n\
    \        case 3.3..<3.7:\n            return \"A-\"\n        case 3.0..<3.3:\n\
    \            return \"B+\"\n        case 2.7..<3.0:\n            return \"B\"\n\
    \        case 2.3..<2.7:\n            return \"B-\"\n        case 2.0..<2.3:\n\
    \            return \"C+\"\n        case 1.7..<2.0:\n            return \"C\"\n\
    \        case 1.3..<1.7:\n            return \"C-\"\n        case 1.0..<1.3:\n\
    \            return \"D+\"\n        case 0.7..<1.0:\n            return \"D\"\n\
    \        case 0.0..<0.7:\n            return \"D-\"\n        default:\n      \
    \      return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdja9us_w/tmpdja9us_w.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61c832cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61c8023b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61c8023988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61c80227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdja9us_w                        0x000055e9712e97b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b61c8518460 __libc_start_main +
    245

    6    tmpdja9us_w                        0x000055e9712e92d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   default:\n            letterGrades.append(\"E\")\n        }\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppznhjtgf/tmppznhjtgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7a26b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7a23afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7a23af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7a23ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppznhjtgf                        0x000055c60fd1a926 <unavailable> + 6438

    5    libc.so.6                          0x00002ab7a28a4460 __libc_start_main +
    245

    6    tmppznhjtgf                        0x000055c60fd1a449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      switch grade {\n        case 4.0:\n            result.append(\"A+\")\n\
    \        case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        default:\n            result.append(\"E\")\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1cskcr2g/tmp1cskcr2g.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b34192c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b33e89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b33e89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b33e887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1cskcr2g                        0x0000560cf25ab8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b6b3437e460 __libc_start_main +
    245

    6    tmp1cskcr2g                        0x0000560cf25ab3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result = [String]()\n    for grade in grades {\n    \
    \    if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if grade\
    \ >= 3.7 {\n            result.append(\"A\")\n        } else if grade >= 3.3 {\n\
    \            result.append(\"A-\")\n        } else if grade >= 3.0 {\n       \
    \     result.append(\"B+\")\n        } else if grade >= 2.7 {\n            result.append(\"\
    B\")\n        } else if grade >= 2.3 {\n            result.append(\"B-\")\n  \
    \      } else if grade >= 2.0 {\n            result.append(\"C+\")\n        }\
    \ else if grade >= 1.7 {\n            result.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            result.append(\"C-\")\n        } else if grade >=\
    \ 1.0 {\n            result.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            result.append(\"D\")\n        } else if grade >= 0.0 {\n        \
    \    result.append(\"D-\")\n        } else {\n            result.append(\"E\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppk4_5yff/tmppk4_5yff.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f6b0b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f6adacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f6adac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f6adab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppk4_5yff                        0x000055ac9ba6e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b5f6b2a1460 __libc_start_main +
    245

    6    tmppk4_5yff                        0x000055ac9ba6e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    return grades.map {\n        switch $0 {\n        case 4.0:\n\
    \            return \"A+\"\n        case 3.7..<4.0:\n            return \"A\"\n\
    \        case 3.3..<3.7:\n            return \"A-\"\n        case 3.0..<3.3:\n\
    \            return \"B+\"\n        case 2.7..<3.0:\n            return \"B\"\n\
    \        case 2.3..<2.7:\n            return \"B-\"\n        case 2.0..<2.3:\n\
    \            return \"C+\"\n        case 1.7..<2.0:\n            return \"C\"\n\
    \        case 1.3..<1.7:\n            return \"C-\"\n        case 1.0..<1.3:\n\
    \            return \"D+\"\n        case 0.7..<1.0:\n            return \"D\"\n\
    \        case 0.0..<0.7:\n            return \"D-\"\n        default:\n      \
    \      return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdja9us_w/tmpdja9us_w.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61c832cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61c8023b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61c8023988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61c80227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdja9us_w                        0x000055e9712e97b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b61c8518460 __libc_start_main +
    245

    6    tmpdja9us_w                        0x000055e9712e92d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg0avl9a3/tmpg0avl9a3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7616a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0avl9a3                        0x0000562c53f9b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba761890460 __libc_start_main +
    245

    6    tmpg0avl9a3                        0x0000562c53f9b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var result: [String] = []\n    for grade in grades {\n  \
    \      if grade >= 4.0 {\n            result.append(\"A+\")\n        } else if\
    \ grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade >=\
    \ 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade >= 2.7 {\n       \
    \     result.append(\"B\")\n        } else if grade >= 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            result.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            result.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            result.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            result.append(\"D+\")\n        } else if grade >=\
    \ 0.7 {\n            result.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg0avl9a3/tmpg0avl9a3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7616a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba76139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba76139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0avl9a3                        0x0000562c53f9b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba761890460 __libc_start_main +
    245

    6    tmpg0avl9a3                        0x0000562c53f9b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n    \
    \    } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n      \
    \  } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n       \
    \ } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n  \
    \          letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpj2w1eoh4/tmpj2w1eoh4.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e10f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e0dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2w1eoh4                        0x000055c33c3757a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b78e12e0460 __libc_start_main +
    245

    6    tmpj2w1eoh4                        0x000055c33c3752c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
