name: HumanEval_11_string_xor
language: swift
prompt: "\n/// Input are two strings a and b consisting only of 1s and 0s.\n/// Perform\
  \ binary XOR on these inputs and return result also as a string.\n/// >>> string_xor('010',\
  \ '110')\n/// '100'\nfunc string_xor(a: String, b: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(string_xor(a: \"111000\", b: \"101010\"\
  ) == \"010010\")\nassert(string_xor(a: \"1\", b: \"1\") == \"0\")\nassert(string_xor(a:\
  \ \"0101\", b: \"0000\") == \"0101\")"
completions: ["    let a_bytes = a.utf8.map { UInt8($0) }\n    let b_bytes = b.utf8.map\
    \ { UInt8($0) }\n    let xor_bytes = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n \
    \   return xor_bytes.map { String($0, radix: 2) }.joined()", "    let a = a.utf8.map\
    \ { $0 - 48 }\n    let b = b.utf8.map { $0 - 48 }\n    let c = zip(a, b).map {\
    \ $0 ^ $1 }\n    return String(c.map { $0 + 48 })", "    let aa = a.utf8.map {\
    \ Int($0) }\n    let bb = b.utf8.map { Int($0) }\n    let cc = zip(aa, bb).map\
    \ { $0 ^ $1 }\n    return String(bytes: cc, encoding: .utf8)!", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for (i, j) in zip(a, b) {\n        result += String(i ^ j)\n   \
    \ }\n    return result", "    var result = \"\"\n    for i in 0..<a.count {\n\
    \        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    let a_bytes = a.utf8.map { UInt8($0)\
    \ }\n    let b_bytes = b.utf8.map { UInt8($0) }\n    let xor_bytes = zip(a_bytes,\
    \ b_bytes).map { $0 ^ $1 }\n    return String(bytes: xor_bytes, encoding: .utf8)!",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a_bytes\
    \ = a.utf8.map { UInt8($0) }\n    let b_bytes = b.utf8.map { UInt8($0) }\n   \
    \ var result = \"\"\n    for i in 0..<a_bytes.count {\n        result += String(a_bytes[i]\
    \ ^ b_bytes[i])\n    }\n    return result", "    let a_bytes = a.utf8.map { Int($0)\
    \ }\n    let b_bytes = b.utf8.map { Int($0) }\n    let result = zip(a_bytes, b_bytes).map\
    \ { $0 ^ $1 }\n    return result.map { String($0, radix: 2) }.joined()", "   \
    \ let a = a.utf8.map { UInt8(bitPattern: $0) }\n    let b = b.utf8.map { UInt8(bitPattern:\
    \ $0) }\n    let result = zip(a, b).map { $0 ^ $1 }\n    return result.reduce(\"\
    \") { $0 + String(format: \"%02x\", $1) }", "    let a_bytes = a.utf8.map { Int($0)\
    \ }\n    let b_bytes = b.utf8.map { Int($0) }\n    let xor_bytes = zip(a_bytes,\
    \ b_bytes).map { $0 ^ $1 }\n    let xor_bytes_str = xor_bytes.map { String($0,\
    \ radix: 2) }\n    return xor_bytes_str.joined()", "    var result = \"\"\n  \
    \  for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        result += String(Int(String(a_char))! ^ Int(String(b_char))!)\n    }\n\
    \    return result", "    var result = \"\"\n    for i in 0..<a.characters.count\
    \ {\n        let a_char = a[a.startIndex.advancedBy(i)]\n        let b_char =\
    \ b[b.startIndex.advancedBy(i)]\n        result += String(Int(String(a_char))!\
    \ ^ Int(String(b_char))!)\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        result.append(a_char\
    \ == b_char ? \"0\" : \"1\")\n    }\n    return result", "    let a = a.utf8.map\
    \ { UInt8(bitPattern: $0) }\n    let b = b.utf8.map { UInt8(bitPattern: $0) }\n\
    \    let result = zip(a, b).map { $0 ^ $1 }\n    return result.reduce(\"\") {\
    \ $0 + String(format: \"%02x\", $1) }", "    var result = \"\"\n    for i in 0..<a.characters.count\
    \ {\n        let a_char = a[a.startIndex.advancedBy(i)]\n        let b_char =\
    \ b[b.startIndex.advancedBy(i)]\n        if a_char == b_char {\n            result.append(\"\
    0\")\n        } else {\n            result.append(\"1\")\n        }\n    }\n \
    \   return result", "    let a_bytes = a.utf8.map { UInt8($0) }\n    let b_bytes\
    \ = b.utf8.map { UInt8($0) }\n    let xor_bytes = zip(a_bytes, b_bytes).map {\
    \ $0 ^ $1 }\n    return String(bytes: xor_bytes, encoding: .utf8)!", "    var\
    \ result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        let a_int = Int(String(a_char))!\n        let b_int = Int(String(b_char))!\n\
    \        let xor = a_int ^ b_int\n        result += String(xor)\n    }\n    return\
    \ result", "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char\
    \ = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        if a_char == b_char\
    \ {\n            result.append(\"0\")\n        } else {\n            result.append(\"\
    1\")\n        }\n    }\n    return result", "    var result = \"\"\n    for i\
    \ in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        if a_char == b_char\
    \ {\n            result.append(\"0\")\n        } else {\n            result.append(\"\
    1\")\n        }\n    }\n    return result", "    var result = \"\"\n    for i\
    \ in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        if a_char == b_char\
    \ {\n            result.append(\"0\")\n        } else {\n            result.append(\"\
    1\")\n        }\n    }\n    return result", "    var result = \"\"\n    for i\
    \ in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        let a_int = Int(String(a_char))!\n\
    \        let b_int = Int(String(b_char))!\n        let result_int = a_int ^ b_int\n\
    \        result += String(result_int)\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        let a_int = Int(String(a_char))!\n        let b_int = Int(String(b_char))!\n\
    \        result += String(a_int ^ b_int)\n    }\n    return result", "    let\
    \ a = a.utf8.map { UInt8(bitPattern: $0) }\n    let b = b.utf8.map { UInt8(bitPattern:\
    \ $0) }\n    let result = zip(a, b).map { $0 ^ $1 }\n    return result.reduce(\"\
    \") { $0 + String(format: \"%02x\", $1) }", "    let a_bytes = a.utf8.map { UInt8($0)\
    \ }\n    let b_bytes = b.utf8.map { UInt8($0) }\n    let result = zip(a_bytes,\
    \ b_bytes).map { $0 ^ $1 }\n    return String(bytes: result, encoding: .utf8)!",
  "    let a_bytes = a.utf8.map { Int($0) }\n    let b_bytes = b.utf8.map { Int($0)\
    \ }\n    let xor_bytes = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return String(bytes:\
    \ xor_bytes, encoding: .utf8)!", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let aChar = a[a.index(a.startIndex, offsetBy: i)]\n        let bChar\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if aChar == bChar {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result", "    var res = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         res += \"0\"\n        } else {\n            res += \"1\"\n        }\n\
    \    }\n    return res", "    var result = \"\"\n    for i in 0..<a.count {\n\
    \        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    let a_bytes = a.utf8.map { Int($0) }\n\
    \    let b_bytes = b.utf8.map { Int($0) }\n    let xor_bytes = zip(a_bytes, b_bytes).map\
    \ { $0 ^ $1 }\n    return String(bytes: xor_bytes, encoding: .utf8)!", "    var\
    \ result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        result += String(Int(String(a_char))! ^ Int(String(b_char))!)\n    }\n\
    \    return result", "    var result = \"\"\n    for i in 0..<a.count {\n    \
    \    let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char =\
    \ b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    let a_bytes = a.utf8.map { UInt8($0)\
    \ }\n    let b_bytes = b.utf8.map { UInt8($0) }\n    let result = zip(a_bytes,\
    \ b_bytes).map { $0 ^ $1 }\n    return result.map { String($0, radix: 2) }.joined()",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        result += String(Int(String(a_char))! ^ Int(String(b_char))!)\n    }\n\
    \    return result", "    var result = \"\"\n    for i in 0..<a.count {\n    \
    \    let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char =\
    \ b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result", "    let a_bytes = a.utf8.map { Int($0) }\n\
    \    let b_bytes = b.utf8.map { Int($0) }\n    let xor_bytes = zip(a_bytes, b_bytes).map\
    \ { $0 ^ $1 }\n    return xor_bytes.map { String($0, radix: 2) }.joined()", " \
    \   var result = \"\"\n    for i in 0..<a.count {\n        let ai = a[i]\n   \
    \     let bi = b[i]\n        let ri = ai ^ bi\n        result.append(ri)\n   \
    \ }\n    return result", "    var result = \"\"\n    for i in 0..<a.count {\n\
    \        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.characters.count\
    \ {\n        let a_char = a[a.startIndex.advancedBy(i)]\n        let b_char =\
    \ b[b.startIndex.advancedBy(i)]\n        if a_char == b_char {\n            result.append(\"\
    0\")\n        } else {\n            result.append(\"1\")\n        }\n    }\n \
    \   return result", "    let a = a.utf8.map { UInt8(bitPattern: $0) }\n    let\
    \ b = b.utf8.map { UInt8(bitPattern: $0) }\n    let result = zip(a, b).map { $0\
    \ ^ $1 }\n    return result.reduce(\"\") { $0 + String(format: \"%02x\", $1) }",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        result += String(Int(String(a_char))! ^ Int(String(b_char))!)\n    }\n\
    \    return result", "    let a_bytes = a.utf8.map { Int($0) }\n    let b_bytes\
    \ = b.utf8.map { Int($0) }\n    let xor_bytes = zip(a_bytes, b_bytes).map { $0\
    \ ^ $1 }\n    return xor_bytes.map { String($0, radix: 2) }.joined()", "    var\
    \ result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        result += String(Int(String(a_char))! ^ Int(String(b_char))!)\n    }\n\
    \    return result", "    var result = \"\"\n    for i in 0..<a.count {\n    \
    \    let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char =\
    \ b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result", "    var result = \"\"\n    for (i, j) in zip(a,\
    \ b) {\n        result += String(Int(String(i))! ^ Int(String(j))!)\n    }\n \
    \   return result", "    var result = \"\"\n    for i in 0..<a.count {\n     \
    \   let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        result += String(Int(String(a_char))! ^ Int(String(b_char))!)\n\
    \    }\n    return result", "    let a = a.utf8.map { Int($0) - 48 }\n    let\
    \ b = b.utf8.map { Int($0) - 48 }\n    let c = zip(a, b).map { $0 ^ $1 }\n   \
    \ return String(c.map { Character(UnicodeScalar($0 + 48)) })", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for (i, j) in zip(a, b) {\n        result += String(Int(String(i))!\
    \ ^ Int(String(j))!)\n    }\n    return result", "    var result = \"\"\n    for\
    \ i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n\
    \        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char\
    \ == b_char {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result", "    var result = \"\"\n   \
    \ for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        let\
    \ a_int = Int(String(a_char))!\n        let b_int = Int(String(b_char))!\n   \
    \     let xor = a_int ^ b_int\n        result.append(String(xor))\n    }\n   \
    \ return result", "    var result = \"\"\n    for i in 0..<a.count {\n       \
    \ let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    let a = a.utf8.map { Int($0) - 48 }\n    let b = b.utf8.map { Int($0) - 48\
    \ }\n    var res = [Int]()\n    for i in 0..<a.count {\n        res.append(a[i]\
    \ ^ b[i])\n    }\n    return res.map { String($0) }.joined()", "    var result\
    \ = \"\"\n    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        result += String(Int(String(a_char))!\
    \ ^ Int(String(b_char))!)\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        let\
    \ a_int = Int(String(a_char))!\n        let b_int = Int(String(b_char))!\n   \
    \     result += String(a_int ^ b_int)\n    }\n    return result", "    let a_bytes\
    \ = a.utf8.map { UInt8($0) }\n    let b_bytes = b.utf8.map { UInt8($0) }\n   \
    \ let xor_bytes = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return xor_bytes.map\
    \ { String($0, radix: 2) }.joined()", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    let a = a.utf8.map { Int($0) - 48 }\n\
    \    let b = b.utf8.map { Int($0) - 48 }\n    return zip(a, b).map { $0 ^ $1 }.map\
    \ { String($0) }.joined()", "    var result = \"\"\n    for i in 0..<a.characters.count\
    \ {\n        let a_char = a[a.startIndex.advancedBy(i)]\n        let b_char =\
    \ b[b.startIndex.advancedBy(i)]\n        if a_char == b_char {\n            result.append(\"\
    0\")\n        } else {\n            result.append(\"1\")\n        }\n    }\n \
    \   return result", "    let a = a.utf8.map { Int($0) - 48 }\n    let b = b.utf8.map\
    \ { Int($0) - 48 }\n    var result = [Int]()\n    for i in 0..<a.count {\n   \
    \     result.append(a[i] ^ b[i])\n    }\n    return result.map { String($0) }.joined()",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for (index, char) in a.characters.enumerated() {\n        if char\
    \ == \"0\" {\n            result.append(b[index])\n        } else {\n        \
    \    result.append(b[index] == \"0\" ? \"1\" : \"0\")\n        }\n    }\n    return\
    \ result", "    let a_bytes = a.utf8.map { UInt8($0) }\n    let b_bytes = b.utf8.map\
    \ { UInt8($0) }\n    let xor_bytes = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n \
    \   return xor_bytes.map { String($0, radix: 2) }.joined()", "    let a_bytes\
    \ = a.utf8.map { $0 }\n    let b_bytes = b.utf8.map { $0 }\n    let xor_bytes\
    \ = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return String(bytes: xor_bytes,\
    \ encoding: .utf8)!", '    return String(zip(a, b).map(^))', "    let a = a.utf8.map\
    \ { Int($0) - 48 }\n    let b = b.utf8.map { Int($0) - 48 }\n    let result =\
    \ zip(a, b).map { $0 ^ $1 }\n    return result.map { String($0) }.joined()", " \
    \   var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a\
    \ = a.utf8.map { Int($0) - 48 }\n    let b = b.utf8.map { Int($0) - 48 }\n   \
    \ let c = zip(a, b).map { $0 ^ $1 }\n    return String(c.map { Character(UnicodeScalar($0\
    \ + 48)) })", "    var result = \"\"\n    for i in 0..<a.count {\n        let\
    \ a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    let a = a.utf8.map { UInt8(bitPattern: $0) }\n    let b = b.utf8.map { UInt8(bitPattern:\
    \ $0) }\n    let result = zip(a, b).map { $0 ^ $1 }\n    return result.reduce(\"\
    \") { $0 + String(UnicodeScalar(UInt8(bitPattern: $1))) }", "    var result =\
    \ \"\"\n    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        if a_char == b_char\
    \ {\n            result.append(\"0\")\n        } else {\n            result.append(\"\
    1\")\n        }\n    }\n    return result", "    var result = \"\"\n    for i\
    \ in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n\
    \        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char\
    \ == b_char {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result", "    var result = \"\"\n   \
    \ for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        if a_char == b_char\
    \ {\n            result.append(\"0\")\n        } else {\n            result.append(\"\
    1\")\n        }\n    }\n    return result", "    var result = \"\"\n    for i\
    \ in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n\
    \        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        let a_int\
    \ = Int(String(a_char))!\n        let b_int = Int(String(b_char))!\n        let\
    \ xor = a_int ^ b_int\n        result.append(String(xor))\n    }\n    return result",
  "    let a_bytes = a.utf8.map { Int($0) }\n    let b_bytes = b.utf8.map { Int($0)\
    \ }\n    let xor_bytes = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return xor_bytes.reduce(\"\
    \") { $0 + String(UnicodeScalar($1)) }", "    var result = \"\"\n    for i in\
    \ 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        if a_char == b_char\
    \ {\n            result.append(\"0\")\n        } else {\n            result.append(\"\
    1\")\n        }\n    }\n    return result", "    let a = a.utf8.map { UInt8(bitPattern:\
    \ $0) }\n    let b = b.utf8.map { UInt8(bitPattern: $0) }\n    let result = zip(a,\
    \ b).map { $0 ^ $1 }\n    return result.reduce(\"\") { $0 + String(UnicodeScalar(UInt8(bitPattern:\
    \ $1))) }", "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char\
    \ = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let charA = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let charB = b[b.index(b.startIndex, offsetBy: i)]\n \
    \       if charA == charB {\n            result += \"0\"\n        } else {\n \
    \           result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a\
    \ = a.utf8.map { Int($0) - 48 }\n    let b = b.utf8.map { Int($0) - 48 }\n   \
    \ let result = zip(a, b).map { $0 ^ $1 }\n    return result.map { String($0) }.joined()",
  "    let a = a.utf8.map { UInt8(bitPattern: $0) }\n    let b = b.utf8.map { UInt8(bitPattern:\
    \ $0) }\n    let result = zip(a, b).map { UInt8(bitPattern: $0) ^ UInt8(bitPattern:\
    \ $1) }\n    return result.reduce(\"\") { $0 + String(UnicodeScalar(UInt8(bitPattern:\
    \ $1))) }", "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char\
    \ = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        result += String(Int(String(a_char))! ^ Int(String(b_char))!)\n\
    \    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count {\n\
    \        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for (index, element)\
    \ in a.enumerated() {\n        if element == b[b.index(b.startIndex, offsetBy:\
    \ index)] {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result", "    var result = \"\"\n   \
    \ for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        if a_char == b_char\
    \ {\n            result.append(\"0\")\n        } else {\n            result.append(\"\
    1\")\n        }\n    }\n    return result", "    let a_bytes = a.utf8.map { UInt8($0)\
    \ }\n    let b_bytes = b.utf8.map { UInt8($0) }\n    var result = [UInt8]()\n\
    \    for i in 0..<a_bytes.count {\n        result.append(a_bytes[i] ^ b_bytes[i])\n\
    \    }\n    return String(bytes: result, encoding: .utf8)!", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        result += String(a_char == b_char ? \"0\" : \"1\")\n    }\n    return\
    \ result", "    let aa = Array(a.utf8)\n    let bb = Array(b.utf8)\n    var cc\
    \ = [UInt8]()\n    for i in 0..<aa.count {\n        cc.append(aa[i] ^ bb[i])\n\
    \    }\n    return String(bytes: cc, encoding: .utf8)!", "    var result = \"\"\
    \n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.characters.count {\n        let aChar = a[a.startIndex.advancedBy(i)]\n\
    \        let bChar = b[b.startIndex.advancedBy(i)]\n        if aChar == bChar\
    \ {\n            result.append(\"0\")\n        } else {\n            result.append(\"\
    1\")\n        }\n    }\n    return result", "    let a = a.utf8.map { Int($0)\
    \ - 48 }\n    let b = b.utf8.map { Int($0) - 48 }\n    var result = \"\"\n   \
    \ for i in 0..<a.count {\n        result += String(a[i] ^ b[i])\n    }\n    return\
    \ result", "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char\
    \ = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    let a_bytes = a.utf8.map { Int($0) }\n    let b_bytes = b.utf8.map { Int($0)\
    \ }\n    let xor_bytes = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return xor_bytes.map\
    \ { String($0, radix: 2) }.joined()", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for (i, j) in\
    \ zip(a, b) {\n        result += String(Int(String(i))! ^ Int(String(j))!)\n \
    \   }\n    return result", "    var result = \"\"\n    for i in 0..<a.characters.count\
    \ {\n        let a_char = a[a.startIndex.advancedBy(i)]\n        let b_char =\
    \ b[b.startIndex.advancedBy(i)]\n        if a_char == b_char {\n            result.append(\"\
    0\")\n        } else {\n            result.append(\"1\")\n        }\n    }\n \
    \   return result", "    var result = \"\"\n    for i in 0..<a.characters.count\
    \ {\n        let a_char = a[a.startIndex.advancedBy(i)]\n        let b_char =\
    \ b[b.startIndex.advancedBy(i)]\n        result += String(Int(String(a_char))!\
    \ ^ Int(String(b_char))!)\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    let a = a.utf8.map\
    \ { UInt8(bitPattern: $0) }\n    let b = b.utf8.map { UInt8(bitPattern: $0) }\n\
    \    let result = zip(a, b).map { $0 ^ $1 }\n    return result.reduce(\"\") {\
    \ $0 + String(format: \"%02x\", $1) }", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        result += String(a_char ==\
    \ b_char ? \"0\" : \"1\")\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        result += String(a_char\
    \ == b_char ? \"0\" : \"1\")\n    }\n    return result", "    var result = \"\"\
    \n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        let a_int = Int(String(a_char))!\n        let b_int = Int(String(b_char))!\n\
    \        let xor = a_int ^ b_int\n        result.append(String(xor))\n    }\n\
    \    return result", "    var result = \"\"\n    for i in 0..<a.count {\n    \
    \    let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char =\
    \ b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result", "    let a = a.utf8.map { Int($0) - 48 }\n \
    \   let b = b.utf8.map { Int($0) - 48 }\n    let result = zip(a, b).map { $0 ^\
    \ $1 }\n    return result.map { String($0) }.joined()", "    var result = \"\"\
    \n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        result += String(Int(String(a_char))!\
    \ ^ Int(String(b_char))!)\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        result += String(Int(String(a_char))! ^ Int(String(b_char))!)\n    }\n\
    \    return result", "    var result = \"\"\n    for i in 0..<a.count {\n    \
    \    let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char =\
    \ b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        result += String(Int(String(a_char))!\
    \ ^ Int(String(b_char))!)\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    let a_bytes =\
    \ a.utf8.map { UInt8($0) }\n    let b_bytes = b.utf8.map { UInt8($0) }\n    var\
    \ result = [UInt8]()\n    for (a, b) in zip(a_bytes, b_bytes) {\n        result.append(a\
    \ ^ b)\n    }\n    return String(bytes: result, encoding: .utf8)!", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a\
    \ = a.utf8.map { Int($0) - 48 }\n    let b = b.utf8.map { Int($0) - 48 }\n   \
    \ let c = zip(a, b).map { $0 ^ $1 }\n    return String(c.map { Character(UnicodeScalar($0\
    \ + 48)) })", "    let a = a.utf8.map { Int($0) - 48 }\n    let b = b.utf8.map\
    \ { Int($0) - 48 }\n    let c = zip(a, b).map { $0 ^ $1 }\n    return String(c.map\
    \ { Character(UnicodeScalar($0 + 48)) })", "    var result = \"\"\n    for i in\
    \ 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n\
    \        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char\
    \ == b_char {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result", "    var result = \"\"\n   \
    \ for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", '    return String(zip(a,
    b).map(^))', "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char\
    \ = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    let a_bytes = a.utf8.map { Int($0) }\n    let b_bytes = b.utf8.map { Int($0)\
    \ }\n    let xor_bytes = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return String(bytes:\
    \ xor_bytes, encoding: .utf8)!", "    var result = \"\"\n    for (i, j) in zip(a,\
    \ b) {\n        result += String(Int(String(i))! ^ Int(String(j))!)\n    }\n \
    \   return result", "    let a = a.utf8.map { UInt8(bitPattern: $0) }\n    let\
    \ b = b.utf8.map { UInt8(bitPattern: $0) }\n    let result = zip(a, b).map { $0\
    \ ^ $1 }\n    return result.reduce(\"\") { $0 + String(UnicodeScalar(UInt8(bitPattern:\
    \ $1))) }", "    let a_bytes = a.utf8.map { Int($0) }\n    let b_bytes = b.utf8.map\
    \ { Int($0) }\n    let result_bytes = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n\
    \    return String(bytes: result_bytes, encoding: .utf8)!", "    let a_bytes =\
    \ a.utf8.map { UInt8($0) }\n    let b_bytes = b.utf8.map { UInt8($0) }\n    let\
    \ xored = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return xored.map { String($0,\
    \ radix: 2) }.joined()", "    var result = \"\"\n    for i in 0..<a.count {\n\
    \        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    let a_bytes = a.utf8.map { UInt8($0)\
    \ }\n    let b_bytes = b.utf8.map { UInt8($0) }\n    let xor_bytes = zip(a_bytes,\
    \ b_bytes).map { $0 ^ $1 }\n    return String(bytes: xor_bytes, encoding: .utf8)!",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a\
    \ = a.utf8.map { UInt8(bitPattern: $0) }\n    let b = b.utf8.map { UInt8(bitPattern:\
    \ $0) }\n    let xored = zip(a, b).map { $0 ^ $1 }\n    return xored.map { String(UnicodeScalar(UInt8(bitPattern:\
    \ $0))) }.joined()", "    var result = \"\"\n    for i in 0..<a.count {\n    \
    \    let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char =\
    \ b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.characters.count\
    \ {\n        let a_char = a[a.startIndex.advancedBy(i)]\n        let b_char =\
    \ b[b.startIndex.advancedBy(i)]\n        let a_int = Int(String(a_char))\n   \
    \     let b_int = Int(String(b_char))\n        let result_int = a_int! ^ b_int!\n\
    \        result.append(String(result_int))\n    }\n    return result", "    var\
    \ result = \"\"\n    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        if a_char == b_char\
    \ {\n            result.append(\"0\")\n        } else {\n            result.append(\"\
    1\")\n        }\n    }\n    return result", "    let a = a.utf8.map { UInt8(bitPattern:\
    \ $0) }\n    let b = b.utf8.map { UInt8(bitPattern: $0) }\n    let result = zip(a,\
    \ b).map { $0 ^ $1 }\n    return result.reduce(\"\") { $0 + String(format: \"\
    %02x\", $1) }", "    var result = \"\"\n    for i in 0..<a.characters.count {\n\
    \        let a_char = a[a.startIndex.advancedBy(i)]\n        let b_char = b[b.startIndex.advancedBy(i)]\n\
    \        if a_char == b_char {\n            result.append(\"0\")\n        } else\
    \ {\n            result.append(\"1\")\n        }\n    }\n    return result", " \
    \   var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a\
    \ = a.utf8.map { UInt8(bitPattern: $0) }\n    let b = b.utf8.map { UInt8(bitPattern:\
    \ $0) }\n    let result = zip(a, b).map { $0 ^ $1 }\n    return result.reduce(\"\
    \") { $0 + String(format: \"%02x\", $1) }", "    var result = \"\"\n    for i\
    \ in 0..<a.count {\n        let a_bit = a[a.index(a.startIndex, offsetBy: i)]\n\
    \        let b_bit = b[b.index(b.startIndex, offsetBy: i)]\n        if a_bit ==\
    \ b_bit {\n            result += \"0\"\n        } else {\n            result +=\
    \ \"1\"\n        }\n    }\n    return result", "    var result = \"\"\n    for\
    \ i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n\
    \        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char\
    \ == b_char {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result", "    let a = a.utf8.map { UInt8(bitPattern:\
    \ $0) }\n    let b = b.utf8.map { UInt8(bitPattern: $0) }\n    let result = zip(a,\
    \ b).map { $0 ^ $1 }\n    return result.reduce(\"\") { $0 + String(format: \"\
    %02x\", $1) }", "    let aa = a.utf8.map { UInt8($0) }\n    let bb = b.utf8.map\
    \ { UInt8($0) }\n    let cc = zip(aa, bb).map { $0 ^ $1 }\n    return String(bytes:\
    \ cc, encoding: .utf8)!", "    var result = \"\"\n    for i in 0..<a.count {\n\
    \        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    let a = a.utf8.map { Int($0) - 48 }\n\
    \    let b = b.utf8.map { Int($0) - 48 }\n    let c = zip(a, b).map { $0 ^ $1\
    \ }\n    return String(c.map { Character(UnicodeScalar($0 + 48)) })", "    let\
    \ a_bytes = a.utf8.map { Int($0) }\n    let b_bytes = b.utf8.map { Int($0) }\n\
    \    let result = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return result.map\
    \ { String($0, radix: 2) }.joined()", "    let a_bytes = a.utf8.map { Int($0)\
    \ }\n    let b_bytes = b.utf8.map { Int($0) }\n    let xor_bytes = zip(a_bytes,\
    \ b_bytes).map { $0 ^ $1 }\n    return xor_bytes.reduce(\"\") { $0 + String(UnicodeScalar($1))\
    \ }", "    let a_bytes = a.utf8.map { Int($0) }\n    let b_bytes = b.utf8.map\
    \ { Int($0) }\n    let c_bytes = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return\
    \ String(bytes: c_bytes, encoding: .utf8)!", "    let a = a.utf8.map { Int($0)\
    \ - 48 }\n    let b = b.utf8.map { Int($0) - 48 }\n    let result = zip(a, b).map\
    \ { $0 ^ $1 }\n    return result.map { String($0) }.joined()", "    let a = a.utf8.map\
    \ { Int($0) - 48 }\n    let b = b.utf8.map { Int($0) - 48 }\n    let c = zip(a,\
    \ b).map { $0 ^ $1 }\n    return String(c.map { Character(UnicodeScalar($0 + 48))\
    \ })", "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char\
    \ = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        let a_int = Int(String(a_char))!\n\
    \        let b_int = Int(String(b_char))!\n        result += String(a_int ^ b_int)\n\
    \    }\n    return result", "    var result = \"\"\n    for i in 0..<a.characters.count\
    \ {\n        let a_char = a[a.startIndex.advancedBy(i)]\n        let b_char =\
    \ b[b.startIndex.advancedBy(i)]\n        if a_char == b_char {\n            result.append(\"\
    0\")\n        } else {\n            result.append(\"1\")\n        }\n    }\n \
    \   return result", "    var result = \"\"\n    for i in 0..<a.characters.count\
    \ {\n        let a_char = a[a.startIndex.advancedBy(i)]\n        let b_char =\
    \ b[b.startIndex.advancedBy(i)]\n        result += String(Int(String(a_char))!\
    \ ^ Int(String(b_char))!)\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for (i, j) in zip(a, b) {\n        result += String(Int(String(i))!\
    \ ^ Int(String(j))!)\n    }\n    return result", "    var result = \"\"\n    for\
    \ i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n\
    \        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char\
    \ == b_char {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result", "    let a_bytes = a.utf8.map\
    \ { UInt8($0) }\n    let b_bytes = b.utf8.map { UInt8($0) }\n    let result =\
    \ zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return result.map { String($0, radix:\
    \ 2) }.joined()", "    var result = \"\"\n    for i in 0..<a.count {\n       \
    \ let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.characters.count {\n        let a_char\
    \ = a[a.startIndex.advancedBy(i)]\n        let b_char = b[b.startIndex.advancedBy(i)]\n\
    \        result += String(a_char == b_char ? \"0\" : \"1\")\n    }\n    return\
    \ result", "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char\
    \ = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    let a = a.map { Int(String($0))! }\n    let b = b.map { Int(String($0))! }\n\
    \    let c = zip(a, b).map { $0 ^ $1 }\n    return c.map { String($0) }.joined()",
  "    var result = \"\"\n    for i in 0..<a.characters.count {\n        let a_char\
    \ = a[a.startIndex.advancedBy(i)]\n        let b_char = b[b.startIndex.advancedBy(i)]\n\
    \        if a_char == b_char {\n            result.append(\"0\")\n        } else\
    \ {\n            result.append(\"1\")\n        }\n    }\n    return result", " \
    \   var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[i]\n        let b_char\
    \ = b[i]\n        if a_char == b_char {\n            result += \"0\"\n       \
    \ } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    let a = a.utf8.map { Int($0) - 48 }\n    let b = b.utf8.map { Int($0) - 48\
    \ }\n    let c = zip(a, b).map { $0 ^ $1 }\n    return String(c.map { Character(UnicodeScalar($0\
    \ + 48)) })", "    var result = \"\"\n    for i in 0..<a.count {\n        let\
    \ a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    let a_bytes = a.utf8.map { UInt8($0) }\n    let b_bytes = b.utf8.map { UInt8($0)\
    \ }\n    let result = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return String(bytes:\
    \ result, encoding: .utf8)!", "    let a = a.utf8.map { UInt8(bitPattern: $0)\
    \ }\n    let b = b.utf8.map { UInt8(bitPattern: $0) }\n    let xor = zip(a, b).map\
    \ { $0 ^ $1 }\n    return xor.map { String(UnicodeScalar(UInt8(bitPattern: $0)))\
    \ }.joined()", "    var result = \"\"\n    for i in 0..<a.count {\n        let\
    \ a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.characters.count {\n        let a_char\
    \ = a[a.startIndex.advancedBy(i)]\n        let b_char = b[b.startIndex.advancedBy(i)]\n\
    \        if a_char == b_char {\n            result.append(\"0\")\n        } else\
    \ {\n            result.append(\"1\")\n        }\n    }\n    return result", " \
    \   var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
