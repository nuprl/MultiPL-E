name: HumanEval_7_filter_by_substring
language: swift
prompt: "\n/// Filter an input list of strings only for ones that contain given substring\n\
  /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
  \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
  \ [String], substring: String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(filter_by_substring(strings: [] as [String],\
  \ substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\"\
  ) == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
  , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") ==\
  \ [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
  \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
  grunt\", \"prune\"])"
completions: ['    return strings.filter { $0.contains(substring) }', '    return
    strings.filter { $0.contains(substring) }', '    return strings.filter { $0.contains(substring)
    }', '    return strings.filter { $0.contains(substring) }', '    return strings.filter
    { $0.contains(substring) }', '    return strings.filter { $0.contains(substring)
    }', '    return strings.filter { $0.contains(substring) }', '    return strings.filter
    { $0.contains(substring) }', '    return strings.filter { $0.contains(substring)
    }', '    return strings.filter { $0.contains(substring) }', '    return strings.filter
    { $0.contains(substring) }', '    return strings.filter { $0.contains(substring)
    }', '    return strings.filter { $0.contains(substring) }', '    return strings.filter
    { $0.contains(substring) }', '    return strings.filter { $0.contains(substring)
    }', '    return strings.filter { $0.contains(substring) }', '    return strings.filter
    { $0.contains(substring) }', '    return strings.filter({ $0.contains(substring)
    })', '    return strings.filter { $0.contains(substring) }', '    return strings.filter
    { $0.contains(substring) }']
stop_tokens:
- "\n}"
