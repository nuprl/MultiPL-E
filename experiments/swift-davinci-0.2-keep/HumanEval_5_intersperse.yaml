name: HumanEval_5_intersperse
language: swift
prompt: "\n/// Insert a number 'delimeter' between every two consecutive elements\
  \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
  \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int)\
  \ -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter:\
  \ 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
  \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2) ==\
  \ [2, 2, 2, 2, 2])"
completions: ["    if numbers.isEmpty {\n        return []\n    }\n    var result\
    \ = [Int]()\n    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n\
    \        result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result", "    if numbers.isEmpty {\n        return []\n  \
    \  }\n    var result = [Int]()\n    for i in 0..<numbers.count - 1 {\n       \
    \ result.append(numbers[i])\n        result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result", "    if numbers.isEmpty {\n        return []\n  \
    \  } else {\n        var result = [Int]()\n        for i in 0..<numbers.count\
    \ {\n            result.append(numbers[i])\n            if i != numbers.count\
    \ - 1 {\n                result.append(delimeter)\n            }\n        }\n\
    \        return result\n    }", "    if numbers.isEmpty {\n        return []\n\
    \    }\n    var result = [Int]()\n    result.append(numbers[0])\n    for i in\
    \ 1..<numbers.count {\n        result.append(delimeter)\n        result.append(numbers[i])\n\
    \    }\n    return result", "    var result: [Int] = []\n    for i in 0..<numbers.count\
    \ {\n        result.append(numbers[i])\n        if i != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result", " \
    \   var result: [Int] = []\n    for (index, number) in numbers.enumerate() {\n\
    \        result.append(number)\n        if index != numbers.count - 1 {\n    \
    \        result.append(delimeter)\n        }\n    }\n    return result", "   \
    \ if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n \
    \   for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n    \
    \    result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result", "    if numbers.isEmpty {\n        return []\n  \
    \  }\n    var result = [Int]()\n    for i in 0..<numbers.count - 1 {\n       \
    \ result.append(numbers[i])\n        result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result", "    if numbers.isEmpty {\n        return []\n  \
    \  }\n    var result = [Int]()\n    for i in 0..<numbers.count - 1 {\n       \
    \ result.append(numbers[i])\n        result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result", "    if numbers.isEmpty {\n        return []\n  \
    \  }\n    if numbers.count == 1 {\n        return numbers\n    }\n    var result\
    \ = [Int]()\n    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n\
    \        result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result", "    if numbers.isEmpty {\n        return []\n  \
    \  } else {\n        var result = [Int]()\n        for i in 0..<numbers.count\
    \ - 1 {\n            result.append(numbers[i])\n            result.append(delimeter)\n\
    \        }\n        result.append(numbers[numbers.count - 1])\n        return\
    \ result\n    }", "    if numbers.isEmpty {\n        return []\n    }\n    var\
    \ result = [Int]()\n    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n\
    \        result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result", "    var result: [Int] = []\n    for i in 0..<numbers.count\
    \ {\n        result.append(numbers[i])\n        if i != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result", " \
    \   if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i < numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result", "    if numbers.isEmpty {\n        return []\n   \
    \ }\n    if numbers.count == 1 {\n        return numbers\n    }\n    var result\
    \ = [Int]()\n    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n\
    \        result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result", "    if numbers.isEmpty {\n        return []\n  \
    \  }\n    var result = [Int]()\n    for i in 0..<numbers.count - 1 {\n       \
    \ result.append(numbers[i])\n        result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result", "    if numbers.isEmpty {\n        return []\n  \
    \  }\n    var result = [Int]()\n    for i in 0..<numbers.count - 1 {\n       \
    \ result.append(numbers[i])\n        result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result", "    var result: [Int] = []\n    for i in 0..<numbers.count\
    \ {\n        result.append(numbers[i])\n        if i != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result", " \
    \   if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result", "    var result: [Int] = []\n    for i in 0..<numbers.count\
    \ {\n        result.append(numbers[i])\n        if i < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
