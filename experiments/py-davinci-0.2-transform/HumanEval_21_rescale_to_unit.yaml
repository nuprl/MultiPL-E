name: HumanEval_21_rescale_to_unit
language: py
prompt: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n\
  \    \"\"\" Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n    such that the smallest number will become 0 and the largest\
  \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n \
  \   assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0,\
  \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0,\
  \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0,\
  \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
  \ntest_check()\n"
completions: ["    assert len(numbers) >= 2, \"At least two numbers are required\"\
    \n    min_value = min(numbers)\n    max_value = max(numbers)\n    assert min_value\
    \ != max_value, \"All numbers are equal\"\n    return [(number - min_value) /\
    \ (max_value - min_value) for number in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n    assert\
    \ min_value != max_value\n    return [(x - min_value) / (max_value - min_value)\
    \ for x in numbers]\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2, \"List must contain at least two elements\"\n   \
    \ min_number = min(numbers)\n    max_number = max(numbers)\n    assert min_number\
    \ != max_number, \"List must contain at least two different elements\"\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number\n    return [(x - min_number) / (max_number\
    \ - min_number) for x in numbers]\n", "    assert len(numbers) >= 2\n    min_num\
    \ = min(numbers)\n    max_num = max(numbers)\n    assert min_num != max_num\n\
    \    return [(num - min_num) / (max_num - min_num) for num in numbers]\n", " \
    \   assert len(numbers) >= 2\n    min_number = min(numbers)\n    max_number =\
    \ max(numbers)\n    assert min_number != max_number\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ >= 2, \"List of numbers must have at least two elements\"\n    min_number =\
    \ min(numbers)\n    max_number = max(numbers)\n    assert max_number != min_number,\
    \ \"List of numbers must have at least two distinct elements\"\n    return [(x\
    \ - min_number) / (max_number - min_number) for x in numbers]\n", "    assert\
    \ len(numbers) >= 2, \"List must have at least two elements\"\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number,\
    \ \"List must have at least two different elements\"\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    min_num = min(numbers)\n\
    \    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num)\
    \ for num in numbers]\n", "    assert len(numbers) >= 2, \"List must have at least\
    \ two elements\"\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    assert min_value != max_value, \"List must have at least two different elements\"\
    \n    return [(n - min_value) / (max_value - min_value) for n in numbers]\n",
  "    assert len(numbers) >= 2, \"At least two numbers are needed to rescale\"\n\
    \    min_num, max_num = min(numbers), max(numbers)\n    assert min_num != max_num,\
    \ \"All numbers are the same, cannot rescale\"\n    return [(num - min_num) /\
    \ (max_num - min_num) for num in numbers]\n", "    assert len(numbers) >= 2\n\
    \    min_value = min(numbers)\n    max_value = max(numbers)\n    assert min_value\
    \ != max_value\n    return [(x - min_value) / (max_value - min_value) for x in\
    \ numbers]\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2, \"Need at least two numbers to rescale\"\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number,\
    \ \"Cannot rescale a list with only one number\"\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ >= 2, \"Need at least two numbers to rescale\"\n    min_n = min(numbers)\n \
    \   max_n = max(numbers)\n    assert min_n != max_n, \"Cannot rescale a list with\
    \ only one number\"\n    return [(n - min_n) / (max_n - min_n) for n in numbers]\n",
  "    assert len(numbers) >= 2\n    min_num = min(numbers)\n    max_num = max(numbers)\n\
    \    assert min_num != max_num\n    return [(num - min_num) / (max_num - min_num)\
    \ for num in numbers]\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(x - min_number) / (max_number - min_number) for x in numbers]\n", "    assert\
    \ len(numbers) >= 2\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    assert min_value != max_value\n    return [(x - min_value) / (max_value -\
    \ min_value) for x in numbers]\n", "    min_number, max_number = min(numbers),\
    \ max(numbers)\n    if min_number == max_number:\n        return [0.5] * len(numbers)\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
