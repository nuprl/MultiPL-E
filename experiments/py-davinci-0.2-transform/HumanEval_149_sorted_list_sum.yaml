name: HumanEval_149_sorted_list_sum
language: py
prompt: "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n\
  \    \"\"\"Write a function that accepts a list of strings as a parameter,\n   \
  \ deletes the strings that have odd lengths from it,\n    and returns the resulted\
  \ list with a sorted order,\n    The list is always a list of strings and never\
  \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
  \ list should be ascending by length of each word, and you\n    should return the\
  \ list sorted by that rule.\n    If two words have the same length, sort the list\
  \ alphabetically.\n    The function should return a list of strings in sorted order.\n\
  \    You may assume that all words will have the same length.\n    For example:\n\
  \    >>> list_sort(['aa', 'a', 'aaa'])\n    ['aa']\n    >>> list_sort(['ab', 'a',\
  \ 'aaa', 'cd'])\n    ['ab', 'cd']\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(['aa', 'a', 'aaa']) == ['aa']\n\
  \    assert candidate(['school', 'AI', 'asdf', 'b']) == ['AI', 'asdf', 'school']\n\
  \    assert candidate(['d', 'b', 'c', 'a']) == []\n    assert candidate(['d', 'dcba',\
  \ 'abcd', 'a']) == ['abcd', 'dcba']\n    assert candidate(['AI', 'ai', 'au']) ==\
  \ ['AI', 'ai', 'au']\n    assert candidate(['a', 'b', 'b', 'c', 'c', 'a']) == []\n\
  \    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == ['cc', 'dd', 'aaaa', 'bbbb']\n\
  \ndef test_check():\n    check(sorted_list_sum)\n\ntest_check()\n"
completions: ["    # lst = [x for x in lst if len(x) % 2 == 0]\n    # lst.sort(key=len)\n\
    \    # return lst\n    return sorted([x for x in lst if len(x) % 2 == 0], key=len)\n",
  "    return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)))\n", "    lst.sort(key=len)\n\
    \    return lst\n", "    return sorted(list(filter(lambda x: len(x) % 2 == 0,\
    \ lst)))\n", "    return sorted(lst, key=lambda x: (len(x), x))\n", "    return\
    \ sorted(list(filter(lambda x: len(x) % 2 == 0, lst)))\n\n", "    return sorted(lst,\
    \ key=lambda x: (len(x), x))\n\n", "    return sorted(lst, key=lambda x: (len(x),\
    \ x))\n", "    return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)))\n",
  "    lst = [x for x in lst if len(x) % 2 == 0]\n    lst.sort(key=len)\n    return\
    \ lst\n", "    return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)))\n",
  "    return sorted(lst, key=lambda x: (len(x), x))\n", "    return sorted(lst, key=lambda\
    \ x: (len(x), x))\n", "    return sorted(lst, key=lambda x: (len(x), x))\n", " \
    \   return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)))\n", "    # lst\
    \ = [i for i in lst if len(i) % 2 == 0]\n    # lst.sort(key=lambda x: (len(x),\
    \ x))\n    # return lst\n    return sorted([i for i in lst if len(i) % 2 == 0],\
    \ key=lambda x: (len(x), x))\n", "    return sorted(lst, key=lambda x: (len(x),\
    \ x))\n\n", "    return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)))\n",
  "    return sorted(lst, key=lambda x: (len(x), x))\n", "    return sorted(lst, key=lambda\
    \ x: (len(x), x))\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
