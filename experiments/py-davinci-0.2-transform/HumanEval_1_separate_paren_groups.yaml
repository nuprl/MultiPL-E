name: HumanEval_1_separate_paren_groups
language: py
prompt: "from typing import List\n\ndef separate_paren_groups(paren_string: str) ->\
  \ List[str]:\n    \"\"\" Input to this function is a string containing multiple\
  \ groups of nested parentheses. Your goal is to\n    separate those group into separate\
  \ strings and return the list of those.\n    Separate groups are balanced (each\
  \ open brace is properly closed) and not nested within each other\n    Ignore any\
  \ spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n\
  \    ['()', '(())', '(()())']\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
  \ == ['(()())', '((()))', '()', '((())()())']\n    assert candidate('() (()) ((()))\
  \ (((())))') == ['()', '(())', '((()))', '(((())))']\n    assert candidate('(()(())((())))')\
  \ == ['(()(())((())))']\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())',\
  \ '(()())']\n\ndef test_check():\n    check(separate_paren_groups)\n\ntest_check()\n"
completions: ["    # TODO: Implement this function\n    pass\n", "    # TODO: implement\
    \ this function\n    pass\n", "    # TODO: Implement me!\n    pass\n", "    #\
    \ TODO: implement this function\n    pass\n", "    # TODO: Implement this function\n\
    \    pass\n", "    pass\n", "    pass\n", "    pass\n", "    # TODO: Implement\
    \ this function\n    pass\n", "    pass\n", "    pass\n", "    # TODO: Implement\
    \ this function\n    pass\n", "    # TODO: Implement this function\n    pass\n",
  "    # TODO: implement this function\n    pass\n", "    # TODO: implement this function\n\
    \    return []\n\n", "    pass\n", "    pass\n", "    # TODO: Implement this function\n\
    \    pass\n", "    pass\n", "    pass\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
