language: py
name: HumanEval_61_correct_bracketing
results:
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you've seen so far.\n    #\
    \ You can use the list methods append and pop.\n    # Or you can use a list comprehension.\n\
    \    # Or you can use a generator expression.\n    # Or you can use recursion.\n\
    \    # Or you can use a for loop.\n    # Or you can use a while loop.\n    # Or\
    \ you can use a helper function.\n    # Or you can use a helper class.\n    #\
    \ Or you can use a helper module.\n    # Or you can use a helper computer.\n \
    \   # Or you can use a helper human.\n    # Or you can use a helper alien.\n \
    \   # Or you can use a helper robot.\n    # Or you can use a helper cyborg.\n\
    \    # Or you can use a helper cyborg alien robot.\n    # Or you can use a helper\
    \ cyborg alien robot human.\n    # Or you can use a helper cyborg alien robot\
    \ human alien cyborg robot.\n    # Or you can use a helper cyborg alien robot\
    \ human alien cyborg robot human.\n    # Or you can use a helper cyborg alien\
    \ robot human alien cyborg robot human alien cyborg robot.\n    # Or you can use\
    \ a helper cyborg alien robot human alien cyborg robot human alien cyborg robot\
    \ human alien cyborg robot.\n    # Or you can use a helper cyborg alien robot\
    \ human alien cyborg robot human alien cyborg robot human alien cyborg robot human\
    \ alien cyborg robot.\n    # Or you can use a helper cyborg alien robot human\
    \ alien cyborg robot human alien cyborg robot human alien cyborg robot human alien\
    \ cyborg robot human alien cyborg robot.\n    # Or you can use a helper cyborg\
    \ alien robot human alien cyborg robot human alien cyborg robot human alien cyborg\
    \ robot human alien cyborg robot human alien cyborg robot human alien cyborg robot.\n\
    \    # Or you can use a helper cyborg alien robot human alien cyborg robot human\
    \ alien cyborg robot human alien cyborg robot human alien cyborg robot human alien\
    \ cyborg robot human alien cyborg robot human alien cyborg robot.\n    # Or you\
    \ can use a helper cyborg alien robot human alien cyborg robot human alien cyborg\
    \ robot human alien cyborg robot human alien cyborg robot human alien cyborg robot\
    \ human alien cyborg robot human alien cy\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpider2wop.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpider2wop.py\", line 55,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpider2wop.py\"\
    , line 41, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete the body of this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhrqt17i.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfhrqt17i.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpfhrqt17i.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ use a stack\n    stack = []\n    for bracket in brackets:\n        if bracket\
    \ == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n \
    \           if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete this function body\n    # Hint: you may want to use a stack\n    stack\
    \ = []\n    for i in brackets:\n        if i == '(':\n            stack.append(i)\n\
    \        elif i == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    if len(stack) ==\
    \ 0:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete the body of this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhrqt17i.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfhrqt17i.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpfhrqt17i.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    # Hint: you may want to use a stack\n    stack\
    \ = []\n    for bracket in brackets:\n        if bracket == '(':\n           \
    \ stack.append(bracket)\n        elif bracket == ')':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \    if len(stack) == 0:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '(':\n            count +=\
    \ 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for c in brackets:\n        if c == '(':\n            count += 1\n\
    \        elif c == ')':\n            count -= 1\n        if count < 0:\n     \
    \       return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen so far.\n  \
    \  # You can use a list as a stack.\n    # To push an item onto the stack, use\
    \ .append(item).\n    # To pop an item off the stack, use .pop().\n    # If you\
    \ try to pop from an empty list, you get an IndexError.\n    # You can check whether\
    \ a list is empty using == [].\n    # You can check whether a list is non-empty\
    \ using != [].\n    #\n    # You can also use a list as a queue.\n    # To enqueue\
    \ an item, use .append(item).\n    # To dequeue an item, use .pop(0).\n    # If\
    \ you try to dequeue from an empty list, you get an IndexError.\n    #\n    #\
    \ You can also use a list as a set.\n    # To add an item to a set, use .append(item).\n\
    \    # To check whether an item is in a set, use \"item in set\".\n    #\n   \
    \ # You can also use a list as a dictionary.\n    # To set the value of a key,\
    \ use .append((key, value)).\n    # To get the value of a key, use \"for key2,\
    \ value in dictionary: if key == key2: return value\".\n    # To delete the value\
    \ of a key, use \"dictionary.remove((key, value))\".\n    # To check whether a\
    \ key has a value, use \"for key2, value in dictionary: if key == key2: return\
    \ True\".\n    #\n    # You can also use a list as a multiset.\n    # To add an\
    \ item to a multiset, use .append(item).\n    # To remove an item from a multiset,\
    \ use \"multiset.remove(item)\".\n    # To check whether an item is in a multiset,\
    \ use \"item in multiset\".\n    #\n    # You can also use a list as a priority\
    \ queue.\n    # To enqueue an item with priority, use .append((priority, item)).\n\
    \    # To dequeue an item, use \"min(priority_queue, key=lambda x: x[0])[1]\"\
    .\n    # If you try to\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf9fwssbf.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmpf9fwssbf.py\", line 61,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpf9fwssbf.py\"\
    , line 47, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == '':\n        return True\n    elif brackets[0] == ')':\n        return False\n\
    \    else:\n        return correct_bracketing(brackets[1:])\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpflvg1jq2.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpflvg1jq2.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpflvg1jq2.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
