language: py
name: HumanEval_61_correct_bracketing
results:
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you've seen so far.\n    #\
    \ You can use the list methods append and pop.\n    # Or you can use a list comprehension.\n\
    \    # Or you can use a generator expression.\n    # Or you can use recursion.\n\
    \    # Or you can use a for loop.\n    # Or you can use a while loop.\n    # Or\
    \ you can use a helper function.\n    # Or you can use a helper class.\n    #\
    \ Or you can use a helper module.\n    # Or you can use a helper computer.\n \
    \   # Or you can use a helper human.\n    # Or you can use a helper alien.\n \
    \   # Or you can use a helper robot.\n    # Or you can use a helper cyborg.\n\
    \    # Or you can use a helper cyborg alien robot.\n    # Or you can use a helper\
    \ cyborg alien robot human.\n    # Or you can use a helper cyborg alien robot\
    \ human alien cyborg robot.\n    # Or you can use a helper cyborg alien robot\
    \ human alien cyborg robot human.\n    # Or you can use a helper cyborg alien\
    \ robot human alien cyborg robot human alien cyborg robot.\n    # Or you can use\
    \ a helper cyborg alien robot human alien cyborg robot human alien cyborg robot\
    \ human alien cyborg robot.\n    # Or you can use a helper cyborg alien robot\
    \ human alien cyborg robot human alien cyborg robot human alien cyborg robot human\
    \ alien cyborg robot.\n    # Or you can use a helper cyborg alien robot human\
    \ alien cyborg robot human alien cyborg robot human alien cyborg robot human alien\
    \ cyborg robot human alien cyborg robot.\n    # Or you can use a helper cyborg\
    \ alien robot human alien cyborg robot human alien cyborg robot human alien cyborg\
    \ robot human alien cyborg robot human alien cyborg robot human alien cyborg robot.\n\
    \    # Or you can use a helper cyborg alien robot human alien cyborg robot human\
    \ alien cyborg robot human alien cyborg robot human alien cyborg robot human alien\
    \ cyborg robot human alien cyborg robot human alien cyborg robot.\n    # Or you\
    \ can use a helper cyborg alien robot human alien cyborg robot human alien cyborg\
    \ robot human alien cyborg robot human alien cyborg robot human alien cyborg robot\
    \ human alien cyborg robot human alien cy\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpider2wop.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpider2wop.py\", line 55,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpider2wop.py\"\
    , line 41, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete the body of this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhrqt17i.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfhrqt17i.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpfhrqt17i.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ use a stack\n    stack = []\n    for bracket in brackets:\n        if bracket\
    \ == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n \
    \           if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete this function body\n    # Hint: you may want to use a stack\n    stack\
    \ = []\n    for i in brackets:\n        if i == '(':\n            stack.append(i)\n\
    \        elif i == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    if len(stack) ==\
    \ 0:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete the body of this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhrqt17i.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfhrqt17i.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpfhrqt17i.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    # Hint: you may want to use a stack\n    stack\
    \ = []\n    for bracket in brackets:\n        if bracket == '(':\n           \
    \ stack.append(bracket)\n        elif bracket == ')':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \    if len(stack) == 0:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '(':\n            count +=\
    \ 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for c in brackets:\n        if c == '(':\n            count += 1\n\
    \        elif c == ')':\n            count -= 1\n        if count < 0:\n     \
    \       return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen so far.\n  \
    \  # You can use a list as a stack.\n    # To push an item onto the stack, use\
    \ .append(item).\n    # To pop an item off the stack, use .pop().\n    # If you\
    \ try to pop from an empty list, you get an IndexError.\n    # You can check whether\
    \ a list is empty using == [].\n    # You can check whether a list is non-empty\
    \ using != [].\n    #\n    # You can also use a list as a queue.\n    # To enqueue\
    \ an item, use .append(item).\n    # To dequeue an item, use .pop(0).\n    # If\
    \ you try to dequeue from an empty list, you get an IndexError.\n    #\n    #\
    \ You can also use a list as a set.\n    # To add an item to a set, use .append(item).\n\
    \    # To check whether an item is in a set, use \"item in set\".\n    #\n   \
    \ # You can also use a list as a dictionary.\n    # To set the value of a key,\
    \ use .append((key, value)).\n    # To get the value of a key, use \"for key2,\
    \ value in dictionary: if key == key2: return value\".\n    # To delete the value\
    \ of a key, use \"dictionary.remove((key, value))\".\n    # To check whether a\
    \ key has a value, use \"for key2, value in dictionary: if key == key2: return\
    \ True\".\n    #\n    # You can also use a list as a multiset.\n    # To add an\
    \ item to a multiset, use .append(item).\n    # To remove an item from a multiset,\
    \ use \"multiset.remove(item)\".\n    # To check whether an item is in a multiset,\
    \ use \"item in multiset\".\n    #\n    # You can also use a list as a priority\
    \ queue.\n    # To enqueue an item with priority, use .append((priority, item)).\n\
    \    # To dequeue an item, use \"min(priority_queue, key=lambda x: x[0])[1]\"\
    .\n    # If you try to\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf9fwssbf.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmpf9fwssbf.py\", line 61,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpf9fwssbf.py\"\
    , line 47, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == '':\n        return True\n    elif brackets[0] == ')':\n        return False\n\
    \    else:\n        return correct_bracketing(brackets[1:])\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpflvg1jq2.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpflvg1jq2.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpflvg1jq2.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen so far.\n  \
    \  # You can use the list methods append and pop.\n    # You can also use a variable\
    \ to keep track of the number of opening brackets you have seen so far.\n    #\
    \ You can use the += and -= operators.\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == '(':\n            stack.append(bracket)\n        elif bracket\
    \ == ')':\n            if len(stack) == 0:\n                return False\n   \
    \         else:\n                stack.pop()\n    if len(stack) == 0:\n      \
    \  return True\n    else:\n        return False\n\n\ndef check(candidate):\n \
    \   assert candidate('()') == True\n    assert candidate('(()())') == True\n \
    \   assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747838
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the opening brackets.\n    # You can use\
    \ a list as a stack.\n    # You can use append and pop to add and remove items\
    \ from the end of a list.\n    # You can use len to get the length of a list.\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n  \
    \          stack.append(bracket)\n        elif bracket == ')':\n            if\
    \ len(stack) == 0:\n                return False\n            else:\n        \
    \        stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747838
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ You can use a stack to keep track of the brackets you have seen\n    # so far.\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n  \
    \          stack.append(bracket)\n        elif bracket == ')':\n            if\
    \ stack == []:\n                return False\n            else:\n            \
    \    stack.pop()\n    if stack == []:\n        return True\n    else:\n      \
    \  return False\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you've seen so far.\n    #\
    \ You can use the list methods append and pop.\n    # You can use the string method\
    \ count.\n    # You can use the string method index.\n    # You can use the string\
    \ method replace.\n    # You can use the string method strip.\n    # You can use\
    \ the string method startswith.\n    # You can use the string method endswith.\n\
    \    # You can use the string method find.\n    # You can use the string method\
    \ rfind.\n    # You can use the string method split.\n    # You can use the string\
    \ method join.\n    # You can use the string method isalpha.\n    # You can use\
    \ the string method isalnum.\n    # You can use the string method isdigit.\n \
    \   # You can use the string method islower.\n    # You can use the string method\
    \ isupper.\n    # You can use the string method isspace.\n    # You can use the\
    \ string method istitle.\n    # You can use the string method lower.\n    # You\
    \ can use the string method upper.\n    # You can use the string method swapcase.\n\
    \    # You can use the string method title.\n    # You can use the string method\
    \ capitalize.\n    # You can use the string method ljust.\n    # You can use the\
    \ string method rjust.\n    # You can use the string method center.\n    # You\
    \ can use the string method lstrip.\n    # You can use the string method rstrip.\n\
    \    # You can use the string method strip.\n    # You can use the string method\
    \ zfill.\n    # You can use the string method format.\n    # You can use the string\
    \ method format_map.\n    # You can use the string method maketrans.\n    # You\
    \ can use the string method translate.\n    # You can use the string method partition.\n\
    \    # You can use the string method rpartition.\n    # You can use the string\
    \ method split.\n    # You can use the string method rsplit.\n    # You can use\
    \ the string method splitlines.\n    # You can use the string method startswith.\n\
    \    # You can use the string method endswith.\n    # You\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1vp2eokj.py\", line\
    \ 74, in <module>\n    test_check()\n  File \"/tmp/tmp1vp2eokj.py\", line 72,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp1vp2eokj.py\"\
    , line 58, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747838
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqhesdw9p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqhesdw9p.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpqhesdw9p.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747806
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    bracket_count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            bracket_count\
    \ += 1\n        elif bracket == ')':\n            bracket_count -= 1\n       \
    \ if bracket_count < 0:\n            return False\n    return bracket_count ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if len(brackets)\
    \ == 0:\n        return True\n    elif len(brackets) == 1:\n        return False\n\
    \    else:\n        if brackets[0] == '(' and brackets[-1] == ')':\n         \
    \   return correct_bracketing(brackets[1:-1])\n        else:\n            return\
    \ False\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsqyiwrgq.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpsqyiwrgq.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpsqyiwrgq.py\"\
    , line 27, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '(':\n            count +=\
    \ 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete this function body\n    return False  # stub\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpak_k4coe.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpak_k4coe.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpak_k4coe.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747838
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen so far.\n  \
    \  # You can use a list as a stack.\n    # To push an item onto the stack, use\
    \ list.append(item).\n    # To pop an item off the stack, use list.pop().\n  \
    \  # To check if the stack is empty, use if not list:\n    #\n    # You can also\
    \ use a list as a queue.\n    # To enqueue an item, use list.append(item).\n \
    \   # To dequeue an item, use list.pop(0).\n    # To check if the queue is empty,\
    \ use if not list:\n    #\n    # You can also use a list as a deque.\n    # To\
    \ enqueue an item at the front, use list.insert(0, item).\n    # To dequeue an\
    \ item from the front, use list.pop(0).\n    # To dequeue an item from the back,\
    \ use list.pop().\n    # To check if the deque is empty, use if not list:\n  \
    \  #\n    # You can also use a list as a priority queue.\n    # To enqueue an\
    \ item with priority p, use list.append((p, item)).\n    # To dequeue an item,\
    \ use list.pop(0).\n    # To check if the priority queue is empty, use if not\
    \ list:\n    #\n    # You can also use a list as a set.\n    # To add an item\
    \ to the set, use list.append(item).\n    # To check if the set contains an item,\
    \ use if item in list:\n    # To remove an item from the set, use list.remove(item).\n\
    \    # To check if the set is empty, use if not list:\n    #\n    # You can also\
    \ use a list as a dictionary.\n    # To add an item to the dictionary, use list.append((key,\
    \ value)).\n    # To check if the dictionary contains an item, use if key in list:\n\
    \    # To remove an item from the dictionary, use list.remove((key, value)).\n\
    \    # To check if the dictionary is empty, use if not list:\n    #\n    # You\
    \ can also use a list as a graph.\n    # To add a node to the\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplnutl7l8.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmplnutl7l8.py\", line 65,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmplnutl7l8.py\"\
    , line 51, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ use a stack\n    stack = []\n    for bracket in brackets:\n        if bracket\
    \ == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n \
    \           if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen\n    # so far.\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n  \
    \          stack.append(bracket)\n        elif bracket == ')':\n            if\
    \ len(stack) == 0:\n                return False\n            else:\n        \
    \        stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747806
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '(':\n            count +=\
    \ 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a loop and a counter.\n    # If the counter is ever negative, return\
    \ False.\n    # If the counter is ever positive at the end of the loop, return\
    \ False.\n    # Otherwise, return True.\n    #\n    # Hint: you can use a loop\
    \ and a counter.\n    # If the counter is ever negative, return False.\n    #\
    \ If the counter is ever positive at the end of the loop, return False.\n    #\
    \ Otherwise, return True.\n    counter = 0\n    for i in brackets:\n        if\
    \ i == '(':\n            counter += 1\n        elif i == ')':\n            counter\
    \ -= 1\n        if counter < 0:\n            return False\n    if counter > 0:\n\
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Keep\
    \ track of how many brackets we have seen so far.\n    # If we see a closing bracket,\
    \ we must have seen at least one opening bracket.\n    # If we see an opening\
    \ bracket, we can add one to the count.\n    # If we see a closing bracket, we\
    \ must subtract one from the count.\n    # If we see a closing bracket and the\
    \ count is 0, then we have seen too many closing brackets.\n    # If we finish\
    \ and the count is not 0, then we have seen too many opening brackets.\n    count\
    \ = 0\n    for b in brackets:\n        if b == '(':\n            count += 1\n\
    \        elif b == ')':\n            if count == 0:\n                return False\n\
    \            count -= 1\n    return count == 0\n\n\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747838
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen so far.\n  \
    \  # If you see an opening bracket, add it to the stack.\n    # If you see a closing\
    \ bracket, remove the last opening bracket from the stack.\n    # If you see a\
    \ closing bracket but there are no opening brackets on the stack,\n    # then\
    \ there is a missing opening bracket.\n    # If you finish the loop and there\
    \ are still opening brackets on the stack,\n    # then there is a missing closing\
    \ bracket.\n    stack = []\n    for bracket in brackets:\n        if bracket ==\
    \ '(':\n            stack.append(bracket)\n        elif bracket == ')':\n    \
    \        if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to solve this problem.\n    # You can use the list methods\
    \ append and pop.\n    # Or you can use the queue methods put and get.\n    #\
    \ Or you can use the deque methods append and popleft.\n    # Or you can use the\
    \ deque methods appendleft and pop.\n    # Or you can use the deque methods append\
    \ and pop.\n    # Or you can use the deque methods appendleft and popleft.\n \
    \   # Or you can use the deque methods append and popleft.\n    # Or you can use\
    \ the deque methods appendleft and pop.\n    # Or you can use the deque methods\
    \ append and pop.\n    # Or you can use the deque methods appendleft and popleft.\n\
    \    # Or you can use the deque methods append and popleft.\n    # Or you can\
    \ use the deque methods appendleft and pop.\n    # Or you can use the deque methods\
    \ append and pop.\n    # Or you can use the deque methods appendleft and popleft.\n\
    \    # Or you can use the deque methods append and popleft.\n    # Or you can\
    \ use the deque methods appendleft and pop.\n    # Or you can use the deque methods\
    \ append and pop.\n    # Or you can use the deque methods appendleft and popleft.\n\
    \    # Or you can use the deque methods append and popleft.\n    # Or you can\
    \ use the deque methods appendleft and pop.\n    # Or you can use the deque methods\
    \ append and pop.\n    # Or you can use the deque methods appendleft and popleft.\n\
    \    # Or you can use the deque methods append and popleft.\n    # Or you can\
    \ use the deque methods appendleft and pop.\n    # Or you can use the deque methods\
    \ append and pop.\n    # Or you can use the deque methods appendleft and popleft.\n\
    \    # Or you can use the deque methods append and popleft.\n    # Or you can\
    \ use the deque methods appendleft and pop.\n    # Or you can use the deque methods\
    \ append and pop.\n    # Or you can use the deque methods appendleft and popleft.\n\
    \    # Or you can use\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi1s90bkh.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmpi1s90bkh.py\", line 61,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpi1s90bkh.py\"\
    , line 47, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to solve this problem.\n    # You can use the list methods\
    \ append and pop.\n    # Or you can use the queue functions put and get.\n   \
    \ # Or you can use the stack functions push and pop.\n    # Or you can use the\
    \ deque functions append and popleft.\n    # You can also use a variable to keep\
    \ track of the number of opening brackets.\n    # You can also use a variable\
    \ to keep track of the number of closing brackets.\n    # You can also use a variable\
    \ to keep track of the number of opening brackets minus the number of closing\
    \ brackets.\n    # You can also use a variable to keep track of the number of\
    \ closing brackets minus the number of opening brackets.\n    # You can also use\
    \ a variable to keep track of the number of opening brackets plus the number of\
    \ closing brackets.\n    # You can also use a variable to keep track of the number\
    \ of closing brackets plus the number of opening brackets.\n    # You can also\
    \ use a variable to keep track of the number of opening brackets times the number\
    \ of closing brackets.\n    # You can also use a variable to keep track of the\
    \ number of closing brackets times the number of opening brackets.\n    # You\
    \ can also use a variable to keep track of the number of opening brackets divided\
    \ by the number of closing brackets.\n    # You can also use a variable to keep\
    \ track of the number of closing brackets divided by the number of opening brackets.\n\
    \    # You can also use a variable to keep track of the number of opening brackets\
    \ modulo the number of closing brackets.\n    # You can also use a variable to\
    \ keep track of the number of closing brackets modulo the number of opening brackets.\n\
    \    # You can also use a variable to keep track of the number of opening brackets\
    \ to the power of the number of closing brackets.\n    # You can also use a variable\
    \ to keep track of the number of closing brackets to the power of the number of\
    \ opening brackets.\n    # You can also use a variable to keep track of the number\
    \ of opening brackets to the power of the number of closing brackets plus one.\n\
    \    # You can also use a variable to keep track of the number of closing brackets\
    \ to the power of the number of opening brackets plus one.\n    # You can also\
    \ use a variable to keep track of the number of opening brackets to the power\
    \ of the number of closing brackets minus one.\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxwuduiq.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpkxwuduiq.py\", line 51,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkxwuduiq.py\"\
    , line 37, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the opening brackets.\n    # You can use\
    \ a list as a stack.\n    # To push an item onto the stack, use stack.append(item).\n\
    \    # To pop an item off the stack, use stack.pop().\n    # To check if the stack\
    \ is empty, use if not stack:\n    stack = []\n    for c in brackets:\n      \
    \  if c == '(':\n            stack.append(c)\n        elif c == ')':\n       \
    \     if not stack:\n                return False\n            stack.pop()\n \
    \   return not stack\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '(':\n            count +=\
    \ 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets.\n    # You can use a list\
    \ as a stack.\n    # stack = []\n    # stack.append('(')\n    # stack.pop()\n\
    \    # stack.append(')')\n    # stack.pop()\n    # stack.append('(')\n    # stack.append('(')\n\
    \    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n\
    \    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n\
    \    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n\
    \    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n\
    \    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n\
    \    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n\
    \    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n\
    \    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n\
    \    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n\
    \    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n\
    \    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n\
    \    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n\
    \    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n\
    \    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n\
    \    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n\
    \    # stack.pop\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplenqpl6n.py\", line\
    \ 101, in <module>\n    test_check()\n  File \"/tmp/tmplenqpl6n.py\", line 99,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmplenqpl6n.py\"\
    , line 85, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for i in brackets:\n        if i == '(':\n            count += 1\n\
    \        elif i == ')':\n            count -= 1\n        if count < 0:\n     \
    \       return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    count = 0\n    for i in brackets:\n        if i\
    \ == '(':\n            count += 1\n        elif i == ')':\n            count -=\
    \ 1\n        if count < 0:\n            return False\n    return count == 0\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen so far.\n  \
    \  # If you see an opening bracket, add it to the stack.\n    # If you see a closing\
    \ bracket, remove the last opening bracket from the stack.\n    # If the stack\
    \ is empty, or you see a closing bracket before an opening bracket,\n    # then\
    \ the bracketing is incorrect.\n    # You can use the list methods append and\
    \ pop.\n    # You can also use the list function list to create an empty list.\n\
    \    stack = list()\n    for bracket in brackets:\n        if bracket == '(':\n\
    \            stack.append(bracket)\n        elif bracket == ')':\n           \
    \ if len(stack) == 0:\n                return False\n            else:\n     \
    \           stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for i in brackets:\n        if i == '(':\n            count += 1\n\
    \        elif i == ')':\n            count -= 1\n        if count < 0:\n     \
    \       return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete the body of this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhrqt17i.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfhrqt17i.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpfhrqt17i.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen so far.\n  \
    \  # If you see an opening bracket, append it to the stack.\n    # If you see\
    \ a closing bracket, pop the stack.\n    # If the stack is empty, or you see a\
    \ closing bracket before an opening bracket,\n    #    then the bracketing is\
    \ incorrect.\n    # If you run out of brackets to process and the stack is empty,\
    \ then the bracketing is correct.\n    # If you run out of brackets to process\
    \ and the stack is not empty, then the bracketing is incorrect.\n    stack = []\n\
    \    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n\
    \        elif bracket == ')':\n            if len(stack) == 0:\n             \
    \   return False\n            else:\n                stack.pop()\n    if len(stack)\
    \ == 0:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen so far.\n  \
    \  # If you see an opening bracket, add it to the stack.\n    # If you see a closing\
    \ bracket, remove the last opening bracket from the stack.\n    # If you see a\
    \ closing bracket but there are no opening brackets on the stack,\n    # then\
    \ you have an extra closing bracket.\n    # If you finish and there are still\
    \ opening brackets on the stack,\n    # then you have an extra opening bracket.\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n  \
    \          stack.append(bracket)\n        elif bracket == ')':\n            if\
    \ len(stack) == 0:\n                return False\n            else:\n        \
    \        stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # if\
    \ brackets is empty, return True\n    if brackets == '':\n        return True\n\
    \    # if brackets is not empty, return False\n    else:\n        # if brackets\
    \ is not empty, return False\n        if brackets[0] == ')':\n            return\
    \ False\n        # if brackets is not empty, return False\n        elif brackets[-1]\
    \ == '(':\n            return False\n        # if brackets is not empty, return\
    \ True\n        else:\n            return True\n\n\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjaqu6xp3.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpjaqu6xp3.py\", line 45,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjaqu6xp3.py\"\
    , line 35, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == '':\n        return True\n    elif brackets[0] == ')' or brackets[-1] ==\
    \ '(':\n        return False\n    else:\n        return correct_bracketing(brackets[1:-1])\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7emjti6m.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp7emjti6m.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp7emjti6m.py\"\
    , line 24, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747806
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ You can use a stack to keep track of the brackets.\n    # If you push an opening\
    \ bracket, you must pop it off when you see a closing bracket.\n    # If you see\
    \ a closing bracket and the stack is empty, then you have an extra closing bracket.\n\
    \    # If you finish and the stack is not empty, then you have an extra opening\
    \ bracket.\n    stack = []\n    for bracket in brackets:\n        if bracket ==\
    \ '(':\n            stack.append(bracket)\n        elif bracket == ')':\n    \
    \        if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    open_brackets\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            open_brackets\
    \ += 1\n        elif bracket == ')':\n            open_brackets -= 1\n       \
    \ if open_brackets < 0:\n            return False\n    return open_brackets ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747806
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use the function len_brackets to help you.\n    # You can also use the\
    \ function len_brackets in your solution.\n    # You can also use the function\
    \ len_brackets in your solution.\n    # You can also use the function len_brackets\
    \ in your solution.\n    # You can also use the function len_brackets in your\
    \ solution.\n    # You can also use the function len_brackets in your solution.\n\
    \    # You can also use the function len_brackets in your solution.\n    # You\
    \ can also use the function len_brackets in your solution.\n    # You can also\
    \ use the function len_brackets in your solution.\n    # You can also use the\
    \ function len_brackets in your solution.\n    # You can also use the function\
    \ len_brackets in your solution.\n    # You can also use the function len_brackets\
    \ in your solution.\n    # You can also use the function len_brackets in your\
    \ solution.\n    # You can also use the function len_brackets in your solution.\n\
    \    # You can also use the function len_brackets in your solution.\n    # You\
    \ can also use the function len_brackets in your solution.\n    # You can also\
    \ use the function len_brackets in your solution.\n    # You can also use the\
    \ function len_brackets in your solution.\n    # You can also use the function\
    \ len_brackets in your solution.\n    # You can also use the function len_brackets\
    \ in your solution.\n    # You can also use the function len_brackets in your\
    \ solution.\n    # You can also use the function len_brackets in your solution.\n\
    \    # You can also use the function len_brackets in your solution.\n    # You\
    \ can also use the function len_brackets in your solution.\n    # You can also\
    \ use the function len_brackets in your solution.\n    # You can also use the\
    \ function len_brackets in your solution.\n    # You can also use the function\
    \ len_brackets in your solution.\n    # You can also use the function len_brackets\
    \ in your solution.\n    # You can also use the function len_brackets in your\
    \ solution.\n    # You can also use the function len_brackets in your solution.\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkinhdwde.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpkinhdwde.py\", line 59,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkinhdwde.py\"\
    , line 45, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # We\
    \ can use a stack to keep track of the brackets we have seen so far.\n    # We\
    \ push an opening bracket onto the stack, and pop a closing bracket.\n    # If\
    \ the brackets are correctly nested, the stack will be empty at the end.\n   \
    \ stack = []\n    for b in brackets:\n        if b == '(':\n            stack.append(b)\n\
    \        elif b == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of opening brackets.\n    #       if you see\
    \ a closing bracket, pop the stack.\n    #       if you see an opening bracket,\
    \ push it onto the stack.\n    #       if you see a closing bracket and the stack\
    \ is empty,\n    #           then you have an extra closing bracket.\n    #  \
    \     if the stack is not empty at the end,\n    #           then you have an\
    \ extra opening bracket.\n    stack = []\n    for bracket in brackets:\n     \
    \   if bracket == '(':\n            stack.append(bracket)\n        elif bracket\
    \ == ')':\n            if stack == []:\n                return False\n       \
    \     else:\n                stack.pop()\n    if stack == []:\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ Implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpalx5t55c.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpalx5t55c.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpalx5t55c.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747806
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete the body of this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhrqt17i.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfhrqt17i.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpfhrqt17i.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ keep track of the number of opening brackets you have seen so far.\n    # If\
    \ that number is ever negative, there are more closing brackets than\n    # opening\
    \ brackets, so return False.\n    # If the number of opening brackets seen is\
    \ ever greater than the number\n    # of closing brackets seen, return False.\n\
    \    # If you get to the end and the number of opening brackets is not equal\n\
    \    # to the number of closing brackets, return False.\n    # Otherwise, return\
    \ True.\n    open_brackets = 0\n    for bracket in brackets:\n        if bracket\
    \ == '(':\n            open_brackets += 1\n        elif bracket == ')':\n    \
    \        open_brackets -= 1\n        if open_brackets < 0:\n            return\
    \ False\n    if open_brackets == 0:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if len(brackets)\
    \ == 0:\n        return True\n    elif len(brackets) == 1:\n        return False\n\
    \    else:\n        if brackets[0] == ')':\n            return False\n       \
    \ elif brackets[0] == '(':\n            if brackets[1] == ')':\n             \
    \   return correct_bracketing(brackets[2:])\n            else:\n             \
    \   return correct_bracketing('(' + brackets[2:])\n\ndef check(candidate):\n \
    \   assert candidate('()') == True\n    assert candidate('(()())') == True\n \
    \   assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn9pgle2t.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpn9pgle2t.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpn9pgle2t.py\"\
    , line 29, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you may want to use a helper function.\n    # You may also want to use a stack.\n\
    \    # You may also want to use a counter.\n    stack = []\n    for bracket in\
    \ brackets:\n        if bracket == '(':\n            stack.append(bracket)\n \
    \       elif bracket == ')':\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n    if len(stack)\
    \ == 0:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete this function body\n    # Hint: you may want to use a helper function.\n\
    \    # Hint: you may want to use a stack.\n    # Hint: you may want to use a while\
    \ loop.\n    # Hint: you may want to use a for loop.\n    # Hint: you may want\
    \ to use a for loop over a range.\n    # Hint: you may want to use an if statement.\n\
    \    # Hint: you may want to use an if/else statement.\n    # Hint: you may want\
    \ to use a return statement.\n    # Hint: you may want to use a return statement\
    \ with a boolean expression.\n    # Hint: you may want to use a return statement\
    \ with a boolean expression\n    #       that uses the len function.\n    # Hint:\
    \ you may want to use a return statement with a boolean expression\n    #    \
    \   that uses the len function and the pop function.\n    # Hint: you may want\
    \ to use a return statement with a boolean expression\n    #       that uses the\
    \ len function and the pop function and the append\n    #       function.\n  \
    \  # Hint: you may want to use a return statement with a boolean expression\n\
    \    #       that uses the len function and the pop function and the append\n\
    \    #       function and the == operator.\n    # Hint: you may want to use a\
    \ return statement with a boolean expression\n    #       that uses the len function\
    \ and the pop function and the append\n    #       function and the == operator\
    \ and the not operator.\n    # Hint: you may want to use a return statement with\
    \ a boolean expression\n    #       that uses the len function and the pop function\
    \ and the append\n    #       function and the == operator and the not operator\
    \ and the and\n    #       operator.\n    # Hint: you may want to use a return\
    \ statement with a boolean expression\n    #       that uses the len function\
    \ and the pop function and the append\n    #       function and the == operator\
    \ and the not operator and the and\n    #       operator and the or operator.\n\
    \    # Hint: you may want to use a return statement with a boolean expression\n\
    \    #       that uses the len function and the pop function and the append\n\
    \    #       function and the == operator and the not operator and the and\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt3kjjl4c.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpt3kjjl4c.py\", line 64,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpt3kjjl4c.py\"\
    , line 50, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen.\n    # If you\
    \ see a \"(\" push it onto the stack.\n    # If you see a \")\" pop the stack.\n\
    \    # If you see a \")\" and the stack is empty, return False.\n    # If you\
    \ finish and the stack is empty, return True.\n    # If you finish and the stack\
    \ is not empty, return False.\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == '(':\n            stack.append(bracket)\n        elif bracket\
    \ == ')':\n            if stack == []:\n                return False\n       \
    \     else:\n                stack.pop()\n    if stack == []:\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n            if count\
    \ < 0:\n                return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747806
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you've seen\n    # so far.\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n  \
    \          stack.append(bracket)\n        elif bracket == ')':\n            if\
    \ len(stack) == 0:\n                return False\n            else:\n        \
    \        stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets.\n    # You can use a list\
    \ as a stack.\n    # To push an item onto the stack, use list.append(item).\n\
    \    # To pop an item off the stack, use list.pop().\n    # To check if the stack\
    \ is empty, use len(list) == 0.\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == '(':\n            stack.append(bracket)\n        elif bracket\
    \ == ')':\n            if len(stack) == 0:\n                return False\n   \
    \         stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you may want to use a stack\n    # You may use the list methods append and pop\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n  \
    \          stack.append(bracket)\n        elif bracket == ')':\n            if\
    \ len(stack) == 0:\n                return False\n            stack.pop()\n  \
    \  return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ replace this with your code\n    return False\n\n\ndef check(candidate):\n \
    \   assert candidate('()') == True\n    assert candidate('(()())') == True\n \
    \   assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ouya1ty.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp5ouya1ty.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5ouya1ty.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete this function body\n    # Hint: use a stack\n    stack = []\n    for\
    \ bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n\
    \        elif bracket == ')':\n            if len(stack) == 0:\n             \
    \   return False\n            else:\n                stack.pop()\n    if len(stack)\
    \ == 0:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747806
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen\n    # so far.\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n  \
    \          stack.append(bracket)\n        elif bracket == ')':\n            if\
    \ len(stack) == 0:\n                return False\n            else:\n        \
    \        stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747806
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen\n    # so far.\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n  \
    \          stack.append(bracket)\n        elif bracket == ')':\n            if\
    \ len(stack) == 0:\n                return False\n            else:\n        \
    \        stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747806
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '(':\n            count +=\
    \ 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen so far.\n  \
    \  # If you see an opening bracket, add it to the stack.\n    # If you see a closing\
    \ bracket, remove the last opening bracket from the stack.\n    # If you see a\
    \ closing bracket but there is nothing on the stack, return False.\n    # If you\
    \ finish the string and the stack is not empty, return False.\n    # Otherwise,\
    \ return True.\n    stack = []\n    for bracket in brackets:\n        if bracket\
    \ == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n \
    \           if stack == []:\n                return False\n            else:\n\
    \                stack.pop()\n    if stack == []:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the opening brackets.\n    # If you see\
    \ a closing bracket, pop the stack.\n    # If you see an opening bracket, push\
    \ it onto the stack.\n    # If you see a closing bracket and the stack is empty,\n\
    \    # then there is a mismatch.\n    # If the stack is not empty at the end,\
    \ then there is a mismatch.\n    stack = []\n    for bracket in brackets:\n  \
    \      if bracket == '(':\n            stack.append(bracket)\n        elif bracket\
    \ == ')':\n            if stack == []:\n                return False\n       \
    \     else:\n                stack.pop()\n    if stack == []:\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack\n    stack = []\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            stack.append(bracket)\n        elif bracket ==\
    \ ')':\n            if stack == []:\n                return False\n          \
    \  else:\n                stack.pop()\n    return stack == []\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == '':\n        return True\n    elif brackets[0] == ')':\n        return False\n\
    \    else:\n        return correct_bracketing(brackets[1:])\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ffmtio4.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp2ffmtio4.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2ffmtio4.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpel276y0f.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpel276y0f.py\"\
    , line 33, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpel276y0f.py\"\
    , line 23, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the opening brackets.\n    # If you encounter\
    \ a closing bracket, you can pop the top of the stack.\n    # If the stack is\
    \ empty, or if you encounter an opening bracket when the\n    # stack is empty,\
    \ you can return False.\n    # If you get to the end of the string, and the stack\
    \ is empty, you can\n    # return True.\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == '(':\n            stack.append(bracket)\n        elif bracket\
    \ == ')':\n            if stack == []:\n                return False\n       \
    \     else:\n                stack.pop()\n    if stack == []:\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # if\
    \ brackets is empty, it is correct\n    if brackets == '':\n        return True\n\
    \    # if brackets starts with a closing bracket, it is not correct\n    elif\
    \ brackets[0] == ')':\n        return False\n    # if brackets starts with an\
    \ opening bracket, we need to check the rest\n    elif brackets[0] == '(':\n \
    \       # if the rest of the brackets is empty, it is not correct\n        if\
    \ brackets[1:] == '':\n            return False\n        # if the rest of the\
    \ brackets starts with a closing bracket, it is not correct\n        elif brackets[1]\
    \ == ')':\n            return correct_bracketing(brackets[2:])\n        # if the\
    \ rest of the brackets starts with an opening bracket, we need to check the rest\n\
    \        elif brackets[1] == '(':\n            return correct_bracketing(brackets[1:])\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppyoyb9bb.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmppyoyb9bb.py\", line 48,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmppyoyb9bb.py\"\
    , line 35, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen so far.\n  \
    \  # If you push an opening bracket, you must pop a closing bracket.\n    # If\
    \ you push a closing bracket, you have a problem.\n    # If you pop a closing\
    \ bracket, you have a problem.\n    # If you pop an opening bracket, you must\
    \ push a closing bracket.\n    # If you pop an opening bracket and there are no\
    \ more brackets, you have a problem.\n    # If you push an opening bracket and\
    \ there are no more brackets, you have a problem.\n    # If you push a closing\
    \ bracket and there are no more brackets, you have a problem.\n    # If you pop\
    \ a closing bracket and there are no more brackets, you have a problem.\n    #\
    \ If you push a closing bracket and there are no more brackets, you have a problem.\n\
    \    # If you pop a closing bracket and there are no more brackets, you have a\
    \ problem.\n    # If you push a closing bracket and there are no more brackets,\
    \ you have a problem.\n    # If you pop a closing bracket and there are no more\
    \ brackets, you have a problem.\n    # If you push a closing bracket and there\
    \ are no more brackets, you have a problem.\n    # If you pop a closing bracket\
    \ and there are no more brackets, you have a problem.\n    # If you push a closing\
    \ bracket and there are no more brackets, you have a problem.\n    # If you pop\
    \ a closing bracket and there are no more brackets, you have a problem.\n    #\
    \ If you push a closing bracket and there are no more brackets, you have a problem.\n\
    \    # If you pop a closing bracket and there are no more brackets, you have a\
    \ problem.\n    # If you push a closing bracket and there are no more brackets,\
    \ you have a problem.\n    # If you pop a closing bracket and there are no more\
    \ brackets, you have a problem.\n    # If you push a closing bracket and there\
    \ are no more brackets, you have a problem.\n    # If you pop a closing bracket\
    \ and there are no more brackets, you have a problem.\n    # If you push a closing\
    \ bracket and there are no more brackets, you have a problem.\n    # If you pop\
    \ a closing bracket and there are no more brackets, you have a problem.\n    #\
    \ If you\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnkh791xs.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpnkh791xs.py\", line 55,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnkh791xs.py\"\
    , line 41, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen so far.\n  \
    \  # If you see an opening bracket, add it to the stack.\n    # If you see a closing\
    \ bracket, remove the most recent opening bracket from the stack.\n    # If the\
    \ stack is empty, or you see a closing bracket before an opening bracket,\n  \
    \  # the bracketing is incorrect.\n    # If you run out of brackets and the stack\
    \ is empty, the bracketing is correct.\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == '(':\n            stack.append(bracket)\n        elif bracket\
    \ == ')':\n            if len(stack) == 0:\n                return False\n   \
    \         else:\n                stack.pop()\n    return len(stack) == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ keep track of the number of open brackets.\n    # If it ever goes negative,\
    \ return False.\n    # If it ever goes back to 0, return True.\n    # If it ever\
    \ goes above 0, return False.\n    # If it ever goes to 0 and there are still\
    \ brackets left, return False.\n    open_brackets = 0\n    for bracket in brackets:\n\
    \        if bracket == '(':\n            open_brackets += 1\n        elif bracket\
    \ == ')':\n            open_brackets -= 1\n        if open_brackets < 0:\n   \
    \         return False\n    return open_brackets == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    bracket_count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            bracket_count\
    \ += 1\n        elif bracket == ')':\n            bracket_count -= 1\n       \
    \ if bracket_count < 0:\n            return False\n    return bracket_count ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen\n    # so far.\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n  \
    \          stack.append(bracket)\n        else:\n            if stack == []:\n\
    \                return False\n            else:\n                stack.pop()\n\
    \    return stack == []\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '(':\n            count +=\
    \ 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete this function body\n    # Hint: use a stack to keep track of the brackets\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n  \
    \          stack.append(bracket)\n        elif bracket == ')':\n            if\
    \ stack == []:\n                return False\n            else:\n            \
    \    stack.pop()\n    if stack == []:\n        return True\n    else:\n      \
    \  return False\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete this function body\n    if brackets == '':\n        return True\n \
    \   elif brackets[0] == ')':\n        return False\n    else:\n        return\
    \ correct_bracketing(brackets[1:])\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3jdo3b_0.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp3jdo3b_0.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp3jdo3b_0.py\"\
    , line 24, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '(':\n            count +=\
    \ 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for bracket in brackets:\n        if bracket == '(':\n           \
    \ stack.append(bracket)\n        elif bracket == ')':\n            if stack ==\
    \ []:\n                return False\n            else:\n                stack.pop()\n\
    \    return stack == []\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747806
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete the body of this function\n    return False\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ul1htn2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6ul1htn2.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp6ul1htn2.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete this function\n    # Hint: use a stack\n    stack = []\n    for bracket\
    \ in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n\
    \        elif bracket == ')':\n            if len(stack) == 0:\n             \
    \   return False\n            else:\n                stack.pop()\n    if len(stack)\
    \ == 0:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a variable to keep track of how many open brackets\n    # you have.\n\
    \    open_brackets = 0\n    for bracket in brackets:\n        if bracket == '(':\n\
    \            open_brackets += 1\n        elif bracket == ')':\n            open_brackets\
    \ -= 1\n        if open_brackets < 0:\n            return False\n    return open_brackets\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '(':\n            count +=\
    \ 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the opening brackets.\n    # You can use\
    \ a list as a stack.\n    # To push an item onto the stack, use stack.append(item).\n\
    \    # To pop an item off the stack, use stack.pop().\n    # You can check if\
    \ the stack is empty using if not stack.\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == '(':\n            stack.append(bracket)\n        elif bracket\
    \ == ')':\n            if not stack:\n                return False\n         \
    \   stack.pop()\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete this function body\n    # Hint: you may want to use a stack\n    stack\
    \ = []\n    for i in brackets:\n        if i == '(':\n            stack.append(i)\n\
    \        elif i == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    if len(stack) !=\
    \ 0:\n        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9twfqjk0.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9twfqjk0.py\"\
    , line 33, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9twfqjk0.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen so far.\n  \
    \  # If you see an opening bracket, add it to the stack.\n    # If you see a closing\
    \ bracket, remove the most recent opening bracket from the stack.\n    # If the\
    \ stack is empty, or you see a closing bracket before an opening bracket,\n  \
    \  #    then the bracketing is incorrect.\n    # If the stack is not empty at\
    \ the end, then the bracketing is incorrect.\n    stack = Stack()\n    for bracket\
    \ in brackets:\n        if bracket == '(':\n            stack.push(bracket)\n\
    \        elif bracket == ')':\n            if stack.is_empty():\n            \
    \    return False\n            else:\n                stack.pop()\n    return\
    \ stack.is_empty()\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6c6unebw.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp6c6unebw.py\", line 47,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp6c6unebw.py\"\
    , line 33, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp6c6unebw.py\"\
    , line 20, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined. Did you mean: 'stack'?\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # if\
    \ brackets is empty, return True\n    if brackets == '':\n        return True\n\
    \    # if brackets is not empty, check if the first bracket is \"(\"\n    elif\
    \ brackets[0] == '(':\n        # if the first bracket is \"(\", check if the last\
    \ bracket is \")\"\n        if brackets[-1] == ')':\n            # if the last\
    \ bracket is \")\", check if the rest of the brackets are correct\n          \
    \  return correct_bracketing(brackets[1:-1])\n        # if the last bracket is\
    \ not \")\", return False\n        else:\n            return False\n    # if the\
    \ first bracket is not \"(\", return False\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpajj_byyf.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpajj_byyf.py\", line 46,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpajj_byyf.py\"\
    , line 33, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to solve this problem.\n    # You may use the list methods\
    \ append and pop.\n    # You may not use any other list methods.\n    # You may\
    \ not use any other data structures.\n    # You may not use recursion.\n    stack\
    \ = []\n    for bracket in brackets:\n        if bracket == '(':\n           \
    \ stack.append(bracket)\n        elif bracket == ')':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \    if len(stack) == 0:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ use a stack\n    stack = []\n    for bracket in brackets:\n        if bracket\
    \ == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n \
    \           if len(stack) == 0:\n                return False\n            stack.pop()\n\
    \    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747806
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack\n    # initialize a stack\n    stack = []\n    # loop through\
    \ the string\n    for bracket in brackets:\n        # if the bracket is an opening\
    \ bracket, add it to the stack\n        if bracket == '(':\n            stack.append(bracket)\n\
    \        # if the bracket is a closing bracket, pop from the stack\n        elif\
    \ bracket == ')':\n            if stack == []:\n                return False\n\
    \            else:\n                stack.pop()\n    # if the stack is empty,\
    \ return True\n    if stack == []:\n        return True\n    # otherwise, return\
    \ False\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets.\n    # You can use a list\
    \ as a stack.\n    # To push an item onto the stack, use stack.append(item).\n\
    \    # To pop an item off the stack, use stack.pop().\n    # To check if the stack\
    \ is empty, use len(stack) == 0.\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == '(':\n            stack.append(bracket)\n        elif bracket\
    \ == ')':\n            if len(stack) == 0:\n                return False\n   \
    \         else:\n                stack.pop()\n    return len(stack) == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747806
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # count\
    \ the number of opening brackets\n    # count the number of closing brackets\n\
    \    # if the number of opening brackets is not equal to the number of closing\
    \ brackets, return False\n    # if the number of opening brackets is equal to\
    \ the number of closing brackets, return True\n    # if the number of opening\
    \ brackets is greater than the number of closing brackets, return False\n    #\
    \ if the number of opening brackets is less than the number of closing brackets,\
    \ return False\n    # if the number of opening brackets is equal to the number\
    \ of closing brackets, return True\n    # if the number of opening brackets is\
    \ greater than the number of closing brackets, return False\n    # if the number\
    \ of opening brackets is less than the number of closing brackets, return False\n\
    \    # if the number of opening brackets is equal to the number of closing brackets,\
    \ return True\n    # if the number of opening brackets is greater than the number\
    \ of closing brackets, return False\n    # if the number of opening brackets is\
    \ less than the number of closing brackets, return False\n    # if the number\
    \ of opening brackets is equal to the number of closing brackets, return True\n\
    \    # if the number of opening brackets is greater than the number of closing\
    \ brackets, return False\n    # if the number of opening brackets is less than\
    \ the number of closing brackets, return False\n    # if the number of opening\
    \ brackets is equal to the number of closing brackets, return True\n    # if the\
    \ number of opening brackets is greater than the number of closing brackets, return\
    \ False\n    # if the number of opening brackets is less than the number of closing\
    \ brackets, return False\n    # if the number of opening brackets is equal to\
    \ the number of closing brackets, return True\n    # if the number of opening\
    \ brackets is greater than the number of closing brackets, return False\n    #\
    \ if the number of opening brackets is less than the number of closing brackets,\
    \ return False\n    # if the number of opening brackets is equal to the number\
    \ of closing brackets, return True\n    # if the number of opening brackets is\
    \ greater than the number of closing brackets, return False\n    # if the number\
    \ of opening brackets is less than the number of closing brackets, return False\n\
    \    # if the number of opening brackets is equal to the number of closing brackets,\
    \ return True\n    # if the number of opening brackets is greater than the number\
    \ of closing brackets, return False\n    # if the number of opening brackets is\
    \ less than the\ndef check(candidate):\n    assert candidate('()') == True\n \
    \   assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp08nh6vrh.py\", line\
    \ 58, in <module>\n    test_check()\n  File \"/tmp/tmp08nh6vrh.py\", line 56,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp08nh6vrh.py\"\
    , line 42, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to solve this.\n    # You can use the list methods append\
    \ and pop.\n    # Or you can use the list method insert and remove.\n    # Or\
    \ you can use the list method append and indexing.\n    # Or you can use the list\
    \ method append and reverse.\n    # Or you can use the list method append and\
    \ sort.\n    # Or you can use the list method append and pop(0).\n    # Or you\
    \ can use the list method append and pop(-1).\n    # Or you can use the list method\
    \ append and pop(len(brackets)//2).\n    # Or you can use the list method append\
    \ and pop(len(brackets)//2 + 1).\n    # Or you can use the list method append\
    \ and pop(len(brackets)//2 - 1).\n    # Or you can use the list method append\
    \ and pop(len(brackets)//2 + 2).\n    # Or you can use the list method append\
    \ and pop(len(brackets)//2 - 2).\n    # Or you can use the list method append\
    \ and pop(len(brackets)//2 + 3).\n    # Or you can use the list method append\
    \ and pop(len(brackets)//2 - 3).\n    # Or you can use the list method append\
    \ and pop(len(brackets)//2 + 4).\n    # Or you can use the list method append\
    \ and pop(len(brackets)//2 - 4).\n    # Or you can use the list method append\
    \ and pop(len(brackets)//2 + 5).\n    # Or you can use the list method append\
    \ and pop(len(brackets)//2 - 5).\n    # Or you can use the list method append\
    \ and pop(len(brackets)//2 + 6).\n    # Or you can use the list method append\
    \ and pop(len(brackets)//2 - 6).\n    # Or you can use the list method append\
    \ and pop(len(brackets)//2 + 7).\n    # Or you can use the list method append\
    \ and pop(len(brackets)//2 - 7).\n    # Or you can use the list method append\
    \ and pop(len(brackets)//2 + 8).\n    # Or you can use the list method append\
    \ and pop\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnpuzjfht.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpnpuzjfht.py\", line 54,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnpuzjfht.py\"\
    , line 40, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == '':\n        return True\n    elif brackets[0] == ')':\n        return False\n\
    \    else:\n        return correct_bracketing(brackets[1:])\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpflvg1jq2.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpflvg1jq2.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpflvg1jq2.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you may want to use a stack.\n    # You may use the list methods append and\
    \ pop.\n    # Or you can write your own stack class.\n    # You may not use any\
    \ other imports.\n    # You may not use any other functions.\n    # You may not\
    \ use any other variables.\n    # You may not use any other operators.\n    #\
    \ You may not use any other control structures.\n    # You may not use any other\
    \ data structures.\n    # You may not use any other types.\n    # You may not\
    \ use any other modules.\n    # You may not use any other builtins.\n    # You\
    \ may not use any other objects.\n    # You may not use any other methods.\n \
    \   # You may not use any other attributes.\n    # You may not use any other properties.\n\
    \    # You may not use any other exceptions.\n    # You may not use any other\
    \ exceptions.\n    # You may not use any other exceptions.\n    # You may not\
    \ use any other exceptions.\n    # You may not use any other exceptions.\n   \
    \ # You may not use any other exceptions.\n    # You may not use any other exceptions.\n\
    \    # You may not use any other exceptions.\n    # You may not use any other\
    \ exceptions.\n    # You may not use any other exceptions.\n    # You may not\
    \ use any other exceptions.\n    # You may not use any other exceptions.\n   \
    \ # You may not use any other exceptions.\n    # You may not use any other exceptions.\n\
    \    # You may not use any other exceptions.\n    # You may not use any other\
    \ exceptions.\n    # You may not use any other exceptions.\n    # You may not\
    \ use any other exceptions.\n    # You may not use any other exceptions.\n   \
    \ # You may not use any other exceptions.\n    # You may not use any other exceptions.\n\
    \    # You may not use any other exceptions.\n    # You may not use any other\
    \ exceptions.\n    # You may not use any other exceptions.\n    # You may not\
    \ use any other exceptions.\n    # You may not use any other exceptions.\n   \
    \ # You may not use any other exceptions.\n    # You may not use any other exceptions.\n\
    \    # You may not use any other exceptions.\n    # You may not use any\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfsi7r836.py\", line\
    \ 77, in <module>\n    test_check()\n  File \"/tmp/tmpfsi7r836.py\", line 75,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpfsi7r836.py\"\
    , line 61, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_list\
    \ = list(brackets)\n    if brackets_list[0] == ')':\n        return False\n  \
    \  if brackets_list[-1] == '(':\n        return False\n    if brackets_list.count('(')\
    \ != brackets_list.count(')'):\n        return False\n    else:\n        return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfzqdaw93.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpfzqdaw93.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpfzqdaw93.py\"\
    , line 36, in check\n    assert candidate('()()(()())())(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen\n    # so far.\n\
    \    stack = Stack()\n    for bracket in brackets:\n        if bracket == '(':\n\
    \            stack.push(bracket)\n        elif bracket == ')':\n            if\
    \ stack.is_empty():\n                return False\n            stack.pop()\n \
    \   return stack.is_empty()\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9vlpz3ul.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp9vlpz3ul.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp9vlpz3ul.py\"\
    , line 28, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp9vlpz3ul.py\"\
    , line 16, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined. Did you mean: 'stack'?\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete this function body\n    # Hint: use a stack\n    stack = []\n    for\
    \ bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n\
    \        elif bracket == ')':\n            if len(stack) == 0:\n             \
    \   return False\n            else:\n                stack.pop()\n    if len(stack)\
    \ == 0:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747806
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpel276y0f.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpel276y0f.py\"\
    , line 33, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpel276y0f.py\"\
    , line 23, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you may want to use a helper function.\n    # If you do, put it here.\n    return\
    \ bracket_helper(brackets, 0)\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdtev3buu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdtev3buu.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpdtev3buu.py\"\
    , line 19, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpdtev3buu.py\"\
    , line 16, in correct_bracketing\n    return bracket_helper(brackets, 0)\nNameError:\
    \ name 'bracket_helper' is not defined\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen so far.\n  \
    \  # If you push an opening bracket, you must pop a closing bracket.\n    # If\
    \ you push a closing bracket, you have a problem.\n    # If you pop a closing\
    \ bracket, you have a problem.\n    # If you pop an opening bracket, you must\
    \ push a closing bracket.\n    # If you pop an opening bracket and there are no\
    \ more brackets to pop, you have a problem.\n    # If you run out of brackets\
    \ to pop, you have a problem.\n    # If you run out of brackets to push, you have\
    \ a problem.\n    # If you run out of brackets to push and there are no more brackets\
    \ to pop, you're done.\n    # If you run out of brackets to push and there are\
    \ still brackets to pop, you have a problem.\n    stack = []\n    for bracket\
    \ in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n\
    \        elif bracket == ')':\n            if len(stack) == 0:\n             \
    \   return False\n            else:\n                stack.pop()\n    if len(stack)\
    \ == 0:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the opening brackets.\n    # If you push\
    \ an opening bracket onto the stack, and then you see a\n    # closing bracket,\
    \ you can pop the top of the stack. If the stack is\n    # empty, or if you try\
    \ to pop from an empty stack, then you know that\n    # the bracketing is incorrect.\n\
    \    stack = Stack()\n    for bracket in brackets:\n        if bracket == '(':\n\
    \            stack.push(bracket)\n        elif bracket == ')':\n            if\
    \ stack.is_empty():\n                return False\n            stack.pop()\n \
    \   return stack.is_empty()\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoh4wlmly.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpoh4wlmly.py\", line 45,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpoh4wlmly.py\"\
    , line 31, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpoh4wlmly.py\"\
    , line 19, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined. Did you mean: 'stack'?\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets.\n    # You can use a list\
    \ as a stack.\n    # stack = []\n    # stack.append(brackets[0])\n    # stack.pop()\n\
    \    # stack.append(brackets[1])\n    # stack.pop()\n    # stack.append(brackets[2])\n\
    \    # stack.pop()\n    # stack.append(brackets[3])\n    # stack.pop()\n    #\
    \ stack.append(brackets[4])\n    # stack.pop()\n    # stack.append(brackets[5])\n\
    \    # stack.pop()\n    # stack.append(brackets[6])\n    # stack.pop()\n    #\
    \ stack.append(brackets[7])\n    # stack.pop()\n    # stack.append(brackets[8])\n\
    \    # stack.pop()\n    # stack.append(brackets[9])\n    # stack.pop()\n    #\
    \ stack.append(brackets[10])\n    # stack.pop()\n    # stack.append(brackets[11])\n\
    \    # stack.pop()\n    # stack.append(brackets[12])\n    # stack.pop()\n    #\
    \ stack.append(brackets[13])\n    # stack.pop()\n    # stack.append(brackets[14])\n\
    \    # stack.pop()\n    # stack.append(brackets[15])\n    # stack.pop()\n    #\
    \ stack.append(brackets[16])\n    # stack.pop()\n    # stack.append(brackets[17])\n\
    \    # stack.pop()\n    # stack.append(brackets[18])\n    # stack.pop()\n    #\
    \ stack.append(brackets[19])\n    # stack.pop()\n    # stack.append(brackets[20])\n\
    \    # stack.pop()\n    # stack.append(brackets[21])\n    # stack.pop()\n    #\
    \ stack.append(brackets[22])\n    # stack.pop()\n    # stack.append(brackets[23])\n\
    \    # stack.pop()\n    # stack.append(brackets[24])\n    # stack.pop()\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzbk8f34p.py\", line\
    \ 85, in <module>\n    test_check()\n  File \"/tmp/tmpzbk8f34p.py\", line 83,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpzbk8f34p.py\"\
    , line 69, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen\n    # so far.\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n  \
    \          stack.append(bracket)\n        elif bracket == ')':\n            if\
    \ len(stack) == 0:\n                return False\n            else:\n        \
    \        stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747806
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '(':\n            count +=\
    \ 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete this function body\n    # Hint: use a stack\n    stack = []\n    for\
    \ bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n\
    \        elif bracket == ')':\n            if stack == []:\n                return\
    \ False\n            else:\n                stack.pop()\n    if stack == []:\n\
    \        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # if\
    \ the length of the string is odd, it is not correct bracketing\n    if len(brackets)\
    \ % 2 != 0:\n        return False\n    # if the length of the string is even,\
    \ check if the number of opening brackets is equal to the number of closing brackets\n\
    \    else:\n        return brackets.count('(') == brackets.count(')')\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxtqa8895.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpxtqa8895.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpxtqa8895.py\"\
    , line 28, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '(':\n            count +=\
    \ 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen\n    # so far.\n\
    \    stack = []\n    for b in brackets:\n        if b == '(':\n            stack.append(b)\n\
    \        elif b == ')':\n            if stack == []:\n                return False\n\
    \            else:\n                stack.pop()\n    return stack == []\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    # Hint: you can use a stack to keep track of the\
    \ brackets\n    stack = []\n    for bracket in brackets:\n        if bracket ==\
    \ '(':\n            stack.append(bracket)\n        elif bracket == ')':\n    \
    \        if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    if len(stack) == 0:\n        return True\n \
    \   else:\n        return False\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '(':\n            count +=\
    \ 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete the body of this function\n    # Hint: you may want to use a stack\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n  \
    \          stack.append(bracket)\n        elif bracket == ')':\n            if\
    \ len(stack) == 0:\n                return False\n            else:\n        \
    \        stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ use a stack\n    stack = []\n    for bracket in brackets:\n        if bracket\
    \ == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n \
    \           if len(stack) == 0:\n                return False\n            stack.pop()\n\
    \    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747806
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets.\n    # You can use a list\
    \ as a stack.\n    # To push an item onto the stack, use stack.append(item).\n\
    \    # To pop an item off the stack, use stack.pop().\n    # If the stack is empty,\
    \ stack.pop() will raise an IndexError.\n    # You can check whether the stack\
    \ is empty using if stack: ... else: ...\n    # You can check whether the stack\
    \ is empty using if not stack: ... else: ...\n    # You can check whether the\
    \ stack is empty using if len(stack) == 0: ... else: ...\n    # You can check\
    \ whether the stack is empty using if len(stack) > 0: ... else: ...\n    # You\
    \ can check whether the stack is empty using if len(stack) != 0: ... else: ...\n\
    \    # You can check whether the stack is empty using if len(stack) == 1: ...\
    \ else: ...\n    # You can check whether the stack is empty using if len(stack)\
    \ > 1: ... else: ...\n    # You can check whether the stack is empty using if\
    \ len(stack) != 1: ... else: ...\n    # You can check whether the stack is empty\
    \ using if len(stack) == 2: ... else: ...\n    # You can check whether the stack\
    \ is empty using if len(stack) > 2: ... else: ...\n    # You can check whether\
    \ the stack is empty using if len(stack) != 2: ... else: ...\n    # You can check\
    \ whether the stack is empty using if len(stack) == 3: ... else: ...\n    # You\
    \ can check whether the stack is empty using if len(stack) > 3: ... else: ...\n\
    \    # You can check whether the stack is empty using if len(stack) != 3: ...\
    \ else: ...\n    # You can check whether the stack is empty using if len(stack)\
    \ == 4: ... else: ...\n    # You can check whether the stack is empty using if\
    \ len(stack) > 4: ... else: ...\n    # You can check whether the stack is empty\
    \ using if len(stack) != 4: ... else: ...\n    # You can check whether the stack\
    \ is empty using if len(stack) == 5: ... else: ...\n    # You can check\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjmgepeno.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpjmgepeno.py\", line 53,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjmgepeno.py\"\
    , line 39, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9twfqjk0.py\"\
    , line 35, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9twfqjk0.py\"\
    , line 33, in test_check\n    check(correct_bracketing)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9twfqjk0.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen\n    # so far.\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n  \
    \          stack.append(bracket)\n        elif bracket == ')':\n            if\
    \ len(stack) == 0:\n                return False\n            stack.pop()\n  \
    \  return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747805
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '(':\n            count +=\
    \ 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the opening brackets.\n    # If you push\
    \ an opening bracket onto the stack, and then see a closing\n    # bracket, you\
    \ can pop from the stack.\n    # If you see a closing bracket and the stack is\
    \ empty, then you have\n    # an extra closing bracket.\n    # If you finish processing\
    \ and the stack is not empty, then you have\n    # an extra opening bracket.\n\
    \    stack = Stack()\n    for bracket in brackets:\n        if bracket == '(':\n\
    \            stack.push(bracket)\n        elif bracket == ')':\n            if\
    \ stack.is_empty():\n                return False\n            else:\n       \
    \         stack.pop()\n    return stack.is_empty()\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbac6um43.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpbac6um43.py\", line 48,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbac6um43.py\"\
    , line 34, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpbac6um43.py\"\
    , line 21, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined. Did you mean: 'stack'?\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ You can use a stack to keep track of the brackets you have seen so\n    # far.\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n  \
    \          stack.append(bracket)\n        elif bracket == ')':\n            if\
    \ stack == []:\n                return False\n            else:\n            \
    \    stack.pop()\n    if stack == []:\n        return True\n    else:\n      \
    \  return False\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen so far.\n  \
    \  # The stack will only get bigger as you go along, and smaller as you backtrack.\n\
    \    # At the end, the stack should be empty.\n    stack = []\n    for bracket\
    \ in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n\
    \        elif bracket == ')':\n            if len(stack) == 0:\n             \
    \   return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    if brackets == '':\n        return True\n    elif\
    \ brackets[0] == ')':\n        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf7cncbvb.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpf7cncbvb.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpf7cncbvb.py\"\
    , line 24, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == \"\":\n        return True\n    elif brackets[0] == \")\":\n        return\
    \ False\n    else:\n        return correct_bracketing(brackets[1:].replace(\"\
    ()\", \"\"))\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuikbcanb.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpuikbcanb.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpuikbcanb.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # if\
    \ brackets is empty, return True\n    if brackets == '':\n        return True\n\
    \    # if brackets is not empty, check if the first bracket is \"(\"\n    elif\
    \ brackets[0] == '(':\n        # if the first bracket is \"(\", check if the last\
    \ bracket is \")\"\n        if brackets[-1] == ')':\n            # if the last\
    \ bracket is \")\", check if the rest of the brackets are\n            # correct\n\
    \            return correct_bracketing(brackets[1:-1])\n        # if the last\
    \ bracket is not \")\", return False\n        else:\n            return False\n\
    \    # if the first bracket is not \"(\", return False\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpupp70dzj.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpupp70dzj.py\", line 47,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpupp70dzj.py\"\
    , line 34, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen so far.\n  \
    \  # You can use a list as a stack.\n    # To push an item onto the stack, use\
    \ stack.append(item).\n    # To pop an item off the stack, use stack.pop().\n\
    \    # To check if the stack is empty, use len(stack) == 0.\n    stack = []\n\
    \    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n\
    \        elif bracket == ')':\n            if len(stack) == 0:\n             \
    \   return False\n            stack.pop()\n    return len(stack) == 0\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '(':\n            count +=\
    \ 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you have seen so far.\n  \
    \  # If you see a closing bracket, you can pop the stack to see if it matches.\n\
    \    # If you see an opening bracket, you can push it onto the stack.\n    # If\
    \ you see a closing bracket and the stack is empty, or if you run out of\n   \
    \ # characters and the stack is not empty, the bracketing is incorrect.\n    stack\
    \ = []\n    for bracket in brackets:\n        if bracket == '(':\n           \
    \ stack.append(bracket)\n        elif bracket == ')':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqhesdw9p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqhesdw9p.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpqhesdw9p.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747806
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Hint:\
    \ you can use a stack to keep track of the brackets you've seen so far.\n    #\
    \ You can use a list as a stack.\n    # stack = []\n    # for bracket in brackets:\n\
    \    #     if bracket == '(':\n    #         stack.append(bracket)\n    #    \
    \ else:\n    #         if stack == []:\n    #             return False\n    #\
    \         stack.pop()\n    # return stack == []\n    stack = []\n    for bracket\
    \ in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n\
    \        else:\n            if stack == []:\n                return False\n  \
    \          stack.pop()\n    return stack == []\n\n\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete this function body\n    # Hint: you may want to create a helper function\n\
    \    # Hint: you may want to use a stack\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == '(':\n            stack.append(bracket)\n        elif bracket\
    \ == ')':\n            if len(stack) == 0:\n                return False\n   \
    \         else:\n                stack.pop()\n    if len(stack) == 0:\n      \
    \  return True\n    else:\n        return False\n\n\ndef check(candidate):\n \
    \   assert candidate('()') == True\n    assert candidate('(()())') == True\n \
    \   assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ implement this function\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5ubt1kt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq5ubt1kt.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq5ubt1kt.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete this function body\n    # Hint: you may want to use a helper function\n\
    \    # Hint: you may want to use a stack\n    # Hint: you may want to use a while\
    \ loop\n    # Hint: you may want to use a for loop\n    # Hint: you may want to\
    \ use an if statement\n    # Hint: you may want to use a try/except statement\n\
    \    # Hint: you may want to use an if/else statement\n    # Hint: you may want\
    \ to use a return statement\n    # Hint: you may want to use a break statement\n\
    \    # Hint: you may want to use a continue statement\n    # Hint: you may want\
    \ to use a raise statement\n    # Hint: you may want to use a pass statement\n\
    \    # Hint: you may want to use a len function\n    # Hint: you may want to use\
    \ a pop function\n    # Hint: you may want to use an append function\n    # Hint:\
    \ you may want to use an extend function\n    # Hint: you may want to use an insert\
    \ function\n    # Hint: you may want to use a remove function\n    # Hint: you\
    \ may want to use an index function\n    # Hint: you may want to use a count function\n\
    \    # Hint: you may want to use a reverse function\n    # Hint: you may want\
    \ to use a sort function\n    # Hint: you may want to use a clear function\n \
    \   # Hint: you may want to use a copy function\n    # Hint: you may want to use\
    \ a deepcopy function\n    # Hint: you may want to use a popitem function\n  \
    \  # Hint: you may want to use a setdefault function\n    # Hint: you may want\
    \ to use an update function\n    # Hint: you may want to use a get function\n\
    \    # Hint: you may want to use a keys function\n    # Hint: you may want to\
    \ use a values function\n    # Hint: you may want to use an items function\n \
    \   # Hint: you may want to use a fromkeys function\n    # Hint: you may want\
    \ to use a pop function\n    # Hint: you may want to use a pop function\n    #\
    \ Hint\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1gqdjae7.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmp1gqdjae7.py\", line 66,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp1gqdjae7.py\"\
    , line 52, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # TODO:\
    \ complete this function body\n    # Hint: you may want to use a helper function\n\
    \    if brackets == '':\n        return True\n    elif brackets[0] == ')' or brackets[-1]\
    \ == '(':\n        return False\n    else:\n        return correct_bracketing(brackets[1:-1])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmkaviool.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpmkaviool.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpmkaviool.py\"\
    , line 25, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659747839
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == '':\n        return True\n    elif brackets[0] == ')':\n        return False\n\
    \    else:\n        return correct_bracketing(brackets[1:])\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpflvg1jq2.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpflvg1jq2.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpflvg1jq2.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
