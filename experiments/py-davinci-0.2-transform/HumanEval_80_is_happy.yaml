name: HumanEval_80_is_happy
language: py
prompt: "def is_happy(s: str) -> bool:\n    \"\"\"You are given a string s.\n    Your\
  \ task is to check if the string is happy or not.\n    A string is happy if its\
  \ length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n\
  \    >>> is_happy(a)\n    False\n    >>> is_happy(aa)\n    False\n    >>> is_happy(abcd)\n\
  \    True\n    >>> is_happy(aabb)\n    False\n    >>> is_happy(adb)\n    True\n\
  \    >>> is_happy(xyy)\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('a') == False\n    assert candidate('aa')\
  \ == False\n    assert candidate('abcd') == True\n    assert candidate('aabb') ==\
  \ False\n    assert candidate('adb') == True\n    assert candidate('xyy') == False\n\
  \    assert candidate('iopaxpoi') == True\n    assert candidate('iopaxioi') == False\n\
  \ndef test_check():\n    check(is_happy)\n\ntest_check()\n"
completions: ["    if len(s) < 3:\n        return False\n    for i in range(len(s)\
    \ - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i +\
    \ 2]:\n            return False\n    return True\n\n", "    if len(s) < 3:\n \
    \       return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i\
    \ + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n\
    \    return True\n\n", "    if len(s) < 3:\n        return False\n    for i in\
    \ range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i +\
    \ 1] == s[i + 2]:\n            return False\n    return True\n\n", "    if len(s)\
    \ < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i]\
    \ == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return\
    \ False\n    return True\n\n", "    if len(s) < 3:\n        return False\n   \
    \ for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2]\
    \ or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n", " \
    \   if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n  \
    \      if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n    \
    \        return False\n    return True\n\n", "    if len(s) < 3:\n        return\
    \ False\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i + 1] or s[i]\
    \ == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\
    \n", "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n\
    \        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n  \
    \          return False\n    return True\n\n", "    if len(s) < 3:\n        return\
    \ False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i]\
    \ == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\
    \n", "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n\
    \        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return\
    \ True\n\n", "    if len(s) < 3:\n        return False\n    for i in range(len(s)\
    \ - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i +\
    \ 2]:\n            return False\n    return True\n\n", "    if len(s) < 3:\n \
    \       return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i\
    \ + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n\
    \    return True\n\n", "    if len(s) < 3:\n        return False\n    for i in\
    \ range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i +\
    \ 1] == s[i + 2]:\n            return False\n    return True\n\n", "    if len(s)\
    \ < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i]\
    \ == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return\
    \ False\n    return True\n\n", "    if len(s) < 3:\n        return False\n   \
    \ for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2]\
    \ or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n", " \
    \   if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n  \
    \      if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n    \
    \        return False\n    return True\n\n", "    if len(s) < 3:\n        return\
    \ False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i]\
    \ == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\
    \n", "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n\
    \        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n  \
    \          return False\n    return True\n\n", "    if len(s) < 3:\n        return\
    \ False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i]\
    \ == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\
    \n", "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n\
    \        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n  \
    \          return False\n    return True\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
