language: py
name: HumanEval_77_iscube
results:
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    for i in range(1, a+1):\n        if i**3 ==\
    \ a:\n            return True\n    return False\n\ndef check(candidate):\n   \
    \ assert candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and int(a ** (1 / 3))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnz4672rf.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpnz4672rf.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpnz4672rf.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and round(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpemktxty4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpemktxty4.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpemktxty4.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and a == round(a ** (1\
    \ / 3)) ** 3\n\n\ndef check(candidate):\n    assert candidate(1) == True\n   \
    \ assert candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptg772f24.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmptg772f24.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmptg772f24.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    i = 1\n    while i * i * i <= a:\n        if\
    \ i * i * i == a:\n            return True\n        i += 1\n    return False\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a ** (1/3) % 1 == 0)\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplpid1qzd.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmplpid1qzd.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmplpid1qzd.py\", line 25, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpemktxty4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpemktxty4.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpemktxty4.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and a ** (1 / 3) % 1 ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpor5w_j85.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpor5w_j85.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpor5w_j85.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    if a == 1:\n        return True\n    i = 1\n\
    \    while i * i * i <= a:\n        if i * i * i == a:\n            return True\n\
    \        i += 1\n    return False\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a > 0 and a ** (1 /\
    \ 3) % 1 == 0\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9re_j040.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9re_j040.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9re_j040.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a\
    \ == 0:\n        return True\n    for i in range(1, a + 1):\n        if i ** 3\
    \ == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    if a == 0:\n        return True\n  \
    \  if a < 0:\n        a = -a\n    if a == 1:\n        return True\n    for i in\
    \ range(2, a):\n        if i ** 3 == a:\n            return True\n    return False\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or a == -1 or\
    \ (a > 0 and a == round(a ** (1 / 3))) or (a < 0 and a == round(a ** (1 / 3)))\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8mauvcc7.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8mauvcc7.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp8mauvcc7.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or int(abs(a) ** (1 /\
    \ 3)) ** 3 == abs(a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcmwzld95.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpcmwzld95.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpcmwzld95.py\", line 27, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpemktxty4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpemktxty4.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpemktxty4.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpemktxty4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpemktxty4.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpemktxty4.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or a == 1 or (a < 0 and\
    \ a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6h7a9rh_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp6h7a9rh_.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp6h7a9rh_.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a >= 0 and a ** (1 / 3) % 1 ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpor5w_j85.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpor5w_j85.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpor5w_j85.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
    \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>>\
    \ iscube(180)\n    False\n    \"\"\"\n    return a == 0 or (a > 0 and int(a **\
    \ (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpemktxty4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpemktxty4.py\", line 34,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpemktxty4.py\", line 26, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  stdout: ''
