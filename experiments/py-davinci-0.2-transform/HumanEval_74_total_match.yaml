name: HumanEval_74_total_match
language: py
prompt: "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str])\
  \ -> List[str]:\n    \"\"\"\n    Write a function that accepts two lists of strings\
  \ and returns the list that has \n    total number of chars in the all strings of\
  \ the list less than the other list.\n\n    if the two lists have the same number\
  \ of chars, return the first list.\n\n    Examples\n    >>> total_match([], [])\n\
  \    []\n    >>> total_match(['hi', 'admin'], ['hI', 'Hi'])\n    ['hI', 'Hi']\n\
  \    >>> total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ['hi',\
  \ 'admin']\n    >>> total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\n    ['hI',\
  \ 'hi', 'hi']\n    >>> total_match(['4'], ['1', '2', '3', '4', '5'])\n    ['4']\n\
  \    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([], []) == []\n    assert candidate(['hi',\
  \ 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'],\
  \ ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'],\
  \ ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI',\
  \ 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi'])\
  \ == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii'])\
  \ == ['hi', 'admin']\n    assert candidate([], ['this']) == []\n    assert candidate(['this'],\
  \ []) == []\n\ndef test_check():\n    check(total_match)\n\ntest_check()\n"
completions: ["    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    elif\
    \ len(lst1) == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return\
    \ lst1\n    else:\n        total_lst1 = 0\n        total_lst2 = 0\n        for\
    \ i in lst1:\n            total_lst1 += len(i)\n        for i in lst2:\n     \
    \       total_lst2 += len(i)\n        if total_lst1 < total_lst2:\n          \
    \  return lst1\n        elif total_lst1 > total_lst2:\n            return lst2\n\
    \        else:\n            return lst1\n", "    if len(lst1) == 0 and len(lst2)\
    \ == 0:\n        return []\n    elif len(lst1) == 0:\n        return lst2\n  \
    \  elif len(lst2) == 0:\n        return lst1\n    else:\n        lst1_total =\
    \ 0\n        lst2_total = 0\n        for i in lst1:\n            lst1_total +=\
    \ len(i)\n        for i in lst2:\n            lst2_total += len(i)\n        if\
    \ lst1_total < lst2_total:\n            return lst1\n        elif lst1_total >\
    \ lst2_total:\n            return lst2\n        else:\n            return lst1\n",
  "    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    elif len(lst1)\
    \ == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return lst1\n\
    \    else:\n        total_1 = 0\n        total_2 = 0\n        for i in lst1:\n\
    \            total_1 += len(i)\n        for i in lst2:\n            total_2 +=\
    \ len(i)\n        if total_1 > total_2:\n            return lst2\n        elif\
    \ total_1 < total_2:\n            return lst1\n        else:\n            return\
    \ lst1\n", "    total_lst1 = 0\n    total_lst2 = 0\n    for i in lst1:\n     \
    \   total_lst1 += len(i)\n    for i in lst2:\n        total_lst2 += len(i)\n \
    \   if total_lst1 == total_lst2:\n        return lst1\n    elif total_lst1 < total_lst2:\n\
    \        return lst1\n    else:\n        return lst2\n", "    if len(lst1) ==\
    \ 0 and len(lst2) == 0:\n        return []\n    elif len(lst1) == 0:\n       \
    \ return lst2\n    elif len(lst2) == 0:\n        return lst1\n    else:\n    \
    \    lst1_total = 0\n        lst2_total = 0\n        for i in lst1:\n        \
    \    lst1_total += len(i)\n        for i in lst2:\n            lst2_total += len(i)\n\
    \        if lst1_total < lst2_total:\n            return lst1\n        elif lst1_total\
    \ > lst2_total:\n            return lst2\n        else:\n            return lst1\n",
  "    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    elif len(lst1)\
    \ == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return lst1\n\
    \    else:\n        sum1 = 0\n        sum2 = 0\n        for i in lst1:\n     \
    \       sum1 += len(i)\n        for i in lst2:\n            sum2 += len(i)\n \
    \       if sum1 < sum2:\n            return lst1\n        elif sum1 > sum2:\n\
    \            return lst2\n        else:\n            return lst1\n", "    if len(lst1)\
    \ == 0 and len(lst2) == 0:\n        return []\n    elif len(lst1) == 0:\n    \
    \    return lst2\n    elif len(lst2) == 0:\n        return lst1\n    else:\n \
    \       total_lst1 = 0\n        total_lst2 = 0\n        for i in lst1:\n     \
    \       total_lst1 += len(i)\n        for j in lst2:\n            total_lst2 +=\
    \ len(j)\n        if total_lst1 < total_lst2:\n            return lst1\n     \
    \   elif total_lst1 > total_lst2:\n            return lst2\n        else:\n  \
    \          return lst1\n", "    if len(lst1) == 0 and len(lst2) == 0:\n      \
    \  return []\n    elif len(lst1) == 0:\n        return lst2\n    elif len(lst2)\
    \ == 0:\n        return lst1\n    else:\n        total_chars_lst1 = 0\n      \
    \  total_chars_lst2 = 0\n        for i in lst1:\n            total_chars_lst1\
    \ += len(i)\n        for i in lst2:\n            total_chars_lst2 += len(i)\n\
    \        if total_chars_lst1 < total_chars_lst2:\n            return lst1\n  \
    \      elif total_chars_lst1 > total_chars_lst2:\n            return lst2\n  \
    \      else:\n            return lst1\n", "    if len(lst1) == 0 and len(lst2)\
    \ == 0:\n        return []\n    elif len(lst1) == 0:\n        return lst2\n  \
    \  elif len(lst2) == 0:\n        return lst1\n    else:\n        total_chars_lst1\
    \ = 0\n        total_chars_lst2 = 0\n        for i in lst1:\n            total_chars_lst1\
    \ += len(i)\n        for i in lst2:\n            total_chars_lst2 += len(i)\n\
    \        if total_chars_lst1 < total_chars_lst2:\n            return lst1\n  \
    \      elif total_chars_lst1 > total_chars_lst2:\n            return lst2\n  \
    \      else:\n            return lst1\n", "    if len(lst1) == 0 and len(lst2)\
    \ == 0:\n        return []\n    elif len(lst1) == 0:\n        return lst2\n  \
    \  elif len(lst2) == 0:\n        return lst1\n    else:\n        lst1_total =\
    \ 0\n        lst2_total = 0\n        for i in lst1:\n            lst1_total +=\
    \ len(i)\n        for i in lst2:\n            lst2_total += len(i)\n        if\
    \ lst1_total < lst2_total:\n            return lst1\n        elif lst1_total >\
    \ lst2_total:\n            return lst2\n        else:\n            return lst1\n",
  "    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    elif len(lst1)\
    \ == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return lst1\n\
    \    else:\n        lst1_total = 0\n        lst2_total = 0\n        for i in lst1:\n\
    \            lst1_total += len(i)\n        for i in lst2:\n            lst2_total\
    \ += len(i)\n        if lst1_total < lst2_total:\n            return lst1\n  \
    \      elif lst1_total > lst2_total:\n            return lst2\n        else:\n\
    \            return lst1", "    if len(lst1) == 0 and len(lst2) == 0:\n      \
    \  return []\n    elif len(lst1) == 0:\n        return lst2\n    elif len(lst2)\
    \ == 0:\n        return lst1\n    elif len(lst1) == len(lst2):\n        return\
    \ lst1\n    elif len(lst1) > len(lst2):\n        return lst2\n    else:\n    \
    \    return lst1\n", "    if len(lst1) == 0 and len(lst2) == 0:\n        return\
    \ []\n    elif len(lst1) == 0:\n        return lst2\n    elif len(lst2) == 0:\n\
    \        return lst1\n    else:\n        total_chars_lst1 = 0\n        total_chars_lst2\
    \ = 0\n        for i in lst1:\n            total_chars_lst1 += len(i)\n      \
    \  for i in lst2:\n            total_chars_lst2 += len(i)\n        if total_chars_lst1\
    \ < total_chars_lst2:\n            return lst1\n        elif total_chars_lst1\
    \ > total_chars_lst2:\n            return lst2\n        else:\n            return\
    \ lst1\n", "    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n   \
    \ elif len(lst1) == 0:\n        return lst2\n    elif len(lst2) == 0:\n      \
    \  return lst1\n    else:\n        sum1 = 0\n        sum2 = 0\n        for i in\
    \ lst1:\n            sum1 += len(i)\n        for i in lst2:\n            sum2\
    \ += len(i)\n        if sum1 < sum2:\n            return lst1\n        elif sum1\
    \ > sum2:\n            return lst2\n        else:\n            return lst1\n",
  "    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    elif len(lst1)\
    \ == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return lst1\n\
    \    else:\n        total_lst1 = 0\n        total_lst2 = 0\n        for i in lst1:\n\
    \            total_lst1 += len(i)\n        for i in lst2:\n            total_lst2\
    \ += len(i)\n        if total_lst1 < total_lst2:\n            return lst1\n  \
    \      elif total_lst1 > total_lst2:\n            return lst2\n        else:\n\
    \            return lst1", "    if len(lst1) == 0 and len(lst2) == 0:\n      \
    \  return []\n    elif len(lst1) == 0:\n        return lst2\n    elif len(lst2)\
    \ == 0:\n        return lst1\n    else:\n        total_lst1 = 0\n        total_lst2\
    \ = 0\n        for i in lst1:\n            total_lst1 += len(i)\n        for i\
    \ in lst2:\n            total_lst2 += len(i)\n        if total_lst1 < total_lst2:\n\
    \            return lst1\n        elif total_lst1 > total_lst2:\n            return\
    \ lst2\n        else:\n            return lst1\n", "    if len(lst1) == 0 and\
    \ len(lst2) == 0:\n        return []\n    elif len(lst1) == 0:\n        return\
    \ lst2\n    elif len(lst2) == 0:\n        return lst1\n    else:\n        lst1_total\
    \ = 0\n        lst2_total = 0\n        for i in lst1:\n            lst1_total\
    \ += len(i)\n        for i in lst2:\n            lst2_total += len(i)\n      \
    \  if lst1_total < lst2_total:\n            return lst1\n        elif lst1_total\
    \ > lst2_total:\n            return lst2\n        else:\n            return lst1\n",
  "    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    elif len(lst1)\
    \ == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return lst1\n\
    \    else:\n        sum1 = 0\n        sum2 = 0\n        for i in lst1:\n     \
    \       sum1 += len(i)\n        for i in lst2:\n            sum2 += len(i)\n \
    \       if sum1 < sum2:\n            return lst1\n        elif sum1 > sum2:\n\
    \            return lst2\n        else:\n            return lst1\n", "    if len(lst1)\
    \ == 0 and len(lst2) == 0:\n        return []\n    elif len(lst1) == 0:\n    \
    \    return lst2\n    elif len(lst2) == 0:\n        return lst1\n    else:\n \
    \       total_lst1 = 0\n        total_lst2 = 0\n        for i in lst1:\n     \
    \       total_lst1 += len(i)\n        for i in lst2:\n            total_lst2 +=\
    \ len(i)\n        if total_lst1 < total_lst2:\n            return lst1\n     \
    \   elif total_lst1 > total_lst2:\n            return lst2\n        else:\n  \
    \          return lst1", "    if len(lst1) == 0 and len(lst2) == 0:\n        return\
    \ []\n    elif len(lst1) == 0:\n        return lst2\n    elif len(lst2) == 0:\n\
    \        return lst1\n    else:\n        total_lst1 = 0\n        total_lst2 =\
    \ 0\n        for i in lst1:\n            total_lst1 += len(i)\n        for i in\
    \ lst2:\n            total_lst2 += len(i)\n        if total_lst1 < total_lst2:\n\
    \            return lst1\n        elif total_lst1 > total_lst2:\n            return\
    \ lst2\n        else:\n            return lst1\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
