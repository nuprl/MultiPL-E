language: py
name: HumanEval_92_any_int
results:
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpum9r8aum.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpum9r8aum.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpum9r8aum.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y\
    \ % 1 == 0 and z % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphgqqtcg7.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmphgqqtcg7.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmphgqqtcg7.py\", line 36,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return (x == y + z or y == x + z or z == x + y) and (x == int(x) and y\
    \ == int(y) and z == int(z))\n\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz8_l5na1.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpz8_l5na1.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpz8_l5na1.py\", line 36,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpum9r8aum.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpum9r8aum.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpum9r8aum.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return (x == y + z or y == x + z or z == x + y) and (x == int(x) and y\
    \ == int(y) and z == int(z))\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp91xhc7cb.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp91xhc7cb.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp91xhc7cb.py\", line 35,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpum9r8aum.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpum9r8aum.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpum9r8aum.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpum9r8aum.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpum9r8aum.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpum9r8aum.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    if (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1\
    \ == 0 and z % 1 == 0):\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi92qe1if.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpi92qe1if.py\", line 42,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpi92qe1if.py\", line 39,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpum9r8aum.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpum9r8aum.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpum9r8aum.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    if (x == y + z or y == x + z or z == x + y) and (x == int(x) and y ==\
    \ int(y) and z == int(z)):\n        return True\n    else:\n        return False\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5_sa4kyu.py\", line\
    \ 270, in <module>\n    test_check()\n  File \"/tmp/tmp5_sa4kyu.py\", line 268,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp5_sa4kyu.py\", line 265,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    if (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1\
    \ == 0 and z % 1 == 0):\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3b13tb4a.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp3b13tb4a.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp3b13tb4a.py\", line 38,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpum9r8aum.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpum9r8aum.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpum9r8aum.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpum9r8aum.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpum9r8aum.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpum9r8aum.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    if (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1\
    \ == 0 and z % 1 == 0):\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdtu86bop.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpdtu86bop.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpdtu86bop.py\", line 38,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpum9r8aum.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpum9r8aum.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpum9r8aum.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    if (x == y + z or y == x + z or z == x + y) and (x == int(x) and y ==\
    \ int(y) and z == int(z)):\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkaz1dfl7.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkaz1dfl7.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpkaz1dfl7.py\", line 38,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpum9r8aum.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpum9r8aum.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpum9r8aum.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n\
    \        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv319xy0m.py\", line\
    \ 282, in <module>\n    test_check()\n  File \"/tmp/tmpv319xy0m.py\", line 280,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpv319xy0m.py\", line 270,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpum9r8aum.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpum9r8aum.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpum9r8aum.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    # Your code here\n    if (x == y + z or y == x + z or z == x + y) and\
    \ (x == int(x) and y == int(y) and z == int(z)):\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_pb52jv.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpp_pb52jv.py\", line 42,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpp_pb52jv.py\", line 39,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  stdout: ''
