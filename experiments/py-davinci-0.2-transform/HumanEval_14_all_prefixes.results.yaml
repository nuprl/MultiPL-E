language: py
name: HumanEval_14_all_prefixes
results:
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i+1] for i in range(len(string))]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  if len(string) == 0:\n        return []\n    else:\n        return all_prefixes(string[:-1])\
    \ + [string]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805177
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  if string == '':\n        return []\n    else:\n        return all_prefixes(string[:-1])\
    \ + [string]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805177
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return [string[:i] for i in range(1, len(string) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
