language: py
name: HumanEval_46_fib4
results:
- exit_code: 0
  program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n + 1):\n            e = a + b + c + d\n            a = b\n       \
    \     b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c,\
    \ d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        e = a +\
    \ b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return\
    \ e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp23056_s1.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp23056_s1.py\", line 27,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmp23056_s1.py\", line 21, in\
    \ check\n    assert candidate(5) == 4\n  File \"/tmp/tmp23056_s1.py\", line 17,\
    \ in fib4\n    raise NotImplementedError()\nNotImplementedError\n"
  stdout: ''
- exit_code: 0
  program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d,\
    \ a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n + 1):\n            e = a + b + c + d\n            a = b\n       \
    \     b = c\n            c = d\n            d = e\n        return d\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\
    \    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n\
    \ == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n    b\
    \ = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        a, b, c, d =\
    \ b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) ==\
    \ 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
