name: HumanEval_10_make_palindrome
language: py
prompt: "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome\
  \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
  \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
  \ the end of the string reverse of a string prefix that comes before the palindromic\
  \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
  \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x')\
  \ == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') ==\
  \ 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n\ndef test_check():\n   \
  \ check(make_palindrome)\n\ntest_check()\n"
completions: ["    if not string:\n        return string\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string + string[:len(string)\
    \ - len(longest_palindrome_suffix)][::-1]\n\n", "    if not string:\n        return\
    \ string\n    # Find the longest palindromic suffix of the string.\n    suffix\
    \ = find_longest_palindromic_suffix(string)\n    # Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n    return\
    \ string + string[:len(string) - len(suffix)][::-1]\n\n", "    if not string:\n\
    \        return string\n    if len(string) == 1:\n        return string + string\n\
    \    if len(string) == 2:\n        return string if string[0] == string[1] else\
    \ string + string[::-1]\n    for i in range(len(string) - 1, -1, -1):\n      \
    \  if string[i] == string[0]:\n            if is_palindrome(string[:i + 1]):\n\
    \                return string + string[i + 1:][::-1]\n    return string + string[::-1]\n\
    \n", "    if not string:\n        return string\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string + string[:len(string)\
    \ - len(longest_palindrome_suffix)][::-1]\n\n", "    if not string:\n        return\
    \ string\n    # Find the longest palindromic suffix.\n    suffix_length = find_longest_palindromic_suffix(string)\n\
    \    # Reverse the prefix and append it to the end of the string.\n    return\
    \ string + string[:len(string) - suffix_length][::-1]\n\n", "    if not string:\n\
    \        return string\n    if len(string) == 1:\n        return string + string\n\
    \    if len(string) == 2:\n        return string[0] + string + string[0]\n   \
    \ if len(string) == 3:\n        if string[0] == string[2]:\n            return\
    \ string + string[0]\n        else:\n            return string[0] + string + string[0]\n\
    \    if len(string) == 4:\n        if string[0] == string[3]:\n            return\
    \ string + string[0]\n        else:\n            return string[0] + string + string[0]\n\
    \    if len(string) > 4:\n        if string[0] == string[-1]:\n            return\
    \ string + make_palindrome(string[1:-1])\n        else:\n            return string[0]\
    \ + make_palindrome(string[1:]) + string[0]\n\n", "    if not string:\n      \
    \  return string\n    if is_palindrome(string):\n        return string\n    for\
    \ i in range(len(string)):\n        if is_palindrome(string[i:]):\n          \
    \  return string + string[:i][::-1]\n\n", "    # Find the longest palindromic\
    \ suffix\n    suffix = find_longest_palindromic_suffix(string)\n    # Append reverse\
    \ of the prefix to the end of the string\n    return string + string[:len(string)\
    \ - len(suffix)][::-1]\n\n", "    if not string:\n        return string\n    if\
    \ len(string) == 1:\n        return string + string\n    for i in range(len(string)\
    \ - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            return string\
    \ + string[:i][::-1]\n    return string + string[:-1][::-1]\n\n", "    if not\
    \ string:\n        return string\n    if is_palindrome(string):\n        return\
    \ string\n    longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    prefix = string[:len(string) - len(longest_palindrome_suffix)]\n    return\
    \ string + prefix[::-1]\n\n", "    if not string:\n        return string\n   \
    \ if len(string) == 1:\n        return string + string\n    if len(string) ==\
    \ 2:\n        return string if string[0] == string[1] else string + string[1]\
    \ + string[0]\n    # Find the longest palindromic suffix of the string.\n    for\
    \ i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n\
    \            return string + string[:i][::-1]\n    return string + string[1:][::-1]\n\
    \n", "    if not string:\n        return string\n    if len(string) == 1:\n  \
    \      return string + string\n    if len(string) == 2:\n        return string\
    \ if string[0] == string[1] else string + string[::-1]\n    if string == string[::-1]:\n\
    \        return string\n    for i in range(len(string) - 1, -1, -1):\n       \
    \ if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n\
    \    return string + string[::-1]\n\n", "    if not string:\n        return string\n\
    \    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n\
    \        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\
    \n", "    if not string:\n        return string\n    if len(string) == 1:\n  \
    \      return string + string\n    if len(string) == 2:\n        return string\
    \ if string[0] == string[1] else string + string[::-1]\n    for i in range(len(string)\
    \ - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            return string\
    \ + string[:i][::-1]\n    return string + string[::-1]\n\n", "    if not string:\n\
    \        return string\n    if len(string) == 1:\n        return string + string\n\
    \    if is_palindrome(string):\n        return string\n    for i in range(len(string)\
    \ - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            return string\
    \ + string[:i][::-1]\n    return string + string[::-1]\n\n", "    if not string:\n\
    \        return string\n    if is_palindrome(string):\n        return string\n\
    \    longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n    prefix\
    \ = string[:len(string) - len(longest_palindrome_suffix)]\n    return string +\
    \ prefix[::-1]\n\n", "    if not string:\n        return string\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string + string[:len(string)\
    \ - len(longest_palindrome_suffix)][::-1]\n\n", "    if not string:\n        return\
    \ string\n    # Find the longest postfix that is a palindrome.\n    # This is\
    \ done by finding the longest common substring of the string and its reverse.\n\
    \    # The longest common substring of a string and its reverse is the longest\
    \ palindromic suffix.\n    # This is done in O(n) time using KMP algorithm.\n\
    \    # The algorithm is described in detail here:\n    # https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/\n\
    \    # https://www.geeksforgeeks.org/longest-common-substring-dp-29/\n    # https://www.geeksforgeeks.org/longest-palindrome-substring-set-1/\n\
    \    # https://www.geeksforgeeks.org/longest-palindromic-substring-set-2/\n  \
    \  # https://www.geeksforgeeks.org/longest-palindromic-substring-set-3/\n    #\
    \ https://www.geeksforgeeks.org/longest-palindromic-substring-set-4/\n    # https://www.geeksforgeeks.org/longest-palindromic-substring-set-5/\n\
    \    # https://www.geeksforgeeks.org/longest-palindromic-substring-set-6/\n  \
    \  # https://www.geeksforgeeks.org/longest-palindromic-substring-set-7/\n    #\
    \ https://www.geeksforgeeks.org/longest-palindromic-substring-set-8/\n    # https://www.geeksforgeeks.org/longest-palindromic-substring-set-9/\n\
    \    # https://www.geeksforgeeks.org/longest-palindromic-substring-set-10/\n \
    \   # https://www.geeksforgeeks.org/longest-palindromic-substring-set-11/\n  \
    \  # https://www.geeksforgeeks.org/longest-palindromic-substring-set-12/\n   \
    \ # https://www.geeksforgeeks.org/longest", "    if not string:\n        return\
    \ string\n    if len(string) == 1:\n        return string + string\n    for i\
    \ in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n     \
    \       return string + string[:i][::-1]\n    return string + string[::-1]\n\n",
  "    if not string:\n        return string\n    longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    prefix = string[:-len(longest_palindrome_suffix)]\n    return string + prefix[::-1]\n\
    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
