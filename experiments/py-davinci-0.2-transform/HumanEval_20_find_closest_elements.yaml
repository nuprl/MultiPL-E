name: HumanEval_20_find_closest_elements
language: py
prompt: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
  \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
  \ at least two) select and return two that are the closest to each\n    other and\
  \ return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
  \ == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n\
  \    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert\
  \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n    check(find_closest_elements)\n\
  \ntest_check()\n"
completions: ["    # TODO: Write a function that finds the two closest numbers in\
    \ a list of numbers.\n    # Hint: You can use the abs() function to get the absolute\
    \ value of a number.\n    # Hint: You can use the min() function to find the minimum\
    \ of a list of numbers.\n    # Hint: You can use the index() function to find\
    \ the index of an element in a list.\n    # Hint: You can use the sort() function\
    \ to sort a list of numbers.\n    # Hint: You can use the zip() function to combine\
    \ two lists into a list of tuples.\n    # Hint: You can use the enumerate() function\
    \ to get the index of an element in a list.\n    # Hint: You can use the abs()\
    \ function to get the absolute value of a number.\n    # Hint: You can use the\
    \ min() function to find the minimum of a list of numbers.\n    # Hint: You can\
    \ use the index() function to find the index of an element in a list.\n    # Hint:\
    \ You can use the sort() function to sort a list of numbers.\n    # Hint: You\
    \ can use the zip() function to combine two lists into a list of tuples.\n   \
    \ # Hint: You can use the enumerate() function to get the index of an element\
    \ in a list.\n    # Hint: You can use the abs() function to get the absolute value\
    \ of a number.\n    # Hint: You can use the min() function to find the minimum\
    \ of a list of numbers.\n    # Hint: You can use the index() function to find\
    \ the index of an element in a list.\n    # Hint: You can use the sort() function\
    \ to sort a list of numbers.\n    # Hint: You can use the zip() function to combine\
    \ two lists into a list of tuples.\n    # Hint: You can use the enumerate() function\
    \ to get the index of an element in a list.\n    # Hint: You can use the abs()\
    \ function to get the absolute value of a number.\n    # Hint: You can use the\
    \ min() function to find the minimum of a list of numbers.\n    # Hint: You can\
    \ use the index() function to find the index of an element in a list.\n    # Hint:\
    \ You can", "    # TODO: Implement this function\n    pass\n", "    # TODO: Write\
    \ function body\n    pass\n", "    # TODO: Implement this function\n    pass\n\
    \n", "    # Initialize variables\n    closest_pair = (numbers[0], numbers[1])\n\
    \    closest_distance = abs(numbers[0] - numbers[1])\n    # Loop through the list\n\
    \    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n\
    \            # Check if the distance between the two numbers is smaller than the\
    \ current closest distance\n            if abs(numbers[i] - numbers[j]) < closest_distance:\n\
    \                # If so, update the closest pair and distance\n             \
    \   closest_pair = (numbers[i], numbers[j])\n                closest_distance\
    \ = abs(numbers[i] - numbers[j])\n    # Return the closest pair\n    return closest_pair\n",
  "    # TODO: Implement this function\n    pass\n\n", "    # TODO: implement this\
    \ function\n    pass\n", "    # TODO: Implement this function\n    pass\n", " \
    \   # TODO: implement this function\n    pass\n", "    # TODO: implement this\
    \ function\n    pass\n", "    numbers.sort()\n    closest_pair = (numbers[0],\
    \ numbers[1])\n    closest_distance = abs(numbers[0] - numbers[1])\n    for i\
    \ in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < closest_distance:\n\
    \            closest_pair = (numbers[i], numbers[i + 1])\n            closest_distance\
    \ = abs(numbers[i] - numbers[i + 1])\n    return closest_pair\n", "    # YOUR\
    \ CODE HERE\n    numbers.sort()\n    min_diff = abs(numbers[0] - numbers[1])\n\
    \    min_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n\
    \        if abs(numbers[i] - numbers[i + 1]) < min_diff:\n            min_diff\
    \ = abs(numbers[i] - numbers[i + 1])\n            min_pair = (numbers[i], numbers[i\
    \ + 1])\n    return min_pair\n\n", "    # TODO: implement this function\n    pass\n",
  "    # TODO: implement me\n    pass\n", "    # TODO: Implement this function\n \
    \   pass\n", "    # TODO: implement this function\n    pass\n", "    # TODO: Complete\
    \ this function\n    # Hint: You will need to iterate over the list of numbers\
    \ at least twice.\n    # Hint: You will need to sort the list of numbers.\n  \
    \  # Hint: You will need to use the abs() function.\n    # Hint: You will need\
    \ to use the min() function.\n    # Hint: You will need to use the index() function.\n\
    \    # Hint: You will need to use the sort() function.\n    # Hint: You will need\
    \ to use the append() function.\n    # Hint: You will need to use the pop() function.\n\
    \    # Hint: You will need to use the remove() function.\n    # Hint: You will\
    \ need to use the return statement.\n    # Hint: You will need to use the len()\
    \ function.\n    # Hint: You will need to use the range() function.\n    # Hint:\
    \ You will need to use the enumerate() function.\n    # Hint: You will need to\
    \ use the zip() function.\n    # Hint: You will need to use the isinstance() function.\n\
    \    # Hint: You will need to use the type() function.\n    # Hint: You will need\
    \ to use the int() function.\n    # Hint: You will need to use the float() function.\n\
    \    # Hint: You will need to use the str() function.\n    # Hint: You will need\
    \ to use the list() function.\n    # Hint: You will need to use the tuple() function.\n\
    \    # Hint: You will need to use the set() function.\n    # Hint: You will need\
    \ to use the dict() function.\n    # Hint: You will need to use the any() function.\n\
    \    # Hint: You will need to use the all() function.\n    # Hint: You will need\
    \ to use the sum() function.\n    # Hint: You will need to use the max() function.\n\
    \    # Hint: You will need to use the min() function.\n    # Hint: You will need\
    \ to use the sorted() function.\n    # Hint: You will need to use the reversed()\
    \ function.\n    # Hint: You will need to use the reversed() function.\n", " \
    \   # TODO: Implement this function\n    # Hint: You can use the abs() function\
    \ to get the absolute value of a number\n    # Hint: You can use the sort() function\
    \ to sort a list of numbers\n    # Hint: You can use the enumerate() function\
    \ to get the index of an item in a list\n    # Hint: You can use the zip() function\
    \ to combine two lists into a list of tuples\n    # Hint: You can use the min()\
    \ function to get the minimum value from a list\n    # Hint: You can use the max()\
    \ function to get the maximum value from a list\n    # Hint: You can use the abs()\
    \ function to get the absolute value of a number\n    # Hint: You can use the\
    \ sort() function to sort a list of numbers\n    # Hint: You can use the enumerate()\
    \ function to get the index of an item in a list\n    # Hint: You can use the\
    \ zip() function to combine two lists into a list of tuples\n    # Hint: You can\
    \ use the min() function to get the minimum value from a list\n    # Hint: You\
    \ can use the max() function to get the maximum value from a list\n    # Hint:\
    \ You can use the abs() function to get the absolute value of a number\n    #\
    \ Hint: You can use the sort() function to sort a list of numbers\n    # Hint:\
    \ You can use the enumerate() function to get the index of an item in a list\n\
    \    # Hint: You can use the zip() function to combine two lists into a list of\
    \ tuples\n    # Hint: You can use the min() function to get the minimum value\
    \ from a list\n    # Hint: You can use the max() function to get the maximum value\
    \ from a list\n    # Hint: You can use the abs() function to get the absolute\
    \ value of a number\n    # Hint: You can use the sort() function to sort a list\
    \ of numbers\n    # Hint: You can use the enumerate() function to get the index\
    \ of an item in a list\n    # Hint: You can use the zip() function to combine\
    \ two lists into a list of tuples\n    # Hint: You can use the min() function\
    \ to get the minimum value from a list\n    # Hint: You can", "    # TODO: Write\
    \ a function that finds the two closest numbers in a list of numbers.\n    # \
    \      The function should return a tuple of the two numbers in order (smaller\
    \ number, larger number).\n    #       If there are multiple pairs of numbers\
    \ that are equally close, return the pair with the smaller\n    #       larger\
    \ number.\n    #       If the list contains only one number, return that number\
    \ and None.\n    #       If the list is empty, return None and None.\n    #  \
    \     If the list contains duplicate numbers, return the pair with the smaller\
    \ larger number.\n    #       If the list contains the same number twice, return\
    \ the number and None.\n    #       If the list contains the same number three\
    \ times, return the number and None.\n    #       If the list contains the same\
    \ number four times, return the number and None.\n    #       If the list contains\
    \ the same number five times, return the number and None.\n    #       If the\
    \ list contains the same number six times, return the number and None.\n    #\
    \       If the list contains the same number seven times, return the number and\
    \ None.\n    #       If the list contains the same number eight times, return\
    \ the number and None.\n    #       If the list contains the same number nine\
    \ times, return the number and None.\n    #       If the list contains the same\
    \ number ten times, return the number and None.\n    #       If the list contains\
    \ the same number eleven times, return the number and None.\n    #       If the\
    \ list contains the same number twelve times, return the number and None.\n  \
    \  #       If the list contains the same number thirteen times, return the number\
    \ and None.\n    #       If the list contains the same number fourteen times,\
    \ return the number and None.\n    #       If the list contains the same number\
    \ fifteen times, return the number and None.\n    #       If the list contains\
    \ the same number sixteen times, return the number and None.\n    #       If the\
    \ list contains the same number seventeen times, return the number and None.\n\
    \    #       If the list contains the same number eighteen times, return the number\
    \ and None.\n    #       If the list contains the same number nineteen times,\
    \ return the number and None.\n    #       If the list contains the same number\
    \ twenty times, return the number and None.\n    #       If the", "    # TODO:\
    \ Implement this function\n    pass\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
