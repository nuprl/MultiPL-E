name: HumanEval_127_intersection
language: py
prompt: "from typing import Tuple\n\ndef intersection(interval1: Tuple[int, int],\
  \ interval2: Tuple[int, int]) -> str:\n    \"\"\"You are given two intervals,\n\
  \    where each interval is a pair of integers. For example, interval = (start,\
  \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
  \ (start, end)\n    includes both start and end.\n    For each given interval, it\
  \ is assumed that its start is less or equal its end.\n    Your task is to determine\
  \ whether the length of intersection of these two \n    intervals is a prime number.\n\
  \    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which\
  \ its length is 1, which not a prime number.\n    If the length of the intersection\
  \ is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the\
  \ two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n\
  \    >>> intersection((1, 2), (2, 3))\n    'NO'\n    >>> intersection((-1, 1), (0,\
  \ 4))\n    'NO'\n    >>> intersection((-3, -1), (-5, 5))\n    'YES'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate((1, 2), (2, 3)) == 'NO'\n    assert\
  \ candidate((-1, 1), (0, 4)) == 'NO'\n    assert candidate((-3, -1), (-5, 5)) ==\
  \ 'YES'\n    assert candidate((-2, 2), (-4, 0)) == 'YES'\n    assert candidate((-11,\
  \ 2), (-1, -1)) == 'NO'\n    assert candidate((1, 2), (3, 5)) == 'NO'\n    assert\
  \ candidate((1, 2), (1, 2)) == 'NO'\n    assert candidate((-2, -2), (-3, -2)) ==\
  \ 'NO'\n\ndef test_check():\n    check(intersection)\n\ntest_check()\n"
completions: ["    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    if is_prime(end - start + 1):\n        return \"YES\"\n   \
    \ return \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n     \
    \   return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if end < start:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    if start == end:\n\
    \        return \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end -\
    \ start + 1):\n        return \"YES\"\n    return \"NO\"\n\n", "    if interval1[1]\
    \ < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    start\
    \ = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start == end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end\
    \ = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\
    \n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "    start =\
    \ max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if end < start:\n        return\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    else:\n        return \"YES\" if is_prime(end - start + 1) else\
    \ \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n     \
    \   return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n",
  "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    if interval1[1] < interval2[0] or interval2[1]\
    \ < interval1[0]:\n        return \"NO\"\n    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start == end:\n        return\
    \ \"NO\"\n    if start == 1:\n        return \"YES\"\n    for i in range(2, start):\n\
    \        if start % i == 0:\n            return \"NO\"\n    return \"YES\"\n",
  "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if end < start:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start, end = interval1[0], interval1[1]\n    start2, end2 = interval2[0], interval2[1]\n\
    \    if start > end2 or start2 > end:\n        return \"NO\"\n    else:\n    \
    \    if start2 > start:\n            start = start2\n        if end2 < end:\n\
    \            end = end2\n        if start == end:\n            return \"YES\"\n\
    \        else:\n            for i in range(2, end):\n                if start\
    \ % i == 0 and end % i == 0:\n                    return \"NO\"\n            return\
    \ \"YES\"\n", "    def is_prime(n: int) -> bool:\n        if n < 2:\n        \
    \    return False\n        if n == 2:\n            return True\n        if n %\
    \ 2 == 0:\n            return False\n        for i in range(3, int(n**0.5)+1,\
    \ 2):\n            if n % i == 0:\n                return False\n        return\
    \ True\n\n    def get_intersection(interval1: Tuple[int, int], interval2: Tuple[int,\
    \ int]) -> Tuple[int, int]:\n        \"\"\"\n        >>> get_intersection((1,\
    \ 2), (2, 3))\n        (2, 2)\n        >>> get_intersection((-1, 1), (0, 4))\n\
    \        (0, 1)\n        >>> get_intersection((-3, -1), (-5, 5))\n        (-3,\
    \ -1)\n        \"\"\"\n        start = max(interval1[0], interval2[0])\n     \
    \   end = min(interval1[1], interval2[1])\n        return (start, end)\n\n   \
    \ intersection = get_intersection(interval1, interval2)\n    if intersection[0]\
    \ > intersection[1]:\n        return \"NO\"\n    return \"YES\" if is_prime(intersection[1]\
    \ - intersection[0] + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    # get the intersection of the two intervals\n\
    \    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    # if the two intervals don't intersect\n    if start > end:\n        return\
    \ \"NO\"\n    # if the length of the intersection is a prime number\n    if is_prime(end\
    \ - start + 1):\n        return \"YES\"\n    # otherwise\n    return \"NO\"\n",
  "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start) else\
    \ \"NO\"\n    if is_prime(end - start + 1):\n        return \"YES\"\n    return\
    \ \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    if start == end:\n\
    \        return \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end -\
    \ start + 1):\n        return \"YES\"\n    return \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n",
  "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    length = end - start + 1\n  \
    \  return \"YES\" if is_prime(length) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n     \
    \   return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    # get the intersection of\
    \ the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    # if the two intervals don't intersect, return \"NO\"\n \
    \   if start > end:\n        return \"NO\"\n    # if the length of the intersection\
    \ is a prime number, return \"YES\",\n    # otherwise, return \"NO\"\n    return\
    \ \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    else:\n        return \"YES\" if is_prime(end - start\
    \ + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end =\
    \ min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n\
    \    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "    start =\
    \ max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    elif start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    else:\n        return \"YES\" if\
    \ is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    else:\n        return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n",
  "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start) else\
    \ \"NO\"\n    if is_prime(end - start + 1):\n        return \"YES\"\n    return\
    \ \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n     \
    \   return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    if start == end:\n\
    \        return \"YES\" if is_prime(start) else \"NO\"\n    return \"YES\" if\
    \ is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end - start + 1):\n\
    \        return \"YES\"\n    return \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n",
  "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start) else\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    # find the intersection of the two intervals\n\
    \    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    # if the two intervals don't intersect, return \"NO\"\n    if start > end:\n\
    \        return \"NO\"\n    # if the length of the intersection is a prime number,\
    \ return \"YES\",\n    # otherwise, return \"NO\"\n    if is_prime(end - start\
    \ + 1):\n        return \"YES\"\n    else:\n        return \"NO\"\n", "    start\
    \ = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    else:\n        return \"YES\" if is_prime(end - start + 1) else\
    \ \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    # find the intersection of the two intervals\n    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    # check if the length of the intersection is a prime\
    \ number\n    for i in range(2, end - start + 1):\n        if (end - start + 1)\
    \ % i == 0:\n            return \"NO\"\n    return \"YES\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end\
    \ - start + 1\n    if length < 2:\n        return \"NO\"\n    for i in range(2,\
    \ length):\n        if length % i == 0:\n            return \"NO\"\n    return\
    \ \"YES\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    else:\n        return \"YES\" if is_prime(end - start\
    \ + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end =\
    \ min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n\
    \    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "    start =\
    \ max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    else:\n        return \"YES\" if is_prime(end - start + 1) else\
    \ \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    if start == end:\n\
    \        return \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end -\
    \ start + 1):\n        return \"YES\"\n    return \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n",
  "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start) else\
    \ \"NO\"\n    if is_prime(end - start + 1):\n        return \"YES\"\n    return\
    \ \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n     \
    \   return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    if start == end:\n\
    \        return \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end -\
    \ start + 1):\n        return \"YES\"\n    return \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if start\
    \ in (2, 3, 5, 7) else \"NO\"\n    return \"YES\" if is_prime(end - start) else\
    \ \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    if start == end:\n\
    \        return \"YES\" if is_prime(start) else \"NO\"\n    return \"YES\" if\
    \ is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
