language: py
name: HumanEval_117_select_words
results:
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0o11uhio.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp0o11uhio.py\", line 35,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp0o11uhio.py\", line\
    \ 26, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqnm3vu0n.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpqnm3vu0n.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqnm3vu0n.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter in 'bcdfghjklmnpqrstvwxyz':\n                count += 1\n   \
    \     if count == n:\n            result.append(word)\n    return result\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxdrzdutl.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpxdrzdutl.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpxdrzdutl.py\", line\
    \ 35, in check\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # TODO: implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn6vup4v3.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpn6vup4v3.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpn6vup4v3.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhn7q5t6.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpfhn7q5t6.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfhn7q5t6.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        if len(word) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqnm3vu0n.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpqnm3vu0n.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqnm3vu0n.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        consonants = 0\n        for letter in word:\n            if letter not\
    \ in 'aeiou':\n                consonants += 1\n        if consonants == n:\n\
    \            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxu06u1t_.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpxu06u1t_.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpxu06u1t_.py\", line\
    \ 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpruor9y86.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpruor9y86.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpruor9y86.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpruor9y86.py\", line 22, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhn7q5t6.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpfhn7q5t6.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfhn7q5t6.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        count = 0\n        for letter in word:\n            if letter not in\
    \ 'aeiou':\n                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc73oooba.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpc73oooba.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpc73oooba.py\", line\
    \ 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # your code here\n    return []\n\ndef check(candidate):\n  \
    \  assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp35gx_8gw.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp35gx_8gw.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp35gx_8gw.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps3yesp6d.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmps3yesp6d.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps3yesp6d.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for char in word:\n        \
    \    if char not in 'aeiou':\n                count += 1\n        if count ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dooa87r.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp9dooa87r.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9dooa87r.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n\
    \        count = 0\n        for letter in word:\n            if letter not in\
    \ 'aeiou':\n                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc73oooba.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpc73oooba.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpc73oooba.py\", line\
    \ 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhn7q5t6.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpfhn7q5t6.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfhn7q5t6.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhn7q5t6.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpfhn7q5t6.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfhn7q5t6.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhn7q5t6.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpfhn7q5t6.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfhn7q5t6.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter.lower() in consonants:\n                count\
    \ += 1\n        if count == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for char in word:\n        \
    \    if char not in 'aeiou':\n                count += 1\n        if count ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dooa87r.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp9dooa87r.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9dooa87r.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n    result = []\n  \
    \  for word in words:\n        count = 0\n        for letter in word:\n      \
    \      if letter not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhn7q5t6.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpfhn7q5t6.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfhn7q5t6.py\", line\
    \ 38, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
