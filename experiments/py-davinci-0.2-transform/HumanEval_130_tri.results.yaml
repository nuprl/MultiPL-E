language: py
name: HumanEval_130_tri
results:
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n   \
    \     return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(3,\
    \ n + 1)]\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n  \
    \  assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2,\
    \ 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprum52frh.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmprum52frh.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmprum52frh.py\", line 35, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpwz693s3h.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwz693s3h.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 33, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7c2cskf6.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp7c2cskf6.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp7c2cskf6.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n   \
    \     return [1, 3, 2] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1] for\
    \ i in range(3, n + 1)]\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp074a4m3g.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp074a4m3g.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp074a4m3g.py\", line 36, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + (i / 2) for i in range(3, n + 1)]\n    else:\n \
    \       return [1, 3, 2] + [1 + (i / 2) for i in range(3, n)] + [tri(n - 1)[-1]\
    \ + tri(n - 2)[-1] + tri(n + 1)[-1]]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp95j2bysg.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp95j2bysg.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp95j2bysg.py\", line 36, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                res.append(1 + i / 2)\n   \
    \         else:\n                res.append(res[i - 1] + res[i - 2] + res[i +\
    \ 1])\n        return res\n\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpru6uug12.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpru6uug12.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpru6uug12.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpru6uug12.py\", line\
    \ 33, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(4, n + 2)]\n    else:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(4, n + 1)] + [tri(n - 1)[-1]\
    \ + tri(n - 2)[-1] + tri(n + 1)[-1]]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxacal4su.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpxacal4su.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpxacal4su.py\", line 36, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i // 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzqzs78so.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzqzs78so.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzqzs78so.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                l.append(1 + i / 2)\n           \
    \ else:\n                l.append(l[i - 1] + l[i - 2] + l[i + 1])\n        return\
    \ l\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2hwstvut.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp2hwstvut.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp2hwstvut.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp2hwstvut.py\", line\
    \ 33, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                res.append(1 + i / 2)\n   \
    \         else:\n                res.append(res[i - 1] + res[i - 2] + res[i +\
    \ 1])\n        return res\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdd7d2uqv.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpdd7d2uqv.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdd7d2uqv.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpdd7d2uqv.py\", line\
    \ 33, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i // 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzqzs78so.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzqzs78so.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzqzs78so.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n    \
    \    return [1, 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144]\n    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233]\n    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n\
    \ == 16:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610,\
    \ 987, 1597, 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5oz8lapy.py\", line 56\n    return [1,\n           ^\n\
    SyntaxError: '[' was never closed\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\n\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfrum2_7d.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpfrum2_7d.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpfrum2_7d.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpfrum2_7d.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        seq = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                seq.append(1 + i / 2)\n   \
    \         else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i +\
    \ 1])\n        return seq\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp09t4fcpw.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp09t4fcpw.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp09t4fcpw.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp09t4fcpw.py\", line\
    \ 33, in tri\n    seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + (i / 2) for i in range(3, n + 1)]\n    else:\n \
    \       return [1, 3, 2] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1] for\
    \ i in range(3, n + 1)]\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsxyr2wcy.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpsxyr2wcy.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpsxyr2wcy.py\", line 36, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n   \
    \     return [1, 3, 2] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1] for\
    \ i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0z6dhhtw.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp0z6dhhtw.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp0z6dhhtw.py\", line 35, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i + 1) / 2 for i\
    \ in range(3, n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 44, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 32, in check\n    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpwz693s3h.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwz693s3h.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 33, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\n\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfrum2_7d.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpfrum2_7d.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpfrum2_7d.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpfrum2_7d.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                res.append(1 + i / 2)\n   \
    \         else:\n                res.append(res[i - 1] + res[i - 2] + res[i +\
    \ 1])\n        return res\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdd7d2uqv.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpdd7d2uqv.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdd7d2uqv.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpdd7d2uqv.py\", line\
    \ 33, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                l.append(1 + i / 2)\n           \
    \ else:\n                l.append(l[i - 1] + l[i - 2] + l[i + 1])\n        return\
    \ l\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2hwstvut.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp2hwstvut.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp2hwstvut.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp2hwstvut.py\", line\
    \ 33, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i\
    \ in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj_me02o0.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpj_me02o0.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpj_me02o0.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n    \
    \    return [1, 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144]\n    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233]\n    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n\
    \ == 16:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610,\
    \ 987, 1597, 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5oz8lapy.py\", line 56\n    return [1,\n           ^\n\
    SyntaxError: '[' was never closed\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                l.append(1 + i / 2)\n           \
    \ else:\n                l.append(l[i - 1] + l[i - 2] + l[i + 1])\n        return\
    \ l\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2hwstvut.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp2hwstvut.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp2hwstvut.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp2hwstvut.py\", line\
    \ 33, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppawlol8p.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmppawlol8p.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmppawlol8p.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmppawlol8p.py\", line\
    \ 33, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n      \
    \  return [1, 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20,\
    \ 13, 21]\n    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n \
    \   if n == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n\
    \    if n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144]\n    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34,\
    \ 55, 89, 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20,\
    \ 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n \
    \       return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqxy24xef.py\"\
    , line 56\n    return [1, 3, 2, 8,\n           ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + (i / 2) for i in range(4, n + 1)]\n    else:\n \
    \       return [1, 3, 2] + [1 + (i / 2) for i in range(4, n)] + [tri(n - 1)[-1]\
    \ + tri(n - 2)[-1] + tri(n + 1)[-1]]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr8ddz9np.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpr8ddz9np.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpr8ddz9np.py\", line 36, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                res.append(1 + i / 2)\n   \
    \         else:\n                res.append(res[i - 1] + res[i - 2] + res[i +\
    \ 1])\n        return res\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdd7d2uqv.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpdd7d2uqv.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdd7d2uqv.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpdd7d2uqv.py\", line\
    \ 33, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppawlol8p.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmppawlol8p.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmppawlol8p.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmppawlol8p.py\", line\
    \ 33, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpwz693s3h.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwz693s3h.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 33, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(4, n + 2)]\n    else:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(4, n + 1)] + [tri(n - 1)[-1]\
    \ + tri(n - 2)[-1] + tri(n + 1)[-1]]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxacal4su.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpxacal4su.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpxacal4su.py\", line 36, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(4, n + 2)]\n    else:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(4, n + 1)] + [tri(n - 1)[-1]\
    \ + tri(n - 2)[-1] + tri(n + 1)[-1]]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxacal4su.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpxacal4su.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpxacal4su.py\", line 36, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\n\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfrum2_7d.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpfrum2_7d.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpfrum2_7d.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpfrum2_7d.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n    \
    \    return [1, 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144]\n    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233]\n    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n\
    \ == 16:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610,\
    \ 987, 1597, 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5oz8lapy.py\", line 56\n    return [1,\n           ^\n\
    SyntaxError: '[' was never closed\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n      \
    \  return [1, 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20,\
    \ 13, 21]\n    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n \
    \   if n == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n\
    \    if n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144]\n    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34,\
    \ 55, 89, 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20,\
    \ 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n \
    \       return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqxy24xef.py\"\
    , line 56\n    return [1, 3, 2, 8,\n           ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + (i / 2) for i in range(4, n + 1)]\n    else:\n \
    \       return [1, 3, 2] + [1 + (i / 2) for i in range(4, n)] + [tri(n - 1)[-1]\
    \ + tri(n - 2)[-1] + tri(n + 1)[-1]]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9s3dxnaj.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp9s3dxnaj.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9s3dxnaj.py\", line 35, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n      \
    \  return [1, 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20,\
    \ 13, 21]\n    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n \
    \   if n == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n\
    \    if n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144]\n    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34,\
    \ 55, 89, 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20,\
    \ 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n \
    \       return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqxy24xef.py\"\
    , line 56\n    return [1, 3, 2, 8,\n           ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i + 1) / 2 for i\
    \ in range(3, n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 44, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 32, in check\n    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i + 1) / 2 for i\
    \ in range(3, n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkx96mtc3.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpkx96mtc3.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkx96mtc3.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        t = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                t.append(1 + i / 2)\n           \
    \ else:\n                t.append(t[i - 1] + t[i - 2] + t[i + 1])\n        return\
    \ t\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplr25qthf.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmplr25qthf.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmplr25qthf.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmplr25qthf.py\", line\
    \ 33, in tri\n    t.append(t[i - 1] + t[i - 2] + t[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i + 1) / 2 for i\
    \ in range(3, n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 44, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 32, in check\n    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i + 1) / 2 for i\
    \ in range(3, n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 44, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 32, in check\n    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                res.append(1 + i / 2)\n   \
    \         else:\n                res.append(res[i - 1] + res[i - 2] + res[i +\
    \ 1])\n        return res\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdd7d2uqv.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpdd7d2uqv.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdd7d2uqv.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpdd7d2uqv.py\", line\
    \ 33, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i / 2) for i in\
    \ range(3, n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 44, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 32, in check\n    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + (i / 2) for i in range(3, n + 1)]\n    else:\n \
    \       return [1, 3, 2] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1] for\
    \ i in range(3, n + 1)]\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsxyr2wcy.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpsxyr2wcy.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpsxyr2wcy.py\", line 36, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + (i + 1) / 2 for i in range(3, n + 1)]\n    else:\n\
    \        return [1, 3, 2] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1]\
    \ for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3l5nsxq1.py\"\
    , line 48, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3l5nsxq1.py\"\
    , line 46, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3l5nsxq1.py\"\
    , line 35, in check\n    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        seq = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                seq.append(1 + i / 2)\n   \
    \         else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i +\
    \ 1])\n        return seq\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp09t4fcpw.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp09t4fcpw.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp09t4fcpw.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp09t4fcpw.py\", line\
    \ 33, in tri\n    seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n    \
    \    return [1, 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144]\n    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233]\n    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n\
    \ == 16:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610,\
    \ 987, 1597, 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5oz8lapy.py\", line 56\n    return [1,\n           ^\n\
    SyntaxError: '[' was never closed\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n)] + [tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n + 1)[-1]]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxqtp63ic.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpxqtp63ic.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpxqtp63ic.py\", line 34, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        seq = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                seq.append(1 + i / 2)\n   \
    \         else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i +\
    \ 1])\n        return seq\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp09t4fcpw.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp09t4fcpw.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp09t4fcpw.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp09t4fcpw.py\", line\
    \ 33, in tri\n    seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpwz693s3h.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwz693s3h.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 33, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i + 1) / 2 for i\
    \ in range(3, n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkx96mtc3.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpkx96mtc3.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkx96mtc3.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpwz693s3h.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwz693s3h.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 33, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + (i / 2) for i in range(3, n + 1)]\n    else:\n \
    \       return [1, 3, 2] + [1 + (i / 2) for i in range(3, n)] + [tri(n - 1)[-1]\
    \ + tri(n - 2)[-1] + tri(n + 1)[-1]]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp95j2bysg.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp95j2bysg.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp95j2bysg.py\", line 36, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i + 1) / 2 for i\
    \ in range(3, n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkx96mtc3.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpkx96mtc3.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkx96mtc3.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7c2cskf6.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp7c2cskf6.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp7c2cskf6.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + (i / 2) for i in range(3, n + 1)]\n    else:\n \
    \       return [1, 3, 2] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1] for\
    \ i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyc3y7qqx.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpyc3y7qqx.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpyc3y7qqx.py\", line 35, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n      \
    \  return [1, 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20,\
    \ 13, 21]\n    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n \
    \   if n == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n\
    \    if n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144]\n    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34,\
    \ 55, 89, 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20,\
    \ 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n \
    \       return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqxy24xef.py\"\
    , line 56\n    return [1, 3, 2, 8,\n           ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpwz693s3h.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwz693s3h.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 33, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                l.append(1 + i / 2)\n           \
    \ else:\n                l.append(l[i - 1] + l[i - 2] + l[i + 1])\n        return\
    \ l\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2hwstvut.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp2hwstvut.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp2hwstvut.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp2hwstvut.py\", line\
    \ 33, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n    \
    \    return [1, 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144]\n    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233]\n    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n\
    \ == 16:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610,\
    \ 987, 1597, 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5oz8lapy.py\", line 56\n    return [1,\n           ^\n\
    SyntaxError: '[' was never closed\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n      \
    \  return [1, 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 8]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20,\
    \ 8, 21]\n    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 8, 21, 13]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 8, 21, 13, 34]\n  \
    \  if n == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 8, 21, 13, 34, 14]\n\
    \    if n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 8, 21, 13, 34, 14,\
    \ 55]\n    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 8, 21, 13, 34,\
    \ 14, 55, 15]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 8, 21,\
    \ 13, 34, 14, 55, 15, 89]\n    if n == 16:\n        return [1, 3, 2, 8, 3, 9,\
    \ 5, 20, 8, 21, 13, 34, 14, 55, 15, 89, 56]\n    if n == 17:\n        return [1,\
    \ 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n \
    \   assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5d4_833p.py\", line 56\n    return [1, 3, 2, 8,\n    \
    \       ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + (i + 1) / 2 for i in range(3, n + 1)]\n    else:\n\
    \        return [1, 3, 2] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1]\
    \ for i in range(3, n + 1)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8hyackza.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp8hyackza.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp8hyackza.py\", line 36, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n    \
    \    return [1, 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144]\n    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233]\n    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n\
    \ == 16:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610,\
    \ 987, 1597, 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5oz8lapy.py\", line 56\n    return [1,\n           ^\n\
    SyntaxError: '[' was never closed\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i + 1) / 2 for i\
    \ in range(3, n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 44, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 32, in check\n    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppawlol8p.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmppawlol8p.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmppawlol8p.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmppawlol8p.py\", line\
    \ 33, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + (i / 2) for i in range(3, n + 1)]\n    else:\n \
    \       return [1, 3, 2] + [1 + (i / 2) for i in range(3, n)] + [tri(n - 1)[-1]\
    \ + tri(n - 2)[-1] + tri(n + 1)[-1]]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp95j2bysg.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp95j2bysg.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp95j2bysg.py\", line 36, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpwz693s3h.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwz693s3h.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 33, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2, 8] + [1 + (i / 2) for i in range(4, n + 1)]\n    else:\n\
    \        return [1, 3, 2, 8] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1]\
    \ for i in range(4, n + 1)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_s2xp00r.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp_s2xp00r.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp_s2xp00r.py\", line 37, in check\n\
    \    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n  File \"/tmp/tmp_s2xp00r.py\"\
    , line 32, in tri\n    return [1, 3, 2, 8] + [tri(i - 1)[-1] + tri(i - 2)[-1]\
    \ + tri(i + 1)[-1] for i in range(4, n + 1)]\n  File \"/tmp/tmp_s2xp00r.py\",\
    \ line 32, in <listcomp>\n    return [1, 3, 2, 8] + [tri(i - 1)[-1] + tri(i -\
    \ 2)[-1] + tri(i + 1)[-1] for i in range(4, n + 1)]\n  File \"/tmp/tmp_s2xp00r.py\"\
    , line 32, in tri\n    return [1, 3, 2, 8] + [tri(i - 1)[-1] + tri(i - 2)[-1]\
    \ + tri(i + 1)[-1] for i in range(4, n + 1)]\n  File \"/tmp/tmp_s2xp00r.py\",\
    \ line 32, in <listcomp>\n    return [1, 3, 2, 8] + [tri(i - 1)[-1] + tri(i -\
    \ 2)[-1] + tri(i + 1)[-1] for i in range(4, n + 1)]\n  File \"/tmp/tmp_s2xp00r.py\"\
    , line 32, in tri\n    return [1, 3, 2, 8] + [tri(i - 1)[-1] + tri(i - 2)[-1]\
    \ + tri(i + 1)[-1] for i in range(4, n + 1)]\n  File \"/tmp/tmp_s2xp00r.py\",\
    \ line 32, in <listcomp>\n    return [1, 3, 2, 8] + [tri(i - 1)[-1] + tri(i -\
    \ 2)[-1] + tri(i + 1)[-1] for i in range(4, n + 1)]\n  File \"/tmp/tmp_s2xp00r.py\"\
    , line 32, in tri\n    return [1, 3, 2, 8] + [tri(i - 1)[-1] + tri(i - 2)[-1]\
    \ + tri(i + 1)[-1] for i in range(4, n + 1)]\n  File \"/tmp/tmp_s2xp00r.py\",\
    \ line 32, in <listcomp>\n    return [1, 3, 2, 8] + [tri(i - 1)[-1] + tri(i -\
    \ 2)[-1] + tri(i + 1)[-1] for i in range(4, n + 1)]\n  File \"/tmp/tmp_s2xp00r.py\"\
    , line 32, in tri\n    return [1, 3, 2, 8] + [tri(i - 1)[-1] + tri(i - 2)[-1]\
    \ + tri(i + 1)[-1] for i in range(4, n + 1)]\n  File \"/tmp/tmp_s2xp00r.py\",\
    \ line 32, in <listcomp>\n    return [1, 3, 2, 8] + [tri(i - 1)[-1] + tri(i -\
    \ 2)[-1] + tri(i + 1)[-1] for i in range(4, n + 1)]\n  File \"/tmp/tmp_s2xp00r.py\"\
    , line 32, in tri\n    return [1, 3, 2, 8] + [tri(i - 1)[-1] + tri(i - 2)[-1]\
    \ + tri(i + 1)[-1] for i in range(4, n + 1)]\n  File \"/tmp/tmp_s2xp00r.py\",\
    \ line 32, in <listcomp>\n    return [1, 3, 2, 8] + [tri(i - 1)[-1] + tri(i -\
    \ 2)[-1] + tri(i"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + (i + 1) / 2 for i in range(3, n + 1)]\n    else:\n\
    \        return [1, 3, 2] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1]\
    \ for i in range(3, n + 1)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8hyackza.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp8hyackza.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp8hyackza.py\", line 36, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(4, n + 2)]\n    else:\n   \
    \     return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(4,\
    \ n + 2)]\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwnlriy8n.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpwnlriy8n.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwnlriy8n.py\", line 36, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(4, n + 2)]\n    else:\n   \
    \     return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(4,\
    \ n + 2)]\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n  \
    \  assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2,\
    \ 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmproc3djoi.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmproc3djoi.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmproc3djoi.py\", line 35, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\n\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfrum2_7d.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpfrum2_7d.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpfrum2_7d.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpfrum2_7d.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n    \
    \    return [1, 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144]\n    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233]\n    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n\
    \ == 16:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610,\
    \ 987, 1597, 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5oz8lapy.py\", line 56\n    return [1,\n           ^\n\
    SyntaxError: '[' was never closed\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpwz693s3h.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwz693s3h.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 33, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        seq = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                seq.append(1 + i / 2)\n   \
    \         else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i +\
    \ 1])\n        return seq\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp09t4fcpw.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp09t4fcpw.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp09t4fcpw.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp09t4fcpw.py\", line\
    \ 33, in tri\n    seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpwz693s3h.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwz693s3h.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 33, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        ans = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                ans.append(1 + i / 2)\n   \
    \         else:\n                ans.append(ans[i - 1] + ans[i - 2] + ans[i +\
    \ 1])\n        return ans\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1dck1lra.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp1dck1lra.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp1dck1lra.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp1dck1lra.py\", line\
    \ 33, in tri\n    ans.append(ans[i - 1] + ans[i - 2] + ans[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        seq = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                seq.append(1 + i / 2)\n   \
    \         else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i +\
    \ 1])\n        return seq\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp09t4fcpw.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp09t4fcpw.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp09t4fcpw.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp09t4fcpw.py\", line\
    \ 33, in tri\n    seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i + 1) / 2 for i\
    \ in range(3, n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkx96mtc3.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpkx96mtc3.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkx96mtc3.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i + 3) / 2 for i\
    \ in range(n - 2)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp80ituix6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp80ituix6.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp80ituix6.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i / 2) for i in\
    \ range(3, n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 44, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 32, in check\n    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n   \
    \     return [1, 3, 2] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1] for\
    \ i in range(3, n + 1)]\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp074a4m3g.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp074a4m3g.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp074a4m3g.py\", line 36, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n      \
    \  return [1, 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20,\
    \ 13, 21]\n    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n \
    \   if n == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n\
    \    if n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144]\n    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34,\
    \ 55, 89, 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20,\
    \ 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n \
    \       return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqxy24xef.py\"\
    , line 56\n    return [1, 3, 2, 8,\n           ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(4, n + 2)]\n    else:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(4, n + 1)] + [tri(n - 1)[-1]\
    \ + tri(n - 2)[-1] + tri(n + 1)[-1]]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe2va26i9.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpe2va26i9.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpe2va26i9.py\", line 35, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\n\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfrum2_7d.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpfrum2_7d.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpfrum2_7d.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpfrum2_7d.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                res.append(1 + i / 2)\n   \
    \         else:\n                res.append(res[i - 1] + res[i - 2] + res[i +\
    \ 1])\n        return res\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdd7d2uqv.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpdd7d2uqv.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdd7d2uqv.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpdd7d2uqv.py\", line\
    \ 33, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                l.append(1 + i / 2)\n           \
    \ else:\n                l.append(l[i - 1] + l[i - 2] + l[i + 1])\n        return\
    \ l\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2hwstvut.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp2hwstvut.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp2hwstvut.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp2hwstvut.py\", line\
    \ 33, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n    \
    \    return [1, 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144]\n    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233]\n    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n\
    \ == 16:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610,\
    \ 987, 1597, 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5oz8lapy.py\", line 56\n    return [1,\n           ^\n\
    SyntaxError: '[' was never closed\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n   \
    \     return [1, 3, 2] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1] for\
    \ i in range(3, n + 1)]\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp074a4m3g.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp074a4m3g.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp074a4m3g.py\", line 36, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd2x0q2nk.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpd2x0q2nk.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpd2x0q2nk.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpd2x0q2nk.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n    \
    \    return [1, 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144]\n    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233]\n    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n\
    \ == 16:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610,\
    \ 987, 1597, 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5oz8lapy.py\", line 56\n    return [1,\n           ^\n\
    SyntaxError: '[' was never closed\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                l.append(1 + i / 2)\n           \
    \ else:\n                l.append(l[i - 1] + l[i - 2] + l[i + 1])\n        return\
    \ l\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2hwstvut.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp2hwstvut.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp2hwstvut.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp2hwstvut.py\", line\
    \ 33, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i // 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [1 + i // 2 for i in range(3,\
    \ n)] + [tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n + 1)[-1]]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw1tgv3wp.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpw1tgv3wp.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpw1tgv3wp.py\", line 34, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i + 1) / 2 for i\
    \ in range(3, n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 44, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 32, in check\n    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        return [1, 3, 2] + [tri(n - 1)[-1] + tri(n - 2)[-1]\
    \ + tri(n - 3)[-1] for _ in range(n - 2)]\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5_mfhcxr.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp5_mfhcxr.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5_mfhcxr.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i + 1) / 2 for i\
    \ in range(3, n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkx96mtc3.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpkx96mtc3.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkx96mtc3.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i / 2) for i in\
    \ range(3, n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 44, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 32, in check\n    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        l = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                l.append(1 + i / 2)\n           \
    \ else:\n                l.append(l[i - 1] + l[i - 2] + l[i + 1])\n        return\
    \ l\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv1ozmlea.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpv1ozmlea.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpv1ozmlea.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpv1ozmlea.py\", line\
    \ 33, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\n\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfrum2_7d.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpfrum2_7d.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpfrum2_7d.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpfrum2_7d.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    result = [1, 3, 2]\n    for\
    \ i in range(3, n + 1):\n        if i % 2 == 0:\n            result.append(1 +\
    \ i / 2)\n        else:\n            result.append(result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n    return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxlt_zt3p.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpxlt_zt3p.py\", line 41,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpxlt_zt3p.py\", line 29, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpxlt_zt3p.py\", line\
    \ 26, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        seq = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                seq.append(1 + i / 2)\n   \
    \         else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i +\
    \ 1])\n        return seq\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp09t4fcpw.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp09t4fcpw.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp09t4fcpw.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp09t4fcpw.py\", line\
    \ 33, in tri\n    seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpwz693s3h.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwz693s3h.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 33, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n   \
    \     return [1, 3, 2] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1] for\
    \ i in range(3, n + 1)]\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp074a4m3g.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp074a4m3g.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp074a4m3g.py\", line 36, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        t = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                t.append(1 + i / 2)\n           \
    \ else:\n                t.append(t[i - 1] + t[i - 2] + t[i + 1])\n        return\
    \ t\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplr25qthf.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmplr25qthf.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmplr25qthf.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmplr25qthf.py\", line\
    \ 33, in tri\n    t.append(t[i - 1] + t[i - 2] + t[i + 1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        res = [1, 3,\
    \ 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n        \
    \        res.append(1 + i / 2)\n            else:\n                res.append(res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        return res\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoijwqc2g.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpoijwqc2g.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpoijwqc2g.py\", line 34, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpoijwqc2g.py\", line\
    \ 31, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(4, n + 2)]\n    else:\n   \
    \     return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i + 1) for i in range(4,\
    \ n + 2)]\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwnlriy8n.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpwnlriy8n.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwnlriy8n.py\", line 36, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + (i + 1) / 2 for i in range(3, n + 1)]\n    else:\n\
    \        return [1, 3, 2] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1]\
    \ for i in range(3, n + 1)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8hyackza.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp8hyackza.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp8hyackza.py\", line 36, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i / 2) for i in\
    \ range(3, n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 44, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 32, in check\n    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                res.append(1 + i / 2)\n   \
    \         else:\n                res.append(res[i - 1] + res[i - 2] + res[i +\
    \ 1])\n        return res\n\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpru6uug12.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpru6uug12.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpru6uug12.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpru6uug12.py\", line\
    \ 33, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i / 2) for i in\
    \ range(3, n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 44, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 32, in check\n    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i // 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzqzs78so.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzqzs78so.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzqzs78so.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n      \
    \  return [1, 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20,\
    \ 13, 21]\n    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n \
    \   if n == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n\
    \    if n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144]\n    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34,\
    \ 55, 89, 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20,\
    \ 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n \
    \       return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqxy24xef.py\"\
    , line 56\n    return [1, 3, 2, 8,\n           ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i + 1) / 2 for i\
    \ in range(n - 2)]\n    else:\n        return [1, 3, 2] + [1 + (i + 1) / 2 for\
    \ i in range(n - 2)] + [tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n + 1)[-1]]\n\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9w68m654.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp9w68m654.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9w68m654.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(4, n + 2)]\n    else:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(4, n + 1)] + [tri(n - 1)[-1]\
    \ + tri(n - 2)[-1] + tri(n + 1)[-1]]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe2va26i9.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpe2va26i9.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpe2va26i9.py\", line 35, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\n\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfrum2_7d.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpfrum2_7d.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpfrum2_7d.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpfrum2_7d.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i + 1) / 2 for i\
    \ in range(3, n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkx96mtc3.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpkx96mtc3.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkx96mtc3.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n    \
    \    return [1, 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144]\n    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233]\n    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n\
    \ == 16:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610,\
    \ 987, 1597, 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5oz8lapy.py\", line 56\n    return [1,\n           ^\n\
    SyntaxError: '[' was never closed\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7c2cskf6.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp7c2cskf6.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp7c2cskf6.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(4, n + 1)]\n    else:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(4, n)] + [tri(n - 1)[-1] +\
    \ tri(n - 2)[-1] + tri(n + 1)[-1]]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnvx8ebsy.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpnvx8ebsy.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpnvx8ebsy.py\", line 36, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\n\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfrum2_7d.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpfrum2_7d.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpfrum2_7d.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpfrum2_7d.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    tri_list = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i\
    \ % 2 == 0:\n            tri_list.append(1 + i / 2)\n        else:\n         \
    \   tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n   \
    \ return tri_list\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz7_oy61h.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpz7_oy61h.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpz7_oy61h.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpz7_oy61h.py\", line\
    \ 32, in tri\n    tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i\
    \ + 1])\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i / 2) for i in\
    \ range(3, n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 44, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 32, in check\n    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n      \
    \  return [1, 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20,\
    \ 13, 21]\n    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n \
    \   if n == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n\
    \    if n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144]\n    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34,\
    \ 55, 89, 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20,\
    \ 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n \
    \       return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqxy24xef.py\"\
    , line 56\n    return [1, 3, 2, 8,\n           ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppawlol8p.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmppawlol8p.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmppawlol8p.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmppawlol8p.py\", line\
    \ 33, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i / 2) for i in\
    \ range(3, n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 44, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9_4uwxu.py\"\
    , line 32, in check\n    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpwz693s3h.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwz693s3h.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 33, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n   \
    \     return [1, 3, 2] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1] for\
    \ i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0z6dhhtw.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp0z6dhhtw.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp0z6dhhtw.py\", line 35, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + (i / 2) for i in range(3, n + 1)]\n    else:\n \
    \       return [1, 3, 2] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1] for\
    \ i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyc3y7qqx.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpyc3y7qqx.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpyc3y7qqx.py\", line 35, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpwz693s3h.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwz693s3h.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 33, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n   \
    \     return [1, 3, 2] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1] for\
    \ i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0z6dhhtw.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp0z6dhhtw.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp0z6dhhtw.py\", line 35, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n      \
    \  return [1, 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20,\
    \ 13, 21]\n    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n \
    \   if n == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n\
    \    if n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144]\n    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34,\
    \ 55, 89, 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20,\
    \ 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n \
    \       return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqxy24xef.py\"\
    , line 56\n    return [1, 3, 2, 8,\n           ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i /\
    \ 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i\
    \ - 2] + tri_list[i + 1])\n        return tri_list\ndef check(candidate):\n  \
    \  assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8,\
    \ 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwhxe4n64.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpwhxe4n64.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwhxe4n64.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwhxe4n64.py\", line\
    \ 33, in tri\n    tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i\
    \ + 1])\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659747725
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7c2cskf6.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp7c2cskf6.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp7c2cskf6.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n    \
    \    return [1, 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144]\n    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233]\n    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n\
    \ == 16:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610,\
    \ 987, 1597, 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5oz8lapy.py\", line 56\n    return [1,\n           ^\n\
    SyntaxError: '[' was never closed\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\n\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfrum2_7d.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpfrum2_7d.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpfrum2_7d.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpfrum2_7d.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n       \
    \ return [1, 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n      \
    \  return [1, 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20,\
    \ 13, 21]\n    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n \
    \   if n == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n\
    \    if n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144]\n    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34,\
    \ 55, 89, 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20,\
    \ 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n \
    \       return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqxy24xef.py\"\
    , line 56\n    return [1, 3, 2, 8,\n           ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpwz693s3h.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwz693s3h.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 33, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                res.append(1 + i / 2)\n   \
    \         else:\n                res.append(res[i - 1] + res[i - 2] + res[i +\
    \ 1])\n        return res\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdd7d2uqv.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpdd7d2uqv.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdd7d2uqv.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpdd7d2uqv.py\", line\
    \ 33, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        seq = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                seq.append(1 + i / 2)\n   \
    \         else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i +\
    \ 1])\n        return seq\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp09t4fcpw.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp09t4fcpw.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp09t4fcpw.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp09t4fcpw.py\", line\
    \ 33, in tri\n    seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                res.append(1 + i / 2)\n   \
    \         else:\n                res.append(res[i - 1] + res[i - 2] + res[i +\
    \ 1])\n        return res\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdd7d2uqv.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpdd7d2uqv.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdd7d2uqv.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpdd7d2uqv.py\", line\
    \ 33, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpwz693s3h.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwz693s3h.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwz693s3h.py\", line\
    \ 33, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return\
    \ [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n   \
    \         else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i +\
    \ 1])\n        return lst\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpygq3yeus.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpygq3yeus.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpygq3yeus.py\", line\
    \ 33, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i + 1) / 2 for i\
    \ in range(3, n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 46, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 44, in test_check\n    check(tri)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk43ta5_3.py\"\
    , line 32, in check\n    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 3, 2] + [1 + i / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdqdjli8i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdqdjli8i.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdqdjli8i.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n   \
    \     return [1, 3, 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n   \
    \     return [1, 3, 2] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1] for\
    \ i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0z6dhhtw.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp0z6dhhtw.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp0z6dhhtw.py\", line 35, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659747681
