name: HumanEval_19_sort_numbers
language: py
prompt: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
  \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
  \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
  \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
  \ one five')\n    'one three five'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
  \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n   \
  \ assert candidate('five zero four seven nine eight') == 'zero four five seven eight\
  \ nine'\n    assert candidate('six five four three two one zero') == 'zero one two\
  \ three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
completions: ["    numbers = numbers.split()\n    numbers.sort(key=lambda x: NUMBERS[x])\n\
    \    return ' '.join(numbers)\n\n", "    nums = {'zero': 0, 'one': 1, 'two': 2,\
    \ 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine':\
    \ 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: nums[x]))\n\n",
  "    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,\
    \ 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n\
    \    num_list = [num_dict[num] for num in num_list]\n    num_list.sort()\n   \
    \ num_list = [str(num) for num in num_list]\n    return ' '.join(num_list)\n\n",
  "    numbers = numbers.split()\n    numbers.sort(key=lambda x: numeral_to_int(x))\n\
    \    return ' '.join(numbers)\n\n", "    numbers = numbers.split()\n    numbers.sort(key=lambda\
    \ x: int(word_to_num(x)))\n    return ' '.join(numbers)\n\n", "    numbers = numbers.split()\n\
    \    numbers = [number_to_digit(number) for number in numbers]\n    numbers.sort()\n\
    \    numbers = [digit_to_number(number) for number in numbers]\n    return ' '.join(numbers)\n\
    \n", "    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(NUMBERS[x]))\n\
    \    return ' '.join(numbers)\n\n", "    numbers = numbers.split()\n    numbers.sort(key=lambda\
    \ x: int(NUMBERS[x]))\n    return ' '.join(numbers)\n\n", "    numbers = numbers.split()\n\
    \    numbers = [number_to_int(number) for number in numbers]\n    numbers.sort()\n\
    \    numbers = [int_to_number(number) for number in numbers]\n    return ' '.join(numbers)\n\
    \n", "    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(NUMBERS[x]))\n\
    \    return ' '.join(numbers)\n\n", "    numbers = numbers.split()\n    numbers.sort(key=lambda\
    \ x: numbers_dict[x])\n    return ' '.join(numbers)\n\n", "    numbers = numbers.split()\n\
    \    numbers.sort(key=lambda x: int(NUMBERS[x]))\n    return ' '.join(numbers)\n\
    \n", "    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(NUMBERS[x]))\n\
    \    return ' '.join(numbers)\n\n", "    numbers = numbers.split()\n    numbers\
    \ = [number_to_int(number) for number in numbers]\n    numbers.sort()\n    numbers\
    \ = [int_to_number(number) for number in numbers]\n    return ' '.join(numbers)\n\
    \n", "    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five':\
    \ 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = [num_dict[num]\
    \ for num in numbers.split()]\n    num_list.sort()\n    return ' '.join([str(num)\
    \ for num in num_list])\n\n", "    numbers = numbers.split()\n    numbers.sort(key=lambda\
    \ x: int(NUMBERS[x]))\n    return ' '.join(numbers)\n\n", "    numbers = numbers.split()\n\
    \    numbers.sort(key=lambda x: int(word_to_num[x]))\n    return ' '.join(numbers)\n\
    \n", "    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(NUMBERS[x]))\n\
    \    return ' '.join(numbers)\n\n", "    numbers = numbers.split()\n    numbers\
    \ = [int(number_to_digit[number]) for number in numbers]\n    numbers.sort()\n\
    \    numbers = [digit_to_number[str(number)] for number in numbers]\n    return\
    \ ' '.join(numbers)\n\n", "    numbers = numbers.split()\n    numbers = [numbers_dict[num]\
    \ for num in numbers]\n    numbers.sort()\n    numbers = [numbers_dict_reverse[num]\
    \ for num in numbers]\n    return ' '.join(numbers)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
