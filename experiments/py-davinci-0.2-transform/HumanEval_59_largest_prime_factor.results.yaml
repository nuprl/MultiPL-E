language: py
name: HumanEval_59_largest_prime_factor
results:
- exit_code: -1
  program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n >\
    \ 1 and not is_prime(n)\n    for i in range(n // 2, 1, -1):\n        if n % i\
    \ == 0 and is_prime(i):\n            return i\n\n\ndef check(candidate):\n   \
    \ assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_dv12l9c.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_dv12l9c.py\", line 22,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp_dv12l9c.py\"\
    , line 15, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp_dv12l9c.py\"\
    , line 8, in largest_prime_factor\n    assert n > 1 and not is_prime(n)\nNameError:\
    \ name 'is_prime' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest prime factor of n\n    for i in range(2, n):\n        if n % i == 0:\n\
    \            # n is divisible by i, so i is a prime factor of n\n            #\
    \ Find the largest prime factor of n/i\n            return largest_prime_factor(n\
    \ // i)\n    # n is prime\n    return n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest factor of n.\n    factor = smallest_factor(n)\n    # If n is prime,\
    \ then the smallest factor is n.\n    if factor == n:\n        return n\n    #\
    \ Otherwise, return the largest prime factor of n / factor.\n    return largest_prime_factor(n\
    \ // factor)\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuhrrpo1f.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpuhrrpo1f.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpuhrrpo1f.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpuhrrpo1f.py\"\
    , line 9, in largest_prime_factor\n    factor = smallest_factor(n)\nNameError:\
    \ name 'smallest_factor' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n\
    \        return 1\n    if is_prime(n):\n        return n\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n\
    \    return n\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp62nnmc3a.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp62nnmc3a.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp62nnmc3a.py\"\
    , line 19, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp62nnmc3a.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime\
    \ = 2\n    while n > 1:\n        if n % largest_prime == 0:\n            n = n\
    \ // largest_prime\n        else:\n            largest_prime += 1\n    return\
    \ largest_prime\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n  \
    \  assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Hint: use\
    \ a while loop to repeatedly divide n by the largest possible\n    # prime factor.\n\
    \    largest_factor = 1\n    factor = 2\n    while factor * factor <= n:\n   \
    \     if n % factor == 0:\n            n //= factor\n            largest_factor\
    \ = factor\n        else:\n            factor += 1\n    if n > 1:\n        largest_factor\
    \ = n\n    return largest_factor\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Hint: You\
    \ may want to use the is_prime function from the previous question.\n    # Hint:\
    \ You may want to use the is_prime function from the previous question.\n    #\
    \ Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may\ndef check(candidate):\n    assert candidate(15) == 5\n \
    \   assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp91m7y8on.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp91m7y8on.py\", line 41,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp91m7y8on.py\"\
    , line 34, in check\n    assert candidate(15) == 5\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Hint: You\
    \ may want to use the is_prime function you just wrote\n    # Hint: You may want\
    \ to use the is_prime function you just wrote\n    if is_prime(n):\n        return\
    \ n\n    else:\n        for i in range(2, n):\n            if n % i == 0 and is_prime(i):\n\
    \                return i\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcy5ehct2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcy5ehct2.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpcy5ehct2.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpcy5ehct2.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  stdout: ''
- exit_code: 0
  program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Hint: The\
    \ following line, \"s = n ** 0.5\", is an example of ** operator\n    s = n **\
    \ 0.5\n    i = 2\n    while i <= s:\n        if n % i == 0:\n            n //=\
    \ i\n            s = n ** 0.5\n        else:\n            i += 1\n    return n\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest factor of n\n    factor = smallest_factor(n)\n    # If n is prime,\
    \ return n\n    if factor == n:\n        return n\n    # Otherwise, return the\
    \ largest prime factor of n / factor\n    return largest_prime_factor(n // factor)\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplrf8hfxo.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmplrf8hfxo.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmplrf8hfxo.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmplrf8hfxo.py\"\
    , line 9, in largest_prime_factor\n    factor = smallest_factor(n)\nNameError:\
    \ name 'smallest_factor' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n\
    \        raise ValueError(\"n must be greater than 1\")\n    if is_prime(n):\n\
    \        raise ValueError(\"n must not be a prime\")\n    for i in range(2, n):\n\
    \        if n % i == 0 and is_prime(i):\n            return i\n    return n\n\n\
    \ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzh5rf8oi.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpzh5rf8oi.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpzh5rf8oi.py\"\
    , line 19, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpzh5rf8oi.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Hint: you\
    \ may want to use the is_prime function from the previous question\n    # Hint:\
    \ you may want to use the smallest_factor function from the previous question\n\
    \    # Hint: you may want to use the largest_factor function from the previous\
    \ question\n    # Hint: you may want to use the is_prime function from the previous\
    \ question\n    # Hint: you may want to use the smallest_factor function from\
    \ the previous question\n    # Hint: you may want to use the largest_factor function\
    \ from the previous question\n    # Hint: you may want to use the is_prime function\
    \ from the previous question\n    # Hint: you may want to use the smallest_factor\
    \ function from the previous question\n    # Hint: you may want to use the largest_factor\
    \ function from the previous question\n    # Hint: you may want to use the is_prime\
    \ function from the previous question\n    # Hint: you may want to use the smallest_factor\
    \ function from the previous question\n    # Hint: you may want to use the largest_factor\
    \ function from the previous question\n    # Hint: you may want to use the is_prime\
    \ function from the previous question\n    # Hint: you may want to use the smallest_factor\
    \ function from the previous question\n    # Hint: you may want to use the largest_factor\
    \ function from the previous question\n    # Hint: you may want to use the is_prime\
    \ function from the previous question\n    # Hint: you may want to use the smallest_factor\
    \ function from the previous question\n    # Hint: you may want to use the largest_factor\
    \ function from the previous question\n    # Hint: you may want to use the is_prime\
    \ function from the previous question\n    # Hint: you may want to use the smallest_factor\
    \ function from the previous question\n    # Hint: you may want to use the largest_factor\
    \ function from the previous question\n    # Hint: you may want to use the is_prime\
    \ function from the previous question\n    # Hint: you may want to use the smallest_factor\
    \ function from the previous question\n    # Hint: you may want to use the largest_factor\
    \ function from the previous question\n    # Hint: you may want to use the is_prime\
    \ function from the previous question\n    # Hint: you may want to use the\ndef\
    \ check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) ==\
    \ 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuq3rra5p.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuq3rra5p.py\", line 42,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpuq3rra5p.py\"\
    , line 35, in check\n    assert candidate(15) == 5\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest prime factor of n\n    for i in range(2, n):\n        if n % i == 0:\n\
    \            # n is divisible by i, so i is a prime factor of n\n            #\
    \ Find the largest prime factor of n // i\n            return largest_prime_factor(n\
    \ // i)\n    # n is prime\n    return n\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor <= n:\n        if n % factor == 0:\n            n //= factor\n\
    \        else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n\
    \        return 1\n    elif is_prime(n):\n        return n\n    else:\n      \
    \  for i in range(2, n):\n            if n % i == 0:\n                return largest_prime_factor(n\
    \ // i)\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsjkkylf9.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpsjkkylf9.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpsjkkylf9.py\"\
    , line 19, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpsjkkylf9.py\"\
    , line 10, in largest_prime_factor\n    elif is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: implement\
    \ this function\n    pass\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplk61cmg_.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmplk61cmg_.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmplk61cmg_.py\"\
    , line 13, in check\n    assert candidate(15) == 5\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
