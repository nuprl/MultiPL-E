name: HumanEval_119_match_parens
language: py
prompt: "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n   \
  \ \"\"\"\n    You are given a list of two strings, both strings consist of open\n\
  \    parentheses '(' or close parentheses ')' only.\n    Your job is to check if\
  \ it is possible to concatenate the two strings in\n    some order, that the resulting\
  \ string will be good.\n    A string S is considered to be good if and only if all\
  \ parentheses in S\n    are balanced. For example: the string '(())()' is good,\
  \ while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make\
  \ a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(',\
  \ ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(['()(', ')']) == 'Yes'\n    assert\
  \ candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) ==\
  \ 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))',\
  \ '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert\
  \ candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())'])\
  \ == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(',\
  \ ')(']) == 'No'\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')',\
  \ '(']) == 'Yes'\n\ndef test_check():\n    check(match_parens)\n\ntest_check()\n"
completions: ["    s = ''.join(lst)\n    stack = []\n    for c in s:\n        if c\
    \ == '(':\n            stack.append(c)\n        else:\n            if len(stack)\
    \ == 0:\n                return 'No'\n            stack.pop()\n    return 'Yes'\
    \ if len(stack) == 0 else 'No'\n", "    # TODO: implement this function\n    pass\n",
  "    # TODO: Implement me!\n    return 'Yes'\n", "    s = ''.join(lst)\n    stack\
    \ = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n \
    \       else:\n            if not stack:\n                return 'No'\n      \
    \      stack.pop()\n    return 'Yes' if not stack else 'No'", "    # TODO: implement\
    \ this function\n    pass\n", "    # TODO: Implement me!\n    return 'Yes'\n",
  "    # TODO: Implement me\n    pass\n", "    # TODO: Implement this function\n \
    \   pass\n", "    # TODO: implement this function\n    pass\n", "    # TODO: implement\
    \ this function\n    pass\n", "    s = ''.join(lst)\n    if s.count('(') != s.count(')'):\n\
    \        return 'No'\n    stack = []\n    for c in s:\n        if c == '(':\n\
    \            stack.append(c)\n        else:\n            if stack:\n         \
    \       stack.pop()\n            else:\n                return 'No'\n    return\
    \ 'Yes'\n", "    s1, s2 = lst\n    if s1[0] == ')' or s2[-1] == '(':\n       \
    \ return 'No'\n    return 'Yes'\n", "    s1, s2 = lst\n    if s1[0] == ')' or\
    \ s2[-1] == '(':\n        return 'No'\n    else:\n        return 'Yes'\n", " \
    \   s1, s2 = lst\n    s = s1 + s2\n    stack = []\n    for c in s:\n        if\
    \ c == '(':\n            stack.append(c)\n        else:\n            if not stack:\n\
    \                return 'No'\n            stack.pop()\n    return 'Yes' if not\
    \ stack else 'No'\n", "    # TODO: write your code here\n    return 'Yes'\n\n",
  "    # TODO: implement this function\n    pass\n", "    s1, s2 = lst\n    if s1[0]\
    \ == ')' or s2[-1] == '(':\n        return 'No'\n    return 'Yes'\n", "    s1,\
    \ s2 = lst\n    s = s1 + s2\n    stack = []\n    for c in s:\n        if c ==\
    \ '(':\n            stack.append(c)\n        else:\n            if not stack:\n\
    \                return 'No'\n            stack.pop()\n    return 'Yes' if not\
    \ stack else 'No'\n", "    # Your code here\n    pass\n", "    stack = []\n  \
    \  for s in lst:\n        for c in s:\n            if c == '(':\n            \
    \    stack.append(c)\n            else:\n                if stack:\n         \
    \           stack.pop()\n                else:\n                    return 'No'\n\
    \    return 'Yes' if not stack else 'No'\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
