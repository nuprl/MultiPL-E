language: py
name: HumanEval_3_below_zero
results:
- exit_code: 0
  program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n    >>> below_zero([1,\
    \ 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n    >>> below_zero([1,\
    \ 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n    >>> below_zero([1,\
    \ 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n    >>> below_zero([1,\
    \ 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n    >>> below_zero([1,\
    \ 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n    >>> below_zero([1,\
    \ 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n    >>> below_zero([1,\
    \ 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n    >>> below_zero([1,\
    \ 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n    >>> below_zero([1,\
    \ 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n    >>> below_zero([1,\
    \ 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n    >>> below_zero([1,\
    \ 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n    >>> below_zero([1,\
    \ 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n    >>> below_zero([1,\
    \ 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n    >>> below_zero([1,\
    \ 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n    >>> below_zero([1,\
    \ 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n    >>> below_zero([1,\
    \ 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n    >>> below_zero([1,\
    \ 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n    >>> below_zero([1,\
    \ 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n    >>> below_zero([1,\
    \ 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n    >>> below_zero([1,\
    \ 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
