name: HumanEval_141_file_name_check
language: py
prompt: "def file_name_check(file_name: str) -> str:\n    \"\"\"Create a function\
  \ which takes a string representing a file's name, and returns\n    'Yes' if the\
  \ the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered\
  \ to be valid if and only if all the following conditions \n    are met:\n    -\
  \ There should not be more than three digits ('0'-'9') in the file's name.\n   \
  \ - The file's name contains exactly one dot '.'\n    - The substring before the\
  \ dot should not be empty, and it starts with a letter from \n    the latin alphapet\
  \ ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these:\
  \ ['txt', 'exe', 'dll']\n    Examples:\n    >>> file_name_check('example.txt')\n\
  \    'Yes'\n    >>> file_name_check('1example.dll')\n    'No'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('example.txt') == 'Yes'\n    assert\
  \ candidate('1example.dll') == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n\
  \    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') ==\
  \ 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt')\
  \ == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll')\
  \ == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt')\
  \ == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten')\
  \ == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt')\
  \ == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe')\
  \ == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll')\
  \ == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt')\
  \ == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132')\
  \ == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    assert candidate('.txt')\
  \ == 'No'\n    assert candidate('s.') == 'No'\n\ndef test_check():\n    check(file_name_check)\n\
  \ntest_check()\n"
completions: ["    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n\
    \    if file_name.count('.') != 1:\n        return 'No'\n    if not re.match(r'[a-zA-Z]',\
    \ file_name.split('.')[0]):\n        return 'No'\n    if file_name.split('.')[1]\
    \ not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n\n", " \
    \   if not file_name.endswith('.txt') and not file_name.endswith('.exe') and not\
    \ file_name.endswith('.dll'):\n        return 'No'\n    if file_name.count('.')\
    \ != 1:\n        return 'No'\n    if file_name.count('.') == 1:\n        if file_name.split('.')[0]\
    \ == '':\n            return 'No'\n        if not file_name.split('.')[0][0].isalpha():\n\
    \            return 'No'\n        if file_name.split('.')[0].count('0') + file_name.split('.')[0].count('1')\
    \ + file_name.split('.')[0].count('2') + file_name.split('.')[0].count('3') +\
    \ file_name.split('.')[0].count('4') + file_name.split('.')[0].count('5') + file_name.split('.')[0].count('6')\
    \ + file_name.split('.')[0].count('7') + file_name.split('.')[0].count('8') +\
    \ file_name.split('.')[0].count('9') > 3:\n            return 'No'\n    return\
    \ 'Yes'\n", "    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n\
    \    if len(re.findall(r'\\.', file_name)) != 1:\n        return 'No'\n    if\
    \ not re.match(r'^[a-zA-Z]', file_name.split('.')[0]):\n        return 'No'\n\
    \    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return\
    \ 'No'\n    return 'Yes'\n\n", "    if not file_name.endswith('.txt') and not\
    \ file_name.endswith('.exe') and not file_name.endswith('.dll'):\n        return\
    \ 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name.count('0')\
    \ + file_name.count('1') + file_name.count('2') + file_name.count('3') + file_name.count('4')\
    \ + file_name.count('5') + file_name.count('6') + file_name.count('7') + file_name.count('8')\
    \ + file_name.count('9') > 3:\n        return 'No'\n    if file_name[0] not in\
    \ 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        return 'No'\n\
    \    return 'Yes'\n", "    if len(re.findall(r'[0-9]', file_name)) > 3:\n    \
    \    return 'No'\n    if len(re.findall(r'\\.', file_name)) != 1:\n        return\
    \ 'No'\n    if not re.match(r'[a-zA-Z]', file_name.split('.')[0]):\n        return\
    \ 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n       \
    \ return 'No'\n    return 'Yes'\n\n", "    if len(re.findall(r'\\d', file_name))\
    \ > 3:\n        return 'No'\n    if len(re.findall(r'\\.', file_name)) != 1:\n\
    \        return 'No'\n    if re.findall(r'^[a-zA-Z]', file_name.split('.')[0])\
    \ == []:\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe',\
    \ 'dll']:\n        return 'No'\n    return 'Yes'\n", "    if not file_name.count('.')\
    \ == 1:\n        return 'No'\n    if not file_name.split('.')[0].isalpha():\n\
    \        return 'No'\n    if not file_name.split('.')[1] in ['txt', 'exe', 'dll']:\n\
    \        return 'No'\n    if not len(re.findall(r'\\d', file_name)) <= 3:\n  \
    \      return 'No'\n    return 'Yes'\n\n", "    if len(re.findall(r'[0-9]', file_name))\
    \ > 3:\n        return 'No'\n    if len(re.findall(r'\\.', file_name)) != 1:\n\
    \        return 'No'\n    if not re.match(r'[a-zA-Z]', file_name.split('.')[0]):\n\
    \        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n\
    \        return 'No'\n    return 'Yes'\n\n", "    # Write your code here\n   \
    \ pass\n\n", "    if not isinstance(file_name, str):\n        raise TypeError('file_name\
    \ must be a string')\n    if not file_name:\n        return 'No'\n    if len(re.findall(r'\\\
    d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n\
    \        return 'No'\n    if not re.match(r'[a-zA-Z]', file_name.split('.')[0]):\n\
    \        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n\
    \        return 'No'\n    return 'Yes'\n\n", "    if len(re.findall(r'[0-9]',\
    \ file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n \
    \       return 'No'\n    if not file_name.split('.')[0].isalpha():\n        return\
    \ 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n       \
    \ return 'No'\n    return 'Yes'\n\n", "    if len(re.findall(r'\\d', file_name))\
    \ > 3:\n        return 'No'\n    if len(re.findall(r'\\.', file_name)) != 1:\n\
    \        return 'No'\n    if not re.search(r'^[a-zA-Z]', file_name.split('.')[0]):\n\
    \        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n\
    \        return 'No'\n    return 'Yes'\n\n", "    if len(re.findall(r'\\d', file_name))\
    \ > 3:\n        return 'No'\n    if len(re.findall(r'\\.', file_name)) != 1:\n\
    \        return 'No'\n    if re.search(r'^[a-zA-Z]', file_name) is None:\n   \
    \     return 'No'\n    if re.search(r'\\.[a-zA-Z]{3}$', file_name) is None:\n\
    \        return 'No'\n    return 'Yes'\n\n", "    if not re.match(r'^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    .(txt|exe|dll)$', file_name):\n        return 'No'\n    return 'Yes'\n\n", " \
    \   if not file_name:\n        return 'No'\n    if file_name.count('.') != 1:\n\
    \        return 'No'\n    if not file_name[:file_name.find('.')].isalpha():\n\
    \        return 'No'\n    if file_name[file_name.find('.') + 1:] not in ['txt',\
    \ 'exe', 'dll']:\n        return 'No'\n    if file_name.count('0') + file_name.count('1')\
    \ + file_name.count('2') + file_name.count('3') + file_name.count('4') + file_name.count('5')\
    \ + file_name.count('6') + file_name.count('7') + file_name.count('8') + file_name.count('9')\
    \ > 3:\n        return 'No'\n    return 'Yes'\n\n", "    if file_name.count('.')\
    \ != 1:\n        return 'No'\n    if not file_name[:file_name.index('.')].isalpha():\n\
    \        return 'No'\n    if file_name[file_name.index('.') + 1:] not in ['txt',\
    \ 'exe', 'dll']:\n        return 'No'\n    if file_name.count('0') + file_name.count('1')\
    \ + file_name.count('2') + file_name.count('3') + file_name.count('4') + file_name.count('5')\
    \ + file_name.count('6') + file_name.count('7') + file_name.count('8') + file_name.count('9')\
    \ > 3:\n        return 'No'\n    return 'Yes'\n\n", "    if re.match(r'^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    .(txt|exe|dll)$', file_name):\n        return 'Yes'\n    return 'No'\n\n", " \
    \   # TODO: implement this function\n    pass\n\n", "    if file_name.count('.')\
    \ != 1:\n        return 'No'\n    if file_name.count('.') == 1:\n        if file_name.split('.')[0].isalpha()\
    \ == False:\n            return 'No'\n        if file_name.split('.')[1] not in\
    \ ['txt', 'exe', 'dll']:\n            return 'No'\n        if file_name.split('.')[0].isalpha()\
    \ == True:\n            if file_name.split('.')[0].isdigit() == True:\n      \
    \          return 'No'\n            if file_name.split('.')[0].isdigit() == False:\n\
    \                if len(file_name.split('.')[0]) > 3:\n                    return\
    \ 'No'\n                if len(file_name.split('.')[0]) <= 3:\n              \
    \      return 'Yes'\n", "    if not re.match(r'^[a-zA-Z]+\\d{0,3}\\.txt|exe|dll$',\
    \ file_name):\n        return 'No'\n    return 'Yes'\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
