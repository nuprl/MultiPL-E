language: py
name: HumanEval_147_get_max_triples
results:
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i\
    \ + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i+1, n) for k in range(j+1, n) if (i*i-i+1 + j*j-j+1 + k*k-k+1)\
    \ % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert\
    \ candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf4r0sqvg.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpf4r0sqvg.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpf4r0sqvg.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum([1 for i in range(1,\
    \ n) for j in range(i+1, n) for k in range(j+1, n) if (i*i - i + 1 + j*j - j +\
    \ 1 + k*j - k + 1) % 3 == 0])\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq0ld1ze.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpjq0ld1ze.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpjq0ld1ze.py\", line\
    \ 21, in check\n    assert candidate(10) == 36\nAssertionError\n"
  stdout: ''
  timestamp: 1659748385
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(len(a) - 2) for j in range(i + 1, len(a)\
    \ - 1) for k in range(j + 1, len(a)) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef\
    \ check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748385
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i + 1\n    # a[i]\
    \ + a[j] + a[k] = 3 * i * i - 3 * i + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i\
    \ - i + 1)\n    # a[i] + a[j] + a[k] = 3 * a[i]\n    # a[i] + a[j] + a[k] = 3\
    \ * a[j]\n    # a[i] + a[j] + a[k] = 3 * a[k]\n    # a[i] + a[j] + a[k] = 3 *\
    \ a[i] = 3 * a[j] = 3 * a[k]\n    # a[i] = a[j] = a[k]\n    # a[i] = a[j] = a[k]\
    \ = a[i]\n    # a[i] = a[j] = a[k] = a[j]\n    # a[i] = a[j] = a[k] = a[k]\n \
    \   # a[i] = a[j] = a[k] = a[i] = a[j] = a[k]\n    # a[i] = a[j] = a[k] = a[i]\
    \ = a[j] = a[k] = a[i]\n    # a[i] = a[j] = a[k] = a[i] = a[j] = a[k] = a[j]\n\
    \    # a[i] = a[j] = a[k] = a[i] = a[j] = a[k] = a[k]\n    # a[i] = a[j] = a[k]\
    \ = a[i] = a[j] = a[k] = a[i] = a[j] = a[k]\n    # a[i] = a[j] = a[k] = a[i] =\
    \ a[j] = a[k] = a[i] = a[j] = a[k] = a[i]\n    # a\ndef check(candidate):\n  \
    \  assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps5g7opf4.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmps5g7opf4.py\", line 40,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmps5g7opf4.py\", line\
    \ 34, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659748385
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(n)\
    \ for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 25, in test_check\n    check(get_max_triples)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    triples = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    triples += 1\n    return triples\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748361
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i\
    \ + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i + 1\n    # a[i]\
    \ + a[j] + a[k] = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n    # = i * i\
    \ + j * j + k * k - i - j - k + 3\n    # = (i + j + k) * (i + j + k) - (i + j\
    \ + k) + 3\n    # = (i + j + k) * (i + j + k - 1) + 3\n    # = (i + j + k) * (i\
    \ + j + k - 1) + 3\n    # = (i + j + k) * (i + j + k - 1) + 3\n    # = (i + j\
    \ + k) * (i + j + k - 1) + 3\n    # = (i + j + k) * (i + j + k - 1) + 3\n    #\
    \ = (i + j + k) * (i + j + k - 1) + 3\n    # = (i + j + k) * (i + j + k - 1) +\
    \ 3\n    # = (i + j + k) * (i + j + k - 1) + 3\n    # = (i + j + k) * (i + j +\
    \ k - 1) + 3\n    # = (i + j + k) * (i + j + k - 1) + 3\n    # = (i + j + k) *\
    \ (i + j + k - 1) + 3\n    # = (i + j + k) * (i + j + k - 1) + 3\n    # = (i +\
    \ j + k) * (i + j + k - 1) + 3\n    # = (i + j + k) * (i + j + k - 1) + 3\n  \
    \  # = (i + j + k) * (i + j + k - 1) + 3\n    # = (i + j + k) * (i + j + k - 1)\
    \ + 3\n    # = (i + j + k) * (i + j + k - 1) + 3\n    # = (i + j + k) * (\ndef\
    \ check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8budi_sy.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8budi_sy.py\", line 44,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp8budi_sy.py\", line\
    \ 38, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659748385
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum([1 for i in range(1,\
    \ n - 1) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 +\
    \ j * j - j + 1 + k * j - k + 1) % 3 == 0])\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzfmti9pk.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpzfmti9pk.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpzfmti9pk.py\", line\
    \ 21, in check\n    assert candidate(10) == 36\nAssertionError\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i + 1\n    # a[i]\
    \ + a[j] + a[k] = 3 * i * i - 3 * i + 3\n    # i * i - i + 1 + j * j - j + 1 +\
    \ k * k - k + 1 = 3 * i * i - 3 * i + 3\n    # i * i + j * j + k * k - i - j -\
    \ k + 1 + 1 + 1 = 3 * i * i - 3 * i + 3\n    # i * i + j * j + k * k - i - j -\
    \ k + 3 = 3 * i * i - 3 * i + 3\n    # i * i + j * j + k * k - i - j - k = 3 *\
    \ i * i - 3 * i\n    # i * i + j * j + k * k - i - j - k = 3 * i * i - 3 * i\n\
    \    # i * i + j * j + k * k - i - j - k = 3 * i * i - 3 * i\n    # i * i + j\
    \ * j + k * k - i - j - k = 3 * i * i - 3 * i\n    # i * i + j * j + k * k - i\
    \ - j - k = 3 * i * i - 3 * i\n    # i * i + j * j + k * k - i - j - k = 3 * i\
    \ * i - 3 * i\n    # i * i + j * j + k * k - i - j - k = 3 * i * i - 3 * i\n \
    \   # i * i + j * j + k * k - i - j - k = 3 * i * i - 3 * i\n    # i * i + j *\
    \ j + k * k - i - j - k = 3 * i * i - 3 * i\n    # i * i + j * j + k * k - i -\
    \ j - k = 3 * i * i - 3 * i\n    # i * i + j * j + k * k - i - j - k = 3 * i *\
    \ i - 3 * i\n    # i * i + j * j + k * k - i - j - k = 3 * i * i - 3\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxl5es_3e.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpxl5es_3e.py\", line 39,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpxl5es_3e.py\", line\
    \ 33, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659748385
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n - 1) for j in range(i + 1, n) for k in range(j + 1, n) if (i + j + k) % 3\
    \ == 0)\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp034qxzg1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp034qxzg1.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp034qxzg1.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659748385
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum([1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0])\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748361
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n - 1) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 +\
    \ j * j - j + 1 + k * j - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw63ab5mp.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw63ab5mp.py\"\
    , line 25, in test_check\n    check(get_max_triples)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw63ab5mp.py\"\
    , line 21, in check\n    assert candidate(10) == 36\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i + 1\n    # a[i]\
    \ + a[j] + a[k] = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n    # a[i] +\
    \ a[j] + a[k] = (i + j + k) * (i + j + k) - (i + j + k) + 3\n    # a[i] + a[j]\
    \ + a[k] = (i + j + k) * (i + j + k - 1) + 2\n    # a[i] + a[j] + a[k] = (i +\
    \ j + k) * (i + j + k - 1) + 2\n    # a[i] + a[j] + a[k] = (i + j + k) * (i +\
    \ j + k - 1) + 2\n    # a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 2\n\
    \    # a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 2\n    # a[i] + a[j]\
    \ + a[k] = (i + j + k) * (i + j + k - 1) + 2\n    # a[i] + a[j] + a[k] = (i +\
    \ j + k) * (i + j + k - 1) + 2\n    # a[i] + a[j] + a[k] = (i + j + k) * (i +\
    \ j + k - 1) + 2\n    # a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 2\n\
    \    # a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 2\n    # a[i] + a[j]\
    \ + a[k] = (i + j + k) * (i + j + k - 1) + 2\n    # a[i\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx8ju0ggx.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpx8ju0ggx.py\", line 37,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpx8ju0ggx.py\", line\
    \ 31, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    return\
    \ 0\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu4le2krs.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpu4le2krs.py\", line 26,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpu4le2krs.py\", line\
    \ 20, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp49jaxa57.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp49jaxa57.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp49jaxa57.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659748385
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n - 1) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 +\
    \ j * j - j + 1 + k * j - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw63ab5mp.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw63ab5mp.py\"\
    , line 25, in test_check\n    check(get_max_triples)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw63ab5mp.py\"\
    , line 21, in check\n    assert candidate(10) == 36\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    triples = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    triples += 1\n    return triples\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748361
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(n)\
    \ for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 25, in test_check\n    check(get_max_triples)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum([1 for i in range(n)\
    \ for j in range(i+1, n) for k in range(j+1, n) if (i*i-i+1 + j*j-j+1 + k*k-k+1)\
    \ % 3 == 0])\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert\
    \ candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ukkkly5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5ukkkly5.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp5ukkkly5.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659748385
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(n)\
    \ for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 25, in test_check\n    check(get_max_triples)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum([1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0])\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748361
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    if n <= 2:\n        return 0\n\
    \    a = [i * i - i + 1 for i in range(1, n + 1)]\n    res = 0\n    for i in range(n\
    \ - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j +\
    \ 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                \
    \    res += 1\n    return res\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748385
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(n)\
    \ for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 25, in test_check\n    check(get_max_triples)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i + 1\n    # a[j]\
    \ = j * j - j + 1\n    # a[k] = k * k - k + 1\n    # a[i] + a[j] + a[k] = 3 *\
    \ (i * i + j * j + k * k) - (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i\
    \ * i + j * j + k * k) - (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i *\
    \ i + j * j + k * k) - (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i\
    \ + j * j + k * k) - (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i +\
    \ j * j + k * k) - (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j\
    \ * j + k * k) - (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j *\
    \ j + k * k) - (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j\
    \ + k * k) - (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j +\
    \ k * k) - (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j + k\
    \ * k) - (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j + k *\
    \ k) - (i +\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptz98yi42.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmptz98yi42.py\", line 36,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmptz98yi42.py\", line\
    \ 30, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659748385
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum([1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * j - k + 1) % 3 == 0])\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmuqr5rss.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmuqr5rss.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpmuqr5rss.py\", line\
    \ 21, in check\n    assert candidate(10) == 36\nAssertionError\n"
  stdout: ''
  timestamp: 1659748385
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp49jaxa57.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp49jaxa57.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp49jaxa57.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659748385
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum([1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0])\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748361
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if a[i] + a[j] + a[k] % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj4y46mbw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpj4y46mbw.py\", line 26,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpj4y46mbw.py\", line\
    \ 20, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659748385
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n - 1) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 +\
    \ j * j - j + 1 + k * j - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw63ab5mp.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw63ab5mp.py\"\
    , line 25, in test_check\n    check(get_max_triples)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw63ab5mp.py\"\
    , line 21, in check\n    assert candidate(10) == 36\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum([1 for i in range(1,\
    \ n) for j in range(i+1, n) for k in range(j+1, n) if (i*i - i + 1 + j*j - j +\
    \ 1 + k*j - k + 1) % 3 == 0])\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq0ld1ze.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpjq0ld1ze.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpjq0ld1ze.py\", line\
    \ 21, in check\n    assert candidate(10) == 36\nAssertionError\n"
  stdout: ''
  timestamp: 1659748385
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum([1 for i in range(len(a)) for j in range(i + 1, len(a))\
    \ for k in range(j + 1, len(a)) if (a[i] + a[j] + a[k]) % 3 == 0])\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748385
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum([1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0])\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748361
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(n)\
    \ for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 25, in test_check\n    check(get_max_triples)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum([1 for i in range(n)\
    \ for j in range(i+1, n) for k in range(j+1, n) if (i*i - i + 1 + j*j - j + 1\
    \ + k*j - k + 1) % 3 == 0])\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1sb7b6ph.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp1sb7b6ph.py\", line 24,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp1sb7b6ph.py\", line\
    \ 18, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659748385
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n-1) for j in range(i+1, n) for k in range(j+1, n) if (i*i - i + 1 + j*j - j\
    \ + 1 + k*j - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxokff4kd.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxokff4kd.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpxokff4kd.py\", line\
    \ 21, in check\n    assert candidate(10) == 36\nAssertionError\n"
  stdout: ''
  timestamp: 1659748361
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i + 1\n    # a[i]\
    \ + a[j] + a[k] = (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)\n    # a[i]\
    \ + a[j] + a[k] = i * i + j * j + k * k - i - j - k + 3\n    # a[i] + a[j] + a[k]\
    \ = 3 * (i * i + j * j + k * k) - (i + j + k)\n    # a[i] + a[j] + a[k] = 3 *\
    \ (i * i + j * j + k * k) - (i + j + k)\n    # a[i] + a[j] + a[k] = 3 * (i * i\
    \ + j * j + k * k) - (i + j + k)\n    # a[i] + a[j] + a[k] = 3 * (i * i + j *\
    \ j + k * k) - (i + j + k)\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j + k\
    \ * k) - (i + j + k)\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k) -\
    \ (i + j + k)\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k) - (i + j\
    \ + k)\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k) - (i + j + k)\n\
    \    # a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k) - (i + j + k)\n    # a[i]\
    \ + a[j] + a[k] = 3 * (i * i + j * j + k * k) - (i + j + k)\n    #\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnmzqg5wz.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpnmzqg5wz.py\", line 36,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpnmzqg5wz.py\", line\
    \ 30, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659748385
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(n)\
    \ for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 27, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 25, in test_check\n    check(get_max_triples)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e6ynwpw.py\"\
    , line 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyash1xeh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyash1xeh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5)\n\
    \    1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only\
    \ valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
