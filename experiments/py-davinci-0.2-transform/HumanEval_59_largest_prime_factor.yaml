name: HumanEval_59_largest_prime_factor
language: py
prompt: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime\
  \ factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
  \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
  \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
  \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
  \ntest_check()\n"
completions: ["    assert n > 1 and not is_prime(n)\n    for i in range(n // 2, 1,\
    \ -1):\n        if n % i == 0 and is_prime(i):\n            return i\n\n", " \
    \   # Find the smallest prime factor of n\n    for i in range(2, n):\n       \
    \ if n % i == 0:\n            # n is divisible by i, so i is a prime factor of\
    \ n\n            # Find the largest prime factor of n/i\n            return largest_prime_factor(n\
    \ // i)\n    # n is prime\n    return n\n", "    # Find the smallest factor of\
    \ n.\n    factor = smallest_factor(n)\n    # If n is prime, then the smallest\
    \ factor is n.\n    if factor == n:\n        return n\n    # Otherwise, return\
    \ the largest prime factor of n / factor.\n    return largest_prime_factor(n //\
    \ factor)\n\n", "    if n == 1:\n        return 1\n    if is_prime(n):\n     \
    \   return n\n    for i in range(2, n):\n        if n % i == 0:\n            return\
    \ largest_prime_factor(n // i)\n    return n\n\n", "    largest_prime = 2\n  \
    \  while n > 1:\n        if n % largest_prime == 0:\n            n = n // largest_prime\n\
    \        else:\n            largest_prime += 1\n    return largest_prime\n\n",
  "    # Hint: use a while loop to repeatedly divide n by the largest possible\n \
    \   # prime factor.\n    largest_factor = 1\n    factor = 2\n    while factor\
    \ * factor <= n:\n        if n % factor == 0:\n            n //= factor\n    \
    \        largest_factor = factor\n        else:\n            factor += 1\n   \
    \ if n > 1:\n        largest_factor = n\n    return largest_factor\n\n", "   \
    \ # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may want to use the is_prime function from the previous question.\n\
    \    # Hint: You may", "    # Hint: You may want to use the is_prime function\
    \ you just wrote\n    # Hint: You may want to use the is_prime function you just\
    \ wrote\n    if is_prime(n):\n        return n\n    else:\n        for i in range(2,\
    \ n):\n            if n % i == 0 and is_prime(i):\n                return i\n",
  "    # Hint: The following line, \"s = n ** 0.5\", is an example of ** operator\n\
    \    s = n ** 0.5\n    i = 2\n    while i <= s:\n        if n % i == 0:\n    \
    \        n //= i\n            s = n ** 0.5\n        else:\n            i += 1\n\
    \    return n\n\n", "    factor = 2\n    while n > 1:\n        if n % factor ==\
    \ 0:\n            n //= factor\n        else:\n            factor += 1\n    return\
    \ factor\n\n", "    i = 2\n    while i * i <= n:\n        if n % i:\n        \
    \    i += 1\n        else:\n            n //= i\n    return n\n\n", "    # Find\
    \ the smallest factor of n\n    factor = smallest_factor(n)\n    # If n is prime,\
    \ return n\n    if factor == n:\n        return n\n    # Otherwise, return the\
    \ largest prime factor of n / factor\n    return largest_prime_factor(n // factor)\n\
    \n", "    if n <= 1:\n        raise ValueError(\"n must be greater than 1\")\n\
    \    if is_prime(n):\n        raise ValueError(\"n must not be a prime\")\n  \
    \  for i in range(2, n):\n        if n % i == 0 and is_prime(i):\n           \
    \ return i\n    return n\n\n", "    # Hint: you may want to use the is_prime function\
    \ from the previous question\n    # Hint: you may want to use the smallest_factor\
    \ function from the previous question\n    # Hint: you may want to use the largest_factor\
    \ function from the previous question\n    # Hint: you may want to use the is_prime\
    \ function from the previous question\n    # Hint: you may want to use the smallest_factor\
    \ function from the previous question\n    # Hint: you may want to use the largest_factor\
    \ function from the previous question\n    # Hint: you may want to use the is_prime\
    \ function from the previous question\n    # Hint: you may want to use the smallest_factor\
    \ function from the previous question\n    # Hint: you may want to use the largest_factor\
    \ function from the previous question\n    # Hint: you may want to use the is_prime\
    \ function from the previous question\n    # Hint: you may want to use the smallest_factor\
    \ function from the previous question\n    # Hint: you may want to use the largest_factor\
    \ function from the previous question\n    # Hint: you may want to use the is_prime\
    \ function from the previous question\n    # Hint: you may want to use the smallest_factor\
    \ function from the previous question\n    # Hint: you may want to use the largest_factor\
    \ function from the previous question\n    # Hint: you may want to use the is_prime\
    \ function from the previous question\n    # Hint: you may want to use the smallest_factor\
    \ function from the previous question\n    # Hint: you may want to use the largest_factor\
    \ function from the previous question\n    # Hint: you may want to use the is_prime\
    \ function from the previous question\n    # Hint: you may want to use the smallest_factor\
    \ function from the previous question\n    # Hint: you may want to use the largest_factor\
    \ function from the previous question\n    # Hint: you may want to use the is_prime\
    \ function from the previous question\n    # Hint: you may want to use the smallest_factor\
    \ function from the previous question\n    # Hint: you may want to use the largest_factor\
    \ function from the previous question\n    # Hint: you may want to use the is_prime\
    \ function from the previous question\n    # Hint: you may want to use the", " \
    \   # Find the smallest prime factor of n\n    for i in range(2, n):\n       \
    \ if n % i == 0:\n            # n is divisible by i, so i is a prime factor of\
    \ n\n            # Find the largest prime factor of n // i\n            return\
    \ largest_prime_factor(n // i)\n    # n is prime\n    return n\n\n", "    factor\
    \ = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n\
    \        else:\n            factor += 1\n    return factor\n\n", "    factor =\
    \ 2\n    while factor <= n:\n        if n % factor == 0:\n            n //= factor\n\
    \        else:\n            factor += 1\n    return factor\n\n", "    if n ==\
    \ 1:\n        return 1\n    elif is_prime(n):\n        return n\n    else:\n \
    \       for i in range(2, n):\n            if n % i == 0:\n                return\
    \ largest_prime_factor(n // i)\n\n", "    # TODO: implement this function\n  \
    \  pass\n\n", "    factor = 2\n    while n > 1:\n        if n % factor == 0:\n\
    \            n //= factor\n        else:\n            factor += 1\n    return\
    \ factor\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
