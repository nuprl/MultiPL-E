language: py
name: HumanEval_11_string_xor
results:
- exit_code: 0
  program: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
    \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
    \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
    \    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n\
    \ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n\
    \    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') ==\
    \ '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
    \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
    \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
    \    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n\
    \ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n\
    \    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') ==\
    \ '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
    \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
    \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
    \    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n\
    \ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n\
    \    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') ==\
    \ '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
    \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
    \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
    \    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n\
    \ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n\
    \    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') ==\
    \ '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
    \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
    \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
    \    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n\
    \ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n\
    \    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') ==\
    \ '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
    \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
    \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
    \    \"\"\"\n    return \"\".join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\
    \n\ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n\
    \    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') ==\
    \ '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
    \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
    \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
    \    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n\
    \ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n\
    \    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') ==\
    \ '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
    \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
    \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
    \    \"\"\"\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\
    \n\ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n\
    \    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') ==\
    \ '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
    \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
    \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
    \    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n\
    \ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n\
    \    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') ==\
    \ '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
    \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
    \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
    \    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n\
    \ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n\
    \    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') ==\
    \ '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
    \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
    \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
    \    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n\
    \ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n\
    \    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') ==\
    \ '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
    \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
    \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
    \    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n\
    \ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n\
    \    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') ==\
    \ '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
    \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
    \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
    \    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n\
    \ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n\
    \    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') ==\
    \ '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
    \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
    \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
    \    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n\
    \ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n\
    \    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') ==\
    \ '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
    \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
    \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
    \    \"\"\"\n    return ''.join(str(int(a_i) ^ int(b_i)) for a_i, b_i in zip(a,\
    \ b))\n\n\ndef check(candidate):\n    assert candidate('111000', '101010') ==\
    \ '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101',\
    \ '0000') == '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
    \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
    \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
    \    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n\
    \ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n\
    \    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') ==\
    \ '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
    \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
    \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
    \    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n\
    \ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n\
    \    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') ==\
    \ '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
    \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
    \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
    \    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n\
    \ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n\
    \    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') ==\
    \ '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
    \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
    \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
    \    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n\
    \ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n\
    \    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') ==\
    \ '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
    \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
    \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
    \    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n\
    \ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n\
    \    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') ==\
    \ '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
