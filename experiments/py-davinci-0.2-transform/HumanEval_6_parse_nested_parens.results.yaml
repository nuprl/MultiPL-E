language: py
name: HumanEval_6_parse_nested_parens
results:
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hkgug1j.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9hkgug1j.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9hkgug1j.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp9hkgug1j.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        current_depth\
    \ = 0\n        for char in paren_group:\n            if char == '(':\n       \
    \         current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        current_depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif paren == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        current_depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif paren == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  current_depth = 0\n    result = []\n    for c in paren_string:\n        if\
    \ c == '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif c == ')':\n            current_depth -= 1\n   \
    \     elif c == ' ':\n            result.append(max_depth)\n            max_depth\
    \ = 0\n            current_depth = 0\n    result.append(max_depth)\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  current_depth = 0\n    max_depths = []\n    for char in paren_string:\n   \
    \     if char == '(':\n            current_depth += 1\n            max_depth =\
    \ max(max_depth, current_depth)\n        elif char == ')':\n            current_depth\
    \ -= 1\n        elif char == ' ':\n            max_depths.append(max_depth)\n\
    \            max_depth = 0\n            current_depth = 0\n    return max_depths\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphxi5o2ij.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmphxi5o2ij.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmphxi5o2ij.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    max_nesting = []\n    for group in paren_groups:\n        max_nesting.append(find_max_nesting(group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsg940t7t.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpsg940t7t.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpsg940t7t.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpsg940t7t.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  curr_depth = 0\n    result = []\n    for char in paren_string:\n        if\
    \ char == '(':\n            curr_depth += 1\n            max_depth = max(max_depth,\
    \ curr_depth)\n        elif char == ')':\n            curr_depth -= 1\n      \
    \  elif char == ' ':\n            result.append(max_depth)\n            max_depth\
    \ = 0\n            curr_depth = 0\n    result.append(max_depth)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nested_parens(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmt3ggfh_.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpmt3ggfh_.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpmt3ggfh_.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 12, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nested_parens(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmt3ggfh_.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpmt3ggfh_.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpmt3ggfh_.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 12, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_level = 0\n        level\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           level += 1\n                max_level = max(max_level, level)\n  \
    \          elif paren == ')':\n                level -= 1\n        result.append(max_level)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ group in paren_string.split(' '):\n        max_depth = 0\n        depth = 0\n\
    \        for char in group:\n            if char == '(':\n                depth\
    \ += 1\n                max_depth = max(max_depth, depth)\n            elif char\
    \ == ')':\n                depth -= 1\n        result.append(max_depth)\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for group in paren_groups:\n        max_nesting.append(get_max_nesting(group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_lr4ykuk.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp_lr4ykuk.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_lr4ykuk.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp_lr4ykuk.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        current_depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif paren == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_nesting_levels\
    \ = []\n    for paren_group in paren_string.split(' '):\n        max_nesting_levels.append(find_max_nesting_level(paren_group))\n\
    \    return max_nesting_levels\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi9c7xwrh.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpi9c7xwrh.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpi9c7xwrh.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpi9c7xwrh.py\", line 13, in parse_nested_parens\n\
    \    max_nesting_levels.append(find_max_nesting_level(paren_group))\nNameError:\
    \ name 'find_max_nesting_level' is not defined. Did you mean: 'max_nesting_levels'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  current_depth = 0\n    result = []\n    for char in paren_string:\n       \
    \ if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \        elif char == ' ':\n            result.append(max_depth)\n           \
    \ max_depth = 0\n            current_depth = 0\n    result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hkgug1j.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9hkgug1j.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9hkgug1j.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp9hkgug1j.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  curr_depth = 0\n    depths = []\n    for char in paren_string:\n        if\
    \ char == '(':\n            curr_depth += 1\n            max_depth = max(max_depth,\
    \ curr_depth)\n        elif char == ')':\n            curr_depth -= 1\n      \
    \  elif char == ' ':\n            depths.append(max_depth)\n            max_depth\
    \ = 0\n            curr_depth = 0\n    depths.append(max_depth)\n    return depths\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nested_parens(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmt3ggfh_.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpmt3ggfh_.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpmt3ggfh_.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 12, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        depth = 0\n        max_depth =\
    \ 0\n        for paren in paren_group:\n            if paren == '(':\n       \
    \         depth += 1\n                max_depth = max(max_depth, depth)\n    \
    \        elif paren == ')':\n                depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_depth = 0\n        current_depth\
    \ = 0\n        for char in paren_group:\n            if char == '(':\n       \
    \         current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_level = 0\n        current_level\
    \ = 0\n        for char in paren_group:\n            if char == '(':\n       \
    \         current_level += 1\n                max_level = max(max_level, current_level)\n\
    \            elif char == ')':\n                current_level -= 1\n        result.append(max_level)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nested_parens(paren_group) for paren_group in paren_groups]\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10txsc8u.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp10txsc8u.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp10txsc8u.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp10txsc8u.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(paren_group) for paren_group in paren_groups]\n\
    \  File \"/tmp/tmp10txsc8u.py\", line 12, in <listcomp>\n    return [max_nested_parens(paren_group)\
    \ for paren_group in paren_groups]\nNameError: name 'max_nested_parens' is not\
    \ defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    return [max_nesting(paren_group) for paren_group in paren_groups]\n\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8egsu1wi.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8egsu1wi.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8egsu1wi.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8egsu1wi.py\"\
    , line 12, in parse_nested_parens\n    return [max_nesting(paren_group) for paren_group\
    \ in paren_groups]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8egsu1wi.py\"\
    , line 12, in <listcomp>\n    return [max_nesting(paren_group) for paren_group\
    \ in paren_groups]\nNameError: name 'max_nesting' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        depth\
    \ = 0\n        for char in paren_group:\n            if char == '(':\n       \
    \         depth += 1\n                max_depth = max(max_depth, depth)\n    \
    \        elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           depth += 1\n                max_depth = max(max_depth, depth)\n  \
    \          elif paren == ')':\n                depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    return [max_nested_parens(paren_group) for paren_group in paren_groups]\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9pa46gw8.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp9pa46gw8.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9pa46gw8.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp9pa46gw8.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(paren_group) for paren_group in paren_groups]\n\
    \  File \"/tmp/tmp9pa46gw8.py\", line 12, in <listcomp>\n    return [max_nested_parens(paren_group)\
    \ for paren_group in paren_groups]\nNameError: name 'max_nested_parens' is not\
    \ defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_level = 0\n        level =\
    \ 0\n        for c in paren_group:\n            if c == '(':\n               \
    \ level += 1\n                max_level = max(max_level, level)\n            elif\
    \ c == ')':\n                level -= 1\n        result.append(max_level)\n  \
    \  return result\n\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_nesting = 0\n\
    \    current_nesting = 0\n    max_nesting_list = []\n    for char in paren_string:\n\
    \        if char == '(':\n            current_nesting += 1\n            max_nesting\
    \ = max(max_nesting, current_nesting)\n        elif char == ')':\n           \
    \ current_nesting -= 1\n        elif char == ' ':\n            max_nesting_list.append(max_nesting)\n\
    \            max_nesting = 0\n            current_nesting = 0\n    max_nesting_list.append(max_nesting)\n\
    \    return max_nesting_list\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        current_depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif paren == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  curr_depth = 0\n    output = []\n    for char in paren_string:\n        if\
    \ char == '(':\n            curr_depth += 1\n            max_depth = max(max_depth,\
    \ curr_depth)\n        elif char == ')':\n            curr_depth -= 1\n      \
    \  elif char == ' ':\n            output.append(max_depth)\n            max_depth\
    \ = 0\n            curr_depth = 0\n    output.append(max_depth)\n    return output\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(max_nesting_parens(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeyeme9te.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpeyeme9te.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpeyeme9te.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpeyeme9te.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(paren_group))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ group in paren_string.split(' '):\n        max_level = 0\n        current_level\
    \ = 0\n        for paren in group:\n            if paren == '(':\n           \
    \     current_level += 1\n                max_level = max(max_level, current_level)\n\
    \            elif paren == ')':\n                current_level -= 1\n        result.append(max_level)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    paren_levels = []\n    for paren_group in paren_groups:\n        paren_levels.append(get_nested_parens_level(paren_group))\n\
    \    return paren_levels\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcf859qgk.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpcf859qgk.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpcf859qgk.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpcf859qgk.py\", line 14, in parse_nested_parens\n\
    \    paren_levels.append(get_nested_parens_level(paren_group))\nNameError: name\
    \ 'get_nested_parens_level' is not defined\n"
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    max_nesting = []\n    for group in paren_groups:\n        max_nesting.append(get_max_nesting(group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp82y0cvpw.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp82y0cvpw.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp82y0cvpw.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp82y0cvpw.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  depth = 0\n    result = []\n    for c in paren_string:\n        if c == '(':\n\
    \            depth += 1\n            max_depth = max(max_depth, depth)\n     \
    \   elif c == ')':\n            depth -= 1\n        elif c == ' ':\n         \
    \   result.append(max_depth)\n            max_depth = 0\n            depth = 0\n\
    \    result.append(max_depth)\n    return result\n\ndef check(candidate):\n  \
    \  assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_nesting = 0\n        current_nesting\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_nesting += 1\n                max_nesting = max(max_nesting,\
    \ current_nesting)\n            elif paren == ')':\n                current_nesting\
    \ -= 1\n        result.append(max_nesting)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nesting_level(paren_group) for paren_group in paren_groups]\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgxhx2n8u.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpgxhx2n8u.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpgxhx2n8u.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpgxhx2n8u.py\", line 12, in parse_nested_parens\n\
    \    return [max_nesting_level(paren_group) for paren_group in paren_groups]\n\
    \  File \"/tmp/tmpgxhx2n8u.py\", line 12, in <listcomp>\n    return [max_nesting_level(paren_group)\
    \ for paren_group in paren_groups]\nNameError: name 'max_nesting_level' is not\
    \ defined\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           depth += 1\n                max_depth = max(max_depth, depth)\n  \
    \          elif paren == ')':\n                depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ group in paren_string.split(' '):\n        max_level = 0\n        current_level\
    \ = 0\n        for paren in group:\n            if paren == '(':\n           \
    \     current_level += 1\n                max_level = max(max_level, current_level)\n\
    \            elif paren == ')':\n                current_level -= 1\n        result.append(max_level)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  depth = 0\n    result = []\n    for c in paren_string:\n        if c == '(':\n\
    \            depth += 1\n            max_depth = max(max_depth, depth)\n     \
    \   elif c == ')':\n            depth -= 1\n        elif c == ' ':\n         \
    \   result.append(max_depth)\n            max_depth = 0\n            depth = 0\n\
    \    result.append(max_depth)\n    return result\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(max_nesting_level(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjaa_algt.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpjaa_algt.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpjaa_algt.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpjaa_algt.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_level(paren_group))\nNameError: name 'max_nesting_level'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  current_depth = 0\n    depths = []\n    for char in paren_string:\n       \
    \ if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \        elif char == ' ':\n            depths.append(max_depth)\n           \
    \ max_depth = 0\n            current_depth = 0\n    depths.append(max_depth)\n\
    \    return depths\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_nesting = 0\n        nesting\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           nesting += 1\n                max_nesting = max(max_nesting, nesting)\n\
    \            elif paren == ')':\n                nesting -= 1\n        result.append(max_nesting)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_nesting = 0\n\
    \    current_nesting = 0\n    result = []\n    for paren in paren_string:\n  \
    \      if paren == '(':\n            current_nesting += 1\n            max_nesting\
    \ = max(max_nesting, current_nesting)\n        elif paren == ')':\n          \
    \  current_nesting -= 1\n        elif paren == ' ':\n            result.append(max_nesting)\n\
    \            max_nesting = 0\n            current_nesting = 0\n    result.append(max_nesting)\n\
    \    return result\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_depth = 0\n        current_depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif paren == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nested_parens(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmt3ggfh_.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpmt3ggfh_.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpmt3ggfh_.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 12, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(max_nesting_in_paren_group(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp38c66i6.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpp38c66i6.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpp38c66i6.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpp38c66i6.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_in_paren_group(paren_group))\nNameError: name\
    \ 'max_nesting_in_paren_group' is not defined\n"
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_depth = 0\n        current_depth\
    \ = 0\n        for char in paren_group:\n            if char == '(':\n       \
    \         current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(parse_nested_parens_helper(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxpg13b3g.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpxpg13b3g.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpxpg13b3g.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpxpg13b3g.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(parse_nested_parens_helper(paren_group))\nNameError: name\
    \ 'parse_nested_parens_helper' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nesting_level(paren_group) for paren_group in paren_groups]\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgxhx2n8u.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpgxhx2n8u.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpgxhx2n8u.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpgxhx2n8u.py\", line 12, in parse_nested_parens\n\
    \    return [max_nesting_level(paren_group) for paren_group in paren_groups]\n\
    \  File \"/tmp/tmpgxhx2n8u.py\", line 12, in <listcomp>\n    return [max_nesting_level(paren_group)\
    \ for paren_group in paren_groups]\nNameError: name 'max_nesting_level' is not\
    \ defined\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nesting_level(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwerfe2n5.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwerfe2n5.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwerfe2n5.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwerfe2n5.py\"\
    , line 12, in parse_nested_parens\n    return [max_nesting_level(group) for group\
    \ in paren_groups]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwerfe2n5.py\"\
    , line 12, in <listcomp>\n    return [max_nesting_level(group) for group in paren_groups]\n\
    NameError: name 'max_nesting_level' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    output = []\n    for\
    \ paren_group in paren_string.split():\n        max_level = 0\n        level =\
    \ 0\n        for char in paren_group:\n            if char == '(':\n         \
    \       level += 1\n                max_level = max(max_level, level)\n      \
    \      elif char == ')':\n                level -= 1\n        output.append(max_level)\n\
    \    return output\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_nesting = 0\n\
    \    current_nesting = 0\n    max_nesting_list = []\n    for char in paren_string:\n\
    \        if char == '(':\n            current_nesting += 1\n            max_nesting\
    \ = max(max_nesting, current_nesting)\n        elif char == ')':\n           \
    \ current_nesting -= 1\n        elif char == ' ':\n            max_nesting_list.append(max_nesting)\n\
    \            max_nesting = 0\n            current_nesting = 0\n    max_nesting_list.append(max_nesting)\n\
    \    return max_nesting_list\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def get_max_nesting(paren_string:\
    \ str) -> int:\n        \"\"\" Get the maximum level of nesting of parentheses\
    \ in a single group.\n        \"\"\"\n        max_nesting = 0\n        nesting\
    \ = 0\n        for paren in paren_string:\n            if paren == '(':\n    \
    \            nesting += 1\n                max_nesting = max(max_nesting, nesting)\n\
    \            elif paren == ')':\n                nesting -= 1\n        return\
    \ max_nesting\n\n    return [get_max_nesting(paren_string) for paren_string in\
    \ paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  depth = 0\n    depths = []\n    for c in paren_string:\n        if c == '(':\n\
    \            depth += 1\n            max_depth = max(max_depth, depth)\n     \
    \   elif c == ')':\n            depth -= 1\n        elif c == ' ':\n         \
    \   depths.append(max_depth)\n            max_depth = 0\n            depth = 0\n\
    \    depths.append(max_depth)\n    return depths\n\ndef check(candidate):\n  \
    \  assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  depth = 0\n    max_depths = []\n    for char in paren_string:\n        if char\
    \ == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n\
    \        elif char == ')':\n            depth -= 1\n        elif char == ' ':\n\
    \            max_depths.append(max_depth)\n            max_depth = 0\n       \
    \     depth = 0\n    max_depths.append(max_depth)\n    return max_depths\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nested_parens(paren_group) for paren_group in paren_groups]\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10txsc8u.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp10txsc8u.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp10txsc8u.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp10txsc8u.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(paren_group) for paren_group in paren_groups]\n\
    \  File \"/tmp/tmp10txsc8u.py\", line 12, in <listcomp>\n    return [max_nested_parens(paren_group)\
    \ for paren_group in paren_groups]\nNameError: name 'max_nested_parens' is not\
    \ defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    max_nesting = []\n    for group in paren_groups:\n        max_nesting.append(get_max_nesting(group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp82y0cvpw.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp82y0cvpw.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp82y0cvpw.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp82y0cvpw.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(max_nesting_parens(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeyeme9te.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpeyeme9te.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpeyeme9te.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpeyeme9te.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(paren_group))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_depth = 0\n        current_depth\
    \ = 0\n        for char in paren_group:\n            if char == '(':\n       \
    \         current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp64lollas.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp64lollas.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp64lollas.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp64lollas.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for group in paren_groups:\n        max_nesting.append(max_depth(group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp177smz9c.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp177smz9c.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp177smz9c.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp177smz9c.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(max_depth(group))\nNameError: name 'max_depth' is not\
    \ defined\n"
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  curr_depth = 0\n    result = []\n    for c in paren_string:\n        if c ==\
    \ '(':\n            curr_depth += 1\n            max_depth = max(max_depth, curr_depth)\n\
    \        elif c == ')':\n            curr_depth -= 1\n        elif c == ' ':\n\
    \            result.append(max_depth)\n            max_depth = 0\n           \
    \ curr_depth = 0\n    result.append(max_depth)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hkgug1j.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9hkgug1j.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9hkgug1j.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp9hkgug1j.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement\
    \ this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nested_parens(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmt3ggfh_.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpmt3ggfh_.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpmt3ggfh_.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 12, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_depth = 0\n        current_depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif paren == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nesting_parens(group) for group in paren_groups]\n\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxw1k1dqy.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpxw1k1dqy.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpxw1k1dqy.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpxw1k1dqy.py\", line 12, in parse_nested_parens\n\
    \    return [max_nesting_parens(group) for group in paren_groups]\n  File \"/tmp/tmpxw1k1dqy.py\"\
    , line 12, in <listcomp>\n    return [max_nesting_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nesting_parens' is not defined\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nested_parens(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmt3ggfh_.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpmt3ggfh_.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpmt3ggfh_.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 12, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_level = 0\n        level =\
    \ 0\n        for paren in paren_group:\n            if paren == '(':\n       \
    \         level += 1\n                max_level = max(max_level, level)\n    \
    \        elif paren == ')':\n                level -= 1\n        result.append(max_level)\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ group in paren_string.split(' '):\n        max_level = 0\n        level = 0\n\
    \        for char in group:\n            if char == '(':\n                level\
    \ += 1\n                max_level = max(max_level, level)\n            elif char\
    \ == ')':\n                level -= 1\n        result.append(max_level)\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for group in paren_groups:\n        max_nesting.append(find_max_nesting(group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsviycmkv.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpsviycmkv.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpsviycmkv.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpsviycmkv.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement\
    \ this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(find_max_nesting(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1qn096fe.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp1qn096fe.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1qn096fe.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp1qn096fe.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(paren_group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nested_parens(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmt3ggfh_.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpmt3ggfh_.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpmt3ggfh_.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 12, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split('\
    \ ')\n    return [max_depth(group) for group in groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa9zlep_1.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpa9zlep_1.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpa9zlep_1.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpa9zlep_1.py\", line 12, in parse_nested_parens\n\
    \    return [max_depth(group) for group in groups]\n  File \"/tmp/tmpa9zlep_1.py\"\
    , line 12, in <listcomp>\n    return [max_depth(group) for group in groups]\n\
    NameError: name 'max_depth' is not defined\n"
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    return [len(re.findall(r'\\(\\(', group)) for group in paren_groups]\n\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt90f63mv.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpt90f63mv.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpt90f63mv.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpt90f63mv.py\", line 12, in parse_nested_parens\n\
    \    return [len(re.findall(r'\\(\\(', group)) for group in paren_groups]\n  File\
    \ \"/tmp/tmpt90f63mv.py\", line 12, in <listcomp>\n    return [len(re.findall(r'\\\
    (\\(', group)) for group in paren_groups]\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        level = 0\n        max_level\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           level += 1\n                max_level = max(max_level, level)\n  \
    \          elif paren == ')':\n                level -= 1\n        result.append(max_level)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nested_parens(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmt3ggfh_.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpmt3ggfh_.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpmt3ggfh_.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 12, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split('\
    \ ')\n    return [max_nesting(group) for group in groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplwj3v1hr.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmplwj3v1hr.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmplwj3v1hr.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmplwj3v1hr.py\", line 12, in parse_nested_parens\n\
    \    return [max_nesting(group) for group in groups]\n  File \"/tmp/tmplwj3v1hr.py\"\
    , line 12, in <listcomp>\n    return [max_nesting(group) for group in groups]\n\
    NameError: name 'max_nesting' is not defined\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_nesting = 0\n        current_nesting\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_nesting += 1\n                max_nesting = max(max_nesting,\
    \ current_nesting)\n            elif paren == ')':\n                current_nesting\
    \ -= 1\n        result.append(max_nesting)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hkgug1j.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9hkgug1j.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9hkgug1j.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp9hkgug1j.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_level = 0\n        current_level\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_level += 1\n                max_level = max(max_level, current_level)\n\
    \            elif paren == ')':\n                current_level -= 1\n        result.append(max_level)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_depth = 0\n        depth =\
    \ 0\n        for paren in paren_group:\n            if paren == '(':\n       \
    \         depth += 1\n                max_depth = max(max_depth, depth)\n    \
    \        elif paren == ')':\n                depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = paren_string.split('\
    \ ')\n    max_nesting = []\n    for paren in paren_list:\n        max_nesting.append(get_max_nesting(paren))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpai8gry28.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpai8gry28.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpai8gry28.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpai8gry28.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  curr_depth = 0\n    result = []\n    for char in paren_string:\n        if\
    \ char == '(':\n            curr_depth += 1\n            max_depth = max(max_depth,\
    \ curr_depth)\n        elif char == ')':\n            curr_depth -= 1\n      \
    \  elif char == ' ':\n            result.append(max_depth)\n            max_depth\
    \ = 0\n            curr_depth = 0\n    result.append(max_depth)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(max_nesting_parens(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeyeme9te.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpeyeme9te.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpeyeme9te.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpeyeme9te.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(paren_group))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement\
    \ this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        current_depth\
    \ = 0\n        for char in paren_group:\n            if char == '(':\n       \
    \         current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    paren_levels = []\n    for paren_group in paren_groups:\n        paren_levels.append(get_nested_parens_level(paren_group))\n\
    \    return paren_levels\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphppm5vlb.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmphppm5vlb.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmphppm5vlb.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmphppm5vlb.py\", line 14, in parse_nested_parens\n\
    \    paren_levels.append(get_nested_parens_level(paren_group))\nNameError: name\
    \ 'get_nested_parens_level' is not defined\n"
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: implement\
    \ this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzdzm1486.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzdzm1486.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzdzm1486.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(max_nesting_level(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjaa_algt.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpjaa_algt.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpjaa_algt.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpjaa_algt.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_level(paren_group))\nNameError: name 'max_nesting_level'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_level = 0\n        current_level\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_level += 1\n                max_level = max(max_level, current_level)\n\
    \            elif paren == ')':\n                current_level -= 1\n        result.append(max_level)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    return [nested_parens(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbk2u_bg5.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpbk2u_bg5.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbk2u_bg5.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpbk2u_bg5.py\", line 12, in parse_nested_parens\n\
    \    return [nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpbk2u_bg5.py\"\
    , line 12, in <listcomp>\n    return [nested_parens(group) for group in paren_groups]\n\
    NameError: name 'nested_parens' is not defined\n"
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_nesting = 0\n\
    \    current_nesting = 0\n    max_nesting_list = []\n    for char in paren_string:\n\
    \        if char == '(':\n            current_nesting += 1\n            max_nesting\
    \ = max(max_nesting, current_nesting)\n        elif char == ')':\n           \
    \ current_nesting -= 1\n        elif char == ' ':\n            max_nesting_list.append(max_nesting)\n\
    \            max_nesting = 0\n            current_nesting = 0\n    max_nesting_list.append(max_nesting)\n\
    \    return max_nesting_list\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    max_nesting = []\n    for group in paren_groups:\n        max_nesting.append(max_nesting_level(group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprxfd43hx.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmprxfd43hx.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmprxfd43hx.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmprxfd43hx.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_level(group))\nNameError: name 'max_nesting_level'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  curr_depth = 0\n    result = []\n    for char in paren_string:\n        if\
    \ char == '(':\n            curr_depth += 1\n            max_depth = max(max_depth,\
    \ curr_depth)\n        elif char == ')':\n            curr_depth -= 1\n      \
    \  elif char == ' ':\n            result.append(max_depth)\n            max_depth\
    \ = 0\n            curr_depth = 0\n    result.append(max_depth)\n    return result\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ group in paren_string.split():\n        max_depth = 0\n        depth = 0\n \
    \       for char in group:\n            if char == '(':\n                depth\
    \ += 1\n                max_depth = max(max_depth, depth)\n            elif char\
    \ == ')':\n                depth -= 1\n        result.append(max_depth)\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 12, in parse_nested_parens\n    return [max_nested_parens(group) for group\
    \ in paren_groups]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 12, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement\
    \ this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(find_max_nesting(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1qn096fe.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp1qn096fe.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1qn096fe.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp1qn096fe.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(paren_group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    max_nesting = []\n    for paren_group in paren_groups:\n        current_nesting\
    \ = 0\n        max_nesting_in_group = 0\n        for char in paren_group:\n  \
    \          if char == '(':\n                current_nesting += 1\n           \
    \     max_nesting_in_group = max(max_nesting_in_group, current_nesting)\n    \
    \        elif char == ')':\n                current_nesting -= 1\n        max_nesting.append(max_nesting_in_group)\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hkgug1j.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9hkgug1j.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9hkgug1j.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp9hkgug1j.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp64lollas.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp64lollas.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp64lollas.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp64lollas.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_nesting = 0\n\
    \    current_nesting = 0\n    result = []\n    for char in paren_string:\n   \
    \     if char == '(':\n            current_nesting += 1\n            max_nesting\
    \ = max(max_nesting, current_nesting)\n        elif char == ')':\n           \
    \ current_nesting -= 1\n        elif char == ' ':\n            result.append(max_nesting)\n\
    \            max_nesting = 0\n            current_nesting = 0\n    result.append(max_nesting)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement\
    \ this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nested_parens(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmt3ggfh_.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpmt3ggfh_.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpmt3ggfh_.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 12, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_depth = 0\n        current_depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif paren == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nested_parens(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmt3ggfh_.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpmt3ggfh_.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpmt3ggfh_.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 12, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_level = 0\n        level =\
    \ 0\n        for paren in paren_group:\n            if paren == '(':\n       \
    \         level += 1\n                max_level = max(max_level, level)\n    \
    \        elif paren == ')':\n                level -= 1\n        result.append(max_level)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    max_levels = []\n    for paren_group in paren_groups:\n        level\
    \ = 0\n        max_level = 0\n        for paren in paren_group:\n            if\
    \ paren == '(':\n                level += 1\n            elif paren == ')':\n\
    \                level -= 1\n            max_level = max(max_level, level)\n \
    \       max_levels.append(max_level)\n    return max_levels\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ group in paren_string.split(' '):\n        max_depth = 0\n        current_depth\
    \ = 0\n        for char in group:\n            if char == '(':\n             \
    \   current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_depth = 0\n        current_depth\
    \ = 0\n        for char in paren_group:\n            if char == '(':\n       \
    \         current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        current_depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif paren == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement\
    \ this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  current_depth = 0\n    result = []\n    for char in paren_string:\n       \
    \ if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \        elif char == ' ':\n            result.append(max_depth)\n           \
    \ max_depth = 0\n            current_depth = 0\n    result.append(max_depth)\n\
    \    return result\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_depth = 0\n        current_depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif paren == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hkgug1j.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9hkgug1j.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9hkgug1j.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp9hkgug1j.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        current_depth\
    \ = 0\n        for char in paren_group:\n            if char == '(':\n       \
    \         current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            else:\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nested_parens(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmt3ggfh_.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpmt3ggfh_.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpmt3ggfh_.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 12, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  depth = 0\n    max_depths = []\n    for char in paren_string:\n        if char\
    \ == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n\
    \        elif char == ')':\n            depth -= 1\n        elif char == ' ':\n\
    \            max_depths.append(max_depth)\n            max_depth = 0\n       \
    \     depth = 0\n    max_depths.append(max_depth)\n    return max_depths\n\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(find_max_nesting(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1qn096fe.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp1qn096fe.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1qn096fe.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp1qn096fe.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(paren_group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ group in paren_string.split():\n        max_depth = 0\n        depth = 0\n \
    \       for char in group:\n            if char == '(':\n                depth\
    \ += 1\n                max_depth = max(max_depth, depth)\n            elif char\
    \ == ')':\n                depth -= 1\n        result.append(max_depth)\n    return\
    \ result\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nesting_level(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwerfe2n5.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwerfe2n5.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwerfe2n5.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwerfe2n5.py\"\
    , line 12, in parse_nested_parens\n    return [max_nesting_level(group) for group\
    \ in paren_groups]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwerfe2n5.py\"\
    , line 12, in <listcomp>\n    return [max_nesting_level(group) for group in paren_groups]\n\
    NameError: name 'max_nesting_level' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 12, in parse_nested_parens\n    return [max_nested_parens(group) for group\
    \ in paren_groups]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 12, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_depth = 0\n        depth =\
    \ 0\n        for paren in paren_group:\n            if paren == '(':\n       \
    \         depth += 1\n                max_depth = max(max_depth, depth)\n    \
    \        elif paren == ')':\n                depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_depth = 0\n        current_depth\
    \ = 0\n        for char in paren_group:\n            if char == '(':\n       \
    \         current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split('\
    \ ')\n    return [max_nested_parens(group) for group in groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4kszv4si.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp4kszv4si.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp4kszv4si.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp4kszv4si.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in groups]\n  File \"/tmp/tmp4kszv4si.py\"\
    , line 12, in <listcomp>\n    return [max_nested_parens(group) for group in groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw6g34d9t.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw6g34d9t.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw6g34d9t.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 12, in parse_nested_parens\n    return [max_nested_parens(group) for group\
    \ in paren_groups]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 12, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_depth = 0\n        current_depth\
    \ = 0\n        for char in paren_group:\n            if char == '(':\n       \
    \         current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  current_depth = 0\n    result = []\n    for char in paren_string:\n       \
    \ if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \        elif char == ' ':\n            result.append(max_depth)\n           \
    \ max_depth = 0\n            current_depth = 0\n    result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  depth = 0\n    max_depths = []\n    for char in paren_string:\n        if char\
    \ == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n\
    \        elif char == ')':\n            depth -= 1\n        elif char == ' ':\n\
    \            max_depths.append(max_depth)\n            max_depth = 0\n       \
    \     depth = 0\n    max_depths.append(max_depth)\n    return max_depths\n\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_depth = 0\n        current_depth\
    \ = 0\n        for char in paren_group:\n            if char == '(':\n       \
    \         current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(max_nesting_level(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjaa_algt.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpjaa_algt.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpjaa_algt.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpjaa_algt.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_level(paren_group))\nNameError: name 'max_nesting_level'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hkgug1j.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9hkgug1j.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9hkgug1j.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp9hkgug1j.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split('\
    \ ')\n    return [max_nesting(group) for group in groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplwj3v1hr.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmplwj3v1hr.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmplwj3v1hr.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmplwj3v1hr.py\", line 12, in parse_nested_parens\n\
    \    return [max_nesting(group) for group in groups]\n  File \"/tmp/tmplwj3v1hr.py\"\
    , line 12, in <listcomp>\n    return [max_nesting(group) for group in groups]\n\
    NameError: name 'max_nesting' is not defined\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_nesting = 0\n        current_nesting\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_nesting += 1\n                max_nesting = max(max_nesting,\
    \ current_nesting)\n            elif paren == ')':\n                current_nesting\
    \ -= 1\n        result.append(max_nesting)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement\
    \ this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    max_depth = []\n    for paren_group in paren_groups:\n        depth = 0\n\
    \        max_depth_in_group = 0\n        for char in paren_group:\n          \
    \  if char == '(':\n                depth += 1\n                max_depth_in_group\
    \ = max(max_depth_in_group, depth)\n            elif char == ')':\n          \
    \      depth -= 1\n        max_depth.append(max_depth_in_group)\n    return max_depth\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: implement\
    \ this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzdzm1486.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzdzm1486.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzdzm1486.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('\
    \ ', '')\n    max_depth = 0\n    depth = 0\n    max_depths = []\n    for char\
    \ in paren_string:\n        if char == '(':\n            depth += 1\n        \
    \    max_depth = max(max_depth, depth)\n        elif char == ')':\n          \
    \  depth -= 1\n        elif char == ' ':\n            max_depths.append(max_depth)\n\
    \            max_depth = 0\n            depth = 0\n    max_depths.append(max_depth)\n\
    \    return max_depths\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp68xi51v9.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp68xi51v9.py\", line 34,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp68xi51v9.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_depth = 0\n        depth =\
    \ 0\n        for paren in paren_group:\n            if paren == '(':\n       \
    \         depth += 1\n                max_depth = max(max_depth, depth)\n    \
    \        elif paren == ')':\n                depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    max_depth = []\n    for group in paren_groups:\n        depth = 0\n     \
    \   max_depth_in_group = 0\n        for char in group:\n            if char ==\
    \ '(':\n                depth += 1\n                max_depth_in_group = max(max_depth_in_group,\
    \ depth)\n            elif char == ')':\n                depth -= 1\n        max_depth.append(max_depth_in_group)\n\
    \    return max_depth\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split('\
    \ ')\n    return [max_nesting(group) for group in groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplwj3v1hr.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmplwj3v1hr.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmplwj3v1hr.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmplwj3v1hr.py\", line 12, in parse_nested_parens\n\
    \    return [max_nesting(group) for group in groups]\n  File \"/tmp/tmplwj3v1hr.py\"\
    , line 12, in <listcomp>\n    return [max_nesting(group) for group in groups]\n\
    NameError: name 'max_nesting' is not defined\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  current_depth = 0\n    result = []\n    for c in paren_string:\n        if\
    \ c == '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif c == ')':\n            current_depth -= 1\n   \
    \     elif c == ' ':\n            result.append(max_depth)\n            max_depth\
    \ = 0\n            current_depth = 0\n    result.append(max_depth)\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_depth = 0\n        current_depth\
    \ = 0\n        for char in paren_group:\n            if char == '(':\n       \
    \         current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split('\
    \ ')\n    return [max_nesting(group) for group in groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplwj3v1hr.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmplwj3v1hr.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmplwj3v1hr.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmplwj3v1hr.py\", line 12, in parse_nested_parens\n\
    \    return [max_nesting(group) for group in groups]\n  File \"/tmp/tmplwj3v1hr.py\"\
    , line 12, in <listcomp>\n    return [max_nesting(group) for group in groups]\n\
    NameError: name 'max_nesting' is not defined\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        current_depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif paren == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_depth = 0\n        depth =\
    \ 0\n        for paren in paren_group:\n            if paren == '(':\n       \
    \         depth += 1\n                max_depth = max(max_depth, depth)\n    \
    \        elif paren == ')':\n                depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        depth\
    \ = 0\n        for char in paren_group:\n            if char == '(':\n       \
    \         depth += 1\n                max_depth = max(max_depth, depth)\n    \
    \        elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  current_depth = 0\n    result = []\n    for char in paren_string:\n       \
    \ if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \        elif char == ' ':\n            result.append(max_depth)\n           \
    \ max_depth = 0\n            current_depth = 0\n    result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp64lollas.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp64lollas.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp64lollas.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp64lollas.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        stack = []\n        max_depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           stack.append(paren)\n                max_depth = max(max_depth, len(stack))\n\
    \            elif paren == ')':\n                stack.pop()\n        result.append(max_depth)\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_depth = 0\n        current_depth\
    \ = 0\n        for char in paren_group:\n            if char == '(':\n       \
    \         current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 12, in parse_nested_parens\n    return [max_nested_parens(group) for group\
    \ in paren_groups]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 12, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_depth = 0\n        current_depth\
    \ = 0\n        for char in paren_group:\n            if char == '(':\n       \
    \         current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  depth = 0\n    depths = []\n    for char in paren_string:\n        if char\
    \ == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n\
    \        elif char == ')':\n            depth -= 1\n        elif char == ' ':\n\
    \            depths.append(max_depth)\n            max_depth = 0\n           \
    \ depth = 0\n    depths.append(max_depth)\n    return depths\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    max_nesting = []\n    for group in paren_groups:\n        max_nesting.append(find_max_nesting(group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsg940t7t.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpsg940t7t.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpsg940t7t.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpsg940t7t.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_nesting = 0\n        curr_nesting\
    \ = 0\n        for char in paren_group:\n            if char == '(':\n       \
    \         curr_nesting += 1\n                max_nesting = max(max_nesting, curr_nesting)\n\
    \            elif char == ')':\n                curr_nesting -= 1\n        result.append(max_nesting)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement\
    \ this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0a62rw8.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_depth = 0\n        current_depth\
    \ = 0\n        for char in paren_group:\n            if char == '(':\n       \
    \         current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hkgug1j.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9hkgug1j.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9hkgug1j.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp9hkgug1j.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    return [max_nested_parens(paren_group) for paren_group in paren_groups]\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9pa46gw8.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp9pa46gw8.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9pa46gw8.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp9pa46gw8.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(paren_group) for paren_group in paren_groups]\n\
    \  File \"/tmp/tmp9pa46gw8.py\", line 12, in <listcomp>\n    return [max_nested_parens(paren_group)\
    \ for paren_group in paren_groups]\nNameError: name 'max_nested_parens' is not\
    \ defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for group in paren_groups:\n        max_nesting.append(find_max_nesting(group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsviycmkv.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpsviycmkv.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpsviycmkv.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpsviycmkv.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nested_parens(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmt3ggfh_.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpmt3ggfh_.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpmt3ggfh_.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 12, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  current_depth = 0\n    result = []\n    for c in paren_string:\n        if\
    \ c == '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif c == ')':\n            current_depth -= 1\n   \
    \     elif c == ' ':\n            result.append(max_depth)\n            max_depth\
    \ = 0\n            current_depth = 0\n    result.append(max_depth)\n    return\
    \ result\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_level = 0\n        level\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           level += 1\n                max_level = max(max_level, level)\n  \
    \          elif paren == ')':\n                level -= 1\n        result.append(max_level)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_nesting = 0\n\
    \    curr_nesting = 0\n    max_nesting_list = []\n    for char in paren_string:\n\
    \        if char == '(':\n            curr_nesting += 1\n            max_nesting\
    \ = max(max_nesting, curr_nesting)\n        elif char == ')':\n            curr_nesting\
    \ -= 1\n        elif char == ' ':\n            max_nesting_list.append(max_nesting)\n\
    \            max_nesting = 0\n            curr_nesting = 0\n    return max_nesting_list\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2h1atsq_.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2h1atsq_.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp2h1atsq_.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hkgug1j.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9hkgug1j.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9hkgug1j.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp9hkgug1j.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren_group))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        current_depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif paren == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    output = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        current_depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif paren == ')':\n                current_depth -= 1\n        output.append(max_depth)\n\
    \    return output\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    max_nesting = []\n    for group in paren_groups:\n        current_nesting\
    \ = 0\n        max_nesting_so_far = 0\n        for paren in group:\n         \
    \   if paren == '(':\n                current_nesting += 1\n            elif paren\
    \ == ')':\n                current_nesting -= 1\n            max_nesting_so_far\
    \ = max(max_nesting_so_far, current_nesting)\n        max_nesting.append(max_nesting_so_far)\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nested_parens(paren_group) for paren_group in paren_groups]\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10txsc8u.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp10txsc8u.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp10txsc8u.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp10txsc8u.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(paren_group) for paren_group in paren_groups]\n\
    \  File \"/tmp/tmp10txsc8u.py\", line 12, in <listcomp>\n    return [max_nested_parens(paren_group)\
    \ for paren_group in paren_groups]\nNameError: name 'max_nested_parens' is not\
    \ defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        depth\
    \ = 0\n        for char in paren_group:\n            if char == '(':\n       \
    \         depth += 1\n                max_depth = max(max_depth, depth)\n    \
    \        elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           depth += 1\n                max_depth = max(max_depth, depth)\n  \
    \          elif paren == ')':\n                depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nested_parens(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmt3ggfh_.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpmt3ggfh_.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpmt3ggfh_.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n  File \"/tmp/tmpmt3ggfh_.py\"\
    , line 12, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    max_nesting = []\n    for group in paren_groups:\n        max_nesting.append(max_nesting_parens(group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo67eeq3s.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpo67eeq3s.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpo67eeq3s.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpo67eeq3s.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(group))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    return [max_nesting(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzx3qlard.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzx3qlard.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzx3qlard.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzx3qlard.py\"\
    , line 12, in parse_nested_parens\n    return [max_nesting(group) for group in\
    \ paren_groups]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzx3qlard.py\"\
    , line 12, in <listcomp>\n    return [max_nesting(group) for group in paren_groups]\n\
    NameError: name 'max_nesting' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ parens in paren_string.split():\n        max_depth = 0\n        current_depth\
    \ = 0\n        for paren in parens:\n            if paren == '(':\n          \
    \      current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif paren == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  current_depth = 0\n    result = []\n    for c in paren_string:\n        if\
    \ c == '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif c == ')':\n            current_depth -= 1\n   \
    \     elif c == ' ':\n            result.append(max_depth)\n            max_depth\
    \ = 0\n            current_depth = 0\n    result.append(max_depth)\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        curr_depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           curr_depth += 1\n                max_depth = max(max_depth, curr_depth)\n\
    \            elif paren == ')':\n                curr_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 12, in parse_nested_parens\n    return [max_nested_parens(group) for group\
    \ in paren_groups]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 12, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nesting_level(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwerfe2n5.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwerfe2n5.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwerfe2n5.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwerfe2n5.py\"\
    , line 12, in parse_nested_parens\n    return [max_nesting_level(group) for group\
    \ in paren_groups]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwerfe2n5.py\"\
    , line 12, in <listcomp>\n    return [max_nesting_level(group) for group in paren_groups]\n\
    NameError: name 'max_nesting_level' is not defined\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_nesting = 0\n\
    \    current_nesting = 0\n    max_nesting_list = []\n    for char in paren_string:\n\
    \        if char == '(':\n            current_nesting += 1\n            max_nesting\
    \ = max(max_nesting, current_nesting)\n        elif char == ')':\n           \
    \ current_nesting -= 1\n        elif char == ' ':\n            max_nesting_list.append(max_nesting)\n\
    \            max_nesting = 0\n            current_nesting = 0\n    max_nesting_list.append(max_nesting)\n\
    \    return max_nesting_list\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ group in paren_string.split():\n        max_level = 0\n        current_level\
    \ = 0\n        for char in group:\n            if char == '(':\n             \
    \   current_level += 1\n                max_level = max(max_level, current_level)\n\
    \            elif char == ')':\n                current_level -= 1\n        result.append(max_level)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    return [max_nested_parens(paren_group) for paren_group in paren_groups]\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9pa46gw8.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp9pa46gw8.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9pa46gw8.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp9pa46gw8.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(paren_group) for paren_group in paren_groups]\n\
    \  File \"/tmp/tmp9pa46gw8.py\", line 12, in <listcomp>\n    return [max_nested_parens(paren_group)\
    \ for paren_group in paren_groups]\nNameError: name 'max_nested_parens' is not\
    \ defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split('\
    \ ')\n    return [max_nesting(group) for group in groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplwj3v1hr.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmplwj3v1hr.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmplwj3v1hr.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmplwj3v1hr.py\", line 12, in parse_nested_parens\n\
    \    return [max_nesting(group) for group in groups]\n  File \"/tmp/tmplwj3v1hr.py\"\
    , line 12, in <listcomp>\n    return [max_nesting(group) for group in groups]\n\
    NameError: name 'max_nesting' is not defined\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    return [max_nesting(paren_group) for paren_group in paren_groups]\n\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8egsu1wi.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8egsu1wi.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8egsu1wi.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8egsu1wi.py\"\
    , line 12, in parse_nested_parens\n    return [max_nesting(paren_group) for paren_group\
    \ in paren_groups]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8egsu1wi.py\"\
    , line 12, in <listcomp>\n    return [max_nesting(paren_group) for paren_group\
    \ in paren_groups]\nNameError: name 'max_nesting' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split('\
    \ ')\n    return [max_nested_parens(paren_group) for paren_group in paren_groups]\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10txsc8u.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp10txsc8u.py\", line 20,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp10txsc8u.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp10txsc8u.py\", line 12, in parse_nested_parens\n\
    \    return [max_nested_parens(paren_group) for paren_group in paren_groups]\n\
    \  File \"/tmp/tmp10txsc8u.py\", line 12, in <listcomp>\n    return [max_nested_parens(paren_group)\
    \ for paren_group in paren_groups]\nNameError: name 'max_nested_parens' is not\
    \ defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        current_depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif paren == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        current_depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif paren == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(find_max_nesting(paren_group))\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4tw5odmu.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp4tw5odmu.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp4tw5odmu.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp4tw5odmu.py\", line 14, in parse_nested_parens\n\
    \    max_nesting.append(find_max_nesting(paren_group))\nNameError: name 'find_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  stdout: ''
  timestamp: 1659748300
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        current_depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif paren == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split(' '):\n        max_depth = 0\n        curr_depth\
    \ = 0\n        for char in paren_group:\n            if char == '(':\n       \
    \         curr_depth += 1\n                max_depth = max(max_depth, curr_depth)\n\
    \            elif char == ')':\n                curr_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748330
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  current_depth = 0\n    result = []\n    for char in paren_string:\n       \
    \ if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \        elif char == ' ':\n            result.append(max_depth)\n           \
    \ max_depth = 0\n            current_depth = 0\n    result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for\
    \ paren_group in paren_string.split():\n        max_depth = 0\n        current_depth\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif paren == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 22, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 20, in test_check\n    check(parse_nested_parens)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 12, in parse_nested_parens\n    return [max_nested_parens(group) for group\
    \ in paren_groups]\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gubzzji.py\"\
    , line 12, in <listcomp>\n    return [max_nested_parens(group) for group in paren_groups]\n\
    NameError: name 'max_nested_parens' is not defined. Did you mean: 'parse_nested_parens'?\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n  \
    \  curr_depth = 0\n    depths = []\n    for char in paren_string:\n        if\
    \ char == '(':\n            curr_depth += 1\n            max_depth = max(max_depth,\
    \ curr_depth)\n        elif char == ')':\n            curr_depth -= 1\n      \
    \  elif char == ' ':\n            depths.append(max_depth)\n            max_depth\
    \ = 0\n            curr_depth = 0\n    depths.append(max_depth)\n    return depths\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
