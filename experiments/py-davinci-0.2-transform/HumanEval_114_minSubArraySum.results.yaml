language: py
name: HumanEval_114_minSubArraySum
results:
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpbveeajoa.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = nums[0]\n    curr_sum = 0\n    for num in nums:\n        curr_sum\
    \ += num\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n   \
    \     if curr_sum > 0:\n            curr_sum = 0\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpbveeajoa.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpbveeajoa.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpbveeajoa.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    # O(n) time, O(1) space\n    min_sum = float('inf')\n    curr_sum = 0\n\
    \    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum,\
    \ curr_sum)\n        curr_sum = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_i8wke5.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp8_i8wke5.py\", line 37,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmp8_i8wke5.py\", line\
    \ 23, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpbveeajoa.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpbveeajoa.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpbveeajoa.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpbveeajoa.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpbveeajoa.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpbveeajoa.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if not nums:\n        return 0\n    min_sum = nums[0]\n    curr_sum = nums[0]\n\
    \    for i in range(1, len(nums)):\n        curr_sum = min(nums[i], curr_sum +\
    \ nums[i])\n        min_sum = min(min_sum, curr_sum)\n    return min_sum\n\ndef\
    \ check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = nums[0]\n    curr_sum = 0\n    for num in nums:\n        curr_sum\
    \ += num\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n   \
    \     if curr_sum > 0:\n            curr_sum = 0\n    return min_sum\n\ndef check(candidate):\n\
    \    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2,\
    \ -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    if not nums:\n        return 0\n    min_sum = nums[0]\n    curr_sum = 0\n\
    \    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum,\
    \ curr_sum)\n        if curr_sum > 0:\n            curr_sum = 0\n    return min_sum\n\
    \ndef check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert\
    \ candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) ==\
    \ -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
    \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10,\
    \ -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert\
    \ candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7])\
    \ == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpbveeajoa.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpbveeajoa.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpbveeajoa.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpbveeajoa.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
    \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\
    \n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n       \
    \ curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum\
    \ = max(curr_sum, 0)\n    return min_sum\n\ndef check(candidate):\n    assert\
    \ candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n\
    \    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999])\
    \ == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert\
    \ candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert\
    \ candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) ==\
    \ -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n\
    def test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpbveeajoa.py\", line 36,\
    \ in test_check\n    check(minSubArraySum)\n  File \"/tmp/tmpbveeajoa.py\", line\
    \ 22, in check\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\nAssertionError\n"
  stdout: ''
