name: HumanEval_77_iscube
language: py
prompt: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
  \ an integer a and returns True \n    if this ingeger is a cube of some integer\
  \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
  \    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n\
  \    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n\
  \    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
  \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
  \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
  \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
  \    check(iscube)\n\ntest_check()\n"
completions: ["    if a == 0:\n        return True\n    if a < 0:\n        a = -a\n\
    \    for i in range(1, a+1):\n        if i**3 == a:\n            return True\n\
    \    return False\n", "    return a >= 0 and int(a ** (1 / 3)) ** 3 == a\n\n",
  "    return a == 0 or a == 1 or a == -1 or (a > 0 and round(a ** (1 / 3)) ** 3 ==\
    \ a)\n\n", "    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n",
  "    return a >= 0 and a == round(a ** (1 / 3)) ** 3\n\n", "    if a < 0:\n    \
    \    a = -a\n    if a == 0:\n        return True\n    i = 1\n    while i * i *\
    \ i <= a:\n        if i * i * i == a:\n            return True\n        i += 1\n\
    \    return False\n\n", "    return a == 0 or a == 1 or (a > 0 and a ** (1/3)\
    \ % 1 == 0)\n", "    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\
    \n", "    return a >= 0 and a ** (1 / 3) % 1 == 0\n\n", "    if a < 0:\n     \
    \   a = -a\n    if a == 0:\n        return True\n    if a == 1:\n        return\
    \ True\n    i = 1\n    while i * i * i <= a:\n        if i * i * i == a:\n   \
    \         return True\n        i += 1\n    return False\n\n", "    return a ==\
    \ 0 or a > 0 and a ** (1 / 3) % 1 == 0\n\n", "    if a < 0:\n        a = -a\n\
    \    if a == 0:\n        return True\n    for i in range(1, a + 1):\n        if\
    \ i ** 3 == a:\n            return True\n    return False\n\n", "    if a == 0:\n\
    \        return True\n    if a < 0:\n        a = -a\n    if a == 1:\n        return\
    \ True\n    for i in range(2, a):\n        if i ** 3 == a:\n            return\
    \ True\n    return False\n\n", "    return a == 0 or a == 1 or a == -1 or (a >\
    \ 0 and a == round(a ** (1 / 3))) or (a < 0 and a == round(a ** (1 / 3)))\n\n",
  "    return a == 0 or int(abs(a) ** (1 / 3)) ** 3 == abs(a)\n\n", "    return a\
    \ == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n", "    return a == 0 or\
    \ (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n", "    return a == 0 or a == 1 or\
    \ (a < 0 and a % 2 == 0) or (a > 0 and a % 2 == 1)\n\n", "    return a >= 0 and\
    \ a ** (1 / 3) % 1 == 0\n\n", "    return a == 0 or (a > 0 and int(a ** (1 / 3))\
    \ ** 3 == a)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
