name: HumanEval_120_maximum
language: py
prompt: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
  \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
  \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
  \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n \
  \   >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
  \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the array\
  \ will be in the range of [1, 1000].\n        2. The elements in the array will\
  \ be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
  \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
  \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
  \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2,\
  \ 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3,\
  \ 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1,\
  \ 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert\
  \ candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243,\
  \ -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\ntest_check()\n"
completions: ["    return sorted(arr, reverse=True)[:k]\n", "    arr.sort()\n    return\
    \ arr[-k:]\n", "    # O(n) time and O(k) space\n    # heapq.nlargest(k, arr)\n\
    \    # heapq.nsmallest(k, arr)\n    # return heapq.nlargest(k, arr)\n\n    # O(nlogk)\
    \ time and O(k) space\n    # heap = []\n    # for num in arr:\n    #     heapq.heappush(heap,\
    \ num)\n    #     if len(heap) > k:\n    #         heapq.heappop(heap)\n    #\
    \ return heapq.nlargest(k, heap)\n\n    # O(nlogk) time and O(k) space\n    #\
    \ heap = arr[:k]\n    # heapq.heapify(heap)\n    # for num in arr[k:]:\n    #\
    \     heapq.heappushpop(heap, num)\n    # return heapq.nlargest(k, heap)\n\n \
    \   # O(nlogk) time and O(k) space\n    # heap = arr[:k]\n    # heapq.heapify(heap)\n\
    \    # for num in arr[k:]:\n    #     if num > heap[0]:\n    #         heapq.heapreplace(heap,\
    \ num)\n    # return heapq.nlargest(k, heap)\n\n    # O(nlogk) time and O(k) space\n\
    \    # heap = arr[:k]\n    # heapq.heapify(heap)\n    # for num in arr[k:]:\n\
    \    #     if num > heap[0]:\n    #         heapq.heapreplace(heap, num)\n   \
    \ # return heapq.nlargest(k, heap)\n\n    # O(nlogk) time and O(k) space\n   \
    \ # heap = arr[:k]\n    # heapq.heapify(heap)\n    # for num in arr[k:]:\n   \
    \ #     if num > heap[0]:\n    #         heapq.heapreplace(heap, num)\n    # return\
    \ heapq.nlargest(k, heap)\n\n    # O(nlogk) time and O(k) space", "    return\
    \ sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n", "    # Time complexity: O(n log n)\n  \
    \  # Space complexity: O(n)\n    return sorted(arr, reverse=True)[:k]\n\n", " \
    \   return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    arr.sort()\n    return arr[-k:]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    arr.sort()\n    return arr[-k:]\n",
  "    if k == 0:\n        return []\n    if k == len(arr):\n        return sorted(arr)\n\
    \    if k == 1:\n        return [max(arr)]\n    return sorted(arr)[-k:]\n", " \
    \   arr.sort()\n    return arr[-k:]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    arr.sort()\n    return arr[-k:]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n       \
    \ if len(heap) > k:\n            heapq.heappop(heap)\n    return sorted(heap,\
    \ reverse=True)\n", "    # Sort the array in descending order\n    arr.sort(reverse=True)\n\
    \    # Return the first k elements\n    return arr[:k]\n", "    return sorted(arr,\
    \ reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n", "    return\
    \ sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    # return sorted(arr, reverse=True)[:k]\n    return heapq.nlargest(k, arr)\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  '    return sorted(arr, reverse=True)[:k]', "    return sorted(arr, reverse=True)[:k]\n",
  "    arr.sort()\n    return arr[-k:]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    if k == 0:\n        return []\n\
    \    elif k == len(arr):\n        return sorted(arr)\n    else:\n        return\
    \ sorted(arr)[-k:]\n", "    # Time complexity: O(n log k)\n    # Space complexity:\
    \ O(k)\n    heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n\
    \        if len(heap) > k:\n            heapq.heappop(heap)\n    return sorted(heap,\
    \ reverse=True)\n", "    return sorted(arr, reverse=True)[:k]\n", "    return\
    \ sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    heap = []\n    for i in range(k):\n\
    \        heapq.heappush(heap, -arr[i])\n    for i in range(k, len(arr)):\n   \
    \     if -arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ -arr[i])\n    return [-x for x in heap]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    heap = []\n    for i in range(k):\n\
    \        heapq.heappush(heap, -arr[i])\n    for i in range(k, len(arr)):\n   \
    \     if -arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ -arr[i])\n    return [-x for x in heap]", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    if k == 0:\n        return []\n\
    \    if k == len(arr):\n        return sorted(arr)\n    if k == 1:\n        return\
    \ [max(arr)]\n    return sorted(arr)[-k:]\n", "    arr.sort()\n    return arr[-k:]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    arr.sort()\n    return arr[-k:]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    arr.sort()\n    return arr[-k:]\n",
  "    arr.sort()\n    return arr[-k:]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    arr.sort()\n    return arr[-k:]\n\
    \n", "    return sorted(arr, reverse=True)[:k]\n", "    arr.sort()\n    return\
    \ arr[-k:]\n", "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr,\
    \ reverse=True)[:k]\n", "    arr.sort()\n    return arr[-k:]\n", "    return sorted(arr,\
    \ reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n", "    return\
    \ sorted(arr, reverse=True)[:k]\n", "    arr.sort()\n    return arr[-k:]\n", " \
    \   return sorted(arr, reverse=True)[:k]\n", "    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n", "    arr.sort()\n    return arr[-k:]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    arr.sort()\n    return arr[-k:]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    arr.sort()\n    return arr[-k:]\n", "    if k == 0:\n        return []\n  \
    \  if k == len(arr):\n        return sorted(arr)\n    heap = []\n    for i in\
    \ range(k):\n        heapq.heappush(heap, arr[i])\n    for i in range(k, len(arr)):\n\
    \        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ arr[i])\n    return sorted(heap)\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    arr.sort()\n    return arr[-k:]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    if k == 0:\n        return []\n\
    \    if k == len(arr):\n        return sorted(arr)\n    if k == 1:\n        return\
    \ [max(arr)]\n    return sorted(arr)[-k:]\n\n", "    arr.sort()\n    return arr[-k:]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    arr.sort()\n    return arr[-k:]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    arr.sort()\n    return arr[-k:]\n", "    arr.sort()\n    return arr[-k:]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    arr.sort()\n    return arr[-k:]\n", "    arr.sort()\n    return arr[-k:]\n\n",
  "    if k == 0:\n        return []\n    elif k == len(arr):\n        return sorted(arr)\n\
    \    else:\n        return sorted(arr)[-k:]\n", "    # Time complexity: O(n log\
    \ n)\n    # Space complexity: O(n)\n    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    if k == 0:\n        return []\n\
    \    if k == len(arr):\n        return sorted(arr)\n    heap = []\n    for i in\
    \ range(k):\n        heapq.heappush(heap, arr[i])\n    for i in range(k, len(arr)):\n\
    \        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ arr[i])\n    return sorted(heap)\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    heap = []\n    for i in range(k):\n\
    \        heapq.heappush(heap, arr[i])\n    for i in range(k, len(arr)):\n    \
    \    if arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ arr[i])\n    return sorted(heap, reverse=True)\n", "    # Time complexity: O(n\
    \ log k)\n    # Space complexity: O(k)\n    heap = []\n    for num in arr:\n \
    \       heapq.heappush(heap, (-num, num))\n        if len(heap) > k:\n       \
    \     heapq.heappop(heap)\n    return [num for _, num in heap]\n", "    return\
    \ sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    arr.sort()\n    return arr[-k:]\n",
  "    arr.sort()\n    return arr[-k:]\n", "    arr.sort()\n    return arr[-k:]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    arr.sort()\n    return arr[-k:]\n",
  "    arr.sort()\n    return arr[-k:]\n", "    arr.sort()\n    return arr[-k:]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    arr.sort()\n    return arr[-k:]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    if k == 0:\n        return []\n\
    \    if k == len(arr):\n        return sorted(arr)\n    return sorted(arr)[-k:]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    heap = []\n    for i in range(k):\n\
    \        heapq.heappush(heap, arr[i])\n    for i in range(k, len(arr)):\n    \
    \    if arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ arr[i])\n    return sorted(heap, reverse=True)\n", "    return sorted(arr, reverse=True)[:k]\n",
  '    return sorted(arr, reverse=True)[:k]', "    return sorted(arr, reverse=True)[:k]\n",
  "    heap = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n \
    \   for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n\
    \            heapq.heappush(heap, arr[i])\n    return sorted(heap, reverse=True)\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    arr.sort()\n    return arr[-k:]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    arr.sort()\n    return arr[-k:]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    # Time complexity: O(n log n)\n\
    \    # Space complexity: O(n)\n    arr.sort()\n    return arr[-k:]\n", "    return\
    \ sorted(arr, reverse=True)[:k]\n", "    arr.sort()\n    return arr[-k:]\n", " \
    \   heap = []\n    for i in range(len(arr)):\n        if len(heap) < k:\n    \
    \        heapq.heappush(heap, arr[i])\n        else:\n            heapq.heappushpop(heap,\
    \ arr[i])\n    return sorted(heap, reverse=True)\n", '    return sorted(arr, reverse=True)[:k]',
  "    arr.sort()\n    return arr[-k:]\n", "    arr.sort()\n    return arr[-k:]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    arr.sort()\n    return arr[-k:]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    if not arr:\n        return []\n    if k == 0:\n        return []\n    if k\
    \ == len(arr):\n        return sorted(arr)\n    if k > len(arr):\n        return\
    \ []\n    if k == 1:\n        return [max(arr)]\n    if k == 2:\n        return\
    \ sorted(arr, reverse=True)[:2]\n    if k == 3:\n        return sorted(arr, reverse=True)[:3]\n\
    \    if k == 4:\n        return sorted(arr, reverse=True)[:4]\n    if k == 5:\n\
    \        return sorted(arr, reverse=True)[:5]\n    if k == 6:\n        return\
    \ sorted(arr, reverse=True)[:6]\n    if k == 7:\n        return sorted(arr, reverse=True)[:7]\n\
    \    if k == 8:\n        return sorted(arr, reverse=True)[:8]\n    if k == 9:\n\
    \        return sorted(arr, reverse=True)[:9]\n    if k == 10:\n        return\
    \ sorted(arr, reverse=True)[:10]\n    if k == 11:\n        return sorted(arr,\
    \ reverse=True)[:11]\n    if k == 12:\n        return sorted(arr, reverse=True)[:12]\n\
    \    if k == 13:\n        return sorted(arr, reverse=True)[:13]\n    if k == 14:\n\
    \        return sorted(arr, reverse=True)[:14]\n    if k == 15:\n        return\
    \ sorted(arr, reverse=True)[:15]\n    if k == 16:\n        return sorted(arr,\
    \ reverse=True)[:16]\n    if k == 17:\n        return sorted(arr, reverse=True)[:17]\n\
    \    if k == 18:\n        return sorted(arr, reverse=True)[:18]\n    if k == 19:\n\
    \        return sorted(arr, reverse=True)[:19]\n    if k == 20:\n        return\
    \ sorted(arr, reverse=True)[:20]\n    if k == 21:\n        return sorted(arr,\
    \ reverse=True)[:21]\n    if k == 22:\n        return sorted(arr, reverse=True)[:22]\n\
    \    if k == 23", "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr,\
    \ reverse=True)[:k]\n", "    arr.sort()\n    return arr[-k:]\n", "    return sorted(arr,\
    \ reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n", "    return\
    \ sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  '    return sorted(arr, reverse=True)[:k]', "    arr.sort()\n    return arr[-k:]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    arr.sort()\n    return arr[-k:]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    arr.sort()\n    return arr[-k:]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    arr.sort()\n    return arr[-k:]\n", "    arr.sort()\n    return arr[-k:]\n",
  "    arr.sort()\n    return arr[-k:]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    # return sorted(arr, reverse=True)[:k]\n    return heapq.nlargest(k, arr)\n",
  "    if k == 0:\n        return []\n    if k == len(arr):\n        return sorted(arr)\n\
    \    arr.sort()\n    return arr[-k:]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    arr.sort()\n    return arr[-k:]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  '    return sorted(arr, reverse=True)[:k]', "    return sorted(arr, reverse=True)[:k]\n",
  "    if k == 0:\n        return []\n    elif k == len(arr):\n        return sorted(arr)\n\
    \    else:\n        return sorted(arr)[-k:]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    arr.sort()\n    return arr[-k:]\n", "    arr.sort()\n    return arr[-k:]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    arr.sort()\n    return arr[-k:]\n", "    return sorted(arr, reverse=True)[:k]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
