language: py
name: HumanEval_86_anti_shuffle
results:
- exit_code: -1
  program: "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n\
    \    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n\
    \    'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(word) if word.isalpha()\
    \ else word for word in s.split())\n\n\ndef check(candidate):\n    assert candidate('Hi')\
    \ == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number')\
    \ == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello\
    \ World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi.\
    \ My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3zfcj453.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3zfcj453.py\", line 30,\
    \ in test_check\n    check(anti_shuffle)\n  File \"/tmp/tmp3zfcj453.py\", line\
    \ 21, in check\n    assert candidate('Hi') == 'Hi'\n  File \"/tmp/tmp3zfcj453.py\"\
    , line 17, in anti_shuffle\n    return ' '.join(sorted(word) if word.isalpha()\
    \ else word for word in s.split())\nTypeError: sequence item 0: expected str instance,\
    \ list found\n"
  stdout: ''
- exit_code: -1
  program: "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n\
    \    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n\
    \    'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(word) if word.isalpha()\
    \ else word for word in s.split())\n\n\ndef check(candidate):\n    assert candidate('Hi')\
    \ == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number')\
    \ == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello\
    \ World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi.\
    \ My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3zfcj453.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3zfcj453.py\", line 30,\
    \ in test_check\n    check(anti_shuffle)\n  File \"/tmp/tmp3zfcj453.py\", line\
    \ 21, in check\n    assert candidate('Hi') == 'Hi'\n  File \"/tmp/tmp3zfcj453.py\"\
    , line 17, in anti_shuffle\n    return ' '.join(sorted(word) if word.isalpha()\
    \ else word for word in s.split())\nTypeError: sequence item 0: expected str instance,\
    \ list found\n"
  stdout: ''
- exit_code: -1
  program: "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n\
    \    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n\
    \    'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(s.split(), key=lambda\
    \ x: ''.join(sorted(x))))\n\n\ndef check(candidate):\n    assert candidate('Hi')\
    \ == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number')\
    \ == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello\
    \ World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi.\
    \ My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpifhr0p1z.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpifhr0p1z.py\", line 30,\
    \ in test_check\n    check(anti_shuffle)\n  File \"/tmp/tmpifhr0p1z.py\", line\
    \ 22, in check\n    assert candidate('hello') == 'ehllo'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n\
    \    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n\
    \    'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(word) if word.isalpha()\
    \ else word for word in s.split())\n\n\ndef check(candidate):\n    assert candidate('Hi')\
    \ == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number')\
    \ == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello\
    \ World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi.\
    \ My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3zfcj453.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3zfcj453.py\", line 30,\
    \ in test_check\n    check(anti_shuffle)\n  File \"/tmp/tmp3zfcj453.py\", line\
    \ 21, in check\n    assert candidate('Hi') == 'Hi'\n  File \"/tmp/tmp3zfcj453.py\"\
    , line 17, in anti_shuffle\n    return ' '.join(sorted(word) if word.isalpha()\
    \ else word for word in s.split())\nTypeError: sequence item 0: expected str instance,\
    \ list found\n"
  stdout: ''
- exit_code: 0
  program: "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n\
    \    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n\
    \    'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join([''.join(sorted(word))\
    \ for word in s.split()])\n\n\ndef check(candidate):\n    assert candidate('Hi')\
    \ == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number')\
    \ == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello\
    \ World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi.\
    \ My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n\
    \    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n\
    \    'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(word) if word.isalpha()\
    \ else word for word in s.split())\n\n\ndef check(candidate):\n    assert candidate('Hi')\
    \ == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number')\
    \ == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello\
    \ World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi.\
    \ My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3zfcj453.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3zfcj453.py\", line 30,\
    \ in test_check\n    check(anti_shuffle)\n  File \"/tmp/tmp3zfcj453.py\", line\
    \ 21, in check\n    assert candidate('Hi') == 'Hi'\n  File \"/tmp/tmp3zfcj453.py\"\
    , line 17, in anti_shuffle\n    return ' '.join(sorted(word) if word.isalpha()\
    \ else word for word in s.split())\nTypeError: sequence item 0: expected str instance,\
    \ list found\n"
  stdout: ''
- exit_code: -1
  program: "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n\
    \    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n\
    \    'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(s.split(), key=lambda\
    \ x: ''.join(sorted(x))))\n\n\ndef check(candidate):\n    assert candidate('Hi')\
    \ == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number')\
    \ == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello\
    \ World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi.\
    \ My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpifhr0p1z.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpifhr0p1z.py\", line 30,\
    \ in test_check\n    check(anti_shuffle)\n  File \"/tmp/tmpifhr0p1z.py\", line\
    \ 22, in check\n    assert candidate('hello') == 'ehllo'\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n\
    \    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n\
    \    'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join([''.join(sorted(word))\
    \ for word in s.split()])\n\n\ndef check(candidate):\n    assert candidate('Hi')\
    \ == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number')\
    \ == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello\
    \ World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi.\
    \ My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n\
    \    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n\
    \    'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(word) if word.isalpha()\
    \ else word for word in s.split())\n\n\ndef check(candidate):\n    assert candidate('Hi')\
    \ == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number')\
    \ == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello\
    \ World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi.\
    \ My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3zfcj453.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3zfcj453.py\", line 30,\
    \ in test_check\n    check(anti_shuffle)\n  File \"/tmp/tmp3zfcj453.py\", line\
    \ 21, in check\n    assert candidate('Hi') == 'Hi'\n  File \"/tmp/tmp3zfcj453.py\"\
    , line 17, in anti_shuffle\n    return ' '.join(sorted(word) if word.isalpha()\
    \ else word for word in s.split())\nTypeError: sequence item 0: expected str instance,\
    \ list found\n"
  stdout: ''
- exit_code: -1
  program: "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n\
    \    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n\
    \    'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(word) if word.isalpha()\
    \ else word for word in s.split())\n\n\ndef check(candidate):\n    assert candidate('Hi')\
    \ == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number')\
    \ == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello\
    \ World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi.\
    \ My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3zfcj453.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3zfcj453.py\", line 30,\
    \ in test_check\n    check(anti_shuffle)\n  File \"/tmp/tmp3zfcj453.py\", line\
    \ 21, in check\n    assert candidate('Hi') == 'Hi'\n  File \"/tmp/tmp3zfcj453.py\"\
    , line 17, in anti_shuffle\n    return ' '.join(sorted(word) if word.isalpha()\
    \ else word for word in s.split())\nTypeError: sequence item 0: expected str instance,\
    \ list found\n"
  stdout: ''
- exit_code: 0
  program: "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n\
    \    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n\
    \    'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join([''.join(sorted(word))\
    \ for word in s.split()])\n\n\ndef check(candidate):\n    assert candidate('Hi')\
    \ == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number')\
    \ == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello\
    \ World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi.\
    \ My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n\
    \    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n\
    \    'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(word) if word.isalpha()\
    \ else word for word in s.split())\n\n\ndef check(candidate):\n    assert candidate('Hi')\
    \ == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number')\
    \ == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello\
    \ World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi.\
    \ My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3zfcj453.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3zfcj453.py\", line 30,\
    \ in test_check\n    check(anti_shuffle)\n  File \"/tmp/tmp3zfcj453.py\", line\
    \ 21, in check\n    assert candidate('Hi') == 'Hi'\n  File \"/tmp/tmp3zfcj453.py\"\
    , line 17, in anti_shuffle\n    return ' '.join(sorted(word) if word.isalpha()\
    \ else word for word in s.split())\nTypeError: sequence item 0: expected str instance,\
    \ list found\n"
  stdout: ''
- exit_code: -1
  program: "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n\
    \    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n\
    \    'Hello !!!Wdlor'\n    \"\"\"\n    return \"\".join(sorted(word, key=lambda\
    \ x: ord(x)) if word.isalpha() else word for word in s.split())\n\n\ndef check(candidate):\n\
    \    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n\
    \    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n\
    \    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('')\
    \ == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') ==\
    \ '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7oi57s3n.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp7oi57s3n.py\", line 30,\
    \ in test_check\n    check(anti_shuffle)\n  File \"/tmp/tmp7oi57s3n.py\", line\
    \ 21, in check\n    assert candidate('Hi') == 'Hi'\n  File \"/tmp/tmp7oi57s3n.py\"\
    , line 17, in anti_shuffle\n    return \"\".join(sorted(word, key=lambda x: ord(x))\
    \ if word.isalpha() else word for word in s.split())\nTypeError: sequence item\
    \ 0: expected str instance, list found\n"
  stdout: ''
- exit_code: -1
  program: "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n\
    \    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n\
    \    'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(word) if word.isalpha()\
    \ else word for word in s.split())\n\n\ndef check(candidate):\n    assert candidate('Hi')\
    \ == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number')\
    \ == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello\
    \ World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi.\
    \ My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3zfcj453.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3zfcj453.py\", line 30,\
    \ in test_check\n    check(anti_shuffle)\n  File \"/tmp/tmp3zfcj453.py\", line\
    \ 21, in check\n    assert candidate('Hi') == 'Hi'\n  File \"/tmp/tmp3zfcj453.py\"\
    , line 17, in anti_shuffle\n    return ' '.join(sorted(word) if word.isalpha()\
    \ else word for word in s.split())\nTypeError: sequence item 0: expected str instance,\
    \ list found\n"
  stdout: ''
- exit_code: -1
  program: "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n\
    \    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n\
    \    'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(s.split(), key=lambda\
    \ x: ''.join(sorted(x))))\n\n\ndef check(candidate):\n    assert candidate('Hi')\
    \ == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number')\
    \ == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello\
    \ World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi.\
    \ My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpifhr0p1z.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpifhr0p1z.py\", line 30,\
    \ in test_check\n    check(anti_shuffle)\n  File \"/tmp/tmpifhr0p1z.py\", line\
    \ 22, in check\n    assert candidate('hello') == 'ehllo'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n\
    \    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n\
    \    'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(s.split(), key=lambda\
    \ x: ''.join(sorted(x))))\n\n\ndef check(candidate):\n    assert candidate('Hi')\
    \ == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number')\
    \ == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello\
    \ World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi.\
    \ My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpifhr0p1z.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpifhr0p1z.py\", line 30,\
    \ in test_check\n    check(anti_shuffle)\n  File \"/tmp/tmpifhr0p1z.py\", line\
    \ 22, in check\n    assert candidate('hello') == 'ehllo'\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n\
    \    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n\
    \    'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join([''.join(sorted(word))\
    \ for word in s.split()])\n\n\ndef check(candidate):\n    assert candidate('Hi')\
    \ == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number')\
    \ == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello\
    \ World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi.\
    \ My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n\
    \    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n\
    \    'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(word) if word.isalpha()\
    \ else word for word in s.split())\n\n\ndef check(candidate):\n    assert candidate('Hi')\
    \ == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number')\
    \ == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello\
    \ World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi.\
    \ My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3zfcj453.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3zfcj453.py\", line 30,\
    \ in test_check\n    check(anti_shuffle)\n  File \"/tmp/tmp3zfcj453.py\", line\
    \ 21, in check\n    assert candidate('Hi') == 'Hi'\n  File \"/tmp/tmp3zfcj453.py\"\
    , line 17, in anti_shuffle\n    return ' '.join(sorted(word) if word.isalpha()\
    \ else word for word in s.split())\nTypeError: sequence item 0: expected str instance,\
    \ list found\n"
  stdout: ''
- exit_code: -1
  program: "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n\
    \    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n\
    \    'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(s.split(), key=lambda\
    \ x: ''.join(sorted(x))))\n\n\ndef check(candidate):\n    assert candidate('Hi')\
    \ == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number')\
    \ == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello\
    \ World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi.\
    \ My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpifhr0p1z.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpifhr0p1z.py\", line 30,\
    \ in test_check\n    check(anti_shuffle)\n  File \"/tmp/tmpifhr0p1z.py\", line\
    \ 22, in check\n    assert candidate('hello') == 'ehllo'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a string and returns an ordered version of it.\n    Ordered version of\
    \ string, is a string where all words (separated by space)\n    are replaced by\
    \ a new word where all the characters arranged in\n    ascending order based on\
    \ ascii value.\n    Note: You should keep the order of words and blank spaces\
    \ in the sentence.\n\n    For example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n\
    \    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n\
    \    'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(s.split(), key=lambda\
    \ x: ''.join(sorted(x))))\n\n\ndef check(candidate):\n    assert candidate('Hi')\
    \ == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number')\
    \ == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello\
    \ World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi.\
    \ My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy'\n\ndef test_check():\n    check(anti_shuffle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpifhr0p1z.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpifhr0p1z.py\", line 30,\
    \ in test_check\n    check(anti_shuffle)\n  File \"/tmp/tmpifhr0p1z.py\", line\
    \ 22, in check\n    assert candidate('hello') == 'ehllo'\nAssertionError\n"
  stdout: ''
