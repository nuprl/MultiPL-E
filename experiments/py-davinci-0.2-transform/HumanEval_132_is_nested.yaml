name: HumanEval_132_is_nested
language: py
prompt: "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that\
  \ takes a string as input which contains only square brackets.\n    The function\
  \ should return True if and only if there is a valid subsequence of brackets \n\
  \    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n\
  \    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n\
  \    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n  \
  \  True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('[[]]') == True\n    assert candidate('[]]]]]]][[[[[]')\
  \ == False\n    assert candidate('[][]') == False\n    assert candidate('[]') ==\
  \ False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]')\
  \ == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]')\
  \ == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[')\
  \ == True\n    assert candidate('[[][]]') == True\n    assert candidate('') == False\n\
  \    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') ==\
  \ False\n\ndef test_check():\n    check(is_nested)\n\ntest_check()\n"
completions: ["    stack = []\n    for char in string:\n        if char == '[':\n\
    \            stack.append(char)\n        else:\n            if len(stack) == 0:\n\
    \                return False\n            stack.pop()\n    return len(stack)\
    \ > 0\n\n", "    stack = []\n    for char in string:\n        if char == '[':\n\
    \            stack.append(char)\n        elif char == ']':\n            if stack:\n\
    \                stack.pop()\n            else:\n                return False\n\
    \    return True\n\n", "    if len(string) == 0:\n        return False\n    if\
    \ len(string) == 1:\n        return False\n    if len(string) == 2:\n        return\
    \ True\n    if len(string) == 3:\n        return False\n    if string[0] == '['\
    \ and string[1] == '[' and string[2] == ']':\n        return True\n    if string[0]\
    \ == '[' and string[1] == ']' and string[2] == ']':\n        return False\n  \
    \  if string[0] == '[' and string[1] == ']' and string[2] == '[':\n        return\
    \ True\n    if string[0] == ']' and string[1] == '[' and string[2] == '[':\n \
    \       return False\n    if string[0] == ']' and string[1] == '[' and string[2]\
    \ == ']':\n        return False\n    if string[0] == ']' and string[1] == ']'\
    \ and string[2] == '[':\n        return False\n    if string[0] == ']' and string[1]\
    \ == ']' and string[2] == ']':\n        return False\n    if string[0] == ']'\
    \ and string[1] == ']' and string[2] == ']':\n        return False\n    if string[0]\
    \ == ']' and string[1] == ']' and string[2] == ']':\n        return False\n  \
    \  if string[0] == ']' and string[1] == ']' and string[2] == ']':\n        return\
    \ False\n    if string[0] == ']' and string[1] == ']' and string[2] == ']':\n\
    \        return False\n    if string[0] == ']' and string[1] == ']' and string[2]\
    \ == ']':\n        return False\n    if string[0] == ']' and string[1] == ']'\
    \ and string[2] == ']':\n        return False\n    if string[0] == ']' and string[1]\
    \ == ']' and string[2] == ']':\n        return False\n    if string[0] == ']'\
    \ and string[1] == ']' and string[2] == '", "    stack = []\n    for char in string:\n\
    \        if char == '[':\n            stack.append(char)\n        elif char ==\
    \ ']':\n            if not stack:\n                return False\n            stack.pop()\n\
    \    return len(stack) > 0\n\n", "    stack = []\n    for char in string:\n  \
    \      if char == '[':\n            stack.append(char)\n        elif char == ']':\n\
    \            if not stack:\n                return False\n            stack.pop()\n\
    \    return len(stack) > 0\n\n", "    stack = []\n    for bracket in string:\n\
    \        if bracket == '[':\n            stack.append(bracket)\n        else:\n\
    \            if not stack:\n                return False\n            stack.pop()\n\
    \    return len(stack) > 0\n\n", "    stack = []\n    for bracket in string:\n\
    \        if bracket == '[':\n            stack.append(bracket)\n        elif bracket\
    \ == ']':\n            if stack:\n                stack.pop()\n            else:\n\
    \                return False\n    return len(stack) > 0\n\n", "    stack = []\n\
    \    for char in string:\n        if char == '[':\n            stack.append(char)\n\
    \        else:\n            if len(stack) == 0:\n                return False\n\
    \            stack.pop()\n    return len(stack) > 0\n\n", "    stack = []\n  \
    \  for c in string:\n        if c == '[':\n            stack.append(c)\n     \
    \   else:\n            if not stack:\n                return False\n         \
    \   stack.pop()\n    return len(stack) > 0\n\n", "    stack = []\n    for char\
    \ in string:\n        if char == '[':\n            stack.append(char)\n      \
    \  elif char == ']':\n            if stack:\n                stack.pop()\n   \
    \         else:\n                return False\n    return len(stack) > 0\n\n",
  "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n\
    \        elif char == ']':\n            if not stack:\n                return\
    \ False\n            stack.pop()\n    return True\n\n", "    stack = []\n    for\
    \ char in string:\n        if char == '[':\n            stack.append(char)\n \
    \       else:\n            if stack:\n                stack.pop()\n          \
    \  else:\n                return False\n    return True\n\n", "    stack = []\n\
    \    for char in string:\n        if char == '[':\n            stack.append(char)\n\
    \        else:\n            if stack:\n                stack.pop()\n         \
    \   else:\n                return False\n    return len(stack) > 1\n\n", "   \
    \ stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n\
    \        else:\n            if stack:\n                stack.pop()\n         \
    \   else:\n                return False\n    return len(stack) > 1\n\n", "   \
    \ stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n\
    \        elif char == ']':\n            if not stack:\n                return\
    \ False\n            stack.pop()\n    return len(stack) > 0\n\n", "    stack =\
    \ []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n\
    \        elif char == ']':\n            if stack:\n                stack.pop()\n\
    \            else:\n                return False\n    return len(stack) > 0\n\n",
  "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n\
    \        else:\n            if stack:\n                stack.pop()\n         \
    \   else:\n                return False\n    return True\n\n", "    stack = []\n\
    \    for char in string:\n        if char == '[':\n            stack.append(char)\n\
    \        else:\n            if stack:\n                stack.pop()\n         \
    \   else:\n                return False\n    return len(stack) > 1\n\n", "   \
    \ stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n\
    \        elif char == ']':\n            if not stack:\n                return\
    \ False\n            stack.pop()\n    return len(stack) > 0\n\n", "    stack =\
    \ []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n\
    \        else:\n            if stack:\n                stack.pop()\n         \
    \   else:\n                return False\n    return True\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
