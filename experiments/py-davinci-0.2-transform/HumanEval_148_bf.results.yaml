language: py
name: HumanEval_148_bf
results:
- exit_code: -1
  program: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
    \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
    \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    The function should return a tuple containing\
    \ all planets whose orbits are \n    located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
    \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
    \ names. \n    Examples\n    >>> bf('Jupiter', 'Neptune')\n    ('Saturn', 'Uranus')\n\
    \    >>> bf('Earth', 'Mercury')\n    'Venus'\n    >>> bf('Mercury', 'Uranus')\n\
    \    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])\n\
    \ndef check(candidate):\n    assert candidate('Jupiter', 'Neptune') == ('Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Mercury') == ('Venus',)\n    assert\
    \ candidate('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n\
    \    assert candidate('Neptune', 'Venus') == ('Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Earth') == ()\n    assert candidate('Mars',\
    \ 'Earth') == ()\n    assert candidate('Jupiter', 'Makemake') == ()\n\ndef test_check():\n\
    \    check(bf)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps36xoz1o.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmps36xoz1o.py\", line 38,\
    \ in test_check\n    check(bf)\n  File \"/tmp/tmps36xoz1o.py\", line 30, in check\n\
    \    assert candidate('Earth', 'Mercury') == ('Venus',)\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
    \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
    \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    The function should return a tuple containing\
    \ all planets whose orbits are \n    located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
    \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
    \ names. \n    Examples\n    >>> bf('Jupiter', 'Neptune')\n    ('Saturn', 'Uranus')\n\
    \    >>> bf('Earth', 'Mercury')\n    'Venus'\n    >>> bf('Mercury', 'Uranus')\n\
    \    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    if planets.index(planet1) < planets.index(planet2):\n        return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])\n\
    \    else:\n        return tuple(planets[planets.index(planet2)+1:planets.index(planet1)])\n\
    \ndef check(candidate):\n    assert candidate('Jupiter', 'Neptune') == ('Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Mercury') == ('Venus',)\n    assert\
    \ candidate('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n\
    \    assert candidate('Neptune', 'Venus') == ('Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Earth') == ()\n    assert candidate('Mars',\
    \ 'Earth') == ()\n    assert candidate('Jupiter', 'Makemake') == ()\n\ndef test_check():\n\
    \    check(bf)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
    \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
    \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    The function should return a tuple containing\
    \ all planets whose orbits are \n    located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
    \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
    \ names. \n    Examples\n    >>> bf('Jupiter', 'Neptune')\n    ('Saturn', 'Uranus')\n\
    \    >>> bf('Earth', 'Mercury')\n    'Venus'\n    >>> bf('Mercury', 'Uranus')\n\
    \    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if\
    \ start < end:\n        return planets[start+1:end]\n    else:\n        return\
    \ planets[end+1:start]\n\ndef check(candidate):\n    assert candidate('Jupiter',\
    \ 'Neptune') == ('Saturn', 'Uranus')\n    assert candidate('Earth', 'Mercury')\
    \ == ('Venus',)\n    assert candidate('Mercury', 'Uranus') == ('Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn')\n    assert candidate('Neptune', 'Venus') == ('Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus')\n    assert candidate('Earth', 'Earth')\
    \ == ()\n    assert candidate('Mars', 'Earth') == ()\n    assert candidate('Jupiter',\
    \ 'Makemake') == ()\n\ndef test_check():\n    check(bf)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
    \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
    \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    The function should return a tuple containing\
    \ all planets whose orbits are \n    located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
    \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
    \ names. \n    Examples\n    >>> bf('Jupiter', 'Neptune')\n    ('Saturn', 'Uranus')\n\
    \    >>> bf('Earth', 'Mercury')\n    'Venus'\n    >>> bf('Mercury', 'Uranus')\n\
    \    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])\n\
    \ndef check(candidate):\n    assert candidate('Jupiter', 'Neptune') == ('Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Mercury') == ('Venus',)\n    assert\
    \ candidate('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n\
    \    assert candidate('Neptune', 'Venus') == ('Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Earth') == ()\n    assert candidate('Mars',\
    \ 'Earth') == ()\n    assert candidate('Jupiter', 'Makemake') == ()\n\ndef test_check():\n\
    \    check(bf)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps36xoz1o.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmps36xoz1o.py\", line 38,\
    \ in test_check\n    check(bf)\n  File \"/tmp/tmps36xoz1o.py\", line 30, in check\n\
    \    assert candidate('Earth', 'Mercury') == ('Venus',)\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
    \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
    \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    The function should return a tuple containing\
    \ all planets whose orbits are \n    located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
    \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
    \ names. \n    Examples\n    >>> bf('Jupiter', 'Neptune')\n    ('Saturn', 'Uranus')\n\
    \    >>> bf('Earth', 'Mercury')\n    'Venus'\n    >>> bf('Mercury', 'Uranus')\n\
    \    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if\
    \ start < end:\n        return planets[start+1:end]\n    else:\n        return\
    \ planets[end+1:start]\n\ndef check(candidate):\n    assert candidate('Jupiter',\
    \ 'Neptune') == ('Saturn', 'Uranus')\n    assert candidate('Earth', 'Mercury')\
    \ == ('Venus',)\n    assert candidate('Mercury', 'Uranus') == ('Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn')\n    assert candidate('Neptune', 'Venus') == ('Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus')\n    assert candidate('Earth', 'Earth')\
    \ == ()\n    assert candidate('Mars', 'Earth') == ()\n    assert candidate('Jupiter',\
    \ 'Makemake') == ()\n\ndef test_check():\n    check(bf)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
    \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
    \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    The function should return a tuple containing\
    \ all planets whose orbits are \n    located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
    \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
    \ names. \n    Examples\n    >>> bf('Jupiter', 'Neptune')\n    ('Saturn', 'Uranus')\n\
    \    >>> bf('Earth', 'Mercury')\n    'Venus'\n    >>> bf('Mercury', 'Uranus')\n\
    \    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(planets[planets.index(planet1) + 1:planets.index(planet2)])\n\
    \ndef check(candidate):\n    assert candidate('Jupiter', 'Neptune') == ('Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Mercury') == ('Venus',)\n    assert\
    \ candidate('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n\
    \    assert candidate('Neptune', 'Venus') == ('Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Earth') == ()\n    assert candidate('Mars',\
    \ 'Earth') == ()\n    assert candidate('Jupiter', 'Makemake') == ()\n\ndef test_check():\n\
    \    check(bf)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2pvrz6m.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmph2pvrz6m.py\", line 38,\
    \ in test_check\n    check(bf)\n  File \"/tmp/tmph2pvrz6m.py\", line 30, in check\n\
    \    assert candidate('Earth', 'Mercury') == ('Venus',)\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
    \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
    \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    The function should return a tuple containing\
    \ all planets whose orbits are \n    located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
    \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
    \ names. \n    Examples\n    >>> bf('Jupiter', 'Neptune')\n    ('Saturn', 'Uranus')\n\
    \    >>> bf('Earth', 'Mercury')\n    'Venus'\n    >>> bf('Mercury', 'Uranus')\n\
    \    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(planets[planets.index(planet1) + 1:planets.index(planet2)])\n\
    \ndef check(candidate):\n    assert candidate('Jupiter', 'Neptune') == ('Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Mercury') == ('Venus',)\n    assert\
    \ candidate('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n\
    \    assert candidate('Neptune', 'Venus') == ('Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Earth') == ()\n    assert candidate('Mars',\
    \ 'Earth') == ()\n    assert candidate('Jupiter', 'Makemake') == ()\n\ndef test_check():\n\
    \    check(bf)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2pvrz6m.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmph2pvrz6m.py\", line 38,\
    \ in test_check\n    check(bf)\n  File \"/tmp/tmph2pvrz6m.py\", line 30, in check\n\
    \    assert candidate('Earth', 'Mercury') == ('Venus',)\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
    \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
    \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    The function should return a tuple containing\
    \ all planets whose orbits are \n    located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
    \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
    \ names. \n    Examples\n    >>> bf('Jupiter', 'Neptune')\n    ('Saturn', 'Uranus')\n\
    \    >>> bf('Earth', 'Mercury')\n    'Venus'\n    >>> bf('Mercury', 'Uranus')\n\
    \    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])\n\
    \ndef check(candidate):\n    assert candidate('Jupiter', 'Neptune') == ('Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Mercury') == ('Venus',)\n    assert\
    \ candidate('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n\
    \    assert candidate('Neptune', 'Venus') == ('Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Earth') == ()\n    assert candidate('Mars',\
    \ 'Earth') == ()\n    assert candidate('Jupiter', 'Makemake') == ()\n\ndef test_check():\n\
    \    check(bf)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps36xoz1o.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmps36xoz1o.py\", line 38,\
    \ in test_check\n    check(bf)\n  File \"/tmp/tmps36xoz1o.py\", line 30, in check\n\
    \    assert candidate('Earth', 'Mercury') == ('Venus',)\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
    \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
    \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    The function should return a tuple containing\
    \ all planets whose orbits are \n    located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
    \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
    \ names. \n    Examples\n    >>> bf('Jupiter', 'Neptune')\n    ('Saturn', 'Uranus')\n\
    \    >>> bf('Earth', 'Mercury')\n    'Venus'\n    >>> bf('Mercury', 'Uranus')\n\
    \    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        planet1_index = planets.index(planet1)\n        planet2_index\
    \ = planets.index(planet2)\n        if planet1_index < planet2_index:\n      \
    \      return planets[planet1_index+1:planet2_index]\n        else:\n        \
    \    return planets[planet2_index+1:planet1_index]\n\ndef check(candidate):\n\
    \    assert candidate('Jupiter', 'Neptune') == ('Saturn', 'Uranus')\n    assert\
    \ candidate('Earth', 'Mercury') == ('Venus',)\n    assert candidate('Mercury',\
    \ 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    assert candidate('Neptune',\
    \ 'Venus') == ('Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus')\n    assert candidate('Earth',\
    \ 'Earth') == ()\n    assert candidate('Mars', 'Earth') == ()\n    assert candidate('Jupiter',\
    \ 'Makemake') == ()\n\ndef test_check():\n    check(bf)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
    \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
    \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    The function should return a tuple containing\
    \ all planets whose orbits are \n    located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
    \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
    \ names. \n    Examples\n    >>> bf('Jupiter', 'Neptune')\n    ('Saturn', 'Uranus')\n\
    \    >>> bf('Earth', 'Mercury')\n    'Venus'\n    >>> bf('Mercury', 'Uranus')\n\
    \    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        start = planets.index(planet1)\n        end = planets.index(planet2)\n\
    \        if start > end:\n            return planets[end:start]\n        else:\n\
    \            return planets[start:end]\n\ndef check(candidate):\n    assert candidate('Jupiter',\
    \ 'Neptune') == ('Saturn', 'Uranus')\n    assert candidate('Earth', 'Mercury')\
    \ == ('Venus',)\n    assert candidate('Mercury', 'Uranus') == ('Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn')\n    assert candidate('Neptune', 'Venus') == ('Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus')\n    assert candidate('Earth', 'Earth')\
    \ == ()\n    assert candidate('Mars', 'Earth') == ()\n    assert candidate('Jupiter',\
    \ 'Makemake') == ()\n\ndef test_check():\n    check(bf)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5tf3l10i.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp5tf3l10i.py\", line 43,\
    \ in test_check\n    check(bf)\n  File \"/tmp/tmp5tf3l10i.py\", line 34, in check\n\
    \    assert candidate('Jupiter', 'Neptune') == ('Saturn', 'Uranus')\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
    \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
    \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    The function should return a tuple containing\
    \ all planets whose orbits are \n    located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
    \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
    \ names. \n    Examples\n    >>> bf('Jupiter', 'Neptune')\n    ('Saturn', 'Uranus')\n\
    \    >>> bf('Earth', 'Mercury')\n    'Venus'\n    >>> bf('Mercury', 'Uranus')\n\
    \    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])\n\
    \ndef check(candidate):\n    assert candidate('Jupiter', 'Neptune') == ('Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Mercury') == ('Venus',)\n    assert\
    \ candidate('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n\
    \    assert candidate('Neptune', 'Venus') == ('Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Earth') == ()\n    assert candidate('Mars',\
    \ 'Earth') == ()\n    assert candidate('Jupiter', 'Makemake') == ()\n\ndef test_check():\n\
    \    check(bf)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps36xoz1o.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmps36xoz1o.py\", line 38,\
    \ in test_check\n    check(bf)\n  File \"/tmp/tmps36xoz1o.py\", line 30, in check\n\
    \    assert candidate('Earth', 'Mercury') == ('Venus',)\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
    \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
    \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    The function should return a tuple containing\
    \ all planets whose orbits are \n    located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
    \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
    \ names. \n    Examples\n    >>> bf('Jupiter', 'Neptune')\n    ('Saturn', 'Uranus')\n\
    \    >>> bf('Earth', 'Mercury')\n    'Venus'\n    >>> bf('Mercury', 'Uranus')\n\
    \    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n    planets\
    \ = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(planets[planets.index(planet1) + 1:planets.index(planet2)])\n\
    \ndef check(candidate):\n    assert candidate('Jupiter', 'Neptune') == ('Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Mercury') == ('Venus',)\n    assert\
    \ candidate('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n\
    \    assert candidate('Neptune', 'Venus') == ('Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Earth') == ()\n    assert candidate('Mars',\
    \ 'Earth') == ()\n    assert candidate('Jupiter', 'Makemake') == ()\n\ndef test_check():\n\
    \    check(bf)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir8113rj.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpir8113rj.py\", line 38,\
    \ in test_check\n    check(bf)\n  File \"/tmp/tmpir8113rj.py\", line 30, in check\n\
    \    assert candidate('Earth', 'Mercury') == ('Venus',)\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
    \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
    \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    The function should return a tuple containing\
    \ all planets whose orbits are \n    located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
    \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
    \ names. \n    Examples\n    >>> bf('Jupiter', 'Neptune')\n    ('Saturn', 'Uranus')\n\
    \    >>> bf('Earth', 'Mercury')\n    'Venus'\n    >>> bf('Mercury', 'Uranus')\n\
    \    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        start = planets.index(planet1)\n        end = planets.index(planet2)\n\
    \        if start > end:\n            return planets[end+1:start]\n        else:\n\
    \            return planets[start+1:end]\n\ndef check(candidate):\n    assert\
    \ candidate('Jupiter', 'Neptune') == ('Saturn', 'Uranus')\n    assert candidate('Earth',\
    \ 'Mercury') == ('Venus',)\n    assert candidate('Mercury', 'Uranus') == ('Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    assert candidate('Neptune', 'Venus')\
    \ == ('Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus')\n    assert candidate('Earth',\
    \ 'Earth') == ()\n    assert candidate('Mars', 'Earth') == ()\n    assert candidate('Jupiter',\
    \ 'Makemake') == ()\n\ndef test_check():\n    check(bf)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
    \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
    \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    The function should return a tuple containing\
    \ all planets whose orbits are \n    located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
    \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
    \ names. \n    Examples\n    >>> bf('Jupiter', 'Neptune')\n    ('Saturn', 'Uranus')\n\
    \    >>> bf('Earth', 'Mercury')\n    'Venus'\n    >>> bf('Mercury', 'Uranus')\n\
    \    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])\n\
    \ndef check(candidate):\n    assert candidate('Jupiter', 'Neptune') == ('Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Mercury') == ('Venus',)\n    assert\
    \ candidate('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n\
    \    assert candidate('Neptune', 'Venus') == ('Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Earth') == ()\n    assert candidate('Mars',\
    \ 'Earth') == ()\n    assert candidate('Jupiter', 'Makemake') == ()\n\ndef test_check():\n\
    \    check(bf)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps36xoz1o.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmps36xoz1o.py\", line 38,\
    \ in test_check\n    check(bf)\n  File \"/tmp/tmps36xoz1o.py\", line 30, in check\n\
    \    assert candidate('Earth', 'Mercury') == ('Venus',)\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
    \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
    \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    The function should return a tuple containing\
    \ all planets whose orbits are \n    located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
    \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
    \ names. \n    Examples\n    >>> bf('Jupiter', 'Neptune')\n    ('Saturn', 'Uranus')\n\
    \    >>> bf('Earth', 'Mercury')\n    'Venus'\n    >>> bf('Mercury', 'Uranus')\n\
    \    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    if planets.index(planet1) > planets.index(planet2):\n        return ()\n\
    \    return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])\n\n\
    def check(candidate):\n    assert candidate('Jupiter', 'Neptune') == ('Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Mercury') == ('Venus',)\n    assert\
    \ candidate('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n\
    \    assert candidate('Neptune', 'Venus') == ('Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Earth') == ()\n    assert candidate('Mars',\
    \ 'Earth') == ()\n    assert candidate('Jupiter', 'Makemake') == ()\n\ndef test_check():\n\
    \    check(bf)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnz7evdji.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpnz7evdji.py\", line 39,\
    \ in test_check\n    check(bf)\n  File \"/tmp/tmpnz7evdji.py\", line 31, in check\n\
    \    assert candidate('Earth', 'Mercury') == ('Venus',)\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
    \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
    \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    The function should return a tuple containing\
    \ all planets whose orbits are \n    located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
    \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
    \ names. \n    Examples\n    >>> bf('Jupiter', 'Neptune')\n    ('Saturn', 'Uranus')\n\
    \    >>> bf('Earth', 'Mercury')\n    'Venus'\n    >>> bf('Mercury', 'Uranus')\n\
    \    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if\
    \ start < end:\n        return planets[start+1:end]\n    else:\n        return\
    \ planets[end+1:start]\n\ndef check(candidate):\n    assert candidate('Jupiter',\
    \ 'Neptune') == ('Saturn', 'Uranus')\n    assert candidate('Earth', 'Mercury')\
    \ == ('Venus',)\n    assert candidate('Mercury', 'Uranus') == ('Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn')\n    assert candidate('Neptune', 'Venus') == ('Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus')\n    assert candidate('Earth', 'Earth')\
    \ == ()\n    assert candidate('Mars', 'Earth') == ()\n    assert candidate('Jupiter',\
    \ 'Makemake') == ()\n\ndef test_check():\n    check(bf)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
    \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
    \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    The function should return a tuple containing\
    \ all planets whose orbits are \n    located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
    \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
    \ names. \n    Examples\n    >>> bf('Jupiter', 'Neptune')\n    ('Saturn', 'Uranus')\n\
    \    >>> bf('Earth', 'Mercury')\n    'Venus'\n    >>> bf('Mercury', 'Uranus')\n\
    \    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    if planets.index(planet1) > planets.index(planet2):\n        return tuple(planets[planets.index(planet2)\
    \ + 1: planets.index(planet1)])\n    else:\n        return tuple(planets[planets.index(planet1)\
    \ + 1: planets.index(planet2)])\n\ndef check(candidate):\n    assert candidate('Jupiter',\
    \ 'Neptune') == ('Saturn', 'Uranus')\n    assert candidate('Earth', 'Mercury')\
    \ == ('Venus',)\n    assert candidate('Mercury', 'Uranus') == ('Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn')\n    assert candidate('Neptune', 'Venus') == ('Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus')\n    assert candidate('Earth', 'Earth')\
    \ == ()\n    assert candidate('Mars', 'Earth') == ()\n    assert candidate('Jupiter',\
    \ 'Makemake') == ()\n\ndef test_check():\n    check(bf)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
    \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
    \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    The function should return a tuple containing\
    \ all planets whose orbits are \n    located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
    \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
    \ names. \n    Examples\n    >>> bf('Jupiter', 'Neptune')\n    ('Saturn', 'Uranus')\n\
    \    >>> bf('Earth', 'Mercury')\n    'Venus'\n    >>> bf('Mercury', 'Uranus')\n\
    \    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])\n\
    \nprint(bf('Mercury', 'Uranus'))\ndef check(candidate):\n    assert candidate('Jupiter',\
    \ 'Neptune') == ('Saturn', 'Uranus')\n    assert candidate('Earth', 'Mercury')\
    \ == ('Venus',)\n    assert candidate('Mercury', 'Uranus') == ('Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn')\n    assert candidate('Neptune', 'Venus') == ('Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus')\n    assert candidate('Earth', 'Earth')\
    \ == ()\n    assert candidate('Mars', 'Earth') == ()\n    assert candidate('Jupiter',\
    \ 'Makemake') == ()\n\ndef test_check():\n    check(bf)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpefhv259q.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpefhv259q.py\", line 39,\
    \ in test_check\n    check(bf)\n  File \"/tmp/tmpefhv259q.py\", line 31, in check\n\
    \    assert candidate('Earth', 'Mercury') == ('Venus',)\nAssertionError\n"
  stdout: '(''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'')

    '
- exit_code: 0
  program: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
    \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
    \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    The function should return a tuple containing\
    \ all planets whose orbits are \n    located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
    \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
    \ names. \n    Examples\n    >>> bf('Jupiter', 'Neptune')\n    ('Saturn', 'Uranus')\n\
    \    >>> bf('Earth', 'Mercury')\n    'Venus'\n    >>> bf('Mercury', 'Uranus')\n\
    \    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    if planets.index(planet1) > planets.index(planet2):\n        planet1, planet2\
    \ = planet2, planet1\n    return tuple(planets[planets.index(planet1) + 1:planets.index(planet2)])\n\
    \ndef check(candidate):\n    assert candidate('Jupiter', 'Neptune') == ('Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Mercury') == ('Venus',)\n    assert\
    \ candidate('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n\
    \    assert candidate('Neptune', 'Venus') == ('Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Earth') == ()\n    assert candidate('Mars',\
    \ 'Earth') == ()\n    assert candidate('Jupiter', 'Makemake') == ()\n\ndef test_check():\n\
    \    check(bf)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
    \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
    \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    The function should return a tuple containing\
    \ all planets whose orbits are \n    located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
    \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
    \ names. \n    Examples\n    >>> bf('Jupiter', 'Neptune')\n    ('Saturn', 'Uranus')\n\
    \    >>> bf('Earth', 'Mercury')\n    'Venus'\n    >>> bf('Mercury', 'Uranus')\n\
    \    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if\
    \ start > end:\n        start, end = end, start\n    return planets[start+1:end]\n\
    \ndef check(candidate):\n    assert candidate('Jupiter', 'Neptune') == ('Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Mercury') == ('Venus',)\n    assert\
    \ candidate('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n\
    \    assert candidate('Neptune', 'Venus') == ('Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus')\n    assert candidate('Earth', 'Earth') == ()\n    assert candidate('Mars',\
    \ 'Earth') == ()\n    assert candidate('Jupiter', 'Makemake') == ()\n\ndef test_check():\n\
    \    check(bf)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
