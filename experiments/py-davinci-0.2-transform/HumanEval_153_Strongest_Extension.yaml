name: HumanEval_153_Strongest_Extension
language: py
prompt: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
  \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
  \ and a list of extensions.\n    The extensions are to be used to load additional\
  \ classes to the class. The\n    strength of the extension is as follows: Let CAP\
  \ be the number of the uppercase\n    letters in the extension's name, and let SM\
  \ be the number of lowercase letters \n    in the extension's name, the strength\
  \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
  \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
  \    If there are two or more extensions with the same strength, you should\n  \
  \  choose the one that comes first in the list.\n    For example, if you are given\
  \ \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese',\
  \ 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
  \ is the strongest extension \n    (its strength is -1).\n    Example:\n    >>>\
  \ Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\
  \"\"\n"
tests: "def check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
  \ == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe',\
  \ '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t',\
  \ 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
  \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
  \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
  \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n\
  \    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
  \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
  \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
  \ntest_check()\n"
completions: ["    # your code here\n    return\n", "    # your code here\n    return\
    \ class_name + \".\" + max(extensions, key=lambda x: sum(1 for c in x if c.isupper())\
    \ - sum(1 for c in x if c.islower()))\n", "    strongest_extension = ''\n    strongest_strength\
    \ = 0\n    for extension in extensions:\n        strength = 0\n        for char\
    \ in extension:\n            if char.isupper():\n                strength += 1\n\
    \            else:\n                strength -= 1\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return class_name + '.' + strongest_extension\n", "    # your\
    \ code here\n    return class_name + '.' + max(extensions, key=lambda x: (sum(1\
    \ for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n", "    # Your\
    \ code here\n    # You can add another function if you need to.\n    # Don't change\
    \ the name of the function.\n    # Don't change the name of the input parameters.\n\
    \    # Don't change the return type.\n    # Don't change the number of input parameters.\n\
    \    # Don't use any other imports.\n    # Don't use break or continue.\n    #\
    \ Don't use try, except, raise, assert, or eval.\n    # Don't use any string methods.\n\
    \    # Don't use any list methods.\n    # Don't use any dictionary methods.\n\
    \    # Don't use any set methods.\n    # Don't use any other built-in methods.\n\
    \    # Don't use any while loops.\n    # Don't use any for loops.\n    # Don't\
    \ use recursion.\n    # Don't use any sort functions.\n    # Don't use any sorted\
    \ functions.\n    # Don't use any reversed functions.\n    # Don't use any sum\
    \ functions.\n    # Don't use any len functions.\n    # Don't use any enumerate\
    \ functions.\n    # Don't use any any or all functions.\n    # Don't use any complex\
    \ numbers.\n    # Don't use any math functions.\n    # Don't use any random functions.\n\
    \    # Don't use any itertools functions.\n    # Don't use any operator functions.\n\
    \    # Don't use any functools functions.\n    # Don't use any collections functions.\n\
    \    # Don't use any heapq functions.\n    # Don't use any queue functions.\n\
    \    # Don't use any bisect functions.\n    # Don't use any array functions.\n\
    \    # Don't use any ctypes functions.\n    # Don't use any struct functions.\n\
    \    # Don't use any fcntl functions.\n    # Don't use any select functions.\n\
    \    # Don't use any mmap functions.\n    # Don't use any readline functions.\n\
    \    # Don't use any rlcompleter functions.\n    # Don't use any curses functions.\n\
    \    # Don't use any curses.ascii functions.\n    # Don't use any curses.panel\
    \ functions.\n    # Don't use any curses.textpad functions.\n    # Don't use any\
    \ curses.", "    # Get the strength of each extension\n    strengths = [sum(1\
    \ for c in ext if c.isupper()) - sum(1 for c in ext if c.islower()) for ext in\
    \ extensions]\n    # Get the index of the strongest extension\n    strongest_extension_index\
    \ = strengths.index(max(strengths))\n    # Return the class name and the strongest\
    \ extension\n    return class_name + '.' + extensions[strongest_extension_index]\n",
  "    # your code here\n    return ''\n", "    # Get the number of uppercase and\
    \ lowercase letters in each extension\n    # and calculate the strength of each\
    \ extension\n    strengths = [sum(1 for letter in extension if letter.isupper())\
    \ -\n                 sum(1 for letter in extension if letter.islower())\n   \
    \              for extension in extensions]\n    # Get the index of the strongest\
    \ extension\n    strongest_index = strengths.index(max(strengths))\n    # Return\
    \ the class name and the strongest extension\n    return class_name + '.' + extensions[strongest_index]\n",
  "    # your code here\n    return ''\n", "    # your code here\n    return \"\"\n",
  "    # your code here\n    return None\n", "    # your code here\n    return ''\n",
  "    strongest_extension = ''\n    strength = 0\n    for extension in extensions:\n\
    \        cap = 0\n        sm = 0\n        for letter in extension:\n         \
    \   if letter.isupper():\n                cap += 1\n            else:\n      \
    \          sm += 1\n        if cap - sm > strength:\n            strength = cap\
    \ - sm\n            strongest_extension = extension\n    return class_name + '.'\
    \ + strongest_extension\n", "    # your code here\n    return class_name + '.'\
    \ + max(extensions, key=lambda x: sum(1 for i in x if i.isupper()) - sum(1 for\
    \ i in x if i.islower()))\n", "    # your code here\n    return None\n", "   \
    \ strength = 0\n    strongest_extension = ''\n    for extension in extensions:\n\
    \        cap = 0\n        sm = 0\n        for letter in extension:\n         \
    \   if letter.isupper():\n                cap += 1\n            else:\n      \
    \          sm += 1\n        if cap - sm > strength:\n            strength = cap\
    \ - sm\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n",
  "    # your code here\n    return\n", "    # your code here\n    return 'my_class.AA'\n\
    \n", "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda\
    \ x: len(re.findall(r'[A-Z]', x)) - len(re.findall(r'[a-z]', x)))\n", "    strongest_extension\
    \ = ''\n    strongest_strength = 0\n    for extension in extensions:\n       \
    \ strength = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                strength += 1\n            else:\n                strength -=\
    \ 1\n        if strength > strongest_strength:\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n",
  "    strongest_extension = extensions[0]\n    strongest_extension_strength = 0\n\
    \    for extension in extensions:\n        extension_strength = 0\n        for\
    \ letter in extension:\n            if letter.isupper():\n                extension_strength\
    \ += 1\n            else:\n                extension_strength -= 1\n        if\
    \ extension_strength > strongest_extension_strength:\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension\n    return\
    \ f'{class_name}.{strongest_extension}'\n", "    strength = 0\n    strongest_extension\
    \ = ''\n    for extension in extensions:\n        cap = sum(1 for c in extension\
    \ if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n   \
    \     if cap - sm > strength:\n            strength = cap - sm\n            strongest_extension\
    \ = extension\n    return f'{class_name}.{strongest_extension}'\n", "    strongest_extension\
    \ = extensions[0]\n    strongest_strength = 0\n    for extension in extensions:\n\
    \        strength = len(re.findall('[A-Z]', extension)) - len(re.findall('[a-z]',\
    \ extension))\n        if strength > strongest_strength:\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n    return class_name\
    \ + '.' + strongest_extension\n", "    strongest = 0\n    strongest_extension\
    \ = ''\n    for extension in extensions:\n        cap = 0\n        sm = 0\n  \
    \      for letter in extension:\n            if letter.isupper():\n          \
    \      cap += 1\n            else:\n                sm += 1\n        strength\
    \ = cap - sm\n        if strength > strongest:\n            strongest = strength\n\
    \            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n",
  "    strongest_extension = ''\n    strongest_strength = 0\n    for extension in\
    \ extensions:\n        strength = len([char for char in extension if char.isupper()])\
    \ - len([char for char in extension if char.islower()])\n        if strength >\
    \ strongest_strength:\n            strongest_strength = strength\n           \
    \ strongest_extension = extension\n    return class_name + '.' + strongest_extension\n",
  "    # your code here\n    return None\n", "    # your code here\n    return ''\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), x))\n", "    # Write your code here\n\
    \    # Hint: You can use the built-in function ord() to get the ASCII code of\
    \ a character.\n    #       For example, ord('A') returns 65.\n    #       You\
    \ can use the built-in function chr() to get the character of an ASCII code.\n\
    \    #       For example, chr(65) returns 'A'.\n    #       You can use the built-in\
    \ function len() to get the length of a string.\n    #       For example, len('Hello')\
    \ returns 5.\n    #       You can use the built-in function range() to get a list\
    \ of numbers.\n    #       For example, range(5) returns [0, 1, 2, 3, 4].\n  \
    \  #       You can use the built-in function enumerate() to get the index of an\
    \ item in a list.\n    #       For example, enumerate(['a', 'b', 'c']) returns\
    \ [(0, 'a'), (1, 'b'), (2, 'c')].\n    #       You can use the built-in function\
    \ max() to get the maximum value in a list.\n    #       For example, max([1,\
    \ 2, 3]) returns 3.\n    #       You can use the built-in function min() to get\
    \ the minimum value in a list.\n    #       For example, min([1, 2, 3]) returns\
    \ 1.\n    #       You can use the built-in function sum() to get the sum of a\
    \ list.\n    #       For example, sum([1, 2, 3]) returns 6.\n    #       You can\
    \ use the built-in function sorted() to sort a list.\n    #       For example,\
    \ sorted([3, 1, 2]) returns [1, 2, 3].\n    #       You can use the built-in function\
    \ reversed() to reverse a list.\n    #       For example, reversed([3, 1, 2])\
    \ returns [2, 1, 3].\n    #       You can use the built-in function zip() to combine\
    \ two lists.\n    #       For example, zip([1, 2, 3], ['a', 'b', 'c']) returns\
    \ [(1, 'a'), (2, 'b'), (3, 'c')].\n    #       You can use the built-", "    #\
    \ your code here\n    return class_name + '.' + max(extensions, key=lambda x:\
    \ (sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n", " \
    \   # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n",
  "    # Create a list of tuples with the strength of each extension\n    strength\
    \ = [(extension, (sum(1 for letter in extension if letter.isupper()) - sum(1 for\
    \ letter in extension if letter.islower()))) for extension in extensions]\n  \
    \  # Sort the list of tuples by the strength of the extension\n    strength.sort(key=lambda\
    \ x: x[1], reverse=True)\n    # Return the class name and the strongest extension\n\
    \    return f'{class_name}.{strength[0][0]}'\n", "    # your code here\n    return\
    \ class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if c.isupper())\
    \ - sum(1 for c in x if c.islower()))\n", "    # your code here\n    return None\n",
  "    # your code here\n    pass\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), -sum(1\
    \ for c in x if c.islower())))\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: x.count(x.upper()) - x.count(x.lower()))\n",
  "    strongest_extension = extensions[0]\n    strongest_extension_strength = 0\n\
    \    for extension in extensions:\n        extension_strength = 0\n        for\
    \ letter in extension:\n            if letter.isupper():\n                extension_strength\
    \ += 1\n            else:\n                extension_strength -= 1\n        if\
    \ extension_strength > strongest_extension_strength:\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension\n    return\
    \ class_name + '.' + strongest_extension\n", "    # your code here\n    return\
    \ ''\n", "    # your code here\n    return None\n", "    # your code here\n  \
    \  return\n", "    # your code here\n    return class_name + '.' + max(extensions,\
    \ key=lambda x: (sum(1 for c in x if c.isupper()), x))\n", "    # your code here\n\
    \    return class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x\
    \ if c.isupper()) - sum(1 for c in x if c.islower()))\n", "    # Create a dictionary\
    \ to store the extensions and their strengths\n    strengths = {}\n    # Iterate\
    \ through the extensions\n    for extension in extensions:\n        # Count the\
    \ number of uppercase letters\n        uppercase = sum(1 for letter in extension\
    \ if letter.isupper())\n        # Count the number of lowercase letters\n    \
    \    lowercase = sum(1 for letter in extension if letter.islower())\n        #\
    \ Calculate the strength of the extension\n        strength = uppercase - lowercase\n\
    \        # Add the extension and its strength to the dictionary\n        strengths[extension]\
    \ = strength\n    # Find the strongest extension\n    strongest = max(strengths,\
    \ key=strengths.get)\n    # Return the class name and the strongest extension\n\
    \    return f'{class_name}.{strongest}'\n", "    # Write your code here\n    strongest\
    \ = 0\n    strongest_extension = ''\n    for extension in extensions:\n      \
    \  cap = 0\n        sm = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                cap += 1\n            else:\n                sm += 1\n      \
    \  if cap - sm > strongest:\n            strongest = cap - sm\n            strongest_extension\
    \ = extension\n    return class_name + '.' + strongest_extension\n", "    # Write\
    \ your code here\n    max_strength = -float('inf')\n    max_extension = ''\n \
    \   for extension in extensions:\n        strength = sum(1 for letter in extension\
    \ if letter.isupper()) - sum(1 for letter in extension if letter.islower())\n\
    \        if strength > max_strength:\n            max_strength = strength\n  \
    \          max_extension = extension\n    return class_name + '.' + max_extension\n",
  "    # your code here\n    return None\n", "    # your code here\n    return ''\n",
  "    # your code here\n    return ''\n", "    strength = 0\n    strongest_extension\
    \ = ''\n    for extension in extensions:\n        cap = 0\n        sm = 0\n  \
    \      for letter in extension:\n            if letter.isupper():\n          \
    \      cap += 1\n            else:\n                sm += 1\n        if cap -\
    \ sm > strength:\n            strength = cap - sm\n            strongest_extension\
    \ = extension\n    return class_name + '.' + strongest_extension\n", "    # your\
    \ code here\n    return None\n", "    # your code here\n    return class_name\
    \ + \".\" + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), x))\n",
  "    # your code here\n    pass\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: sum(1 for c in x if c.isupper()) - sum(1\
    \ for c in x if c.islower()))\n", "    # your code here\n    return None\n", " \
    \   # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n",
  "    # your code here\n    return ''\n", "    strongest_extension = extensions[0]\n\
    \    strongest_extension_strength = 0\n    for extension in extensions:\n    \
    \    extension_strength = sum(1 for letter in extension if letter.isupper()) -\
    \ sum(1 for letter in extension if letter.islower())\n        if extension_strength\
    \ > strongest_extension_strength:\n            strongest_extension = extension\n\
    \            strongest_extension_strength = extension_strength\n    return f'{class_name}.{strongest_extension}'\n",
  "    # your code here\n    return ''\n", "    # Write your code here\n    # Hint:\
    \ You can use the built-in function ord() to get the ASCII code of a character.\n\
    \    #       For example, ord('A') returns 65.\n    #       You can use the built-in\
    \ function chr() to get the character from its ASCII code.\n    #       For example,\
    \ chr(65) returns 'A'.\n    #       You can use the built-in function len() to\
    \ get the length of a string.\n    #       For example, len('ABC') returns 3.\n\
    \    #       You can use the built-in function range() to get a list of numbers.\n\
    \    #       For example, range(3) returns [0, 1, 2].\n    #       You can use\
    \ the built-in function enumerate() to get the index and the value of a list.\n\
    \    #       For example, enumerate(['A', 'B', 'C']) returns [(0, 'A'), (1, 'B'),\
    \ (2, 'C')].\n    #       You can use the built-in function max() to get the maximum\
    \ value of a list.\n    #       For example, max([1, 2, 3]) returns 3.\n    #\
    \       You can use the built-in function min() to get the minimum value of a\
    \ list.\n    #       For example, min([1, 2, 3]) returns 1.\n    #       You can\
    \ use the built-in function abs() to get the absolute value of a number.\n   \
    \ #       For example, abs(-1) returns 1.\n    #       You can use the built-in\
    \ function sum() to get the sum of a list.\n    #       For example, sum([1, 2,\
    \ 3]) returns 6.\n    #       You can use the built-in function sorted() to sort\
    \ a list.\n    #       For example, sorted([3, 1, 2]) returns [1, 2, 3].\n   \
    \ #       You can use the built-in function reversed() to reverse a list.\n  \
    \  #       For example, reversed([3, 1, 2]) returns [2, 1, 3].\n    #       You\
    \ can use the built-in function zip() to combine two lists.\n    #       For example,\
    \ zip([1, 2, 3], ['A', 'B', '", "    # your code here\n    return ''\n", "   \
    \ # your code here\n    return None\n\n", "    # your code here\n    return\n",
  "    strength = 0\n    strongest_extension = ''\n    for extension in extensions:\n\
    \        CAP = 0\n        SM = 0\n        for letter in extension:\n         \
    \   if letter.isupper():\n                CAP += 1\n            elif letter.islower():\n\
    \                SM += 1\n        if CAP - SM > strength:\n            strength\
    \ = CAP - SM\n            strongest_extension = extension\n    return class_name\
    \ + '.' + strongest_extension\n", "    strength = 0\n    strongest_extension =\
    \ ''\n    for extension in extensions:\n        cap = sum(1 for c in extension\
    \ if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n   \
    \     if cap - sm > strength:\n            strength = cap - sm\n            strongest_extension\
    \ = extension\n    return f'{class_name}.{strongest_extension}'\n", "    # your\
    \ code here\n    return ''\n\n", "    strength = 0\n    strongest_extension =\
    \ ''\n    for extension in extensions:\n        CAP = 0\n        SM = 0\n    \
    \    for letter in extension:\n            if letter.isupper():\n            \
    \    CAP += 1\n            else:\n                SM += 1\n        if CAP - SM\
    \ > strength:\n            strength = CAP - SM\n            strongest_extension\
    \ = extension\n    return class_name + '.' + strongest_extension\n", "    # your\
    \ code here\n    return\n", "    # your code here\n    return None\n\n", "   \
    \ # your code here\n    pass\n\n", "    # your code here\n    return \"\"\n",
  "    # your code here\n    return ''\n", "    strongest_extension = ''\n    strongest_strength\
    \ = 0\n    for extension in extensions:\n        strength = 0\n        for letter\
    \ in extension:\n            if letter.isupper():\n                strength +=\
    \ 1\n            else:\n                strength -= 1\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return class_name + '.' + strongest_extension\n", "    # your\
    \ code here\n    pass\n\n", "    strength = 0\n    strongest_extension = ''\n\
    \    for extension in extensions:\n        CAP = 0\n        SM = 0\n        for\
    \ letter in extension:\n            if letter.isupper():\n                CAP\
    \ += 1\n            else:\n                SM += 1\n        if CAP - SM > strength:\n\
    \            strength = CAP - SM\n            strongest_extension = extension\n\
    \    return class_name + '.' + strongest_extension\n", "    # Get the number of\
    \ uppercase letters in the extension's name\n    def get_caps(extension):\n  \
    \      return sum(1 for c in extension if c.isupper())\n    # Get the number of\
    \ lowercase letters in the extension's name\n    def get_smalls(extension):\n\
    \        return sum(1 for c in extension if c.islower())\n    # Get the strength\
    \ of the extension\n    def get_strength(extension):\n        return get_caps(extension)\
    \ - get_smalls(extension)\n    # Get the strongest extension\n    strongest_extension\
    \ = max(extensions, key=get_strength)\n    return f'{class_name}.{strongest_extension}'\n",
  "    # your code here\n    return None\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), -sum(1\
    \ for c in x if c.islower())))\n", "    strength = 0\n    strongest_extension\
    \ = ''\n    for extension in extensions:\n        CAP = 0\n        SM = 0\n  \
    \      for letter in extension:\n            if letter.isupper():\n          \
    \      CAP += 1\n            else:\n                SM += 1\n        if CAP -\
    \ SM > strength:\n            strength = CAP - SM\n            strongest_extension\
    \ = extension\n    return class_name + '.' + strongest_extension\n", "    # your\
    \ code here\n    return class_name + '.' + max(extensions, key=lambda x: sum(1\
    \ for c in x if c.isupper()) - sum(1 for c in x if c.islower()))\n", "    # your\
    \ code here\n    return\n", "    # your code here\n    return None\n", "    #\
    \ your code here\n    return ''\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: sum(1 for c in x if c.isupper()) - sum(1\
    \ for c in x if c.islower()))\n", "    # your code here\n    pass\n\n", "    #\
    \ your code here\n    return ''\n", "    # your code here\n    return None\n",
  "    # Write your code here\n    strongest_extension = ''\n    strongest_strength\
    \ = 0\n    for ext in extensions:\n        strength = 0\n        for letter in\
    \ ext:\n            if letter.isupper():\n                strength += 1\n    \
    \        else:\n                strength -= 1\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ ext\n    return class_name + '.' + strongest_extension\n", "    # your code\
    \ here\n    return class_name + '.' + max(extensions, key=lambda x: sum(1 for\
    \ c in x if c.isupper()) - sum(1 for c in x if c.islower()))\n", "    # your code\
    \ here\n    pass\n\n", "    strength = -1\n    strongest_extension = \"\"\n  \
    \  for extension in extensions:\n        CAP = len([letter for letter in extension\
    \ if letter.isupper()])\n        SM = len([letter for letter in extension if letter.islower()])\n\
    \        if CAP - SM > strength:\n            strength = CAP - SM\n          \
    \  strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\
    \n", "    strongest_extension = ''\n    strongest_strength = 0\n    for extension\
    \ in extensions:\n        strength = 0\n        for letter in extension:\n   \
    \         if letter.isupper():\n                strength += 1\n            else:\n\
    \                strength -= 1\n        if strength > strongest_strength:\n  \
    \          strongest_strength = strength\n            strongest_extension = extension\n\
    \    return class_name + '.' + strongest_extension\n", "    # your code here\n\
    \    return None\n\n", "    strongest_extension = ''\n    strongest_strength =\
    \ 0\n    for extension in extensions:\n        strength = 0\n        for letter\
    \ in extension:\n            if letter.isupper():\n                strength +=\
    \ 1\n            else:\n                strength -= 1\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return class_name + '.' + strongest_extension\n", "    # your\
    \ code here\n    return \"\"\n", "    # Your code here\n    # You can add another\
    \ function if you need to\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n",
  "    # your code here\n    return None\n", "    strongest = 0\n    strongest_extension\
    \ = ''\n    for extension in extensions:\n        strength = 0\n        for letter\
    \ in extension:\n            if letter.isupper():\n                strength +=\
    \ 1\n            elif letter.islower():\n                strength -= 1\n     \
    \   if strength > strongest:\n            strongest = strength\n            strongest_extension\
    \ = extension\n    return class_name + '.' + strongest_extension\n", "    strongest_extension\
    \ = ''\n    strongest_extension_strength = 0\n    for extension in extensions:\n\
    \        extension_strength = 0\n        for letter in extension:\n          \
    \  if letter.isupper():\n                extension_strength += 1\n           \
    \ else:\n                extension_strength -= 1\n        if extension_strength\
    \ > strongest_extension_strength:\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension\n    return\
    \ class_name + '.' + strongest_extension\n", "    # your code here\n    return\
    \ class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()),\
    \ x))\n", "    strength = -1\n    strongest_extension = ''\n    for extension\
    \ in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n\
    \        sm = sum(1 for char in extension if char.islower())\n        if cap -\
    \ sm > strength:\n            strength = cap - sm\n            strongest_extension\
    \ = extension\n    return class_name + '.' + strongest_extension\n", "    # your\
    \ code here\n    return ''\n", "    # Create a list of tuples with the strength\
    \ of each extension\n    strength_list = []\n    for extension in extensions:\n\
    \        strength = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                strength += 1\n            elif letter.islower():\n         \
    \       strength -= 1\n        strength_list.append((strength, extension))\n \
    \   # Sort the list of tuples by strength\n    strength_list.sort(key=lambda x:\
    \ x[0], reverse=True)\n    # Return the class name and the strongest extension\n\
    \    return class_name + '.' + strength_list[0][1]\n", "    # your code here\n\
    \    return class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x\
    \ if c.isupper()) - sum(1 for c in x if c.islower()))\n", "    # Create a dictionary\
    \ of extensions and their strengths\n    ext_dict = {}\n    for ext in extensions:\n\
    \        ext_dict[ext] = sum(1 for c in ext if c.isupper()) - sum(1 for c in ext\
    \ if c.islower())\n    # Find the strongest extension\n    strongest_ext = max(ext_dict,\
    \ key=ext_dict.get)\n    return f'{class_name}.{strongest_ext}'\n", "    strongest_extension\
    \ = ''\n    strongest_strength = 0\n    for extension in extensions:\n       \
    \ strength = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                strength += 1\n            else:\n                strength -=\
    \ 1\n        if strength > strongest_strength:\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n    return class_name\
    \ + '.' + strongest_extension\n", "    strongest_extension = ''\n    strongest_strength\
    \ = 0\n    for extension in extensions:\n        strength = sum(1 for letter in\
    \ extension if letter.isupper()) - sum(1 for letter in extension if letter.islower())\n\
    \        if strength > strongest_strength:\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n",
  "    # your code here\n    return \"\"\n", "    strongest_extension = extensions[0]\n\
    \    strongest_strength = 0\n    for extension in extensions:\n        strength\
    \ = 0\n        for letter in extension:\n            if letter.isupper():\n  \
    \              strength += 1\n            else:\n                strength -= 1\n\
    \        if strength > strongest_strength:\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n",
  "    # Your code here\n    # You can add another function if you need to\n    strength\
    \ = 0\n    strongest_extension = ''\n    for extension in extensions:\n      \
    \  CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in\
    \ extension if c.islower())\n        if CAP - SM > strength:\n            strength\
    \ = CAP - SM\n            strongest_extension = extension\n    return class_name\
    \ + '.' + strongest_extension\n", "    # your code here\n    return None\n", " \
    \   # your code here\n    return None\n", "    # your code here\n    return ''\n",
  "    # your code here\n    return ''\n", "    strength = 0\n    strongest_extension\
    \ = ''\n    for extension in extensions:\n        CAP = sum(1 for c in extension\
    \ if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n   \
    \     if CAP - SM > strength:\n            strength = CAP - SM\n            strongest_extension\
    \ = extension\n    return f'{class_name}.{strongest_extension}'\n", "    # your\
    \ code here\n    return \"\"\n", "    strength = -1\n    strongest_extension =\
    \ ''\n    for extension in extensions:\n        cap = 0\n        sm = 0\n    \
    \    for letter in extension:\n            if letter.isupper():\n            \
    \    cap += 1\n            else:\n                sm += 1\n        if cap - sm\
    \ > strength:\n            strength = cap - sm\n            strongest_extension\
    \ = extension\n    return class_name + '.' + strongest_extension\n", "    strongest_extension\
    \ = ''\n    strength = 0\n    for extension in extensions:\n        CAP = sum(1\
    \ for letter in extension if letter.isupper())\n        SM = sum(1 for letter\
    \ in extension if letter.islower())\n        if CAP - SM > strength:\n       \
    \     strength = CAP - SM\n            strongest_extension = extension\n    return\
    \ class_name + '.' + strongest_extension\n", "    # Get the strength of each extension\n\
    \    strengths = [sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\
    \ for ext in extensions]\n    # Find the strongest extension\n    strongest =\
    \ max(strengths)\n    # Return the class name with the strongest extension\n \
    \   return class_name + '.' + extensions[strengths.index(strongest)]\n", "   \
    \ # Your code here\n    # You can add another function if you need to.\n    pass\n",
  "    # your code here\n    return\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), -sum(1\
    \ for c in x if c.islower())))\n", "    strength = 0\n    strongest_extension\
    \ = ''\n    for extension in extensions:\n        cap = 0\n        sm = 0\n  \
    \      for char in extension:\n            if char.isupper():\n              \
    \  cap += 1\n            else:\n                sm += 1\n        if cap - sm >\
    \ strength:\n            strength = cap - sm\n            strongest_extension\
    \ = extension\n    return class_name + '.' + strongest_extension\n", "    # your\
    \ code here\n    return ''\n", "    # your code here\n    return \"\"\n", "  \
    \  # your code here\n    return\n", "    # your code here\n    return \"\"\n",
  "    strongest_extension = ''\n    strength = 0\n    for extension in extensions:\n\
    \        CAP = 0\n        SM = 0\n        for letter in extension:\n         \
    \   if letter.isupper():\n                CAP += 1\n            elif letter.islower():\n\
    \                SM += 1\n        if CAP - SM > strength:\n            strength\
    \ = CAP - SM\n            strongest_extension = extension\n    return class_name\
    \ + '.' + strongest_extension\n", "    # Your code here\n    # You can add another\
    \ function if you want\n    # You can add as many imports as you want\n    # You\
    \ are not allowed to use any external libraries\n    # You can use the standard\
    \ library\n    # You can use the built-in functions\n    # You can use the built-in\
    \ modules\n    # You can use the built-in classes\n    # You can use the built-in\
    \ methods\n    # You can use the built-in attributes\n    # You can use the built-in\
    \ properties\n    # You can use the built-in constants\n    # You can use the\
    \ built-in exceptions\n    # You can use the built-in decorators\n    # You can\
    \ use the built-in functions\n    # You can use the built-in types\n    # You\
    \ can use the built-in variables\n    # You can use the built-in generators\n\
    \    # You can use the built-in iterators\n    # You can use the built-in context\
    \ managers\n    # You can use the built-in coroutines\n    # You can use the built-in\
    \ asynchronous generators\n    # You can use the built-in asynchronous iterators\n\
    \    # You can use the built-in asynchronous context managers\n    # You can use\
    \ the built-in asynchronous coroutines\n    # You can use the built-in metaclasses\n\
    \    # You can use the built-in descriptors\n    # You can use the built-in functions\n\
    \    # You can use the built-in types\n    # You can use the built-in variables\n\
    \    # You can use the built-in generators\n    # You can use the built-in iterators\n\
    \    # You can use the built-in context managers\n    # You can use the built-in\
    \ coroutines\n    # You can use the built-in asynchronous generators\n    # You\
    \ can use the built-in asynchronous iterators\n    # You can use the built-in\
    \ asynchronous context managers\n    # You can use the built-in asynchronous coroutines\n\
    \    # You can use the built-in metaclasses\n    # You can use the built-in descriptors\n\
    \    # You can use the built-in functions\n    # You can use the built-in types\n\
    \    # You can use the built-in variables\n    # You can use the built-in generators\n\
    \   ", "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))", " \
    \   # your code here\n    return\n", "    strongest = 0\n    strongest_extension\
    \ = ''\n    for extension in extensions:\n        upper = 0\n        lower = 0\n\
    \        for letter in extension:\n            if letter.isupper():\n        \
    \        upper += 1\n            else:\n                lower += 1\n        if\
    \ upper - lower > strongest:\n            strongest = upper - lower\n        \
    \    strongest_extension = extension\n    return class_name + '.' + strongest_extension\n",
  "    # your code here\n    return \"\"\n", "    # your code here\n    pass\n\n",
  "    strength = 0\n    strongest_extension = ''\n    for extension in extensions:\n\
    \        CAP = 0\n        SM = 0\n        for letter in extension:\n         \
    \   if letter.isupper():\n                CAP += 1\n            else:\n      \
    \          SM += 1\n        if CAP - SM > strength:\n            strength = CAP\
    \ - SM\n            strongest_extension = extension\n    return class_name + '.'\
    \ + strongest_extension\n", "    # your code here\n    return class_name + '.'\
    \ + max(extensions, key=lambda x: sum(1 for c in x if c.isupper()) - sum(1 for\
    \ c in x if c.islower()))\n", "    strongest_extension = extensions[0]\n    strongest_strength\
    \ = 0\n    for extension in extensions:\n        strength = 0\n        for letter\
    \ in extension:\n            if letter.isupper():\n                strength +=\
    \ 1\n            else:\n                strength -= 1\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return class_name + '.' + strongest_extension\n", "    # your\
    \ code here\n    return class_name + '.' + max(extensions, key=lambda x: (sum(1\
    \ for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n", "    # your\
    \ code here\n    return class_name + '.' + max(extensions, key=lambda x: (sum(1\
    \ for i in x if i.isupper()), x))\n", "    # your code here\n    return\n", " \
    \   # your code here\n    pass\n\n", "    # Write your code here\n    pass\n",
  "    # Get the strength of each extension\n    strengths = [sum(1 for c in ext if\
    \ c.isupper()) - sum(1 for c in ext if c.islower()) for ext in extensions]\n \
    \   # Get the index of the strongest extension\n    index = strengths.index(max(strengths))\n\
    \    # Return the strongest extension\n    return f'{class_name}.{extensions[index]}'\n",
  "    strongest_extension = extensions[0]\n    strongest_extension_strength = 0\n\
    \    for extension in extensions:\n        extension_strength = 0\n        for\
    \ letter in extension:\n            if letter.isupper():\n                extension_strength\
    \ += 1\n            else:\n                extension_strength -= 1\n        if\
    \ extension_strength > strongest_extension_strength:\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension\n    return\
    \ f'{class_name}.{strongest_extension}'\n", "    strongest = 0\n    strongest_extension\
    \ = ''\n    for extension in extensions:\n        CAP = 0\n        SM = 0\n  \
    \      for letter in extension:\n            if letter.isupper():\n          \
    \      CAP += 1\n            else:\n                SM += 1\n        strength\
    \ = CAP - SM\n        if strength > strongest:\n            strongest = strength\n\
    \            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n",
  "    # your code here\n    return ''\n", "    # your code here\n    pass\n", " \
    \   # your code here\n    return ''\n", "    # your code here\n    return None\n",
  "    strongest_extension = extensions[0]\n    strongest_strength = 0\n    for extension\
    \ in extensions:\n        strength = len(re.findall(r'[A-Z]', extension)) - len(re.findall(r'[a-z]',\
    \ extension))\n        if strength > strongest_strength:\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n",
  "    strongest = 0\n    strongest_extension = ''\n    for extension in extensions:\n\
    \        strength = sum(1 for char in extension if char.isupper()) - sum(1 for\
    \ char in extension if char.islower())\n        if strength > strongest:\n   \
    \         strongest = strength\n            strongest_extension = extension\n\
    \    return f'{class_name}.{strongest_extension}'\n", "    # your code here\n\
    \    return ''\n", "    strength = 0\n    strongest_extension = ''\n    for extension\
    \ in extensions:\n        CAP = 0\n        SM = 0\n        for letter in extension:\n\
    \            if letter.isupper():\n                CAP += 1\n            elif\
    \ letter.islower():\n                SM += 1\n        if CAP - SM > strength:\n\
    \            strength = CAP - SM\n            strongest_extension = extension\n\
    \    return class_name + '.' + strongest_extension\n", "    strength = 0\n   \
    \ strongest_extension = ''\n    for extension in extensions:\n        cap = 0\n\
    \        sm = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                cap += 1\n            else:\n                sm += 1\n      \
    \  if cap - sm > strength:\n            strength = cap - sm\n            strongest_extension\
    \ = extension\n    return class_name + '.' + strongest_extension\n", "    # your\
    \ code here\n    return\n", "    # Get the strength of each extension\n    strengths\
    \ = [sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower()) for\
    \ ext in extensions]\n    # Get the index of the strongest extension\n    strongest_extension_index\
    \ = strengths.index(max(strengths))\n    # Return the strongest extension\n  \
    \  return f'{class_name}.{extensions[strongest_extension_index]}'\n", "    # your\
    \ code here\n    return class_name + '.' + max(extensions, key=lambda x: (sum(1\
    \ for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n", "    strongest\
    \ = 0\n    strongest_extension = ''\n    for extension in extensions:\n      \
    \  strength = len([x for x in extension if x.isupper()]) - len([x for x in extension\
    \ if x.islower()])\n        if strength > strongest:\n            strongest =\
    \ strength\n            strongest_extension = extension\n    return class_name\
    \ + '.' + strongest_extension\n", "    # your code here\n    pass\n\n", "    strongest_extension\
    \ = ''\n    strongest_strength = 0\n    for extension in extensions:\n       \
    \ strength = len([char for char in extension if char.isupper()]) - len([char for\
    \ char in extension if char.islower()])\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return class_name + '.' + strongest_extension\n", "    # Write\
    \ your code here\n    # Hint: You can use the function ord() to get the ASCII\
    \ code of a character.\n    #       For example, ord('A') = 65, ord('a') = 97.\n\
    \    #       You can use the function chr() to get the character of an ASCII code.\n\
    \    #       For example, chr(65) = 'A', chr(97) = 'a'.\n    #       You can use\
    \ the function len() to get the length of a string.\n    #       For example,\
    \ len('ABC') = 3.\n    #       You can use the function range() to get a list\
    \ of numbers.\n    #       For example, range(5) = [0, 1, 2, 3, 4].\n    #   \
    \    You can use the function list() to get a list from a string.\n    #     \
    \  For example, list('ABC') = ['A', 'B', 'C'].\n    #       You can use the function\
    \ str() to get a string from a list.\n    #       For example, str(['A', 'B',\
    \ 'C']) = 'ABC'.\n    #       You can use the function isupper() to check if a\
    \ character is uppercase.\n    #       For example, isupper('A') = True, isupper('a')\
    \ = False.\n    #       You can use the function islower() to check if a character\
    \ is lowercase.\n    #       For example, islower('A') = False, islower('a') =\
    \ True.\n    #       You can use the function max() to get the maximum value of\
    \ a list.\n    #       For example, max([1, 2, 3]) = 3.\n    #       You can use\
    \ the function min() to get the minimum value of a list.\n    #       For example,\
    \ min([1, 2, 3]) = 1.\n    #       You can use the function sum() to get the sum\
    \ of a list.\n    #       For example, sum([1, 2, 3]) = 6.\n    #       You can\
    \ use the function abs() to get the absolute value of a number.\n    #       For\
    \ example, abs(-1) = 1.\n    #       You can use the function round() to round\
    \ a number.\n    #       For example,", "    # your code here\n    return None\n\
    \n", "    # your code here\n    pass\n", "    # your code here\n    return\n",
  "    # Your code here\n    # You can add another function if you need to.\n    #\
    \ You can add as many lines as you need here.\n    # You can create as many new\
    \ variables as you need.\n    # You can store intermediate results in variables.\n\
    \    # You can add as many lines as you need here.\n    # You can create as many\
    \ new variables as you need.\n    # You can store intermediate results in variables.\n\
    \    # You can add as many lines as you need here.\n    # You can create as many\
    \ new variables as you need.\n    # You can store intermediate results in variables.\n\
    \    # You can add as many lines as you need here.\n    # You can create as many\
    \ new variables as you need.\n    # You can store intermediate results in variables.\n\
    \    # You can add as many lines as you need here.\n    # You can create as many\
    \ new variables as you need.\n    # You can store intermediate results in variables.\n\
    \    # You can add as many lines as you need here.\n    # You can create as many\
    \ new variables as you need.\n    # You can store intermediate results in variables.\n\
    \    # You can add as many lines as you need here.\n    # You can create as many\
    \ new variables as you need.\n    # You can store intermediate results in variables.\n\
    \    # You can add as many lines as you need here.\n    # You can create as many\
    \ new variables as you need.\n    # You can store intermediate results in variables.\n\
    \    # You can add as many lines as you need here.\n    # You can create as many\
    \ new variables as you need.\n    # You can store intermediate results in variables.\n\
    \    # You can add as many lines as you need here.\n    # You can create as many\
    \ new variables as you need.\n    # You can store intermediate results in variables.\n\
    \    # You can add as many lines as you need here.\n    # You can create as many\
    \ new variables as you need.\n    # You can store intermediate results in variables.\n\
    \    # You can add as many lines as you need here.\n    # You can create as many\
    \ new variables as you need.\n    # You can store intermediate results in variables.\n\
    \    # You can add as many lines as you need here.\n    # You can create as many\
    \ new variables as", "    # your code here\n    return None\n", "    # Your code\
    \ here\n    # You can add another function if you need to\n    # You can add another\
    \ function if you need to\n    def strength(extension):\n        CAP = 0\n   \
    \     SM = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                CAP += 1\n            else:\n                SM += 1\n      \
    \  return CAP - SM\n    strongest = extensions[0]\n    for extension in extensions:\n\
    \        if strength(extension) > strength(strongest):\n            strongest\
    \ = extension\n    return class_name + '.' + strongest\n", "    # your code here\n\
    \    return\n", "    # Get the strength of each extension\n    strengths = [sum(1\
    \ for c in ext if c.isupper()) - sum(1 for c in ext if c.islower()) for ext in\
    \ extensions]\n    # Get the strongest extension\n    strongest = max(strengths)\n\
    \    # Get the index of the strongest extension\n    index = strengths.index(strongest)\n\
    \    # Return the class name and the strongest extension\n    return class_name\
    \ + '.' + extensions[index]\n", "    strongest_extension = ''\n    strongest_strength\
    \ = 0\n    for extension in extensions:\n        strength = 0\n        for letter\
    \ in extension:\n            if letter.isupper():\n                strength +=\
    \ 1\n            else:\n                strength -= 1\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return class_name + '.' + strongest_extension\n", "    # your\
    \ code here\n    pass\n", "    # your code here\n    pass\n\n", "    strength\
    \ = 0\n    strongest_extension = ''\n    for extension in extensions:\n      \
    \  CAP = 0\n        SM = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                CAP += 1\n            else:\n                SM += 1\n      \
    \  if CAP - SM > strength:\n            strength = CAP - SM\n            strongest_extension\
    \ = extension\n    return class_name + '.' + strongest_extension\n", "    # your\
    \ code here\n    return\n", "    # your code here\n    return None\n\n", "   \
    \ # your code here\n    return None\n", "    # your code here\n    return None\n",
  "    # your code here\n    return None\n\n", "    strongest_extension = ''\n   \
    \ strongest_strength = 0\n    for extension in extensions:\n        strength =\
    \ 0\n        for char in extension:\n            if char.isupper():\n        \
    \        strength += 1\n            else:\n                strength -= 1\n   \
    \     if strength > strongest_strength:\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n",
  "    strongest_extension = ''\n    strongest_strength = 0\n    for extension in\
    \ extensions:\n        strength = sum(1 for c in extension if c.isupper()) - sum(1\
    \ for c in extension if c.islower())\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return class_name + '.' + strongest_extension\n", "    # your\
    \ code here\n    return\n", "    strongest = 0\n    strongest_extension = \"\"\
    \n    for extension in extensions:\n        CAP = sum(1 for letter in extension\
    \ if letter.isupper())\n        SM = sum(1 for letter in extension if letter.islower())\n\
    \        strength = CAP - SM\n        if strength > strongest:\n            strongest\
    \ = strength\n            strongest_extension = extension\n    return class_name\
    \ + \".\" + strongest_extension\n", "    # your code here\n    return None\n\n",
  "    strongest_extension = extensions[0]\n    strongest_strength = 0\n    for extension\
    \ in extensions:\n        strength = sum(1 for letter in extension if letter.isupper())\
    \ - sum(1 for letter in extension if letter.islower())\n        if strength >\
    \ strongest_strength:\n            strongest_strength = strength\n           \
    \ strongest_extension = extension\n    return class_name + '.' + strongest_extension\n",
  "    # your code here\n    return None\n", "    # your code here\n    return None\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))\n",
  "    strongest_extension = ''\n    strongest_strength = 0\n    for extension in\
    \ extensions:\n        strength = 0\n        for letter in extension:\n      \
    \      if letter.isupper():\n                strength += 1\n            else:\n\
    \                strength -= 1\n        if strength > strongest_strength:\n  \
    \          strongest_strength = strength\n            strongest_extension = extension\n\
    \    return class_name + '.' + strongest_extension\n", "    # Create a list of\
    \ tuples with the extension name and its strength\n    extension_strengths = [(extension,\
    \ extension.count(string.ascii_uppercase) - extension.count(string.ascii_lowercase))\
    \ for extension in extensions]\n    # Find the strongest extension\n    strongest_extension\
    \ = max(extension_strengths, key=lambda x: x[1])\n    # Return the class name\
    \ with the strongest extension\n    return class_name + '.' + strongest_extension[0]\n",
  "    strongest_extension = ''\n    strength = 0\n    for extension in extensions:\n\
    \        CAP = 0\n        SM = 0\n        for letter in extension:\n         \
    \   if letter.isupper():\n                CAP += 1\n            elif letter.islower():\n\
    \                SM += 1\n        if CAP - SM > strength:\n            strength\
    \ = CAP - SM\n            strongest_extension = extension\n    return class_name\
    \ + '.' + strongest_extension\n", "    strongest_extension = extensions[0]\n \
    \   strongest_extension_strength = 0\n    for extension in extensions:\n     \
    \   extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                extension_strength += 1\n            else:\n                extension_strength\
    \ -= 1\n        if extension_strength > strongest_extension_strength:\n      \
    \      strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return class_name + '.' + strongest_extension\n", "    # your\
    \ code here\n    return class_name + '.' + max(extensions, key=lambda x: sum(1\
    \ for c in x if c.isupper()) - sum(1 for c in x if c.islower()))\n", "    # your\
    \ code here\n    return ''\n", "    # Your code here\n    # You can add another\
    \ function if you want\n    strongest_extension = extensions[0]\n    strongest_strength\
    \ = 0\n    for extension in extensions:\n        strength = 0\n        for letter\
    \ in extension:\n            if letter.isupper():\n                strength +=\
    \ 1\n            else:\n                strength -= 1\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return class_name + '.' + strongest_extension\n", "    # your\
    \ code here\n    return ''\n", "    # your code here\n    return ''\n", "    #\
    \ Your code here\n    # You can add another function if you need to\n    # You\
    \ can add as many lines as you want\n    # You can create as many variables as\
    \ you need\n    # You can use as many if statements as you need\n    # You can\
    \ use as many loops as you need\n    # You can use as many try/except blocks as\
    \ you need\n    # You can use as many return statements as you need\n    # You\
    \ can use as many print statements as you need\n    # You can use as many comments\
    \ as you need\n    # You can use as many lines as you need\n    # You can use\
    \ as many lines as you need\n    # You can use as many lines as you need\n   \
    \ # You can use as many lines as you need\n    # You can use as many lines as\
    \ you need\n    # You can use as many lines as you need\n    # You can use as\
    \ many lines as you need\n    # You can use as many lines as you need\n    # You\
    \ can use as many lines as you need\n    # You can use as many lines as you need\n\
    \    # You can use as many lines as you need\n    # You can use as many lines\
    \ as you need\n    # You can use as many lines as you need\n    # You can use\
    \ as many lines as you need\n    # You can use as many lines as you need\n   \
    \ # You can use as many lines as you need\n    # You can use as many lines as\
    \ you need\n    # You can use as many lines as you need\n    # You can use as\
    \ many lines as you need\n    # You can use as many lines as you need\n    # You\
    \ can use as many lines as you need\n    # You can use as many lines as you need\n\
    \    # You can use as many lines as you need\n    # You can use as many lines\
    \ as you need\n    # You can use as many lines as you need\n    # You can use\
    \ as many lines as you need\n    # You can use as many lines as you need\n   \
    \ # You can use as many lines as you need\n    # You can use as many lines as\
    \ you need\n    # You can use as many lines as you need\n    # You can use as\
    \ many lines as you need\n    # You can use as many lines as you need\n    # You\
    \ can use as many", "    # your code here\n    return\n", "    strength = -1\n\
    \    strongest_extension = ''\n    for extension in extensions:\n        CAP =\
    \ len([letter for letter in extension if letter.isupper()])\n        SM = len([letter\
    \ for letter in extension if letter.islower()])\n        if CAP - SM > strength:\n\
    \            strength = CAP - SM\n            strongest_extension = extension\n\
    \    return class_name + '.' + strongest_extension\n", "    # your code here\n\
    \    pass\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
