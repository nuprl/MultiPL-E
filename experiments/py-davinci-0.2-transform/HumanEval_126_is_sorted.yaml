name: HumanEval_126_is_sorted
language: py
prompt: "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    \"\
  \"\"\n    Given a list of numbers, return whether or not they are sorted\n    in\
  \ ascending order. If list has more than 1 duplicate of the same\n    number, return\
  \ False. Assume no negative numbers and only integers.\n\n    Examples\n    >>>\
  \ is_sorted([5])\n    True\n    >>> is_sorted([1, 2, 3, 4, 5])\n    True\n    >>>\
  \ is_sorted([1, 3, 2, 4, 5])\n    False\n    >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
  \    True\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    True\n    >>> is_sorted([1,\
  \ 3, 2, 4, 5, 6, 7])\n    False\n    >>> is_sorted([1, 2, 2, 3, 3, 4])\n    True\n\
  \    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([5]) == True\n    assert candidate([1,\
  \ 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert\
  \ candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6,\
  \ 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False\n    assert\
  \ candidate([]) == True\n    assert candidate([1]) == True\n    assert candidate([3,\
  \ 2, 1]) == False\n    assert candidate([1, 2, 2, 2, 3, 4]) == False\n    assert\
  \ candidate([1, 2, 3, 3, 3, 4]) == False\n    assert candidate([1, 2, 2, 3, 3, 4])\
  \ == True\n    assert candidate([1, 2, 3, 4]) == True\n\ndef test_check():\n   \
  \ check(is_sorted)\n\ntest_check()\n"
completions: ["    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n\
    \            return False\n    return True\n", "    # Check if list is empty\n\
    \    if len(lst) == 0:\n        return True\n    # Check if list has only 1 element\n\
    \    elif len(lst) == 1:\n        return True\n    # Check if list has more than\
    \ 1 element\n    else:\n        # Check if list is sorted\n        for i in range(len(lst)\
    \ - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n \
    \           elif lst[i] == lst[i + 1]:\n                return False\n       \
    \ return True\n", "    if len(lst) == 1:\n        return True\n    for i in range(len(lst)\
    \ - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return\
    \ True\n", "    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n\
    \        return lst[0] < lst[1]\n    else:\n        for i in range(len(lst) -\
    \ 1):\n            if lst[i] >= lst[i + 1]:\n                return False\n  \
    \      return True\n", "    for i in range(len(lst) - 1):\n        if lst[i] >\
    \ lst[i + 1]:\n            return False\n    return True\n", "    if len(lst)\
    \ == 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i]\
    \ > lst[i + 1]:\n            return False\n    return True\n", "    if len(lst)\
    \ == 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i]\
    \ > lst[i + 1]:\n            return False\n    return True\n", "    for i in range(len(lst)\
    \ - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return\
    \ True\n", "    if len(lst) == 1:\n        return True\n    for i in range(len(lst)\
    \ - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return\
    \ True\n", "    if len(lst) == 1:\n        return True\n    for i in range(len(lst)\
    \ - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return\
    \ True", "    if len(lst) == 1:\n        return True\n    for i in range(len(lst)\
    \ - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return\
    \ True\n", "    if len(lst) == 1:\n        return True\n    for i in range(len(lst)\
    \ - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return\
    \ True\n", "    if len(lst) == 1:\n        return True\n    for i in range(len(lst)\
    \ - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return\
    \ True\n", "    if len(lst) == 1:\n        return True\n    for i in range(len(lst)\
    \ - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return\
    \ True\n", "    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n\
    \            return False\n    return True\n", "    for i in range(len(lst) -\
    \ 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n",
  "    if len(lst) == 1:\n        return True\n    for i in range(len(lst) - 1):\n\
    \        if lst[i] >= lst[i + 1]:\n            return False\n    return True\n",
  "    if len(lst) == 1:\n        return True\n    for i in range(len(lst) - 1):\n\
    \        if lst[i] > lst[i + 1]:\n            return False\n    return True\n",
  "    # TODO: implement this function\n    return True\n", "    for i in range(len(lst)\
    \ - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return\
    \ True\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
