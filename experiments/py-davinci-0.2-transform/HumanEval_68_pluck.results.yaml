language: py
name: HumanEval_68_pluck
results:
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [n for n in arr if n % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ []\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n          \
    \  evens.append([val, i])\n    if not evens:\n        return []\n    evens.sort()\n\
    \    return evens[0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    smallest\
    \ = min(evens)\n    return [smallest, arr.index(smallest)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    smallest\
    \ = min(evens)\n    return [smallest, arr.index(smallest)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # if arr is empty return []\n    if not arr:\n\
    \        return []\n    # create a list of even numbers\n    evens = [x for x\
    \ in arr if x % 2 == 0]\n    # if evens is empty return []\n    if not evens:\n\
    \        return []\n    # find the smallest even number\n    smallest = min(evens)\n\
    \    # find the index of the smallest even number\n    index = arr.index(smallest)\n\
    \    # return a list of the smallest even number and its index\n    return [smallest,\
    \ index]\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n \
    \   assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n  \
    \  assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    min_even_idx = arr.index(min_even)\n    return [min_even,\
    \ min_even_idx]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [node for node in arr if node % 2 ==\
    \ 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n    return\
    \ []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n   \
    \ assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert\
    \ candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5,\
    \ 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7,\
    \ 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    smallest_even = None\n    smallest_even_index\
    \ = None\n    for i, v in enumerate(arr):\n        if v % 2 == 0:\n          \
    \  if smallest_even is None or v < smallest_even:\n                smallest_even\
    \ = v\n                smallest_even_index = i\n    if smallest_even is None:\n\
    \        return []\n    return [smallest_even, smallest_even_index]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748547
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    smallest\
    \ = min(evens)\n    return [smallest, arr.index(smallest)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748547
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    even_nums = [num for num in arr if num % 2\
    \ == 0]\n    if even_nums:\n        smallest_even = min(even_nums)\n        smallest_even_index\
    \ = arr.index(smallest_even)\n        return [smallest_even, smallest_even_index]\n\
    \    return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    else:\n        smallest = min(evens)\n\
    \        return [smallest, arr.index(smallest)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    smallest_even\
    \ = None\n    smallest_even_index = None\n    for i, v in enumerate(arr):\n  \
    \      if v % 2 == 0:\n            if smallest_even is None or v < smallest_even:\n\
    \                smallest_even = v\n                smallest_even_index = i\n\
    \    if smallest_even is None:\n        return []\n    return [smallest_even,\
    \ smallest_even_index]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    else:\n\
    \        evens = [i for i in arr if i % 2 == 0]\n        if not evens:\n     \
    \       return []\n        else:\n            smallest = min(evens)\n        \
    \    return [smallest, arr.index(smallest)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    smallest\
    \ = min(evens)\n    return [smallest, arr.index(smallest)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzrbrlp_i.py\"\
    , line 54, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzrbrlp_i.py\"\
    , line 52, in test_check\n    check(pluck)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzrbrlp_i.py\"\
    , line 42, in check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    even_nums\
    \ = [x for x in arr if x % 2 == 0]\n    if not even_nums:\n        return []\n\
    \    smallest_even = min(even_nums)\n    return [smallest_even, arr.index(smallest_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    min_even_idx = arr.index(min_even)\n    return [min_even,\
    \ min_even_idx]\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    even_nums = [num for num in arr if num % 2\
    \ == 0]\n    if not even_nums:\n        return []\n    else:\n        smallest_even\
    \ = min(even_nums)\n        return [smallest_even, arr.index(smallest_even)]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748547
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [n for n in arr if n % 2 == 0]\n  \
    \  if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [n for n in arr if n % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748547
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n    pass\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz5_d6l7o.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpz5_d6l7o.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpz5_d6l7o.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748547
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [num for num in arr if num % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748547
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    smallest\
    \ = min(evens)\n    return [smallest, arr.index(smallest)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [n for n in arr if n % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # find the smallest even value\n    smallest_even\
    \ = None\n    smallest_even_index = None\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            if smallest_even is None or value < smallest_even:\n\
    \                smallest_even = value\n                smallest_even_index =\
    \ index\n    if smallest_even is None:\n        return []\n    return [smallest_even,\
    \ smallest_even_index]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [n for n in arr if n % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748547
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    smallest\
    \ = min(evens)\n    return [smallest, arr.index(smallest)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    smallest\
    \ = min(evens)\n    return [smallest, arr.index(smallest)]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748547
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzrbrlp_i.py\"\
    , line 54, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzrbrlp_i.py\"\
    , line 52, in test_check\n    check(pluck)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzrbrlp_i.py\"\
    , line 42, in check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    smallest\
    \ = min(evens)\n    return [smallest, arr.index(smallest)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748547
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6a5pb48.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpz6a5pb48.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpz6a5pb48.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    even_nums = [num for num in arr if num % 2\
    \ == 0]\n    if even_nums:\n        return [min(even_nums), arr.index(min(even_nums))]\n\
    \    return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748547
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    even_nums = [num for num in arr if num % 2\
    \ == 0]\n    if even_nums:\n        min_even = min(even_nums)\n        return\
    \ [min_even, arr.index(min_even)]\n    return []\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n    pass\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz5_d6l7o.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpz5_d6l7o.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpz5_d6l7o.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748547
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    smallest\
    \ = min(evens)\n    return [smallest, arr.index(smallest)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    smallest\
    \ = min(evens)\n    return [smallest, arr.index(smallest)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # check if the array is empty\n    if not arr:\n\
    \        return []\n    # get the smallest even value\n    smallest_even = min([x\
    \ for x in arr if x % 2 == 0])\n    # get the index of the smallest even value\n\
    \    smallest_even_index = arr.index(smallest_even)\n    # return the smallest\
    \ even value and its index\n    return [smallest_even, smallest_even_index]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnzgtqg7s.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmpnzgtqg7s.py\", line 57,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpnzgtqg7s.py\", line 54, in\
    \ check\n    assert candidate([7, 9, 7, 1]) == []\n  File \"/tmp/tmpnzgtqg7s.py\"\
    , line 41, in pluck\n    smallest_even = min([x for x in arr if x % 2 == 0])\n\
    ValueError: min() arg is an empty sequence\n"
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    even_nums\
    \ = [num for num in arr if num % 2 == 0]\n    if not even_nums:\n        return\
    \ []\n    min_even = min(even_nums)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if not evens:\n        return []\n    else:\n        return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # If the array is empty, return []\n    if\
    \ not arr:\n        return []\n\n    # Get the smallest even value in the array\n\
    \    smallest_even = min([x for x in arr if x % 2 == 0])\n\n    # Get the index\
    \ of the smallest even value\n    smallest_even_index = arr.index(smallest_even)\n\
    \n    # Return the smallest even value and its index\n    return [smallest_even,\
    \ smallest_even_index]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1zhovcic.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmp1zhovcic.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp1zhovcic.py\", line 57, in\
    \ check\n    assert candidate([7, 9, 7, 1]) == []\n  File \"/tmp/tmp1zhovcic.py\"\
    , line 42, in pluck\n    smallest_even = min([x for x in arr if x % 2 == 0])\n\
    ValueError: min() arg is an empty sequence\n"
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    even_nodes = [node for node in arr if node\
    \ % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_even = min(even_nodes)\n\
    \    smallest_even_index = arr.index(smallest_even)\n    return [smallest_even,\
    \ smallest_even_index]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748547
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    min_even_index = arr.index(min_even)\n    return [min_even,\
    \ min_even_index]\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    smallest_even = None\n    smallest_even_idx\
    \ = None\n    for idx, val in enumerate(arr):\n        if val % 2 == 0:\n    \
    \        if smallest_even is None or val < smallest_even:\n                smallest_even\
    \ = val\n                smallest_even_idx = idx\n    if smallest_even is None:\n\
    \        return []\n    return [smallest_even, smallest_even_idx]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    evens.sort()\n\
    \    return [evens[0], arr.index(evens[0])]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748547
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n    pass\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz5_d6l7o.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpz5_d6l7o.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpz5_d6l7o.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748547
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    pass\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6a5pb48.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpz6a5pb48.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpz6a5pb48.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    else:\n        return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748547
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    evens.sort()\n\
    \    return [evens[0], arr.index(evens[0])]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748547
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    even_nums\
    \ = [num for num in arr if num % 2 == 0]\n    if not even_nums:\n        return\
    \ []\n    min_even = min(even_nums)\n    min_even_idx = arr.index(min_even)\n\
    \    return [min_even, min_even_idx]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # if the array is empty, return []\n    if\
    \ not arr:\n        return []\n    # if the array is not empty, find the smallest\
    \ even value\n    smallest_even = min([x for x in arr if x % 2 == 0])\n    # if\
    \ there are no even values, return []\n    if smallest_even == float('inf'):\n\
    \        return []\n    # find the index of the smallest even value\n    smallest_even_index\
    \ = arr.index(smallest_even)\n    # return the smallest even value and its index\
    \ in a list\n    return [smallest_even, smallest_even_index]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpny5l5ype.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpny5l5ype.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpny5l5ype.py\", line 57, in\
    \ check\n    assert candidate([7, 9, 7, 1]) == []\n  File \"/tmp/tmpny5l5ype.py\"\
    , line 41, in pluck\n    smallest_even = min([x for x in arr if x % 2 == 0])\n\
    ValueError: min() arg is an empty sequence\n"
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # if there are no even values or the given\
    \ array is empty, return []\n    if not arr or not any(i % 2 == 0 for i in arr):\n\
    \        return []\n\n    # find the smallest even value\n    smallest_even =\
    \ min(i for i in arr if i % 2 == 0)\n\n    # find the index of the smallest even\
    \ value\n    smallest_even_index = arr.index(smallest_even)\n\n    # return the\
    \ smallest even value and its index\n    return [smallest_even, smallest_even_index]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748547
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    min_even_index = arr.index(min_even)\n    return [min_even,\
    \ min_even_index]\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n    pass\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz5_d6l7o.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpz5_d6l7o.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpz5_d6l7o.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659748547
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzrbrlp_i.py\"\
    , line 54, in <module>\n    test_check()\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzrbrlp_i.py\"\
    , line 52, in test_check\n    check(pluck)\n  File \"/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzrbrlp_i.py\"\
    , line 42, in check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    # check if array is empty\n    if not arr:\n\
    \        return []\n    # get all even values\n    even_values = [x for x in arr\
    \ if x % 2 == 0]\n    # if there are no even values return empty array\n    if\
    \ not even_values:\n        return []\n    # get the smallest even value\n   \
    \ smallest_even_value = min(even_values)\n    # get the index of the smallest\
    \ even value\n    smallest_even_value_index = arr.index(smallest_even_value)\n\
    \    # return the smallest even value and its index\n    return [smallest_even_value,\
    \ smallest_even_value_index]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    smallest\
    \ = min(evens)\n    return [smallest, arr.index(smallest)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748547
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    evens.sort()\n\
    \    return [evens[0], arr.index(evens[0])]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748547
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [n for n in arr if n % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    evens.sort()\n\
    \    return [evens[0], arr.index(evens[0])]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    else:\n\
    \        evens = [x for x in arr if x % 2 == 0]\n        if len(evens) == 0:\n\
    \            return []\n        else:\n            smallest_even = min(evens)\n\
    \            smallest_even_index = arr.index(smallest_even)\n            return\
    \ [smallest_even, smallest_even_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    evens.sort()\n\
    \    return [evens[0], arr.index(evens[0])]\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    even_nums\
    \ = [num for num in arr if num % 2 == 0]\n    if not even_nums:\n        return\
    \ []\n    min_even = min(even_nums)\n    min_even_idx = arr.index(min_even)\n\
    \    return [min_even, min_even_idx]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    else:\n        smallest = min(evens)\n\
    \        return [smallest, arr.index(smallest)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    smallest\
    \ = min(evens)\n    return [smallest, arr.index(smallest)]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    evens\
    \ = [x for x in arr if x % 2 == 0]\n    if len(evens) == 0:\n        return []\n\
    \    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\ndef\
    \ check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748585
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n \
    \   >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4,\
    \ 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n                 so we will choose the first zero, which has the smallest\
    \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        *\
    \ 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    evens =\
    \ [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
