name: HumanEval_41_car_race_collision
language: py
prompt: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's\
  \ a perfectly straight infinitely long line.\n    n cars are driving left to right;\
  \  simultaneously, a different set of n cars\n    are driving right to left.   The\
  \ two sets of cars start out being very far from\n    each other.  All cars move\
  \ in the same speed.  Two cars are said to collide\n    when a car that's moving\
  \ left to right hits a car that's moving right to left.\n    However, the cars are\
  \ infinitely sturdy and strong; as a result, they continue moving\n    in their\
  \ trajectory as if they did not collide.\n\n    This function outputs the number\
  \ of such collisions.\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
  \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
  \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\ntest_check()\n"
completions: ["    # TODO: implement this function\n    pass\n\n", "    return n *\
    \ (n - 1) // 2\n\n", "    # TODO: implement this function\n    pass\n\n", "  \
    \  # TODO: implement this function\n    pass\n\n", "    # The following is a brute\
    \ force solution.  It's easy to see that it's O(n^2).\n    # We can do better.\n\
    \    collisions = 0\n    for i in range(n):\n        for j in range(n):\n    \
    \        if i < j:\n                collisions += 1\n    return collisions\n\n",
  "    # TODO: implement this function\n    pass\n\n", "    return n * (n - 1) //\
    \ 2\n\n", "    return n * (n - 1)\n\n", "    return n * (n - 1) // 2\n\n", " \
    \   # TODO: implement this function\n    pass\n\n", "    # We can use a set to\
    \ keep track of the cars that are driving left to right.\n    # We can use a set\
    \ to keep track of the cars that are driving right to left.\n    # We can use\
    \ a set to keep track of the cars that are driving left to right.\n    # We can\
    \ use a set to keep track of the cars that are driving right to left.\n    # We\
    \ can use a set to keep track of the cars that are driving left to right.\n  \
    \  # We can use a set to keep track of the cars that are driving right to left.\n\
    \    # We can use a set to keep track of the cars that are driving left to right.\n\
    \    # We can use a set to keep track of the cars that are driving right to left.\n\
    \    # We can use a set to keep track of the cars that are driving left to right.\n\
    \    # We can use a set to keep track of the cars that are driving right to left.\n\
    \    # We can use a set to keep track of the cars that are driving left to right.\n\
    \    # We can use a set to keep track of the cars that are driving right to left.\n\
    \    # We can use a set to keep track of the cars that are driving left to right.\n\
    \    # We can use a set to keep track of the cars that are driving right to left.\n\
    \    # We can use a set to keep track of the cars that are driving left to right.\n\
    \    # We can use a set to keep track of the cars that are driving right to left.\n\
    \    # We can use a set to keep track of the cars that are driving left to right.\n\
    \    # We can use a set to keep track of the cars that are driving right to left.\n\
    \    # We can use a set to keep track of the cars that are driving left to right.\n\
    \    # We can use a set to keep track of the cars that are driving right to left.\n\
    \    # We can use a set to keep track of the cars that are driving left to right.\n\
    \    # We can use a set to keep track of the cars that are driving right to left.\n\
    \    # We can use a set to keep track of the cars that are driving left to right.\n\
    \    # We can use a set to keep track of the cars that are driving right to left.\n\
    \    # We can use a set", "    # TODO: implement this function\n    pass\n\n",
  "    # TODO: implement this function\n    return 0\n\n", "    # TODO: implement\
    \ this function\n    pass\n\n", "    # TODO: implement this function\n    pass\n\
    \n", "    # TODO: implement this function\n    pass\n\n", "    return n * (n -\
    \ 1) // 2\n\n", "    # TODO: implement this\n    return 0\n\n", "    # TODO: implement\
    \ this function.\n    pass\n\n", "    if n <= 1:\n        return 0\n    else:\n\
    \        return n - 1 + car_race_collision(n - 1)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
