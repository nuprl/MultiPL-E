name: HumanEval_41_car_race_collision
language: py
prompt: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's\
  \ a perfectly straight infinitely long line.\n    n cars are driving left to right;\
  \  simultaneously, a different set of n cars\n    are driving right to left.   The\
  \ two sets of cars start out being very far from\n    each other.  All cars move\
  \ in the same speed.  Two cars are said to collide\n    when a car that's moving\
  \ left to right hits a car that's moving right to left.\n    However, the cars are\
  \ infinitely sturdy and strong; as a result, they continue moving\n    in their\
  \ trajectory as if they did not collide.\n\n    This function outputs the number\
  \ of such collisions.\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
  \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
  \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\ntest_check()\n"
completions: ["    # TODO: implement this function\n    pass\n\n", "    return n *\
    \ (n - 1) // 2\n\n", "    # TODO: implement this function\n    pass\n\n", "  \
    \  # TODO: implement this function\n    pass\n\n", "    # The following is a brute\
    \ force solution.  It's easy to see that it's O(n^2).\n    # We can do better.\n\
    \    collisions = 0\n    for i in range(n):\n        for j in range(n):\n    \
    \        if i < j:\n                collisions += 1\n    return collisions\n\n",
  "    # TODO: implement this function\n    pass\n\n", "    return n * (n - 1) //\
    \ 2\n\n", "    return n * (n - 1)\n\n", "    return n * (n - 1) // 2\n\n", " \
    \   # TODO: implement this function\n    pass\n\n", "    # We can use a set to\
    \ keep track of the cars that are driving left to right.\n    # We can use a set\
    \ to keep track of the cars that are driving right to left.\n    # We can use\
    \ a set to keep track of the cars that are driving left to right.\n    # We can\
    \ use a set to keep track of the cars that are driving right to left.\n    # We\
    \ can use a set to keep track of the cars that are driving left to right.\n  \
    \  # We can use a set to keep track of the cars that are driving right to left.\n\
    \    # We can use a set to keep track of the cars that are driving left to right.\n\
    \    # We can use a set to keep track of the cars that are driving right to left.\n\
    \    # We can use a set to keep track of the cars that are driving left to right.\n\
    \    # We can use a set to keep track of the cars that are driving right to left.\n\
    \    # We can use a set to keep track of the cars that are driving left to right.\n\
    \    # We can use a set to keep track of the cars that are driving right to left.\n\
    \    # We can use a set to keep track of the cars that are driving left to right.\n\
    \    # We can use a set to keep track of the cars that are driving right to left.\n\
    \    # We can use a set to keep track of the cars that are driving left to right.\n\
    \    # We can use a set to keep track of the cars that are driving right to left.\n\
    \    # We can use a set to keep track of the cars that are driving left to right.\n\
    \    # We can use a set to keep track of the cars that are driving right to left.\n\
    \    # We can use a set to keep track of the cars that are driving left to right.\n\
    \    # We can use a set to keep track of the cars that are driving right to left.\n\
    \    # We can use a set to keep track of the cars that are driving left to right.\n\
    \    # We can use a set to keep track of the cars that are driving right to left.\n\
    \    # We can use a set to keep track of the cars that are driving left to right.\n\
    \    # We can use a set to keep track of the cars that are driving right to left.\n\
    \    # We can use a set", "    # TODO: implement this function\n    pass\n\n",
  "    # TODO: implement this function\n    return 0\n\n", "    # TODO: implement\
    \ this function\n    pass\n\n", "    # TODO: implement this function\n    pass\n\
    \n", "    # TODO: implement this function\n    pass\n\n", "    return n * (n -\
    \ 1) // 2\n\n", "    # TODO: implement this\n    return 0\n\n", "    # TODO: implement\
    \ this function.\n    pass\n\n", "    if n <= 1:\n        return 0\n    else:\n\
    \        return n - 1 + car_race_collision(n - 1)\n\n", "    # TODO: implement\
    \ this function\n    pass\n\n", "    # TODO: implement this function\n    pass\n\
    \n", "    # TODO: implement this function\n    pass\n\n", "    # TODO: implement\
    \ this function\n    pass\n\n", "    # TODO: implement this function\n    pass\n\
    \n", "    # TODO: implement this function\n    pass\n\n", "    # TODO: implement\
    \ this function\n    pass\n\n", "    # TODO: implement this function\n    return\
    \ 0\n\n", "    # TODO: implement this function\n    return 0\n\n", "    return\
    \ n * (n - 1) // 2\n\n", "    return n * (n - 1) // 2\n\n", "    # TODO: implement\
    \ this function\n    pass\n\n", "    # TODO: implement this function\n    pass\n\
    \n", "    # TODO: implement this function\n    return 0\n\n", "    # TODO: implement\
    \ this function\n    pass\n\n", "    # TODO: implement this function\n    pass\n\
    \n", "    # TODO: implement this function\n    pass\n\n", "    # TODO: implement\
    \ this function\n    pass\n\n", "    # TODO: implement this function\n    pass\n\
    \n", "    # TODO: implement this function\n    pass\n\n", "    # TODO: Implement\
    \ this function.\n    pass\n\n", "    return n * (n - 1) // 2\n\n", "    # TODO:\
    \ implement this function\n    pass\n\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \n", "    # TODO: implement this function\n    pass\n\n", "    # TODO: implement\
    \ this function\n    pass\n\n", "    # TODO: implement this function\n    pass\n\
    \n", "    # TODO: implement this function\n    pass\n\n", "    # TODO: implement\
    \ this function\n    pass\n\n", "    # TODO: implement this function\n    pass\n\
    \n", "    # TODO: implement this function\n    pass\n\n", "    if n <= 0:\n  \
    \      return 0\n    # TODO: implement this function\n    return 0\n\n", "   \
    \ # TODO: implement this function\n    pass\n\n", "    # TODO: implement this\
    \ function\n    pass\n\n", "    # TODO: Implement this function.\n    return 0\n\
    \n", "    # TODO: implement this function\n    pass\n\n", "    # TODO: implement\
    \ this function\n    pass\n\n", "    return n * (n - 1) // 2\n\n", "    # TODO:\
    \ implement this function\n    pass\n\n", "    return n * (n - 1)\n\n", "    #\
    \ TODO: implement this function\n    pass\n\n", "    # TODO: implement this function\n\
    \    pass\n\n", "    # TODO: Implement this function\n    # Hint: you can use\
    \ the function \"random.randint(a, b)\" to generate a random integer\n    # between\
    \ a and b (including a and b).\n    # Hint: you can use the function \"random.uniform(a,\
    \ b)\" to generate a random float\n    # between a and b (including a and b).\n\
    \    # Hint: you can use the function \"random.choice(lst)\" to choose a random\
    \ element\n    # from a list.\n    # Hint: you can use the function \"random.shuffle(lst)\"\
    \ to shuffle a list.\n    # Hint: you can use the function \"random.sample(lst,\
    \ k)\" to choose k random elements\n    # from a list.\n    # Hint: you can use\
    \ the function \"random.random()\" to generate a random float\n    # between 0\
    \ and 1 (including 0 and 1).\n    # Hint: you can use the function \"random.seed(x)\"\
    \ to set the seed of the random\n    # number generator to x.  This is useful\
    \ for debugging.\n    # Hint: you can use the function \"math.floor(x)\" to round\
    \ down a float x to the\n    # nearest integer.\n    # Hint: you can use the function\
    \ \"math.ceil(x)\" to round up a float x to the\n    # nearest integer.\n    #\
    \ Hint: you can use the function \"math.sqrt(x)\" to take the square root of x.\n\
    \    # Hint: you can use the function \"math.pow(x, y)\" to take x to the power\
    \ of y.\n    # Hint: you can use the function \"math.log(x)\" to take the natural\
    \ logarithm of x.\n    # Hint: you can use the function \"math.exp(x)\" to take\
    \ the exponential of x.\n    # Hint: you can use the function \"math.fabs(x)\"\
    \ to take the absolute value of x.\n    # Hint: you can use the function \"math.factorial(x)\"\
    \ to take the factorial of x.\n    # Hint: you can use the function \"math.pi\"\
    \ to get the value of pi.\n    # Hint: you can", "    # TODO: implement this function\n\
    \    return 0\n\n", "    # TODO: implement this function\n    pass\n\n", "   \
    \ # TODO: implement this function\n    pass\n\n", "    # TODO: implement this\
    \ function\n    return 0\n\n", "    # TODO: implement this function\n    pass\n\
    \n", "    # TODO: implement this function\n    pass\n\n", "    # TODO: implement\
    \ this function\n    pass\n\n", "    # TODO: implement this function\n    pass\n\
    \n", "    # TODO: implement this function\n    pass\n\n", "    # TODO: implement\
    \ this function\n    pass\n\n", "    return n * (n - 1) // 2\n\n", "    # TODO:\
    \ implement this function\n    pass\n\n", "    return n * (n - 1) // 2\n\n", " \
    \   assert n >= 0\n    if n == 0:\n        return 0\n    return n - 1 + car_race_collision(n\
    \ - 1)\n\n", "    # TODO: implement this function\n    pass\n\n", "    return\
    \ n * (n - 1) // 2\n\n", "    # TODO: implement this function\n    pass\n\n",
  "    # TODO: implement this function\n    pass\n\n", "    return n * (n - 1) //\
    \ 2\n\n", "    return n * (n - 1) // 2\n\n", "    # TODO: implement this function\n\
    \    pass\n\n", "    return n * (n - 1) // 2\n\n", "    # TODO: implement this\
    \ function\n    return 0\n\n", "    # TODO: implement this function\n    pass\n\
    \n", "    return n * (n - 1) // 2\n\n", "    # TODO: implement this function\n\
    \    pass\n\n", "    # TODO: implement this function\n    pass\n\n", "    # TODO:\
    \ implement this function\n    pass\n\n", "    # TODO: implement this function\n\
    \    pass\n\n", "    # TODO: implement this function\n    pass\n\n", "    # TODO:\
    \ implement this function\n    pass\n\n", "    # TODO: implement this function\n\
    \    pass\n\n", "    return n * (n - 1) // 2\n\n", "    # TODO: implement this\
    \ function\n    pass\n\n", "    # TODO: implement this function\n    pass\n\n",
  "    # TODO:  implement this function\n    pass\n\n", "    # TODO: implement this\
    \ function\n    pass\n\n", "    return n * (n - 1) // 2\n\n", "    # TODO: Implement\
    \ this function.\n    pass\n\n", "    # TODO: implement this function\n    pass\n\
    \n", "    # TODO: implement this function\n    return 0\n\n", "    # YOUR CODE\
    \ HERE\n    raise NotImplementedError()\n\n", "    # TODO: implement this function\n\
    \    pass\n\n", "    # TODO: Implement this function.\n    pass\n\n", "    # TODO:\
    \ implement this function\n    pass\n\n", "    # TODO: implement this function\n\
    \    return 0\n\n", "    # TODO: implement this function\n    pass\n\n", "   \
    \ # TODO: implement this function\n    pass\n\n", "    # TODO: implement this\
    \ function\n    pass\n\n", "    # TODO: implement this function\n    pass\n\n",
  "    # TODO: implement this function\n    pass\n\n", "    # TODO: implement this\
    \ function\n    pass\n\n", "    # TODO: implement this function\n    pass\n\n",
  "    # TODO: implement this function\n    pass\n\n", "    # TODO: implement this\n\
    \    pass\n\n", "    return n * (n - 1)\n\n", "    return n * (n - 1) // 2\n\n",
  "    # TODO: implement this function\n    pass\n\n", "    # TODO: implement this\
    \ function\n    pass\n\n", "    # TODO: implement this function\n    return 0\n\
    \n", "    # TODO: implement this function.\n    # Hint: use a priority queue.\n\
    \    # Hint: use a heap to store the cars moving left to right.\n    # Hint: use\
    \ a heap to store the cars moving right to left.\n    # Hint: use a heap to store\
    \ the cars moving left to right.\n    # Hint: use a heap to store the cars moving\
    \ right to left.\n    # Hint: use a heap to store the cars moving left to right.\n\
    \    # Hint: use a heap to store the cars moving right to left.\n    # Hint: use\
    \ a heap to store the cars moving left to right.\n    # Hint: use a heap to store\
    \ the cars moving right to left.\n    # Hint: use a heap to store the cars moving\
    \ left to right.\n    # Hint: use a heap to store the cars moving right to left.\n\
    \    # Hint: use a heap to store the cars moving left to right.\n    # Hint: use\
    \ a heap to store the cars moving right to left.\n    # Hint: use a heap to store\
    \ the cars moving left to right.\n    # Hint: use a heap to store the cars moving\
    \ right to left.\n    # Hint: use a heap to store the cars moving left to right.\n\
    \    # Hint: use a heap to store the cars moving right to left.\n    # Hint: use\
    \ a heap to store the cars moving left to right.\n    # Hint: use a heap to store\
    \ the cars moving right to left.\n    # Hint: use a heap to store the cars moving\
    \ left to right.\n    # Hint: use a heap to store the cars moving right to left.\n\
    \    # Hint: use a heap to store the cars moving left to right.\n    # Hint: use\
    \ a heap to store the cars moving right to left.\n    # Hint: use a heap to store\
    \ the cars moving left to right.\n    # Hint: use a heap to store the cars moving\
    \ right to left.\n    # Hint: use a heap to store the cars moving left to right.\n\
    \    # Hint: use a heap to store the cars moving right to left.\n    # Hint: use\
    \ a heap to store the cars moving left to right.\n    # Hint", "    pass\n\n",
  "    # TODO: implement this function\n    pass\n\n", "    # TODO: implement this\
    \ function\n    pass\n\n", "    # TODO: implement this function\n    pass\n\n",
  "    # TODO: implement this function\n    pass\n\n", "    # TODO: implement this\
    \ function\n    pass\n", "    # TODO: implement this function\n    pass\n\n",
  "    # TODO: Implement this function\n    pass\n\n", "    # TODO: implement this\
    \ function.\n    pass\n\n", "    # TODO: Implement this function.\n    pass\n\n",
  "    # TODO: implement this function\n    return 0\n\n", "    return n * (n - 1)\
    \ // 2\n\n", "    # TODO: Implement this function.\n    pass\n\n", "    return\
    \ n * (n - 1) // 2\n\n", "    # TODO: implement this function\n    return 0\n\n",
  "    # TODO: implement this function.\n    # Hint: you can use the built-in function\
    \ \"zip\" to iterate over two lists in parallel.\n    # You can also use the built-in\
    \ function \"enumerate\" to get the index of the current element.\n    # You can\
    \ also use the built-in function \"range\" to generate a list of numbers.\n  \
    \  # You can also use the built-in function \"sorted\" to sort a list.\n    #\
    \ You can also use the built-in function \"abs\" to get the absolute value of\
    \ a number.\n    # You can also use the built-in function \"max\" to get the maximum\
    \ value of a list.\n    # You can also use the built-in function \"min\" to get\
    \ the minimum value of a list.\n    # You can also use the built-in function \"\
    sum\" to get the sum of the elements of a list.\n    # You can also use the built-in\
    \ function \"any\" to check if any element of a list is True.\n    # You can also\
    \ use the built-in function \"all\" to check if all elements of a list are True.\n\
    \    # You can also use the built-in function \"map\" to apply a function to each\
    \ element of a list.\n    # You can also use the built-in function \"filter\"\
    \ to filter a list.\n    # You can also use the built-in function \"reduce\" to\
    \ reduce a list.\n    # You can also use the built-in function \"reversed\" to\
    \ reverse a list.\n    # You can also use the built-in function \"len\" to get\
    \ the length of a list.\n    # You can also use the built-in function \"round\"\
    \ to round a number.\n    # You can also use the built-in function \"int\" to\
    \ convert a number to an integer.\n    # You can also use the built-in function\
    \ \"float\" to convert a number to a float.\n    # You can also use the built-in\
    \ function \"str\" to convert a number to a string.\n    # You can also use the\
    \ built-in function \"list\" to convert a string to a list.\n    # You can also\
    \ use the built-in function \"tuple\" to convert a string to a tuple.\n    # You\
    \ can also use the built", "    return n * (n - 1) // 2\n\n", "    # TODO: implement\
    \ this function\n    pass\n\n", "    return n * (n - 1)\n\n", "    return n *\
    \ (n - 1) // 2\n\n", "    # TODO: implement this function\n    pass\n\n", "  \
    \  # TODO: implement this function\n    pass\n\n", "    # TODO: implement this\
    \ function\n    pass\n\n", "    # TODO: implement this function\n    pass\n\n",
  "    return n * (n - 1) // 2\n\n", "    # TODO: implement this function\n    return\
    \ 0\n\n", "    # TODO: implement this function\n    pass\n\n", "    # TODO: implement\
    \ this function\n    pass\n\n", "    # TODO: implement this function\n    pass\n\
    \n", "    # TODO: implement this function\n    pass\n\n", "    return n * (n -\
    \ 1) // 2\n\n", "    # TODO: implement this function.\n    # Hint: you can use\
    \ a list of tuples to represent the cars.\n    # For example, [(1, 0), (2, 0),\
    \ (3, 0)] represents 3 cars that are\n    # moving left to right, and are currently\
    \ at positions 1, 2, and 3, respectively.\n    # You can use the sort function\
    \ to sort the cars by their positions.\n    # You can use the bisect module to\
    \ find the index of a car in the list.\n    # You can use the bisect_left function\
    \ to find the index of a car in the list.\n    # You can use the bisect_right\
    \ function to find the index of a car in the list.\n    # You can use the bisect_left\
    \ function to find the index of a car in the list.\n    # You can use the bisect_right\
    \ function to find the index of a car in the list.\n    # You can use the bisect_left\
    \ function to find the index of a car in the list.\n    # You can use the bisect_right\
    \ function to find the index of a car in the list.\n    # You can use the bisect_left\
    \ function to find the index of a car in the list.\n    # You can use the bisect_right\
    \ function to find the index of a car in the list.\n    # You can use the bisect_left\
    \ function to find the index of a car in the list.\n    # You can use the bisect_right\
    \ function to find the index of a car in the list.\n    # You can use the bisect_left\
    \ function to find the index of a car in the list.\n    # You can use the bisect_right\
    \ function to find the index of a car in the list.\n    # You can use the bisect_left\
    \ function to find the index of a car in the list.\n    # You can use the bisect_right\
    \ function to find the index of a car in the list.\n    # You can use the bisect_left\
    \ function to find the index of a car in the list.\n    # You can use the bisect_right\
    \ function to find the index of a car in the list.\n    # You can use the bisect_left\
    \ function to find the index of a car in the list.\n    # You can use", "    #\
    \ TODO: Implement this function.\n    pass\n\n", "    return n * (n - 1) // 2\n\
    \n", "    # TODO: implement this function\n    pass\n\n", "    # TODO: Implement\
    \ this function\n    pass\n\n", "    # TODO: implement this function\n    pass\n\
    \n", "    # TODO: implement this function\n    pass\n\n", "    # TODO: implement\
    \ this function\n    return 0\n\n", "    # TODO: implement this function\n   \
    \ pass\n\n", "    # TODO: implement this function.\n    # Hint: use a list to\
    \ represent the cars.\n    # Hint: use a list to represent the cars.\n    # Hint:\
    \ use a list to represent the cars.\n    # Hint: use a list to represent the cars.\n\
    \    # Hint: use a list to represent the cars.\n    # Hint: use a list to represent\
    \ the cars.\n    # Hint: use a list to represent the cars.\n    # Hint: use a\
    \ list to represent the cars.\n    # Hint: use a list to represent the cars.\n\
    \    # Hint: use a list to represent the cars.\n    # Hint: use a list to represent\
    \ the cars.\n    # Hint: use a list to represent the cars.\n    # Hint: use a\
    \ list to represent the cars.\n    # Hint: use a list to represent the cars.\n\
    \    # Hint: use a list to represent the cars.\n    # Hint: use a list to represent\
    \ the cars.\n    # Hint: use a list to represent the cars.\n    # Hint: use a\
    \ list to represent the cars.\n    # Hint: use a list to represent the cars.\n\
    \    # Hint: use a list to represent the cars.\n    # Hint: use a list to represent\
    \ the cars.\n    # Hint: use a list to represent the cars.\n    # Hint: use a\
    \ list to represent the cars.\n    # Hint: use a list to represent the cars.\n\
    \    # Hint: use a list to represent the cars.\n    # Hint: use a list to represent\
    \ the cars.\n    # Hint: use a list to represent the cars.\n    # Hint: use a\
    \ list to represent the cars.\n    # Hint: use a list to represent the cars.\n\
    \    # Hint: use a list to represent the cars.\n    # Hint: use a list to represent\
    \ the cars.\n    # Hint: use a list to represent the cars.\n    # Hint: use a\
    \ list to represent the cars.\n    # Hint: use a list to represent the cars.\n\
    \    # Hint: use a list to represent the cars.\n    # Hint: use a list to represent\
    \ the", "    return (n * (n - 1)) // 2\n\n", "    # TODO: implement this function\n\
    \    pass\n\n", "    # TODO: implement this function\n    pass\n\n", "    # TODO:\
    \ implement this function\n    pass\n\n", "    pass\n\n", "    # TODO: implement\
    \ this function\n    pass\n\n", "    # TODO: implement this function.\n    # Hint:\
    \ you may want to use the `zip` function.\n    # Hint: you may want to use the\
    \ `enumerate` function.\n    # Hint: you may want to use the `range` function.\n\
    \    # Hint: you may want to use the `sum` function.\n    # Hint: you may want\
    \ to use the `abs` function.\n    # Hint: you may want to use the `min` function.\n\
    \    # Hint: you may want to use the `max` function.\n    # Hint: you may want\
    \ to use the `filter` function.\n    # Hint: you may want to use the `map` function.\n\
    \    # Hint: you may want to use the `reduce` function.\n    # Hint: you may want\
    \ to use the `all` function.\n    # Hint: you may want to use the `any` function.\n\
    \    # Hint: you may want to use the `len` function.\n    # Hint: you may want\
    \ to use the `sorted` function.\n    # Hint: you may want to use the `list` function.\n\
    \    # Hint: you may want to use the `set` function.\n    # Hint: you may want\
    \ to use the `dict` function.\n    # Hint: you may want to use the `tuple` function.\n\
    \    # Hint: you may want to use the `str` function.\n    # Hint: you may want\
    \ to use the `int` function.\n    # Hint: you may want to use the `float` function.\n\
    \    # Hint: you may want to use the `complex` function.\n    # Hint: you may\
    \ want to use the `bool` function.\n    # Hint: you may want to use the `type`\
    \ function.\n    # Hint: you may want to use the `isinstance` function.\n    #\
    \ Hint: you may want to use the `issubclass` function.\n    # Hint: you may want\
    \ to use the `super` function.\n    # Hint: you may want to use the `hasattr`\
    \ function.\n    # Hint: you may want to use the `getattr` function", "    # TODO:\
    \ write your code here\n    pass\n\n", "    return n * (n - 1) // 2\n\n", "  \
    \  # TODO: implement this function\n    pass\n\n", "    # TODO: implement this\
    \ function\n    pass\n\n", "    return n * (n - 1) // 2\n\n", "    # TODO: implement\
    \ this function\n    pass\n\n", "    return n * (n - 1)\n\n", "    # TODO: implement\
    \ this function\n    pass\n\n", "    # TODO: Implement this function.\n    pass\n\
    \n", "    # TODO: implement this function\n    pass\n\n", "    # TODO: Implement\
    \ this function\n    pass\n\n", "    return n * (n - 1) // 2\n\n", "    # TODO:\
    \ implement this function\n    return 0\n\n", "    # TODO: implement this function\n\
    \    return 0\n\n", "    # TODO: implement this function\n    pass\n\n", "   \
    \ # TODO: Implement this function\n    pass\n\n", "    # TODO: implement this\
    \ function\n    return 0\n\n", "    # TODO: implement this function\n    pass\n\
    \n", "    # TODO: implement this function\n    pass\n\n", "    # TODO: implement\
    \ this function\n    pass\n\n", "    # TODO: implement this function\n    pass\n\
    \n", "    return n * (n - 1) // 2\n\n", "    # TODO: implement this function\n\
    \    pass\n\n", "    # TODO: implement this function\n    return 0\n\n", "   \
    \ # TODO: implement this function\n    pass\n\n", "    # TODO: implement this\
    \ function\n    pass\n\n", "    # TODO: implement this function\n    pass\n\n",
  "    return n * (n - 1)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
