language: sh
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Read the CSV into an array\n  IFS=',' read\
    \ -r -a array <<< \"$1\"\n  # Check if all keys are upper case\n  if [[ \"${array[0]}\"\
    \ =~ ^[A-Z]*$ ]]; then\n    for i in \"${array[@]}\"; do\n      if [[ ! \"$i\"\
    \ =~ ^[A-Z]*$ ]]; then\n        echo \"False\"\n        return\n      fi\n   \
    \ done\n    echo \"True\"\n    return\n  fi\n  # Check if all keys are lower case\n\
    \  if [[ \"${array[0]}\" =~ ^[a-z]*$ ]]; then\n    for i in \"${array[@]}\"; do\n\
    \      if [[ ! \"$i\" =~ ^[a-z]*$ ]]; then\n        echo \"False\"\n        return\n\
    \      fi\n    done\n    echo \"True\"\n    return\n  fi\n  echo \"False\"\n}\n\
    \ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"\
    p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\\
    n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\\
    nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\")\
    \ = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  # Check for empty dictionary\n  if\
    \ [ $# -eq 0 ]; then\n    echo \"False\"\n    return\n  fi\n  # Check for lower\
    \ case\n  if [ \"$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\" == \"$1\" ]; then\n\
    \    echo \"True\"\n    return\n  fi\n  # Check for upper case\n  if [ \"$(echo\
    \ \"$1\" | tr '[:lower:]' '[:upper:]')\" == \"$1\" ]; then\n    echo \"True\"\n\
    \    return\n  fi\n  # Not all lower or upper case\n  echo \"False\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local dict=\"$1\"\n  local lower_case_keys=0\n\
    \  local upper_case_keys=0\n  local mixed_case_keys=0\n  local empty_dict=0\n\
    \  local key\n  local value\n  local i=0\n  local csv_line\n  local csv_line_count=$(wc\
    \ -l \"$dict\" | awk '{print $1}')\n  if [ \"$csv_line_count\" -eq 0 ]; then\n\
    \    empty_dict=1\n  fi\n  while read csv_line; do\n    key=$(echo \"$csv_line\"\
    \ | cut -d, -f1)\n    value=$(echo \"$csv_line\" | cut -d, -f2)\n    if [ \"$key\"\
    \ == \"$(echo \"$key\" | tr '[:upper:]' '[:lower:]')\" ]; then\n      lower_case_keys=$((lower_case_keys\
    \ + 1))\n    elif [ \"$key\" == \"$(echo \"$key\" | tr '[:lower:]' '[:upper:]')\"\
    \ ]; then\n      upper_case_keys=$((upper_case_keys + 1))\n    else\n      mixed_case_keys=$((mixed_case_keys\
    \ + 1))\n    fi\n    i=$((i + 1))\n  done < \"$dict\"\n  if [ \"$empty_dict\"\
    \ -eq 1 ]; then\n    echo \"False\"\n  elif [ \"$lower_case_keys\" -eq \"$csv_line_count\"\
    \ ]; then\n    echo \"True\"\n  elif [ \"$upper_case_keys\" -eq \"$csv_line_count\"\
    \ ]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'wc: ''p,pineapple\nb,banana'': No such file or directory

    /tmp/tmpmd64l07p.sh: line 24: [: : integer expression expected

    /tmp/tmpmd64l07p.sh: line 13: p,pineapple\nb,banana: No such file or directory

    /tmp/tmpmd64l07p.sh: line 41: [: : integer expression expected

    /tmp/tmpmd64l07p.sh: line 43: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # Read the CSV into an array\n\
    \    IFS=$'\\n' read -d '' -r -a dict < <(echo \"$1\")\n    # Get the first key\n\
    \    key=\"${dict[0]}\"\n    # Get the first key's case\n    case \"$key\" in\n\
    \        *[A-Z]*)\n            case_type=\"upper\"\n            ;;\n        *[a-z]*)\n\
    \            case_type=\"lower\"\n            ;;\n        *)\n            echo\
    \ \"False\"\n            return\n            ;;\n    esac\n    # Loop through\
    \ the rest of the keys\n    for key in \"${dict[@]:1}\"; do\n        # Check if\
    \ the key matches the case of the first key\n        case \"$key\" in\n      \
    \      *[A-Z]*)\n                if [ \"$case_type\" == \"lower\" ]; then\n  \
    \                  echo \"False\"\n                    return\n              \
    \  fi\n                ;;\n            *[a-z]*)\n                if [ \"$case_type\"\
    \ == \"upper\" ]; then\n                    echo \"False\"\n                 \
    \   return\n                fi\n                ;;\n            *)\n         \
    \       echo \"False\"\n                return\n                ;;\n        esac\n\
    \    done\n    echo \"True\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check if the file is empty\n\
    \    if [ ! -s \"$1\" ]; then\n        echo \"False\"\n        return\n    fi\n\
    \n    # Check if all keys are strings in lower case\n    if [ $(awk -F, '{print\
    \ tolower($1)}' \"$1\" | sort -u | wc -l) -eq 1 ]; then\n        echo \"True\"\
    \n        return\n    fi\n\n    # Check if all keys are strings in upper case\n\
    \    if [ $(awk -F, '{print toupper($1)}' \"$1\" | sort -u | wc -l) -eq 1 ]; then\n\
    \        echo \"True\"\n        return\n    fi\n\n    echo \"False\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # Read the CSV into an array\n\
    \    IFS=',' read -r -a array <<< \"$1\"\n    # Check if all keys are lower case\n\
    \    all_lower=1\n    for i in \"${array[@]::2}\"; do\n        if [[ \"$i\" =~\
    \ [A-Z] ]]; then\n            all_lower=0\n            break\n        fi\n   \
    \ done\n    # Check if all keys are upper case\n    all_upper=1\n    for i in\
    \ \"${array[@]::2}\"; do\n        if [[ \"$i\" =~ [a-z] ]]; then\n           \
    \ all_upper=0\n            break\n        fi\n    done\n    # Print the result\n\
    \    if [ $all_lower -eq 1 ] || [ $all_upper -eq 1 ]; then\n        echo \"True\"\
    \n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Create an array of keys\n   \
    \ keys=($(cut -d, -f1 $1))\n    # Create an array of values\n    values=($(cut\
    \ -d, -f2 $1))\n    # Create an array of lowercase keys\n    lower_keys=($(echo\
    \ ${keys[@]} | tr '[:upper:]' '[:lower:]'))\n    # Create an array of uppercase\
    \ keys\n    upper_keys=($(echo ${keys[@]} | tr '[:lower:]' '[:upper:]'))\n   \
    \ # Check if the arrays are equal\n    if [ \"${keys[@]}\" == \"${lower_keys[@]}\"\
    \ ] || [ \"${keys[@]}\" == \"${upper_keys[@]}\" ]; then\n        echo \"True\"\
    \n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: ''p,pineapple\nb,banana'': No such file or directory

    cut: ''p,pineapple\nb,banana'': No such file or directory

    '
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local dict=\"$1\"\n    local lower_keys=0\n\
    \    local upper_keys=0\n    local mixed_keys=0\n    local empty_dict=0\n    local\
    \ key\n    local value\n    local key_type\n    local key_type_prev\n    local\
    \ key_type_prev_prev\n    local key_type_prev_prev_prev\n    local key_type_prev_prev_prev_prev\n\
    \    local key_type_prev_prev_prev_prev_prev\n    local key_type_prev_prev_prev_prev_prev_prev\n\
    \    local key_type_prev_prev_prev_prev_prev_prev_prev\n    local key_type_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev\n    local key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n \
    \   local key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local key_type_prev\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # create a dictionary from the CSV\n  declare\
    \ -A dict\n  while IFS=, read -r key value; do\n    dict[$key]=$value\n  done\
    \ < <(echo \"$1\")\n  # check if all keys are lower case\n  for key in \"${!dict[@]}\"\
    ; do\n    if [[ $key =~ [A-Z] ]]; then\n      echo \"False\"\n      return\n \
    \   fi\n  done\n  echo \"True\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ $# -ne 1 ]; then\n    echo \"\
    Usage: $0 <csv-file>\"\n    exit 1\n  fi\n  if [ ! -f $1 ]; then\n    echo \"\
    File $1 not found\"\n    exit 1\n  fi\n  #\n  # Read the CSV file and create a\
    \ dictionary\n  #\n  declare -A dict\n  while IFS=',' read -r key value\n  do\n\
    \    dict[$key]=$value\n  done < $1\n  #\n  # Loop through the dictionary and\
    \ check for upper and lower case keys\n  #\n  upper=0\n  lower=0\n  for key in\
    \ \"${!dict[@]}\"\n  do\n    if [[ $key =~ ^[A-Z]+$ ]]; then\n      upper=1\n\
    \    fi\n    if [[ $key =~ ^[a-z]+$ ]]; then\n      lower=1\n    fi\n  done\n\
    \  #\n  # If both upper and lower are 1, then we have mixed case\n  #\n  if [\
    \ $upper -eq 1 -a $lower -eq 1 ]; then\n    echo \"False\"\n  else\n    echo \"\
    True\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  # TODO: Implement this function\n\
    \  return 1\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Check if all keys are upper case\n  if [ \"\
    $(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]' | tr -d '\\n' | wc -c)\"\
    \ -eq \"$(echo \"$1\" | cut -d, -f1 | tr -d '\\n' | wc -c)\" ]; then\n    echo\
    \ \"True\"\n    return\n  fi\n  # Check if all keys are lower case\n  if [ \"\
    $(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | tr -d '\\n' | wc -c)\"\
    \ -eq \"$(echo \"$1\" | cut -d, -f1 | tr -d '\\n' | wc -c)\" ]; then\n    echo\
    \ \"True\"\n    return\n  fi\n  echo \"False\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # Convert CSV to a dictionary\n\
    \    declare -A dict\n    while IFS=, read -r key value; do\n        dict[$key]=$value\n\
    \    done < <(echo \"$1\")\n    # Check if all keys are upper case\n    for key\
    \ in \"${!dict[@]}\"; do\n        if [[ ! $key =~ ^[A-Z]+$ ]]; then\n        \
    \    echo \"False\"\n            return\n        fi\n    done\n    echo \"True\"\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <csv file>\"\n        exit 1\n    fi\n    if [ ! -f $1 ]; then\n\
    \        echo \"File $1 does not exist\"\n        exit 1\n    fi\n    #\n    #\
    \ Read the CSV file and create a dictionary\n    #\n    declare -A dict\n    while\
    \ IFS=, read key value; do\n        dict[$key]=$value\n    done < $1\n    #\n\
    \    # Check the dictionary\n    #\n    for key in \"${!dict[@]}\"; do\n     \
    \   if [[ $key =~ [A-Z] ]]; then\n            if [[ $key =~ [a-z] ]]; then\n \
    \               echo \"False\"\n                return\n            fi\n     \
    \   else\n            if [[ $key =~ [A-Z] ]]; then\n                echo \"False\"\
    \n                return\n            fi\n        fi\n    done\n    echo \"True\"\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local dict=\"$1\"\n  local key\n\
    \  local value\n  local lower_keys=0\n  local upper_keys=0\n  local mixed_keys=0\n\
    \  local empty_dict=0\n  local lower_dict=0\n  local upper_dict=0\n  local mixed_dict=0\n\
    \  local key_count=0\n  local value_count=0\n  local key_value_count=0\n  local\
    \ key_value_count_check=0\n  local key_value_count_check_result=0\n  local key_value_count_check_result_string=\"\
    \"\n  local key_value_count_check_result_string_lower=\"\"\n  local key_value_count_check_result_string_upper=\"\
    \"\n  local key_value_count_check_result_string_mixed=\"\"\n  local key_value_count_check_result_string_empty=\"\
    \"\n  local key_value_count_check_result_string_lower_dict=\"\"\n  local key_value_count_check_result_string_upper_dict=\"\
    \"\n  local key_value_count_check_result_string_mixed_dict=\"\"\n  local key_value_count_check_result_string_empty_dict=\"\
    \"\n  local key_value_count_check_result_string_lower_keys=\"\"\n  local key_value_count_check_result_string_upper_keys=\"\
    \"\n  local key_value_count_check_result_string_mixed_keys=\"\"\n  local key_value_count_check_result_string_empty_keys=\"\
    \"\n  local key_value_count_check_result_string_lower_values=\"\"\n  local key_value_count_check_result_string_upper_values=\"\
    \"\n  local key_value_count_check_result_string_mixed_values=\"\"\n  local key_value_count_check_result_string_empty_values=\"\
    \"\n  local key_value_count_check_result_string_lower_key_values=\"\"\n  local\
    \ key_value_count_check_result_string_upper_key_values=\"\"\n  local key_value_count_check_result_string_mixed_key_values=\"\
    \"\n  local key_value_count_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # TODO: Implement this function\n\
    \    # Hint: Use the following command to convert a string to lower case:\n  \
    \  # echo \"STRING\" | tr '[:upper:]' '[:lower:]'\n    # Hint: Use the following\
    \ command to convert a string to upper case:\n    # echo \"STRING\" | tr '[:lower:]'\
    \ '[:upper:]'\n    # Hint: Use the following command to check if a string is all\
    \ upper case:\n    # [[ \"STRING\" =~ ^[A-Z]+$ ]]\n    # Hint: Use the following\
    \ command to check if a string is all lower case:\n    # [[ \"STRING\" =~ ^[a-z]+$\
    \ ]]\n    # Hint: Use the following command to check if a string is empty:\n \
    \   # [[ -z \"STRING\" ]]\n    # Hint: Use the following command to check if a\
    \ file is empty:\n    # [[ ! -s \"FILE\" ]]\n    # Hint: Use the following command\
    \ to check if a file exists:\n    # [[ -f \"FILE\" ]]\n    # Hint: Use the following\
    \ command to check if a directory exists:\n    # [[ -d \"DIRECTORY\" ]]\n    #\
    \ Hint: Use the following command to check if a variable is set:\n    # [[ -v\
    \ \"VARIABLE\" ]]\n    # Hint: Use the following command to check if a variable\
    \ is not set:\n    # [[ -z \"$VARIABLE\" ]]\n    # Hint: Use the following command\
    \ to check if a variable is set and not empty:\n    # [[ -n \"$VARIABLE\" ]]\n\
    \    # Hint: Use the following command to check if a variable is set and not empty:\n\
    \    # [[ -n \"$VARIABLE\" ]]\n    # Hint: Use the following command to check\
    \ if a variable is set and not empty:\n    # [[ -n \"$VARIABLE\" ]]\n    # Hint:\
    \ Use the following command to check if a variable is set and not empty:\n   \
    \ # [[ -n \"$VARIABLE\" ]]\n    # Hint: Use the following command to check if\
    \ a variable is set and not empty:\n    # [[ -\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy4iqpql4.sh: line 45: syntax error near unexpected token `}''

    /tmp/tmpy4iqpql4.sh: line 45: `}''

    '
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check for empty dictionary\n\
    \    if [ $# -eq 0 ]; then\n        echo \"False\"\n        return\n    fi\n \
    \   # Check for lower case keys\n    if [ $(echo \"$1\" | cut -d, -f1 | tr '[:upper:]'\
    \ '[:lower:]' | sort | uniq | wc -l) -eq 1 ]; then\n        echo \"True\"\n  \
    \      return\n    fi\n    # Check for upper case keys\n    if [ $(echo \"$1\"\
    \ | cut -d, -f1 | tr '[:lower:]' '[:upper:]' | sort | uniq | wc -l) -eq 1 ]; then\n\
    \        echo \"True\"\n        return\n    fi\n    # If we get here, the dictionary\
    \ is mixed case\n    echo \"False\"\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local dict=$1\n  local lower=0\n\
    \  local upper=0\n  local key\n  local value\n  while IFS=, read key value; do\n\
    \    if [[ $key =~ ^[a-z]+$ ]]; then\n      lower=1\n    elif [[ $key =~ ^[A-Z]+$\
    \ ]]; then\n      upper=1\n    else\n      echo \"False\"\n      return\n    fi\n\
    \  done < <(echo \"$dict\")\n  if [[ $lower -eq 1 && $upper -eq 1 ]]; then\n \
    \   echo \"False\"\n  else\n    echo \"True\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local dict=\"$1\"\n  local key\n\
    \  local value\n  local lower_case=0\n  local upper_case=0\n  local mixed_case=0\n\
    \  local empty_dict=0\n  local i=0\n  while IFS=, read key value; do\n    if [[\
    \ -z \"$key\" ]]; then\n      empty_dict=1\n      break\n    fi\n    if [[ \"\
    $key\" =~ ^[a-z]+$ ]]; then\n      lower_case=1\n    elif [[ \"$key\" =~ ^[A-Z]+$\
    \ ]]; then\n      upper_case=1\n    else\n      mixed_case=1\n    fi\n    ((i++))\n\
    \  done < <(echo \"$dict\")\n  if [[ $empty_dict -eq 1 ]]; then\n    echo \"False\"\
    \n  elif [[ $lower_case -eq 1 && $upper_case -eq 0 && $mixed_case -eq 0 ]]; then\n\
    \    echo \"True\"\n  elif [[ $lower_case -eq 0 && $upper_case -eq 1 && $mixed_case\
    \ -eq 0 ]]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local dict=\"$1\"\n    local dict_size=$(wc\
    \ -l \"$dict\" | awk '{print $1}')\n    local dict_keys=$(awk -F, '{print $1}'\
    \ \"$dict\")\n    local dict_values=$(awk -F, '{print $2}' \"$dict\")\n    local\
    \ dict_keys_lower=$(echo \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n    local\
    \ dict_keys_upper=$(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n    local\
    \ dict_keys_lower_size=$(echo \"$dict_keys_lower\" | wc -l)\n    local dict_keys_upper_size=$(echo\
    \ \"$dict_keys_upper\" | wc -l)\n    if [[ \"$dict_size\" -eq 0 ]]; then\n   \
    \     echo \"False\"\n    elif [[ \"$dict_keys_lower_size\" -eq \"$dict_size\"\
    \ ]]; then\n        echo \"True\"\n    elif [[ \"$dict_keys_upper_size\" -eq \"\
    $dict_size\" ]]; then\n        echo \"True\"\n    else\n        echo \"False\"\
    \n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'wc: ''p,pineapple\nb,banana'': No such file or directory

    awk: fatal: cannot open file `p,pineapple\nb,banana'' for reading (No such file
    or directory)

    awk: fatal: cannot open file `p,pineapple\nb,banana'' for reading (No such file
    or directory)

    '
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Check if all keys are lower case\n  if [ \"\
    $(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | sort | uniq -c | wc\
    \ -l)\" -eq 1 ]; then\n    echo \"True\"\n    return\n  fi\n  # Check if all keys\
    \ are upper case\n  if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]'\
    \ | sort | uniq -c | wc -l)\" -eq 1 ]; then\n    echo \"True\"\n    return\n \
    \ fi\n  echo \"False\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # Get the first key\n    key=$(echo\
    \ \"$1\" | cut -d, -f1)\n    # Get the first value\n    value=$(echo \"$1\" |\
    \ cut -d, -f2)\n    # Get the first character of the key\n    first_char=$(echo\
    \ \"$key\" | cut -c1)\n    # Get the first character of the value\n    first_char_value=$(echo\
    \ \"$value\" | cut -c1)\n    # Get the rest of the key\n    rest_of_key=$(echo\
    \ \"$key\" | cut -c2-)\n    # Get the rest of the value\n    rest_of_value=$(echo\
    \ \"$value\" | cut -c2-)\n    # If the first character of the key is lowercase\n\
    \    if [ \"$first_char\" = \"$(echo \"$first_char\" | tr '[:upper:]' '[:lower:]')\"\
    \ ]; then\n        # If the first character of the value is lowercase\n      \
    \  if [ \"$first_char_value\" = \"$(echo \"$first_char_value\" | tr '[:upper:]'\
    \ '[:lower:]')\" ]; then\n            # If the rest of the key is lowercase\n\
    \            if [ \"$rest_of_key\" = \"$(echo \"$rest_of_key\" | tr '[:upper:]'\
    \ '[:lower:]')\" ]; then\n                # If the rest of the value is lowercase\n\
    \                if [ \"$rest_of_value\" = \"$(echo \"$rest_of_value\" | tr '[:upper:]'\
    \ '[:lower:]')\" ]; then\n                    # If the rest of the key is not\
    \ empty\n                    if [ -n \"$rest_of_key\" ]; then\n              \
    \          # If the rest of the value is not empty\n                        if\
    \ [ -n \"$rest_of_value\" ]; then\n                            # If there is more\
    \ than one line\n                            if [ $(echo \"$1\" | wc -l) -gt 1\
    \ ]; then\n                                # Recurse\n                       \
    \         check_dict_case \"$(echo \"$1\" | tail -n +2)\"\n                  \
    \          else\n                                echo \"True\"\n             \
    \               fi\n                        else\n                \n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp50ic9odn.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmp50ic9odn.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # If the first character is a digit,\
    \ then it is not a string\n    if [[ \"$1\" =~ ^[0-9] ]]; then\n        echo \"\
    False\"\n        return\n    fi\n    # If the first character is a lower case\
    \ letter, then all keys must be lower case\n    if [[ \"$1\" =~ ^[a-z] ]]; then\n\
    \        # Check all keys are lower case\n        while IFS=, read -r key value\n\
    \        do\n            if [[ \"$key\" =~ ^[A-Z] ]]; then\n                echo\
    \ \"False\"\n                return\n            fi\n        done < <(echo \"\
    $1\")\n        echo \"True\"\n        return\n    fi\n    # If the first character\
    \ is an upper case letter, then all keys must be upper case\n    if [[ \"$1\"\
    \ =~ ^[A-Z] ]]; then\n        # Check all keys are upper case\n        while IFS=,\
    \ read -r key value\n        do\n            if [[ \"$key\" =~ ^[a-z] ]]; then\n\
    \                echo \"False\"\n                return\n            fi\n    \
    \    done < <(echo \"$1\")\n        echo \"True\"\n        return\n    fi\n  \
    \  echo \"False\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local csv=\"$1\"\n    local key\n\
    \    local value\n    local lower_case_keys=0\n    local upper_case_keys=0\n \
    \   local mixed_case_keys=0\n    local empty_dict=0\n    local i=0\n    while\
    \ IFS=, read key value; do\n        if [[ -z \"$key\" ]]; then\n            empty_dict=1\n\
    \            break\n        fi\n        if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n\
    \            lower_case_keys=1\n        elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n\
    \            upper_case_keys=1\n        else\n            mixed_case_keys=1\n\
    \        fi\n        i=$((i+1))\n    done < <(echo \"$csv\")\n    if [[ $i -eq\
    \ 0 ]]; then\n        empty_dict=1\n    fi\n    if [[ $lower_case_keys -eq 1 &&\
    \ $upper_case_keys -eq 0 && $mixed_case_keys -eq 0 && $empty_dict -eq 0 ]]; then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ $# -ne 1 ]; then\n    echo \"\
    Usage: check_dict_case <csv_file>\"\n    return 1\n  fi\n  # Check if the file\
    \ exists\n  if [ ! -f $1 ]; then\n    echo \"File $1 does not exist\"\n    return\
    \ 1\n  fi\n  # Check if the file is empty\n  if [ ! -s $1 ]; then\n    echo \"\
    File $1 is empty\"\n    return 1\n  fi\n  # Check if the file is a CSV\n  if [\
    \ $(head -n 1 $1 | grep -c \",\") -ne 1 ]; then\n    echo \"File $1 is not a CSV\"\
    \n    return 1\n  fi\n  # Check if the file has two columns\n  if [ $(head -n\
    \ 1 $1 | awk -F, '{print NF}') -ne 2 ]; then\n    echo \"File $1 does not have\
    \ two columns\"\n    return 1\n  fi\n  # Check if the file has only strings in\
    \ the first column\n  if [ $(awk -F, '{print $1}' $1 | grep -c \"[^a-zA-Z]\")\
    \ -ne 0 ]; then\n    echo \"File $1 has non-string values in the first column\"\
    \n    return 1\n  fi\n  # Check if the file has only strings in the second column\n\
    \  if [ $(awk -F, '{print $2}' $1 | grep -c \"[^a-zA-Z]\") -ne 0 ]; then\n   \
    \ echo \"File $1 has non-string values in the second column\"\n    return 1\n\
    \  fi\n  # Check if the file has only lower case strings in the first column\n\
    \  if [ $(awk -F, '{print $1}' $1 | grep -c \"[A-Z]\") -ne 0 ]; then\n    echo\
    \ \"File $1 has upper case values in the first column\"\n    return 1\n  fi\n\
    \  # Check if the file has only upper case strings in the first column\n  if [\
    \ $(awk -F, '{print $1}' $1 | grep -c \"[a-z]\") -ne 0 ]; then\n    echo \"File\
    \ $1 has lower case values in the first column\"\n    return 1\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <csv file>\"\n        exit 1\n    fi\n    if [ ! -f $1 ]; then\n\
    \        echo \"File $1 does not exist\"\n        exit 1\n    fi\n    # Create\
    \ a dictionary from the CSV file\n    declare -A dict\n    while IFS=, read -r\
    \ key value; do\n        dict[$key]=$value\n    done < $1\n    # Check if the\
    \ dictionary is empty\n    if [ ${#dict[@]} -eq 0 ]; then\n        echo \"False\"\
    \n        exit 0\n    fi\n    # Check if all keys are in lower case\n    for key\
    \ in \"${!dict[@]}\"; do\n        if [ \"$key\" != \"${key,,}\" ]; then\n    \
    \        echo \"False\"\n            exit 0\n        fi\n    done\n    echo \"\
    True\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local csv=\"$1\"\n    local key\n\
    \    local value\n    local lower_case=0\n    local upper_case=0\n    local mixed_case=0\n\
    \    local empty_dict=0\n    local total_keys=0\n    local total_values=0\n  \
    \  local total_pairs=0\n    local total_lines=0\n    local line\n\n    # Check\
    \ for empty dictionary\n    if [ -z \"$csv\" ]; then\n        empty_dict=1\n \
    \   fi\n\n    # Check for empty file\n    if [ -f \"$csv\" ]; then\n        if\
    \ [ ! -s \"$csv\" ]; then\n            empty_dict=1\n        fi\n    fi\n\n  \
    \  # Process the CSV\n    while IFS=, read -r key value; do\n        total_keys=$((total_keys\
    \ + 1))\n        total_values=$((total_values + 1))\n        total_pairs=$((total_pairs\
    \ + 1))\n        total_lines=$((total_lines + 1))\n        if [[ \"$key\" =~ ^[a-z]+$\
    \ ]]; then\n            lower_case=$((lower_case + 1))\n        elif [[ \"$key\"\
    \ =~ ^[A-Z]+$ ]]; then\n            upper_case=$((upper_case + 1))\n        else\n\
    \            mixed_case=$((mixed_case + 1))\n        fi\n    done < \"$csv\"\n\
    \n    # Check for empty dictionary\n    if [ $empty_dict -eq 1 ]; then\n     \
    \   echo \"False\"\n        return\n    fi\n\n    # Check for empty file\n   \
    \ if [ $total_lines -eq 0 ]; then\n        echo \"False\"\n        return\n  \
    \  fi\n\n    # Check for non-matching key and value counts\n    if [ $total_keys\
    \ -ne $total_values ]; then\n        echo \"False\"\n        return\n    fi\n\n\
    \    # Check for non-matching key and value counts\n    if [ $total_keys -ne $total_pairs\
    \ ]; then\n        echo \"False\"\n        return\n    fi\n\n    # Check for mixed\
    \ case\n    if [ $mixed_case -gt 0 ]; then\n        echo \"False\"\n        return\n\
    \    fi\n\n    # Check for lower case\n   \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6_frz6rp.sh: line 13: p,pineapple\nb,banana: No such file or directory

    '
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ $# -ne 1 ]; then\n    echo \"\
    Usage: $0 <dictionary>\"\n    exit 1\n  fi\n  if [ ! -f $1 ]; then\n    echo \"\
    File $1 does not exist\"\n    exit 1\n  fi\n  # Check if the file is empty\n \
    \ if [ ! -s $1 ]; then\n    echo \"False\"\n    exit 0\n  fi\n  # Check if the\
    \ first column is all lower case\n  if [ $(head -1 $1 | cut -d, -f1 | tr '[:upper:]'\
    \ '[:lower:]') == $(head -1 $1 | cut -d, -f1) ]; then\n    # Check if the first\
    \ column is all lower case\n    if [ $(tail -n +2 $1 | cut -d, -f1 | tr '[:upper:]'\
    \ '[:lower:]') == $(tail -n +2 $1 | cut -d, -f1) ]; then\n      echo \"True\"\n\
    \      exit 0\n    fi\n  fi\n  # Check if the first column is all upper case\n\
    \  if [ $(head -1 $1 | cut -d, -f1 | tr '[:lower:]' '[:upper:]') == $(head -1\
    \ $1 | cut -d, -f1) ]; then\n    # Check if the first column is all upper case\n\
    \    if [ $(tail -n +2 $1 | cut -d, -f1 | tr '[:lower:]' '[:upper:]') == $(tail\
    \ -n +2 $1 | cut -d, -f1) ]; then\n      echo \"True\"\n      exit 0\n    fi\n\
    \  fi\n  echo \"False\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <csv_file>\"\n        exit 1\n    fi\n    if [ ! -f $1 ]; then\n\
    \        echo \"File $1 does not exist\"\n        exit 1\n    fi\n    #\n    #\
    \ Read the file into an array\n    #\n    declare -a dict\n    while IFS=, read\
    \ -r key value; do\n        dict[$key]=$value\n    done < $1\n    #\n    # Check\
    \ if all keys are upper or lower case\n    #\n    for key in \"${!dict[@]}\";\
    \ do\n        if [[ $key =~ [A-Z] ]] && [[ $key =~ [a-z] ]]; then\n          \
    \  echo \"False\"\n            exit 0\n        fi\n    done\n    echo \"True\"\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # Check if all keys are lower case\n\
    \    if [ \"$(echo \"$1\" | awk -F, '{print tolower($1)}' | sort -u | wc -l)\"\
    \ -eq 1 ]; then\n        echo \"True\"\n        return\n    fi\n    # Check if\
    \ all keys are upper case\n    if [ \"$(echo \"$1\" | awk -F, '{print toupper($1)}'\
    \ | sort -u | wc -l)\" -eq 1 ]; then\n        echo \"True\"\n        return\n\
    \    fi\n    echo \"False\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check for empty dictionary\n\
    \    if [ $# -eq 0 ]; then\n        echo \"False\"\n        return\n    fi\n \
    \   # Check for all upper case\n    if [ \"$(echo $@ | tr '[:lower:]' '[:upper:]')\"\
    \ == \"$@\" ]; then\n        echo \"True\"\n        return\n    fi\n    # Check\
    \ for all lower case\n    if [ \"$(echo $@ | tr '[:upper:]' '[:lower:]')\" ==\
    \ \"$@\" ]; then\n        echo \"True\"\n        return\n    fi\n    # Not all\
    \ upper or lower case\n    echo \"False\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ $# -ne 1 ]; then\n    echo \"\
    Usage: $0 <csv file>\"\n    exit 1\n  fi\n  if [ ! -f $1 ]; then\n    echo \"\
    File $1 not found\"\n    exit 1\n  fi\n  # Create a dictionary from the CSV file\n\
    \  declare -A dict\n  while IFS=, read -r key value; do\n    dict[$key]=$value\n\
    \  done < $1\n  # Check the dictionary\n  for key in \"${!dict[@]}\"; do\n   \
    \ if [[ $key =~ [A-Z] ]] && [[ $key =~ [a-z] ]]; then\n      echo \"False\"\n\
    \      exit 0\n    fi\n  done\n  echo \"True\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local dict=$1\n  local key\n  local\
    \ value\n  local lower_case=0\n  local upper_case=0\n  local mixed_case=0\n  local\
    \ empty_dict=0\n  local dict_size=0\n  local dict_size_lower=0\n  local dict_size_upper=0\n\
    \  local dict_size_mixed=0\n  local dict_size_empty=0\n  local dict_size_total=0\n\
    \  local dict_size_total_lower=0\n  local dict_size_total_upper=0\n  local dict_size_total_mixed=0\n\
    \  local dict_size_total_empty=0\n  local dict_size_total_all=0\n  local dict_size_total_all_lower=0\n\
    \  local dict_size_total_all_upper=0\n  local dict_size_total_all_mixed=0\n  local\
    \ dict_size_total_all_empty=0\n  local dict_size_total_all_lower_upper=0\n  local\
    \ dict_size_total_all_lower_mixed=0\n  local dict_size_total_all_lower_empty=0\n\
    \  local dict_size_total_all_upper_mixed=0\n  local dict_size_total_all_upper_empty=0\n\
    \  local dict_size_total_all_mixed_empty=0\n  local dict_size_total_all_lower_upper_mixed=0\n\
    \  local dict_size_total_all_lower_upper_empty=0\n  local dict_size_total_all_lower_mixed_empty=0\n\
    \  local dict_size_total_all_upper_mixed_empty=0\n  local dict_size_total_all_lower_upper_mixed_empty=0\n\
    \  local dict_size_total_all_lower_upper_mixed_empty_lower=0\n  local dict_size_total_all_lower_upper_mixed_empty_upper=0\n\
    \  local dict_size_total_all_lower_upper_mixed_empty_mixed=0\n  local dict_size_total_all_lower_upper_mixed_empty_empty=0\n\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # First, check if all keys are\
    \ lower case\n    lower=1\n    upper=1\n    while IFS=, read -r key value; do\n\
    \        if [ \"$key\" != \"$(echo $key | tr '[:upper:]' '[:lower:]')\" ]; then\n\
    \            lower=0\n        fi\n        if [ \"$key\" != \"$(echo $key | tr\
    \ '[:lower:]' '[:upper:]')\" ]; then\n            upper=0\n        fi\n    done\
    \ < <(echo \"$1\")\n    if [ $lower -eq 1 ] || [ $upper -eq 1 ]; then\n      \
    \  echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <csv_file>\"\n        exit 1\n    fi\n    if [ ! -f $1 ]; then\n\
    \        echo \"File $1 does not exist\"\n        exit 1\n    fi\n    #\n    #\
    \ Read the CSV file into an array\n    #\n    declare -A dict\n    while IFS=,\
    \ read -r key value\n    do\n        dict[$key]=$value\n    done < $1\n    #\n\
    \    # Check the dictionary\n    #\n    for key in \"${!dict[@]}\"\n    do\n \
    \       if [[ $key =~ [A-Z] ]]; then\n            if [[ $key =~ [a-z] ]]; then\n\
    \                echo \"False\"\n                return\n            fi\n    \
    \    else\n            if [[ $key =~ [A-Z] ]]; then\n                echo \"False\"\
    \n                return\n            fi\n        fi\n    done\n    echo \"True\"\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ $# -ne 1 ]; then\n    echo \"\
    Usage: $0 <csv_file>\"\n    exit 1\n  fi\n  if [ ! -f $1 ]; then\n    echo \"\
    File $1 does not exist\"\n    exit 1\n  fi\n  # Create a dictionary from the CSV\
    \ file\n  declare -A dict\n  while IFS=, read -r key value; do\n    dict[$key]=$value\n\
    \  done < $1\n  # Check if the dictionary is empty\n  if [ ${#dict[@]} -eq 0 ];\
    \ then\n    echo \"False\"\n    exit 0\n  fi\n  # Check if all keys are strings\
    \ in lower case\n  for key in \"${!dict[@]}\"; do\n    if [[ $key =~ ^[a-z]+$\
    \ ]]; then\n      continue\n    else\n      echo \"False\"\n      exit 0\n   \
    \ fi\n  done\n  echo \"True\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <csv file>\"\n        exit 1\n    fi\n    if [ ! -f $1 ]; then\n\
    \        echo \"File $1 does not exist\"\n        exit 1\n    fi\n    #\n    #\
    \ Read the CSV file into an array\n    #\n    declare -A dict\n    while IFS=,\
    \ read -r key value; do\n        dict[$key]=$value\n    done < $1\n    #\n   \
    \ # Check if the dictionary is empty\n    #\n    if [ ${#dict[@]} -eq 0 ]; then\n\
    \        echo \"False\"\n        exit 0\n    fi\n    #\n    # Check if all keys\
    \ are in lower case\n    #\n    for key in \"${!dict[@]}\"; do\n        if [ \"\
    $key\" != \"${key,,}\" ]; then\n            echo \"False\"\n            exit 0\n\
    \        fi\n    done\n    echo \"True\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <csv_file>\"\n        exit 1\n    fi\n    if [ ! -f $1 ]; then\n\
    \        echo \"File $1 does not exist\"\n        exit 1\n    fi\n    #\n    #\
    \ Read the CSV file into an array\n    #\n    declare -A dict\n    while IFS=,\
    \ read -r key value; do\n        dict[$key]=$value\n    done < $1\n    #\n   \
    \ # Check the keys\n    #\n    for key in \"${!dict[@]}\"; do\n        if [[ $key\
    \ =~ [A-Z] ]]; then\n            if [[ $key =~ [a-z] ]]; then\n              \
    \  echo \"False\"\n                exit 0\n            fi\n        else\n    \
    \        if [[ $key =~ [A-Z] ]]; then\n                echo \"False\"\n      \
    \          exit 0\n            fi\n        fi\n    done\n    echo \"True\"\n}\n\
    \ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"\
    p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\\
    n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\\
    nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\")\
    \ = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # Check if all keys are lower case\n\
    \    cat $1 | cut -d, -f1 | grep -q '[A-Z]'\n    if [ $? -eq 0 ]; then\n     \
    \   # Check if all keys are upper case\n        cat $1 | cut -d, -f1 | grep -q\
    \ '[a-z]'\n        if [ $? -eq 0 ]; then\n            echo \"False\"\n       \
    \     return\n        fi\n    fi\n    echo \"True\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cat: ''p,pineapple\nb,banana'': No such file or directory

    '
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Check if all keys are lower case\n  if [ \"\
    $(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | sort | uniq -c | wc\
    \ -l)\" -eq 1 ]; then\n    echo \"True\"\n    return\n  fi\n  # Check if all keys\
    \ are upper case\n  if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]'\
    \ | sort | uniq -c | wc -l)\" -eq 1 ]; then\n    echo \"True\"\n    return\n \
    \ fi\n  echo \"False\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <dictionary.csv>\"\n        exit 1\n    fi\n    if [ ! -f $1\
    \ ]; then\n        echo \"File $1 does not exist\"\n        exit 1\n    fi\n \
    \   #\n    # Read the CSV file into a dictionary\n    #\n    declare -A dict\n\
    \    while IFS=, read -r key value\n    do\n        dict[$key]=$value\n    done\
    \ < $1\n    #\n    # Check the dictionary\n    #\n    lower=0\n    upper=0\n \
    \   for key in \"${!dict[@]}\"\n    do\n        if [[ $key =~ [a-z] ]]; then\n\
    \            lower=1\n        fi\n        if [[ $key =~ [A-Z] ]]; then\n     \
    \       upper=1\n        fi\n    done\n    if [ $lower -eq 1 -a $upper -eq 1 ];\
    \ then\n        echo \"False\"\n    else\n        echo \"True\"\n    fi\n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check for empty dictionary\n\
    \    if [ $# -eq 0 ]; then\n        echo \"False\"\n        return\n    fi\n \
    \   # Check for all lower case\n    if [ \"$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\"\
    \ == \"$1\" ]; then\n        echo \"True\"\n        return\n    fi\n    # Check\
    \ for all upper case\n    if [ \"$(echo \"$1\" | tr '[:lower:]' '[:upper:]')\"\
    \ == \"$1\" ]; then\n        echo \"True\"\n        return\n    fi\n    # Otherwise,\
    \ return False\n    echo \"False\"\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <dictionary>\"\n        return 1\n    fi\n    if [ ! -f $1\
    \ ]; then\n        echo \"File $1 not found\"\n        return 1\n    fi\n    #\
    \ Check if the file is empty\n    if [ ! -s $1 ]; then\n        echo \"False\"\
    \n        return 0\n    fi\n    # Check if all keys are in lower case\n    if\
    \ [ $(awk -F, '{print tolower($1)}' $1 | sort -u | wc -l) -eq 1 ]; then\n    \
    \    echo \"True\"\n        return 0\n    fi\n    # Check if all keys are in upper\
    \ case\n    if [ $(awk -F, '{print toupper($1)}' $1 | sort -u | wc -l) -eq 1 ];\
    \ then\n        echo \"True\"\n        return 0\n    fi\n    echo \"False\"\n\
    \    return 0\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <two column CSV in key,value order>\"\n        exit 1\n   \
    \ fi\n    if [ ! -f $1 ]; then\n        echo \"File $1 does not exist\"\n    \
    \    exit 1\n    fi\n    # Create a dictionary from the CSV\n    declare -A dict\n\
    \    while IFS=, read -r key value; do\n        dict[$key]=$value\n    done <\
    \ $1\n    # Check the dictionary\n    for key in \"${!dict[@]}\"; do\n       \
    \ if [[ $key =~ [A-Z] ]]; then\n            if [[ $key =~ [a-z] ]]; then\n   \
    \             echo \"False\"\n                exit 0\n            fi\n       \
    \ else\n            if [[ $key =~ [A-Z] ]]; then\n                echo \"False\"\
    \n                exit 0\n            fi\n        fi\n    done\n    echo \"True\"\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local -i i=0\n  local -i lc=0\n \
    \ local -i uc=0\n  local -i n=0\n  local -i len=0\n  local -i rc=0\n  local -i\
    \ c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local\
    \ -i h=0\n  local -i j=0\n  local -i k=0\n  local -i m=0\n  local -i o=0\n  local\
    \ -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local\
    \ -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local\
    \ -i z=0\n  local -i A=0\n  local -i B=0\n  local -i C=0\n  local -i D=0\n  local\
    \ -i E=0\n  local -i F=0\n  local -i G=0\n  local -i H=0\n  local -i J=0\n  local\
    \ -i K=0\n  local -i M=0\n  local -i N=0\n  local -i O=0\n  local -i P=0\n  local\
    \ -i Q=0\n  local -i R=0\n  local -i S=0\n  local -i T=0\n  local -i U=0\n  local\
    \ -i V=0\n  local -i W=0\n  local -i X=0\n  local -i Y=0\n  local -i Z=0\n  local\
    \ -i zero=0\n  local -i one=0\n  local -i two=0\n  local -i three=0\n  local -i\
    \ four=0\n  local -i five=0\n  local -i six=0\n  local -i seven=0\n  local -i\
    \ eight=0\n  local -i nine=0\n  local -i colon=0\n  local -i semicolon=0\n  local\
    \ -\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local dict=\"$1\"\n    local dict_keys=\"\
    $(cut -d, -f1 <<< \"$dict\")\"\n    local dict_values=\"$(cut -d, -f2 <<< \"$dict\"\
    )\"\n    local dict_keys_lower=\"$(tr '[:upper:]' '[:lower:]' <<< \"$dict_keys\"\
    )\"\n    local dict_keys_upper=\"$(tr '[:lower:]' '[:upper:]' <<< \"$dict_keys\"\
    )\"\n    if [[ \"$dict_keys\" == \"$dict_keys_lower\" ]]; then\n        echo \"\
    True\"\n    elif [[ \"$dict_keys\" == \"$dict_keys_upper\" ]]; then\n        echo\
    \ \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check for empty dictionary\n\
    \    if [ -z \"$1\" ]; then\n        echo \"False\"\n        return\n    fi\n\
    \    # Check for lower case keys\n    if [ \"$(echo \"$1\" | cut -d, -f1 | tr\
    \ '[:upper:]' '[:lower:]' | tr -d '[:digit:]' | tr -d ' ' | sort | uniq -c | wc\
    \ -l)\" -eq 1 ]; then\n        echo \"True\"\n        return\n    fi\n    # Check\
    \ for upper case keys\n    if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:lower:]'\
    \ '[:upper:]' | tr -d '[:digit:]' | tr -d ' ' | sort | uniq -c | wc -l)\" -eq\
    \ 1 ]; then\n        echo \"True\"\n        return\n    fi\n    # Otherwise, return\
    \ False\n    echo \"False\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check if the dictionary is empty\n\
    \    if [ -z \"$1\" ]; then\n        echo \"False\"\n        return\n    fi\n\n\
    \    # Check if the keys are all upper case\n    if [ \"$(echo \"$1\" | cut -d,\
    \ -f1 | tr '[:lower:]' '[:upper:]' | tr -d '\\n' | wc -c)\" -eq \"$(echo \"$1\"\
    \ | wc -l)\" ]; then\n        echo \"True\"\n        return\n    fi\n\n    # Check\
    \ if the keys are all lower case\n    if [ \"$(echo \"$1\" | cut -d, -f1 | tr\
    \ '[:upper:]' '[:lower:]' | tr -d '\\n' | wc -c)\" -eq \"$(echo \"$1\" | wc -l)\"\
    \ ]; then\n        echo \"True\"\n        return\n    fi\n\n    # If we get here,\
    \ the keys are not all upper or lower case\n    echo \"False\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Check for empty dictionary\n  if [ -z \"$(cat\
    \ $1)\" ]; then\n    echo \"False\"\n    return\n  fi\n  # Check for all lower\
    \ case\n  if [ \"$(cat $1 | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | sort |\
    \ uniq -c | grep -v \"^ *1 \")\" == \"\" ]; then\n    echo \"True\"\n    return\n\
    \  fi\n  # Check for all upper case\n  if [ \"$(cat $1 | cut -d, -f1 | tr '[:lower:]'\
    \ '[:upper:]' | sort | uniq -c | grep -v \"^ *1 \")\" == \"\" ]; then\n    echo\
    \ \"True\"\n    return\n  fi\n  echo \"False\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cat: ''p,pineapple\nb,banana'': No such file or directory

    '
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <csv_file>\"\n        exit 1\n    fi\n    if [ ! -f $1 ]; then\n\
    \        echo \"File $1 does not exist\"\n        exit 1\n    fi\n    #\n    #\
    \ Read the CSV file into an array\n    #\n    declare -A dict\n    while IFS=,\
    \ read -r key value; do\n        dict[$key]=$value\n    done < $1\n    #\n   \
    \ # Check for empty dictionary\n    #\n    if [ ${#dict[@]} -eq 0 ]; then\n  \
    \      echo \"False\"\n        exit 0\n    fi\n    #\n    # Check for all lower\
    \ case keys\n    #\n    for key in \"${!dict[@]}\"; do\n        if [[ \"$key\"\
    \ =~ [A-Z] ]]; then\n            echo \"False\"\n            exit 0\n        fi\n\
    \    done\n    echo \"True\"\n    exit 0\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # Convert CSV to a dictionary\n\
    \    declare -A dict\n    while IFS=, read -r key value; do\n        dict[$key]=$value\n\
    \    done < <(echo \"$1\")\n    # Check if all keys are upper case\n    for key\
    \ in \"${!dict[@]}\"; do\n        if [[ $key =~ [a-z] ]]; then\n            echo\
    \ \"False\"\n            return\n        fi\n    done\n    echo \"True\"\n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local dict=\"$1\"\n    local key\n\
    \    local value\n    local upper=0\n    local lower=0\n    local mixed=0\n  \
    \  local empty=0\n    local line\n    local result=0\n    local -A dict_array\n\
    \n    while read line; do\n        IFS=',' read -r key value <<< \"$line\"\n \
    \       if [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n            upper=$((upper+1))\n\
    \        elif [[ \"$key\" =~ ^[a-z]+$ ]]; then\n            lower=$((lower+1))\n\
    \        else\n            mixed=$((mixed+1))\n        fi\n        dict_array[\"\
    $key\"]=\"$value\"\n    done < <(echo \"$dict\")\n\n    if [[ \"$upper\" -gt 0\
    \ && \"$lower\" -gt 0 ]]; then\n        result=1\n    elif [[ \"$mixed\" -gt 0\
    \ ]]; then\n        result=1\n    elif [[ \"$upper\" -eq 0 && \"$lower\" -eq 0\
    \ ]]; then\n        result=1\n    fi\n\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local dict=\"$1\"\n  local lower_case=0\n\
    \  local upper_case=0\n  local mixed_case=0\n  local key\n  local value\n  local\
    \ IFS=','\n  while read key value; do\n    if [[ \"$key\" =~ [a-z] ]]; then\n\
    \      lower_case=1\n    fi\n    if [[ \"$key\" =~ [A-Z] ]]; then\n      upper_case=1\n\
    \    fi\n    if [[ \"$key\" =~ [A-Za-z] ]]; then\n      mixed_case=1\n    fi\n\
    \  done < <(echo \"$dict\")\n  if [[ \"$lower_case\" -eq 1 && \"$upper_case\"\
    \ -eq 1 ]]; then\n    echo \"False\"\n  elif [[ \"$mixed_case\" -eq 1 ]]; then\n\
    \    echo \"False\"\n  else\n    echo \"True\"\n  fi\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <csv_file>\"\n        exit 1\n    fi\n    if [ ! -f $1 ]; then\n\
    \        echo \"File $1 not found\"\n        exit 1\n    fi\n    #\n    # Read\
    \ the CSV file into an array\n    #\n    declare -A dict\n    while IFS=, read\
    \ -r key value\n    do\n        dict[$key]=$value\n    done < $1\n    #\n    #\
    \ Check the dictionary\n    #\n    lower_case=0\n    upper_case=0\n    for key\
    \ in \"${!dict[@]}\"\n    do\n        if [[ $key =~ ^[a-z]+$ ]]; then\n      \
    \      lower_case=1\n        elif [[ $key =~ ^[A-Z]+$ ]]; then\n            upper_case=1\n\
    \        else\n            echo \"False\"\n            exit 0\n        fi\n  \
    \  done\n    if [ $lower_case -eq 1 -a $upper_case -eq 1 ]; then\n        echo\
    \ \"False\"\n    else\n        echo \"True\"\n    fi\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Get the first key\n  key=$(head -n 1 $1 | cut\
    \ -d, -f1)\n  # Get the first value\n  value=$(head -n 1 $1 | cut -d, -f2)\n \
    \ # Check if the first key is lower case\n  if [[ $key =~ ^[a-z]+$ ]]; then\n\
    \    # Check if the rest of the keys are lower case\n    if [ $(grep -v \"^$key,$value\"\
    \ $1 | grep -v \"^$\" | grep -v \"[A-Z]\") ]; then\n      echo \"False\"\n   \
    \   return\n    fi\n  # Check if the first key is upper case\n  elif [[ $key =~\
    \ ^[A-Z]+$ ]]; then\n    # Check if the rest of the keys are upper case\n    if\
    \ [ $(grep -v \"^$key,$value\" $1 | grep -v \"^$\" | grep -v \"[a-z]\") ]; then\n\
    \      echo \"False\"\n      return\n    fi\n  else\n    echo \"False\"\n    return\n\
    \  fi\n  echo \"True\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: 'head: cannot open ''p,pineapple\nb,banana'' for reading: No such file or
    directory

    head: cannot open ''p,pineapple\nb,banana'' for reading: No such file or directory

    '
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check for empty dictionary\n\
    \    if [ $# -eq 0 ]; then\n        echo \"False\"\n        return\n    fi\n \
    \   # Check for all lower case\n    if [ \"$(echo $1 | tr '[:upper:]' '[:lower:]')\"\
    \ == \"$1\" ]; then\n        echo \"True\"\n        return\n    fi\n    # Check\
    \ for all upper case\n    if [ \"$(echo $1 | tr '[:lower:]' '[:upper:]')\" ==\
    \ \"$1\" ]; then\n        echo \"True\"\n        return\n    fi\n    # Not all\
    \ lower or upper case\n    echo \"False\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Check if all keys are lower case\n  if [ \"\
    $(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | sort -u | wc -l)\"\
    \ -eq 1 ]; then\n    echo \"True\"\n    return\n  fi\n  # Check if all keys are\
    \ upper case\n  if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]'\
    \ | sort -u | wc -l)\" -eq 1 ]; then\n    echo \"True\"\n    return\n  fi\n  echo\
    \ \"False\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check for empty dictionary\n\
    \    if [ $# -eq 0 ]; then\n        echo \"False\"\n        return\n    fi\n \
    \   # Check for all lower case\n    if [ \"$(echo $@ | tr '[:upper:]' '[:lower:]')\"\
    \ == \"$@\" ]; then\n        echo \"True\"\n        return\n    fi\n    # Check\
    \ for all upper case\n    if [ \"$(echo $@ | tr '[:lower:]' '[:upper:]')\" ==\
    \ \"$@\" ]; then\n        echo \"True\"\n        return\n    fi\n    # Not all\
    \ lower case or all upper case\n    echo \"False\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Read the CSV into an array\n  IFS=',' read\
    \ -r -a array <<< \"$1\"\n  # Get the first key\n  key=${array[0]}\n  # Get the\
    \ first value\n  value=${array[1]}\n  # Get the first character of the key\n \
    \ first_char=${key:0:1}\n  # Get the first character of the value\n  first_value=${value:0:1}\n\
    \  # Get the length of the key\n  key_length=${#key}\n  # Get the length of the\
    \ value\n  value_length=${#value}\n  # Get the last character of the key\n  last_char=${key:key_length-1:1}\n\
    \  # Get the last character of the value\n  last_value=${value:value_length-1:1}\n\
    \  # Get the length of the array\n  array_length=${#array[@]}\n  # Get the last\
    \ index of the array\n  last_index=$((array_length-1))\n  # Get the last key\n\
    \  last_key=${array[last_index]}\n  # Get the last value\n  last_value=${array[last_index-1]}\n\
    \  # Get the last character of the last key\n  last_char_last_key=${last_key:key_length-1:1}\n\
    \  # Get the last character of the last value\n  last_char_last_value=${last_value:value_length-1:1}\n\
    \  # Get the first character of the last key\n  first_char_last_key=${last_key:0:1}\n\
    \  # Get the first character of the last value\n  first_char_last_value=${last_value:0:1}\n\
    \  # Check if the first character of the first key is lowercase\n  if [[ $first_char\
    \ =~ ^[a-z]$ ]]; then\n    # Check if the first character of the first value is\
    \ lowercase\n    if [[ $first_value =~ ^[a-z]$ ]]; then\n      # Check if the\
    \ last character of\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpdo3f_ui2.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmpdo3f_ui2.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check for empty dictionary\n\
    \    if [ -z \"$1\" ]; then\n        echo \"False\"\n        return\n    fi\n\
    \    # Check for lower case keys\n    if [ \"$(echo \"$1\" | awk -F, '{print tolower($1)}'\
    \ | sort | uniq -c | awk '{print $1}')\" == \"$(echo \"$1\" | awk -F, '{print\
    \ $1}' | wc -l)\" ]; then\n        echo \"True\"\n        return\n    fi\n   \
    \ # Check for upper case keys\n    if [ \"$(echo \"$1\" | awk -F, '{print toupper($1)}'\
    \ | sort | uniq -c | awk '{print $1}')\" == \"$(echo \"$1\" | awk -F, '{print\
    \ $1}' | wc -l)\" ]; then\n        echo \"True\"\n        return\n    fi\n   \
    \ # If we get here, the dictionary is mixed case\n    echo \"False\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local dict=\"$1\"\n    local lower=0\n\
    \    local upper=0\n    local mixed=0\n    local key\n    local value\n    while\
    \ IFS=, read -r key value; do\n        if [[ $key =~ [a-z] ]]; then\n        \
    \    lower=1\n        elif [[ $key =~ [A-Z] ]]; then\n            upper=1\n  \
    \      else\n            mixed=1\n        fi\n    done < <(echo \"$dict\")\n \
    \   if [[ $lower -eq 1 && $upper -eq 0 && $mixed -eq 0 ]]; then\n        echo\
    \ \"True\"\n    elif [[ $lower -eq 0 && $upper -eq 1 && $mixed -eq 0 ]]; then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  # Read the CSV into a dictionary\n\
    \  declare -A dict\n  while IFS=, read -r key value\n  do\n    dict[$key]=$value\n\
    \  done < <(echo \"$1\")\n  # Check if the dictionary is empty\n  if [ ${#dict[@]}\
    \ -eq 0 ]; then\n    echo \"False\"\n    return\n  fi\n  # Check if all keys are\
    \ in lower case\n  for key in \"${!dict[@]}\"\n  do\n    if [[ \"$key\" =~ [A-Z]\
    \ ]]; then\n      echo \"False\"\n      return\n    fi\n  done\n  echo \"True\"\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local dict=\"$1\"\n  local lower_case=\"\
    true\"\n  local upper_case=\"true\"\n  local key\n  local value\n  while IFS=,\
    \ read -r key value; do\n    if [[ \"$key\" =~ [A-Z] ]]; then\n      lower_case=\"\
    false\"\n    fi\n    if [[ \"$key\" =~ [a-z] ]]; then\n      upper_case=\"false\"\
    \n    fi\n  done < <(echo \"$dict\")\n  if [[ \"$lower_case\" == \"true\" ]] ||\
    \ [[ \"$upper_case\" == \"true\" ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local dict=\"$1\"\n    local key\n\
    \    local value\n    local lower_case=0\n    local upper_case=0\n    local mixed_case=0\n\
    \    local empty_dict=0\n    local retval=0\n    local line\n    local i=0\n \
    \   local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n  \
    \  local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n   \
    \ local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local\
    \ y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local D=0\n\
    \    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n \
    \   local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n  \
    \  local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n   \
    \ local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n    local\
    \ Y=0\n    local Z=0\n    local num=0\n    local sym=0\n    local space=0\n  \
    \  local other=0\n    local total=0\n    local lower_total=0\n    local upper_total=0\n\
    \    local mixed_total=0\n    local empty_total=0\n    local retval_total=0\n\
    \    local line_total=0\n    local i_total=0\n    local j_total=0\n    local k_total=0\n\
    \    local l_total=0\n    local m_total=0\n    local n_total=0\n    local o_total=0\n\
    \    local p_total=0\n    local q_total=0\n    local r_total=0\n    local s_total=0\n\
    \    local t_total=0\n    local u_total=0\n    local v_total\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local -i i=0\n  local -i j=0\n  local\
    \ -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local\
    \ -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local\
    \ -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local\
    \ -i z=0\n  local -i A=0\n  local -i B=0\n  local -i C=0\n  local -i D=0\n  local\
    \ -i E=0\n  local -i F=0\n  local -i G=0\n  local -i H=0\n  local -i I=0\n  local\
    \ -i J=0\n  local -i K=0\n  local -i L=0\n  local -i M=0\n  local -i N=0\n  local\
    \ -i O=0\n  local -i P=0\n  local -i Q=0\n  local -i R=0\n  local -i S=0\n  local\
    \ -i T=0\n  local -i U=0\n  local -i V=0\n  local -i W=0\n  local -i X=0\n  local\
    \ -i Y=0\n  local -i Z=0\n  local -i lower=0\n  local -i upper=0\n  local -i other=0\n\
    \  local -i total=0\n  local -i key=0\n  local -i value=0\n  local -i key_len=0\n\
    \  local -i value_len=0\n  local -i key_len_max=0\n  local -i value_len_max=0\n\
    \  local -i key_len_min=0\n  local -i value_len_min=0\n  local -i key_len_avg=0\n\
    \  local -i value_len_avg=0\n  local -i key_len_sum=0\n  local -i value\n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local dict=\"$1\"\n  local key\n\
    \  local value\n  local lower_case=0\n  local upper_case=0\n  local mixed_case=0\n\
    \  local empty_dict=0\n  local key_count=0\n  local value_count=0\n  local dict_size=0\n\
    \  local dict_size_check=0\n  local dict_size_check_2=0\n  local dict_size_check_3=0\n\
    \  local dict_size_check_4=0\n  local dict_size_check_5=0\n  local dict_size_check_6=0\n\
    \  local dict_size_check_7=0\n  local dict_size_check_8=0\n  local dict_size_check_9=0\n\
    \  local dict_size_check_10=0\n  local dict_size_check_11=0\n  local dict_size_check_12=0\n\
    \  local dict_size_check_13=0\n  local dict_size_check_14=0\n  local dict_size_check_15=0\n\
    \  local dict_size_check_16=0\n  local dict_size_check_17=0\n  local dict_size_check_18=0\n\
    \  local dict_size_check_19=0\n  local dict_size_check_20=0\n  local dict_size_check_21=0\n\
    \  local dict_size_check_22=0\n  local dict_size_check_23=0\n  local dict_size_check_24=0\n\
    \  local dict_size_check_25=0\n  local dict_size_check_26=0\n  local dict_size_check_27=0\n\
    \  local dict_size_check_28=0\n  local dict_size_check_29=0\n  local dict_size_check_30=0\n\
    \  local dict_size_check_31=0\n  local dict_size_check_32=0\n  local dict_size_check_33=0\n\
    \  local dict_size_check_34=0\n  local dict_size_check_35=0\n  local dict_size_check_36=0\n\
    \  local dict_size_check_37\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Get the first key\n    first_key=$(echo\
    \ $1 | cut -d, -f1)\n    # Get the first value\n    first_value=$(echo $1 | cut\
    \ -d, -f2)\n    # Get the first key's case\n    first_key_case=$(echo $first_key\
    \ | tr '[:upper:]' '[:lower:]')\n    # If the first key's case is the same as\
    \ the first key, then it's lower case\n    if [ \"$first_key\" == \"$first_key_case\"\
    \ ]; then\n        # Set the case to lower\n        case=\"lower\"\n    else\n\
    \        # Set the case to upper\n        case=\"upper\"\n    fi\n    # Loop through\
    \ the rest of the CSV\n    for i in $(echo $1 | cut -d, -f3-); do\n        # Get\
    \ the key\n        key=$(echo $i | cut -d, -f1)\n        # Get the value\n   \
    \     value=$(echo $i | cut -d, -f2)\n        # Get the key's case\n        key_case=$(echo\
    \ $key | tr '[:upper:]' '[:lower:]')\n        # If the key's case is the same\
    \ as the key, then it's lower case\n        if [ \"$key\" == \"$key_case\" ];\
    \ then\n            # If the case is upper, then return false\n            if\
    \ [ \"$case\" == \"upper\" ]; then\n                echo \"False\"\n         \
    \       return\n            fi\n        else\n            # If the case is lower,\
    \ then return false\n            if [ \"$case\" == \"lower\" ]; then\n       \
    \         echo \"False\"\n                return\n            fi\n        fi\n\
    \    done\n    # If we get here, then all keys are the same case\n    echo \"\
    True\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <two column CSV in key,value order>\"\n        exit 1\n   \
    \ fi\n    if [ ! -f $1 ]; then\n        echo \"File $1 does not exist\"\n    \
    \    exit 1\n    fi\n    #\n    # Read the CSV file into an array\n    #\n   \
    \ declare -A dict\n    while IFS=, read -r key value\n    do\n        dict[$key]=$value\n\
    \    done < $1\n    #\n    # Check for empty dictionary\n    #\n    if [ ${#dict[@]}\
    \ -eq 0 ]; then\n        echo \"False\"\n        exit 0\n    fi\n    #\n    #\
    \ Check for all lower case keys\n    #\n    for key in \"${!dict[@]}\"\n    do\n\
    \        if [[ ! $key =~ ^[a-z]+$ ]]; then\n            echo \"False\"\n     \
    \       exit 0\n        fi\n    done\n    echo \"True\"\n    exit 0\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local dict=\"$1\"\n    local key\n\
    \    local value\n    local upper=0\n    local lower=0\n    local mixed=0\n  \
    \  local empty=0\n    local i=0\n    while IFS=, read key value; do\n        if\
    \ [[ -z \"$key\" ]]; then\n            empty=1\n            continue\n       \
    \ fi\n        if [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n            upper=1\n     \
    \   elif [[ \"$key\" =~ ^[a-z]+$ ]]; then\n            lower=1\n        else\n\
    \            mixed=1\n        fi\n        i=$((i+1))\n    done < <(echo \"$dict\"\
    )\n    if [[ $i -eq 0 ]]; then\n        echo \"False\"\n    elif [[ $upper -eq\
    \ 1 && $lower -eq 1 ]]; then\n        echo \"False\"\n    elif [[ $mixed -eq 1\
    \ ]]; then\n        echo \"False\"\n    else\n        echo \"True\"\n    fi\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # read the first key and value\
    \ pair\n    IFS=',' read -r key value <<< \"$1\"\n    # check if key is all upper\
    \ or lower case\n    if [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n        # key is all\
    \ upper case\n        # check if all keys are upper case\n        while IFS=','\
    \ read -r key value; do\n            if [[ ! \"$key\" =~ ^[A-Z]+$ ]]; then\n \
    \               echo \"False\"\n                return\n            fi\n     \
    \   done <<< \"$1\"\n        echo \"True\"\n        return\n    elif [[ \"$key\"\
    \ =~ ^[a-z]+$ ]]; then\n        # key is all lower case\n        # check if all\
    \ keys are lower case\n        while IFS=',' read -r key value; do\n         \
    \   if [[ ! \"$key\" =~ ^[a-z]+$ ]]; then\n                echo \"False\"\n  \
    \              return\n            fi\n        done <<< \"$1\"\n        echo \"\
    True\"\n        return\n    else\n        echo \"False\"\n        return\n   \
    \ fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # Get the first key\n    first_key=$(head\
    \ -n 1 $1 | cut -d, -f1)\n    # Get the first value\n    first_value=$(head -n\
    \ 1 $1 | cut -d, -f2)\n    # Get the first key's case\n    first_key_case=$(echo\
    \ $first_key | tr '[:upper:]' '[:lower:]')\n    # Get the first value's case\n\
    \    first_value_case=$(echo $first_value | tr '[:upper:]' '[:lower:]')\n    #\
    \ If the first key and value are the same case, then we have a match\n    if [\
    \ \"$first_key\" == \"$first_key_case\" ] && [ \"$first_value\" == \"$first_value_case\"\
    \ ]; then\n        echo \"True\"\n        return\n    fi\n    # If the first key\
    \ and value are not the same case, then we have a mismatch\n    if [ \"$first_key\"\
    \ != \"$first_key_case\" ] && [ \"$first_value\" != \"$first_value_case\" ]; then\n\
    \        echo \"False\"\n        return\n    fi\n    # If the first key and value\
    \ are not the same case, then we have a mismatch\n    if [ \"$first_key\" != \"\
    $first_key_case\" ] || [ \"$first_value\" != \"$first_value_case\" ]; then\n \
    \       echo \"False\"\n        return\n    fi\n    # If we get here, then we\
    \ have a mixed case dictionary\n    echo \"False\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'head: cannot open ''p,pineapple\nb,banana'' for reading: No such file or
    directory

    head: cannot open ''p,pineapple\nb,banana'' for reading: No such file or directory

    '
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  # Check for empty dictionary\n  if\
    \ [ $# -eq 0 ]; then\n    echo \"False\"\n    return\n  fi\n  # Check for lower\
    \ case keys\n  if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]'\
    \ | tr -d '[:digit:]' | wc -l)\" -eq \"$(echo \"$1\" | wc -l)\" ]; then\n    echo\
    \ \"True\"\n    return\n  fi\n  # Check for upper case keys\n  if [ \"$(echo \"\
    $1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]' | tr -d '[:digit:]' | wc -l)\"\
    \ -eq \"$(echo \"$1\" | wc -l)\" ]; then\n    echo \"True\"\n    return\n  fi\n\
    \  # If we get here, it's not a valid dictionary\n  echo \"False\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local dict=\"$1\"\n  local key\n\
    \  local value\n  local lower_keys=0\n  local upper_keys=0\n  local mixed_keys=0\n\
    \  local empty_keys=0\n  local lower_values=0\n  local upper_values=0\n  local\
    \ mixed_values=0\n  local empty_values=0\n  local lower_keys_and_values=0\n  local\
    \ upper_keys_and_values=0\n  local mixed_keys_and_values=0\n  local empty_keys_and_values=0\n\
    \  local lower_keys_or_values=0\n  local upper_keys_or_values=0\n  local mixed_keys_or_values=0\n\
    \  local empty_keys_or_values=0\n  local lower_keys_xor_values=0\n  local upper_keys_xor_values=0\n\
    \  local mixed_keys_xor_values=0\n  local empty_keys_xor_values=0\n  local lower_keys_and_not_values=0\n\
    \  local upper_keys_and_not_values=0\n  local mixed_keys_and_not_values=0\n  local\
    \ empty_keys_and_not_values=0\n  local lower_keys_or_not_values=0\n  local upper_keys_or_not_values=0\n\
    \  local mixed_keys_or_not_values=0\n  local empty_keys_or_not_values=0\n  local\
    \ lower_keys_xor_not_values=0\n  local upper_keys_xor_not_values=0\n  local mixed_keys_xor_not_values=0\n\
    \  local empty_keys_xor_not_values=0\n  local lower_not_keys_and_values=0\n  local\
    \ upper_not_keys_and_values=0\n  local mixed_not_keys_and_values=0\n  local empty_not_keys_and_values=0\n\
    \  local lower_not_keys_or_values=0\n  local upper_not_keys_or_values=0\n  local\
    \ mixed_not_keys_or_values=0\n  local empty_not_keys_or_values=0\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Check for upper case keys\n  if grep -q '[A-Z]'\
    \ <<< \"$1\"; then\n    # Check for lower case keys\n    if grep -q '[a-z]' <<<\
    \ \"$1\"; then\n      echo \"False\"\n      return\n    fi\n  fi\n  echo \"True\"\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    local key\n    local value\n  \
    \  local lower_case_count=0\n    local upper_case_count=0\n    while IFS=, read\
    \ -r key value; do\n        if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n            lower_case_count=$((lower_case_count\
    \ + 1))\n        elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n            upper_case_count=$((upper_case_count\
    \ + 1))\n        else\n            echo \"False\"\n            return\n      \
    \  fi\n    done < <(echo \"$1\")\n    if [ $lower_case_count -gt 0 ] && [ $upper_case_count\
    \ -gt 0 ]; then\n        echo \"False\"\n    else\n        echo \"True\"\n   \
    \ fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check if the dictionary is empty\n\
    \    if [ -z \"$1\" ]; then\n        echo \"False\"\n        return\n    fi\n\n\
    \    # Check if all keys are strings in lower case\n    if [ \"$(echo \"$1\" |\
    \ awk -F, '{print tolower($1)}' | sort | uniq -c | awk '{print $1}')\" == \"$(echo\
    \ \"$1\" | awk -F, '{print $1}' | wc -l)\" ]; then\n        echo \"True\"\n  \
    \      return\n    fi\n\n    # Check if all keys are strings in upper case\n \
    \   if [ \"$(echo \"$1\" | awk -F, '{print toupper($1)}' | sort | uniq -c | awk\
    \ '{print $1}')\" == \"$(echo \"$1\" | awk -F, '{print $1}' | wc -l)\" ]; then\n\
    \        echo \"True\"\n        return\n    fi\n\n    # If we got here, then the\
    \ dictionary is not empty and the keys are not all strings in lower or upper case\n\
    \    echo \"False\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Read the CSV into an array\n  IFS=',' read\
    \ -r -a array <<< \"$1\"\n  # The first key is the reference\n  ref=\"${array[0]}\"\
    \n  # The first value is the reference\n  ref=\"${array[1]}\"\n  # The second\
    \ key is the reference\n  ref=\"${array[2]}\"\n  # The second value is the reference\n\
    \  ref=\"${array[3]}\"\n  # The third key is the reference\n  ref=\"${array[4]}\"\
    \n  # The third value is the reference\n  ref=\"${array[5]}\"\n  # The fourth\
    \ key is the reference\n  ref=\"${array[6]}\"\n  # The fourth value is the reference\n\
    \  ref=\"${array[7]}\"\n  # The fifth key is the reference\n  ref=\"${array[8]}\"\
    \n  # The fifth value is the reference\n  ref=\"${array[9]}\"\n  # The sixth key\
    \ is the reference\n  ref=\"${array[10]}\"\n  # The sixth value is the reference\n\
    \  ref=\"${array[11]}\"\n  # The seventh key is the reference\n  ref=\"${array[12]}\"\
    \n  # The seventh value is the reference\n  ref=\"${array[13]}\"\n  # The eighth\
    \ key is the reference\n  ref=\"${array[14]}\"\n  # The eighth value is the reference\n\
    \  ref=\"${array[15]}\"\n  # The ninth key is the reference\n  ref=\"${array[16]}\"\
    \n  # The ninth value is the reference\n  ref=\"${array[17]}\"\n  # The tenth\
    \ key is the reference\n  ref=\"${array[18]}\"\n  # The tenth value is the reference\n\
    \  ref=\"${array[19]}\"\n  # The eleventh key is the reference\n  ref=\"${array[20]}\"\
    \n  # The eleventh value is the reference\n  ref=\"${array[21]}\"\n  # The twelfth\
    \ key is the reference\n  ref=\"${array[22]}\"\n  # The twelfth value is the reference\n\
    \  ref=\"${array[23]}\"\n  #\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <dictionary>\"\n        exit 1\n    fi\n    if [ ! -f $1 ];\
    \ then\n        echo \"File $1 does not exist\"\n        exit 1\n    fi\n    if\
    \ [ ! -s $1 ]; then\n        echo \"File $1 is empty\"\n        exit 1\n    fi\n\
    \    # Get the first key\n    key=$(head -1 $1 | cut -d, -f1)\n    # Get the first\
    \ value\n    value=$(head -1 $1 | cut -d, -f2)\n    # Check if the first key is\
    \ all lower case\n    if [[ $key =~ ^[a-z]+$ ]]; then\n        # The first key\
    \ is all lower case\n        # Check if all keys are lower case\n        if [[\
    \ $(cut -d, -f1 $1) =~ ^[a-z]+$ ]]; then\n            # All keys are lower case\n\
    \            echo \"True\"\n        else\n            # Not all keys are lower\
    \ case\n            echo \"False\"\n        fi\n    else\n        # The first\
    \ key is not all lower case\n        # Check if the first key is all upper case\n\
    \        if [[ $key =~ ^[A-Z]+$ ]]; then\n            # The first key is all upper\
    \ case\n            # Check if all keys are upper case\n            if [[ $(cut\
    \ -d, -f1 $1) =~ ^[A-Z]+$ ]]; then\n                # All keys are upper case\n\
    \                echo \"True\"\n            else\n                # Not all keys\
    \ are upper case\n                echo \"False\"\n            fi\n        else\n\
    \            # The first key is not all upper case\n            echo \"False\"\
    \n        fi\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check for empty dictionary\n\
    \    if [ -z \"$1\" ]; then\n        echo \"False\"\n        return\n    fi\n\
    \    # Check for all lower case keys\n    if [ $(echo \"$1\" | awk -F, '{print\
    \ $1}' | tr '[:upper:]' '[:lower:]' | sort -u | wc -l) -eq 1 ]; then\n       \
    \ echo \"True\"\n        return\n    fi\n    # Check for all upper case keys\n\
    \    if [ $(echo \"$1\" | awk -F, '{print $1}' | tr '[:lower:]' '[:upper:]' |\
    \ sort -u | wc -l) -eq 1 ]; then\n        echo \"True\"\n        return\n    fi\n\
    \    # If we get here, then it's not all upper or all lower case\n    echo \"\
    False\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <csv_file>\"\n        exit 1\n    fi\n    if [ ! -f $1 ]; then\n\
    \        echo \"File $1 does not exist\"\n        exit 1\n    fi\n    #\n    #\
    \ Read the CSV file into an array\n    #\n    declare -A dict\n    while IFS=,\
    \ read -r key value\n    do\n        dict[$key]=$value\n    done < $1\n    #\n\
    \    # Check the dictionary\n    #\n    for key in \"${!dict[@]}\"\n    do\n \
    \       if [[ $key =~ [A-Z] ]]; then\n            if [[ $key =~ [a-z] ]]; then\n\
    \                echo \"False\"\n                exit 0\n            fi\n    \
    \    fi\n        if [[ $key =~ [a-z] ]]; then\n            if [[ $key =~ [A-Z]\
    \ ]]; then\n                echo \"False\"\n                exit 0\n         \
    \   fi\n        fi\n    done\n    echo \"True\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local dict=\"$1\"\n    local key\n\
    \    local value\n    local lower=0\n    local upper=0\n    local other=0\n  \
    \  local total=0\n    while IFS=, read key value; do\n        if [[ \"$key\" =~\
    \ ^[a-z]+$ ]]; then\n            (( lower++ ))\n        elif [[ \"$key\" =~ ^[A-Z]+$\
    \ ]]; then\n            (( upper++ ))\n        else\n            (( other++ ))\n\
    \        fi\n        (( total++ ))\n    done < <(echo \"$dict\")\n    if [[ $total\
    \ -eq 0 ]]; then\n        echo \"False\"\n    elif [[ $lower -eq $total ]]; then\n\
    \        echo \"True\"\n    elif [[ $upper -eq $total ]]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local dict=\"$1\"\n  local key\n\
    \  local value\n  local lower_case=0\n  local upper_case=0\n  local mixed_case=0\n\
    \  local empty_dict=0\n  local total_keys=0\n  local total_values=0\n  local total_pairs=0\n\
    \  local total_lines=0\n  local total_words=0\n  local total_chars=0\n  local\
    \ total_bytes=0\n  local total_fields=0\n  local total_empty_lines=0\n  local\
    \ total_non_empty_lines=0\n  local total_empty_fields=0\n  local total_non_empty_fields=0\n\
    \  local total_empty_words=0\n  local total_non_empty_words=0\n  local total_empty_keys=0\n\
    \  local total_non_empty_keys=0\n  local total_empty_values=0\n  local total_non_empty_values=0\n\
    \  local total_empty_pairs=0\n  local total_non_empty_pairs=0\n  local total_empty_dict=0\n\
    \  local total_non_empty_dict=0\n  local total_lower_case=0\n  local total_upper_case=0\n\
    \  local total_mixed_case=0\n  local total_lower_case_keys=0\n  local total_upper_case_keys=0\n\
    \  local total_mixed_case_keys=0\n  local total_lower_case_values=0\n  local total_upper_case_values=0\n\
    \  local total_mixed_case_values=0\n  local total_lower_case_pairs=0\n  local\
    \ total_upper_case_pairs=0\n  local total_mixed_case_pairs=0\n  local total_lower_case_dict=0\n\
    \  local total_upper_case_dict=0\n  local total_mixed_case_dict=0\n  local total_lower_case_lines=0\n\
    \  local total_upper_case_lines=0\n  local total_mixed_case_lines=0\n  local total_lower_case_words=0\n\
    \  local total_upper_case_words=\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local dict=\"$1\"\n  local key\n\
    \  local value\n  local lower_case=0\n  local upper_case=0\n  local mixed_case=0\n\
    \  local empty_dict=0\n  local line\n  local IFS=','\n  while read line; do\n\
    \    key=$(echo $line | cut -d',' -f1)\n    value=$(echo $line | cut -d',' -f2)\n\
    \    if [[ $key =~ ^[a-z]+$ ]]; then\n      lower_case=1\n    elif [[ $key =~\
    \ ^[A-Z]+$ ]]; then\n      upper_case=1\n    else\n      mixed_case=1\n    fi\n\
    \  done < <(echo \"$dict\")\n  if [[ $lower_case -eq 1 && $upper_case -eq 0 &&\
    \ $mixed_case -eq 0 ]]; then\n    echo \"True\"\n  elif [[ $lower_case -eq 0 &&\
    \ $upper_case -eq 1 && $mixed_case -eq 0 ]]; then\n    echo \"True\"\n  else\n\
    \    echo \"False\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local dict=\"$1\"\n    local key\n\
    \    local value\n    local lower_case_keys=0\n    local upper_case_keys=0\n \
    \   local mixed_case_keys=0\n    local empty_dict=0\n    local dict_size=0\n \
    \   local dict_size_check=0\n    local dict_size_check_2=0\n    local dict_size_check_3=0\n\
    \    local dict_size_check_4=0\n    local dict_size_check_5=0\n    local dict_size_check_6=0\n\
    \    local dict_size_check_7=0\n    local dict_size_check_8=0\n    local dict_size_check_9=0\n\
    \    local dict_size_check_10=0\n    local dict_size_check_11=0\n    local dict_size_check_12=0\n\
    \    local dict_size_check_13=0\n    local dict_size_check_14=0\n    local dict_size_check_15=0\n\
    \    local dict_size_check_16=0\n    local dict_size_check_17=0\n    local dict_size_check_18=0\n\
    \    local dict_size_check_19=0\n    local dict_size_check_20=0\n    local dict_size_check_21=0\n\
    \    local dict_size_check_22=0\n    local dict_size_check_23=0\n    local dict_size_check_24=0\n\
    \    local dict_size_check_25=0\n    local dict_size_check_26=0\n    local dict_size_check_27=0\n\
    \    local dict_size_check_28=0\n    local dict_size_check_29=0\n    local dict_size_check_30=0\n\
    \    local dict_size_check_31=0\n    local dict_size_check_32=0\n    local dict_size_check_33=0\n\
    \    local dict_size_check_34=0\n    local dict_size_check_35=0\n    local dict_size_check_36=0\n\
    \    local dict_size_check_37=0\n    local dict_size_check\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <csv_file>\"\n        exit 1\n    fi\n    if [ ! -f $1 ]; then\n\
    \        echo \"File $1 does not exist\"\n        exit 1\n    fi\n    # Get the\
    \ first key\n    first_key=$(head -1 $1 | cut -d, -f1)\n    # Get the first key's\
    \ case\n    first_key_case=$(echo $first_key | tr '[:upper:]' '[:lower:]')\n \
    \   # If the first key is all lower case, then all keys should be lower case\n\
    \    if [ \"$first_key\" == \"$first_key_case\" ]; then\n        # Check all keys\
    \ are lower case\n        while read line; do\n            key=$(echo $line |\
    \ cut -d, -f1)\n            key_case=$(echo $key | tr '[:upper:]' '[:lower:]')\n\
    \            if [ \"$key\" != \"$key_case\" ]; then\n                echo \"False\"\
    \n                exit 0\n            fi\n        done < $1\n    else\n      \
    \  # Check all keys are upper case\n        while read line; do\n            key=$(echo\
    \ $line | cut -d, -f1)\n            key_case=$(echo $key | tr '[:lower:]' '[:upper:]')\n\
    \            if [ \"$key\" != \"$key_case\" ]; then\n                echo \"False\"\
    \n                exit 0\n            fi\n        done < $1\n    fi\n    echo\
    \ \"True\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local csv=\"$1\"\n    local key\n\
    \    local value\n    local upper=0\n    local lower=0\n    local mixed=0\n  \
    \  local empty=0\n    local retval=0\n    local csv_file\n    local csv_file_tmp\n\
    \    local csv_file_tmp2\n    local csv_file_tmp3\n    local csv_file_tmp4\n \
    \   local csv_file_tmp5\n    local csv_file_tmp6\n    local csv_file_tmp7\n  \
    \  local csv_file_tmp8\n    local csv_file_tmp9\n    local csv_file_tmp10\n  \
    \  local csv_file_tmp11\n    local csv_file_tmp12\n    local csv_file_tmp13\n\
    \    local csv_file_tmp14\n    local csv_file_tmp15\n    local csv_file_tmp16\n\
    \    local csv_file_tmp17\n    local csv_file_tmp18\n    local csv_file_tmp19\n\
    \    local csv_file_tmp20\n    local csv_file_tmp21\n    local csv_file_tmp22\n\
    \    local csv_file_tmp23\n    local csv_file_tmp24\n    local csv_file_tmp25\n\
    \    local csv_file_tmp26\n    local csv_file_tmp27\n    local csv_file_tmp28\n\
    \    local csv_file_tmp29\n    local csv_file_tmp30\n    local csv_file_tmp31\n\
    \    local csv_file_tmp32\n    local csv_file_tmp33\n    local csv_file_tmp34\n\
    \    local csv_file_tmp35\n    local csv_file_tmp36\n    local csv_file_tmp37\n\
    \    local csv_file_tmp38\n    local csv_file_tmp39\n    local csv_file_tmp40\n\
    \    local csv_file_tmp41\n    local csv_file_tmp42\n    local csv_file_tmp43\n\
    \    local csv_file_tmp44\n    local csv_file_tmp45\n    local csv_file_\n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <csv_file>\"\n        exit 1\n    fi\n    if [ ! -f $1 ]; then\n\
    \        echo \"File $1 does not exist\"\n        exit 1\n    fi\n    #\n    #\
    \ Create a dictionary from the CSV file\n    #\n    declare -A dict\n    while\
    \ IFS=, read -r key value\n    do\n        dict[$key]=$value\n    done < $1\n\
    \    #\n    # Check the dictionary\n    #\n    for key in \"${!dict[@]}\"\n  \
    \  do\n        if [[ $key =~ [A-Z] ]]; then\n            if [[ $key =~ [a-z] ]];\
    \ then\n                echo \"False\"\n                exit 0\n            fi\n\
    \        else\n            if [[ $key =~ [A-Z] ]]; then\n                echo\
    \ \"False\"\n                exit 0\n            fi\n        fi\n    done\n  \
    \  echo \"True\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # Check if all keys are lower case\n\
    \    if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | sort |\
    \ uniq -c | wc -l)\" -eq 1 ]; then\n        echo \"True\"\n        return\n  \
    \  fi\n    # Check if all keys are upper case\n    if [ \"$(echo \"$1\" | cut\
    \ -d, -f1 | tr '[:lower:]' '[:upper:]' | sort | uniq -c | wc -l)\" -eq 1 ]; then\n\
    \        echo \"True\"\n        return\n    fi\n    echo \"False\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local -i i=0\n    local -i j=0\n\
    \    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local\
    \ -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n\
    \    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local\
    \ -i x=0\n    local -i y=0\n    local -i z=0\n    local -i A=0\n    local -i B=0\n\
    \    local -i C=0\n    local -i D=0\n    local -i E=0\n    local -i F=0\n    local\
    \ -i G=0\n    local -i H=0\n    local -i I=0\n    local -i J=0\n    local -i K=0\n\
    \    local -i L=0\n    local -i M=0\n    local -i N=0\n    local -i O=0\n    local\
    \ -i P=0\n    local -i Q=0\n    local -i R=0\n    local -i S=0\n    local -i T=0\n\
    \    local -i U=0\n    local -i V=0\n    local -i W=0\n    local -i X=0\n    local\
    \ -i Y=0\n    local -i Z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n\
    \    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local\
    \ -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i\
    \ ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i\
    \ pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n   \n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local dict=\"$1\"\n  local key=\"\
    \"\n  local value=\"\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local empty_dict=0\n  local key_count=0\n  local\
    \ value_count=0\n  local key_value_count=0\n  local key_value_count_check=0\n\
    \  local key_value_count_check_result=0\n  local key_value_count_check_result_string=\"\
    \"\n  local key_value_count_check_result_string_lower_case=\"\"\n  local key_value_count_check_result_string_upper_case=\"\
    \"\n  local key_value_count_check_result_string_mixed_case=\"\"\n  local key_value_count_check_result_string_empty_dict=\"\
    \"\n  local key_value_count_check_result_string_lower_case_upper_case=\"\"\n \
    \ local key_value_count_check_result_string_lower_case_mixed_case=\"\"\n  local\
    \ key_value_count_check_result_string_upper_case_mixed_case=\"\"\n  local key_value_count_check_result_string_lower_case_upper_case_mixed_case=\"\
    \"\n  local key_value_count_check_result_string_lower_case_upper_case_mixed_case_empty_dict=\"\
    \"\n  local key_value_count_check_result_string_lower_case_upper_case_mixed_case_empty_dict_key_count=\"\
    \"\n  local key_value_count_check_result_string_lower_case_upper_case_mixed_case_empty_dict_value_count=\"\
    \"\n  local key_value_count_check_result_string_lower_case_upper_case_mixed_case_empty_dict_key_value_count=\"\
    \"\n  local key_value_count_check_result_string_lower_case_upper_case_mixed_case_empty_dict_key_value_count_check=\"\
    \"\n  local key_value_count_check_result_string_lower_case_upper_case_mixed_case_empty_dict\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local dict=$1\n    local upper=0\n\
    \    local lower=0\n    local mixed=0\n    local key\n    local value\n    while\
    \ IFS=, read key value; do\n        if [[ $key =~ ^[A-Z]+$ ]]; then\n        \
    \    upper=$((upper+1))\n        elif [[ $key =~ ^[a-z]+$ ]]; then\n         \
    \   lower=$((lower+1))\n        else\n            mixed=$((mixed+1))\n       \
    \ fi\n    done < <(echo \"$dict\")\n    if [[ $upper -eq 0 && $lower -eq 0 ]];\
    \ then\n        echo \"False\"\n    elif [[ $upper -gt 0 && $lower -gt 0 ]]; then\n\
    \        echo \"False\"\n    else\n        echo \"True\"\n    fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local IFS=,\n    local key\n  \
    \  local value\n    local lower=0\n    local upper=0\n    local mixed=0\n    local\
    \ empty=0\n    local nonalpha=0\n    local nonalnum=0\n    local nonalpha_key\n\
    \    local nonalnum_key\n    local nonalpha_value\n    local nonalnum_value\n\
    \    local empty_key\n    local empty_value\n    local mixed_key\n    local mixed_value\n\
    \    local mixed_key_lower\n    local mixed_key_upper\n    local mixed_value_lower\n\
    \    local mixed_value_upper\n    local mixed_key_lower_value_upper=0\n    local\
    \ mixed_key_upper_value_lower=0\n    local mixed_key_lower_value_lower=0\n   \
    \ local mixed_key_upper_value_upper=0\n    local mixed_key_lower_value_nonalpha=0\n\
    \    local mixed_key_upper_value_nonalpha=0\n    local mixed_key_lower_value_nonalnum=0\n\
    \    local mixed_key_upper_value_nonalnum=0\n    local mixed_key_nonalpha_value_lower=0\n\
    \    local mixed_key_nonalpha_value_upper=0\n    local mixed_key_nonalpha_value_nonalpha=0\n\
    \    local mixed_key_nonalpha_value_nonalnum=0\n    local mixed_key_nonalnum_value_lower=0\n\
    \    local mixed_key_nonalnum_value_upper=0\n    local mixed_key_nonalnum_value_nonalpha=0\n\
    \    local mixed_key_nonalnum_value_nonalnum=0\n    local mixed_key_empty_value_lower=0\n\
    \    local mixed_key_empty_value_upper=0\n    local mixed_key_empty_value_nonalpha=0\n\
    \    local mixed_key_empty_value_nonalnum=0\n    local mixed_key_empty_value_empty=0\n\
    \    local mixed_key_lower_value_empty=0\n    local mixed_key_upper_value_empty=0\n\
    \    local mixed_key_nonalpha_value_empty=0\n    local mixed_key_non\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local dict=\"$1\"\n    local key_regex=\"\
    ^[a-z]+$\"\n    local key_regex_upper=\"^[A-Z]+$\"\n    local key_regex_lower=\"\
    ^[a-z]+$\"\n    local key_regex_mixed=\"^[a-zA-Z]+$\"\n    local key_regex_numeric=\"\
    ^[0-9]+$\"\n    local key_regex_alpha_numeric=\"^[a-zA-Z0-9]+$\"\n    local key_regex_alpha_numeric_underscore=\"\
    ^[a-zA-Z0-9_]+$\"\n    local key_regex_alpha_numeric_underscore_dash=\"^[a-zA-Z0-9_-]+$\"\
    \n    local key_regex_alpha_numeric_underscore_dash_dot=\"^[a-zA-Z0-9_.-]+$\"\n\
    \    local key_regex_alpha_numeric_underscore_dash_dot_slash=\"^[a-zA-Z0-9_.-/]+$\"\
    \n    local key_regex_alpha_numeric_underscore_dash_dot_slash_colon=\"^[a-zA-Z0-9_.-/:]+$\"\
    \n    local key_regex_alpha_numeric_underscore_dash_dot_slash_colon_at=\"^[a-zA-Z0-9_.-/:@]+$\"\
    \n    local key_regex_alpha_numeric_underscore_dash_dot_slash_colon_at_equal=\"\
    ^[a-zA-Z0-9_.-/:@=]+$\"\n    local key_regex_alpha_numeric_underscore_dash_dot_slash_colon_at_equal_ampersand=\"\
    ^[a-zA-Z0-9_.-/:@=&]+$\"\n    local key_regex_alpha_numeric_underscore_dash_dot_slash_colon_at_equal_ampersand_question=\"\
    ^[a-zA-Z0-9_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjcnf2_we.sh: line 44: unexpected EOF while looking for matching
    `"''

    /tmp/tmpjcnf2_we.sh: line 48: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # Check if all keys are lower case\n\
    \    awk -F, '{print tolower($1)}' $1 | sort | uniq -c | grep -q \"^ *2 \"\n \
    \   if [ $? -eq 0 ]; then\n        echo \"True\"\n        return\n    fi\n   \
    \ # Check if all keys are upper case\n    awk -F, '{print toupper($1)}' $1 | sort\
    \ | uniq -c | grep -q \"^ *2 \"\n    if [ $? -eq 0 ]; then\n        echo \"True\"\
    \n        return\n    fi\n    echo \"False\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: fatal: cannot open file `p,pineapple\nb,banana'' for reading (No such
    file or directory)

    awk: fatal: cannot open file `p,pineapple\nb,banana'' for reading (No such file
    or directory)

    '
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  # Check for empty dictionary\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"False\"\n    return\n  fi\n  # Check for all\
    \ lower case keys\n  if [ \"$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\" == \"\
    $1\" ]; then\n    echo \"True\"\n    return\n  fi\n  # Check for all upper case\
    \ keys\n  if [ \"$(echo \"$1\" | tr '[:lower:]' '[:upper:]')\" == \"$1\" ]; then\n\
    \    echo \"True\"\n    return\n  fi\n  # If we get here, the dictionary is mixed\
    \ case\n  echo \"False\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check for empty dictionary\n\
    \    if [ -z \"$1\" ]; then\n        echo \"False\"\n        return\n    fi\n\
    \    # Check for all lower case\n    if [ \"$(echo \"$1\" | awk -F, '{print tolower($1)}'\
    \ | sort | uniq -c | awk '{print $1}')\" == \"$(echo \"$1\" | wc -l)\" ]; then\n\
    \        echo \"True\"\n        return\n    fi\n    # Check for all upper case\n\
    \    if [ \"$(echo \"$1\" | awk -F, '{print toupper($1)}' | sort | uniq -c | awk\
    \ '{print $1}')\" == \"$(echo \"$1\" | wc -l)\" ]; then\n        echo \"True\"\
    \n        return\n    fi\n    # Not all lower case or all upper case\n    echo\
    \ \"False\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <csv file>\"\n        exit 1\n    fi\n    if [ ! -f $1 ]; then\n\
    \        echo \"File $1 does not exist\"\n        exit 1\n    fi\n    # Read the\
    \ CSV file into an array\n    declare -A dict\n    while IFS=, read -r key value;\
    \ do\n        dict[$key]=$value\n    done < $1\n    # Check if the dictionary\
    \ is empty\n    if [ ${#dict[@]} -eq 0 ]; then\n        echo \"False\"\n     \
    \   exit 0\n    fi\n    # Check if all keys are in upper case\n    for key in\
    \ \"${!dict[@]}\"; do\n        if [[ $key =~ [a-z] ]]; then\n            echo\
    \ \"False\"\n            exit 0\n        fi\n    done\n    echo \"True\"\n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local dict=\"$1\"\n  local key\n\
    \  local value\n  local lower_count=0\n  local upper_count=0\n  local key_count=0\n\
    \  local value_count=0\n  local key_value_count=0\n  local key_value_lower_count=0\n\
    \  local key_value_upper_count=0\n  local key_value_mixed_count=0\n  local key_value_mixed_count=0\n\
    \  local key_value_lower_count=0\n  local key_value_upper_count=0\n  local key_value_mixed_count=0\n\
    \  local key_value_mixed_count=0\n  local key_value_lower_count=0\n  local key_value_upper_count=0\n\
    \  local key_value_mixed_count=0\n  local key_value_mixed_count=0\n  local key_value_lower_count=0\n\
    \  local key_value_upper_count=0\n  local key_value_mixed_count=0\n  local key_value_mixed_count=0\n\
    \  local key_value_lower_count=0\n  local key_value_upper_count=0\n  local key_value_mixed_count=0\n\
    \  local key_value_mixed_count=0\n  local key_value_lower_count=0\n  local key_value_upper_count=0\n\
    \  local key_value_mixed_count=0\n  local key_value_mixed_count=0\n  local key_value_lower_count=0\n\
    \  local key_value_upper_count=0\n  local key_value_mixed_count=0\n  local key_value_mixed_count=0\n\
    \  local key_value_lower_count=0\n  local key_value_upper_count=0\n  local key_value_mixed_count=0\n\
    \  local key_value_mixed_count=0\n  local key_value_lower_count=0\n  local key_value_upper_count=0\n\
    \  local key_value_mixed_count=0\n  local key_value_mixed_count=0\n  local key\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local key_count=0\n    local upper_count=0\n\
    \    local lower_count=0\n    local key\n    local value\n    while IFS=, read\
    \ key value; do\n        if [[ $key =~ ^[A-Z]+$ ]]; then\n            ((upper_count++))\n\
    \        elif [[ $key =~ ^[a-z]+$ ]]; then\n            ((lower_count++))\n  \
    \      fi\n        ((key_count++))\n    done < <(echo \"$1\")\n    if [[ $key_count\
    \ -eq 0 ]]; then\n        echo \"False\"\n    elif [[ $upper_count -eq $key_count\
    \ ]]; then\n        echo \"True\"\n    elif [[ $lower_count -eq $key_count ]];\
    \ then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local dict=\"$1\"\n    local key\n\
    \    local value\n    local lower=0\n    local upper=0\n    local mixed=0\n  \
    \  local empty=0\n    local num=0\n    local other=0\n    local total=0\n    local\
    \ result=0\n    local -A dict_array\n    while IFS=, read -r key value\n    do\n\
    \        dict_array[$key]=$value\n        if [[ $key =~ ^[a-z]+$ ]]\n        then\n\
    \            lower=$((lower+1))\n        elif [[ $key =~ ^[A-Z]+$ ]]\n       \
    \ then\n            upper=$((upper+1))\n        elif [[ $key =~ ^[0-9]+$ ]]\n\
    \        then\n            num=$((num+1))\n        else\n            other=$((other+1))\n\
    \        fi\n        total=$((total+1))\n    done < <(echo \"$dict\")\n    if\
    \ [[ $total -eq 0 ]]\n    then\n        empty=1\n    fi\n    if [[ $lower -eq\
    \ $total ]]\n    then\n        result=1\n    elif [[ $upper -eq $total ]]\n  \
    \  then\n        result=1\n    elif [[ $num -eq $total ]]\n    then\n        result=1\n\
    \    elif [[ $other -eq $total ]]\n    then\n        result=1\n    fi\n    if\
    \ [[ $empty -eq 1 ]]\n    then\n        result=0\n    fi\n    echo $result\n}\n\
    \ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"\
    p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\\
    n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\\
    nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\")\
    \ = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local dict=\"$1\"\n  local key_case=\"\
    \"\n  local key_case_regex=\"\"\n  local key=\"\"\n  local value=\"\"\n  local\
    \ key_count=0\n  local key_count_lower=0\n  local key_count_upper=0\n  local key_count_mixed=0\n\
    \  local key_count_other=0\n  local key_count_total=0\n  local key_count_lower_total=0\n\
    \  local key_count_upper_total=0\n  local key_count_mixed_total=0\n  local key_count_other_total=0\n\
    \  local key_count_total_total=0\n  local key_count_lower_percent=0\n  local key_count_upper_percent=0\n\
    \  local key_count_mixed_percent=0\n  local key_count_other_percent=0\n  local\
    \ key_count_total_percent=0\n  local key_count_lower_percent_total=0\n  local\
    \ key_count_upper_percent_total=0\n  local key_count_mixed_percent_total=0\n \
    \ local key_count_other_percent_total=0\n  local key_count_total_percent_total=0\n\
    \  local key_count_lower_percent_avg=0\n  local key_count_upper_percent_avg=0\n\
    \  local key_count_mixed_percent_avg=0\n  local key_count_other_percent_avg=0\n\
    \  local key_count_total_percent_avg=0\n  local key_count_lower_percent_avg_total=0\n\
    \  local key_count_upper_percent_avg_total=0\n  local key_count_mixed_percent_avg_total=0\n\
    \  local key_count_other_percent_avg_total=0\n  local key_count_total_percent_avg_total=0\n\
    \  local key_count_lower_percent_avg_count=0\n  local key_count_upper_percent_avg_count=0\n\
    \  local key_count_mixed_percent_avg_count=0\n  local key_count_other_percent_\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <csv file>\"\n        exit 1\n    fi\n    if [ ! -f $1 ]; then\n\
    \        echo \"File $1 does not exist\"\n        exit 1\n    fi\n    # Read the\
    \ file into an array\n    declare -a dict\n    while IFS=, read -r key value;\
    \ do\n        dict[$key]=$value\n    done < $1\n    # Check the keys for lower\
    \ case\n    for key in \"${!dict[@]}\"; do\n        if [[ $key =~ [A-Z] ]]; then\n\
    \            echo \"False\"\n            exit 0\n        fi\n    done\n    # Check\
    \ the keys for upper case\n    for key in \"${!dict[@]}\"; do\n        if [[ $key\
    \ =~ [a-z] ]]; then\n            echo \"False\"\n            exit 0\n        fi\n\
    \    done\n    echo \"True\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Check if all keys are lower case\n  if [ \"\
    $(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | tr -d '[:digit:]' |\
    \ sed 's/ //g' | sort | uniq -c | wc -l)\" -eq 1 ]; then\n    echo \"True\"\n\
    \    return\n  fi\n  # Check if all keys are upper case\n  if [ \"$(echo \"$1\"\
    \ | cut -d, -f1 | tr '[:lower:]' '[:upper:]' | tr -d '[:digit:]' | sed 's/ //g'\
    \ | sort | uniq -c | wc -l)\" -eq 1 ]; then\n    echo \"True\"\n    return\n \
    \ fi\n  echo \"False\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  # Check for empty dictionary\n  if\
    \ [ $# -eq 0 ]; then\n    echo \"False\"\n    return\n  fi\n  # Check for all\
    \ lower case\n  if [ $(echo \"$@\" | tr -d '\\n' | tr -d ' ' | tr '[:upper:]'\
    \ '[:lower:]' | sed 's/[^a-z]//g' | wc -c) -eq $(echo \"$@\" | tr -d '\\n' | tr\
    \ -d ' ' | sed 's/[^a-z]//g' | wc -c) ]; then\n    echo \"True\"\n    return\n\
    \  fi\n  # Check for all upper case\n  if [ $(echo \"$@\" | tr -d '\\n' | tr -d\
    \ ' ' | tr '[:lower:]' '[:upper:]' | sed 's/[^A-Z]//g' | wc -c) -eq $(echo \"\
    $@\" | tr -d '\\n' | tr -d ' ' | sed 's/[^A-Z]//g' | wc -c) ]; then\n    echo\
    \ \"True\"\n    return\n  fi\n  # If we get here, then it's False\n  echo \"False\"\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local -a keys\n    local -a values\n\
    \    local -a upper\n    local -a lower\n    local -a mixed\n    local -a empty\n\
    \    local -a all_keys\n    local -a all_values\n    local -a all_upper\n    local\
    \ -a all_lower\n    local -a all_mixed\n    local -a all_empty\n    local -a all_upper_keys\n\
    \    local -a all_lower_keys\n    local -a all_mixed_keys\n    local -a all_empty_keys\n\
    \    local -a all_upper_values\n    local -a all_lower_values\n    local -a all_mixed_values\n\
    \    local -a all_empty_values\n    local -a all_upper_keys_values\n    local\
    \ -a all_lower_keys_values\n    local -a all_mixed_keys_values\n    local -a all_empty_keys_values\n\
    \    local -a all_upper_keys_values_empty\n    local -a all_lower_keys_values_empty\n\
    \    local -a all_mixed_keys_values_empty\n    local -a all_empty_keys_values_empty\n\
    \    local -a all_upper_keys_values_mixed\n    local -a all_lower_keys_values_mixed\n\
    \    local -a all_mixed_keys_values_mixed\n    local -a all_empty_keys_values_mixed\n\
    \    local -a all_upper_keys_values_lower\n    local -a all_lower_keys_values_lower\n\
    \    local -a all_mixed_keys_values_lower\n    local -a all_empty_keys_values_lower\n\
    \    local -a all_upper_keys_values_upper\n    local -a all_lower_keys_values_upper\n\
    \    local -a all_mixed_keys_values_upper\n    local -a all_empty_keys_values_upper\n\
    \    local -a all_upper_keys_empty_values\n    local -a all_lower_keys_empty_values\n\
    \    local -a all_mixed_keys_empty_values\n    local -a all_empty_keys_empty_values\n\
    \    local -a all_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local dict=\"$1\"\n  local key\n\
    \  local value\n  local lower_count=0\n  local upper_count=0\n  local mixed_count=0\n\
    \  local key_count=0\n  local lower_keys\n  local upper_keys\n  local mixed_keys\n\
    \  local lower_values\n  local upper_values\n  local mixed_values\n  local lower_key_values\n\
    \  local upper_key_values\n  local mixed_key_values\n  local lower_value_keys\n\
    \  local upper_value_keys\n  local mixed_value_keys\n  local lower_value_key_pairs\n\
    \  local upper_value_key_pairs\n  local mixed_value_key_pairs\n  local lower_key_value_pairs\n\
    \  local upper_key_value_pairs\n  local mixed_key_value_pairs\n  local lower_key_value_pairs_sorted\n\
    \  local upper_key_value_pairs_sorted\n  local mixed_key_value_pairs_sorted\n\
    \  local lower_value_key_pairs_sorted\n  local upper_value_key_pairs_sorted\n\
    \  local mixed_value_key_pairs_sorted\n  local lower_key_values_sorted\n  local\
    \ upper_key_values_sorted\n  local mixed_key_values_sorted\n  local lower_value_keys_sorted\n\
    \  local upper_value_keys_sorted\n  local mixed_value_keys_sorted\n  local lower_keys_sorted\n\
    \  local upper_keys_sorted\n  local mixed_keys_sorted\n  local lower_values_sorted\n\
    \  local upper_values_sorted\n  local mixed_values_sorted\n  local lower_key_values_sorted_joined\n\
    \  local upper_key_values_sorted_joined\n  local mixed_key_values_sorted_joined\n\
    \  local lower_value_keys_sorted_joined\n  local upper_value_keys_sorted_joined\n\
    \  local mixed_value_keys_sorted_joined\n  local lower_keys_sorted_joined\n  local\
    \ upper_keys_sorted_joined\n  local mixed_keys_sorted_\n}\n\ncandidate() {\n \
    \   check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    lower=0\n    upper=0\n    while\
    \ IFS=, read -r key value; do\n        if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n \
    \           lower=$((lower+1))\n        elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n\
    \            upper=$((upper+1))\n        else\n            echo \"False\"\n  \
    \          return\n        fi\n    done < <(echo \"$1\")\n    if [ $lower -gt\
    \ 0 ] && [ $upper -gt 0 ]; then\n        echo \"False\"\n    else\n        echo\
    \ \"True\"\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ $# -ne 1 ]; then\n    echo \"\
    Usage: $0 <csv file>\"\n    exit 1\n  fi\n  if [ ! -f $1 ]; then\n    echo \"\
    File $1 not found\"\n    exit 1\n  fi\n  # Read the CSV file into an array\n \
    \ declare -a dict\n  while IFS=, read -r key value; do\n    dict[$key]=$value\n\
    \  done < $1\n  # Check if the array is empty\n  if [ ${#dict[@]} -eq 0 ]; then\n\
    \    echo \"False\"\n    exit 0\n  fi\n  # Check if all keys are lower case\n\
    \  for key in \"${!dict[@]}\"; do\n    if [[ $key =~ [A-Z] ]]; then\n      echo\
    \ \"False\"\n      exit 0\n    fi\n  done\n  echo \"True\"\n  exit 0\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local dict=\"$1\"\n  local key\n\
    \  local value\n  local lower_case=0\n  local upper_case=0\n  local mixed_case=0\n\
    \  local empty_dict=0\n  local line\n  local result=0\n  local IFS=','\n  while\
    \ read line; do\n    key=$(echo \"$line\" | cut -d',' -f1)\n    value=$(echo \"\
    $line\" | cut -d',' -f2)\n    if [[ -z \"$key\" ]]; then\n      empty_dict=1\n\
    \    elif [[ \"$key\" =~ [a-z] ]]; then\n      lower_case=1\n    elif [[ \"$key\"\
    \ =~ [A-Z] ]]; then\n      upper_case=1\n    else\n      mixed_case=1\n    fi\n\
    \  done < <(echo \"$dict\")\n  if [[ $empty_dict -eq 1 ]]; then\n    result=1\n\
    \  elif [[ $lower_case -eq 1 && $upper_case -eq 1 ]]; then\n    result=1\n  elif\
    \ [[ $mixed_case -eq 1 ]]; then\n    result=1\n  fi\n  echo \"$result\"\n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    local dict=\"$1\"\n    local lower_keys=0\n\
    \    local upper_keys=0\n    local mixed_keys=0\n    while IFS=, read -r key value;\
    \ do\n        if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n            lower_keys=$((lower_keys+1))\n\
    \        elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n            upper_keys=$((upper_keys+1))\n\
    \        else\n            mixed_keys=$((mixed_keys+1))\n        fi\n    done\
    \ < <(echo \"$dict\")\n    if [ $lower_keys -gt 0 ] && [ $upper_keys -gt 0 ];\
    \ then\n        echo \"False\"\n    elif [ $mixed_keys -gt 0 ]; then\n       \
    \ echo \"False\"\n    else\n        echo \"True\"\n    fi\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local -i i=0\n  local -i len=0\n\
    \  local -i upper=0\n  local -i lower=0\n  local -i mixed=0\n  local -i empty=0\n\
    \  local -i len_key=0\n  local -i len_val=0\n  local -i len_key_upper=0\n  local\
    \ -i len_key_lower=0\n  local -i len_val_upper=0\n  local -i len_val_lower=0\n\
    \  local -i len_key_mixed=0\n  local -i len_val_mixed=0\n  local -i len_key_empty=0\n\
    \  local -i len_val_empty=0\n  local -i len_key_num=0\n  local -i len_val_num=0\n\
    \  local -i len_key_alpha=0\n  local -i len_val_alpha=0\n  local -i len_key_alpha_upper=0\n\
    \  local -i len_val_alpha_upper=0\n  local -i len_key_alpha_lower=0\n  local -i\
    \ len_val_alpha_lower=0\n  local -i len_key_alpha_mixed=0\n  local -i len_val_alpha_mixed=0\n\
    \  local -i len_key_alpha_empty=0\n  local -i len_val_alpha_empty=0\n  local -i\
    \ len_key_alpha_num=0\n  local -i len_val_alpha_num=0\n  local -i len_key_alpha_num_upper=0\n\
    \  local -i len_val_alpha_num_upper=0\n  local -i len_key_alpha_num_lower=0\n\
    \  local -i len_val_alpha_num_lower=0\n  local -i len_key_alpha_num_mixed=0\n\
    \  local -i len_val_alpha_num_mixed=0\n  local -i len_key_alpha_num_empty=0\n\
    \  local -i len_val_alpha_num_empty=0\n  local -i len_key_alpha_num_upper_lower=0\n\
    \  local -i len_val\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check for empty dictionary\n\
    \    if [ -z \"$1\" ]; then\n        echo \"False\"\n        return\n    fi\n\
    \    # Check for lower case keys\n    if [ \"$(echo \"$1\" | cut -d, -f1 | tr\
    \ '[:upper:]' '[:lower:]' | sort | uniq -c | grep -v \"^ *1 \")\" ]; then\n  \
    \      echo \"False\"\n        return\n    fi\n    # Check for upper case keys\n\
    \    if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]' | sort |\
    \ uniq -c | grep -v \"^ *1 \")\" ]; then\n        echo \"False\"\n        return\n\
    \    fi\n    echo \"True\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Read the CSV into an array\n  IFS=$'\\n' read\
    \ -d '' -r -a dict < <(echo \"$1\")\n  # Check if all keys are lower case\n  for\
    \ key in \"${dict[@]}\"; do\n    if [[ ! \"$key\" =~ ^[a-z], ]]; then\n      echo\
    \ \"False\"\n      return\n    fi\n  done\n  echo \"True\"\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local dict=\"$1\"\n  local key\n\
    \  local value\n  local lower=0\n  local upper=0\n  local mixed=0\n  local num=0\n\
    \  local empty=0\n  local retval=1\n  while IFS=, read key value; do\n    if [[\
    \ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower=$((lower+1))\n    elif [[ \"$key\"\
    \ =~ ^[A-Z]+$ ]]; then\n      upper=$((upper+1))\n    elif [[ \"$key\" =~ ^[0-9]+$\
    \ ]]; then\n      num=$((num+1))\n    else\n      mixed=$((mixed+1))\n    fi\n\
    \  done < <(echo \"$dict\")\n  if [[ $lower -gt 0 && $upper -gt 0 ]]; then\n \
    \   retval=0\n  elif [[ $lower -gt 0 && $num -gt 0 ]]; then\n    retval=0\n  elif\
    \ [[ $lower -gt 0 && $mixed -gt 0 ]]; then\n    retval=0\n  elif [[ $upper -gt\
    \ 0 && $num -gt 0 ]]; then\n    retval=0\n  elif [[ $upper -gt 0 && $mixed -gt\
    \ 0 ]]; then\n    retval=0\n  elif [[ $num -gt 0 && $mixed -gt 0 ]]; then\n  \
    \  retval=0\n  elif [[ $lower -eq 0 && $upper -eq 0 && $num -eq 0 && $mixed -eq\
    \ 0 ]]; then\n    retval=0\n  fi\n  echo \"$retval\"\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ $# -ne 1 ]; then\n    echo \"\
    Usage: $0 <dictionary>\"\n    return 1\n  fi\n  if [ ! -f \"$1\" ]; then\n   \
    \ echo \"File $1 not found\"\n    return 1\n  fi\n  # Check if the file is empty\n\
    \  if [ ! -s \"$1\" ]; then\n    echo \"False\"\n    return 0\n  fi\n  # Check\
    \ if the first character of the first line is a letter\n  if [[ $(head -1 \"$1\"\
    \ | cut -d, -f1 | cut -c1) =~ [a-zA-Z] ]]; then\n    # Check if the first character\
    \ of the first line is lowercase\n    if [[ $(head -1 \"$1\" | cut -d, -f1 | cut\
    \ -c1) =~ [a-z] ]]; then\n      # Check if all keys are lowercase\n      if [[\
    \ $(cut -d, -f1 \"$1\") =~ ^[a-z]+$ ]]; then\n        echo \"True\"\n        return\
    \ 0\n      fi\n    # Check if the first character of the first line is uppercase\n\
    \    elif [[ $(head -1 \"$1\" | cut -d, -f1 | cut -c1) =~ [A-Z] ]]; then\n   \
    \   # Check if all keys are uppercase\n      if [[ $(cut -d, -f1 \"$1\") =~ ^[A-Z]+$\
    \ ]]; then\n        echo \"True\"\n        return 0\n      fi\n    fi\n  fi\n\
    \  echo \"False\"\n  return 0\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local dict=\"$1\"\n  local key\n\
    \  local value\n  local lower_keys=0\n  local upper_keys=0\n  local lower_values=0\n\
    \  local upper_values=0\n  local lower_keys_and_values=0\n  local upper_keys_and_values=0\n\
    \  local lower_keys_and_upper_values=0\n  local upper_keys_and_lower_values=0\n\
    \  local mixed_keys=0\n  local mixed_values=0\n  local mixed_keys_and_values=0\n\
    \  local mixed_keys_and_upper_values=0\n  local mixed_keys_and_lower_values=0\n\
    \  local mixed_keys_and_mixed_values=0\n  local mixed_keys_and_upper_values=0\n\
    \  local mixed_keys_and_lower_values=0\n  local mixed_keys_and_mixed_values=0\n\
    \  local mixed_keys_and_upper_values=0\n  local mixed_keys_and_lower_values=0\n\
    \  local mixed_keys_and_mixed_values=0\n  local mixed_keys_and_upper_values=0\n\
    \  local mixed_keys_and_lower_values=0\n  local mixed_keys_and_mixed_values=0\n\
    \  local mixed_keys_and_upper_values=0\n  local mixed_keys_and_lower_values=0\n\
    \  local mixed_keys_and_mixed_values=0\n  local mixed_keys_and_upper_values=0\n\
    \  local mixed_keys_and_lower_values=0\n  local mixed_keys_and_mixed_values=0\n\
    \  local mixed_keys_and_upper_values=0\n  local mixed_keys_and_lower_values=0\n\
    \  local mixed_keys_and_mixed_values=0\n  local mixed_keys_and_upper_values=0\n\
    \  local mixed_keys_and_lower_values=0\n  local mixed_keys_and_mixed_values=0\n\
    \  local mixed_keys_and_upper_values=0\n  local mixed_keys_and_lower_values=0\n\
    \  local mixed_keys_and_mixed_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local csv=\"$1\"\n    local lower_case=0\n\
    \    local upper_case=0\n    local mixed_case=0\n    local key\n    local value\n\
    \    while IFS=, read -r key value; do\n        if [[ \"$key\" =~ ^[a-z]+$ ]];\
    \ then\n            lower_case=1\n        elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n\
    \            upper_case=1\n        else\n            mixed_case=1\n        fi\n\
    \    done < <(echo \"$csv\")\n    if [[ $lower_case -eq 1 && $upper_case -eq 0\
    \ && $mixed_case -eq 0 ]]; then\n        echo \"True\"\n    elif [[ $lower_case\
    \ -eq 0 && $upper_case -eq 1 && $mixed_case -eq 0 ]]; then\n        echo \"True\"\
    \n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ $# -ne 1 ]; then\n    echo \"\
    Usage: $0 <csv_file>\"\n    exit 1\n  fi\n  if [ ! -f $1 ]; then\n    echo \"\
    File $1 not found\"\n    exit 1\n  fi\n  #\n  # Check if all keys are lower case\n\
    \  #\n  all_lower=1\n  while IFS=, read -r key value; do\n    if [ \"$key\" !=\
    \ \"$(echo $key | tr '[:upper:]' '[:lower:]')\" ]; then\n      all_lower=0\n \
    \     break\n    fi\n  done < $1\n  #\n  # Check if all keys are upper case\n\
    \  #\n  all_upper=1\n  while IFS=, read -r key value; do\n    if [ \"$key\" !=\
    \ \"$(echo $key | tr '[:lower:]' '[:upper:]')\" ]; then\n      all_upper=0\n \
    \     break\n    fi\n  done < $1\n  #\n  # Return True if all keys are lower or\
    \ upper case\n  #\n  if [ $all_lower -eq 1 ] || [ $all_upper -eq 1 ]; then\n \
    \   echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <key,value CSV>\"\n        return 1\n    fi\n    if [ ! -f\
    \ $1 ]; then\n        echo \"File $1 does not exist\"\n        return 1\n    fi\n\
    \    # Check if the file is empty\n    if [ ! -s $1 ]; then\n        echo \"File\
    \ $1 is empty\"\n        return 1\n    fi\n    # Check if the file is a two column\
    \ CSV\n    if [ $(head -1 $1 | awk -F, '{print NF}') -ne 2 ]; then\n        echo\
    \ \"File $1 is not a two column CSV\"\n        return 1\n    fi\n    # Check if\
    \ all keys are strings in lower case\n    if [ $(awk -F, '{print tolower($1)}'\
    \ $1 | sort | uniq -c | awk '{print $1}') -eq $(wc -l $1 | awk '{print $1}') ];\
    \ then\n        echo \"True\"\n        return 0\n    fi\n    # Check if all keys\
    \ are strings in upper case\n    if [ $(awk -F, '{print toupper($1)}' $1 | sort\
    \ | uniq -c | awk '{print $1}') -eq $(wc -l $1 | awk '{print $1}') ]; then\n \
    \       echo \"True\"\n        return 0\n    fi\n    echo \"False\"\n    return\
    \ 0\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local key\n    local value\n  \
    \  local lower_case=1\n    local upper_case=1\n    local mixed_case=0\n    local\
    \ csv_file=\"$1\"\n    local csv_line\n    local csv_key\n    local csv_value\n\
    \    local csv_line_count=0\n    local csv_key_count=0\n    local csv_value_count=0\n\
    \    local csv_key_value_count=0\n    local csv_key_value_match_count=0\n    local\
    \ csv_key_value_mismatch_count=0\n    local csv_key_value_mismatch_list=\"\"\n\
    \    local csv_key_value_mismatch_list_count=0\n    local csv_key_value_mismatch_list_max=10\n\
    \    local csv_key_value_mismatch_list_max_count=0\n    local csv_key_value_mismatch_list_max_count_plus=0\n\
    \    local csv_key_value_mismatch_list_max_count_plus_str=\"\"\n    local csv_key_value_mismatch_list_max_count_plus_str_len=0\n\
    \    local csv_key_value_mismatch_list_max_count_plus_str_len_max=4\n    local\
    \ csv_key_value_mismatch_list_max_count_plus_str_len_max_plus=0\n    local csv_key_value_mismatch_list_max_count_plus_str_len_max_plus_str=\"\
    \"\n    local csv_key_value_mismatch_list_max_count_plus_str_len_max_plus_str_len=0\n\
    \    local csv_key_value_mismatch_list_max_count_plus_str_len_max_plus_str_len_max=4\n\
    \    local csv_key_value_mismatch_list_max_count_plus_str_len_max_plus_str_len_max_plus=0\n\
    \    local csv_key_value_mismatch_list_max_\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <dictionary>\"\n        return 1\n    fi\n    local dict=\"\
    $1\"\n    local key\n    local value\n    local lowercase=0\n    local uppercase=0\n\
    \    while IFS=',' read -r key value; do\n        if [[ \"$key\" =~ ^[a-z]+$ ]];\
    \ then\n            lowercase=1\n        elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n\
    \            uppercase=1\n        else\n            echo \"False\"\n         \
    \   return 0\n        fi\n    done < <(sed 's/^\"//;s/\"$//;s/\",\"/\",\"/g' <<<\
    \ \"$dict\")\n    if [ $lowercase -eq 1 -a $uppercase -eq 1 ]; then\n        echo\
    \ \"False\"\n    else\n        echo \"True\"\n    fi\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <csv_file>\"\n        exit 1\n    fi\n    if [ ! -f $1 ]; then\n\
    \        echo \"File $1 not found\"\n        exit 1\n    fi\n    # Get the first\
    \ key\n    first_key=$(head -1 $1 | cut -d, -f1)\n    # Get the first value\n\
    \    first_value=$(head -1 $1 | cut -d, -f2)\n    # Get the first key's case\n\
    \    first_key_case=$(echo $first_key | tr '[:upper:]' '[:lower:]')\n    # Get\
    \ the first value's case\n    first_value_case=$(echo $first_value | tr '[:upper:]'\
    \ '[:lower:]')\n    # If the first key's case is the same as the first key, then\n\
    \    # all keys are lower case, else all keys are upper case\n    if [ \"$first_key\"\
    \ == \"$first_key_case\" ]; then\n        # All keys are lower case\n        #\
    \ Check if all values are lower case\n        while read line; do\n          \
    \  key=$(echo $line | cut -d, -f1)\n            value=$(echo $line | cut -d, -f2)\n\
    \            value_case=$(echo $value | tr '[:upper:]' '[:lower:]')\n        \
    \    if [ \"$value\" != \"$value_case\" ]; then\n                echo \"False\"\
    \n                exit 0\n            fi\n        done < $1\n        echo \"True\"\
    \n    else\n        # All keys are upper case\n        # Check if all values are\
    \ upper case\n        while read line; do\n            key=$(echo $line | cut\
    \ -d, -f1)\n            value=$(echo $line | cut -d, -f2)\n            value_case=$(echo\
    \ $value | tr '[:lower:]' '[:upper:]')\n            if [ \"$value\" != \"$value_case\"\
    \ ]; then\n                echo \"False\"\n                exit 0\n          \
    \  fi\n        done < $1\n        echo \"True\"\n    fi\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  #\n  # Your code here\n  #\n  awk\
    \ -F, '{\n    if (NR == 1) {\n      if ($1 ~ /^[a-z]*$/) {\n        lower = 1\n\
    \      } else if ($1 ~ /^[A-Z]*$/) {\n        upper = 1\n      } else {\n    \
    \    print \"False\"\n        exit\n      }\n    } else {\n      if (lower &&\
    \ $1 ~ /^[A-Z]*$/) {\n        print \"False\"\n        exit\n      } else if (upper\
    \ && $1 ~ /^[a-z]*$/) {\n        print \"False\"\n        exit\n      }\n    }\n\
    \  } END {\n    print \"True\"\n  }' $1\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: fatal: cannot open file `p,pineapple\nb,banana'' for reading (No such
    file or directory)

    '
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check for empty dictionary\n\
    \    if [ $# -eq 0 ]; then\n        echo \"False\"\n        return\n    fi\n \
    \   # Check for all lower case keys\n    all_lower=1\n    for key in $@; do\n\
    \        if [[ $key =~ [A-Z] ]]; then\n            all_lower=0\n            break\n\
    \        fi\n    done\n    if [ $all_lower -eq 1 ]; then\n        echo \"True\"\
    \n        return\n    fi\n    # Check for all upper case keys\n    all_upper=1\n\
    \    for key in $@; do\n        if [[ $key =~ [a-z] ]]; then\n            all_upper=0\n\
    \            break\n        fi\n    done\n    if [ $all_upper -eq 1 ]; then\n\
    \        echo \"True\"\n        return\n    fi\n    # If we get here, then the\
    \ dictionary is mixed case\n    echo \"False\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # Read in the CSV and create a\
    \ dictionary\n    declare -A dict\n    while IFS=, read -r key value; do\n   \
    \     dict[$key]=$value\n    done < <(echo \"$1\")\n    # Check if all keys are\
    \ lower case\n    for key in \"${!dict[@]}\"; do\n        if [ \"$key\" != \"\
    ${key,,}\" ]; then\n            echo \"False\"\n            return\n        fi\n\
    \    done\n    echo \"True\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <two column CSV>\"\n        exit 1\n    fi\n    if [ ! -f $1\
    \ ]; then\n        echo \"File $1 not found\"\n        exit 1\n    fi\n    awk\
    \ -F, '{\n        if (NR==1) {\n            if ($1 ~ /^[a-z]+$/) {\n         \
    \       lower=1\n            } else if ($1 ~ /^[A-Z]+$/) {\n                upper=1\n\
    \            } else {\n                print \"False\"\n                exit\n\
    \            }\n        } else {\n            if (lower && $1 ~ /^[A-Z]+$/) {\n\
    \                print \"False\"\n                exit\n            } else if\
    \ (upper && $1 ~ /^[a-z]+$/) {\n                print \"False\"\n            \
    \    exit\n            }\n        }\n    }\n    END {\n        print \"True\"\n\
    \    }' $1\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <csv_file>\"\n        exit 1\n    fi\n    # Check if the file\
    \ is empty\n    if [ ! -s $1 ]; then\n        echo \"False\"\n        exit 0\n\
    \    fi\n    # Check if the first key is upper or lower case\n    first_key=$(head\
    \ -1 $1 | cut -d, -f1)\n    if [[ $first_key =~ [a-z] ]]; then\n        case_type=\"\
    lower\"\n    elif [[ $first_key =~ [A-Z] ]]; then\n        case_type=\"upper\"\
    \n    else\n        echo \"False\"\n        exit 0\n    fi\n    # Check if all\
    \ keys are upper or lower case\n    while read line; do\n        key=$(echo $line\
    \ | cut -d, -f1)\n        if [[ $key =~ [a-z] ]] && [ $case_type == \"upper\"\
    \ ]; then\n            echo \"False\"\n            exit 0\n        elif [[ $key\
    \ =~ [A-Z] ]] && [ $case_type == \"lower\" ]; then\n            echo \"False\"\
    \n            exit 0\n        fi\n    done < $1\n    echo \"True\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Convert CSV to a dictionary\n  declare -A dict\n\
    \  while IFS=, read -r key value; do\n    dict[$key]=$value\n  done < <(echo \"\
    $1\")\n  # Check if all keys are lower case\n  for key in \"${!dict[@]}\"; do\n\
    \    if [[ \"$key\" != \"${key,,}\" ]]; then\n      echo \"False\"\n      return\n\
    \    fi\n  done\n  echo \"True\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # Check if all keys are lower case\n\
    \    if [ \"$(echo \"$1\" | awk -F, '{print tolower($1)}' | sort -u | wc -l)\"\
    \ -eq 1 ]; then\n        echo \"True\"\n        return\n    fi\n    # Check if\
    \ all keys are upper case\n    if [ \"$(echo \"$1\" | awk -F, '{print toupper($1)}'\
    \ | sort -u | wc -l)\" -eq 1 ]; then\n        echo \"True\"\n        return\n\
    \    fi\n    echo \"False\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  local upper_count=0\n  local lower_count=0\n\
    \  local key\n  local value\n  while IFS=, read -r key value; do\n    if [[ $key\
    \ =~ [A-Z] ]]; then\n      ((upper_count++))\n    fi\n    if [[ $key =~ [a-z]\
    \ ]]; then\n      ((lower_count++))\n    fi\n  done < <(echo \"$1\")\n  if [ $upper_count\
    \ -eq 0 ] || [ $lower_count -eq 0 ]; then\n    echo \"True\"\n  else\n    echo\
    \ \"False\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  # TODO: Implement this function\n\
    \  # Hint: You can use the following functions:\n  #   - awk\n  #   - tr\n  #\
    \   - grep\n  #   - cut\n  #   - sort\n  #   - uniq\n  #   - wc\n  #   - head\n\
    \  #   - tail\n  #   - sed\n  #   - expr\n  #   - echo\n  #   - exit\n  #   -\
    \ test\n  #   - [\n  #   - [[\n  #   - ]]\n  #   - ]\n  #   - [[ ]]\n  #   - [[\
    \ ]] && [[ ]]\n  #   - [[ ]] || [[ ]]\n  #   - [[ ]] && [[ ]] || [[ ]]\n  #  \
    \ - [[ ]] && { [[ ]] || [[ ]]; }\n  #   - [[ ]] && { [[ ]] || [[ ]]; } || [[ ]]\n\
    \  #   - [[ ]] && { [[ ]] || [[ ]]; } || [[ ]] && [[ ]]\n  #   - [[ ]] && { [[\
    \ ]] || [[ ]]; } || [[ ]] && [[ ]] || [[ ]]\n  #   - [[ ]] && { [[ ]] || [[ ]];\
    \ } || [[ ]] && [[ ]] || [[ ]] && [[ ]]\n  #   - [[ ]] && { [[ ]] || [[ ]]; }\
    \ || [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[ ]]\n  #   - [[ ]] && { [[ ]] || [[\
    \ ]]; } || [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[ ]] && [[ ]]\n  #   - [[ ]] &&\
    \ { [[ ]] || [[ ]]; } || [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[ ]] && [[ ]] ||\
    \ [[ ]]\n  #   - [[ ]] && { [[ ]] || [[ ]]; } || [[ ]] && [[ ]] || [[ ]] && [[\
    \ ]] || [[ ]] && [[ ]] || [[ ]] && [[ ]]\n  #   - [[ ]] && { [[ ]] || [[ ]]; }\
    \ || [[ ]] && [[\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpfuwhzurk.sh: line 48: syntax error near unexpected token `}''

    /tmp/tmpfuwhzurk.sh: line 48: `}''

    '
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # Convert CSV to a dictionary\n\
    \    declare -A dict\n    while IFS=, read -r key value\n    do\n        dict[$key]=$value\n\
    \    done < <(echo \"$1\")\n    # Check if all keys are lower case\n    for key\
    \ in \"${!dict[@]}\"\n    do\n        if [[ $key =~ [A-Z] ]]; then\n         \
    \   echo \"False\"\n            return\n        fi\n    done\n    echo \"True\"\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # Read the first line of the CSV\
    \ and determine if the key is upper or lower case\n    IFS=',' read -r -a first_line\
    \ <<< \"$(head -n 1 $1)\"\n    if [[ ${first_line[0]} =~ ^[a-z]+$ ]]; then\n \
    \       # The key is lower case\n        if [[ $(sed 's/^[a-z]*$//g' $1) ]]; then\n\
    \            # There is a non-lower case key\n            echo \"False\"\n   \
    \         return\n        fi\n    elif [[ ${first_line[0]} =~ ^[A-Z]+$ ]]; then\n\
    \        # The key is upper case\n        if [[ $(sed 's/^[A-Z]*$//g' $1) ]];\
    \ then\n            # There is a non-upper case key\n            echo \"False\"\
    \n            return\n        fi\n    else\n        # The key is neither upper\
    \ nor lower case\n        echo \"False\"\n        return\n    fi\n    echo \"\
    True\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'head: cannot open ''p,pineapple\nb,banana'' for reading: No such file or
    directory

    '
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  # Check for empty dictionary\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"False\"\n    return\n  fi\n  # Check for all\
    \ lower case\n  if [ \"$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\" == \"$1\"\
    \ ]; then\n    echo \"True\"\n    return\n  fi\n  # Check for all upper case\n\
    \  if [ \"$(echo \"$1\" | tr '[:lower:]' '[:upper:]')\" == \"$1\" ]; then\n  \
    \  echo \"True\"\n    return\n  fi\n  # If we get here, it's mixed case\n  echo\
    \ \"False\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ $# -ne 1 ]; then\n    echo \"\
    Usage: $0 <csv file>\"\n    exit 1\n  fi\n  #\n  # Read the CSV file into an array\n\
    \  #\n  declare -A dict\n  while IFS=, read -r key value\n  do\n    dict[$key]=$value\n\
    \  done < $1\n  #\n  # Check the keys\n  #\n  for key in \"${!dict[@]}\"\n  do\n\
    \    if [[ $key =~ [A-Z] ]] && [[ $key =~ [a-z] ]]; then\n      echo \"False\"\
    \n      exit 0\n    fi\n  done\n  echo \"True\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpogdvxahi.sh: line 13: p,pineapple\nb,banana: No such file or directory

    '
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check for empty dictionary\n\
    \    if [ $# -eq 0 ]; then\n        echo \"False\"\n        return\n    fi\n \
    \   # Check for all lower case\n    if [ \"$(echo $1 | tr '[:upper:]' '[:lower:]')\"\
    \ == \"$1\" ]; then\n        echo \"True\"\n        return\n    fi\n    # Check\
    \ for all upper case\n    if [ \"$(echo $1 | tr '[:lower:]' '[:upper:]')\" ==\
    \ \"$1\" ]; then\n        echo \"True\"\n        return\n    fi\n    # If we get\
    \ here, it's mixed case\n    echo \"False\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <csv_file>\"\n        exit 1\n    fi\n    if [ ! -f $1 ]; then\n\
    \        echo \"File $1 does not exist\"\n        exit 1\n    fi\n    #\n    #\
    \ Loop through the CSV file and create a dictionary\n    #\n    declare -A dict\n\
    \    while IFS=, read -r key value\n    do\n        dict[$key]=$value\n    done\
    \ < $1\n    #\n    # Loop through the dictionary and check the case of the keys\n\
    \    #\n    for key in \"${!dict[@]}\"\n    do\n        if [[ $key =~ [A-Z] ]];\
    \ then\n            if [[ $key =~ [a-z] ]]; then\n                echo \"False\"\
    \n                exit 0\n            fi\n        else\n            if [[ $key\
    \ =~ [A-Z] ]]; then\n                echo \"False\"\n                exit 0\n\
    \            fi\n        fi\n    done\n    echo \"True\"\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Get the first key and check if it is lower\
    \ case\n  first_key=$(echo \"$1\" | head -n 1 | cut -d, -f1)\n  if [[ \"$first_key\"\
    \ =~ ^[a-z]+$ ]]; then\n    # All keys should be lower case\n    for key in $(echo\
    \ \"$1\" | cut -d, -f1); do\n      if [[ ! \"$key\" =~ ^[a-z]+$ ]]; then\n   \
    \     echo \"False\"\n        return\n      fi\n    done\n  else\n    # All keys\
    \ should be upper case\n    for key in $(echo \"$1\" | cut -d, -f1); do\n    \
    \  if [[ ! \"$key\" =~ ^[A-Z]+$ ]]; then\n        echo \"False\"\n        return\n\
    \      fi\n    done\n  fi\n  echo \"True\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ $# -ne 1 ]; then\n    echo \"\
    Usage: $0 <csv>\"\n    exit 1\n  fi\n  if [ ! -f $1 ]; then\n    echo \"File $1\
    \ does not exist\"\n    exit 1\n  fi\n  # Create a dictionary from the CSV file\n\
    \  declare -A dict\n  while IFS=, read -r key value; do\n    dict[$key]=$value\n\
    \  done < $1\n  # Check if the dictionary is empty\n  if [ ${#dict[@]} -eq 0 ];\
    \ then\n    echo \"False\"\n    exit 0\n  fi\n  # Check if all keys are strings\
    \ in lower case\n  for key in \"${!dict[@]}\"; do\n    if [[ $key =~ [A-Z] ]];\
    \ then\n      echo \"False\"\n      exit 0\n    fi\n  done\n  echo \"True\"\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check if the file is empty\n\
    \    if [ -z \"$1\" ]; then\n        echo \"False\"\n        return\n    fi\n\n\
    \    # Check if all keys are upper case\n    if [ $(awk -F, '{print $1}' $1 |\
    \ tr '[:upper:]' '[:lower:]' | grep -c '[a-z]') -eq 0 ]; then\n        echo \"\
    True\"\n        return\n    fi\n\n    # Check if all keys are lower case\n   \
    \ if [ $(awk -F, '{print $1}' $1 | tr '[:lower:]' '[:upper:]' | grep -c '[A-Z]')\
    \ -eq 0 ]; then\n        echo \"True\"\n        return\n    fi\n\n    # If we\
    \ get here, the keys are mixed case\n    echo \"False\"\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: fatal: cannot open file `p,pineapple\nb,banana'' for reading (No such
    file or directory)

    '
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <two column CSV>\"\n        exit 1\n    fi\n    # Check for\
    \ empty dictionary\n    if [ -z \"$1\" ]; then\n        echo \"False\"\n     \
    \   exit 0\n    fi\n    # Check for all lower case\n    if [ \"$(echo \"$1\" |\
    \ tr '[:upper:]' '[:lower:]')\" == \"$1\" ]; then\n        echo \"True\"\n   \
    \     exit 0\n    fi\n    # Check for all upper case\n    if [ \"$(echo \"$1\"\
    \ | tr '[:lower:]' '[:upper:]')\" == \"$1\" ]; then\n        echo \"True\"\n \
    \       exit 0\n    fi\n    # Not all lower or upper case\n    echo \"False\"\n\
    \    exit 0\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ $# -ne 1 ]; then\n    echo \"\
    Usage: $0 <csv file>\"\n    exit 1\n  fi\n  if [ ! -f $1 ]; then\n    echo \"\
    File $1 does not exist\"\n    exit 1\n  fi\n  # Check if the file is empty\n \
    \ if [ ! -s $1 ]; then\n    echo \"False\"\n    exit 0\n  fi\n  # Check if all\
    \ keys are strings in lower case\n  if [ $(cat $1 | awk -F, '{print tolower($1)}'\
    \ | sort | uniq -c | wc -l) -eq 1 ]; then\n    echo \"True\"\n    exit 0\n  fi\n\
    \  # Check if all keys are strings in upper case\n  if [ $(cat $1 | awk -F, '{print\
    \ toupper($1)}' | sort | uniq -c | wc -l) -eq 1 ]; then\n    echo \"True\"\n \
    \   exit 0\n  fi\n  echo \"False\"\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <csv file>\"\n        exit 1\n    fi\n    if [ ! -f $1 ]; then\n\
    \        echo \"File $1 does not exist\"\n        exit 1\n    fi\n    #\n    #\
    \ Read the CSV file and create a dictionary\n    #\n    declare -A dict\n    while\
    \ IFS=, read -r key value; do\n        dict[$key]=$value\n    done < $1\n    #\n\
    \    # Check the dictionary\n    #\n    for key in \"${!dict[@]}\"; do\n     \
    \   if [[ $key =~ [A-Z] ]]; then\n            if [[ $key =~ [a-z] ]]; then\n \
    \               echo \"False\"\n                return\n            fi\n     \
    \   else\n            if [[ $key =~ [A-Z] ]]; then\n                echo \"False\"\
    \n                return\n            fi\n        fi\n    done\n    echo \"True\"\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # Check if all keys are lower case\n\
    \    if [ \"$(echo \"$1\" | cut -d, -f1 | grep -v '[A-Z]' | wc -l)\" -eq \"$(echo\
    \ \"$1\" | wc -l)\" ]; then\n        echo \"True\"\n        return\n    fi\n \
    \   # Check if all keys are upper case\n    if [ \"$(echo \"$1\" | cut -d, -f1\
    \ | grep -v '[a-z]' | wc -l)\" -eq \"$(echo \"$1\" | wc -l)\" ]; then\n      \
    \  echo \"True\"\n        return\n    fi\n    echo \"False\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Check if all keys are in lower case\n  if [\
    \ \"$(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | tr -d '\\n' | wc\
    \ -c)\" -eq \"$(echo \"$1\" | cut -d, -f1 | tr -d '\\n' | wc -c)\" ]; then\n \
    \   echo \"True\"\n    return\n  fi\n  # Check if all keys are in upper case\n\
    \  if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]' | tr -d '\\\
    n' | wc -c)\" -eq \"$(echo \"$1\" | cut -d, -f1 | tr -d '\\n' | wc -c)\" ]; then\n\
    \    echo \"True\"\n    return\n  fi\n  echo \"False\"\n}\n\ncandidate() {\n \
    \   check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Get the first key\n  first_key=$(head -n 1\
    \ $1 | cut -d, -f1)\n  # Check if it is lower case\n  if [[ \"$first_key\" =~\
    \ ^[a-z]+$ ]]; then\n    # It is lower case, check all keys\n    while read line;\
    \ do\n      key=$(echo $line | cut -d, -f1)\n      if [[ ! \"$key\" =~ ^[a-z]+$\
    \ ]]; then\n        echo \"False\"\n        return\n      fi\n    done < $1\n\
    \    echo \"True\"\n    return\n  fi\n  # Check if it is upper case\n  if [[ \"\
    $first_key\" =~ ^[A-Z]+$ ]]; then\n    # It is upper case, check all keys\n  \
    \  while read line; do\n      key=$(echo $line | cut -d, -f1)\n      if [[ ! \"\
    $key\" =~ ^[A-Z]+$ ]]; then\n        echo \"False\"\n        return\n      fi\n\
    \    done < $1\n    echo \"True\"\n    return\n  fi\n  # It is neither upper nor\
    \ lower case\n  echo \"False\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'head: cannot open ''p,pineapple\nb,banana'' for reading: No such file or
    directory

    '
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <csv file>\"\n        exit 1\n    fi\n    if [ ! -f $1 ]; then\n\
    \        echo \"File $1 not found\"\n        exit 1\n    fi\n    #\n    # Read\
    \ the CSV file into a dictionary\n    #\n    declare -A dict\n    while IFS=,\
    \ read -r key value\n    do\n        dict[$key]=$value\n    done < $1\n    #\n\
    \    # Check the dictionary\n    #\n    for key in \"${!dict[@]}\"\n    do\n \
    \       if [[ $key =~ [A-Z] ]]; then\n            if [[ $key =~ [a-z] ]]; then\n\
    \                echo \"False\"\n                return\n            fi\n    \
    \    else\n            if [[ $key =~ [A-Z] ]]; then\n                echo \"False\"\
    \n                return\n            fi\n        fi\n    done\n    echo \"True\"\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ ! -f \"$1\" ]; then\n    echo\
    \ \"File $1 does not exist\"\n    exit 1\n  fi\n  # Get the first key\n  first_key=$(head\
    \ -n 1 $1 | cut -d, -f1)\n  # Get the first value\n  first_value=$(head -n 1 $1\
    \ | cut -d, -f2)\n  # Get the second key\n  second_key=$(head -n 2 $1 | tail -n\
    \ 1 | cut -d, -f1)\n  # Get the second value\n  second_value=$(head -n 2 $1 |\
    \ tail -n 1 | cut -d, -f2)\n  # Get the third key\n  third_key=$(head -n 3 $1\
    \ | tail -n 1 | cut -d, -f1)\n  # Get the third value\n  third_value=$(head -n\
    \ 3 $1 | tail -n 1 | cut -d, -f2)\n  # Get the fourth key\n  fourth_key=$(head\
    \ -n 4 $1 | tail -n 1 | cut -d, -f1)\n  # Get the fourth value\n  fourth_value=$(head\
    \ -n 4 $1 | tail -n 1 | cut -d, -f2)\n  # Get the fifth key\n  fifth_key=$(head\
    \ -n 5 $1 | tail -n 1 | cut -d, -f1)\n  # Get the fifth value\n  fifth_value=$(head\
    \ -n 5 $1 | tail -n 1 | cut -d, -f2)\n  # Get the sixth key\n  sixth_key=$(head\
    \ -n 6 $1 | tail -n 1 | cut -d, -f1)\n  # Get the sixth value\n  sixth_value=$(head\
    \ -n 6 $1 | tail -n 1 | cut -d, -f2)\n  # Get the seventh key\n  seventh_key=$(head\
    \ -n 7 $1 | tail -n 1 | cut -d, -f1)\n  # Get the seventh value\n  seventh_value=$(head\
    \ -n 7 $1 | tail -n 1 | cut -d, -f2)\n  # Get the eighth key\n  eighth_key=$(head\
    \ -\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk4mtinpk.sh: line 47: unexpected EOF while looking for matching
    `)''

    /tmp/tmpk4mtinpk.sh: line 66: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check for empty dictionary\n\
    \    if [ -z \"$1\" ]; then\n        echo \"False\"\n        return\n    fi\n\
    \    # Check for lower case keys\n    if [ \"$(echo \"$1\" | cut -d, -f1 | tr\
    \ '[:upper:]' '[:lower:]' | tr -d '[:digit:]' | wc -l)\" -eq \"$(echo \"$1\" |\
    \ wc -l)\" ]; then\n        echo \"True\"\n        return\n    fi\n    # Check\
    \ for upper case keys\n    if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:lower:]'\
    \ '[:upper:]' | tr -d '[:digit:]' | wc -l)\" -eq \"$(echo \"$1\" | wc -l)\" ];\
    \ then\n        echo \"True\"\n        return\n    fi\n    # If we get here, then\
    \ the dictionary is mixed case\n    echo \"False\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local csv=$1\n    local key\n \
    \   local value\n    local lower=0\n    local upper=0\n    local mixed=0\n   \
    \ local empty=0\n    local i=0\n    while IFS=, read key value; do\n        if\
    \ [[ $key =~ ^[a-z]+$ ]]; then\n            lower=$((lower+1))\n        elif [[\
    \ $key =~ ^[A-Z]+$ ]]; then\n            upper=$((upper+1))\n        else\n  \
    \          mixed=$((mixed+1))\n        fi\n        i=$((i+1))\n    done < <(echo\
    \ \"$csv\")\n    if [[ $i -eq 0 ]]; then\n        empty=1\n    fi\n    if [[ $lower\
    \ -gt 0 && $upper -gt 0 ]]; then\n        echo \"False\"\n    elif [[ $mixed -gt\
    \ 0 ]]; then\n        echo \"False\"\n    elif [[ $empty -gt 0 ]]; then\n    \
    \    echo \"False\"\n    else\n        echo \"True\"\n    fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check if the file exists and\
    \ is readable\n    if [ ! -r \"$1\" ]; then\n        echo \"ERROR: $1 is not readable\"\
    \n        exit 1\n    fi\n    # Check if the file is empty\n    if [ ! -s \"$1\"\
    \ ]; then\n        echo \"ERROR: $1 is empty\"\n        exit 1\n    fi\n    #\
    \ Check if the file is a two column CSV\n    if [ $(head -n 1 \"$1\" | awk -F,\
    \ '{print NF}') -ne 2 ]; then\n        echo \"ERROR: $1 is not a two column CSV\"\
    \n        exit 1\n    fi\n    # Check if the file has a header\n    if [ $(head\
    \ -n 1 \"$1\" | awk -F, '{print $1}') == \"key\" ]; then\n        # Remove the\
    \ header\n        tail -n +2 \"$1\" > \"$1\".tmp\n        mv \"$1\".tmp \"$1\"\
    \n    fi\n    # Check if the file has duplicate keys\n    if [ $(awk -F, '{print\
    \ $1}' \"$1\" | sort | uniq -d | wc -l) -gt 0 ]; then\n        echo \"ERROR: $1\
    \ has duplicate keys\"\n        exit 1\n    fi\n    # Check if the file has duplicate\
    \ values\n    if [ $(awk -F, '{print $2}' \"$1\" | sort | uniq -d | wc -l) -gt\
    \ 0 ]; then\n        echo \"ERROR: $1 has duplicate values\"\n        exit 1\n\
    \    fi\n    # Check if all keys are strings in lower case\n    if [ $(awk -F,\
    \ '{print $1}' \"$1\" | grep -v '^[a-z]*$' | wc -l) -eq 0 ]; then\n        echo\
    \ \"True\"\n        exit 0\n    fi\n    # Check if all keys are strings in upper\
    \ case\n    if [ $(awk -F, '{print $1}' \"$1\" | grep -v '^[A-Z]*$' | wc -l) -eq\
    \ 0 ]; then\n        echo \"True\"\n        exit 0\n    fi\n    # If all keys\
    \ are not strings in lower case or upper case\n    echo \"False\"\n\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  # check for empty dict\n  if [ -z\
    \ \"$1\" ]; then\n    echo \"False\"\n    return\n  fi\n  # check for all lower\
    \ case\n  if [ \"$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\" == \"$1\" ]; then\n\
    \    echo \"True\"\n    return\n  fi\n  # check for all upper case\n  if [ \"\
    $(echo \"$1\" | tr '[:lower:]' '[:upper:]')\" == \"$1\" ]; then\n    echo \"True\"\
    \n    return\n  fi\n  # check for mixed case\n  echo \"False\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local dict=\"$1\"\n    local key\n\
    \    local value\n    local upper=0\n    local lower=0\n    local mixed=0\n  \
    \  local empty=0\n    local IFS=','\n    while read key value; do\n        if\
    \ [[ -z \"$key\" ]]; then\n            empty=1\n        elif [[ \"$key\" =~ ^[A-Z]+$\
    \ ]]; then\n            upper=1\n        elif [[ \"$key\" =~ ^[a-z]+$ ]]; then\n\
    \            lower=1\n        else\n            mixed=1\n        fi\n    done\
    \ < <(echo \"$dict\")\n    if [[ $empty -eq 1 ]]; then\n        echo \"False\"\
    \n    elif [[ $upper -eq 1 && $lower -eq 1 ]]; then\n        echo \"False\"\n\
    \    elif [[ $mixed -eq 1 ]]; then\n        echo \"False\"\n    else\n       \
    \ echo \"True\"\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    local lower=0\n    local upper=0\n\
    \    local mixed=0\n    local other=0\n    while IFS=, read -r key value; do\n\
    \        if [[ $key =~ ^[a-z]+$ ]]; then\n            lower=$((lower+1))\n   \
    \     elif [[ $key =~ ^[A-Z]+$ ]]; then\n            upper=$((upper+1))\n    \
    \    elif [[ $key =~ ^[a-zA-Z]+$ ]]; then\n            mixed=$((mixed+1))\n  \
    \      else\n            other=$((other+1))\n        fi\n    done < <(echo \"\
    $1\")\n    if [ $lower -gt 0 ] && [ $upper -gt 0 ]; then\n        echo \"False\"\
    \n    elif [ $mixed -gt 0 ] || [ $other -gt 0 ]; then\n        echo \"False\"\n\
    \    else\n        echo \"True\"\n    fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Read the CSV into an array\n  IFS=',' read\
    \ -r -a dict <<< \"$1\"\n  # Check the first key to see if it is upper or lower\
    \ case\n  case ${dict[0]} in\n    [a-z]*)\n      # It is lower case, so check\
    \ the rest of the keys\n      for key in \"${dict[@]}\"; do\n        case $key\
    \ in\n          [A-Z]*)\n            # Found an upper case key, so return False\n\
    \            echo \"False\"\n            return\n            ;;\n        esac\n\
    \      done\n      ;;\n    [A-Z]*)\n      # It is upper case, so check the rest\
    \ of the keys\n      for key in \"${dict[@]}\"; do\n        case $key in\n   \
    \       [a-z]*)\n            # Found a lower case key, so return False\n     \
    \       echo \"False\"\n            return\n            ;;\n        esac\n   \
    \   done\n      ;;\n    *)\n      # The first key is not upper or lower case,\
    \ so return False\n      echo \"False\"\n      return\n      ;;\n  esac\n  # All\
    \ keys are upper or lower case, so return True\n  echo \"True\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check for empty dictionary\n\
    \    if [[ -z \"$1\" ]]; then\n        echo \"False\"\n        return\n    fi\n\
    \    # Check for lower case keys\n    if [[ \"$1\" =~ ^[a-z],[a-z] ]]; then\n\
    \        # Check for all lower case keys\n        if [[ \"$1\" =~ ^[a-z],[a-z]$\
    \ ]]; then\n            echo \"True\"\n            return\n        fi\n      \
    \  # Check for mixed case keys\n        if [[ \"$1\" =~ ^[a-z],[a-z]\\,[A-Z] ]];\
    \ then\n            echo \"False\"\n            return\n        fi\n    fi\n \
    \   # Check for upper case keys\n    if [[ \"$1\" =~ ^[A-Z],[A-Z] ]]; then\n \
    \       # Check for all upper case keys\n        if [[ \"$1\" =~ ^[A-Z],[A-Z]$\
    \ ]]; then\n            echo \"True\"\n            return\n        fi\n      \
    \  # Check for mixed case keys\n        if [[ \"$1\" =~ ^[A-Z],[A-Z]\\,[a-z] ]];\
    \ then\n            echo \"False\"\n            return\n        fi\n    fi\n \
    \   # Check for mixed case keys\n    if [[ \"$1\" =~ ^[a-z],[a-z]\\,[A-Z] ]];\
    \ then\n        echo \"False\"\n        return\n    fi\n    if [[ \"$1\" =~ ^[A-Z],[A-Z]\\\
    ,[a-z] ]]; then\n        echo \"False\"\n        return\n    fi\n    # Check for\
    \ mixed case keys\n    if [[ \"$1\" =~ ^[a-z],[a-z]\\,[A-Z] ]]; then\n       \
    \ echo \"False\"\n        return\n    fi\n    if [[ \"$1\" =~ ^[A-Z],[A-Z]\\,[a-z]\
    \ ]]; then\n        echo \"False\"\n        return\n    fi\n    # Check for mixed\
    \ case keys\n    if [[ \"$1\" =~ ^[a-z],[a-z]\\,[A-Z] ]]; then\n        echo \"\
    False\"\n        return\n    fi\n    if [[ \"$1\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu1l483xj.sh: line 68: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmpu1l483xj.sh: line 68: syntax error near `"$1"''

    /tmp/tmpu1l483xj.sh: line 68: `    if [[ "$1"''

    '
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # check if all keys are lower case\n\
    \    if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | sort |\
    \ uniq -c | awk '{print $1}')\" == \"$(echo \"$1\" | wc -l)\" ]; then\n      \
    \  echo \"True\"\n        return\n    fi\n    # check if all keys are upper case\n\
    \    if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]' | sort |\
    \ uniq -c | awk '{print $1}')\" == \"$(echo \"$1\" | wc -l)\" ]; then\n      \
    \  echo \"True\"\n        return\n    fi\n    echo \"False\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local dict=\"$1\"\n    local lower_count=0\n\
    \    local upper_count=0\n    local key\n    local value\n    while IFS=, read\
    \ -r key value; do\n        if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n            ((lower_count++))\n\
    \        elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n            ((upper_count++))\n\
    \        else\n            echo \"False\"\n            return\n        fi\n  \
    \  done < <(echo \"$dict\")\n    if [[ \"$lower_count\" -gt 0 && \"$upper_count\"\
    \ -gt 0 ]]; then\n        echo \"False\"\n    else\n        echo \"True\"\n  \
    \  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # First, check if all keys are\
    \ lower case\n    lower_case_keys=`awk -F, '{print $1}' $1 | grep -v '[A-Z]'`\n\
    \    if [ -n \"$lower_case_keys\" ]; then\n        # All keys are lower case\n\
    \        echo \"True\"\n        return\n    fi\n    # Next, check if all keys\
    \ are upper case\n    upper_case_keys=`awk -F, '{print $1}' $1 | grep -v '[a-z]'`\n\
    \    if [ -n \"$upper_case_keys\" ]; then\n        # All keys are upper case\n\
    \        echo \"True\"\n        return\n    fi\n    # If we get here, there are\
    \ mixed case keys\n    echo \"False\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: fatal: cannot open file `p,pineapple\nb,banana'' for reading (No such
    file or directory)

    awk: fatal: cannot open file `p,pineapple\nb,banana'' for reading (No such file
    or directory)

    '
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Check for empty dictionary\n  if [ -z \"$(cut\
    \ -d, -f1 \"$1\")\" ]; then\n    echo \"False\"\n    return\n  fi\n  # Check for\
    \ all lower case\n  if [ \"$(cut -d, -f1 \"$1\" | tr '[:upper:]' '[:lower:]')\"\
    \ == \"$(cut -d, -f1 \"$1\")\" ]; then\n    echo \"True\"\n    return\n  fi\n\
    \  # Check for all upper case\n  if [ \"$(cut -d, -f1 \"$1\" | tr '[:lower:]'\
    \ '[:upper:]')\" == \"$(cut -d, -f1 \"$1\")\" ]; then\n    echo \"True\"\n   \
    \ return\n  fi\n  echo \"False\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: ''p,pineapple\nb,banana'': No such file or directory

    '
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Get the first key\n  key=$(head -n 1 $1 | cut\
    \ -d, -f1)\n  # Check if it is lower case\n  if [[ $key =~ ^[a-z]+$ ]]; then\n\
    \    # If it is lower case, check the rest of the keys\n    while read line; do\n\
    \      key=$(echo $line | cut -d, -f1)\n      if [[ ! $key =~ ^[a-z]+$ ]]; then\n\
    \        echo \"False\"\n        return\n      fi\n    done < $1\n    echo \"\
    True\"\n    return\n  fi\n  # Check if it is upper case\n  if [[ $key =~ ^[A-Z]+$\
    \ ]]; then\n    # If it is upper case, check the rest of the keys\n    while read\
    \ line; do\n      key=$(echo $line | cut -d, -f1)\n      if [[ ! $key =~ ^[A-Z]+$\
    \ ]]; then\n        echo \"False\"\n        return\n      fi\n    done < $1\n\
    \    echo \"True\"\n    return\n  fi\n  # If it is neither lower nor upper case,\
    \ return False\n  echo \"False\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'head: cannot open ''p,pineapple\nb,banana'' for reading: No such file or
    directory

    '
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # Check if all keys are lower case\n\
    \    if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | sort |\
    \ uniq -c | awk '{print $1}')\" -eq \"$(echo \"$1\" | wc -l)\" ]; then\n     \
    \   echo \"True\"\n        return\n    fi\n    # Check if all keys are upper case\n\
    \    if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]' | sort |\
    \ uniq -c | awk '{print $1}')\" -eq \"$(echo \"$1\" | wc -l)\" ]; then\n     \
    \   echo \"True\"\n        return\n    fi\n    echo \"False\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local dict=$1\n    local key\n\
    \    local value\n    local lower_case=0\n    local upper_case=0\n    local mixed_case=0\n\
    \    local empty_dict=0\n    local line\n    local result=0\n    while read line;\
    \ do\n        key=$(echo $line | cut -d, -f1)\n        value=$(echo $line | cut\
    \ -d, -f2)\n        if [[ \"$key\" == \"\" ]]; then\n            empty_dict=1\n\
    \        elif [[ \"$key\" == \"$(echo $key | tr '[:upper:]' '[:lower:]')\" ]];\
    \ then\n            lower_case=1\n        elif [[ \"$key\" == \"$(echo $key |\
    \ tr '[:lower:]' '[:upper:]')\" ]]; then\n            upper_case=1\n        else\n\
    \            mixed_case=1\n        fi\n    done < <(echo $dict | tr ';' '\\n')\n\
    \    if [[ $empty_dict -eq 1 ]]; then\n        result=1\n    elif [[ $lower_case\
    \ -eq 1 && $upper_case -eq 1 ]]; then\n        result=1\n    elif [[ $mixed_case\
    \ -eq 1 ]]; then\n        result=1\n    fi\n    return $result\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Convert CSV to JSON\n  local json=$(echo \"\
    $1\" | sed 's/,/\":\"/g;s/^/{\"/;s/$/\"}/')\n  # Extract keys\n  local keys=$(echo\
    \ \"$json\" | jq -r 'keys[]')\n  # Check if all keys are lower case\n  local lower=$(echo\
    \ \"$keys\" | grep -v '[A-Z]')\n  # Check if all keys are upper case\n  local\
    \ upper=$(echo \"$keys\" | grep -v '[a-z]')\n  # If all keys are lower or upper\
    \ case, return True\n  if [ -z \"$lower\" ] || [ -z \"$upper\" ]; then\n    echo\
    \ \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpi0sspiiw.sh: line 21: jq: command not found

    '
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Read the CSV into an array\n  IFS=',' read\
    \ -ra ADDR <<< \"$1\"\n  # Check the first key to see if it is upper or lower\
    \ case\n  if [[ \"${ADDR[0]}\" =~ ^[A-Z]+$ ]]; then\n    # First key is upper\
    \ case, check the rest\n    for i in \"${ADDR[@]}\"; do\n      if [[ ! \"$i\"\
    \ =~ ^[A-Z]+$ ]]; then\n        echo \"False\"\n        return\n      fi\n   \
    \ done\n  else\n    # First key is lower case, check the rest\n    for i in \"\
    ${ADDR[@]}\"; do\n      if [[ ! \"$i\" =~ ^[a-z]+$ ]]; then\n        echo \"False\"\
    \n        return\n      fi\n    done\n  fi\n  echo \"True\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  # Check for empty dictionary\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"False\"\n    return\n  fi\n  # Check for all\
    \ lower case keys\n  if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]'\
    \ | sort | uniq -c | wc -l)\" -eq 1 ]; then\n    echo \"True\"\n    return\n \
    \ fi\n  # Check for all upper case keys\n  if [ \"$(echo \"$1\" | cut -d, -f1\
    \ | tr '[:lower:]' '[:upper:]' | sort | uniq -c | wc -l)\" -eq 1 ]; then\n   \
    \ echo \"True\"\n    return\n  fi\n  # If we get here, then the dictionary is\
    \ mixed case\n  echo \"False\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # Check if all keys are lowercase\n\
    \    if [ \"$(echo \"$1\" | awk -F, '{print tolower($1)}' | sort | uniq -c | awk\
    \ '{print $1}')\" == \"$(echo \"$1\" | awk -F, '{print $1}' | wc -l)\" ]; then\n\
    \        echo \"True\"\n        return\n    fi\n    # Check if all keys are uppercase\n\
    \    if [ \"$(echo \"$1\" | awk -F, '{print toupper($1)}' | sort | uniq -c | awk\
    \ '{print $1}')\" == \"$(echo \"$1\" | awk -F, '{print $1}' | wc -l)\" ]; then\n\
    \        echo \"True\"\n        return\n    fi\n    echo \"False\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local dict=\"$1\"\n  local key\n\
    \  local value\n  local upper_case=0\n  local lower_case=0\n  local mixed_case=0\n\
    \  local empty_dict=0\n  local dict_size=0\n  local i=0\n  local j=0\n  local\
    \ k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local\
    \ q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local\
    \ w=0\n  local x=0\n  local y=0\n  local z=0\n  local A=0\n  local B=0\n  local\
    \ C=0\n  local D=0\n  local E=0\n  local F=0\n  local G=0\n  local H=0\n  local\
    \ I=0\n  local J=0\n  local K=0\n  local L=0\n  local M=0\n  local N=0\n  local\
    \ O=0\n  local P=0\n  local Q=0\n  local R=0\n  local S=0\n  local T=0\n  local\
    \ U=0\n  local V=0\n  local W=0\n  local X=0\n  local Y=0\n  local Z=0\n  local\
    \ dict_size=$(wc -l \"$dict\" | awk '{print $1}')\n  if [ $dict_size -eq 0 ];\
    \ then\n    echo \"False\"\n    return\n  fi\n  while IFS=, read -r key value;\
    \ do\n    if [[ $key =~ [a-z] ]]; then\n      lower_case=$((lower_case+1))\n \
    \   fi\n    if [[ $key =~ [A-Z] ]]; then\n      upper_case=$((upper_case+1))\n\
    \    fi\n    if [[ $key =~ [A-Za-z] ]]; then\n      mixed_case=$((mixed_case+1))\n\
    \    fi\n    if [[ $key =~ [a] ]]; then\n      a=$((a+1))\n    fi\n   \n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmple_gszlt.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmple_gszlt.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check for empty dictionary\n\
    \    if [ $# -eq 0 ]; then\n        echo \"False\"\n        return\n    fi\n \
    \   # Check for all lower case\n    echo $1 | awk -F, '{print $1}' | grep -q '[A-Z]'\n\
    \    if [ $? -eq 0 ]; then\n        # Check for all upper case\n        echo $1\
    \ | awk -F, '{print $1}' | grep -q '[a-z]'\n        if [ $? -eq 0 ]; then\n  \
    \          echo \"False\"\n            return\n        fi\n    fi\n    echo \"\
    True\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check if the file is empty\n\
    \    if [ ! -s \"$1\" ]; then\n        echo \"False\"\n        return\n    fi\n\
    \n    # Check if all keys are lower case\n    if [ \"$(awk -F, '{print tolower($1)}'\
    \ \"$1\" | sort | uniq -c | wc -l)\" -eq 1 ]; then\n        echo \"True\"\n  \
    \      return\n    fi\n\n    # Check if all keys are upper case\n    if [ \"$(awk\
    \ -F, '{print toupper($1)}' \"$1\" | sort | uniq -c | wc -l)\" -eq 1 ]; then\n\
    \        echo \"True\"\n        return\n    fi\n\n    # If we get here, then the\
    \ keys are mixed case\n    echo \"False\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  if [ ! -f \"$1\" ]; then\n    echo \"False\"\n\
    \    return\n  fi\n  if [ ! -s \"$1\" ]; then\n    echo \"False\"\n    return\n\
    \  fi\n  #\n  # Create a temp file with the keys in lower case\n  #\n  lower_case_keys=$(mktemp)\n\
    \  upper_case_keys=$(mktemp)\n  #\n  # Create a temp file with the keys in upper\
    \ case\n  #\n  awk -F, '{print tolower($1)}' $1 > $lower_case_keys\n  awk -F,\
    \ '{print toupper($1)}' $1 > $upper_case_keys\n  #\n  # Compare the two files\n\
    \  #\n  diff $lower_case_keys $upper_case_keys > /dev/null\n  if [ $? -eq 0 ];\
    \ then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n  #\n  # Clean up\n\
    \  #\n  rm -f $lower_case_keys $upper_case_keys\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <two column CSV in key,value order>\"\n        exit 1\n   \
    \ fi\n    #\n    # Check for empty dictionary\n    if [ ! -s $1 ]; then\n    \
    \    echo False\n        exit 0\n    fi\n    #\n    # Check for all lower case\n\
    \    awk -F, '{print $1}' $1 | grep -q '[A-Z]'\n    if [ $? -eq 0 ]; then\n  \
    \      #\n        # Check for all upper case\n        awk -F, '{print $1}' $1\
    \ | grep -q '[a-z]'\n        if [ $? -eq 0 ]; then\n            echo False\n \
    \           exit 0\n        fi\n    fi\n    echo True\n}\n\ncandidate() {\n  \
    \  check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  # TODO: Implement this function\n\
    \  # return True or False\n  if [ $# -eq 0 ]; then\n    echo \"False\"\n    return\n\
    \  fi\n  if [ ! -f $1 ]; then\n    echo \"False\"\n    return\n  fi\n  if [ $(cat\
    \ $1 | wc -l) -eq 0 ]; then\n    echo \"False\"\n    return\n  fi\n  if [ $(cat\
    \ $1 | cut -d, -f1 | grep -v '[A-Z]' | wc -l) -eq 0 ]; then\n    echo \"True\"\
    \n    return\n  fi\n  if [ $(cat $1 | cut -d, -f1 | grep -v '[a-z]' | wc -l) -eq\
    \ 0 ]; then\n    echo \"True\"\n    return\n  fi\n  echo \"False\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local -a keys\n    local -a values\n\
    \    local -a lower_keys\n    local -a upper_keys\n    local -a lower_values\n\
    \    local -a upper_values\n    local -a lower_keys_values\n    local -a upper_keys_values\n\
    \    local -a lower_keys_values_sorted\n    local -a upper_keys_values_sorted\n\
    \    local -a lower_keys_values_sorted_uniq\n    local -a upper_keys_values_sorted_uniq\n\
    \    local -a lower_keys_values_sorted_uniq_count\n    local -a upper_keys_values_sorted_uniq_count\n\
    \    local -a lower_keys_values_sorted_uniq_count_sorted\n    local -a upper_keys_values_sorted_uniq_count_sorted\n\
    \    local -a lower_keys_values_sorted_uniq_count_sorted_uniq\n    local -a upper_keys_values_sorted_uniq_count_sorted_uniq\n\
    \    local -a lower_keys_values_sorted_uniq_count_sorted_uniq_count\n    local\
    \ -a upper_keys_values_sorted_uniq_count_sorted_uniq_count\n    local -a lower_keys_values_sorted_uniq_count_sorted_uniq_count_sorted\n\
    \    local -a upper_keys_values_sorted_uniq_count_sorted_uniq_count_sorted\n \
    \   local -a lower_keys_values_sorted_uniq_count_sorted_uniq_count_sorted_uniq\n\
    \    local -a upper_keys_values_sorted_uniq_count_sorted_uniq_count_sorted_uniq\n\
    \    local -a lower_keys_values_sorted_uniq_count_sorted_uniq_count_sorted_uniq_count\n\
    \    local -a upper_keys_values_sorted_uniq_count_sorted_uniq_count_sorted_uniq_count\n\
    \    local -a lower_keys_values_sorted_uniq_count_sorted_\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  if [ ! -f \"$1\" ]; then\n    echo \"False\"\n\
    \    return\n  fi\n  if [ ! -s \"$1\" ]; then\n    echo \"False\"\n    return\n\
    \  fi\n  #\n  # Check for all lower case\n  #\n  all_lower=true\n  while IFS=,\
    \ read -r key value; do\n    if [[ \"$key\" =~ [A-Z] ]]; then\n      all_lower=false\n\
    \      break\n    fi\n  done < \"$1\"\n  if [ \"$all_lower\" = true ]; then\n\
    \    echo \"True\"\n    return\n  fi\n  #\n  # Check for all upper case\n  #\n\
    \  all_upper=true\n  while IFS=, read -r key value; do\n    if [[ \"$key\" =~\
    \ [a-z] ]]; then\n      all_upper=false\n      break\n    fi\n  done < \"$1\"\n\
    \  if [ \"$all_upper\" = true ]; then\n    echo \"True\"\n    return\n  fi\n \
    \ #\n  # Not all lower or upper case\n  #\n  echo \"False\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # read the CSV into an array\n\
    \    IFS=',' read -r -a array <<< \"$1\"\n    # check if all keys are lower case\n\
    \    for key in \"${array[@]::2}\"; do\n        if [ \"$key\" != \"${key,,}\"\
    \ ]; then\n            echo \"False\"\n            return\n        fi\n    done\n\
    \    # check if all keys are upper case\n    for key in \"${array[@]::2}\"; do\n\
    \        if [ \"$key\" != \"${key^^}\" ]; then\n            echo \"False\"\n \
    \           return\n        fi\n    done\n    echo \"True\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    awk -F, '\n    BEGIN {\n      \
    \  lower = 0;\n        upper = 0;\n    }\n    {\n        if ($1 ~ /^[a-z]+$/)\
    \ {\n            lower++;\n        } else if ($1 ~ /^[A-Z]+$/) {\n           \
    \ upper++;\n        } else {\n            exit 1;\n        }\n    }\n    END {\n\
    \        if (lower > 0 && upper > 0) {\n            exit 1;\n        }\n     \
    \   exit 0;\n    }\n    ' $1\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:4: fatal: cannot open file `p,pineapple\nb,banana'' for
    reading (No such file or directory)

    '
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <csv_file>\"\n        exit 1\n    fi\n    csv_file=$1\n   \
    \ #\n    # Check if the file is empty\n    #\n    if [ ! -s $csv_file ]; then\n\
    \        echo \"False\"\n        exit 0\n    fi\n    #\n    # Check if all keys\
    \ are upper case\n    #\n    if [ $(awk -F, '{print $1}' $csv_file | grep -v '[a-z]'\
    \ | wc -l) -eq 0 ]; then\n        echo \"True\"\n        exit 0\n    fi\n    #\n\
    \    # Check if all keys are lower case\n    #\n    if [ $(awk -F, '{print $1}'\
    \ $csv_file | grep -v '[A-Z]' | wc -l) -eq 0 ]; then\n        echo \"True\"\n\
    \        exit 0\n    fi\n    #\n    # If we get here, then the keys are mixed\
    \ case\n    #\n    echo \"False\"\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <key,value CSV>\"\n        exit 1\n    fi\n    if [ ! -f $1\
    \ ]; then\n        echo \"File $1 does not exist\"\n        exit 1\n    fi\n \
    \   # Check if the file is empty\n    if [ ! -s $1 ]; then\n        echo \"False\"\
    \n        exit 0\n    fi\n    # Check if all keys are lower case\n    if [ $(cat\
    \ $1 | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | sort | uniq -c | wc -l) -eq\
    \ 1 ]; then\n        echo \"True\"\n        exit 0\n    fi\n    # Check if all\
    \ keys are upper case\n    if [ $(cat $1 | cut -d, -f1 | tr '[:lower:]' '[:upper:]'\
    \ | sort | uniq -c | wc -l) -eq 1 ]; then\n        echo \"True\"\n        exit\
    \ 0\n    fi\n    echo \"False\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local key\n    local value\n  \
    \  local lowercase\n    local uppercase\n    local mixedcase\n    local empty\n\
    \    local result\n\n    lowercase=true\n    uppercase=true\n    mixedcase=false\n\
    \    empty=true\n    result=false\n\n    while IFS=, read key value; do\n    \
    \    empty=false\n        if [[ $key =~ [A-Z] ]]; then\n            lowercase=false\n\
    \        fi\n        if [[ $key =~ [a-z] ]]; then\n            uppercase=false\n\
    \        fi\n        if [[ $key =~ [A-Z] && $key =~ [a-z] ]]; then\n         \
    \   mixedcase=true\n        fi\n    done < $1\n\n    if [[ $empty = false ]];\
    \ then\n        if [[ $lowercase = true || $uppercase = true ]]; then\n      \
    \      result=true\n        fi\n    fi\n\n    echo $result\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0z919s2g.sh: line 13: p,pineapple\nb,banana: No such file or directory

    '
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ $# -ne 1 ]; then\n    echo \"\
    Usage: $0 <csv_file>\"\n    exit 1\n  fi\n  if [ ! -f $1 ]; then\n    echo \"\
    File $1 does not exist\"\n    exit 1\n  fi\n  # Read the CSV file and create a\
    \ dictionary\n  declare -A dict\n  while IFS=, read key value; do\n    dict[$key]=$value\n\
    \  done < $1\n  # Check if the dictionary is empty\n  if [ ${#dict[@]} -eq 0 ];\
    \ then\n    echo \"False\"\n    exit 0\n  fi\n  # Check if all keys are strings\
    \ in lower case\n  for key in \"${!dict[@]}\"; do\n    if [[ ! $key =~ ^[a-z]+$\
    \ ]]; then\n      echo \"False\"\n      exit 0\n    fi\n  done\n  echo \"True\"\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check for empty dictionary\n\
    \    if [ -z \"$1\" ]; then\n        echo \"False\"\n        return\n    fi\n\
    \    # Check for all lower case keys\n    if [ \"$(echo \"$1\" | awk -F, '{print\
    \ $1}' | tr '[:upper:]' '[:lower:]' | sort | uniq -c | awk '{print $1}')\" ==\
    \ \"$(echo \"$1\" | awk -F, '{print $1}' | wc -l)\" ]; then\n        echo \"True\"\
    \n        return\n    fi\n    # Check for all upper case keys\n    if [ \"$(echo\
    \ \"$1\" | awk -F, '{print $1}' | tr '[:lower:]' '[:upper:]' | sort | uniq -c\
    \ | awk '{print $1}')\" == \"$(echo \"$1\" | awk -F, '{print $1}' | wc -l)\" ];\
    \ then\n        echo \"True\"\n        return\n    fi\n    # If we get here, the\
    \ dictionary is mixed case\n    echo \"False\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  # TODO: Implement this function\n\
    \  return 0\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local csv=$1\n    local lower=0\n\
    \    local upper=0\n    local key\n    local value\n    while IFS=, read key value;\
    \ do\n        if [[ $key =~ ^[a-z]+$ ]]; then\n            ((lower++))\n     \
    \   elif [[ $key =~ ^[A-Z]+$ ]]; then\n            ((upper++))\n        else\n\
    \            return 1\n        fi\n    done < <(echo \"$csv\")\n    if [[ $lower\
    \ -gt 0 && $upper -gt 0 ]]; then\n        return 1\n    fi\n    return 0\n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local -a keys\n    local -a values\n\
    \    local -a lower_keys\n    local -a upper_keys\n    local -a lower_values\n\
    \    local -a upper_values\n    local -a lower_keys_values\n    local -a upper_keys_values\n\
    \    local -a lower_keys_values_sorted\n    local -a upper_keys_values_sorted\n\
    \    local -a lower_keys_sorted\n    local -a upper_keys_sorted\n    local -a\
    \ lower_values_sorted\n    local -a upper_values_sorted\n    local -a lower_keys_values_sorted_uniq\n\
    \    local -a upper_keys_values_sorted_uniq\n    local -a lower_keys_sorted_uniq\n\
    \    local -a upper_keys_sorted_uniq\n    local -a lower_values_sorted_uniq\n\
    \    local -a upper_values_sorted_uniq\n    local -a lower_keys_values_sorted_uniq_count\n\
    \    local -a upper_keys_values_sorted_uniq_count\n    local -a lower_keys_sorted_uniq_count\n\
    \    local -a upper_keys_sorted_uniq_count\n    local -a lower_values_sorted_uniq_count\n\
    \    local -a upper_values_sorted_uniq_count\n    local -a lower_keys_values_sorted_uniq_count_sorted\n\
    \    local -a upper_keys_values_sorted_uniq_count_sorted\n    local -a lower_keys_sorted_uniq_count_sorted\n\
    \    local -a upper_keys_sorted_uniq_count_sorted\n    local -a lower_values_sorted_uniq_count_sorted\n\
    \    local -a upper_values_sorted_uniq_count_sorted\n    local -a lower_keys_values_sorted_uniq_count_sorted_uniq\n\
    \    local -a upper_keys_values_sorted_uniq_count_sorted_uniq\n    local -a lower_keys_sorted_uniq_count_sorted_uniq\n\
    \   \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local dict=\"$1\"\n    local key\n\
    \    local value\n    local lower_case_keys=0\n    local upper_case_keys=0\n \
    \   local mixed_case_keys=0\n    local lower_case_values=0\n    local upper_case_values=0\n\
    \    local mixed_case_values=0\n    local lower_case_key_values=0\n    local upper_case_key_values=0\n\
    \    local mixed_case_key_values=0\n    local lower_case_value_keys=0\n    local\
    \ upper_case_value_keys=0\n    local mixed_case_value_keys=0\n    local lower_case_key_value_keys=0\n\
    \    local upper_case_key_value_keys=0\n    local mixed_case_key_value_keys=0\n\
    \    local lower_case_key_value_values=0\n    local upper_case_key_value_values=0\n\
    \    local mixed_case_key_value_values=0\n    local lower_case_value_key_keys=0\n\
    \    local upper_case_value_key_keys=0\n    local mixed_case_value_key_keys=0\n\
    \    local lower_case_value_key_values=0\n    local upper_case_value_key_values=0\n\
    \    local mixed_case_value_key_values=0\n    local lower_case_key_value_key_values=0\n\
    \    local upper_case_key_value_key_values=0\n    local mixed_case_key_value_key_values=0\n\
    \    local lower_case_key_value_value_keys=0\n    local upper_case_key_value_value_keys=0\n\
    \    local mixed_case_key_value_value_keys=0\n    local lower_case_value_key_key_values=0\n\
    \    local upper_case_value_key_key_values=0\n    local mixed_case_value_key_key_values=0\n\
    \    local lower_case_value_key_value_keys=0\n    local upper_case_value_key_value_keys=0\n\
    \    local mixed_case_value_key_value_keys=0\n    local lower\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [[ -z \"$1\" ]]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Convert the CSV to a dictionary\n  declare\
    \ -A dict\n  while IFS=, read -r key value; do\n    dict[$key]=$value\n  done\
    \ < <(echo \"$1\")\n  # Check the keys for all lower case\n  for key in \"${!dict[@]}\"\
    ; do\n    if [[ $key =~ [A-Z] ]]; then\n      echo \"False\"\n      return\n \
    \   fi\n  done\n  echo \"True\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <two column CSV in key,value order>\"\n        exit 1\n   \
    \ fi\n    if [ ! -f $1 ]; then\n        echo \"File $1 does not exist\"\n    \
    \    exit 1\n    fi\n    # Read the CSV into a dictionary\n    declare -A dict\n\
    \    while IFS=, read -r key value; do\n        dict[$key]=$value\n    done <\
    \ $1\n    # Check if the dictionary is empty\n    if [ ${#dict[@]} -eq 0 ]; then\n\
    \        echo \"False\"\n        exit 0\n    fi\n    # Check if all keys are strings\
    \ in lower case\n    for key in \"${!dict[@]}\"; do\n        if [[ $key =~ ^[a-z]+$\
    \ ]]; then\n            continue\n        else\n            echo \"False\"\n \
    \           exit 0\n        fi\n    done\n    echo \"True\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ $# -ne 1 ]; then\n    echo \"\
    Usage: $0 <csv file>\"\n    exit 1\n  fi\n  if [ ! -f $1 ]; then\n    echo \"\
    File $1 does not exist\"\n    exit 1\n  fi\n  #\n  # Read the file into an array\n\
    \  #\n  declare -a dict\n  while IFS=, read -r key value; do\n    dict+=([$key]=$value)\n\
    \  done < $1\n  #\n  # Check for empty dictionary\n  #\n  if [ ${#dict[@]} -eq\
    \ 0 ]; then\n    echo \"False\"\n    exit 0\n  fi\n  #\n  # Check for all lower\
    \ case\n  #\n  for key in \"${!dict[@]}\"; do\n    if [[ $key =~ [A-Z] ]]; then\n\
    \      echo \"False\"\n      exit 0\n    fi\n  done\n  echo \"True\"\n  exit 0\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  local csv=$1\n  local key\n  local\
    \ value\n  local upper_count=0\n  local lower_count=0\n  local total_count=0\n\
    \  while IFS=, read key value; do\n    if [[ \"$key\" =~ [A-Z] ]]; then\n    \
    \  ((upper_count++))\n    elif [[ \"$key\" =~ [a-z] ]]; then\n      ((lower_count++))\n\
    \    fi\n    ((total_count++))\n  done < <(echo \"$csv\")\n  if [[ $total_count\
    \ -eq 0 ]]; then\n    echo \"False\"\n  elif [[ $upper_count -eq $total_count\
    \ ]]; then\n    echo \"True\"\n  elif [[ $lower_count -eq $total_count ]]; then\n\
    \    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  # Check for empty dictionary\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"False\"\n    return\n  fi\n  # Check for all\
    \ lower case\n  if [ \"$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\" == \"$1\"\
    \ ]; then\n    echo \"True\"\n    return\n  fi\n  # Check for all upper case\n\
    \  if [ \"$(echo \"$1\" | tr '[:lower:]' '[:upper:]')\" == \"$1\" ]; then\n  \
    \  echo \"True\"\n    return\n  fi\n  # If we get here, it's mixed case\n  echo\
    \ \"False\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995667
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # Read the CSV into a dictionary\n\
    \    declare -A dict\n    while IFS=, read -r key value; do\n        dict[$key]=$value\n\
    \    done < <(echo \"$1\")\n    # Check if all keys are upper case\n    for key\
    \ in \"${!dict[@]}\"; do\n        if [[ ! \"$key\" =~ ^[A-Z]+$ ]]; then\n    \
    \        echo \"False\"\n            return\n        fi\n    done\n    echo \"\
    True\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: $0 <csv file>\"\n        exit 1\n    fi\n    if [ ! -f $1 ]; then\n\
    \        echo \"File $1 not found\"\n        exit 1\n    fi\n    # Create a dictionary\
    \ from the CSV file\n    declare -A dict\n    while IFS=, read -r key value; do\n\
    \        dict[$key]=$value\n    done < $1\n    # Check if the dictionary is empty\n\
    \    if [ ${#dict[@]} -eq 0 ]; then\n        echo \"False\"\n        exit 0\n\
    \    fi\n    # Check if all keys are upper case\n    for key in \"${!dict[@]}\"\
    ; do\n        if [[ $key =~ [a-z] ]]; then\n            echo \"False\"\n     \
    \       exit 0\n        fi\n    done\n    echo \"True\"\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # Check if all keys are lower case\n\
    \    if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | tr -d '\\\
    n' | wc -c)\" -eq \"$(echo \"$1\" | cut -d, -f1 | tr -d '\\n' | wc -c)\" ]; then\n\
    \        echo \"True\"\n        return\n    fi\n    # Check if all keys are upper\
    \ case\n    if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]' |\
    \ tr -d '\\n' | wc -c)\" -eq \"$(echo \"$1\" | cut -d, -f1 | tr -d '\\n' | wc\
    \ -c)\" ]; then\n        echo \"True\"\n        return\n    fi\n    echo \"False\"\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    # Check for empty dictionary\n\
    \    if [ $# -eq 0 ]; then\n        echo \"False\"\n        return\n    fi\n \
    \   # Check for lower case keys\n    if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:upper:]'\
    \ '[:lower:]' | tr -d '[:digit:]' | sort | uniq -c | wc -l)\" -eq 1 ]; then\n\
    \        echo \"True\"\n        return\n    fi\n    # Check for upper case keys\n\
    \    if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]' | tr -d '[:digit:]'\
    \ | sort | uniq -c | wc -l)\" -eq 1 ]; then\n        echo \"True\"\n        return\n\
    \    fi\n    # If we get here, the dictionary is mixed case\n    echo \"False\"\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # check if all keys are lower case\n\
    \    if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | sort |\
    \ uniq | wc -l)\" -eq 1 ]; then\n        echo \"True\"\n        return\n    fi\n\
    \    # check if all keys are upper case\n    if [ \"$(echo \"$1\" | cut -d, -f1\
    \ | tr '[:lower:]' '[:upper:]' | sort | uniq | wc -l)\" -eq 1 ]; then\n      \
    \  echo \"True\"\n        return\n    fi\n    echo \"False\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  # Get the first key\n  local first_key=$(head\
    \ -n 1 $1 | cut -d, -f1)\n  # Get the first value\n  local first_value=$(head\
    \ -n 1 $1 | cut -d, -f2)\n  # Get the first key's case\n  local first_key_case=$(echo\
    \ $first_key | tr '[:upper:]' '[:lower:]')\n  # Get the first value's case\n \
    \ local first_value_case=$(echo $first_value | tr '[:upper:]' '[:lower:]')\n \
    \ # If the first key's case is the same as the first key, then the first key is\
    \ lowercase\n  if [ \"$first_key\" == \"$first_key_case\" ]; then\n    # If the\
    \ first value's case is the same as the first value, then the first value is lowercase\n\
    \    if [ \"$first_value\" == \"$first_value_case\" ]; then\n      # If the first\
    \ key and first value are lowercase, then check the rest of the keys and values\n\
    \      while read line; do\n        # Get the key\n        local key=$(echo $line\
    \ | cut -d, -f1)\n        # Get the value\n        local value=$(echo $line |\
    \ cut -d, -f2)\n        # Get the key's case\n        local key_case=$(echo $key\
    \ | tr '[:upper:]' '[:lower:]')\n        # Get the value's case\n        local\
    \ value_case=$(echo $value | tr '[:upper:]' '[:lower:]')\n        # If the key's\
    \ case is not the same as the key, then the key is not lowercase\n        if [\
    \ \"$key\" != \"$key_case\" ]; then\n          echo \"False\"\n          return\n\
    \        fi\n        # If the value's case is not the same as the value, then\
    \ the value is not lowercase\n        if [ \"$value\" != \"$value_case\" ]; then\n\
    \          echo \"False\"\n          return\n        fi\n      done < $1\n   \
    \   echo \"True\"\n      return\n    fi\n  fi\n  # If the first key's case is\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'head: cannot open ''p,pineapple\nb,banana'' for reading: No such file or
    directory

    head: cannot open ''p,pineapple\nb,banana'' for reading: No such file or directory

    /tmp/tmpm10n4doa.sh: line 13: p,pineapple\nb,banana: No such file or directory

    '
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    #\n    # Your code here\n    #\n\
    \    echo \"Not yet implemented\"\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    local -A dict\n    local key\n\
    \    local value\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local\
    \ -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n\
    \    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local\
    \ -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n\
    \    local -i z=0\n    local -i A=0\n    local -i B=0\n    local -i C=0\n    local\
    \ -i D=0\n    local -i E=0\n    local -i F=0\n    local -i G=0\n    local -i H=0\n\
    \    local -i I=0\n    local -i J=0\n    local -i K=0\n    local -i L=0\n    local\
    \ -i M=0\n    local -i N=0\n    local -i O=0\n    local -i P=0\n    local -i Q=0\n\
    \    local -i R=0\n    local -i S=0\n    local -i T=0\n    local -i U=0\n    local\
    \ -i V=0\n    local -i W=0\n    local -i X=0\n    local -i Y=0\n    local -i Z=0\n\
    \    local -i upper=0\n    local -i lower=0\n    local -i mixed=0\n    local -i\
    \ empty=0\n    local -i total=0\n    local -i result=0\n    local -i return_code=0\n\
    \    local -i return_code_2=0\n    local -i return_code_3=0\n    local -i return_code_4=0\n\
    \    local -i return_code_5=0\n    local -i return_code_6=0\n    local -i return_code_7=0\n\
    \    local -i return_code_8=0\n    local -\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n# check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return True.\n#\n# $1 is a two column CSV\
    \ in key,value order\ncheck_dict_case() {\n    if [ -z \"$1\" ]; then\n      \
    \  echo \"False\"\n        return\n    fi\n    # Check if all keys are lower case\n\
    \    if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | tr -d '[:digit:]'\
    \ | tr -d ' ' | sort | uniq -c | wc -l)\" -eq 1 ]; then\n        echo \"True\"\
    \n        return\n    fi\n    # Check if all keys are upper case\n    if [ \"\
    $(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]' | tr -d '[:digit:]' |\
    \ tr -d ' ' | sort | uniq -c | wc -l)\" -eq 1 ]; then\n        echo \"True\"\n\
    \        return\n    fi\n    echo \"False\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995668
