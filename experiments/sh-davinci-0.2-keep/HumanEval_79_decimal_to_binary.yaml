name: HumanEval_79_decimal_to_binary
language: humaneval_to_bash.py
prompt: "#!/bin/bash\n# You will be given a number in decimal form and your task is\
  \ to convert it to\n# binary format. The function should return a string, with each\
  \ character representing a binary\n# number. Each character in the string will be\
  \ '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning\
  \ and at the end of the string.\n# The extra characters are there to help with the\
  \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
  \   # returns \"db100000db\"\n#\n# $1 is an integer\ndecimal_to_binary() {\n"
tests: "}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
  \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\"\
  ) = \"db1111db\" ]]\n}\n\nrun_test"
completions: ["  local dec=$1\n  local bin=\"\"\n  while [ $dec -gt 0 ]; do\n    bin=\"\
    $((dec % 2))$bin\"\n    dec=$((dec / 2))\n  done\n  echo \"db$bin\"", "    local\
    \ number=$1\n    local binary=\"\"\n    local remainder=0\n    while [ $number\
    \ -gt 0 ]; do\n        remainder=$((number % 2))\n        number=$((number / 2))\n\
    \        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"", "  echo\
    \ \"obase=2;$1\" | bc | sed 's/^/db/' | sed 's/$/db/'", "  local number=$1\n \
    \ local binary=\"\"\n  local remainder\n  while [ $number -gt 0 ]; do\n    remainder=$((number\
    \ % 2))\n    number=$((number / 2))\n    binary=\"$remainder$binary\"\n  done\n\
    \  echo \"db$binary\"", "  local num=$1\n  local binary=\"\"\n  while [ $num -gt\
    \ 0 ]; do\n    binary=\"$((num % 2))$binary\"\n    num=$((num / 2))\n  done\n\
    \  echo \"db$binary\"", "    local n=$1\n    local result=\"\"\n    while [ $n\
    \ -gt 0 ]; do\n        result=\"$((n%2))$result\"\n        n=$((n/2))\n    done\n\
    \    echo \"db$result\"", "  local num=$1\n  local result=\"\"\n  local remainder=0\n\
    \  while [ $num -gt 0 ]; do\n    remainder=$(( $num % 2 ))\n    num=$(( $num /\
    \ 2 ))\n    result=\"$remainder$result\"\n  done\n  echo \"db$result\"", "   \
    \ local num=$1\n    local binary=\"\"\n    local remainder\n    while [ $num -gt\
    \ 0 ]; do\n        remainder=$(( $num % 2 ))\n        num=$(( $num / 2 ))\n  \
    \      binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"", "  local\
    \ decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n    binary=\"\
    $((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n  echo \"db$binary\"",
  '    echo "db$(echo "obase=2;$1" | bc)db"', '  echo "db$(echo "obase=2;$1" | bc)db"',
  "  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  local result=0\n\
    \  while [ $decimal -gt 0 ]; do\n    remainder=$((decimal % 2))\n    decimal=$((decimal\
    \ / 2))\n    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"", "  local\
    \ number=$1\n  local binary=\"\"\n  local remainder\n  while [ $number -gt 0 ];\
    \ do\n    remainder=$((number % 2))\n    number=$((number / 2))\n    binary=\"\
    $remainder$binary\"\n  done\n  echo \"db$binary\"", "  local dec=$1\n  local bin=\"\
    \"\n  while [ $dec -gt 0 ]; do\n    bin=\"$(( $dec % 2 ))$bin\"\n    dec=$(( $dec\
    \ / 2 ))\n  done\n  echo \"db$bin\"", "  local number=$1\n  local binary=\"\"\n\
    \  while [ $number -gt 0 ]; do\n    local remainder=$((number % 2))\n    number=$((number\
    \ / 2))\n    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"", "  local\
    \ binary=\"\"\n  local i=0\n  local n=$1\n  while [ $n -gt 0 ]; do\n    ((i =\
    \ n % 2))\n    ((n = n / 2))\n    binary=\"$i$binary\"\n  done\n  echo \"db$binary\"",
  "  local -i num=$1\n  local -i rem\n  local -i quotient\n  local -i i=0\n  local\
    \ -i j\n  local -a binary\n  local -a binary_rev\n  local -a binary_final\n  local\
    \ -i len\n  local -i len_rev\n  local -i len_final\n  local -i len_diff\n  local\
    \ -i len_diff_rev\n  local -i len_diff_final\n  local -i len_diff_final_rev\n\
    \  local -i len_diff_final_rev_rev\n  local -i len_diff_final_rev_rev_rev\n  local\
    \ -i len_diff_final_rev_rev_rev_rev\n  local -i len_diff_final_rev_rev_rev_rev_rev\n\
    \  local -i len_diff_final_rev_rev_rev_rev_rev_rev\n  local -i len_diff_final_rev_rev_rev_rev_rev_rev_rev\n\
    \  local -i len_diff_final_rev_rev_rev_rev_rev_rev_rev_rev\n  local -i len_diff_final_rev_rev_rev_rev_rev_rev_rev_rev_rev\n\
    \  local -i len_diff_final_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\n  local -i\
    \ len_diff_final_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\n  local -i len_diff_final_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\n\
    \  local -i len_diff_final_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\n\
    \  local -i len_diff_final_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\n\
    \  local -i len_diff_final_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\n\
    \  local -i len_diff_final_rev_rev_", "  local num=$1\n  local bin=\"\"\n  while\
    \ [ $num -gt 0 ]; do\n    bin=\"$((num % 2))$bin\"\n    num=$((num / 2))\n  done\n\
    \  echo \"db$bin\"", "  local dec=$1\n  local bin=\"\"\n  while [ $dec -gt 0 ];\
    \ do\n    bin=\"$((dec%2))$bin\"\n    dec=$((dec/2))\n  done\n  echo \"db$bin\"",
  "  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n    binary=\"\
    $((number % 2))$binary\"\n    number=$((number / 2))\n  done\n  echo \"db$binary\""]
stop_tokens:
- "\n}"
