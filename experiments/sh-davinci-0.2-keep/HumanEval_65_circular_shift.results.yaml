language: sh
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local right=$((digits - shift))\n\
    \        local left=$((digits - right))\n        local right=$(echo $x | cut -c\
    \ $left-$digits)\n        local left=$(echo $x | cut -c 1-$left)\n        echo\
    \ $right$left\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits\
    \ ]; then\n        echo \"$x\" | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo \"$y$z\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    local result=\"\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n\
    \        result=\"$(reverse_digits \"$x\")\"\n    else\n        local i=0\n  \
    \      while [ \"$i\" -lt \"$digits\" ]; do\n            local j=$(( (i + shift)\
    \ % digits ))\n            result=\"$result${x:$j:1}\"\n            i=$(( i +\
    \ 1 ))\n        done\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local shift=$((digits - shift))\n    local x=$(echo\
    \ $x | rev)\n    local x=$(echo $x | cut -c $shift- | rev)\n    local x=$(echo\
    \ $x | rev)\n    echo $x\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: byte/character positions are numbered from 1

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1659994110
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [[ $shift -gt $digits ]]; then\n\
    \    echo $x | rev\n  else\n    local x_str=$(echo $x | rev)\n    local x_str_len=$(echo\
    \ $x_str | wc -c)\n    local x_str_len=$((x_str_len - 1))\n    local x_str_shift=$(echo\
    \ $x_str | cut -c $shift-$x_str_len)\n    local x_str_shift_len=$(echo $x_str_shift\
    \ | wc -c)\n    local x_str_shift_len=$((x_str_shift_len - 1))\n    local x_str_shift_rev=$(echo\
    \ $x_str_shift | rev)\n    local x_str_shift_rev_len=$(echo $x_str_shift_rev |\
    \ wc -c)\n    local x_str_shift_rev_len=$((x_str_shift_rev_len - 1))\n    local\
    \ x_str_shift_rev_cut=$(echo $x_str_shift_rev | cut -c 1-$((x_str_shift_rev_len\
    \ - shift)))\n    local x_str_shift_rev_cut_len=$(echo $x_str_shift_rev_cut |\
    \ wc -c)\n    local x_str_shift_rev_cut_len=$((x_str_shift_rev_cut_len - 1))\n\
    \    local x_str_shift_rev_cut_rev=$(echo $x_str_shift_rev_cut | rev)\n    local\
    \ x_str_shift_rev_cut_rev_len=$(echo $x_str_shift_rev_cut_rev | wc -c)\n    local\
    \ x_str_shift_rev_cut_rev_len=$((x_str_shift_rev_cut_rev_len - 1))\n    local\
    \ x_str_shift_rev_cut_rev_cut=$(echo $x_str_shift_rev_cut_rev | cut -c 1-$((x\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4qdwc0wr.sh: line 35: unexpected EOF while looking for matching
    `)''

    /tmp/tmp4qdwc0wr.sh: line 52: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo \"$x\"\
    \ | wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo \"$x\" | rev\n  else\n    local right=$((digits - shift))\n    local\
    \ left=$((digits - right))\n    local right=$(echo \"$x\" | cut -c $shift-$digits)\n\
    \    local left=$(echo \"$x\" | cut -c 1-$left)\n    echo \"$right$left\"\n  fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo \"$x\"\
    \ | wc -c)\n  if [ $shift -gt $digits ]; then\n    echo \"$x\" | rev\n  else\n\
    \    local right=$(echo \"$x\" | cut -c $shift- | rev)\n    local left=$(echo\
    \ \"$x\" | cut -c 1-$((digits - shift)) | rev)\n    echo \"$right$left\"\n  fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    if (( shift > digits )); then\n        echo $x | rev\n    else\n        local\
    \ y=$(( x % (10 ** shift) ))\n        local z=$(( x / (10 ** shift) ))\n     \
    \   echo $(( y * (10 ** (digits - shift)) + z ))\n    fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local reversed=$(echo \"$x\" | rev)\n    if (( shift >=\
    \ digits )); then\n        echo \"$reversed\"\n    else\n        local shifted=$(echo\
    \ \"$reversed\" | cut -c 1-$shift)\n        local rest=$(echo \"$reversed\" |\
    \ cut -c $((shift+1))-$digits)\n        echo \"$rest$shifted\"\n    fi\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  if [ $shift -gt $digits ]; then\n    echo $x | rev\n  else\n    local\
    \ y=$(echo $x | rev)\n    local z=$(echo $y | cut -c $shift-$digits)\n    local\
    \ w=$(echo $y | cut -c 1-$((digits-shift)))\n    echo $z$w\n  fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local first=$(echo $x | cut -c\
    \ 1-$shift)\n        local last=$(echo $x | cut -c $((shift + 1))-$digits)\n \
    \       echo $last$first\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local result=\"\"\n    if (( shift >= digits )); then\n        for (( i =\
    \ digits - 1; i >= 0; i-- )); do\n            result+=${x:$i:1}\n        done\n\
    \    else\n        for (( i = shift; i < digits; i++ )); do\n            result+=${x:$i:1}\n\
    \        done\n        for (( i = 0; i < shift; i++ )); do\n            result+=${x:$i:1}\n\
    \        done\n    fi\n    echo $result\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local n=$(echo $x | wc -c)\n\
    \  local m=$((n - 1))\n  local y=$(echo $x | rev)\n  if [ $shift -gt $m ]; then\n\
    \    echo $y\n  else\n    local z=$(echo $y | cut -c 1-$shift)\n    local w=$(echo\
    \ $y | cut -c $((shift + 1))-$n)\n    echo $w$z\n  fi\n}\n\ncandidate() {\n  \
    \  circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    local result=\"\"\n    if (( shift >= digits )); then\n        for\
    \ (( i=digits-1; i>=0; i-- )); do\n            result+=\"${x:$i:1}\"\n       \
    \ done\n    else\n        result=\"${x:$shift:$digits}\"\n        result+=\"${x:0:$shift}\"\
    \n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [[ $shift -gt $digits ]]; then\n\
    \    echo $x | rev\n  else\n    local y=$((x % 10**shift))\n    local z=$((x /\
    \ 10**shift))\n    echo $y$z\n  fi\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local right=$((digits - shift))\n\
    \        local left=$((digits - right))\n        local right=$(echo $x | cut -c\
    \ $shift-$digits)\n        local left=$(echo $x | cut -c 1-$left)\n        echo\
    \ $right$left\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local result=\"\"\n    if [ $shift -gt $digits ]; then\n  \
    \      result=$(echo $x | rev)\n    else\n        result=$(echo $x | cut -c $shift-$digits)$(echo\
    \ $x | cut -c 1-$((shift-1)))\n    fi\n    echo $result\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    if [ $shift -gt $digits ]; then\n        echo $x | rev\n    else\n      \
    \  echo $x | cut -c $shift- | rev | cut -c $shift- | rev\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    local y=$(echo $x | rev)\n    local y=$(echo $y | cut -c 1-$shift)\n    local\
    \ y=$(echo $y | rev)\n    local y=$(echo $x | cut -c $((shift + 1))-$digits)$y\n\
    \    echo $y\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo \"$x\"\
    \ | wc -c)\n  local digits=$((digits - 1))\n  if [[ $shift -gt $digits ]]; then\n\
    \    echo \"$x\" | rev\n  else\n    local right=$((x % 10**shift))\n    local\
    \ left=$((x / 10**shift))\n    echo \"$right$left\"\n  fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local x_rev=$(reverse_digits $x)\n    local x_rev_shifted=$(shift_digits\
    \ $x_rev $shift)\n    local x_shifted=$(reverse_digits $x_rev_shifted)\n    echo\
    \ $x_shifted\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6pmha408.sh: line 16: reverse_digits: command not found

    /tmp/tmp6pmha408.sh: line 17: shift_digits: command not found

    /tmp/tmp6pmha408.sh: line 18: reverse_digits: command not found

    '
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits\
    \ ]; then\n        echo \"$x\" | rev\n    else\n        local right=$((x % 10**shift))\n\
    \        local left=$((x / 10**shift))\n        echo \"$right$left\"\n    fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local right=$((x % 10**shift))\n\
    \        local left=$((x / 10**shift))\n        echo $right$left\n    fi\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local shift=$((shift % digits))\n  local x=$(echo $x | rev)\n  local\
    \ x=$(echo $x | cut -c-$shift)\n  local x=$(echo $x | rev)\n  local x=$(echo $x\
    \ | cut -c-$((digits - shift)))\n  local x=$(echo $x | rev)\n  echo $x\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  local digits_reversed=$(echo $x |\
    \ rev)\n  local digits_shifted=$(echo $digits_reversed | cut -c 1-$shift)\n  local\
    \ digits_unshifted=$(echo $digits_reversed | cut -c $((shift + 1))-$digits)\n\
    \  local digits_shifted_reversed=$(echo $digits_shifted | rev)\n  local digits_unshifted_reversed=$(echo\
    \ $digits_unshifted | rev)\n  local digits_shifted_unshifted_reversed=$(echo $digits_shifted_reversed$digits_unshifted_reversed)\n\
    \  local digits_shifted_unshifted=$(echo $digits_shifted_unshifted_reversed |\
    \ rev)\n  echo $digits_shifted_unshifted\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local shift=$((shift % digits))\n    local left=${x:0:digits-shift}\n   \
    \ local right=${x:digits-shift}\n    echo \"$right$left\"\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local x=$(echo $x | rev)\n  \
    \      local x=$(echo $x | cut -c 1-$shift)\n        local x=$(echo $x | rev)\n\
    \        local x=$(echo $x | rev)\n        local x=$(echo $x | cut -c $shift-)\n\
    \        echo $x$x\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local y=$(echo $x | cut -c $shift-$digits)\n        local z=$(echo\
    \ $x | cut -c 1-$(($shift - 1)))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift\
    \ % digits))\n    if [ $shift -eq 0 ]; then\n        echo \"$x\"\n    else\n \
    \       local left=$(echo \"$x\" | cut -c 1-$shift)\n        local right=$(echo\
    \ \"$x\" | cut -c $((shift + 1))-$digits)\n        echo \"$right$left\"\n    fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local y=$((x % 10**shift))\n        local z=$((x / 10**shift))\n\
    \        echo $y$z\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local x=$((x / 10**shift))\n        echo $y$x\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo $x | rev\n    else\n        local x=$(echo $x | rev)\n\
    \        local x=$(echo $x | cut -c 1-$shift)\n        local x=$(echo $x | rev)\n\
    \        local x=$(echo $x | cut -c $((shift + 1))-)\n        echo $x$(echo $x\
    \ | cut -c 1-$shift)\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    if [ $shift -gt $digits ]; then\n        echo $x | rev\n    else\n      \
    \  local y=$((x % 10**shift))\n        local z=$((x / 10**shift))\n        echo\
    \ $y$z\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    if [ $shift -gt $digits ]; then\n        echo $x | rev\n    else\n      \
    \  local right=$(echo $x | cut -c $shift-$digits)\n        local left=$(echo $x\
    \ | cut -c 1-$((shift-1)))\n        echo $right$left\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local y=$((x % 10**shift))\n        local z=$((x / 10**shift))\n\
    \        echo $y$z\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local y=$((x % 10**shift))\n        local z=$((x / 10**shift))\n\
    \        echo $y$z\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local result=\"\"\n    if [ $shift -gt $digits ]; then\n\
    \        result=$(echo \"$x\" | rev)\n    else\n        local first=$(echo \"\
    $x\" | cut -c 1-$shift)\n        local last=$(echo \"$x\" | cut -c $((shift+1))-$digits)\n\
    \        result=\"$last$first\"\n    fi\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local -i x=$1\n  local -i shift=$2\n  local -i digits=${#x}\n\
    \  local -i i\n  local -i y\n  local -i z\n  local -i digit\n  local -i result=0\n\
    \  local -i multiplier=1\n  if (( shift >= digits )); then\n    for (( i=0; i<digits;\
    \ i++ )); do\n      digit=$(( x % 10 ))\n      x=$(( x / 10 ))\n      result=$((\
    \ result + digit * multiplier ))\n      multiplier=$(( multiplier * 10 ))\n  \
    \  done\n  else\n    y=$(( x % 10 ** shift ))\n    z=$(( x / 10 ** shift ))\n\
    \    for (( i=0; i<digits; i++ )); do\n      digit=$(( z % 10 ))\n      z=$((\
    \ z / 10 ))\n      result=$(( result + digit * multiplier ))\n      multiplier=$((\
    \ multiplier * 10 ))\n    done\n    for (( i=0; i<shift; i++ )); do\n      digit=$((\
    \ y % 10 ))\n      y=$(( y / 10 ))\n      result=$(( result + digit * multiplier\
    \ ))\n      multiplier=$(( multiplier * 10 ))\n    done\n  fi\n  echo $result\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo \"$x\" | rev\n    else\n        local right=$((x % 10**shift))\n\
    \        local left=$((x / 10**shift))\n        echo \"$right$left\"\n    fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local right=$(echo $x | cut -c $shift-$digits)\n        local\
    \ left=$(echo $x | cut -c 1-$(($digits - $shift)))\n        echo $right$left\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local result=''\n    if (( shift >= digits )); then\n        for (( i=digits-1;\
    \ i>=0; i-- )); do\n            result+=${x:$i:1}\n        done\n    else\n  \
    \      result=${x:$shift:$digits}\n        result+=${x:0:$shift}\n    fi\n   \
    \ echo $result\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -ge $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local right=$(echo $x | cut -c $shift- )\n        local left=$(echo\
    \ $x | cut -c 1-$((shift-1)) )\n        echo $right$left\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local n=$(echo \"$x\" |\
    \ wc -c)\n  local n=$((n-1))\n  local shift=$((shift%n))\n  local x=$(echo \"\
    $x\" | rev)\n  local x=$(echo \"$x\" | cut -c-$shift)\n  local x=$(echo \"$x\"\
    \ | rev)\n  local x=$(echo \"$x\" | cut -c-$n)\n  echo \"$x\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    if [ $shift -ge $digits ]; then\n        echo \"$x\" |\
    \ rev\n    else\n        local first=$(echo \"$x\" | cut -c 1-$shift)\n      \
    \  local second=$(echo \"$x\" | cut -c $((shift+1))-$digits)\n        echo \"\
    $second$first\"\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10 ** shift))\n\
    \        local z=$((x / 10 ** shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo \"$x\" |\
    \ rev\n    else\n        local first=$(echo \"$x\" | cut -c $shift-$digits)\n\
    \        local second=$(echo \"$x\" | cut -c 1-$((shift-1)))\n        echo \"\
    $first$second\"\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n        echo \"$x\" | rev\n\
    \    else\n        local y=\"$(echo \"$x\" | cut -c \"$shift-$digits\")\"\n  \
    \      local z=\"$(echo \"$x\" | cut -c 1-\"$((shift - 1))\")\"\n        echo\
    \ \"$y$z\"\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local x=$(echo $x | rev)\n  \
    \      local x=$(echo $x | cut -c 1-$shift)\n        local x=$(echo $x | rev)\n\
    \        local x=$(echo $x | rev)\n        local x=$(echo $x | cut -c $shift-)\n\
    \        echo $x$x\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    if (( shift > digits )); then\n        echo $x | rev\n    else\n        local\
    \ y=$(( x % 10 ** shift ))\n        local z=$(( x / 10 ** shift ))\n        echo\
    \ $y$z\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    if (( shift >= digits )); then\n        echo \"$x\" | rev\n    else\n\
    \        echo \"${x:shift:digits}${x:0:shift}\"\n    fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local digits_to_shift=$((digits\
    \ - shift))\n    local digits_to_shift=$((digits_to_shift % digits))\n    local\
    \ digits_to_shift=$((digits - digits_to_shift))\n    local digits_to_shift=$((digits_to_shift\
    \ % digits))\n    local digits_to_shift=$((digits - digits_to_shift))\n    local\
    \ digits_to_shift=$((digits_to_shift % digits))\n    local digits_to_shift=$((digits\
    \ - digits_to_shift))\n    local digits_to_shift=$((digits_to_shift % digits))\n\
    \    local digits_to_shift=$((digits - digits_to_shift))\n    local digits_to_shift=$((digits_to_shift\
    \ % digits))\n    local digits_to_shift=$((digits - digits_to_shift))\n    local\
    \ digits_to_shift=$((digits_to_shift % digits))\n    local digits_to_shift=$((digits\
    \ - digits_to_shift))\n    local digits_to_shift=$((digits_to_shift % digits))\n\
    \    local digits_to_shift=$((digits - digits_to_shift))\n    local digits_to_shift=$((digits_to_shift\
    \ % digits))\n    local digits_to_shift=$((digits - digits_to_shift))\n    local\
    \ digits_to_shift=$((digits_to_shift % digits))\n    local digits_to_shift=$((digits\
    \ - digits_to_shift))\n    local digits_to_shift=$((digits_to_shift % digits))\n\
    \    local digits_to_shift=$((digits - digits_to_shift))\n    local digits_to_shift=$((digits_to_shift\
    \ % digits))\n    local digits_to_shift=$((digits - digits_to_shift))\n    local\
    \ digits_to_shift=$((digits_to_shift % digits))\n    local digits_to_shift=$((digits\
    \ - digits_to_shift))\n    local\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    local result=\"\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n\
    \        result=\"$(reverse_digits \"$x\")\"\n    else\n        result=\"$(echo\
    \ \"$x\" | cut -c \"$shift-$digits\")$(echo \"$x\" | cut -c 1-\"$((shift - 1))\"\
    )\"\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    if [ $# -ne 2 ]; then\n        echo \"Usage: circular_shift\
    \ <integer> <integer>\"\n        return 1\n    fi\n    local x=$1\n    local shift=$2\n\
    \    local digits=$(echo $x | wc -c)\n    if [ $shift -ge $digits ]; then\n  \
    \      echo $x | rev\n    else\n        local right=$(echo $x | rev | cut -c 1-$shift\
    \ | rev)\n        local left=$(echo $x | rev | cut -c $((shift+1))- | rev)\n \
    \       echo $right$left\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits\
    \ ]; then\n        echo \"$x\" | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo \"$y$z\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local y=$((x % 10 ** shift))\n    local z=$((x\
    \ / 10 ** shift))\n    echo $y$z\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local y=$((x % 10**shift))\n        local z=$((x / 10**shift))\n\
    \        echo $y$z\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n\tlocal x=$1\n\tlocal shift=$2\n\tlocal digits=$(echo $x |\
    \ wc -c)\n\tlocal digits=$((digits - 1))\n\tlocal x=$(echo $x | rev)\n\tif [ $shift\
    \ -gt $digits ]; then\n\t\techo $x\n\telse\n\t\tlocal x=$(echo $x | cut -c -$shift)\n\
    \t\tlocal x=$(echo $x | rev)\n\t\tlocal x=$(echo $x$(echo $x | rev | cut -c $shift-))\n\
    \t\techo $x\n\tfi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    local left=$((digits - shift))\n    local right=$((digits - left))\n    local\
    \ left=$(echo $x | cut -c 1-$left)\n    local right=$(echo $x | cut -c $right-)\n\
    \    echo $right$left\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: byte/character positions are numbered from 1

    Try ''cut --help'' for more information.

    cut: byte/character positions are numbered from 1

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    if [[ $1 -eq 0 ]]; then\n        echo \"0\"\n        return\n\
    \    fi\n    if [[ $2 -eq 0 ]]; then\n        echo \"$1\"\n        return\n  \
    \  fi\n    local digits=$(echo \"$1\" | sed 's/\\(.\\)/\\1 /g')\n    local num_digits=$(echo\
    \ \"$digits\" | wc -w)\n    local shift=$(( $2 % $num_digits ))\n    if [[ $shift\
    \ -eq 0 ]]; then\n        echo \"$digits\"\n        return\n    fi\n    local\
    \ result=$(echo \"$digits\" | cut -d ' ' -f $shift- | tr -d '\\n')\n    local\
    \ result=$(echo \"$result $(echo \"$digits\" | cut -d ' ' -f -$(( $shift - 1 )))\"\
    \ | tr -d '\\n')\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo \"$y$z\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local len=${#x}\n  local\
    \ shift=$((shift % len))\n  if ((shift == 0)); then\n    echo \"$x\"\n  else\n\
    \    echo \"${x:$shift:$len}${x:0:$shift}\"\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local result=\"\"\n    if (( shift > digits )); then\n        for (( i =\
    \ digits - 1; i >= 0; i-- )); do\n            result+=${x:$i:1}\n        done\n\
    \    else\n        result=${x:shift:digits}${x:0:shift}\n    fi\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local reversed=$(echo $x | rev)\n    if [ $shift -gt $digits\
    \ ]; then\n        echo $reversed\n    else\n        local shifted=$(echo $reversed\
    \ | cut -c $shift-$digits)\n        local prefix=$(echo $reversed | cut -c 1-$((shift-1)))\n\
    \        echo $shifted$prefix\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local result=\"\"\n    if [ $shift -ge $digits ]; then\n  \
    \      result=$(echo $x | rev)\n    else\n        local right=$(echo $x | cut\
    \ -c $shift- )\n        local left=$(echo $x | cut -c 1-$((shift-1)) )\n     \
    \   result=$right$left\n    fi\n    echo $result\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local right=$((x % 10**shift))\n\
    \        local left=$((x / 10**shift))\n        echo $right$left\n    fi\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local right=$((digits - shift))\n\
    \        local left=$((digits - right))\n        local right=$(echo $x | cut -c\
    \ $right-$digits)\n        local left=$(echo $x | cut -c 1-$left)\n        echo\
    \ $right$left\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ -n \"$x\" | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo -n \"\
    $x\" | rev\n    else\n        echo -n \"$x\" | tail -c $shift\n        echo -n\
    \ \"$x\" | head -c $((digits - shift))\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10 ** shift))\n\
    \        local z=$((x / 10 ** shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10 ** shift))\n\
    \        local z=$((x / 10 ** shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    local x=$(echo $x | rev)\n    local x=$(echo $x | cut -c1-$shift)\n    local\
    \ x=$(echo $x | rev)\n    local x=$(echo $x | rev)\n    local x=$(echo $x | cut\
    \ -c1-$shift)\n    local x=$(echo $x | rev)\n    echo $x\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local left=$((x / 10 ** shift))\n\
    \        local right=$((x % 10 ** shift))\n        echo $((right * 10 ** digits\
    \ + left))\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n        echo \"$x\" | rev\n\
    \    else\n        local y=\"$(echo \"$x\" | rev)\"\n        local z=\"$(echo\
    \ \"$y\" | cut -c 1-\"$shift\")\"\n        local w=\"$(echo \"$y\" | cut -c \"\
    $((shift + 1))\"-)\"\n        echo \"$w$z\" | rev\n    fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local result=\"\"\n    if (( shift >= digits )); then\n        for (( i =\
    \ digits - 1; i >= 0; i-- )); do\n            result+=${x:$i:1}\n        done\n\
    \    else\n        for (( i = shift; i < digits; i++ )); do\n            result+=${x:$i:1}\n\
    \        done\n        for (( i = 0; i < shift; i++ )); do\n            result+=${x:$i:1}\n\
    \        done\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local result=\"\"\n    if [ $shift -gt $digits ]; then\n        result=$(reverse\
    \ $x)\n    else\n        result=${x:$shift:$digits}${x:0:$shift}\n    fi\n   \
    \ echo $result\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo \"$x\"\
    \ | wc -c)\n  local result=\"\"\n  if [ $shift -ge $digits ]; then\n    result=$(echo\
    \ \"$x\" | rev)\n  else\n    local right=$(echo \"$x\" | cut -c $shift- )\n  \
    \  local left=$(echo \"$x\" | cut -c 1-$((shift-1)) )\n    result=\"$right$left\"\
    \n  fi\n  echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10 ** shift))\n\
    \        local z=$((x / 10 ** shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local y=$((x % 10**shift))\n    local z=$((x /\
    \ 10**shift))\n    echo $y$z\n  fi\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local right_digits=$((digits\
    \ - shift))\n        local right=$(echo $x | cut -c $shift-$digits)\n        local\
    \ left=$(echo $x | cut -c 1-$shift)\n        echo $right$left\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local len=${#x}\n  local\
    \ i=0\n  local result=\"\"\n  while [ $i -lt $len ]; do\n    local digit=${x:$i:1}\n\
    \    local pos=$((i + shift))\n    if [ $pos -ge $len ]; then\n      pos=$((pos\
    \ - len))\n    fi\n    result=\"${result:0:$pos}${digit}${result:$pos}\"\n   \
    \ i=$((i + 1))\n  done\n  echo \"$result\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n        echo \"$x\" | rev\n\
    \    else\n        local right=\"${x:0:$shift}\"\n        local left=\"${x:$shift}\"\
    \n        echo \"$left$right\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo $x | rev\n    else\n        local y=$((x % 10 ** shift))\n\
    \        local z=$((x / 10 ** shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local reversed=$(echo $x | rev)\n    if [ $shift -gt $digits\
    \ ]; then\n        echo $reversed\n    else\n        local shifted=$(echo $reversed\
    \ | cut -c 1-$shift)\n        local rest=$(echo $reversed | cut -c $((shift+1))-$digits)\n\
    \        echo $shifted$rest\n    fi\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local y=$((x % 10**shift))\n    local z=$((x /\
    \ 10**shift))\n    echo $y$z\n  fi\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n        echo \"$x\" | rev\n\
    \    else\n        local y=\"$(echo \"$x\" | rev)\"\n        echo \"${y:0:$shift}${y:$shift}\"\
    \ | rev\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=${#x}\n  local\
    \ result=\"\"\n  if [ $shift -gt $digits ]; then\n    result=$(reverse_digits\
    \ $x)\n  else\n    local right=$((x % 10**shift))\n    local left=$((x / 10**shift))\n\
    \    result=\"$right$left\"\n  fi\n  echo $result\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local reversed=$(echo \"$x\" | rev)\n    if [ $shift -gt\
    \ $digits ]; then\n        echo \"$reversed\"\n    else\n        local result=$(echo\
    \ \"$reversed\" | cut -c $shift-$digits)\n        result+=$(echo \"$reversed\"\
    \ | cut -c 1-$((shift-1)))\n        echo \"$result\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if (( shift > digits )); then\n        echo $x | rev\n    else\n\
    \        local first=$(echo $x | cut -c 1-$shift)\n        local last=$(echo $x\
    \ | cut -c $((shift+1))-$digits)\n        echo $last$first\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ -n \"$x\" | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo -n \"\
    $x\" | rev\n    else\n        local y=$(echo -n \"$x\" | tail -c $shift)\n   \
    \     local z=$(echo -n \"$x\" | head -c $((digits - shift)))\n        echo -n\
    \ \"$y$z\"\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    local x=$(echo $x | rev)\n    local x=$(echo $x | cut -c 1-$shift)\n    local\
    \ x=$(echo $x | rev)\n    local x=$(echo $x | cut -c $((shift + 1))-)\n    echo\
    \ $x$x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local len=${#x}\n\
    \    local shift=$((shift % len))\n    if ((shift == 0)); then\n        echo \"\
    $x\"\n    else\n        local right=${x:0:len-shift}\n        local left=${x:len-shift:shift}\n\
    \        echo \"$left$right\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    if [[ $1 -lt 0 ]]; then\n        echo \"Error: $1 is not\
    \ a positive integer.\"\n        return 1\n    fi\n    if [[ $2 -lt 0 ]]; then\n\
    \        echo \"Error: $2 is not a positive integer.\"\n        return 1\n   \
    \ fi\n    if [[ $1 -eq 0 ]]; then\n        echo \"0\"\n        return 0\n    fi\n\
    \    local digits=$(echo $1 | sed 's/[0-9]//g')\n    if [[ -n $digits ]]; then\n\
    \        echo \"Error: $1 is not an integer.\"\n        return 1\n    fi\n   \
    \ local num_digits=$(echo $1 | wc -c)\n    local shift=$2\n    if [[ $shift -ge\
    \ $num_digits ]]; then\n        shift=$((shift % num_digits))\n    fi\n    local\
    \ result=$(echo $1 | rev | cut -c $shift- | rev)\n    echo $result$(echo $1 |\
    \ rev | cut -c 1-$((shift - 1)) | rev)\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local right=$((x % 10**shift))\n    local left=$((x\
    \ / 10**shift))\n    echo $right$left\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\n  local digits=\"\
    ${#x}\"\n  local result=\"\"\n  if (( shift > digits )); then\n    for (( i =\
    \ digits - 1; i >= 0; i-- )); do\n      result=\"${result}${x:$i:1}\"\n    done\n\
    \  else\n    result=\"${x:$shift}${x:0:$shift}\"\n  fi\n  echo \"$result\"\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local shift=$((shift % digits))\n  local digits=$((digits - 1))\n\
    \  local x=$(echo $x | rev)\n  local x=$(echo $x | cut -c -$shift)\n  local x=$(echo\
    \ $x | rev)\n  local x=$(echo $x | cut -c $shift-)\n  local x=$(echo $x | rev)\n\
    \  echo $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local right=$(echo $x | cut -c $shift- )\n        local left=$(echo\
    \ $x | cut -c 1-$((shift-1)) )\n        echo $right$left\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits\
    \ ]; then\n        echo \"$x\" | rev\n    else\n        local right=$((digits\
    \ - shift))\n        local left=$((digits - right))\n        local right=$(echo\
    \ \"$x\" | cut -c 1-$right)\n        local left=$(echo \"$x\" | cut -c $left-$digits)\n\
    \        echo \"$right$left\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo $x | rev\n    else\n        local first=$(echo $x | cut\
    \ -c 1-$shift)\n        local last=$(echo $x | cut -c $((shift + 1))-)\n     \
    \   echo $last$first\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo $x | rev\n    else\n        local left=$((x / 10 ** shift))\n\
    \        local right=$((x % 10 ** shift))\n        echo $((right * 10 ** digits\
    \ + left))\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local right=$((digits - shift))\n\
    \        local left=$((digits - right))\n        local right=$(echo $x | cut -c\
    \ $left- | rev)\n        local left=$(echo $x | cut -c 1-$left)\n        echo\
    \ $right$left\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  if [ $shift -gt $digits ]; then\n    echo $x | rev\n  else\n    local\
    \ right=$(echo $x | rev | cut -c 1-$shift | rev)\n    local left=$(echo $x | rev\
    \ | cut -c $((shift+1))- | rev)\n    echo $right$left\n  fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local x=$(echo $x | rev)\n  \
    \      local x=$(echo $x | cut -c $shift-)\n        local x=$(echo $x | rev)\n\
    \        local x=$(echo $x | rev)\n        local x=$(echo $x | cut -c $shift-)\n\
    \        local x=$(echo $x | rev)\n        echo $x\n    fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local digits_to_shift=$((digits\
    \ - shift))\n    local digits_to_shift=$((digits_to_shift > 0 ? digits_to_shift\
    \ : 0))\n    local digits_to_shift=$((digits_to_shift < digits ? digits_to_shift\
    \ : digits))\n    local digits_to_shift=$((digits_to_shift > 0 ? digits_to_shift\
    \ : 0))\n    local digits_to_shift=$((digits_to_shift < digits ? digits_to_shift\
    \ : digits))\n    local digits_to_shift=$((digits_to_shift > 0 ? digits_to_shift\
    \ : 0))\n    local digits_to_shift=$((digits_to_shift < digits ? digits_to_shift\
    \ : digits))\n    local digits_to_shift=$((digits_to_shift > 0 ? digits_to_shift\
    \ : 0))\n    local digits_to_shift=$((digits_to_shift < digits ? digits_to_shift\
    \ : digits))\n    local digits_to_shift=$((digits_to_shift > 0 ? digits_to_shift\
    \ : 0))\n    local digits_to_shift=$((digits_to_shift < digits ? digits_to_shift\
    \ : digits))\n    local digits_to_shift=$((digits_to_shift > 0 ? digits_to_shift\
    \ : 0))\n    local digits_to_shift=$((digits_to_shift < digits ? digits_to_shift\
    \ : digits))\n    local digits_to_shift=$((digits_to_shift > 0 ? digits_to_shift\
    \ : 0))\n    local digits_to_shift=$((digits_to_shift < digits ? digits_to_shift\
    \ : digits))\n    local digits_to_shift=$((digits_to_shift > 0 ? digits_to_shift\
    \ : 0))\n    local digits_to_shift=$((digits_to_shift < digits ? digits_to_shift\
    \ : digits))\n    local digits_to_shift=$((digits_to_shift > 0 ? digits_to_shift\
    \ : 0))\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local first=$(echo $x | cut -c\
    \ 1-$shift)\n        local second=$(echo $x | cut -c $((shift + 1))-$digits)\n\
    \        echo $second$first\n    fi\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    if [ $shift -eq 0 ]; then\n        echo $x\n    else\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c 1-$shift)\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c $((shift + 1))-)\n        echo\
    \ $x$x\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    if [ $shift -gt $digits ]; then\n        echo $x | rev\n    else\n      \
    \  echo $x | cut -c $shift- | rev\n        echo $x | cut -c 1-$((digits - shift))\
    \ | rev\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local reversed=$(echo \"$x\" | rev)\n    if [ $shift -ge\
    \ $digits ]; then\n        echo \"$reversed\"\n    else\n        local shifted=$(echo\
    \ \"$reversed\" | cut -c $shift- | rev)\n        local first=$(echo \"$reversed\"\
    \ | cut -c 1-$((shift-1)) | rev)\n        echo \"$shifted$first\"\n    fi\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo $x | rev\n    else\n        local left=$((x / 10 ** shift))\n\
    \        local right=$((x % 10 ** shift))\n        echo $((right * 10 ** digits\
    \ + left))\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  if [ $shift -gt $digits ]; then\n    echo $x | rev\n  else\n    local\
    \ shift_digits=$(echo $x | cut -c $shift-$digits)\n    local unshift_digits=$(echo\
    \ $x | cut -c 1-$((digits-shift)))\n    echo $shift_digits$unshift_digits\n  fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local shift=$((shift % digits))\n  local result=$(echo $x | rev |\
    \ cut -c $shift- | rev)\n  echo $result\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local x_rev=$(rev <<< \"$x\")\n    local x_rev_shifted=$(rev <<< \"${x_rev:0:shift}\"\
    )\n    local x_rev_unshifted=$(rev <<< \"${x_rev:shift}\")\n    local x_shifted=$(rev\
    \ <<< \"${x_rev_unshifted}${x_rev_shifted}\")\n    if (( shift >= digits )); then\n\
    \        echo \"$x_rev\"\n    else\n        echo \"$x_shifted\"\n    fi\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    if (( shift >= digits )); then\n        echo \"$x\" | rev\n    else\n\
    \        local y=\"${x:$shift}\"\n        local z=\"${x:0:$shift}\"\n        echo\
    \ \"$y$z\"\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  if [ $shift -gt $digits ]; then\n    echo $x | rev\n  else\n    local\
    \ y=$((x % 10**shift))\n    local z=$((x / 10**shift))\n    echo $y$z\n  fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local shift=$((shift % digits))\n    local result=$(echo $x\
    \ | cut -c $shift- | rev | cut -c $shift- | rev)\n    echo $result\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local shift=$((shift % digits))\n    if [ $shift -eq 0 ]; then\n\
    \        echo $x\n    else\n        local first=$(echo $x | cut -c1-$shift)\n\
    \        local last=$(echo $x | cut -c$((shift+1))-$digits)\n        echo $last$first\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n        echo \"$x\" | rev\n\
    \    else\n        local first=\"${x:0:$shift}\"\n        local second=\"${x:$shift}\"\
    \n        echo \"$second$first\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local right=$((digits - shift))\n    local left=$((digits\
    \ - right))\n    local right=$(echo $x | cut -c $left-$digits)\n    local left=$(echo\
    \ $x | cut -c 1-$left)\n    echo $right$left\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -ge $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local first=$(echo $x | cut -c 1-$shift)\n        local last=$(echo\
    \ $x | cut -c $((shift+1))-$digits)\n        echo $last$first\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local result=\"\"\n    if [ $shift -ge $digits ]; then\n  \
    \      result=$(echo $x | rev)\n    else\n        result=$(echo $x | cut -c $shift-$digits)$(echo\
    \ $x | cut -c 1-$(($shift-1)))\n    fi\n    echo $result\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local first=$(echo $x | cut -c 1-$shift)\n   \
    \ local last=$(echo $x | cut -c $((shift + 1))-$digits)\n    echo $last$first\n\
    \  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x / 10 ** $shift))\n\
    \        local z=$((x % 10 ** $shift))\n        echo $((z * 10 ** $digits + y))\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    local shift=$((digits - shift))\n    echo $x | rev | cut -c $shift- | rev\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local right=$(echo $x | cut -c $shift-$digits)\n        local\
    \ left=$(echo $x | cut -c 1-$((digits-shift)))\n        echo $right$left\n   \
    \ fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"\
    2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo $x | rev\n    else\n        local x=$(echo $x | rev)\n\
    \        local x=$(echo $x | cut -c 1-$shift)\n        local x=$(echo $x | rev)\n\
    \        local x=$(echo $x | cut -c $((shift + 1))-)\n        echo $x$(echo $x\
    \ | cut -c 1-$shift)\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local y=$((x % 10**shift))\n        local z=$((x / 10**shift))\n\
    \        echo $y$z\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    local shift=$((digits - shift))\n    echo $x | cut -c $shift- | rev\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local x_shift=$((x % 10**shift))\n    local x_shift=$((x_shift\
    \ * 10**(digits - shift)))\n    local x_shift=$((x_shift + x / 10**shift))\n \
    \   echo $x_shift\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local result=\"\"\n    if (( shift > digits )); then\n        for (( i=digits-1;\
    \ i>=0; i-- )); do\n            result+=${x:$i:1}\n        done\n    else\n  \
    \      result=${x:$shift}${x:0:$shift}\n    fi\n    echo $result\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10 ** shift))\n\
    \        local z=$((x / 10 ** shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\n  local digits=\"\
    ${#x}\"\n  if (( shift >= digits )); then\n    echo \"$x\" | rev\n  else\n   \
    \ echo \"${x: -shift}${x:0:$((digits - shift))}\"\n  fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    local x=$(echo $x | rev)\n    local x=$(echo $x | cut -c 1-$shift)\n    local\
    \ x=$(echo $x | rev)\n    local x=$(echo $x | cut -c $((shift + 1))-)\n    echo\
    \ $x$x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    if (( shift >= digits )); then\n        echo \"${x:0:digits}\" |\
    \ rev\n    else\n        echo \"${x:shift:digits}${x:0:shift}\"\n    fi\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local right=$((x % 10**shift))\n    local left=$((x\
    \ / 10**shift))\n    echo $right$left\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo $x | rev\n    else\n        local first=$(echo $x | cut\
    \ -c 1-$shift)\n        local second=$(echo $x | cut -c $((shift + 1))-$digits)\n\
    \        echo $second$first\n    fi\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10 ** shift))\n\
    \        local z=$((x / 10 ** shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\n  local digits=\"\
    ${#x}\"\n  if [ \"$shift\" -gt \"$digits\" ]; then\n    echo \"$x\" | rev\n  else\n\
    \    echo \"$x\" | cut -c \"$shift-$digits\" | rev | cut -c \"$shift-$digits\"\
    \ | rev\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    local result=\"\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n\
    \        result=\"$(reverse_digits \"$x\")\"\n    else\n        local right=\"\
    ${x:0:$shift}\"\n        local left=\"${x:$shift}\"\n        result=\"$left$right\"\
    \n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits_minus_one=$((digits - 1))\n  if [ $shift -gt $digits_minus_one\
    \ ]; then\n    echo $x | rev\n  else\n    local first_part=$(echo $x | cut -c\
    \ 1-$shift)\n    local second_part=$(echo $x | cut -c $((shift + 1))-$digits)\n\
    \    echo $second_part$first_part\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local shift=$((digits - shift))\n\
    \        echo $x | cut -c $shift- | rev\n        echo $x | cut -c 1-$shift | rev\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local x=$(echo $x | rev)\n  \
    \      local x=$(echo $x | cut -c $shift-)\n        local x=$(echo $x | rev)\n\
    \        local x=$(echo $x | rev)\n        local x=$(echo $x | cut -c $shift-)\n\
    \        local x=$(echo $x | rev)\n        echo $x\n    fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer>\
    \ <integer>\"\n        return 1\n    fi\n    if [ $2 -gt ${#1} ]; then\n     \
    \   echo \"$1\" | rev\n        return 0\n    fi\n    echo \"$1\" | cut -c $2-\
    \ | rev\n    echo \"$1\" | cut -c 1-$(( $2 - 1 )) | rev\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    local x=$(echo $x | rev)\n    local x=$(echo $x | cut -c 1-$shift)\n    local\
    \ x=$(echo $x | rev)\n    local x=$(echo $x | cut -c $((shift + 1))-)\n    echo\
    \ $x$x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local right=$((x % 10**shift))\n    local left=$((x\
    \ / 10**shift))\n    echo $right$left\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local result=\"\"\n    if (( shift > digits )); then\n        for (( i=digits-1;\
    \ i>=0; i-- )); do\n            result+=${x:$i:1}\n        done\n    else\n  \
    \      result=${x:$shift}${x:0:$shift}\n    fi\n    echo $result\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local right=$((digits - shift))\n    local left=$((digits\
    \ - right))\n    local right=$(echo $x | cut -c $left-$digits)\n    local left=$(echo\
    \ $x | cut -c 1-$left)\n    echo $right$left\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local result=\"\"\n    if\
    \ [ $shift -gt $digits ]; then\n        result=$(echo $x | rev)\n    else\n  \
    \      local first=$(echo $x | cut -c 1-$shift)\n        local last=$(echo $x\
    \ | cut -c $((shift + 1))-$digits)\n        result=$last$first\n    fi\n    echo\
    \ $result\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local result=\"\"\n    local i=0\n    if [ $shift -gt $digits ]; then\n \
    \       for ((i=$digits-1; i>=0; i--)); do\n            result+=${x:$i:1}\n  \
    \      done\n    else\n        result=${x:$shift:$digits}${x:0:$shift}\n    fi\n\
    \    echo $result\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10 ** shift))\n\
    \        local z=$((x / 10 ** shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  if [ $shift -gt $digits ]; then\n    echo $x | rev\n  else\n    echo\
    \ $x | cut -c $shift- | rev | cut -c $shift- | rev\n  fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo \"$x\" | rev\n    else\n        local right=$((digits\
    \ - shift))\n        local left=$((digits - right))\n        local right=$(echo\
    \ \"$x\" | cut -c $right-$digits)\n        local left=$(echo \"$x\" | cut -c 1-$left)\n\
    \        echo \"$right$left\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local right=$((digits - shift))\n\
    \        local left=$((digits - right))\n        local right=$(echo $x | cut -c\
    \ $left- | rev)\n        local left=$(echo $x | cut -c 1-$left)\n        echo\
    \ $right$left\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local result=\"\"\n    if (( shift >= digits )); then\n   \
    \     result=$(echo $x | rev)\n    else\n        result=$(echo $x | cut -c $shift-\
    \ | rev)$(echo $x | cut -c 1-$((shift-1)) | rev)\n    fi\n    echo $result\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local first=$(echo $x | cut -c 1-$shift)\n        local second=$(echo\
    \ $x | cut -c $((shift+1))-$digits)\n        echo $second$first\n    fi\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local result=''\n    local i\n    if (( shift > digits )); then\n       \
    \ for (( i = digits - 1; i >= 0; i-- )); do\n            result+=${x:$i:1}\n \
    \       done\n    else\n        result=${x:$shift}\n        for (( i = 0; i <\
    \ shift; i++ )); do\n            result+=${x:$i:1}\n        done\n    fi\n   \
    \ echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local right=$((digits - shift))\n\
    \        local left=$((digits - right))\n        local right=$(echo $x | cut -c\
    \ $left-$digits)\n        local left=$(echo $x | cut -c 1-$left)\n        echo\
    \ $right$left\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local result=''\n    if (( shift > digits )); then\n        for (( i=digits-1;\
    \ i>=0; i-- )); do\n            result+=${x:$i:1}\n        done\n    else\n  \
    \      for (( i=shift; i<digits; i++ )); do\n            result+=${x:$i:1}\n \
    \       done\n        for (( i=0; i<shift; i++ )); do\n            result+=${x:$i:1}\n\
    \        done\n    fi\n    echo $result\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local shifted=$(echo \"$x\" | rev | cut -c $shift- | rev)\n\
    \    local shifted_digits=$(echo \"$shifted\" | wc -c)\n    if [ $shifted_digits\
    \ -eq $digits ]; then\n        echo \"$shifted\"\n    else\n        echo \"$x\"\
    \ | rev\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    local y=$(echo $x | rev)\n    local y=$(echo $y | cut -c -$shift)\n    local\
    \ y=$(echo $y | rev)\n    local y=$(echo $y | cut -c $((shift + 1)))\n    local\
    \ y=$(echo $y | rev)\n    echo $y$x\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo \"$x\" |\
    \ rev\n    else\n        local right=$(echo \"$x\" | cut -c $shift- | rev)\n \
    \       local left=$(echo \"$x\" | cut -c 1-$((digits - shift)) | rev)\n     \
    \   echo \"$right$left\"\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\n  local digits=\"\
    ${#x}\"\n  if [ \"$shift\" -gt \"$digits\" ]; then\n    echo \"$x\" | rev\n  else\n\
    \    local y=\"$x\"\n    for ((i=0; i<shift; i++)); do\n      y=\"${y:1}${y:0:1}\"\
    \n    done\n    echo \"$y\"\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local result=\"\"\n    if [ $shift -ge $digits ]; then\n  \
    \      result=$(echo $x | rev)\n    else\n        local right=$(echo $x | cut\
    \ -c $shift- )\n        local left=$(echo $x | cut -c 1-$((shift-1)) )\n     \
    \   result=$right$left\n    fi\n    echo $result\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local y=$((x % 10**shift))\n        local z=$((x / 10**shift))\n\
    \        echo $y$z\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    local result=\"\"\n    local i=0\n    local j=0\n    if [ \"$shift\"\
    \ -ge \"$digits\" ]; then\n        result=\"$(reverse_string \"$x\")\"\n    else\n\
    \        for ((i=0; i<digits; i++)); do\n            j=$(((i+shift)%digits))\n\
    \            result=\"$result${x:$j:1}\"\n        done\n    fi\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local result=\"\"\n    if [ $shift -gt $digits ]; then\n  \
    \      result=$(echo $x | rev)\n    else\n        local right=$(echo $x | cut\
    \ -c $shift-$digits)\n        local left=$(echo $x | cut -c 1-$((shift-1)))\n\
    \        result=$right$left\n    fi\n    echo $result\n}\n\ncandidate() {\n  \
    \  circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    local right=$((digits - shift))\n    local left=$((digits - right))\n   \
    \ local right=$(echo $x | cut -c $shift-$digits)\n    local left=$(echo $x | cut\
    \ -c 1-$left)\n    echo $right$left\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  if [ $shift -gt $digits ]; then\n    echo $x | rev\n  else\n    local\
    \ first=$(echo $x | cut -c $shift-$digits)\n    local second=$(echo $x | cut -c\
    \ 1-$((shift-1)))\n    echo $first$second\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local x_str=$(echo $x | rev)\n\
    \        local x_str_1=$(echo $x_str | cut -c 1-$shift)\n        local x_str_2=$(echo\
    \ $x_str | cut -c $((shift + 1))-$digits)\n        echo $x_str_1$x_str_2 | rev\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local x_str=$(echo $x | rev)\n\
    \        local x_str_len=$(echo $x_str | wc -c)\n        local x_str_len=$((x_str_len\
    \ - 1))\n        local x_str_shift=$(echo $x_str | cut -c 1-$shift)\n        local\
    \ x_str_shift_len=$(echo $x_str_shift | wc -c)\n        local x_str_shift_len=$((x_str_shift_len\
    \ - 1))\n        local x_str_remainder=$(echo $x_str | cut -c $((shift + 1))-$x_str_len)\n\
    \        local x_str_remainder_len=$(echo $x_str_remainder | wc -c)\n        local\
    \ x_str_remainder_len=$((x_str_remainder_len - 1))\n        local x_str_new=$(echo\
    \ $x_str_remainder$x_str_shift)\n        echo $x_str_new | rev\n    fi\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: OK
  stderr: 'cut: invalid decreasing range

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local shift=$((shift % digits))\n    if [ $shift -eq 0 ]; then\n\
    \        echo $x\n    else\n        echo $x | cut -c $shift- | rev | cut -c $shift-\
    \ | rev\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo \"$x\" |\
    \ rev\n    else\n        local right=$(echo \"$x\" | cut -c $shift-$digits)\n\
    \        local left=$(echo \"$x\" | cut -c 1-$((shift-1)))\n        echo \"$right$left\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local result=\"\"\n    if [ $shift -ge $digits ]; then\n  \
    \      result=$(echo $x | rev)\n    else\n        result=$(echo $x | cut -c $shift-\
    \ | rev)$(echo $x | cut -c 1-$(($shift-1)) | rev)\n    fi\n    echo $result\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local y=$x\n    if [ $shift -gt $digits ]; then\n        y=$(reverse_digits\
    \ $x)\n    else\n        local y=$(echo $x | cut -c $shift-$digits)\n        local\
    \ y=$y$(echo $x | cut -c 1-$((shift-1)))\n    fi\n    echo $y\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  local shift=$((shift % digits))\n\
    \  local shift=$((digits - shift))\n  local x=$(echo $x | rev)\n  local x=$(echo\
    \ $x | cut -c $shift- | rev)\n  echo $x\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % (10 ** shift)))\n\
    \        local z=$((x / (10 ** shift)))\n        echo $((y * (10 ** digits) +\
    \ z))\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo $x | rev\n    else\n        local prefix=$(echo $x |\
    \ cut -c 1-$shift)\n        local suffix=$(echo $x | cut -c $((shift + 1))-$digits)\n\
    \        echo $suffix$prefix\n    fi\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local result=\"\"\n    if [ $shift -gt $digits ]; then\n        result=$(reverse_digits\
    \ $x)\n    else\n        local i=0\n        while [ $i -lt $digits ]; do\n   \
    \         local digit=$(get_digit $x $i)\n            local j=$(($i + $shift))\n\
    \            if [ $j -ge $digits ]; then\n                j=$(($j - $digits))\n\
    \            fi\n            result=$result$(get_digit $x $j)\n            i=$(($i\
    \ + 1))\n        done\n    fi\n    echo $result\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpli2l9e8s.sh: line 22: get_digit: command not found

    /tmp/tmpli2l9e8s.sh: line 27: get_digit: command not found

    /tmp/tmpli2l9e8s.sh: line 22: get_digit: command not found

    /tmp/tmpli2l9e8s.sh: line 27: get_digit: command not found

    /tmp/tmpli2l9e8s.sh: line 22: get_digit: command not found

    /tmp/tmpli2l9e8s.sh: line 27: get_digit: command not found

    '
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=${#x}\n  local\
    \ shift=$((shift % digits))\n  if ((shift == 0)); then\n    echo \"$x\"\n  else\n\
    \    echo \"${x:$shift}${x:0:$shift}\"\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local y=$((x % 10**shift))\n    local z=$((x /\
    \ 10**shift))\n    echo $y$z\n  fi\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local x_str=$(echo $x | rev)\n        local x_str_len=$(echo\
    \ $x_str | wc -c)\n        local x_str_shift=$(echo $x_str | cut -c 1-$shift)\n\
    \        local x_str_remainder=$(echo $x_str | cut -c $((shift+1))-$x_str_len)\n\
    \        echo $x_str_remainder$x_str_shift\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local right=$((x % 10**shift))\n    local left=$((x\
    \ / 10**shift))\n    echo $right$left\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10 ** shift))\n\
    \        local z=$((x / 10 ** shift))\n        local y=$(echo $y | rev)\n    \
    \    echo $y$z\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo \"$x\"\
    \ | wc -c)\n  local digits=$((digits - 1))\n  local shift=$((shift % digits))\n\
    \  if [ $shift -eq 0 ]; then\n    echo \"$x\"\n  else\n    local first=$(echo\
    \ \"$x\" | cut -c 1-$shift)\n    local last=$(echo \"$x\" | cut -c $((shift +\
    \ 1))-$digits)\n    echo \"$last$first\"\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    local result=\"\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n\
    \        result=\"$(reverse_digits \"$x\")\"\n    else\n        result=\"$(echo\
    \ \"$x\" | cut -c \"$shift-$digits\")$(echo \"$x\" | cut -c 1-\"$((shift - 1))\"\
    )\"\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994110
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>>\
    \ circular_shift(12, 2)\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local left=$((x / 10 ** shift))\n    local right=$((x\
    \ % 10 ** shift))\n    echo $((right * 10 ** digits + left))\n  fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994111
