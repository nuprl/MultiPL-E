name: HumanEval_69_search
language: humaneval_to_bash.py
prompt: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
  \ the greatest integer that is greater than \n# zero, and has a frequency greater\
  \ than or equal to the value of the integer itself. \n# The frequency of an integer\
  \ is the number of times it appears in the list.\n# If no such a value exist, return\
  \ -1.\n# Examples:\n# search([4, 1, 2, 2, 3, 1]) == 2\n# search([1, 2, 2, 3, 3,\
  \ 3, 4, 4, 4]) == 3\n# search([5, 5, 4, 4, 4]) == -1\n#\n# $1 is a space-separated\
  \ list\nsearch() {\n"
tests: "}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n  \
  \  [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\")\
  \ = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"\
  2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
  \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
  1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"\
  6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
  \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6\
  \ 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n  \
  \  [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\"\
  \ ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n\
  \    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
  \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n\
  \    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\"\
  \ ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n\
  \    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\"\
  \ ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2\
  \ 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") =\
  \ \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\"\
  ) = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
completions: ["    # your code here\n    echo $1 | tr \" \" \"\\n\" | sort | uniq\
    \ -c | sort -nr | awk '{if ($1>=$2) print $2}' | head -n 1", "    local -a arr=(\"\
    $@\")\n    local -a freq=()\n    local -i i=0\n    local -i j=0\n    local -i\
    \ max=0\n    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n      \
    \  freq[${arr[$i]}]=$((freq[${arr[$i]}]+1))\n    done\n    for ((i=0; i<len; i++));\
    \ do\n        if [[ ${freq[${arr[$i]}]} -ge ${arr[$i]} ]]; then\n            if\
    \ [[ ${arr[$i]} -gt $max ]]; then\n                max=${arr[$i]}\n          \
    \  fi\n        fi\n    done\n    if [[ $max -eq 0 ]]; then\n        echo -1\n\
    \    else\n        echo $max\n    fi", "    # your code here\n    echo $1", " \
    \ echo $1 | tr ' ' '\\n' | sort | uniq -c | sort -nr | awk '{if ($1 >= $2) print\
    \ $2}' | head -n 1", "    local -a arr=(${1// / })\n    local -a freq=(0 0 0 0\
    \ 0 0 0 0 0 0)\n    local -i i=0\n    local -i max=0\n    local -i max_freq=0\n\
    \    local -i max_freq_val=0\n    local -i val=0\n    local -i len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        val=${arr[$i]}\n        ((freq[$val]++))\n\
    \        if ((val > max)); then\n            max=$val\n        fi\n    done\n\
    \    for ((i=1; i<=max; i++)); do\n        if ((freq[$i] >= i)); then\n      \
    \      if ((freq[$i] > max_freq)); then\n                max_freq=$freq[$i]\n\
    \                max_freq_val=$i\n            fi\n        fi\n    done\n    if\
    \ ((max_freq_val == 0)); then\n        echo -1\n    else\n        echo $max_freq_val\n\
    \    fi", "  local -A freq\n  local max_freq=0\n  local max_freq_int=-1\n  local\
    \ int\n  for int in $1; do\n    (( freq[$int]++ ))\n    if (( freq[$int] >= int\
    \ )); then\n      if (( freq[$int] > max_freq )); then\n        max_freq=$freq[$int]\n\
    \        max_freq_int=$int\n      fi\n    fi\n  done\n  echo $max_freq_int", " \
    \ local -a arr=(\"$@\")\n  local -A freq\n  local -i max=0\n  local -i i=0\n \
    \ local -i len=${#arr[@]}\n  for (( i=0; i<len; i++ )); do\n    (( freq[${arr[$i]}]++\
    \ ))\n    (( max < ${arr[$i]} )) && max=${arr[$i]}\n  done\n  for (( i=1; i<=max;\
    \ i++ )); do\n    (( freq[$i] >= i )) && echo $i && return\n  done\n  echo -1",
  "    local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | tr -s ' ' | cut -d ' ' -f 2,3))\n    local -a res=($(echo \"\
    ${freq[@]}\" | tr ' ' '\\n' | sort -nr | tr -s ' ' | cut -d ' ' -f 2))\n    for\
    \ i in \"${res[@]}\"; do\n        if [[ $i -ge ${freq[$i]} ]]; then\n        \
    \    echo $i\n            return\n        fi\n    done\n    echo -1", "  local\
    \ -a arr=($1)\n  local -a freq=(0 0 0 0 0 0 0 0 0 0)\n  local -i i=0\n  local\
    \ -i j=0\n  local -i max=0\n  local -i max_freq=0\n  local -i len=${#arr[@]}\n\
    \  for ((i=0; i<len; i++)); do\n    ((freq[arr[i]]++))\n  done\n  for ((i=0; i<10;\
    \ i++)); do\n    if ((freq[i] >= i && freq[i] > max_freq)); then\n      max_freq=freq[i]\n\
    \      max=i\n    fi\n  done\n  if ((max_freq == 0)); then\n    echo -1\n  else\n\
    \    echo $max\n  fi", "    local -a arr=($1)\n    local -a freq=(0)\n    local\
    \ -a max=(0)\n    local i=0\n    local j=0\n    local max_i=0\n    local max_j=0\n\
    \    local max_freq=0\n    local max_val=0\n    local val=0\n    local freq=0\n\
    \    local len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        val=${arr[$i]}\n\
    \        freq=${freq[$val]}\n        freq[$val]=$((freq+1))\n        if [ $val\
    \ -gt ${max[$freq]} ]; then\n            max[$freq]=$val\n        fi\n    done\n\
    \    for ((i=0; i<len; i++)); do\n        val=${arr[$i]}\n        freq=${freq[$val]}\n\
    \        if [ $freq -ge $val ]; then\n            if [ $freq -gt $max_freq ];\
    \ then\n                max_freq=$freq\n                max_val=${max[$freq]}\n\
    \            elif [ $freq -eq $max_freq ]; then\n                if [ $val -gt\
    \ $max_val ]; then\n                    max_val=$val\n                fi\n   \
    \         fi\n        fi\n    done\n    if [ $max_val -gt 0 ]; then\n        echo\
    \ $max_val\n    else\n        echo -1\n    fi", "    local -a arr=($1)\n    local\
    \ -i max=0\n    local -i freq=0\n    local -i i=0\n    local -i j=0\n    local\
    \ -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]}\
    \ -gt max ]]; then\n            max=${arr[i]}\n        fi\n    done\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=0; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -eq ${arr[j]} ]]; then\n                freq=$((freq+1))\n            fi\n \
    \       done\n        if [[ ${arr[i]} -eq freq ]]; then\n            echo ${arr[i]}\n\
    \            return\n        fi\n        freq=0\n    done\n    echo -1", "   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    for i in \"${arr[@]}\"\
    ; do\n        ((freq[i]++))\n        ((max<i)) && max=$i\n    done\n    for ((i=max;\
    \ i>0; i--)); do\n        ((freq[i]>=i)) && echo $i && return\n    done\n    echo\
    \ -1", "    local list=($1)\n    local nums=($(echo ${list[@]} | tr ' ' '\\n'\
    \ | sort -n | uniq -c | awk '{print $1, $2}'))\n    local result=-1\n    for ((i=0;\
    \ i<${#nums[@]}; i+=2)); do\n        if [[ ${nums[i]} -ge ${nums[i+1]} ]]; then\n\
    \            result=${nums[i+1]}\n        fi\n    done\n    echo $result", " \
    \   # Your code here\n    echo $1 | tr ' ' '\\n' | sort -n | uniq -c | sort -n\
    \ | awk '{print $1, $2}' | awk '{if ($1 >= $2) print $2}' | tail -n 1", "    local\
    \ -a arr=($1)\n    local -a freq=(0)\n    local -i max=0\n    local -i i=0\n \
    \   local -i j=0\n    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n\
    \        ((freq[arr[i]]++))\n        ((max < arr[i])) && max=arr[i]\n    done\n\
    \    for ((i=1; i<=max; i++)); do\n        ((freq[i] < i)) && continue\n     \
    \   for ((j=i+1; j<=max; j++)); do\n            ((freq[j] < i)) && continue\n\
    \            ((freq[i] < freq[j])) && i=j\n        done\n        break\n    done\n\
    \    ((i > max)) && echo -1 || echo $i", "  local -A map\n  local max=0\n  for\
    \ i in $1; do\n    map[$i]=$((map[$i]+1))\n    if ((map[$i]>=i)) && ((i>max));\
    \ then\n      max=$i\n    fi\n  done\n  echo $max", "    local -a arr=($1)\n \
    \   local -a freq=(0)\n    local max=0\n    for i in \"${arr[@]}\"; do\n     \
    \   ((freq[i]++))\n        ((max<i)) && max=$i\n    done\n    for ((i=1; i<=max;\
    \ i++)); do\n        ((freq[i]>=i)) && echo $i && return\n    done\n    echo -1",
  "    # Write your code here\n    echo -n \"\"", "    local -a arr=($1)\n    local\
    \ -a freq=(0)\n    local max=0\n    local i=0\n    local j=0\n    local found=0\n\
    \    for i in \"${arr[@]}\"; do\n        if [[ $i -gt $max ]]; then\n        \
    \    max=$i\n        fi\n    done\n    for ((i=0; i<=max; i++)); do\n        freq[$i]=0\n\
    \    done\n    for i in \"${arr[@]}\"; do\n        freq[$i]=$((freq[$i]+1))\n\
    \    done\n    for ((i=max; i>0; i--)); do\n        if [[ ${freq[$i]} -ge $i ]];\
    \ then\n            echo $i\n            found=1\n            break\n        fi\n\
    \    done\n    if [[ $found -eq 0 ]]; then\n        echo -1\n    fi", "    local\
    \ -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local n=${#arr[@]}\n    local m=0\n    local res=-1\n\
    \    for ((i=0; i<n; i++)); do\n        m=${arr[$i]}\n        if ((m>max)); then\n\
    \            max=$m\n        fi\n    done\n    for ((i=0; i<=max; i++)); do\n\
    \        freq[$i]=0\n    done\n    for ((i=0; i<n; i++)); do\n        m=${arr[$i]}\n\
    \        freq[$m]=$((freq[$m]+1))\n    done\n    for ((i=max; i>0; i--)); do\n\
    \        if ((freq[$i]>=i)); then\n            res=$i\n            break\n   \
    \     fi\n    done\n    echo $res"]
stop_tokens:
- "\n}"
