completions:
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n   \
  \ echo false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(( $1\
  \ / $2 )) $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -lt $2 ]; then\n    echo \"false\"\n  else\n    is_simple_power\
  \ $(( $1 / $2 )) $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(($1/$2))\
  \ $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    if [ $(( $1 % $2 )) -eq 0 ]; then\n\
  \      is_simple_power $(( $1 / $2 )) $2\n    else\n      echo \"false\"\n    fi\n\
  \  else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq $2 ]; then\n    echo \"true\"\n  elif [ $1 -eq 1 ]; then\n    echo\
  \ \"false\"\n  elif [ $1 -eq 0 ]; then\n    echo \"false\"\n  elif [ $1 -lt $2 ];\
  \ then\n    echo \"false\"\n  elif [ $(( $1 % $2 )) -eq 0 ]; then\n    is_simple_power\
  \ $(( $1 / $2 )) $2\n  else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    if [ $(($1 % $2)) -eq 0 ]; then\n      is_simple_power\
  \ $(($1 / $2)) $2\n    else\n      echo false\n    fi\n  else\n    echo false\n\
  \  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    if [ $(( $1 % $2 )) -eq 0 ]; then\n\
  \      is_simple_power $(( $1 / $2 )) $2\n    else\n      echo \"false\"\n    fi\n\
  \  else\n    echo \"false\"\n  fi"
- "  if [[ $1 -eq 1 ]]; then\n    echo true\n  elif [[ $1 -eq $2 ]]; then\n    echo\
  \ true\n  elif [[ $1 -lt $2 ]]; then\n    echo false\n  else\n    is_simple_power\
  \ $(($1/$2)) $2\n  fi"
- "  if [[ $1 -eq 1 ]]; then\n    echo true\n  elif [[ $1 -eq $2 ]]; then\n    echo\
  \ true\n  elif [[ $1 -gt $2 ]]; then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n\
  \    echo false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -eq $(( $2 ** 2 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 **\
  \ 3 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 ** 4 )) ]; then\n    echo\
  \ true\n  elif [ $1 -eq $(( $2 ** 5 )) ]; then\n    echo true\n  elif [ $1 -eq $((\
  \ $2 ** 6 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 ** 7 )) ]; then\n  \
  \  echo true\n  elif [ $1 -eq $(( $2 ** 8 )) ]; then\n    echo true\n  elif [ $1\
  \ -eq $(( $2 ** 9 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 ** 10 )) ];\
  \ then\n    echo true\n  elif [ $1 -eq $(( $2 ** 11 )) ]; then\n    echo true\n\
  \  elif [ $1 -eq $(( $2 ** 12 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2\
  \ ** 13 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 ** 14 )) ]; then\n   \
  \ echo true\n  elif [ $1 -eq $(( $2 ** 15 )) ]; then\n    echo true\n  elif [ $1\
  \ -eq $(( $2 ** 16 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 ** 17 )) ];\
  \ then\n    echo true\n  elif [ $1 -eq $(( $2 ** 18 )) ]; then\n    echo true\n\
  \  elif [ $1 -eq $(( $2 ** 19 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2\
  \ ** 20 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 ** 21 )) ]; then\n   \
  \ echo true\n  elif [ $1 -eq $(( $2 ** 22 )) ]; then\n    echo true\n  elif [ $1\
  \ -eq $(( $2 ** 23 )) ]; then"
- "  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n  while [ $result -le\
  \ $x ]; do\n    if [ $result -eq $x ]; then\n      echo true\n      return\n   \
  \ fi\n    result=$((n**i))\n    i=$((i+1))\n  done\n  echo false"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n   \
  \ echo false\n  fi"
- "  local x=$1\n  local n=$2\n  local result=0\n  local i=0\n  while [ $result -lt\
  \ $x ]\n  do\n    result=$((n**i))\n    if [ $result -eq $x ]; then\n      echo\
  \ true\n      return\n    fi\n    i=$((i+1))\n  done\n  echo false"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(($1/$2))\
  \ $2\n  fi"
- "  if [ $1 -eq $(bc <<< \"scale=0; $2 ^ (l($1)/l($2))\") ]; then\n    echo true\n\
  \  else\n    echo false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n    echo\
  \ false\n  fi"
- "  # your code here\n  echo \"Not implemented\""
- "    if (( $1 == 1 )); then\n        echo true\n    elif (( $1 % $2 == 0 )); then\n\
  \        is_simple_power $(( $1 / $2 )) $2\n    else\n        echo false\n    fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n    echo\
  \ false\n  fi"
- "    if [ $1 -eq 1 ]; then\n        echo true\n    elif [ $1 -eq $2 ]; then\n  \
  \      echo true\n    elif [ $1 -gt $2 ]; then\n        is_simple_power $(( $1 /\
  \ $2 )) $2\n    else\n        echo false\n    fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n   \
  \ echo false\n  fi"
- "  local x=$1\n  local n=$2\n  local result=0\n  local i=0\n  while [ $result -lt\
  \ $x ]\n  do\n    result=$((n**i))\n    if [ $result -eq $x ]; then\n      echo\
  \ \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n  echo \"false\""
- "  if [[ $1 -eq 1 ]]; then\n    echo true\n  elif [[ $1 -eq $2 ]]; then\n    echo\
  \ true\n  elif [[ $1 -gt $2 ]]; then\n    is_simple_power $(($1/$2)) $2\n  else\n\
  \    echo false\n  fi"
- "  if [ $1 -eq 1 ]\n  then\n    echo true\n  elif [ $1 -eq $2 ]\n  then\n    echo\
  \ true\n  elif [ $1 -gt $2 ]\n  then\n    if [ $(( $1 % $2 )) -eq 0 ]\n    then\n\
  \      is_simple_power $(( $1 / $2 )) $2\n    else\n      echo false\n    fi\n \
  \ else\n    echo false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n   \
  \ echo false\n  fi"
- "  if [ $1 -eq 1 ]\n  then\n    echo true\n  elif [ $1 -eq $2 ]\n  then\n    echo\
  \ true\n  elif [ $1 -gt $2 ]\n  then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n\
  \    echo false\n  fi"
- "    if [ $1 -eq $2 ]; then\n        echo true\n    elif [ $1 -eq 1 ]; then\n  \
  \      echo false\n    elif [ $1 -eq 0 ]; then\n        echo false\n    elif [ $1\
  \ -lt $2 ]; then\n        echo false\n    elif [ $(($1 % $2)) -eq 0 ]; then\n  \
  \      is_simple_power $(($1 / $2)) $2\n    else\n        echo false\n    fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    echo $(is_simple_power $(($1/$2)) $2)\n  else\n\
  \    echo false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n   \
  \ echo false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n\
  \  else\n    echo \"false\"\n  fi"
- "  if [[ $1 -eq 1 ]]; then\n    echo true\n  elif [[ $1 -eq $2 ]]; then\n    echo\
  \ true\n  elif [[ $1 -gt $2 ]]; then\n    if [[ $(( $1 % $2 )) -eq 0 ]]; then\n\
  \      is_simple_power $(( $1 / $2 )) $2\n    else\n      echo false\n    fi\n \
  \ else\n    echo false\n  fi"
- "  # Write your code here\n  # $1 is an integer\n  # $2 is an integer\n  # return\
  \ true if $1 is a simple power of $2\n  # return false otherwise\n  #\n  # Example:\n\
  \  # is_simple_power(1, 4) => true\n  # is_simple_power(2, 2) => true\n  # is_simple_power(8,\
  \ 2) => true\n  # is_simple_power(3, 2) => false\n  # is_simple_power(3, 1) => false\n\
  \  # is_simple_power(5, 3) => false\n  #\n  # Hint:\n  # You can use the bc command\
  \ to do floating point arithmetic\n  #\n  # Hint:\n  # You can use the bc command\
  \ to do floating point arithmetic\n  #\n  # Hint:\n  # You can use the bc command\
  \ to do floating point arithmetic\n  #\n  # Hint:\n  # You can use the bc command\
  \ to do floating point arithmetic\n  #\n  # Hint:\n  # You can use the bc command\
  \ to do floating point arithmetic\n  #\n  # Hint:\n  # You can use the bc command\
  \ to do floating point arithmetic\n  #\n  # Hint:\n  # You can use the bc command\
  \ to do floating point arithmetic\n  #\n  # Hint:\n  # You can use the bc command\
  \ to do floating point arithmetic\n  #\n  # Hint:\n  # You can use the bc command\
  \ to do floating point arithmetic\n  #\n  # Hint:\n  # You can use the bc command\
  \ to do floating point arithmetic\n  #\n  # Hint:\n  # You can use the bc command\
  \ to do floating point arithmetic\n  #\n  # Hint:\n  # You can use the bc command\
  \ to do floating point arithmetic\n  #\n  # Hint:\n  # You can use the bc command\
  \ to do floating point arithmetic\n  #\n  # Hint:\n  # You can use the bc command\
  \ to do floating point arithmetic\n  #\n  # Hint:\n  # You can use the bc command\
  \ to do floating point arithmetic\n  #\n  # Hint:\n  # You can use the bc command\
  \ to do floating point arithmetic\n "
- "  if [ $1 -eq 1 ]; then\n    return 0\n  fi\n  if [ $1 -eq $2 ]; then\n    return\
  \ 0\n  fi\n  if [ $1 -lt $2 ]; then\n    return 1\n  fi\n  is_simple_power $(( $1\
  \ / $2 )) $2"
- "  if [[ $1 -eq 1 ]]; then\n    echo true\n  elif [[ $1 -eq $2 ]]; then\n    echo\
  \ true\n  elif [[ $1 -gt $2 ]]; then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n\
  \    echo false\n  fi"
- "    if [ $1 -eq 1 ]; then\n        echo true\n    elif [ $1 -eq $2 ]; then\n  \
  \      echo true\n    elif [ $1 -eq 0 ]; then\n        echo false\n    elif [ $1\
  \ -lt $2 ]; then\n        echo false\n    else\n        is_simple_power $(( $1 /\
  \ $2 )) $2\n    fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n\
  \    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    if [ $(($1 % $2)) -eq 0 ]; then\n  \
  \    is_simple_power $(($1 / $2)) $2\n    else\n      echo \"false\"\n    fi\n \
  \ else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq 0 ]; then\n    echo \"false\"\n  elif [ $1 -eq 1 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo \"true\"\n  elif [ $1 -gt $2 ];\
  \ then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n    echo \"false\"\n  fi"
- '    echo "scale=0; $1/$2" | bc | grep -q "^$2"'
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -eq 0 ]; then\n    echo \"false\"\n  elif [ $1 -lt $2 ];\
  \ then\n    echo \"false\"\n  else\n    is_simple_power $(( $1 / $2 )) $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n\
  \  else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n    echo\
  \ false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    if [ $(( $1 % $2 )) -eq 0 ]; then\n\
  \      is_simple_power $(( $1 / $2 )) $2\n    else\n      echo \"false\"\n    fi\n\
  \  else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(($1/$2))\
  \ $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n\
  \  else\n    echo \"false\"\n  fi"
- "  local x=$1\n  local n=$2\n  local result=$(echo \"$x $n\" | awk '{print log($1)/log($2)}')\n\
  \  if [[ $result == *.* ]]; then\n    echo \"false\"\n  else\n    echo \"true\"\n\
  \  fi"
- "    if [ $1 -eq 1 ]; then\n        echo true\n    elif [ $1 -eq $2 ]; then\n  \
  \      echo true\n    elif [ $1 -lt $2 ]; then\n        echo false\n    else\n \
  \       is_simple_power $(( $1 / $2 )) $2\n    fi"
- "    if [ $1 -eq 1 ]; then\n        echo true\n    elif [ $1 -eq $2 ]; then\n  \
  \      echo true\n    elif [ $1 -gt $2 ]; then\n        is_simple_power $(($1/$2))\
  \ $2\n    else\n        echo false\n    fi"
- "  if [ $1 -eq $2 ]; then\n    echo \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power\
  \ $(($1/$2)) $2\n  else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(($1/$2))\
  \ $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n    echo\
  \ false\n  fi"
- "  if [ $1 -eq 1 ]\n  then\n    echo true\n  elif [ $1 -eq $2 ]\n  then\n    echo\
  \ true\n  elif [ $1 -lt $2 ]\n  then\n    echo false\n  else\n    is_simple_power\
  \ $(( $1 / $2 )) $2\n  fi"
- "  if [ $1 -eq $(bc <<< \"$2^$(bc <<< \"l($1)/l($2)\")\") ]; then\n    echo \"true\"\
  \n  else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    if [ $(( $1 % $2 )) -eq 0 ]; then\n      is_simple_power\
  \ $(( $1 / $2 )) $2\n    else\n      echo false\n    fi\n  else\n    echo false\n\
  \  fi"
- "  local x=$1\n  local n=$2\n  local result=$(bc <<< \"scale=0; $x/$n\")\n  if [[\
  \ $result -eq 1 ]]; then\n    echo true\n  elif [[ $result -eq $n ]]; then\n   \
  \ echo true\n  else\n    echo false\n  fi"
- "  # Write your code here\n  if [ $1 -eq 1 ]\n  then\n    echo true\n  elif [ $1\
  \ -eq $2 ]\n  then\n    echo true\n  elif [ $1 -gt $2 ]\n  then\n    if [ $1 -eq\
  \ $(( $2 ** 2 )) ]\n    then\n      echo true\n    else\n      echo false\n    fi\n\
  \  else\n    echo false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n\
  \  else\n    echo \"false\"\n  fi"
- "    local x=$1\n    local n=$2\n    local result=1\n    local i=1\n    while [\
  \ $result -lt $x ]\n    do\n        result=$(( $n ** $i ))\n        if [ $result\
  \ -eq $x ]\n        then\n            echo \"true\"\n            return\n      \
  \  fi\n        i=$(( $i + 1 ))\n    done\n    echo \"false\""
- "  if [[ $1 -eq 1 ]]; then\n    echo true\n  elif [[ $1 -eq $2 ]]; then\n    echo\
  \ true\n  elif [[ $1 -gt $2 ]]; then\n    is_simple_power $(($1/$2)) $2\n  else\n\
  \    echo false\n  fi"
- "    if [ $1 -eq 1 ]; then\n        echo \"true\"\n    elif [ $1 -eq $2 ]; then\n\
  \        echo \"true\"\n    elif [ $1 -lt $2 ]; then\n        echo \"false\"\n \
  \   else\n        is_simple_power $(( $1 / $2 )) $2\n    fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(($1/$2))\
  \ $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n\
  \    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -lt $2 ]; then\n    echo \"false\"\n  else\n    is_simple_power\
  \ $(($1/$2)) $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n\
  \    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n    echo\
  \ false\n  fi"
- "    if [ $1 -eq 1 ]; then\n        echo \"true\"\n    elif [ $1 -eq $2 ]; then\n\
  \        echo \"true\"\n    elif [ $1 -gt $2 ]; then\n        is_simple_power $((\
  \ $1 / $2 )) $2\n    else\n        echo \"false\"\n    fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq 0 ]; then\n    echo false\n\
  \  elif [ $1 -eq $2 ]; then\n    echo true\n  elif [ $1 -lt $2 ]; then\n    echo\
  \ false\n  else\n    is_simple_power $(( $1 / $2 )) $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n\
  \    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(($1/$2))\
  \ $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n\
  \  else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(( $1\
  \ / $2 )) $2\n  fi"
- "  if [[ $1 -eq $2**$(($1/2)) ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
  \n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n   \
  \ echo false\n  fi"
- "    if [ $1 -eq 1 ]; then\n        echo \"true\"\n    elif [ $1 -eq $2 ]; then\n\
  \        echo \"true\"\n    elif [ $1 -lt $2 ]; then\n        echo \"false\"\n \
  \   else\n        is_simple_power $(($1/$2)) $2\n    fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n\
  \    echo \"false\"\n  fi"
- "    # Write your code here\n    if [ $1 -eq 1 ]; then\n        echo \"true\"\n\
  \    elif [ $1 -eq $2 ]; then\n        echo \"true\"\n    elif [ $1 -gt $2 ]; then\n\
  \        is_simple_power $(($1/$2)) $2\n    else\n        echo \"false\"\n    fi"
- "    if [ $1 -eq 1 ]; then\n        echo true\n    elif [ $1 -eq $2 ]; then\n  \
  \      echo true\n    elif [ $1 -gt $2 ]; then\n        is_simple_power $(($1/$2))\
  \ $2\n    else\n        echo false\n    fi"
- "    if [ $1 -eq $(( $2 ** $(bc <<< \"scale=0;l($1)/l($2)\") )) ]; then\n      \
  \  echo \"true\"\n    else\n        echo \"false\"\n    fi"
- "  if [[ $1 -eq 1 ]]; then\n    echo true\n  elif [[ $1 -eq $2 ]]; then\n    echo\
  \ true\n  elif [[ $1 -gt $2 ]]; then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n\
  \    echo false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    if [ $(( $1 % $2 )) -eq 0 ]; then\n\
  \      is_simple_power $(( $1 / $2 )) $2\n    else\n      echo \"false\"\n    fi\n\
  \  else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n   \
  \ echo false\n  fi"
- "  if [ $1 -eq $2 ]; then\n    echo true\n  elif [ $1 -eq 1 ]; then\n    echo false\n\
  \  elif [ $1 -eq 0 ]; then\n    echo false\n  elif [ $1 -lt $2 ]; then\n    echo\
  \ false\n  elif [ $(( $1 % $2 )) -eq 0 ]; then\n    is_simple_power $(( $1 / $2\
  \ )) $2\n  else\n    echo false\n  fi"
- "  if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n    echo \"false\"\n  elif [ $1 -eq 1\
  \ ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo \"true\"\n  elif\
  \ [ $1 -lt $2 ]; then\n    echo \"false\"\n  else\n    # if $1 is a multiple of\
  \ $2\n    if [ $(( $1 % $2 )) -eq 0 ]; then\n      # recursively call is_simple_power\
  \ with $1 divided by $2\n      is_simple_power $(( $1 / $2 )) $2\n    else\n   \
  \   echo \"false\"\n    fi\n  fi"
- "    if [[ $1 -eq 1 ]]; then\n        echo true\n    elif [[ $1 -eq $2 ]]; then\n\
  \        echo true\n    elif [[ $1 -gt $2 ]]; then\n        is_simple_power $((\
  \ $1 / $2 )) $2\n    else\n        echo false\n    fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n\
  \  else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n\
  \    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n\
  \  else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n   \
  \ echo false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n   \
  \ echo false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    if [ $(( $1 % $2 )) -eq 0 ]; then\n\
  \      is_simple_power $(( $1 / $2 )) $2\n    else\n      echo \"false\"\n    fi\n\
  \  else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq $(echo \"scale=0; $2^$(echo \"scale=0; l($1)/l($2)\" | bc -l)\" |\
  \ bc -l) ]; then\n    echo true\n  else\n    echo false\n  fi"
- "    if [ $1 -eq $2 ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n\
  \        echo \"false\"\n    elif [ $1 -eq 0 ]; then\n        echo \"false\"\n \
  \   elif [ $1 -lt $2 ]; then\n        echo \"false\"\n    elif [ $(( $1 % $2 ))\
  \ -eq 0 ]; then\n        is_simple_power $(( $1 / $2 )) $2\n    else\n        echo\
  \ \"false\"\n    fi"
- "    if [ $1 -eq 1 ]; then\n        echo \"true\"\n    elif [ $1 -eq $2 ]; then\n\
  \        echo \"true\"\n    elif [ $1 -gt $2 ]; then\n        is_simple_power $(($1/$2))\
  \ $2\n    else\n        echo \"false\"\n    fi"
- "    if [[ $1 -eq 1 ]]; then\n        echo \"true\"\n    elif [[ $1 -eq $2 ]]; then\n\
  \        echo \"true\"\n    elif [[ $1 -lt $2 ]]; then\n        echo \"false\"\n\
  \    else\n        is_simple_power $(($1/$2)) $2\n    fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(($1/$2))\
  \ $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n\
  \  else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(($1/$2))\
  \ $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(($1/$2))\
  \ $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(($1/$2))\
  \ $2\n  fi"
- "    if [ $1 -eq 1 ]; then\n        echo true\n    elif [ $1 -eq $2 ]; then\n  \
  \      echo true\n    elif [ $1 -gt $2 ]; then\n        is_simple_power $(( $1 /\
  \ $2 )) $2\n    else\n        echo false\n    fi"
- "    if [ $1 -eq 1 ]; then\n        echo \"true\"\n    elif [ $1 -eq $2 ]; then\n\
  \        echo \"true\"\n    elif [ $1 -gt $2 ]; then\n        is_simple_power $((\
  \ $1 / $2 )) $2\n    else\n        echo \"false\"\n    fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(($1/$2))\
  \ $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n\
  \    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    if [ $(( $1 % $2 )) -eq 0 ]; then\n      is_simple_power\
  \ $(( $1 / $2 )) $2\n    else\n      echo false\n    fi\n  else\n    echo false\n\
  \  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n    echo\
  \ false\n  fi"
- "  if [ $1 -eq 0 ]; then\n    echo false\n    return\n  fi\n  if [ $1 -eq 1 ]; then\n\
  \    echo true\n    return\n  fi\n  if [ $1 -eq $2 ]; then\n    echo true\n    return\n\
  \  fi\n  if [ $1 -lt $2 ]; then\n    echo false\n    return\n  fi\n  local result=$(is_simple_power\
  \ $(($1 / $2)) $2)\n  if [ $result = true ]; then\n    echo true\n  else\n    echo\
  \ false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n   \
  \ echo false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(($1/$2))\
  \ $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    if [ $(( $1 % $2 )) -eq 0 ]; then\n\
  \      is_simple_power $(( $1 / $2 )) $2\n    else\n      echo \"false\"\n    fi\n\
  \  else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -lt $2 ]; then\n    echo \"false\"\n  else\n    is_simple_power\
  \ $(( $1 / $2 )) $2\n  fi"
- "  # Write your code here\n  # $1 is an integer\n  # $2 is an integer\n  # return\
  \ true if $1 is a simple power of $2\n  # return false in other cases\n  #\n  #\
  \ Write your code here\n  # $1 is an integer\n  # $2 is an integer\n  # return true\
  \ if $1 is a simple power of $2\n  # return false in other cases\n  #\n  # Write\
  \ your code here\n  # $1 is an integer\n  # $2 is an integer\n  # return true if\
  \ $1 is a simple power of $2\n  # return false in other cases\n  #\n  # Write your\
  \ code here\n  # $1 is an integer\n  # $2 is an integer\n  # return true if $1 is\
  \ a simple power of $2\n  # return false in other cases\n  #\n  # Write your code\
  \ here\n  # $1 is an integer\n  # $2 is an integer\n  # return true if $1 is a simple\
  \ power of $2\n  # return false in other cases\n  #\n  # Write your code here\n\
  \  # $1 is an integer\n  # $2 is an integer\n  # return true if $1 is a simple power\
  \ of $2\n  # return false in other cases\n  #\n  # Write your code here\n  # $1\
  \ is an integer\n  # $2 is an integer\n  # return true if $1 is a simple power of\
  \ $2\n  # return false in other cases\n  #\n  # Write your code here\n  # $1 is\
  \ an integer\n  # $2 is an integer\n  # return true if $1 is a simple power of $2\n\
  \  # return false in other cases\n  #\n  # Write your code here\n  # $1 is an integer\n\
  \  # $2 is an integer\n  # return true if $1 is a simple power of $2\n  # return\
  \ false in other cases\n  #\n  # Write your code here\n  # $1 is an integer\n  #\
  \ $2 is an integer\n  # return true if $1 is a simple power of $2\n  # return false\
  \ in other cases\n  #\n  # Write your code here\n  # $1 is an integer\n  # $2 is\
  \ an"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n\
  \    echo \"false\"\n  fi"
- "  if [ $1 -eq $2 ]; then\n    echo true\n  elif [ $1 -eq 1 ]; then\n    echo false\n\
  \  elif [ $1 -eq 0 ]; then\n    echo false\n  elif [ $1 -eq $(( $2 ** 2 )) ]; then\n\
  \    echo true\n  elif [ $1 -eq $(( $2 ** 3 )) ]; then\n    echo true\n  elif [\
  \ $1 -eq $(( $2 ** 4 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 ** 5 )) ];\
  \ then\n    echo true\n  elif [ $1 -eq $(( $2 ** 6 )) ]; then\n    echo true\n \
  \ elif [ $1 -eq $(( $2 ** 7 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 **\
  \ 8 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 ** 9 )) ]; then\n    echo\
  \ true\n  elif [ $1 -eq $(( $2 ** 10 )) ]; then\n    echo true\n  elif [ $1 -eq\
  \ $(( $2 ** 11 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 ** 12 )) ]; then\n\
  \    echo true\n  elif [ $1 -eq $(( $2 ** 13 )) ]; then\n    echo true\n  elif [\
  \ $1 -eq $(( $2 ** 14 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 ** 15 ))\
  \ ]; then\n    echo true\n  elif [ $1 -eq $(( $2 ** 16 )) ]; then\n    echo true\n\
  \  elif [ $1 -eq $(( $2 ** 17 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2\
  \ ** 18 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 ** 19 )) ]; then\n   \
  \ echo true\n  elif [ $1 -eq $(( $2 ** 20 )) ]; then\n    echo true\n  elif [ $1\
  \ -eq $(( $2 ** 21 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 ** 22 )) ];\
  \ then\n    echo true\n "
- "  if [ $1 -eq $2 ]\n  then\n    echo \"true\"\n  elif [ $1 -eq 1 ]\n  then\n  \
  \  echo \"false\"\n  elif [ $1 -lt $2 ]\n  then\n    echo \"false\"\n  elif [ $((\
  \ $1 % $2 )) -eq 0 ]\n  then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n  \
  \  echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n\
  \    echo \"false\"\n  fi"
- "    if [ $1 -eq 1 ]; then\n        echo true\n    elif [ $1 -eq $2 ]; then\n  \
  \      echo true\n    elif [ $1 -lt $2 ]; then\n        echo false\n    else\n \
  \       is_simple_power $(($1/$2)) $2\n    fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  else\n    if [ $1 -eq $2 ]; then\n  \
  \    echo true\n    else\n      if [ $1 -gt $2 ]; then\n        if [ $(( $1 % $2\
  \ )) -eq 0 ]; then\n          is_simple_power $(( $1 / $2 )) $2\n        else\n\
  \          echo false\n        fi\n      else\n        echo false\n      fi\n  \
  \  fi\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n   \
  \ echo false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n   \
  \ echo false\n  fi"
- "  # Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n"
- "  if [ $1 -eq 1 ]\n  then\n    echo true\n  elif [ $1 -eq $2 ]\n  then\n    echo\
  \ true\n  elif [ $1 -gt $2 ]\n  then\n    if [ $(( $1 % $2 )) -eq 0 ]\n    then\n\
  \      is_simple_power $(( $1 / $2 )) $2\n    else\n      echo false\n    fi\n \
  \ else\n    echo false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(($1/$2))\
  \ $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n\
  \  else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n   \
  \ echo false\n  fi"
- "  local x=$1\n  local n=$2\n  local i=0\n  local result=1\n  while [ $result -le\
  \ $x ]; do\n    if [ $result -eq $x ]; then\n      echo true\n      return\n   \
  \ fi\n    ((i++))\n    result=$((n**i))\n  done\n  echo false"
- "  if [ $1 -eq 1 ]\n  then\n    echo true\n  else\n    if [ $1 -eq $2 ]\n    then\n\
  \      echo true\n    else\n      if [ $1 -gt $2 ]\n      then\n        if [ $((\
  \ $1 % $2 )) -eq 0 ]\n        then\n          is_simple_power $(( $1 / $2 )) $2\n\
  \        else\n          echo false\n        fi\n      else\n        echo false\n\
  \      fi\n    fi\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -eq 0 ]; then\n    echo \"false\"\n  elif [ $1 -lt $2 ];\
  \ then\n    echo \"false\"\n  else\n    is_simple_power $(( $1 / $2 )) $2\n  fi"
- "  if (( $1 == 1 )); then\n    echo true\n  elif (( $1 % $2 == 0 )); then\n    is_simple_power\
  \ $(( $1 / $2 )) $2\n  else\n    echo false\n  fi"
- "    if [ $1 -eq 1 ]; then\n        echo true\n    elif [ $1 -eq $2 ]; then\n  \
  \      echo true\n    elif [ $1 -gt $2 ]; then\n        if [ $(( $1 % $2 )) -eq\
  \ 0 ]; then\n            is_simple_power $(( $1 / $2 )) $2\n        else\n     \
  \       echo false\n        fi\n    else\n        echo false\n    fi"
- "  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\" | bc -l)\n  if [ $(echo\
  \ \"$result == $n\" | bc -l) -eq 1 ]; then\n    echo true\n  else\n    echo false\n\
  \  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -lt $2 ]; then\n    echo \"false\"\n  else\n    is_simple_power\
  \ $(($1/$2)) $2\n  fi"
- "    if [ $1 -eq 1 ]; then\n        echo true\n    elif [ $1 -eq $2 ]; then\n  \
  \      echo true\n    elif [ $1 -lt $2 ]; then\n        echo false\n    else\n \
  \       is_simple_power $(($1/$2)) $2\n    fi"
- "    if [ $1 -eq 1 ]; then\n        echo true\n    elif [ $1 -eq $2 ]; then\n  \
  \      echo true\n    elif [ $1 -gt $2 ]; then\n        is_simple_power $(( $1 /\
  \ $2 )) $2\n    else\n        echo false\n    fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n   \
  \ echo false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    if [ $(( $1 % $2 )) -eq 0 ]; then\n      is_simple_power\
  \ $(( $1 / $2 )) $2\n    else\n      echo false\n    fi\n  else\n    echo false\n\
  \  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -lt $2 ]; then\n    echo \"false\"\n  else\n    is_simple_power\
  \ $(($1/$2)) $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n\
  \    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(($1/$2))\
  \ $2\n  fi"
- "  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0; $x/$n\" | bc)\n  if\
  \ [ $result -eq $n ]; then\n    echo true\n  else\n    echo false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n\
  \  else\n    echo \"false\"\n  fi"
- "  local x=$1\n  local n=$2\n  local result=1\n  local i=1\n  while [ $result -lt\
  \ $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x ]; then\n      echo true\n\
  \      return\n    fi\n    i=$((i+1))\n  done\n  echo false"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $2 -eq 1 ]; then\n    echo false\n\
  \  elif [ $1 -eq $2 ]; then\n    echo true\n  elif [ $1 -gt $2 ]; then\n    is_simple_power\
  \ $(( $1 / $2 )) $2\n  else\n    echo false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -lt $2 ]; then\n    echo \"false\"\n  else\n    is_simple_power\
  \ $(($1/$2)) $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n   \
  \ echo false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n\
  \  else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    return 0\n  fi\n  if [ $1 -eq $2 ]; then\n    return\
  \ 0\n  fi\n  if [ $1 -lt $2 ]; then\n    return 1\n  fi\n  is_simple_power $(($1/$2))\
  \ $2"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n    echo\
  \ false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    if [ $(( $1 % $2 )) -eq 0 ]; then\n      is_simple_power\
  \ $(( $1 / $2 )) $2\n    else\n      echo false\n    fi\n  else\n    echo false\n\
  \  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n    echo\
  \ false\n  fi"
- "  # Write your code here\n  echo \"Not implemented\""
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    echo \"false\"\n  else\n    is_simple_power\
  \ $(($1*$2)) $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -eq $(($2*$2)) ]; then\n    echo \"true\"\n  else\n    echo\
  \ \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(( $1\
  \ / $2 )) $2\n  fi"
- "  if [ $1 -eq $2 ]; then\n    echo true\n  elif [ $1 -eq 1 ]; then\n    echo false\n\
  \  elif [ $1 -eq 0 ]; then\n    echo false\n  elif [ $1 -eq $(( $2 ** 2 )) ]; then\n\
  \    echo true\n  elif [ $1 -eq $(( $2 ** 3 )) ]; then\n    echo true\n  elif [\
  \ $1 -eq $(( $2 ** 4 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 ** 5 )) ];\
  \ then\n    echo true\n  elif [ $1 -eq $(( $2 ** 6 )) ]; then\n    echo true\n \
  \ elif [ $1 -eq $(( $2 ** 7 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 **\
  \ 8 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 ** 9 )) ]; then\n    echo\
  \ true\n  elif [ $1 -eq $(( $2 ** 10 )) ]; then\n    echo true\n  elif [ $1 -eq\
  \ $(( $2 ** 11 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 ** 12 )) ]; then\n\
  \    echo true\n  elif [ $1 -eq $(( $2 ** 13 )) ]; then\n    echo true\n  elif [\
  \ $1 -eq $(( $2 ** 14 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 ** 15 ))\
  \ ]; then\n    echo true\n  elif [ $1 -eq $(( $2 ** 16 )) ]; then\n    echo true\n\
  \  elif [ $1 -eq $(( $2 ** 17 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2\
  \ ** 18 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 ** 19 )) ]; then\n   \
  \ echo true\n  elif [ $1 -eq $(( $2 ** 20 )) ]; then\n    echo true\n  elif [ $1\
  \ -eq $(( $2 ** 21 )) ]; then\n    echo true\n  elif [ $1 -eq $(( $2 ** 22 )) ];\
  \ then\n    echo true\n "
- "  local x=$1\n  local n=$2\n  local result=$(echo \"$x $n\" | awk '{print log($1)/log($2)}')\n\
  \  if [[ $result == *.* ]]; then\n    echo \"false\"\n  else\n    echo \"true\"\n\
  \  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  else\n    local result=$(echo \"scale=0;\
  \ $1 / $2\" | bc)\n    if [ $result -eq $2 ]; then\n      echo true\n    else\n\
  \      echo false\n    fi\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(($1/$2))\
  \ $2\n  fi"
- "  local x=$1\n  local n=$2\n  local result=$(bc <<< \"$x == $n ^ $n\")\n  if [[\
  \ $result == 1 ]]; then\n    echo true\n  else\n    echo false\n  fi"
- "  if [ $1 -eq 1 ]\n  then\n    echo true\n  elif [ $1 -eq $2 ]\n  then\n    echo\
  \ true\n  elif [ $1 -gt $2 ]\n  then\n    if [ $(( $1 % $2 )) -eq 0 ]\n    then\n\
  \      is_simple_power $(( $1 / $2 )) $2\n    else\n      echo false\n    fi\n \
  \ else\n    echo false\n  fi"
- "    if [ $1 -eq 1 ]; then\n        echo true\n    elif [ $1 -eq $2 ]; then\n  \
  \      echo true\n    elif [ $1 -gt $2 ]; then\n        is_simple_power $(( $1 /\
  \ $2 )) $2\n    else\n        echo false\n    fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    if [ $(( $1 % $2 )) -eq 0 ]; then\n      is_simple_power\
  \ $(( $1 / $2 )) $2\n    else\n      echo false\n    fi\n  else\n    echo false\n\
  \  fi"
- "  local x=$1\n  local n=$2\n  local result=$(bc <<< \"scale=0; $x/$n\")\n  if [\
  \ $result -eq 1 ]; then\n    echo true\n  else\n    echo false\n  fi"
- "  local x=$1\n  local n=$2\n  local result=$(bc <<< \"$x == $n^$(bc <<< \"scale=0;\
  \ l($x)/l($n)\")\")\n  if [[ $result -eq 1 ]]; then\n    echo true\n  else\n   \
  \ echo false\n  fi"
- "    if [ $1 -eq 1 ]; then\n        echo true\n    elif [ $1 -eq $2 ]; then\n  \
  \      echo true\n    elif [ $1 -gt $2 ]; then\n        is_simple_power $(($1/$2))\
  \ $2\n    else\n        echo false\n    fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n\
  \  else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    if [ $(( $1 % $2 )) -eq 0 ]; then\n\
  \      is_simple_power $(( $1 / $2 )) $2\n    else\n      echo \"false\"\n    fi\n\
  \  else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(($1/$2))\
  \ $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n  else\n   \
  \ echo false\n  fi"
- "  if [[ $1 -eq 1 ]]; then\n    echo \"true\"\n  elif [[ $1 -eq $2 ]]; then\n  \
  \  echo \"true\"\n  elif [[ $1 -gt $2 ]]; then\n    if [[ $(( $1 % $2 )) -eq 0 ]];\
  \ then\n      is_simple_power $(( $1 / $2 )) $2\n    else\n      echo \"false\"\n\
  \    fi\n  else\n    echo \"false\"\n  fi"
- "  if [[ $1 -eq 1 ]]; then\n    echo \"true\"\n  elif [[ $1 -eq $2 ]]; then\n  \
  \  echo \"true\"\n  elif [[ $1 -gt $2 ]]; then\n    if [[ $(( $1 % $2 )) -eq 0 ]];\
  \ then\n      is_simple_power $(( $1 / $2 )) $2\n    else\n      echo \"false\"\n\
  \    fi\n  else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    echo $(is_simple_power $(( $1 / $2 )) $2)\n  else\n\
  \    echo false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -eq `expr $2 \\* $2` ]; then\n    echo true\n  else\n    echo false\n\
  \  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    if [ $(( $1 % $2 )) -eq 0 ]; then\n\
  \      is_simple_power $(( $1 / $2 )) $2\n    else\n      echo \"false\"\n    fi\n\
  \  else\n    echo \"false\"\n  fi"
- "  # Write your code here\n  echo \"Not implemented\""
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(($1/$2))\
  \ $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(($1/$2))\
  \ $2\n  fi"
- "  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0; $x / $n\" | bc)\n\
  \  if [ \"$result\" -eq \"$(echo \"scale=0; $n ^ $result\" | bc)\" ]; then\n   \
  \ echo \"true\"\n  else\n    echo \"false\"\n  fi"
- "  local x=$1\n  local n=$2\n  local result=$(echo \"$x $n\" | awk '{print log($1)/log($2)}')\n\
  \  if [[ $result =~ ^[0-9]+$ ]]; then\n    echo true\n  else\n    echo false\n \
  \ fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(($1/$2))\
  \ $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    if [ $(( $1 % $2 )) -eq 0 ]; then\n\
  \      is_simple_power $(( $1 / $2 )) $2\n    else\n      echo \"false\"\n    fi\n\
  \  else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n    echo\
  \ false\n  fi"
- "    local x=$1\n    local n=$2\n    local result=$(echo \"$x\" | awk '{print log($1)/log(2)}')\n\
  \    if [[ $result == *.* ]]; then\n        echo false\n    else\n        echo true\n\
  \    fi"
- "  local x=$1\n  local n=$2\n  local result=$(bc <<< \"$x == $n ^ ($x / $n)\")\n\
  \  if [[ $result -eq 1 ]]; then\n    echo true\n  else\n    echo false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -lt $2 ]; then\n    echo \"false\"\n  else\n    is_simple_power\
  \ $(($1/$2)) $2\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n\
  \    echo \"false\"\n  fi"
- "  local x=$1\n  local n=$2\n  local result=$(echo \"$x $n\" | awk '{print log($1)/log($2)}')\n\
  \  if [[ $result == *.* ]]; then\n    echo false\n  else\n    echo true\n  fi"
- "  if [ $1 -eq $2 ]; then\n    echo true\n  elif [ $1 -eq 1 ]; then\n    echo false\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  elif [ $(( $1 % $2 )) -eq 0 ]; then\n\
  \    is_simple_power $(( $1 / $2 )) $2\n  else\n    echo false\n  fi"
- "  # Write your code here\n  echo \"Not implemented\""
- "  if [ $1 -eq $(($2**$(echo \"l($1)/l($2)\" | bc -l | cut -d'.' -f1))) ]; then\n\
  \    echo true\n  else\n    echo false\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -lt $2 ]; then\n    echo \"false\"\n  else\n    is_simple_power\
  \ $(($1/$2)) $2\n  fi"
- "    if [ $1 -eq 1 ]; then\n        echo true\n    elif [ $1 -eq $2 ]; then\n  \
  \      echo true\n    elif [ $1 -gt $2 ]; then\n        is_simple_power $(( $1 /\
  \ $2 )) $2\n    else\n        echo false\n    fi"
- "    if [ $1 -eq 1 ]; then\n        echo true\n    elif [ $1 -eq $2 ]; then\n  \
  \      echo true\n    elif [ $1 -gt $2 ]; then\n        is_simple_power $(($1/$2))\
  \ $2\n    else\n        echo false\n    fi"
- "    local x=$1\n    local n=$2\n    local result=$(bc <<< \"$x == $n ^ $n\")\n\
  \    if [ $result -eq 1 ]; then\n        echo true\n    else\n        echo false\n\
  \    fi"
- "    if [ $1 -eq 1 ]; then\n        echo \"true\"\n    elif [ $1 -eq $2 ]; then\n\
  \        echo \"true\"\n    elif [ $1 -gt $2 ]; then\n        is_simple_power $(($1/$2))\
  \ $2\n    else\n        echo \"false\"\n    fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(( $1\
  \ / $2 )) $2\n  fi"
- "    local x=$1\n    local n=$2\n    local result=$(echo \"scale=0; $x / $n\" |\
  \ bc)\n    if [ $result -eq $(echo \"scale=0; $n ^ $result\" | bc) ]; then\n   \
  \     echo \"true\"\n    else\n        echo \"false\"\n    fi"
- "  # Write your code here\n  echo \"Not implemented\""
- "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo\
  \ \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(( $1 / $2 )) $2\n\
  \  else\n    echo \"false\"\n  fi"
- "  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
  \  elif [ $1 -lt $2 ]; then\n    echo false\n  else\n    is_simple_power $(($1/$2))\
  \ $2\n  fi"
language: sh
name: HumanEval_76_is_simple_power
prompt: '#!/bin/bash

  # Your task is to write a function that returns true if a number x is a simple

  # power of n and false in other cases.

  # x is a simple power of n if n**int=x

  # For example:

  # is_simple_power(1, 4) => true

  # is_simple_power(2, 2) => true

  # is_simple_power(8, 2) => true

  # is_simple_power(3, 2) => false

  # is_simple_power(3, 1) => false

  # is_simple_power(5, 3) => false

  #

  # $1 is an integer

  # $2 is an integer

  is_simple_power() {

  '
stop_tokens:
- '

  }'
tests: "}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"\
  16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate\
  \ \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n \
  \   [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\"\
  ) = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
  \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\
  \nrun_test"
