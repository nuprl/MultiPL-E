name: HumanEval_57_monotonic
language: humaneval_to_bash.py
prompt: "#!/bin/bash\n# Return True is list elements are monotonically increasing\
  \ or decreasing.\n# >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20,\
  \ 4, 10])\n# False\n# >>> monotonic([4, 1, 0, -10])\n# True\n#\n# $1 is a space-separated\
  \ list\nmonotonic() {\n"
tests: "}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"\
  true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
  \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
  \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\
  \ 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\n\
  run_test"
completions: ["    local list=($1)\n    local i\n    local len=${#list[@]}\n    local\
    \ inc=0\n    local dec=0\n    for ((i=0; i<len-1; i++)); do\n        if ((list[i]\
    \ < list[i+1])); then\n            inc=1\n        elif ((list[i] > list[i+1]));\
    \ then\n            dec=1\n        fi\n    done\n    ((inc + dec)) || return 0\n\
    \    return 1", "    local list=($1)\n    local direction=0\n    local last=${list[0]}\n\
    \    for i in ${list[@]:1}; do\n        if (( i > last )); then\n            if\
    \ (( direction < 0 )); then\n                return 1\n            fi\n      \
    \      direction=1\n        elif (( i < last )); then\n            if (( direction\
    \ > 0 )); then\n                return 1\n            fi\n            direction=-1\n\
    \        fi\n        last=$i\n    done\n    return 0", "    local -a list=($1)\n\
    \    local -a diffs\n    local i\n    for ((i=0; i<${#list[@]}-1; i++)); do\n\
    \        diffs[i]=$((list[i+1]-list[i]))\n    done\n    local -a uniq_diffs=($(echo\
    \ \"${diffs[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n    if [[ ${#uniq_diffs[@]}\
    \ -eq 1 ]]; then\n        return 0\n    elif [[ ${#uniq_diffs[@]} -eq 2 ]]; then\n\
    \        if [[ ${uniq_diffs[0]} -eq 0 || ${uniq_diffs[1]} -eq 0 ]]; then\n   \
    \         return 0\n        fi\n    fi\n    return 1", "    local -a arr=($1)\n\
    \    local -i i=0\n    local -i len=${#arr[@]}\n    local -i inc=0\n    local\
    \ -i dec=0\n    local -i res=0\n    local -i prev=0\n    local -i curr=0\n   \
    \ local -i next=0\n\n    if [ $len -lt 2 ]; then\n        return 0\n    fi\n\n\
    \    prev=${arr[0]}\n    curr=${arr[1]}\n    if [ $prev -lt $curr ]; then\n  \
    \      inc=1\n    elif [ $prev -gt $curr ]; then\n        dec=1\n    fi\n\n  \
    \  for ((i=1; i<$len-1; i++)); do\n        prev=${arr[$i]}\n        next=${arr[$i+1]}\n\
    \        if [ $prev -lt $next ]; then\n            if [ $dec -eq 1 ]; then\n \
    \               res=1\n                break\n            fi\n            inc=1\n\
    \        elif [ $prev -gt $next ]; then\n            if [ $inc -eq 1 ]; then\n\
    \                res=1\n                break\n            fi\n            dec=1\n\
    \        fi\n    done\n\n    return $res", "    local -a a=($1)\n    local -i\
    \ i=0\n    local -i n=${#a[@]}\n    local -i incr=0\n    local -i decr=0\n   \
    \ local -i result=0\n    while (( i < n-1 )); do\n        if (( a[i] < a[i+1]\
    \ )); then\n            (( incr++ ))\n        elif (( a[i] > a[i+1] )); then\n\
    \            (( decr++ ))\n        fi\n        (( i++ ))\n    done\n    (( incr\
    \ == n-1 || decr == n-1 )) && result=1\n    echo $result", "    local -a arr\n\
    \    IFS=' ' read -r -a arr <<< \"$1\"\n    local -i i\n    local -i len=${#arr[@]}\n\
    \    local -i inc=0\n    local -i dec=0\n    for ((i=0; i<len-1; i++)); do\n \
    \       if (( arr[i] < arr[i+1] )); then\n            (( inc++ ))\n        elif\
    \ (( arr[i] > arr[i+1] )); then\n            (( dec++ ))\n        fi\n    done\n\
    \    if (( inc == len-1 || dec == len-1 )); then\n        echo \"True\"\n    else\n\
    \        echo \"False\"\n    fi", "    local -a array\n    read -a array <<< \"\
    $1\"\n    local -i i\n    local -i len=${#array[@]}\n    local -i inc=0\n    local\
    \ -i dec=0\n    for ((i=0; i<len-1; i++)); do\n        if ((array[i] < array[i+1]));\
    \ then\n            inc=1\n        elif ((array[i] > array[i+1])); then\n    \
    \        dec=1\n        fi\n    done\n    ((inc == 1 && dec == 0)) || ((inc ==\
    \ 0 && dec == 1))", "    local list=($1)\n    local len=${#list[@]}\n    local\
    \ i=0\n    local increasing=0\n    local decreasing=0\n    local prev=${list[0]}\n\
    \    for ((i=1; i<len; i++)); do\n        if [[ ${list[i]} -gt $prev ]]; then\n\
    \            increasing=1\n        elif [[ ${list[i]} -lt $prev ]]; then\n   \
    \         decreasing=1\n        fi\n        if [[ $increasing -eq 1 && $decreasing\
    \ -eq 1 ]]; then\n            return 1\n        fi\n        prev=${list[i]}\n\
    \    done\n    return 0", "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n\
    \    local -a diffs\n    local -a abs_diffs\n    local -a sorted_diffs\n    local\
    \ -a sorted_abs_diffs\n    local -a sorted_diffs_asc\n    local -a sorted_diffs_desc\n\
    \    local -a sorted_abs_diffs_asc\n    local -a sorted_abs_diffs_desc\n    local\
    \ -a sorted_diffs_asc_str\n    local -a sorted_diffs_desc_str\n    local -a sorted_abs_diffs_asc_str\n\
    \    local -a sorted_abs_diffs_desc_str\n    local -a sorted_diffs_asc_str_joined\n\
    \    local -a sorted_diffs_desc_str_joined\n    local -a sorted_abs_diffs_asc_str_joined\n\
    \    local -a sorted_abs_diffs_desc_str_joined\n    local -a sorted_diffs_asc_str_joined_trimmed\n\
    \    local -a sorted_diffs_desc_str_joined_trimmed\n    local -a sorted_abs_diffs_asc_str_joined_trimmed\n\
    \    local -a sorted_abs_diffs_desc_str_joined_trimmed\n    local -a sorted_diffs_asc_str_joined_trimmed_joined\n\
    \    local -a sorted_diffs_desc_str_joined_trimmed_joined\n    local -a sorted_abs_diffs_asc_str_joined_trimmed_joined\n\
    \    local -a sorted_abs_diffs_desc_str_joined_trimmed_joined\n    local -a sorted_diffs_asc_str_joined_trimmed_joined_trimmed\n\
    \    local -a sorted_diffs_desc_str_joined_trimmed_joined_trimmed\n    local -a\
    \ sorted_abs_diffs_asc_str_joined_trimmed_joined_trimmed\n    local -a sorted_abs_diffs_desc_str_joined_trimmed_joined_trimmed\n\
    \    local -a sorted_diffs", "    local -a a=($1)\n    local -a b=($1)\n    local\
    \ -a c=($1)\n    local -a d=($1)\n    local -a e=($1)\n    local -a f=($1)\n \
    \   local -a g=($1)\n    local -a h=($1)\n    local -a i=($1)\n    local -a j=($1)\n\
    \    local -a k=($1)\n    local -a l=($1)\n    local -a m=($1)\n    local -a n=($1)\n\
    \    local -a o=($1)\n    local -a p=($1)\n    local -a q=($1)\n    local -a r=($1)\n\
    \    local -a s=($1)\n    local -a t=($1)\n    local -a u=($1)\n    local -a v=($1)\n\
    \    local -a w=($1)\n    local -a x=($1)\n    local -a y=($1)\n    local -a z=($1)\n\
    \    local -a aa=($1)\n    local -a ab=($1)\n    local -a ac=($1)\n    local -a\
    \ ad=($1)\n    local -a ae=($1)\n    local -a af=($1)\n    local -a ag=($1)\n\
    \    local -a ah=($1)\n    local -a ai=($1)\n    local -a aj=($1)\n    local -a\
    \ ak=($1)\n    local -a al=($1)\n    local -a am=($1)\n    local -a an=($1)\n\
    \    local -a ao=($1)\n    local -a ap=($1)\n    local -a aq=($1)\n    local -a\
    \ ar=($1)\n    local -a as=($1)\n    local -a at=($1)\n    local -a au=($1)\n\
    \    local -a av=($1)\n    local -a aw=($1)\n    local -a ax=($1)\n    local -a\
    \ ay", "    local -a list=($1)\n    local -i i=0\n    local -i n=${#list[@]}\n\
    \    local -i increasing=0\n    local -i decreasing=0\n    local -i diff=0\n \
    \   local -i prev_diff=0\n    local -i prev_diff_sign=0\n    local -i diff_sign=0\n\
    \    local -i prev_diff_sign_changed=0\n    local -i diff_sign_changed=0\n   \
    \ local -i prev_diff_sign_changed_count=0\n    local -i diff_sign_changed_count=0\n\
    \    local -i prev_diff_sign_changed_count_max=0\n    local -i diff_sign_changed_count_max=0\n\
    \    local -i prev_diff_sign_changed_count_max_index=0\n    local -i diff_sign_changed_count_max_index=0\n\
    \    local -i prev_diff_sign_changed_count_max_value=0\n    local -i diff_sign_changed_count_max_value=0\n\
    \    local -i prev_diff_sign_changed_count_max_value_index=0\n    local -i diff_sign_changed_count_max_value_index=0\n\
    \    local -i prev_diff_sign_changed_count_max_value_index_value=0\n    local\
    \ -i diff_sign_changed_count_max_value_index_value=0\n    local -i prev_diff_sign_changed_count_max_value_index_value_index=0\n\
    \    local -i diff_sign_changed_count_max_value_index_value_index=0\n    local\
    \ -i prev_diff_sign_changed_count_max_value_index_value_index_value=0\n    local\
    \ -i diff_sign_changed_count_max_value_index_value_index_value=0\n    local -i\
    \ prev_diff_sign_changed_count_max_value_index_value_index_value_index=0\n   \
    \ local -i diff_sign_changed_count_max_value_index_value_index_value_index=0\n\
    \    local -i prev_diff_", "    local -a arr\n    arr=($1)\n    local -i i\n \
    \   local -i len=${#arr[@]}\n    local -i incr=0\n    local -i decr=0\n    for\
    \ ((i=0; i<len-1; i++)); do\n        if (( arr[i] < arr[i+1] )); then\n      \
    \      incr=1\n        elif (( arr[i] > arr[i+1] )); then\n            decr=1\n\
    \        fi\n    done\n    (( incr == 1 && decr == 0 )) || (( incr == 0 && decr\
    \ == 1 ))", "    local -a arr\n    arr=($1)\n    local i\n    local len=${#arr[@]}\n\
    \    local inc=0\n    local dec=0\n    for ((i=0; i<len-1; i++)); do\n       \
    \ if ((arr[i] < arr[i+1])); then\n            inc=1\n        elif ((arr[i] > arr[i+1]));\
    \ then\n            dec=1\n        fi\n    done\n    ((inc == 1 && dec == 0))\
    \ || ((inc == 0 && dec == 1))", "    local -a arr\n    IFS=\" \" read -r -a arr\
    \ <<< \"$1\"\n    local -i i\n    local -i len=${#arr[@]}\n    local -i is_increasing=1\n\
    \    local -i is_decreasing=1\n    for ((i=1; i<len; i++)); do\n        if ((arr[i]\
    \ < arr[i-1])); then\n            is_increasing=0\n        elif ((arr[i] > arr[i-1]));\
    \ then\n            is_decreasing=0\n        fi\n    done\n    ((is_increasing\
    \ || is_decreasing))", "    local -a list=($1)\n    local -i i\n    local -i len=${#list[@]}\n\
    \    local -i increasing=1\n    local -i decreasing=1\n    for ((i=1; i<len; i++));\
    \ do\n        if ((list[i] < list[i-1])); then\n            increasing=0\n   \
    \     elif ((list[i] > list[i-1])); then\n            decreasing=0\n        fi\n\
    \    done\n    ((increasing || decreasing))", "    local -a list=($1)\n    local\
    \ -a diffs\n    local -i i\n    local -i n=${#list[@]}\n    local -i d\n    local\
    \ -i sign\n    local -i prev_sign\n    local -i prev_d\n    local -i prev_i\n\
    \    local -i is_monotonic=1\n    local -i is_increasing=1\n    local -i is_decreasing=1\n\
    \    local -i is_constant=1\n    local -i is_non_constant=1\n    local -i is_non_increasing=1\n\
    \    local -i is_non_decreasing=1\n    local -i is_strictly_increasing=1\n   \
    \ local -i is_strictly_decreasing=1\n    local -i is_non_strictly_increasing=1\n\
    \    local -i is_non_strictly_decreasing=1\n    local -i is_strictly_monotonic=1\n\
    \    local -i is_non_strictly_monotonic=1\n    local -i is_non_monotonic=1\n \
    \   local -i is_empty=1\n    local -i is_non_empty=1\n    local -i is_single=1\n\
    \    local -i is_non_single=1\n    local -i is_pair=1\n    local -i is_non_pair=1\n\
    \    local -i is_triple=1\n    local -i is_non_triple=1\n    local -i is_quadruple=1\n\
    \    local -i is_non_quadruple=1\n    local -i is_quintuple=1\n    local -i is_non_quintuple=1\n\
    \    local -i is_sextuple=1\n    local -i is_non_sextuple=1\n    local -i is_septuple=1\n\
    \    local -i is_non_septuple=1\n    local -i is_octuple=1\n    local -i is_non_octuple=1\n\
    \    local -i is_nontuple=1\n    local -i is_non_nontuple=1", "    local -a list=($1)\n\
    \    local -a diffs=()\n    local -i i=0\n    local -i len=${#list[@]}\n    local\
    \ -i prev=${list[0]}\n    local -i curr=0\n    local -i diff=0\n    local -i is_monotonic=1\n\
    \    local -i is_increasing=1\n    local -i is_decreasing=1\n\n    for ((i=1;\
    \ i<len; i++)); do\n        curr=${list[i]}\n        diff=$((curr - prev))\n \
    \       diffs+=($diff)\n        prev=$curr\n    done\n\n    for ((i=0; i<len;\
    \ i++)); do\n        if [[ ${diffs[i]} -lt 0 ]]; then\n            is_increasing=0\n\
    \        elif [[ ${diffs[i]} -gt 0 ]]; then\n            is_decreasing=0\n   \
    \     fi\n    done\n\n    if [[ $is_increasing -eq 0 && $is_decreasing -eq 0 ]];\
    \ then\n        is_monotonic=0\n    fi\n\n    echo $is_monotonic", "    local\
    \ -a arr=($1)\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i incr=0\n\
    \    local -i decr=0\n    local -i res=0\n    local -i prev=0\n    local -i curr=0\n\
    \n    if (( len < 2 )); then\n        echo \"True\"\n        return 0\n    fi\n\
    \n    prev=${arr[0]}\n    for (( i=1; i<len; i++ )); do\n        curr=${arr[i]}\n\
    \        if (( curr > prev )); then\n            incr=1\n        elif (( curr\
    \ < prev )); then\n            decr=1\n        fi\n        prev=$curr\n    done\n\
    \n    if (( incr == 1 && decr == 1 )); then\n        res=0\n    else\n       \
    \ res=1\n    fi\n\n    if (( res == 1 )); then\n        echo \"True\"\n    else\n\
    \        echo \"False\"\n    fi", "    local -a arr\n    local -i i\n    local\
    \ -i len\n    local -i incr\n    local -i prev\n    local -i curr\n    arr=($1)\n\
    \    len=${#arr[@]}\n    if (( len < 2 )); then\n        echo True\n        return\n\
    \    fi\n    prev=${arr[0]}\n    for (( i=1; i<len; i++ )); do\n        curr=${arr[i]}\n\
    \        if (( prev < curr )); then\n            incr=1\n            break\n \
    \       elif (( prev > curr )); then\n            incr=0\n            break\n\
    \        fi\n    done\n    for (( i=1; i<len; i++ )); do\n        curr=${arr[i]}\n\
    \        if (( incr && prev > curr )) || (( !incr && prev < curr )); then\n  \
    \          echo False\n            return\n        fi\n        prev=$curr\n  \
    \  done\n    echo True", "    local -a list=($1)\n    local -i i=0\n    local\
    \ -i len=${#list[@]}\n    local -i inc=0\n    local -i dec=0\n    local -i prev=0\n\
    \    local -i curr=0\n    local -i next=0\n    local -i ret=0\n\n    if [ $len\
    \ -eq 0 ]; then\n        return 0\n    fi\n\n    prev=${list[0]}\n    for ((i=1;\
    \ i<len; i++)); do\n        curr=${list[i]}\n        if [ $i -eq $((len-1)) ];\
    \ then\n            next=${list[0]}\n        else\n            next=${list[i+1]}\n\
    \        fi\n\n        if [ $curr -gt $prev ]; then\n            inc=1\n     \
    \   elif [ $curr -lt $prev ]; then\n            dec=1\n        fi\n\n        if\
    \ [ $inc -eq 1 -a $dec -eq 1 ]; then\n            ret=1\n            break\n \
    \       fi\n\n        if [ $inc -eq 1 -a $curr -gt $next ]; then\n           \
    \ ret=1\n            break\n        fi\n\n        if [ $dec -eq 1 -a $curr -lt\
    \ $next ]; then\n            ret=1\n            break\n        fi\n\n        prev=$curr\n\
    \    done\n\n    return $ret", "    local -a list=($1)\n    local -i i=0\n   \
    \ local -i n=${#list[@]}\n    local -i incr=0\n    local -i decr=0\n    local\
    \ -i res=0\n    local -i prev=0\n    local -i curr=0\n    if (( n < 2 )); then\n\
    \        echo \"True\"\n        return 0\n    fi\n    for (( i=0; i<n; i++ ));\
    \ do\n        curr=${list[$i]}\n        if (( i > 0 )); then\n            if ((\
    \ curr > prev )); then\n                incr=1\n            elif (( curr < prev\
    \ )); then\n                decr=1\n            fi\n        fi\n        prev=$curr\n\
    \    done\n    if (( incr == 1 && decr == 1 )); then\n        res=0\n    else\n\
    \        res=1\n    fi\n    if (( res == 1 )); then\n        echo \"True\"\n \
    \   else\n        echo \"False\"\n    fi\n    return $res", "    local -a array=($1)\n\
    \    local -a diffs\n    local i\n    local -i len=${#array[@]}\n    local -i\
    \ diff\n    local -i prev_diff\n    local -i is_monotonic=1\n\n    for ((i=1;\
    \ i<len; i++)); do\n        diffs[i]=$((array[i] - array[i-1]))\n    done\n\n\
    \    prev_diff=${diffs[1]}\n    for ((i=2; i<len; i++)); do\n        diff=${diffs[i]}\n\
    \        if ((diff * prev_diff < 0)); then\n            is_monotonic=0\n     \
    \       break\n        fi\n        prev_diff=$diff\n    done\n\n    echo $is_monotonic",
  "    local -a arr=($1)\n    local -i i=0\n    local -i len=${#arr[@]}\n    local\
    \ -i inc=0\n    local -i dec=0\n    local -i diff=0\n    local -i prev=0\n   \
    \ local -i curr=0\n    local -i next=0\n    if (( len < 2 )); then\n        echo\
    \ \"True\"\n        return\n    fi\n    prev=${arr[0]}\n    for (( i=1; i<len;\
    \ i++ )); do\n        curr=${arr[i]}\n        if (( i < len-1 )); then\n     \
    \       next=${arr[i+1]}\n        fi\n        diff=$(( curr - prev ))\n      \
    \  if (( diff > 0 )); then\n            inc=1\n        elif (( diff < 0 )); then\n\
    \            dec=1\n        fi\n        if (( inc && dec )); then\n          \
    \  echo \"False\"\n            return\n        fi\n        prev=$curr\n    done\n\
    \    echo \"True\"", "    local -a arr=($1)\n    local -i i=0\n    local -i len=${#arr[@]}\n\
    \    local -i incr=0\n    local -i decr=0\n    local -i res=0\n    if (( len <\
    \ 2 )); then\n        echo \"True\"\n        return 0\n    fi\n    for ((i=0;\
    \ i<len-1; i++)); do\n        if (( arr[i] < arr[i+1] )); then\n            incr=1\n\
    \        elif (( arr[i] > arr[i+1] )); then\n            decr=1\n        fi\n\
    \    done\n    if (( incr == 1 && decr == 1 )); then\n        res=0\n    else\n\
    \        res=1\n    fi\n    if (( res == 1 )); then\n        echo \"True\"\n \
    \   else\n        echo \"False\"\n    fi\n    return 0", "    local -a a=($1)\n\
    \    local -i n=${#a[@]}\n    local -i i\n    local -i incr=0\n    local -i decr=0\n\
    \    for ((i=1; i<n; i++)); do\n        if ((a[i] > a[i-1])); then\n         \
    \   incr=1\n        elif ((a[i] < a[i-1])); then\n            decr=1\n       \
    \ fi\n    done\n    ((incr + decr == 1))", "    local -a arr\n    local -i i\n\
    \    local -i len\n    local -i dir\n    local -i prev\n    local -i curr\n  \
    \  local -i ret\n\n    arr=($1)\n    len=${#arr[@]}\n    if (( len < 2 )); then\n\
    \        echo \"True\"\n        return 0\n    fi\n\n    prev=${arr[0]}\n    for\
    \ (( i=1; i<len; i++ )); do\n        curr=${arr[i]}\n        if (( prev < curr\
    \ )); then\n            dir=1\n            break\n        elif (( prev > curr\
    \ )); then\n            dir=-1\n            break\n        fi\n        prev=$curr\n\
    \    done\n\n    if (( dir == 0 )); then\n        echo \"True\"\n        return\
    \ 0\n    fi\n\n    for (( i=1; i<len; i++ )); do\n        curr=${arr[i]}\n   \
    \     if (( dir > 0 && curr < prev )) || (( dir < 0 && curr > prev )); then\n\
    \            ret=1\n            break\n        fi\n        prev=$curr\n    done\n\
    \n    if (( ret == 0 )); then\n        echo \"True\"\n    else\n        echo \"\
    False\"\n    fi", "    local -a a=($1)\n    local -a b=($1)\n    local -a c=($1)\n\
    \    local -a d=($1)\n    local -a e=($1)\n    local -a f=($1)\n    local -a g=($1)\n\
    \    local -a h=($1)\n    local -a i=($1)\n    local -a j=($1)\n    local -a k=($1)\n\
    \    local -a l=($1)\n    local -a m=($1)\n    local -a n=($1)\n    local -a o=($1)\n\
    \    local -a p=($1)\n    local -a q=($1)\n    local -a r=($1)\n    local -a s=($1)\n\
    \    local -a t=($1)\n    local -a u=($1)\n    local -a v=($1)\n    local -a w=($1)\n\
    \    local -a x=($1)\n    local -a y=($1)\n    local -a z=($1)\n    local -a A=($1)\n\
    \    local -a B=($1)\n    local -a C=($1)\n    local -a D=($1)\n    local -a E=($1)\n\
    \    local -a F=($1)\n    local -a G=($1)\n    local -a H=($1)\n    local -a I=($1)\n\
    \    local -a J=($1)\n    local -a K=($1)\n    local -a L=($1)\n    local -a M=($1)\n\
    \    local -a N=($1)\n    local -a O=($1)\n    local -a P=($1)\n    local -a Q=($1)\n\
    \    local -a R=($1)\n    local -a S=($1)\n    local -a T=($1)\n    local -a U=($1)\n\
    \    local -a V=($1)\n    local -a W=($1)\n    local -a X=($1)\n    local -a Y=($1)\n\
    \   ", "    local -a arr=($1)\n    local -a diffs\n    local i\n    for ((i=0;\
    \ i<${#arr[@]}-1; i++)); do\n        diffs[i]=$((arr[i+1]-arr[i]))\n    done\n\
    \    local -a unique_diffs=($(printf \"%s\\n\" \"${diffs[@]}\" | sort -u))\n \
    \   if [[ ${#unique_diffs[@]} -eq 1 ]]; then\n        return 0\n    elif [[ ${#unique_diffs[@]}\
    \ -eq 2 ]]; then\n        if [[ ${unique_diffs[0]} -lt 0 && ${unique_diffs[1]}\
    \ -gt 0 ]]; then\n            return 0\n        fi\n    fi\n    return 1", " \
    \   local -a list=($1)\n    local -i i=0\n    local -i len=${#list[@]}\n    local\
    \ -i direction=0\n    local -i last_value=0\n    local -i value=0\n    local -i\
    \ result=1\n\n    if (( len < 2 )); then\n        echo \"True\"\n        return\
    \ 0\n    fi\n\n    for (( i=0; i<len; i++ )); do\n        value=${list[$i]}\n\
    \        if (( i == 0 )); then\n            last_value=$value\n            continue\n\
    \        fi\n\n        if (( value > last_value )); then\n            if (( direction\
    \ == 0 )); then\n                direction=1\n            elif (( direction ==\
    \ -1 )); then\n                result=0\n                break\n            fi\n\
    \        elif (( value < last_value )); then\n            if (( direction == 0\
    \ )); then\n                direction=-1\n            elif (( direction == 1 ));\
    \ then\n                result=0\n                break\n            fi\n    \
    \    fi\n        last_value=$value\n    done\n\n    if (( result == 1 )); then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi", "    local\
    \ -a list=($1)\n    local -i i=0\n    local -i len=${#list[@]}\n    local -i increasing=0\n\
    \    local -i decreasing=0\n    local -i prev=0\n    local -i curr=0\n    local\
    \ -i next=0\n\n    if [ $len -lt 2 ]; then\n        echo \"True\"\n        return\n\
    \    fi\n\n    prev=${list[0]}\n    curr=${list[1]}\n    if [ $prev -lt $curr\
    \ ]; then\n        increasing=1\n    elif [ $prev -gt $curr ]; then\n        decreasing=1\n\
    \    fi\n\n    for ((i=1; i<len-1; i++)); do\n        prev=${list[i]}\n      \
    \  next=${list[i+1]}\n        if [ $prev -lt $next ]; then\n            if [ $decreasing\
    \ -eq 1 ]; then\n                echo \"False\"\n                return\n    \
    \        fi\n            increasing=1\n        elif [ $prev -gt $next ]; then\n\
    \            if [ $increasing -eq 1 ]; then\n                echo \"False\"\n\
    \                return\n            fi\n            decreasing=1\n        fi\n\
    \    done\n\n    echo \"True\"", "    local -a arr=($1)\n    local -i i\n    local\
    \ -i len=${#arr[@]}\n    local -i inc=0\n    local -i dec=0\n    for ((i=0; i<len-1;\
    \ i++)); do\n        if (( arr[i] < arr[i+1] )); then\n            (( inc++ ))\n\
    \        elif (( arr[i] > arr[i+1] )); then\n            (( dec++ ))\n       \
    \ fi\n    done\n    if (( inc == len-1 || dec == len-1 )); then\n        echo\
    \ True\n    else\n        echo False\n    fi", "    local -a list=($1)\n    local\
    \ -i i\n    local -i len=${#list[@]}\n    local -i inc=0\n    local -i dec=0\n\
    \    for ((i=0; i<len-1; i++)); do\n        if (( list[i] < list[i+1] )); then\n\
    \            (( inc++ ))\n        elif (( list[i] > list[i+1] )); then\n     \
    \       (( dec++ ))\n        fi\n    done\n    if (( inc == len-1 || dec == len-1\
    \ )); then\n        echo True\n    else\n        echo False\n    fi", "    local\
    \ -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local -i i=0\n    local -i\
    \ len=${#arr[@]}\n    local -i inc=0\n    local -i dec=0\n    local -i curr=0\n\
    \    local -i prev=0\n    local -i next=0\n    while [ $i -lt $len ]; do\n   \
    \     curr=${arr[$i]}\n        if [ $i -gt 0 ]; then\n            prev=${arr[$((i-1))]}\n\
    \            if [ $curr -gt $prev ]; then\n                inc=1\n           \
    \ elif [ $curr -lt $prev ]; then\n                dec=1\n            fi\n    \
    \    fi\n        if [ $i -lt $((len-1)) ]; then\n            next=${arr[$((i+1))]}\n\
    \            if [ $curr -gt $next ]; then\n                inc=1\n           \
    \ elif [ $curr -lt $next ]; then\n                dec=1\n            fi\n    \
    \    fi\n        if [ $inc -eq 1 ] && [ $dec -eq 1 ]; then\n            echo \"\
    False\"\n            return 1\n        fi\n        i=$((i+1))\n    done\n    echo\
    \ \"True\"\n    return 0", "    local list=($1)\n    local direction=0\n    local\
    \ last=${list[0]}\n    for i in ${list[@]:1}; do\n        if [[ $i -gt $last ]];\
    \ then\n            if [[ $direction -eq -1 ]]; then\n                return 1\n\
    \            fi\n            direction=1\n        elif [[ $i -lt $last ]]; then\n\
    \            if [[ $direction -eq 1 ]]; then\n                return 1\n     \
    \       fi\n            direction=-1\n        fi\n        last=$i\n    done\n\
    \    return 0", "    local -a list=($1)\n    local -a diffs\n    local -i i\n\
    \    local -i len=${#list[@]}\n    local -i sign=0\n    local -i diff\n    local\
    \ -i prev_diff=0\n    local -i is_monotonic=1\n\n    for ((i=1; i<len; i++));\
    \ do\n        diff=${list[i]}-${list[i-1]}\n        diffs[i]=$diff\n        if\
    \ ((sign == 0)); then\n            if ((diff > 0)); then\n                sign=1\n\
    \            elif ((diff < 0)); then\n                sign=-1\n            fi\n\
    \        else\n            if ((sign > 0 && diff < 0)) || ((sign < 0 && diff >\
    \ 0)); then\n                is_monotonic=0\n                break\n         \
    \   fi\n        fi\n        prev_diff=$diff\n    done\n\n    if ((is_monotonic));\
    \ then\n        echo True\n    else\n        echo False\n    fi", "    local -a\
    \ arr\n    local -i i\n    local -i len\n    local -i incr\n    local -i prev\n\
    \    local -i curr\n    local -i is_monotonic\n    arr=($1)\n    len=${#arr[@]}\n\
    \    if (( len < 2 )); then\n        echo \"True\"\n        return 0\n    fi\n\
    \    prev=${arr[0]}\n    incr=0\n    is_monotonic=1\n    for (( i=1; i<len; i++\
    \ )); do\n        curr=${arr[i]}\n        if (( curr > prev )); then\n       \
    \     if (( incr < 0 )); then\n                is_monotonic=0\n              \
    \  break\n            fi\n            incr=1\n        elif (( curr < prev ));\
    \ then\n            if (( incr > 0 )); then\n                is_monotonic=0\n\
    \                break\n            fi\n            incr=-1\n        fi\n    \
    \    prev=$curr\n    done\n    if (( is_monotonic )); then\n        echo \"True\"\
    \n    else\n        echo \"False\"\n    fi", "    local list=($1)\n    local i=0\n\
    \    local n=${#list[@]}\n    local increasing=1\n    local decreasing=1\n   \
    \ for ((i=1; i<n; i++)); do\n        if ((list[i] > list[i-1])); then\n      \
    \      decreasing=0\n        elif ((list[i] < list[i-1])); then\n            increasing=0\n\
    \        fi\n    done\n    ((increasing || decreasing))", "    local -n _monotonic_list=$1\n\
    \    local -i _monotonic_len=${#_monotonic_list[@]}\n    local -i _monotonic_i=0\n\
    \    local -i _monotonic_j=0\n    local -i _monotonic_k=0\n    local -i _monotonic_inc=0\n\
    \    local -i _monotonic_dec=0\n    local -i _monotonic_eq=0\n    local -i _monotonic_diff=0\n\
    \    local -i _monotonic_prev=0\n    local -i _monotonic_curr=0\n    local -i\
    \ _monotonic_next=0\n    local -i _monotonic_result=0\n    local -a _monotonic_sorted=()\n\
    \    local -a _monotonic_sorted_rev=()\n    local -a _monotonic_sorted_rev_rev=()\n\
    \    local -a _monotonic_sorted_rev_rev_rev=()\n    local -a _monotonic_sorted_rev_rev_rev_rev=()\n\
    \    local -a _monotonic_sorted_rev_rev_rev_rev_rev=()\n    local -a _monotonic_sorted_rev_rev_rev_rev_rev_rev=()\n\
    \    local -a _monotonic_sorted_rev_rev_rev_rev_rev_rev_rev=()\n    local -a _monotonic_sorted_rev_rev_rev_rev_rev_rev_rev_rev=()\n\
    \    local -a _monotonic_sorted_rev_rev_rev_rev_rev_rev_rev_rev_rev=()\n    local\
    \ -a _monotonic_sorted_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev=()\n    local -a\
    \ _monotonic_sorted_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev=()\n    local\
    \ -a _monotonic_sorted_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev", "    local -a\
    \ arr=($1)\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i inc=0\n\
    \    local -i dec=0\n    local -i ret=0\n\n    if (( len < 2 )); then\n      \
    \  return 0\n    fi\n\n    for (( i=1; i<len; i++ )); do\n        if (( arr[i]\
    \ > arr[i-1] )); then\n            inc=1\n        elif (( arr[i] < arr[i-1] ));\
    \ then\n            dec=1\n        fi\n    done\n\n    (( inc == 1 && dec == 0\
    \ )) && ret=1\n    (( inc == 0 && dec == 1 )) && ret=1\n\n    return $ret", " \
    \   local -a list=($1)\n    local -i i=0\n    local -i len=${#list[@]}\n    local\
    \ -i increasing=0\n    local -i decreasing=0\n    local -i result=0\n\n    if\
    \ [ $len -le 1 ]; then\n        result=1\n    else\n        if [ ${list[0]} -lt\
    \ ${list[1]} ]; then\n            increasing=1\n        else\n            decreasing=1\n\
    \        fi\n\n        for ((i=1; i<len-1; i++)); do\n            if [ $increasing\
    \ -eq 1 ]; then\n                if [ ${list[i]} -gt ${list[i+1]} ]; then\n  \
    \                  result=0\n                    break\n                fi\n \
    \           elif [ $decreasing -eq 1 ]; then\n                if [ ${list[i]}\
    \ -lt ${list[i+1]} ]; then\n                    result=0\n                   \
    \ break\n                fi\n            fi\n        done\n        result=1\n\
    \    fi\n\n    echo $result", "    local list=\"$1\"\n    local direction=\"$2\"\
    \n    local prev\n    local curr\n    local i\n    local n\n    local result=1\n\
    \    local -a array\n    array=($list)\n    n=${#array[@]}\n    if [[ $n -lt 2\
    \ ]]; then\n        echo 1\n        return\n    fi\n    if [[ $direction == \"\
    increasing\" ]]; then\n        for ((i=0; i<n-1; i++)); do\n            prev=${array[$i]}\n\
    \            curr=${array[$i+1]}\n            if [[ $prev -gt $curr ]]; then\n\
    \                result=0\n                break\n            fi\n        done\n\
    \    elif [[ $direction == \"decreasing\" ]]; then\n        for ((i=0; i<n-1;\
    \ i++)); do\n            prev=${array[$i]}\n            curr=${array[$i+1]}\n\
    \            if [[ $prev -lt $curr ]]; then\n                result=0\n      \
    \          break\n            fi\n        done\n    else\n        echo \"Error:\
    \ direction must be 'increasing' or 'decreasing'.\"\n        exit 1\n    fi\n\
    \    echo $result", "    local list=($1)\n    local i=0\n    local len=${#list[@]}\n\
    \    local increasing=${2:-True}\n    local decreasing=${3:-False}\n    local\
    \ result=${4:-True}\n    local prev=${list[0]}\n    for ((i=1; i<len; i++)); do\n\
    \        if [[ $increasing == True ]]; then\n            if [[ ${list[i]} -lt\
    \ $prev ]]; then\n                result=False\n                break\n      \
    \      fi\n        elif [[ $decreasing == True ]]; then\n            if [[ ${list[i]}\
    \ -gt $prev ]]; then\n                result=False\n                break\n  \
    \          fi\n        fi\n        prev=${list[i]}\n    done\n    echo $result",
  "    local -a list=($1)\n    local -i i=0\n    local -i len=${#list[@]}\n    local\
    \ -i inc=0\n    local -i dec=0\n    local -i prev=0\n    local -i curr=0\n   \
    \ local -i next=0\n    local -i result=0\n\n    if [ $len -lt 2 ]; then\n    \
    \    echo \"True\"\n        return 0\n    fi\n\n    prev=${list[0]}\n    curr=${list[1]}\n\
    \    if [ $prev -lt $curr ]; then\n        inc=1\n    elif [ $prev -gt $curr ];\
    \ then\n        dec=1\n    fi\n\n    for ((i=1; i<len-1; i++)); do\n        prev=${list[i]}\n\
    \        curr=${list[i+1]}\n        if [ $prev -lt $curr ]; then\n           \
    \ if [ $dec -eq 1 ]; then\n                echo \"False\"\n                return\
    \ 1\n            fi\n            inc=1\n        elif [ $prev -gt $curr ]; then\n\
    \            if [ $inc -eq 1 ]; then\n                echo \"False\"\n       \
    \         return 1\n            fi\n            dec=1\n        fi\n    done\n\n\
    \    echo \"True\"\n    return 0", "    local -a A=($1)\n    local -i i=0\n  \
    \  local -i n=${#A[@]}\n    local -i inc=0\n    local -i dec=0\n    local -i res=0\n\
    \    local -i prev=0\n    local -i curr=0\n    local -i next=0\n    if (( n <=\
    \ 1 )); then\n        res=1\n    else\n        for (( i=0; i<n-1; i++ )); do\n\
    \            prev=${A[i]}\n            curr=${A[i+1]}\n            if (( curr\
    \ > prev )); then\n                inc=1\n            elif (( curr < prev ));\
    \ then\n                dec=1\n            fi\n            if (( inc && dec ));\
    \ then\n                res=0\n                break\n            fi\n       \
    \ done\n        if (( ! res )); then\n            res=1\n            for (( i=0;\
    \ i<n-1; i++ )); do\n                prev=${A[i]}\n                curr=${A[i+1]}\n\
    \                if (( curr < prev )); then\n                    inc=1\n     \
    \           elif (( curr > prev )); then\n                    dec=1\n        \
    \        fi\n                if (( inc && dec )); then\n                    res=0\n\
    \                    break\n                fi\n            done\n        fi\n\
    \    fi\n    echo $res", "    local -a arr=($1)\n    local -a diffs\n    local\
    \ i\n    local len=${#arr[@]}\n    local prev=${arr[0]}\n    local diff\n    local\
    \ is_increasing=true\n    local is_decreasing=true\n    for ((i=1; i<len; i++));\
    \ do\n        diff=$((arr[i] - prev))\n        diffs+=($diff)\n        prev=${arr[i]}\n\
    \    done\n    for diff in ${diffs[@]}; do\n        if ((diff < 0)); then\n  \
    \          is_increasing=false\n        elif ((diff > 0)); then\n            is_decreasing=false\n\
    \        fi\n    done\n    if $is_increasing || $is_decreasing; then\n       \
    \ echo true\n    else\n        echo false\n    fi", "    local -a list=($1)\n\
    \    local -i i=0\n    local -i len=${#list[@]}\n    local -i inc=0\n    local\
    \ -i dec=0\n    local -i diff=0\n    local -i prev=0\n    local -i curr=0\n  \
    \  local -i next=0\n    local -i sign=0\n    local -i prev_sign=0\n    local -i\
    \ curr_sign=0\n    local -i next_sign=0\n    local -i prev_diff=0\n    local -i\
    \ curr_diff=0\n    local -i next_diff=0\n    local -i prev_inc=0\n    local -i\
    \ curr_inc=0\n    local -i next_inc=0\n    local -i prev_dec=0\n    local -i curr_dec=0\n\
    \    local -i next_dec=0\n    local -i prev_sign_diff=0\n    local -i curr_sign_diff=0\n\
    \    local -i next_sign_diff=0\n    local -i prev_sign_inc=0\n    local -i curr_sign_inc=0\n\
    \    local -i next_sign_inc=0\n    local -i prev_sign_dec=0\n    local -i curr_sign_dec=0\n\
    \    local -i next_sign_dec=0\n    local -i prev_sign_diff_inc=0\n    local -i\
    \ curr_sign_diff_inc=0\n    local -i next_sign_diff_inc=0\n    local -i prev_sign_diff_dec=0\n\
    \    local -i curr_sign_diff_dec=0\n    local -i next_sign_diff_dec=0\n    local\
    \ -i prev_sign_inc_dec=0\n    local -i curr_sign_inc_dec=0\n    local -i next_sign_inc_dec=0\n\
    \    local -i prev_sign_dec_inc=0\n    local -i curr_sign_dec_inc=0\n    local\
    \ -i next_sign_dec_inc=0\n    local -i prev_diff_inc=0\n    local -i", "    local\
    \ -a a=($1)\n    local -i i=0\n    local -i len=${#a[@]}\n    local -i inc=0\n\
    \    local -i dec=0\n    local -i res=0\n    local -i prev=0\n    local -i curr=0\n\
    \    local -i next=0\n\n    if [ $len -lt 2 ]; then\n        echo \"True\"\n \
    \       return 0\n    fi\n\n    for ((i=0; i<len-1; i++)); do\n        prev=${a[i]}\n\
    \        curr=${a[i+1]}\n        if [ $i -lt $((len-2)) ]; then\n            next=${a[i+2]}\n\
    \        fi\n\n        if [ $prev -lt $curr ]; then\n            inc=1\n     \
    \   elif [ $prev -gt $curr ]; then\n            dec=1\n        fi\n\n        if\
    \ [ $inc -eq 1 -a $dec -eq 1 ]; then\n            res=1\n            break\n \
    \       fi\n\n        if [ $i -eq $((len-2)) ]; then\n            if [ $inc -eq\
    \ 1 -a $curr -gt $next ]; then\n                res=1\n                break\n\
    \            elif [ $dec -eq 1 -a $curr -lt $next ]; then\n                res=1\n\
    \                break\n            fi\n        fi\n    done\n\n    if [ $res\
    \ -eq 1 ]; then\n        echo \"False\"\n    else\n        echo \"True\"\n   \
    \ fi", "    local list=\"$1\"\n    local prev=0\n    local curr=0\n    local direction=0\n\
    \    local i=0\n    local len=0\n    local ret=0\n\n    len=$(echo \"$list\" |\
    \ wc -w)\n    for i in $(seq 1 $len); do\n        curr=$(echo \"$list\" | cut\
    \ -d' ' -f$i)\n        if [ $i -eq 1 ]; then\n            prev=$curr\n       \
    \     continue\n        fi\n        if [ $curr -gt $prev ]; then\n           \
    \ if [ $direction -eq 0 ]; then\n                direction=1\n            elif\
    \ [ $direction -eq -1 ]; then\n                ret=1\n                break\n\
    \            fi\n        elif [ $curr -lt $prev ]; then\n            if [ $direction\
    \ -eq 0 ]; then\n                direction=-1\n            elif [ $direction -eq\
    \ 1 ]; then\n                ret=1\n                break\n            fi\n  \
    \      fi\n        prev=$curr\n    done\n    return $ret", "    local -a list=($1)\n\
    \    local -i i=0\n    local -i len=${#list[@]}\n    local -i is_increasing=0\n\
    \    local -i is_decreasing=0\n    local -i is_monotonic=0\n    local -i prev=${list[0]}\n\
    \    local -i curr=0\n\n    if (( len < 2 )); then\n        return 0\n    fi\n\
    \n    for (( i=1; i<len; i++ )); do\n        curr=${list[i]}\n        if (( curr\
    \ > prev )); then\n            is_increasing=1\n        elif (( curr < prev ));\
    \ then\n            is_decreasing=1\n        fi\n        if (( is_increasing &&\
    \ is_decreasing )); then\n            return 1\n        fi\n        prev=$curr\n\
    \    done\n    return 0", "    local list=$1\n    local -a array\n    local -i\
    \ i\n    local -i len\n    local -i is_increasing\n    local -i is_decreasing\n\
    \    local -i is_monotonic\n    local -i prev\n    local -i curr\n\n    array=($list)\n\
    \    len=${#array[@]}\n    is_increasing=1\n    is_decreasing=1\n    prev=${array[0]}\n\
    \    for ((i=1; i<len; i++)); do\n        curr=${array[i]}\n        if ((prev\
    \ > curr)); then\n            is_increasing=0\n        elif ((prev < curr)); then\n\
    \            is_decreasing=0\n        fi\n        prev=$curr\n    done\n    is_monotonic=$((is_increasing\
    \ || is_decreasing))\n    echo $is_monotonic", "    local -a a=($1)\n    local\
    \ -a b=($1)\n    local -a c=($1)\n    local -a d=($1)\n    local -a e=($1)\n \
    \   local -a f=($1)\n    local -a g=($1)\n    local -a h=($1)\n    local -a i=($1)\n\
    \    local -a j=($1)\n    local -a k=($1)\n    local -a l=($1)\n    local -a m=($1)\n\
    \    local -a n=($1)\n    local -a o=($1)\n    local -a p=($1)\n    local -a q=($1)\n\
    \    local -a r=($1)\n    local -a s=($1)\n    local -a t=($1)\n    local -a u=($1)\n\
    \    local -a v=($1)\n    local -a w=($1)\n    local -a x=($1)\n    local -a y=($1)\n\
    \    local -a z=($1)\n    local -a aa=($1)\n    local -a ab=($1)\n    local -a\
    \ ac=($1)\n    local -a ad=($1)\n    local -a ae=($1)\n    local -a af=($1)\n\
    \    local -a ag=($1)\n    local -a ah=($1)\n    local -a ai=($1)\n    local -a\
    \ aj=($1)\n    local -a ak=($1)\n    local -a al=($1)\n    local -a am=($1)\n\
    \    local -a an=($1)\n    local -a ao=($1)\n    local -a ap=($1)\n    local -a\
    \ aq=($1)\n    local -a ar=($1)\n    local -a as=($1)\n    local -a at=($1)\n\
    \    local -a au=($1)\n    local -a av=($1)\n    local -a aw=($1)\n    local -a\
    \ ax=($1)\n    local -a ay", "    local -a list=($1)\n    local -i i=0\n    local\
    \ -i len=${#list[@]}\n    local -i increasing=0\n    local -i decreasing=0\n \
    \   local -i result=0\n\n    if [ $len -lt 2 ]; then\n        echo 1\n       \
    \ return\n    fi\n\n    for ((i=0; i<len-1; i++)); do\n        if [ ${list[$i]}\
    \ -lt ${list[$i+1]} ]; then\n            increasing=1\n        elif [ ${list[$i]}\
    \ -gt ${list[$i+1]} ]; then\n            decreasing=1\n        fi\n    done\n\n\
    \    if [ $increasing -eq 1 -a $decreasing -eq 0 ]; then\n        result=1\n \
    \   elif [ $increasing -eq 0 -a $decreasing -eq 1 ]; then\n        result=1\n\
    \    fi\n\n    echo $result", "    local -a list=($1)\n    local -i i=0\n    local\
    \ -i len=${#list[@]}\n    local -i increasing=0\n    local -i decreasing=0\n \
    \   local -i equal=0\n    local -i result=0\n    local -i prev=0\n    local -i\
    \ curr=0\n\n    if [ $len -lt 2 ]; then\n        return 0\n    fi\n\n    prev=${list[0]}\n\
    \    for ((i=1; i<len; i++)); do\n        curr=${list[i]}\n        if [ $curr\
    \ -gt $prev ]; then\n            increasing=1\n        elif [ $curr -lt $prev\
    \ ]; then\n            decreasing=1\n        else\n            equal=1\n     \
    \   fi\n        prev=$curr\n    done\n\n    if [ $increasing -eq 1 ] && [ $decreasing\
    \ -eq 0 ] && [ $equal -eq 0 ]; then\n        result=1\n    elif [ $increasing\
    \ -eq 0 ] && [ $decreasing -eq 1 ] && [ $equal -eq 0 ]; then\n        result=1\n\
    \    fi\n\n    return $result", "    local -a arr=($1)\n    local -i i=0\n   \
    \ local -i len=${#arr[@]}\n    local -i inc=0\n    local -i dec=0\n    local -i\
    \ prev=${arr[0]}\n    local -i curr=0\n    for ((i=1; i<len; i++)); do\n     \
    \   curr=${arr[i]}\n        if ((curr > prev)); then\n            inc=1\n    \
    \    elif ((curr < prev)); then\n            dec=1\n        fi\n        if ((inc\
    \ && dec)); then\n            return 1\n        fi\n        prev=$curr\n    done\n\
    \    return 0", "    local -a arr=($1)\n    local -i i=0\n    local -i len=${#arr[@]}\n\
    \    local -i direction=0\n    local -i prev=${arr[0]}\n    local -i curr=0\n\
    \    local -i is_monotonic=1\n\n    while (( i < len )); do\n        curr=${arr[i]}\n\
    \        if (( direction == 0 )); then\n            if (( curr > prev )); then\n\
    \                direction=1\n            elif (( curr < prev )); then\n     \
    \           direction=-1\n            fi\n        elif (( direction == 1 )); then\n\
    \            if (( curr < prev )); then\n                is_monotonic=0\n    \
    \            break\n            fi\n        elif (( direction == -1 )); then\n\
    \            if (( curr > prev )); then\n                is_monotonic=0\n    \
    \            break\n            fi\n        fi\n        prev=$curr\n        ((\
    \ i++ ))\n    done\n\n    echo $is_monotonic", "    local -n _monotonic_list=$1\n\
    \    local _monotonic_list_len=${#_monotonic_list[@]}\n    local _monotonic_list_len_minus_one=$((_monotonic_list_len\
    \ - 1))\n    local _monotonic_list_len_minus_two=$((_monotonic_list_len - 2))\n\
    \    local _monotonic_list_len_minus_three=$((_monotonic_list_len - 3))\n    local\
    \ _monotonic_list_len_minus_four=$((_monotonic_list_len - 4))\n    local _monotonic_list_len_minus_five=$((_monotonic_list_len\
    \ - 5))\n    local _monotonic_list_len_minus_six=$((_monotonic_list_len - 6))\n\
    \    local _monotonic_list_len_minus_seven=$((_monotonic_list_len - 7))\n    local\
    \ _monotonic_list_len_minus_eight=$((_monotonic_list_len - 8))\n    local _monotonic_list_len_minus_nine=$((_monotonic_list_len\
    \ - 9))\n    local _monotonic_list_len_minus_ten=$((_monotonic_list_len - 10))\n\
    \    local _monotonic_list_len_minus_eleven=$((_monotonic_list_len - 11))\n  \
    \  local _monotonic_list_len_minus_twelve=$((_monotonic_list_len - 12))\n    local\
    \ _monotonic_list_len_minus_thirteen=$((_monotonic_list_len - 13))\n    local\
    \ _monotonic_list_len_minus_fourteen=$((_monotonic_list_len - 14))\n    local\
    \ _monotonic_list_len_minus_fifteen=$((_monotonic_list_len - 15))\n    local _monotonic_list_len_minus_sixteen=$((_monotonic_list_len\
    \ - 16))\n    local _monotonic_list_len_minus_seventeen=$((_monot", "    local\
    \ list=\"$1\"\n    local direction=\"$2\"\n    local prev=\n    local curr=\n\
    \    local result=1\n    for curr in $list; do\n        if [ -n \"$prev\" ]; then\n\
    \            if [ \"$direction\" = \"up\" ]; then\n                if [ \"$curr\"\
    \ -lt \"$prev\" ]; then\n                    result=0\n                    break\n\
    \                fi\n            else\n                if [ \"$curr\" -gt \"$prev\"\
    \ ]; then\n                    result=0\n                    break\n         \
    \       fi\n            fi\n        fi\n        prev=\"$curr\"\n    done\n   \
    \ echo $result", "    local -a a=($1)\n    local -i i=0\n    local -i n=${#a[@]}\n\
    \    local -i increasing=1\n    local -i decreasing=1\n    local -i result=0\n\
    \    if (( n < 2 )); then\n        echo \"True\"\n        return\n    fi\n   \
    \ while (( i < n-1 )); do\n        if (( a[i] > a[i+1] )); then\n            increasing=0\n\
    \        fi\n        if (( a[i] < a[i+1] )); then\n            decreasing=0\n\
    \        fi\n        (( i++ ))\n    done\n    if (( increasing || decreasing ));\
    \ then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi", "  \
    \  local -a arr\n    local -i i\n    local -i len\n    local -i inc\n    local\
    \ -i dec\n    local -i ret\n    local -i prev\n    local -i curr\n    local -i\
    \ next\n    arr=($1)\n    len=${#arr[@]}\n    inc=0\n    dec=0\n    for ((i=0;\
    \ i<len-1; i++)); do\n        prev=${arr[i]}\n        curr=${arr[i+1]}\n     \
    \   next=${arr[i+2]}\n        if [[ $curr -gt $prev ]]; then\n            inc=1\n\
    \        elif [[ $curr -lt $prev ]]; then\n            dec=1\n        fi\n   \
    \     if [[ $inc -eq 1 && $dec -eq 1 ]]; then\n            ret=1\n           \
    \ break\n        fi\n    done\n    if [[ $ret -eq 1 ]]; then\n        echo \"\
    False\"\n    else\n        echo \"True\"\n    fi", "    local -a arr=($1)\n  \
    \  local -i i=0\n    local -i len=${#arr[@]}\n    local -i inc=0\n    local -i\
    \ dec=0\n    local -i zero=0\n    local -i one=0\n    local -i two=0\n    local\
    \ -i three=0\n    local -i four=0\n    local -i five=0\n    local -i six=0\n \
    \   local -i seven=0\n    local -i eight=0\n    local -i nine=0\n    local -i\
    \ ten=0\n    local -i eleven=0\n    local -i twelve=0\n    local -i thirteen=0\n\
    \    local -i fourteen=0\n    local -i fifteen=0\n    local -i sixteen=0\n   \
    \ local -i seventeen=0\n    local -i eighteen=0\n    local -i nineteen=0\n   \
    \ local -i twenty=0\n    local -i twentyone=0\n    local -i twentytwo=0\n    local\
    \ -i twentythree=0\n    local -i twentyfour=0\n    local -i twentyfive=0\n   \
    \ local -i twentysix=0\n    local -i twentyseven=0\n    local -i twentyeight=0\n\
    \    local -i twentynine=0\n    local -i thirty=0\n    local -i thirtyone=0\n\
    \    local -i thirtytwo=0\n    local -i thirtythree=0\n    local -i thirtyfour=0\n\
    \    local -i thirtyfive=0\n    local -i thirtysix=0\n    local -i thirtyseven=0\n\
    \    local -i thirtyeight=0\n    local -i thirtynine=0\n    local -i forty=0\n\
    \    local -i fortyone=0\n    local -i fortytwo=0\n    local -i fortythree=0\n\
    \    local -i fortyfour=0\n    local -i fortyfive=0\n    local -i fortysix=0\n\
    \    local -i fortyseven=0\n    local -i fortyeight=0\n    local -i fortynine=0\n\
    \    local -i fifty=0\n    local -i fiftyone=0\n    local -i fiftytwo=0\n    local\
    \ -i fiftythree=0\n", "    local -a arr=($1)\n    local -i i\n    local -i len=${#arr[@]}\n\
    \    local -i inc=0\n    local -i dec=0\n    for ((i=0; i<len-1; i++)); do\n \
    \       if ((arr[i] < arr[i+1])); then\n            inc=1\n        elif ((arr[i]\
    \ > arr[i+1])); then\n            dec=1\n        fi\n    done\n    ((inc == 1\
    \ && dec == 0)) || ((inc == 0 && dec == 1))", "    local -a list=($1)\n    local\
    \ -i i=0\n    local -i len=${#list[@]}\n    local -i increasing=0\n    local -i\
    \ decreasing=0\n    local -i result=0\n\n    if [ $len -lt 2 ]; then\n       \
    \ echo \"True\"\n        return 0\n    fi\n\n    for ((i=0; i<len-1; i++)); do\n\
    \        if [ ${list[$i]} -lt ${list[$i+1]} ]; then\n            increasing=1\n\
    \        elif [ ${list[$i]} -gt ${list[$i+1]} ]; then\n            decreasing=1\n\
    \        fi\n    done\n\n    if [ $increasing -eq 1 -a $decreasing -eq 0 ]; then\n\
    \        result=1\n    elif [ $increasing -eq 0 -a $decreasing -eq 1 ]; then\n\
    \        result=1\n    fi\n\n    if [ $result -eq 1 ]; then\n        echo \"True\"\
    \n    else\n        echo \"False\"\n    fi", "    local -a arr\n    IFS=' ' read\
    \ -r -a arr <<< \"$1\"\n    local -a diffs\n    local i\n    for ((i=0; i < ${#arr[@]}-1;\
    \ i++)); do\n        diffs[i]=$((arr[i+1] - arr[i]))\n    done\n    local -a uniq_diffs\n\
    \    uniq_diffs=($(printf \"%s\\n\" \"${diffs[@]}\" | sort -u))\n    if (( ${#uniq_diffs[@]}\
    \ == 1 )); then\n        return 0\n    elif (( ${#uniq_diffs[@]} == 2 )); then\n\
    \        if (( ${uniq_diffs[0]} * ${uniq_diffs[1]} < 0 )); then\n            return\
    \ 0\n        fi\n    fi\n    return 1", "    local -a list=($1)\n    local -i\
    \ i=0\n    local -i len=${#list[@]}\n    local -i increasing=1\n    local -i decreasing=1\n\
    \    local -i prev=${list[0]}\n    local -i curr=0\n\n    if (( len < 2 )); then\n\
    \        return 0\n    fi\n\n    for (( i=1; i<len; i++ )); do\n        curr=${list[i]}\n\
    \        if (( curr > prev )); then\n            decreasing=0\n        elif ((\
    \ curr < prev )); then\n            increasing=0\n        fi\n        prev=$curr\n\
    \    done\n\n    (( increasing || decreasing ))", "    local -a list=($1)\n  \
    \  local -i i=0\n    local -i len=${#list[@]}\n    local -i direction=0\n    local\
    \ -i prev=0\n    local -i curr=0\n    local -i next=0\n    local -i result=0\n\
    \n    if (( len < 3 )); then\n        echo \"True\"\n        return 0\n    fi\n\
    \n    for (( i=0; i<len; i++ )); do\n        prev=${list[i]}\n        curr=${list[i+1]}\n\
    \        next=${list[i+2]}\n\n        if (( curr > prev )); then\n           \
    \ if (( direction == 0 )); then\n                direction=1\n            elif\
    \ (( direction == -1 )); then\n                echo \"False\"\n              \
    \  return 1\n            fi\n        elif (( curr < prev )); then\n          \
    \  if (( direction == 0 )); then\n                direction=-1\n            elif\
    \ (( direction == 1 )); then\n                echo \"False\"\n               \
    \ return 1\n            fi\n        fi\n    done\n\n    echo \"True\"\n    return\
    \ 0", "    local -a arr=(\"$@\")\n    local -a sorted=(\"${arr[@]}\")\n    local\
    \ -a reversed=(\"${arr[@]}\")\n    local -a sorted_reversed=(\"${arr[@]}\")\n\
    \    local -a reversed_sorted=(\"${arr[@]}\")\n    local -a sorted_reversed_sorted=(\"\
    ${arr[@]}\")\n    local -a reversed_sorted_reversed=(\"${arr[@]}\")\n    local\
    \ -a sorted_reversed_sorted_reversed=(\"${arr[@]}\")\n    local -a sorted_reversed_sorted_reversed_sorted=(\"\
    ${arr[@]}\")\n    local -a reversed_sorted_reversed_sorted_reversed=(\"${arr[@]}\"\
    )\n    local -a sorted_reversed_sorted_reversed_sorted_reversed=(\"${arr[@]}\"\
    )\n    local -a reversed_sorted_reversed_sorted_reversed_sorted=(\"${arr[@]}\"\
    )\n    local -a sorted_reversed_sorted_reversed_sorted_reversed_sorted=(\"${arr[@]}\"\
    )\n    local -a reversed_sorted_reversed_sorted_reversed_sorted_reversed=(\"${arr[@]}\"\
    )\n    local -a sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=(\"\
    ${arr[@]}\")\n    local -a reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=(\"\
    ${arr[@]}\")\n    local -a sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=(\"\
    ${arr[@]}\")\n    local -a reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=(\"\
    ${arr[@]}\")\n    local -a sorted_reversed_sorted_reversed_sorted_", "    local\
    \ list=\"$1\"\n    local -i len=${#list}\n    local -i i=0\n    local -i j=0\n\
    \    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local\
    \ -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n\
    \    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local\
    \ -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n\
    \    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local\
    \ -i g=0\n    local -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i\
    \ ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i\
    \ iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local\
    \ -i mmm=0\n    local -i nnn=0\n    local -i ooo", "    local list=$1\n    local\
    \ -a arr=($list)\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i\
    \ increasing=1\n    local -i decreasing=1\n    local -i prev=${arr[0]}\n    local\
    \ -i curr=0\n    for ((i=1; i<len; i++)); do\n        curr=${arr[i]}\n       \
    \ if ((curr > prev)); then\n            decreasing=0\n        elif ((curr < prev));\
    \ then\n            increasing=0\n        fi\n        prev=$curr\n    done\n \
    \   if ((increasing || decreasing)); then\n        echo True\n    else\n     \
    \   echo False\n    fi", "    local -a list=($1)\n    local -i i=0\n    local\
    \ -i len=${#list[@]}\n    local -i inc=0\n    local -i dec=0\n    local -i prev=${list[0]}\n\
    \    local -i curr=0\n    for ((i=1; i<len; i++)); do\n        curr=${list[i]}\n\
    \        if ((curr > prev)); then\n            inc=1\n        elif ((curr < prev));\
    \ then\n            dec=1\n        fi\n        prev=$curr\n    done\n    ((inc\
    \ == 1 && dec == 0)) || ((inc == 0 && dec == 1))", "    local list=\"$1\"\n  \
    \  local -i i=0\n    local -i len=0\n    local -i prev=0\n    local -i curr=0\n\
    \    local -i increasing=0\n    local -i decreasing=0\n    local -i result=0\n\
    \    local -a array=()\n\n    # Split list into array\n    IFS=' ' read -r -a\
    \ array <<< \"$list\"\n\n    # Get length of array\n    len=${#array[@]}\n\n \
    \   # Check if array is empty\n    if (( len == 0 )); then\n        echo \"True\"\
    \n        return 0\n    fi\n\n    # Set first element as previous\n    prev=${array[0]}\n\
    \n    # Loop through array\n    for (( i=1; i<len; i++ )); do\n        curr=${array[i]}\n\
    \n        # Check if current element is greater than previous\n        if (( curr\
    \ > prev )); then\n            increasing=1\n        fi\n\n        # Check if\
    \ current element is less than previous\n        if (( curr < prev )); then\n\
    \            decreasing=1\n        fi\n\n        # Check if both increasing and\
    \ decreasing are set\n        if (( increasing && decreasing )); then\n      \
    \      result=1\n            break\n        fi\n\n        # Set current element\
    \ as previous\n        prev=$curr\n    done\n\n    # Return result\n    if ((\
    \ result )); then\n        echo \"False\"\n    else\n        echo \"True\"\n \
    \   fi", "    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n\
    \    local -i is_increasing=1\n    local -i is_decreasing=1\n    local -i curr=${arr[0]}\n\
    \    local -i next=0\n    for ((i=1; i<len; i++)); do\n        next=${arr[i]}\n\
    \        if ((next > curr)); then\n            is_decreasing=0\n        elif ((next\
    \ < curr)); then\n            is_increasing=0\n        fi\n        curr=$next\n\
    \    done\n    if ((is_increasing || is_decreasing)); then\n        echo True\n\
    \    else\n        echo False\n    fi", "    local -a list=($1)\n    local -i\
    \ i=0\n    local -i len=${#list[@]}\n    local -i direction=0\n    local -i prev=0\n\
    \    local -i curr=0\n    local -i next=0\n    local -i result=0\n\n    # Check\
    \ if list is empty\n    if [ $len -eq 0 ]; then\n        return 1\n    fi\n\n\
    \    # Check if list has only one element\n    if [ $len -eq 1 ]; then\n     \
    \   return 0\n    fi\n\n    # Check if list has two elements\n    if [ $len -eq\
    \ 2 ]; then\n        if [ ${list[0]} -eq ${list[1]} ]; then\n            return\
    \ 0\n        else\n            return 1\n        fi\n    fi\n\n    # Check if\
    \ list has more than two elements\n    for ((i=0; i<$len-1; i++)); do\n      \
    \  prev=${list[$i]}\n        curr=${list[$i+1]}\n        next=${list[$i+2]}\n\n\
    \        if [ $i -eq 0 ]; then\n            if [ $prev -lt $curr ]; then\n   \
    \             direction=1\n            elif [ $prev -gt $curr ]; then\n      \
    \          direction=-1\n            else\n                direction=0\n     \
    \       fi\n        fi\n\n        if [ $i -eq $len-2 ]; then\n            if [\
    \ $direction -eq 1 ]; then\n                if [ $curr -gt $next ]; then\n   \
    \                 result=1\n                else\n                    result=0\n\
    \                fi\n            elif [ $direction -eq -1 ]; then\n          \
    \      if [ $curr -lt $next ]; then\n                    result=1\n          \
    \      else\n                    result=0\n                fi\n            else\n\
    \                if [ $curr -eq $next ]; then\n                    result=1\n\
    \                else\n                    result=0\n                fi\n    \
    \        fi\n        else\n            if [ $direction -eq 1 ]; then\n       \
    \         if [ $curr -gt $next ]; then\n                    result=0\n       \
    \             break\n                fi\n            elif [ $direction -eq -1\
    \ ]; then\n                if [ $curr -lt $next ]; then\n                    result=0\n\
    \                    break\n", "    local -a a=($1)\n    local -i i=0\n    local\
    \ -i n=${#a[@]}\n    local -i inc=0\n    local -i dec=0\n    local -i ret=0\n\
    \    local -i delta=0\n    local -i prev=0\n    local -i curr=0\n\n    if (( n\
    \ < 2 )); then\n        ret=1\n    else\n        prev=${a[0]}\n        for ((\
    \ i=1; i<n; i++ )); do\n            curr=${a[i]}\n            delta=$(( curr -\
    \ prev ))\n            if (( delta > 0 )); then\n                inc=1\n     \
    \       elif (( delta < 0 )); then\n                dec=1\n            fi\n  \
    \          if (( inc && dec )); then\n                break\n            fi\n\
    \            prev=$curr\n        done\n        if (( inc || dec )); then\n   \
    \         ret=1\n        fi\n    fi\n    echo $ret", "    local -a arr\n    IFS='\
    \ ' read -r -a arr <<< \"$1\"\n    local -i i\n    local -i len=${#arr[@]}\n \
    \   local -i prev=${arr[0]}\n    local -i incr=0\n    for ((i=1; i<len; i++));\
    \ do\n        if (( prev < arr[i] )); then\n            if (( incr == -1 )); then\n\
    \                return 1\n            fi\n            incr=1\n        elif ((\
    \ prev > arr[i] )); then\n            if (( incr == 1 )); then\n             \
    \   return 1\n            fi\n            incr=-1\n        fi\n        prev=${arr[i]}\n\
    \    done\n    return 0", "    local -a arr=($1)\n    local -i i=0\n    local\
    \ -i len=${#arr[@]}\n    local -i incr=0\n    local -i decr=0\n    local -i first=${arr[0]}\n\
    \    local -i second=${arr[1]}\n    local -i diff=$((first - second))\n    if\
    \ (( diff > 0 )); then\n        incr=1\n    elif (( diff < 0 )); then\n      \
    \  decr=1\n    fi\n    for (( i=1; i<len-1; i++ )); do\n        first=${arr[i]}\n\
    \        second=${arr[i+1]}\n        diff=$((first - second))\n        if (( diff\
    \ > 0 )); then\n            if (( incr == 0 )); then\n                return 1\n\
    \            fi\n        elif (( diff < 0 )); then\n            if (( decr ==\
    \ 0 )); then\n                return 1\n            fi\n        fi\n    done\n\
    \    return 0", "    local list=( $1 )\n    local direction=0\n    local last=${list[0]}\n\
    \    for i in ${list[@]:1}; do\n        if [ $direction -eq 0 ]; then\n      \
    \      if [ $i -gt $last ]; then\n                direction=1\n            elif\
    \ [ $i -lt $last ]; then\n                direction=-1\n            fi\n     \
    \   elif [ $direction -eq 1 ]; then\n            if [ $i -lt $last ]; then\n \
    \               return 1\n            fi\n        elif [ $direction -eq -1 ];\
    \ then\n            if [ $i -gt $last ]; then\n                return 1\n    \
    \        fi\n        fi\n        last=$i\n    done\n    return 0", "    local\
    \ -a arr\n    local -i i\n    local -i len\n    local -i incr\n    local -i decr\n\
    \    local -i result\n\n    arr=($1)\n    len=${#arr[@]}\n    incr=0\n    decr=0\n\
    \    for ((i=0; i<len-1; i++)); do\n        if (( arr[i] < arr[i+1] )); then\n\
    \            incr=1\n        elif (( arr[i] > arr[i+1] )); then\n            decr=1\n\
    \        fi\n    done\n    result=$(( incr + decr ))\n    if (( result == 1 ));\
    \ then\n        echo True\n    else\n        echo False\n    fi", "    local -a\
    \ list=($1)\n    local -a diffs\n    local -i i\n    local -i len=${#list[@]}\n\
    \    local -i diff\n    local -i prev_diff=0\n    local -i is_monotonic=1\n  \
    \  local -i is_increasing=1\n    local -i is_decreasing=1\n\n    for ((i=1; i<len;\
    \ i++)); do\n        diffs[i]=$((list[i] - list[i-1]))\n    done\n\n    for ((i=1;\
    \ i<len; i++)); do\n        diff=${diffs[i]}\n        if ((diff > 0)); then\n\
    \            is_decreasing=0\n        elif ((diff < 0)); then\n            is_increasing=0\n\
    \        fi\n        if ((prev_diff * diff < 0)); then\n            is_monotonic=0\n\
    \            break\n        fi\n        prev_diff=$diff\n    done\n\n    if ((is_increasing\
    \ || is_decreasing)); then\n        echo 1\n    else\n        echo 0\n    fi",
  "    local -a list=($1)\n    local -i i=0\n    local -i len=${#list[@]}\n    local\
    \ -i inc=0\n    local -i dec=0\n    local -i prev=${list[0]}\n    for ((i=1; i<len;\
    \ i++)); do\n        if ((prev < ${list[i]})); then\n            inc=1\n     \
    \   elif ((prev > ${list[i]})); then\n            dec=1\n        fi\n        prev=${list[i]}\n\
    \    done\n    ((inc + dec)) && return 1\n    return 0", "    local list=($1)\n\
    \    local len=${#list[@]}\n    local i=0\n    local direction=0\n    local prev=${list[0]}\n\
    \    while (( i < len )); do\n        if (( direction == 0 )); then\n        \
    \    if (( list[i] > prev )); then\n                direction=1\n            elif\
    \ (( list[i] < prev )); then\n                direction=-1\n            fi\n \
    \       elif (( direction == 1 )); then\n            if (( list[i] < prev ));\
    \ then\n                return 1\n            fi\n        elif (( direction ==\
    \ -1 )); then\n            if (( list[i] > prev )); then\n                return\
    \ 1\n            fi\n        fi\n        prev=${list[i]}\n        (( i++ ))\n\
    \    done\n    return 0", "    local list=\"$1\"\n    local increasing=0\n   \
    \ local decreasing=0\n    local prev=0\n    local curr=0\n    for i in $list;\
    \ do\n        if [ $i -gt $prev ]; then\n            increasing=1\n        elif\
    \ [ $i -lt $prev ]; then\n            decreasing=1\n        fi\n        if [ $increasing\
    \ -eq 1 ] && [ $decreasing -eq 1 ]; then\n            echo \"False\"\n       \
    \     return\n        fi\n        prev=$i\n    done\n    echo \"True\"", "   \
    \ local -a arr\n    local -i i\n    local -i len\n    local -i inc\n    local\
    \ -i dec\n    local -i ret\n\n    arr=($1)\n    len=${#arr[@]}\n    inc=0\n  \
    \  dec=0\n    for ((i=0; i<len-1; i++)); do\n        if ((arr[i] < arr[i+1]));\
    \ then\n            ((inc++))\n        elif ((arr[i] > arr[i+1])); then\n    \
    \        ((dec++))\n        fi\n    done\n    if ((inc == len-1 || dec == len-1));\
    \ then\n        ret=0\n    else\n        ret=1\n    fi\n    return $ret", "  \
    \  local list=($1)\n    local i=0\n    local len=${#list[@]}\n    local increasing=0\n\
    \    local decreasing=0\n    local result=0\n    local prev=${list[0]}\n    for\
    \ ((i=1; i<len; i++)); do\n        if [[ ${list[i]} -gt $prev ]]; then\n     \
    \       increasing=1\n        elif [[ ${list[i]} -lt $prev ]]; then\n        \
    \    decreasing=1\n        fi\n        prev=${list[i]}\n    done\n    if [[ $increasing\
    \ -eq 1 && $decreasing -eq 0 ]]; then\n        result=1\n    elif [[ $increasing\
    \ -eq 0 && $decreasing -eq 1 ]]; then\n        result=1\n    fi\n    echo $result",
  "    local -a a=($1)\n    local -a b=($1)\n    local -a c=($1)\n    local -a d=($1)\n\
    \    local -a e=($1)\n    local -a f=($1)\n    local -a g=($1)\n    local -a h=($1)\n\
    \    local -a i=($1)\n    local -a j=($1)\n    local -a k=($1)\n    local -a l=($1)\n\
    \    local -a m=($1)\n    local -a n=($1)\n    local -a o=($1)\n    local -a p=($1)\n\
    \    local -a q=($1)\n    local -a r=($1)\n    local -a s=($1)\n    local -a t=($1)\n\
    \    local -a u=($1)\n    local -a v=($1)\n    local -a w=($1)\n    local -a x=($1)\n\
    \    local -a y=($1)\n    local -a z=($1)\n    local -a A=($1)\n    local -a B=($1)\n\
    \    local -a C=($1)\n    local -a D=($1)\n    local -a E=($1)\n    local -a F=($1)\n\
    \    local -a G=($1)\n    local -a H=($1)\n    local -a I=($1)\n    local -a J=($1)\n\
    \    local -a K=($1)\n    local -a L=($1)\n    local -a M=($1)\n    local -a N=($1)\n\
    \    local -a O=($1)\n    local -a P=($1)\n    local -a Q=($1)\n    local -a R=($1)\n\
    \    local -a S=($1)\n    local -a T=($1)\n    local -a U=($1)\n    local -a V=($1)\n\
    \    local -a W=($1)\n    local -a X=($1)\n    local -a Y=($1)\n   ", "    local\
    \ -a arr=(\"$@\")\n    local -a diffs\n    local i\n    local n=${#arr[@]}\n \
    \   local -i sum=0\n    local -i diff\n    local -i prev=${arr[0]}\n    for ((i=1;\
    \ i<n; i++)); do\n        diff=$((arr[i] - prev))\n        prev=${arr[i]}\n  \
    \      diffs[i]=$diff\n        sum+=$diff\n    done\n    if ((sum == 0)); then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi", "    local\
    \ list=\"$1\"\n    local prev=0\n    local curr=0\n    local inc=0\n    local\
    \ dec=0\n    for i in $list; do\n        curr=$i\n        if [ $curr -gt $prev\
    \ ]; then\n            inc=1\n        elif [ $curr -lt $prev ]; then\n       \
    \     dec=1\n        fi\n        prev=$curr\n    done\n    [ $inc -eq 1 -a $dec\
    \ -eq 0 ] || [ $inc -eq 0 -a $dec -eq 1 ]", "    local -a arr=(\"$@\")\n    local\
    \ -a arr2=(\"$@\")\n    local -a arr3=(\"$@\")\n    local -a arr4=(\"$@\")\n \
    \   local -a arr5=(\"$@\")\n    local -a arr6=(\"$@\")\n    local -a arr7=(\"\
    $@\")\n    local -a arr8=(\"$@\")\n    local -a arr9=(\"$@\")\n    local -a arr10=(\"\
    $@\")\n    local -a arr11=(\"$@\")\n    local -a arr12=(\"$@\")\n    local -a\
    \ arr13=(\"$@\")\n    local -a arr14=(\"$@\")\n    local -a arr15=(\"$@\")\n \
    \   local -a arr16=(\"$@\")\n    local -a arr17=(\"$@\")\n    local -a arr18=(\"\
    $@\")\n    local -a arr19=(\"$@\")\n    local -a arr20=(\"$@\")\n    local -a\
    \ arr21=(\"$@\")\n    local -a arr22=(\"$@\")\n    local -a arr23=(\"$@\")\n \
    \   local -a arr24=(\"$@\")\n    local -a arr25=(\"$@\")\n    local -a arr26=(\"\
    $@\")\n    local -a arr27=(\"$@\")\n    local -a arr28=(\"$@\")\n    local -a\
    \ arr29=(\"$@\")\n    local -a arr30=(\"$@\")\n    local -a arr31=(\"$@\")\n \
    \   local -a arr32=(\"$@\")\n    local -a arr33=(\"$@\")\n    local -a arr34=(\"\
    $@\")\n    local -a arr35=(\"$@\")\n    local -a arr36=(\"$@\")\n    local -a\
    \ arr37=(\"$@\")\n    local -a arr38=(\"$@\")\n    local -a arr39=(\"$@\")\n \
    \   local -a arr40=(\"$@\")\n    local -a arr41=(\"$@\")\n    local -a arr42=(\"\
    $@\")\n    local -a arr43=(\"", "    local -a arr=(\"$@\")\n    local -a diffs\n\
    \    local i=0\n    local n=${#arr[@]}\n    local prev=${arr[0]}\n    local curr=0\n\
    \    local diff=0\n    local is_increasing=0\n    local is_decreasing=0\n\n  \
    \  for ((i=1; i<n; i++)); do\n        curr=${arr[i]}\n        diff=$((curr - prev))\n\
    \        diffs+=($diff)\n        prev=$curr\n    done\n\n    is_increasing=$(all_positive\
    \ \"${diffs[@]}\")\n    is_decreasing=$(all_negative \"${diffs[@]}\")\n\n    if\
    \ [[ $is_increasing -eq 1 || $is_decreasing -eq 1 ]]; then\n        echo 1\n \
    \   else\n        echo 0\n    fi", "    local -a list=($1)\n    local -i i\n \
    \   local -i n=${#list[@]}\n    local -i increasing=1\n    local -i decreasing=1\n\
    \    for ((i=1; i<n; i++)); do\n        if ((list[i] < list[i-1])); then\n   \
    \         increasing=0\n        elif ((list[i] > list[i-1])); then\n         \
    \   decreasing=0\n        fi\n    done\n    ((increasing || decreasing))", " \
    \   local -a list=($1)\n    local -i i=0\n    local -i len=${#list[@]}\n    local\
    \ -i incr=1\n    local -i decr=1\n    local -i ret=0\n\n    if (( len < 2 ));\
    \ then\n        ret=1\n    else\n        if (( list[0] < list[1] )); then\n  \
    \          for (( i=0; i<len-1; i++ )); do\n                if (( list[i] > list[i+1]\
    \ )); then\n                    incr=0\n                    break\n          \
    \      fi\n            done\n        elif (( list[0] > list[1] )); then\n    \
    \        for (( i=0; i<len-1; i++ )); do\n                if (( list[i] < list[i+1]\
    \ )); then\n                    decr=0\n                    break\n          \
    \      fi\n            done\n        fi\n        ret=$(( incr || decr ))\n   \
    \ fi\n    echo $ret", "    local -a a=($1)\n    local -i i=0\n    local -i n=${#a[@]}\n\
    \    local -i inc=0\n    local -i dec=0\n    local -i res=0\n    local -i prev=0\n\
    \    local -i curr=0\n    if (( n < 2 )); then\n        return 0\n    fi\n   \
    \ prev=${a[0]}\n    for (( i=1; i<n; i++ )); do\n        curr=${a[i]}\n      \
    \  if (( curr > prev )); then\n            inc=1\n        elif (( curr < prev\
    \ )); then\n            dec=1\n        fi\n        if (( inc && dec )); then\n\
    \            res=1\n            break\n        fi\n        prev=$curr\n    done\n\
    \    return $res", "    local -a arr=($1)\n    local -i i=0\n    local -i len=${#arr[@]}\n\
    \    local -i inc=0\n    local -i dec=0\n    local -i prev=${arr[0]}\n    local\
    \ -i curr=0\n    for ((i=1; i<len; i++)); do\n        curr=${arr[i]}\n       \
    \ if ((curr > prev)); then\n            inc=1\n        elif ((curr < prev)); then\n\
    \            dec=1\n        fi\n        prev=$curr\n    done\n    ((inc + dec))\
    \ && return 1\n    return 0", "    local -a arr=($1)\n    local -i i=0\n    local\
    \ -i len=${#arr[@]}\n    local -i inc=0\n    local -i dec=0\n    local -i prev=${arr[0]}\n\
    \    local -i curr=0\n    local -i diff=0\n\n    if [ $len -lt 2 ]; then\n   \
    \     return 0\n    fi\n\n    for ((i=1; i<len; i++)); do\n        curr=${arr[$i]}\n\
    \        diff=$((curr - prev))\n        if [ $diff -gt 0 ]; then\n           \
    \ inc=1\n        elif [ $diff -lt 0 ]; then\n            dec=1\n        fi\n \
    \       prev=$curr\n    done\n\n    if [ $inc -eq 1 -a $dec -eq 1 ]; then\n  \
    \      return 1\n    fi\n    return 0", "    local list=$1\n    local direction=0\n\
    \    local last=0\n    for i in $list; do\n        if [[ $direction == 0 ]]; then\n\
    \            if [[ $i -gt $last ]]; then\n                direction=1\n      \
    \      elif [[ $i -lt $last ]]; then\n                direction=-1\n         \
    \   fi\n        elif [[ $direction == 1 ]]; then\n            if [[ $i -lt $last\
    \ ]]; then\n                return 1\n            fi\n        elif [[ $direction\
    \ == -1 ]]; then\n            if [[ $i -gt $last ]]; then\n                return\
    \ 1\n            fi\n        fi\n        last=$i\n    done\n    return 0", " \
    \   local -a list=($1)\n    local -i i=0\n    local -i len=${#list[@]}\n    local\
    \ -i incr=0\n    local -i decr=0\n    local -i diff=0\n    local -i prev=0\n \
    \   local -i curr=0\n    local -i next=0\n    local -i is_monotonic=0\n\n    if\
    \ (( len == 1 )); then\n        echo \"True\"\n        return\n    fi\n\n    for\
    \ (( i=0; i<len; i++ )); do\n        curr=${list[$i]}\n        if (( i == 0 ));\
    \ then\n            prev=$curr\n            continue\n        fi\n        if ((\
    \ i == len-1 )); then\n            next=$curr\n        else\n            next=${list[$i+1]}\n\
    \        fi\n        diff=$(( curr - prev ))\n        if (( diff > 0 )); then\n\
    \            incr=1\n        elif (( diff < 0 )); then\n            decr=1\n \
    \       fi\n        prev=$curr\n    done\n\n    if (( incr == 1 && decr == 1 ));\
    \ then\n        is_monotonic=0\n    else\n        is_monotonic=1\n    fi\n\n \
    \   if (( is_monotonic == 1 )); then\n        echo \"True\"\n    else\n      \
    \  echo \"False\"\n    fi", "    local -a a=($1)\n    local -i i=0\n    local\
    \ -i n=${#a[@]}\n    local -i inc=0\n    local -i dec=0\n    while (( i < n -\
    \ 1 )); do\n        (( a[i] < a[i+1] )) && (( inc++ ))\n        (( a[i] > a[i+1]\
    \ )) && (( dec++ ))\n        (( i++ ))\n    done\n    (( inc == n - 1 || dec ==\
    \ n - 1 )) && echo True || echo False", "    local -a a=($1)\n    local -a b=($1)\n\
    \    local -a c=($1)\n    local -a d=($1)\n    local -a e=($1)\n    local -a f=($1)\n\
    \    local -a g=($1)\n    local -a h=($1)\n    local -a i=($1)\n    local -a j=($1)\n\
    \    local -a k=($1)\n    local -a l=($1)\n    local -a m=($1)\n    local -a n=($1)\n\
    \    local -a o=($1)\n    local -a p=($1)\n    local -a q=($1)\n    local -a r=($1)\n\
    \    local -a s=($1)\n    local -a t=($1)\n    local -a u=($1)\n    local -a v=($1)\n\
    \    local -a w=($1)\n    local -a x=($1)\n    local -a y=($1)\n    local -a z=($1)\n\
    \    local -a aa=($1)\n    local -a ab=($1)\n    local -a ac=($1)\n    local -a\
    \ ad=($1)\n    local -a ae=($1)\n    local -a af=($1)\n    local -a ag=($1)\n\
    \    local -a ah=($1)\n    local -a ai=($1)\n    local -a aj=($1)\n    local -a\
    \ ak=($1)\n    local -a al=($1)\n    local -a am=($1)\n    local -a an=($1)\n\
    \    local -a ao=($1)\n    local -a ap=($1)\n    local -a aq=($1)\n    local -a\
    \ ar=($1)\n    local -a as=($1)\n    local -a at=($1)\n    local -a au=($1)\n\
    \    local -a av=($1)\n    local -a aw=($1)\n    local -a ax=($1)\n    local -a\
    \ ay", "    local -a list=($1)\n    local -i i\n    local -i len=${#list[@]}\n\
    \    local -i inc=0\n    local -i dec=0\n    local -i eq=0\n    local -i ret=0\n\
    \    local -i prev=${list[0]}\n    for ((i=1; i<len; i++)); do\n        if [[\
    \ ${list[i]} -gt $prev ]]; then\n            inc=1\n        elif [[ ${list[i]}\
    \ -lt $prev ]]; then\n            dec=1\n        else\n            eq=1\n    \
    \    fi\n        if [[ $inc -eq 1 && $dec -eq 1 ]]; then\n            ret=1\n\
    \            break\n        fi\n        prev=${list[i]}\n    done\n    if [[ $ret\
    \ -eq 0 ]]; then\n        if [[ $inc -eq 1 ]]; then\n            echo \"True\"\
    \n        elif [[ $dec -eq 1 ]]; then\n            echo \"True\"\n        elif\
    \ [[ $eq -eq 1 ]]; then\n            echo \"True\"\n        else\n           \
    \ echo \"False\"\n        fi\n    else\n        echo \"False\"\n    fi", "   \
    \ local -a arr\n    local -i i\n    local -i len\n    local -i inc\n    local\
    \ -i dec\n    local -i ret\n    arr=($1)\n    len=${#arr[@]}\n    inc=0\n    dec=0\n\
    \    for ((i=0; i<len-1; i++)); do\n        if ((arr[i] < arr[i+1])); then\n \
    \           inc=1\n        fi\n        if ((arr[i] > arr[i+1])); then\n      \
    \      dec=1\n        fi\n    done\n    ret=$((inc && dec))\n    if ((ret)); then\n\
    \        echo False\n    else\n        echo True\n    fi", "    local -a arr=(\"\
    $@\")\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i inc=0\n   \
    \ local -i dec=0\n    local -i eq=0\n    local -i ret=0\n    local -i prev=0\n\
    \    local -i curr=0\n\n    if [ $len -eq 0 ]; then\n        ret=1\n    else\n\
    \        prev=${arr[0]}\n        for ((i=1; i<len; i++)); do\n            curr=${arr[i]}\n\
    \            if [ $curr -gt $prev ]; then\n                inc=1\n           \
    \ elif [ $curr -lt $prev ]; then\n                dec=1\n            else\n  \
    \              eq=1\n            fi\n            prev=$curr\n        done\n  \
    \      if [ $inc -eq 1 -a $dec -eq 0 -a $eq -eq 0 ]; then\n            ret=1\n\
    \        elif [ $inc -eq 0 -a $dec -eq 1 -a $eq -eq 0 ]; then\n            ret=1\n\
    \        fi\n    fi\n    echo $ret", "    local -a list=($1)\n    local -i i=0\n\
    \    local -i len=${#list[@]}\n    local -i inc=0\n    local -i dec=0\n    local\
    \ -i diff=0\n    local -i prev=0\n    local -i curr=0\n    local -i next=0\n \
    \   local -i is_monotonic=0\n\n    if [ $len -eq 1 ]; then\n        echo 1\n \
    \       return\n    fi\n\n    for ((i=0; i<len; i++)); do\n        curr=${list[$i]}\n\
    \        if [ $i -eq 0 ]; then\n            prev=$curr\n            continue\n\
    \        fi\n        if [ $i -eq $((len-1)) ]; then\n            next=$curr\n\
    \            break\n        fi\n        next=${list[$((i+1))]}\n        diff=$((curr-prev))\n\
    \        if [ $diff -gt 0 ]; then\n            inc=1\n        elif [ $diff -lt\
    \ 0 ]; then\n            dec=1\n        fi\n        if [ $inc -eq 1 ] && [ $dec\
    \ -eq 1 ]; then\n            is_monotonic=0\n            break\n        fi\n \
    \       prev=$curr\n    done\n\n    if [ $is_monotonic -eq 0 ]; then\n       \
    \ echo 0\n        return\n    fi\n\n    diff=$((next-curr))\n    if [ $diff -gt\
    \ 0 ] && [ $inc -eq 1 ]; then\n        is_monotonic=1\n    elif [ $diff -lt 0\
    \ ] && [ $dec -eq 1 ]; then\n        is_monotonic=1\n    fi\n\n    echo $is_monotonic",
  "    local -a a=($1)\n    local -i i=0\n    local -i n=${#a[@]}\n    local -i inc=0\n\
    \    local -i dec=0\n    local -i res=0\n    if (( n < 2 )); then\n        return\
    \ 1\n    fi\n    for (( i=1; i<n; i++ )); do\n        if (( a[i] > a[i-1] ));\
    \ then\n            inc=1\n        elif (( a[i] < a[i-1] )); then\n          \
    \  dec=1\n        fi\n        if (( inc && dec )); then\n            return 1\n\
    \        fi\n    done\n    return 0", "    local -a a=($1)\n    local -i i=0\n\
    \    local -i n=${#a[@]}\n    local -i inc=0\n    local -i dec=0\n    local -i\
    \ diff=0\n    local -i prev=0\n    local -i curr=0\n    local -i next=0\n    if\
    \ [ $n -lt 2 ]; then\n        return 0\n    fi\n    prev=${a[0]}\n    for ((i=1;\
    \ i<n; i++)); do\n        curr=${a[i]}\n        if [ $i -lt $((n-1)) ]; then\n\
    \            next=${a[i+1]}\n        fi\n        diff=$((curr-prev))\n       \
    \ if [ $diff -gt 0 ]; then\n            inc=1\n        elif [ $diff -lt 0 ]; then\n\
    \            dec=1\n        fi\n        if [ $inc -eq 1 -a $dec -eq 1 ]; then\n\
    \            return 1\n        fi\n        if [ $inc -eq 1 -a $diff -lt 0 ]; then\n\
    \            return 1\n        fi\n        if [ $dec -eq 1 -a $diff -gt 0 ]; then\n\
    \            return 1\n        fi\n        prev=$curr\n    done\n    return 0",
  "    local -a arr=($1)\n    local -i i=0\n    local -i len=${#arr[@]}\n    local\
    \ -i inc=0\n    local -i dec=0\n    local -i ret=0\n\n    if [ $len -lt 2 ]; then\n\
    \        echo \"True\"\n        return 0\n    fi\n\n    for ((i=0; i<$len-1; i++));\
    \ do\n        if [ ${arr[$i]} -lt ${arr[$i+1]} ]; then\n            inc=1\n  \
    \      elif [ ${arr[$i]} -gt ${arr[$i+1]} ]; then\n            dec=1\n       \
    \ fi\n    done\n\n    if [ $inc -eq 1 -a $dec -eq 0 ]; then\n        ret=1\n \
    \   elif [ $inc -eq 0 -a $dec -eq 1 ]; then\n        ret=1\n    fi\n\n    if [\
    \ $ret -eq 1 ]; then\n        echo \"True\"\n    else\n        echo \"False\"\n\
    \    fi", "    local -a list=($1)\n    local -i i=0\n    local -i len=${#list[@]}\n\
    \    local -i increasing=0\n    local -i decreasing=0\n    local -i prev=${list[0]}\n\
    \    local -i curr=0\n\n    for ((i=1; i<len; i++)); do\n        curr=${list[i]}\n\
    \        if ((curr > prev)); then\n            increasing=1\n        elif ((curr\
    \ < prev)); then\n            decreasing=1\n        fi\n        if ((increasing\
    \ && decreasing)); then\n            echo \"False\"\n            return 1\n  \
    \      fi\n        prev=$curr\n    done\n    echo \"True\"\n    return 0", " \
    \   local -a arr\n    local -i i\n    local -i len\n    local -i increasing\n\
    \    local -i decreasing\n    IFS=' ' read -r -a arr <<< \"$1\"\n    len=${#arr[@]}\n\
    \    increasing=1\n    decreasing=1\n    for ((i=1; i<len; i++)); do\n       \
    \ if [[ ${arr[i]} -lt ${arr[i-1]} ]]; then\n            increasing=0\n       \
    \ elif [[ ${arr[i]} -gt ${arr[i-1]} ]]; then\n            decreasing=0\n     \
    \   fi\n    done\n    if [[ $increasing -eq 1 || $decreasing -eq 1 ]]; then\n\
    \        echo True\n    else\n        echo False\n    fi", "    local -a list=($1)\n\
    \    local -i i=0\n    local -i len=${#list[@]}\n    local -i increasing=0\n \
    \   local -i decreasing=0\n    local -i equal=0\n    local -i prev=0\n    local\
    \ -i curr=0\n    local -i next=0\n    local -i result=0\n\n    if [ $len -lt 2\
    \ ]; then\n        echo \"True\"\n        return 0\n    fi\n\n    prev=${list[0]}\n\
    \    curr=${list[1]}\n    if [ $prev -lt $curr ]; then\n        increasing=1\n\
    \    elif [ $prev -gt $curr ]; then\n        decreasing=1\n    else\n        equal=1\n\
    \    fi\n\n    for ((i=2; i<$len; i++)); do\n        next=${list[$i]}\n      \
    \  if [ $increasing -eq 1 ]; then\n            if [ $curr -gt $next ]; then\n\
    \                echo \"False\"\n                return 1\n            fi\n  \
    \      elif [ $decreasing -eq 1 ]; then\n            if [ $curr -lt $next ]; then\n\
    \                echo \"False\"\n                return 1\n            fi\n  \
    \      elif [ $equal -eq 1 ]; then\n            if [ $curr -lt $next ]; then\n\
    \                increasing=1\n            elif [ $curr -gt $next ]; then\n  \
    \              decreasing=1\n            fi\n        fi\n        curr=$next\n\
    \    done\n\n    echo \"True\"\n    return 0", "    local -a arr\n    local -i\
    \ i\n    local -i len\n    local -i inc\n    local -i dec\n    local -i ret\n\
    \    arr=($1)\n    len=${#arr[@]}\n    inc=1\n    dec=1\n    for ((i=1; i<len;\
    \ i++)); do\n        if [[ ${arr[i]} -gt ${arr[i-1]} ]]; then\n            dec=0\n\
    \        elif [[ ${arr[i]} -lt ${arr[i-1]} ]]; then\n            inc=0\n     \
    \   fi\n    done\n    ret=$(( inc || dec ))\n    echo $ret", "    local -a arr=($1)\n\
    \    local -i i=0\n    local -i len=${#arr[@]}\n    local -i inc=0\n    local\
    \ -i dec=0\n    local -i res=0\n    local -i prev=0\n    local -i curr=0\n   \
    \ if (( len < 2 )); then\n        echo \"True\"\n        return 0\n    fi\n  \
    \  for (( i=0; i<len; i++ )); do\n        curr=${arr[$i]}\n        if (( i > 0\
    \ )); then\n            if (( curr > prev )); then\n                (( inc++ ))\n\
    \            elif (( curr < prev )); then\n                (( dec++ ))\n     \
    \       fi\n        fi\n        prev=$curr\n    done\n    if (( inc > 0 && dec\
    \ > 0 )); then\n        echo \"False\"\n        return 1\n    else\n        echo\
    \ \"True\"\n        return 0\n    fi", "    local -a a=($1)\n    local -a b=($1)\n\
    \    local -a c=($1)\n    local -a d=($1)\n    local -a e=($1)\n    local -a f=($1)\n\
    \    local -a g=($1)\n    local -a h=($1)\n    local -a i=($1)\n    local -a j=($1)\n\
    \    local -a k=($1)\n    local -a l=($1)\n    local -a m=($1)\n    local -a n=($1)\n\
    \    local -a o=($1)\n    local -a p=($1)\n    local -a q=($1)\n    local -a r=($1)\n\
    \    local -a s=($1)\n    local -a t=($1)\n    local -a u=($1)\n    local -a v=($1)\n\
    \    local -a w=($1)\n    local -a x=($1)\n    local -a y=($1)\n    local -a z=($1)\n\
    \    local -a aa=($1)\n    local -a ab=($1)\n    local -a ac=($1)\n    local -a\
    \ ad=($1)\n    local -a ae=($1)\n    local -a af=($1)\n    local -a ag=($1)\n\
    \    local -a ah=($1)\n    local -a ai=($1)\n    local -a aj=($1)\n    local -a\
    \ ak=($1)\n    local -a al=($1)\n    local -a am=($1)\n    local -a an=($1)\n\
    \    local -a ao=($1)\n    local -a ap=($1)\n    local -a aq=($1)\n    local -a\
    \ ar=($1)\n    local -a as=($1)\n    local -a at=($1)\n    local -a au=($1)\n\
    \    local -a av=($1)\n    local -a aw=($1)\n    local -a ax=($1)\n    local -a\
    \ ay", "    local list=($1)\n    local i=0\n    local n=${#list[@]}\n    local\
    \ increasing=0\n    local decreasing=0\n    local result=0\n    while [ $i -lt\
    \ $n ]; do\n        if [ $i -eq 0 ]; then\n            ((increasing++))\n    \
    \        ((decreasing++))\n        else\n            if [ ${list[$i]} -gt ${list[$i-1]}\
    \ ]; then\n                ((increasing++))\n            elif [ ${list[$i]} -lt\
    \ ${list[$i-1]} ]; then\n                ((decreasing++))\n            fi\n  \
    \      fi\n        ((i++))\n    done\n    if [ $increasing -eq $n ] || [ $decreasing\
    \ -eq $n ]; then\n        result=1\n    fi\n    echo $result", "    local -a arr=($1)\n\
    \    local -i i=0\n    local -i len=${#arr[@]}\n    local -i inc=0\n    local\
    \ -i dec=0\n    local -i eq=0\n    local -i res=0\n    local -i prev=0\n    local\
    \ -i curr=0\n    local -i next=0\n    local -i prev_eq=0\n    local -i curr_eq=0\n\
    \    local -i next_eq=0\n    local -i prev_inc=0\n    local -i curr_inc=0\n  \
    \  local -i next_inc=0\n    local -i prev_dec=0\n    local -i curr_dec=0\n   \
    \ local -i next_dec=0\n    local -i prev_eq_inc=0\n    local -i curr_eq_inc=0\n\
    \    local -i next_eq_inc=0\n    local -i prev_eq_dec=0\n    local -i curr_eq_dec=0\n\
    \    local -i next_eq_dec=0\n    local -i prev_inc_eq=0\n    local -i curr_inc_eq=0\n\
    \    local -i next_inc_eq=0\n    local -i prev_dec_eq=0\n    local -i curr_dec_eq=0\n\
    \    local -i next_dec_eq=0\n    local -i prev_inc_dec=0\n    local -i curr_inc_dec=0\n\
    \    local -i next_inc_dec=0\n    local -i prev_dec_inc=0\n    local -i curr_dec_inc=0\n\
    \    local -i next_dec_inc=0\n    local -i prev_inc_eq_dec=0\n    local -i curr_inc_eq_dec=0\n\
    \    local -i next_inc_eq_dec=0\n    local -i prev_dec_eq_inc=0\n    local -i\
    \ curr_dec_eq_inc=0\n    local -i next_dec_eq_inc=0\n    local -i prev_inc_dec_eq=0\n\
    \    local -i curr_inc", "    local -a arr=($1)\n    local -i i=0\n    local -i\
    \ len=${#arr[@]}\n    local -i direction=0\n    local -i last\n    local -i curr\n\
    \n    if (( len < 2 )); then\n        return 0\n    fi\n\n    last=${arr[0]}\n\
    \    for (( i=1; i<len; i++ )); do\n        curr=${arr[i]}\n        if (( curr\
    \ > last )); then\n            if (( direction < 0 )); then\n                return\
    \ 1\n            fi\n            direction=1\n        elif (( curr < last ));\
    \ then\n            if (( direction > 0 )); then\n                return 1\n \
    \           fi\n            direction=-1\n        fi\n        last=$curr\n   \
    \ done\n    return 0", "    local -a arr\n    local -i i\n    local -i len\n \
    \   local -i direction\n    local -i prev\n    local -i curr\n    arr=($1)\n \
    \   len=${#arr[@]}\n    if (( len < 2 )); then\n        echo True\n        return\n\
    \    fi\n    prev=${arr[0]}\n    direction=0\n    for (( i=1; i<len; i++ )); do\n\
    \        curr=${arr[i]}\n        if (( curr > prev )); then\n            if ((\
    \ direction < 0 )); then\n                echo False\n                return\n\
    \            fi\n            direction=1\n        elif (( curr < prev )); then\n\
    \            if (( direction > 0 )); then\n                echo False\n      \
    \          return\n            fi\n            direction=-1\n        fi\n    \
    \    prev=$curr\n    done\n    echo True", "    local -n _list=$1\n    local -i\
    \ _len=${#_list[@]}\n    local -i _i=0\n    local -i _j=0\n    local -i _k=0\n\
    \    local -i _l=0\n    local -i _m=0\n    local -i _n=0\n    local -i _o=0\n\
    \    local -i _p=0\n    local -i _q=0\n    local -i _r=0\n    local -i _s=0\n\
    \    local -i _t=0\n    local -i _u=0\n    local -i _v=0\n    local -i _w=0\n\
    \    local -i _x=0\n    local -i _y=0\n    local -i _z=0\n    local -i _aa=0\n\
    \    local -i _bb=0\n    local -i _cc=0\n    local -i _dd=0\n    local -i _ee=0\n\
    \    local -i _ff=0\n    local -i _gg=0\n    local -i _hh=0\n    local -i _ii=0\n\
    \    local -i _jj=0\n    local -i _kk=0\n    local -i _ll=0\n    local -i _mm=0\n\
    \    local -i _nn=0\n    local -i _oo=0\n    local -i _pp=0\n    local -i _qq=0\n\
    \    local -i _rr=0\n    local -i _ss=0\n    local -i _tt=0\n    local -i _uu=0\n\
    \    local -i _vv=0\n    local -i _ww=0\n    local -i _xx=0\n    local -i _yy=0\n\
    \    local -i _zz=0\n    local -i _aaa=0\n    local -i _bbb=0\n    local -i _ccc=0\n\
    \    local -i _ddd=0\n    local -i _eee=0\n    local -i _fff=0\n    local -i _ggg=0\n\
    \    local -i _hhh=0\n    local -i _iii=0\n    local -i _", "    local -a arr=($1)\n\
    \    local -a diffs\n    local i\n    local -i n=${#arr[@]}\n    local -i d\n\
    \    local -i sign=0\n    local -i prev_sign=0\n    local -i prev_d=0\n    local\
    \ -i all_same=1\n    local -i all_same_sign=1\n    local -i all_same_sign_and_d=1\n\
    \    local -i all_same_sign_and_d_and_prev_d=1\n    local -i all_same_sign_and_d_and_prev_d_and_prev_sign=1\n\
    \    local -i all_same_sign_and_d_and_prev_d_and_prev_sign_and_sign=1\n    local\
    \ -i all_same_sign_and_d_and_prev_d_and_prev_sign_and_sign_and_i=1\n    local\
    \ -i all_same_sign_and_d_and_prev_d_and_prev_sign_and_sign_and_i_and_n=1\n   \
    \ local -i all_same_sign_and_d_and_prev_d_and_prev_sign_and_sign_and_i_and_n_and_arr=1\n\
    \    local -i all_same_sign_and_d_and_prev_d_and_prev_sign_and_sign_and_i_and_n_and_arr_and_diffs=1\n\
    \    local -i all_same_sign_and_d_and_prev_d_and_prev_sign_and_sign_and_i_and_n_and_arr_and_diffs_and_prev_d=1\n\
    \    local -i all_same_sign_and_d_and_prev_d_and_prev_sign_and_sign_and_i_and_n_and_arr_and_diffs_and_prev_d_and_prev_sign=1\n\
    \    local -i all_same_sign_and_d_and_prev_d_and_prev_sign_and_sign_and_i_and_n_",
  "    local -a arr\n    read -a arr <<< \"$1\"\n    local -i i\n    local -i len=${#arr[@]}\n\
    \    local -i incr=0\n    local -i decr=0\n    for ((i=0; i<len-1; i++)); do\n\
    \        if (( arr[i] < arr[i+1] )); then\n            (( incr++ ))\n        elif\
    \ (( arr[i] > arr[i+1] )); then\n            (( decr++ ))\n        fi\n    done\n\
    \    (( incr == len-1 || decr == len-1 )) && echo True || echo False", "    local\
    \ -a list=($1)\n    local -i i=0\n    local -i n=${#list[@]}\n    local -i incr=0\n\
    \    local -i decr=0\n    local -i result=0\n    local -i prev=${list[0]}\n  \
    \  for ((i=1; i<n; i++)); do\n        if [[ ${list[i]} -gt $prev ]]; then\n  \
    \          incr=1\n        elif [[ ${list[i]} -lt $prev ]]; then\n           \
    \ decr=1\n        fi\n        prev=${list[i]}\n    done\n    if [[ $incr -eq 1\
    \ && $decr -eq 0 ]]; then\n        result=1\n    elif [[ $incr -eq 0 && $decr\
    \ -eq 1 ]]; then\n        result=1\n    fi\n    echo $result", "    local -a list=($1)\n\
    \    local -i i=0\n    local -i len=${#list[@]}\n    local -i direction=0\n  \
    \  local -i prev=${list[0]}\n    for ((i=1; i<len; i++)); do\n        if [[ $direction\
    \ -eq 0 ]]; then\n            if [[ ${list[i]} -gt $prev ]]; then\n          \
    \      direction=1\n            elif [[ ${list[i]} -lt $prev ]]; then\n      \
    \          direction=-1\n            fi\n        elif [[ $direction -eq 1 ]];\
    \ then\n            if [[ ${list[i]} -lt $prev ]]; then\n                return\
    \ 1\n            fi\n        elif [[ $direction -eq -1 ]]; then\n            if\
    \ [[ ${list[i]} -gt $prev ]]; then\n                return 1\n            fi\n\
    \        fi\n        prev=${list[i]}\n    done\n    return 0", "    local list=(\
    \ $1 )\n    local i=0\n    local len=${#list[@]}\n    local increasing=0\n   \
    \ local decreasing=0\n    local prev=${list[0]}\n    for ((i=1; i<len; i++));\
    \ do\n        if [[ $prev -lt ${list[i]} ]]; then\n            increasing=1\n\
    \        elif [[ $prev -gt ${list[i]} ]]; then\n            decreasing=1\n   \
    \     fi\n        if [[ $increasing -eq 1 && $decreasing -eq 1 ]]; then\n    \
    \        echo False\n            return\n        fi\n        prev=${list[i]}\n\
    \    done\n    echo True", "    local -a a=($1)\n    local -i n=${#a[@]}\n   \
    \ local -i i\n    local -i inc=0\n    local -i dec=0\n    for ((i=1; i<n; i++));\
    \ do\n        if (( a[i] > a[i-1] )); then\n            (( inc++ ))\n        elif\
    \ (( a[i] < a[i-1] )); then\n            (( dec++ ))\n        fi\n    done\n \
    \   (( inc == n-1 || dec == n-1 ))", "    local -a list=($1)\n    local -i i=0\n\
    \    local -i len=${#list[@]}\n    local -i increasing=0\n    local -i decreasing=0\n\
    \    local -i result=0\n\n    if (( len < 2 )); then\n        echo \"True\"\n\
    \        return 0\n    fi\n\n    for (( i=0; i<len-1; i++ )); do\n        if ((\
    \ list[i] < list[i+1] )); then\n            increasing=1\n        elif (( list[i]\
    \ > list[i+1] )); then\n            decreasing=1\n        fi\n    done\n\n   \
    \ if (( increasing && decreasing )); then\n        result=0\n    else\n      \
    \  result=1\n    fi\n\n    if (( result )); then\n        echo \"True\"\n    else\n\
    \        echo \"False\"\n    fi", "    local list=($1)\n    local i=1\n    local\
    \ len=${#list[@]}\n    local increasing=${2:-1}\n    local decreasing=${3:-0}\n\
    \    local result=1\n    local prev=${list[0]}\n    while (( i < len )); do\n\
    \        if (( increasing )); then\n            if (( prev > ${list[i]} )); then\n\
    \                result=0\n                break\n            fi\n        elif\
    \ (( decreasing )); then\n            if (( prev < ${list[i]} )); then\n     \
    \           result=0\n                break\n            fi\n        fi\n    \
    \    prev=${list[i]}\n        (( i++ ))\n    done\n    echo $result", "    local\
    \ -a arr=(\"$@\")\n    local -a diffs\n    local -i i\n    local -i len=${#arr[@]}\n\
    \    local -i diff\n    local -i prev_diff\n    local -i is_monotonic=1\n\n  \
    \  for ((i=1; i<len; i++)); do\n        diffs[i-1]=$((arr[i] - arr[i-1]))\n  \
    \  done\n\n    prev_diff=${diffs[0]}\n    for ((i=1; i<len-1; i++)); do\n    \
    \    diff=${diffs[i]}\n        if ((diff * prev_diff < 0)); then\n           \
    \ is_monotonic=0\n            break\n        fi\n        prev_diff=$diff\n   \
    \ done\n\n    echo $is_monotonic", "    local -a list=($1)\n    local -i i=0\n\
    \    local -i n=${#list[@]}\n    local -i increasing=1\n    local -i decreasing=1\n\
    \    local -i result=0\n    if (( n < 2 )); then\n        echo \"True\"\n    \
    \    return 0\n    fi\n    for (( i=1; i<n; i++ )); do\n        if (( list[i]\
    \ < list[i-1] )); then\n            increasing=0\n        fi\n        if (( list[i]\
    \ > list[i-1] )); then\n            decreasing=0\n        fi\n    done\n    if\
    \ (( increasing || decreasing )); then\n        echo \"True\"\n        result=0\n\
    \    else\n        echo \"False\"\n        result=1\n    fi\n    return $result",
  "    local list=\"$1\"\n    local direction=\"$2\"\n    local prev=\n    local curr=\n\
    \    for i in $list; do\n        if [ -z \"$prev\" ]; then\n            prev=\"\
    $i\"\n            continue\n        fi\n        curr=\"$i\"\n        if [ \"$direction\"\
    \ == \"increasing\" ]; then\n            if [ \"$curr\" -lt \"$prev\" ]; then\n\
    \                return 1\n            fi\n        else\n            if [ \"$curr\"\
    \ -gt \"$prev\" ]; then\n                return 1\n            fi\n        fi\n\
    \        prev=\"$curr\"\n    done\n    return 0", "    local list=$1\n    local\
    \ direction=0\n    local last=0\n    local current=0\n    for i in $list; do\n\
    \        current=$i\n        if [ $direction -eq 0 ]; then\n            if [ $current\
    \ -gt $last ]; then\n                direction=1\n            elif [ $current\
    \ -lt $last ]; then\n                direction=-1\n            fi\n        elif\
    \ [ $direction -eq 1 ]; then\n            if [ $current -lt $last ]; then\n  \
    \              return 1\n            fi\n        elif [ $direction -eq -1 ]; then\n\
    \            if [ $current -gt $last ]; then\n                return 1\n     \
    \       fi\n        fi\n        last=$current\n    done\n    return 0", "    local\
    \ -a arr\n    IFS=\" \" read -r -a arr <<< \"$1\"\n    local -i len=${#arr[@]}\n\
    \    local -i i\n    local -i increasing=1\n    local -i decreasing=1\n    for\
    \ ((i=1; i<len; i++)); do\n        if (( arr[i] < arr[i-1] )); then\n        \
    \    increasing=0\n        fi\n        if (( arr[i] > arr[i-1] )); then\n    \
    \        decreasing=0\n        fi\n    done\n    (( increasing || decreasing ))",
  "    local list=($1)\n    local len=${#list[@]}\n    local i=0\n    local inc=0\n\
    \    local dec=0\n    local prev=${list[0]}\n    for ((i=1; i<len; i++)); do\n\
    \        if [[ ${list[i]} -gt $prev ]]; then\n            inc=1\n        elif\
    \ [[ ${list[i]} -lt $prev ]]; then\n            dec=1\n        fi\n        prev=${list[i]}\n\
    \    done\n    if [[ $inc -eq 1 && $dec -eq 0 ]]; then\n        echo \"True\"\n\
    \    elif [[ $inc -eq 0 && $dec -eq 1 ]]; then\n        echo \"True\"\n    else\n\
    \        echo \"False\"\n    fi", "    local -a a=($1)\n    local -a b=($1)\n\
    \    local -a c=($1)\n    local -a d=($1)\n    local -a e=($1)\n    local -a f=($1)\n\
    \    local -a g=($1)\n    local -a h=($1)\n    local -a i=($1)\n    local -a j=($1)\n\
    \    local -a k=($1)\n    local -a l=($1)\n    local -a m=($1)\n    local -a n=($1)\n\
    \    local -a o=($1)\n    local -a p=($1)\n    local -a q=($1)\n    local -a r=($1)\n\
    \    local -a s=($1)\n    local -a t=($1)\n    local -a u=($1)\n    local -a v=($1)\n\
    \    local -a w=($1)\n    local -a x=($1)\n    local -a y=($1)\n    local -a z=($1)\n\
    \    local -a aa=($1)\n    local -a ab=($1)\n    local -a ac=($1)\n    local -a\
    \ ad=($1)\n    local -a ae=($1)\n    local -a af=($1)\n    local -a ag=($1)\n\
    \    local -a ah=($1)\n    local -a ai=($1)\n    local -a aj=($1)\n    local -a\
    \ ak=($1)\n    local -a al=($1)\n    local -a am=($1)\n    local -a an=($1)\n\
    \    local -a ao=($1)\n    local -a ap=($1)\n    local -a aq=($1)\n    local -a\
    \ ar=($1)\n    local -a as=($1)\n    local -a at=($1)\n    local -a au=($1)\n\
    \    local -a av=($1)\n    local -a aw=($1)\n    local -a ax=($1)\n    local -a\
    \ ay", "    local -a arr=($1)\n    local -i i\n    local -i len=${#arr[@]}\n \
    \   local -i incr=0\n    local -i decr=0\n    local -i prev=${arr[0]}\n    for\
    \ ((i=1; i<len; i++)); do\n        if ((prev < arr[i])); then\n            incr=1\n\
    \        elif ((prev > arr[i])); then\n            decr=1\n        fi\n      \
    \  prev=${arr[i]}\n    done\n    ((incr + decr == 1))", "    local -a list=($1)\n\
    \    local -i i=0\n    local -i len=${#list[@]}\n    local -i inc=0\n    local\
    \ -i dec=0\n    local -i res=0\n    local -i prev=0\n    local -i curr=0\n\n \
    \   if [ $len -eq 1 ]; then\n        echo 1\n        return\n    fi\n\n    for\
    \ ((i=0; i<len; i++)); do\n        curr=${list[$i]}\n        if [ $i -gt 0 ];\
    \ then\n            if [ $curr -gt $prev ]; then\n                inc=1\n    \
    \        elif [ $curr -lt $prev ]; then\n                dec=1\n            fi\n\
    \        fi\n        prev=$curr\n    done\n\n    if [ $inc -eq 1 -a $dec -eq 0\
    \ ]; then\n        res=1\n    elif [ $inc -eq 0 -a $dec -eq 1 ]; then\n      \
    \  res=1\n    fi\n\n    echo $res", "    local -a list=($1)\n    local -i i=0\n\
    \    local -i len=${#list[@]}\n    local -i increasing=1\n    local -i decreasing=1\n\
    \    local -i result=0\n    local -i prev=0\n    local -i curr=0\n\n    if ((\
    \ len < 2 )); then\n        result=1\n    else\n        prev=${list[0]}\n    \
    \    for (( i=1; i<len; i++ )); do\n            curr=${list[i]}\n            if\
    \ (( curr > prev )); then\n                decreasing=0\n            elif (( curr\
    \ < prev )); then\n                increasing=0\n            fi\n            prev=$curr\n\
    \        done\n        result=$(( increasing || decreasing ))\n    fi\n    echo\
    \ $result", "    local -i i=0\n    local -i len=0\n    local -i prev=0\n    local\
    \ -i curr=0\n    local -i is_increasing=0\n    local -i is_decreasing=0\n    local\
    \ -a array\n    local -a tmp\n    local -a list\n    local -a result\n    local\
    \ -a output\n    local -a tmp_result\n    local -a tmp_output\n    local -a tmp_list\n\
    \    local -a tmp_array\n    local -a tmp_tmp\n    local -a tmp_tmp_result\n \
    \   local -a tmp_tmp_output\n    local -a tmp_tmp_list\n    local -a tmp_tmp_array\n\
    \    local -a tmp_tmp_tmp\n    local -a tmp_tmp_tmp_result\n    local -a tmp_tmp_tmp_output\n\
    \    local -a tmp_tmp_tmp_list\n    local -a tmp_tmp_tmp_array\n    local -a tmp_tmp_tmp_tmp\n\
    \    local -a tmp_tmp_tmp_tmp_result\n    local -a tmp_tmp_tmp_tmp_output\n  \
    \  local -a tmp_tmp_tmp_tmp_list\n    local -a tmp_tmp_tmp_tmp_array\n    local\
    \ -a tmp_tmp_tmp_tmp_tmp\n    local -a tmp_tmp_tmp_tmp_tmp_result\n    local -a\
    \ tmp_tmp_tmp_tmp_tmp_output\n    local -a tmp_tmp_tmp_tmp_tmp_list\n    local\
    \ -a tmp_tmp_tmp_tmp_tmp_array\n    local -a tmp_tmp_tmp_tmp_tmp_tmp\n    local\
    \ -a tmp_tmp_tmp_tmp_tmp_tmp_result\n    local -a tmp_tmp_tmp_tmp_tmp_tmp_output\n\
    \    local -a tmp_tmp_tmp_tmp_tmp_tmp_list\n    local -a tmp_tmp_tmp_tmp_tmp_tmp_array\n\
    \    local -a tmp_tmp_tmp_tmp_tmp_tmp_tmp\n    local -a tmp_tmp_tmp_tmp_tmp_tmp_tmp_result\n\
    \    local -a tmp_tmp_tmp_tmp_tmp_tmp_", "    local -i i=0\n    local -i j=0\n\
    \    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i p=0\n    local\
    \ -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n\
    \    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local\
    \ -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n\
    \    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local\
    \ -i l=0\n    local -i o=0\n    local -i aa=0\n    local -i bb=0\n    local -i\
    \ cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i\
    \ gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local\
    \ -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local\
    \ -i iii=", "    local -a list=($1)\n    local -i i=0\n    local -i len=${#list[@]}\n\
    \    local -i increasing=1\n    local -i decreasing=1\n    local -i result=0\n\
    \    if (( len < 2 )); then\n        echo \"True\"\n        return\n    fi\n \
    \   while (( i < len - 1 )); do\n        if (( list[i] < list[i+1] )); then\n\
    \            decreasing=0\n        elif (( list[i] > list[i+1] )); then\n    \
    \        increasing=0\n        fi\n        (( i++ ))\n    done\n    if (( increasing\
    \ || decreasing )); then\n        echo \"True\"\n    else\n        echo \"False\"\
    \n    fi", "    local -a list=($1)\n    local -i i=0\n    local -i len=${#list[@]}\n\
    \    local -i direction=0\n    local -i last_diff=0\n    local -i diff=0\n   \
    \ local -i result=1\n\n    if [ $len -lt 2 ]; then\n        echo 1\n        return\n\
    \    fi\n\n    for ((i=1; i<len; i++)); do\n        diff=${list[i]}-${list[i-1]}\n\
    \        if [ $i -eq 1 ]; then\n            last_diff=$diff\n            if [\
    \ $diff -gt 0 ]; then\n                direction=1\n            else\n       \
    \         direction=-1\n            fi\n        else\n            if [ $direction\
    \ -eq 1 ]; then\n                if [ $diff -lt 0 ]; then\n                  \
    \  result=0\n                    break\n                fi\n            else\n\
    \                if [ $diff -gt 0 ]; then\n                    result=0\n    \
    \                break\n                fi\n            fi\n        fi\n    done\n\
    \n    echo $result", "    local -a list=($1)\n    local -i i=0\n    local -i len=${#list[@]}\n\
    \    local -i inc=0\n    local -i dec=0\n    local -i res=0\n    local -i prev=${list[0]}\n\
    \    for ((i=1; i<len; i++)); do\n        if [[ ${list[i]} -gt $prev ]]; then\n\
    \            inc=1\n        elif [[ ${list[i]} -lt $prev ]]; then\n          \
    \  dec=1\n        fi\n        prev=${list[i]}\n    done\n    res=$((inc+dec))\n\
    \    if [[ $res -eq 1 ]]; then\n        echo \"True\"\n    else\n        echo\
    \ \"False\"\n    fi", "    local list=\"$1\"\n    local inc=0\n    local dec=0\n\
    \    local prev=0\n    local curr=0\n    for i in $list; do\n        curr=$i\n\
    \        if [ $curr -gt $prev ]; then\n            inc=1\n        elif [ $curr\
    \ -lt $prev ]; then\n            dec=1\n        fi\n        if [ $inc -eq 1 ]\
    \ && [ $dec -eq 1 ]; then\n            return 1\n        fi\n        prev=$curr\n\
    \    done\n    return 0", "    local -a arr\n    arr=($1)\n    local -i i\n  \
    \  local -i len=${#arr[@]}\n    local -i incr=0\n    local -i decr=0\n    for\
    \ ((i=0; i<len-1; i++)); do\n        if (( arr[i] < arr[i+1] )); then\n      \
    \      incr=1\n        elif (( arr[i] > arr[i+1] )); then\n            decr=1\n\
    \        fi\n    done\n    (( incr == 1 && decr == 0 )) || (( incr == 0 && decr\
    \ == 1 ))", "    local -a a=($1)\n    local -i i=0\n    local -i n=${#a[@]}\n\
    \    local -i inc=0\n    local -i dec=0\n    local -i res=0\n    while (( i <\
    \ n-1 )); do\n        if (( a[i] < a[i+1] )); then\n            (( inc++ ))\n\
    \        elif (( a[i] > a[i+1] )); then\n            (( dec++ ))\n        fi\n\
    \        (( i++ ))\n    done\n    if (( inc == n-1 || dec == n-1 )); then\n  \
    \      res=1\n    fi\n    echo $res", "    local -a arr=(\"$@\")\n    local -i\
    \ i=0\n    local -i n=${#arr[@]}\n    local -i inc=0\n    local -i dec=0\n   \
    \ local -i res=0\n    local -i prev=0\n    local -i curr=0\n\n    if (( n < 2\
    \ )); then\n        return 0\n    fi\n\n    prev=${arr[0]}\n    for (( i=1; i<n;\
    \ i++ )); do\n        curr=${arr[i]}\n        if (( curr > prev )); then\n   \
    \         inc=1\n        elif (( curr < prev )); then\n            dec=1\n   \
    \     fi\n        if (( inc && dec )); then\n            res=1\n            break\n\
    \        fi\n        prev=$curr\n    done\n    return $res", "    local list=($1)\n\
    \    local i=0\n    local len=${#list[@]}\n    local increasing=0\n    local decreasing=0\n\
    \    while [ $i -lt $len ]; do\n        if [ $i -eq 0 ]; then\n            if\
    \ [ ${list[$i]} -lt ${list[$i+1]} ]; then\n                increasing=1\n    \
    \        elif [ ${list[$i]} -gt ${list[$i+1]} ]; then\n                decreasing=1\n\
    \            fi\n        else\n            if [ $increasing -eq 1 ]; then\n  \
    \              if [ ${list[$i]} -lt ${list[$i+1]} ]; then\n                  \
    \  increasing=1\n                else\n                    increasing=0\n    \
    \            fi\n            elif [ $decreasing -eq 1 ]; then\n              \
    \  if [ ${list[$i]} -gt ${list[$i+1]} ]; then\n                    decreasing=1\n\
    \                else\n                    decreasing=0\n                fi\n\
    \            fi\n        fi\n        i=$((i+1))\n    done\n    if [ $increasing\
    \ -eq 1 ] || [ $decreasing -eq 1 ]; then\n        echo \"True\"\n    else\n  \
    \      echo \"False\"\n    fi", "    local list=\"$1\"\n    local incr=0\n   \
    \ local decr=0\n    local prev=0\n    local curr=0\n    for curr in $list; do\n\
    \        if [ $curr -gt $prev ]; then\n            incr=1\n        elif [ $curr\
    \ -lt $prev ]; then\n            decr=1\n        fi\n        prev=$curr\n    done\n\
    \    [ $incr -eq 1 -a $decr -eq 0 ] || [ $incr -eq 0 -a $decr -eq 1 ]", "    local\
    \ -a list=($1)\n    local -i i=0\n    local -i len=${#list[@]}\n    local -i direction=0\n\
    \    local -i prev=0\n    local -i curr=0\n    local -i next=0\n    local -i is_monotonic=1\n\
    \n    if [ $len -lt 2 ]; then\n        echo \"True\"\n        return\n    fi\n\
    \n    for ((i=0; i<len-1; i++)); do\n        prev=${list[i]}\n        curr=${list[i+1]}\n\
    \        next=${list[i+2]}\n\n        if [ $i -eq 0 ]; then\n            if [\
    \ $prev -lt $curr ]; then\n                direction=1\n            elif [ $prev\
    \ -gt $curr ]; then\n                direction=-1\n            else\n        \
    \        echo \"False\"\n                return\n            fi\n        fi\n\n\
    \        if [ $direction -eq 1 ]; then\n            if [ $curr -gt $next ]; then\n\
    \                is_monotonic=0\n                break\n            fi\n     \
    \   elif [ $direction -eq -1 ]; then\n            if [ $curr -lt $next ]; then\n\
    \                is_monotonic=0\n                break\n            fi\n     \
    \   fi\n    done\n\n    if [ $is_monotonic -eq 1 ]; then\n        echo \"True\"\
    \n    else\n        echo \"False\"\n    fi", "    local -a list=($1)\n    local\
    \ -i i=0\n    local -i len=${#list[@]}\n    local -i direction=0\n    local -i\
    \ prev=${list[0]}\n    local -i curr=0\n    for ((i=1; i<len; i++)); do\n    \
    \    curr=${list[i]}\n        if [[ $curr -gt $prev ]]; then\n            if [[\
    \ $direction -eq -1 ]]; then\n                return 1\n            else\n   \
    \             direction=1\n            fi\n        elif [[ $curr -lt $prev ]];\
    \ then\n            if [[ $direction -eq 1 ]]; then\n                return 1\n\
    \            else\n                direction=-1\n            fi\n        fi\n\
    \        prev=$curr\n    done\n    return 0", "    local list=($1)\n    local\
    \ i\n    local len=${#list[@]}\n    local inc=0\n    local dec=0\n    for ((i=0;\
    \ i<len-1; i++)); do\n        if (( list[i] < list[i+1] )); then\n           \
    \ inc=1\n        elif (( list[i] > list[i+1] )); then\n            dec=1\n   \
    \     fi\n    done\n    (( inc && dec )) && return 1\n    return 0", "    local\
    \ -a list=($1)\n    local -i i=0\n    local -i len=${#list[@]}\n    local -i incr=0\n\
    \    local -i decr=0\n    local -i is_mono=0\n    local -i is_incr=0\n    local\
    \ -i is_decr=0\n\n    if (( len < 2 )); then\n        echo \"True\"\n        return\n\
    \    fi\n\n    for (( i=0; i<len-1; i++ )); do\n        if (( list[i] < list[i+1]\
    \ )); then\n            (( incr++ ))\n        elif (( list[i] > list[i+1] ));\
    \ then\n            (( decr++ ))\n        fi\n    done\n\n    if (( incr > 0 &&\
    \ decr > 0 )); then\n        is_mono=0\n    else\n        is_mono=1\n    fi\n\n\
    \    if (( incr > 0 )); then\n        is_incr=1\n    fi\n\n    if (( decr > 0\
    \ )); then\n        is_decr=1\n    fi\n\n    if (( is_mono == 1 )); then\n   \
    \     echo \"True\"\n    else\n        echo \"False\"\n    fi", "    local -a\
    \ list=($1)\n    local -i i=0\n    local -i len=${#list[@]}\n    local -i increasing=0\n\
    \    local -i decreasing=0\n    local -i result=0\n\n    if (( len < 2 )); then\n\
    \        echo \"True\"\n        return 0\n    fi\n\n    if (( list[0] < list[1]\
    \ )); then\n        increasing=1\n    elif (( list[0] > list[1] )); then\n   \
    \     decreasing=1\n    fi\n\n    for (( i=1; i<len-1; i++ )); do\n        if\
    \ (( increasing )); then\n            if (( list[i] > list[i+1] )); then\n   \
    \             echo \"False\"\n                return 1\n            fi\n     \
    \   elif (( decreasing )); then\n            if (( list[i] < list[i+1] )); then\n\
    \                echo \"False\"\n                return 1\n            fi\n  \
    \      else\n            echo \"False\"\n            return 1\n        fi\n  \
    \  done\n\n    echo \"True\"\n    return 0", "    local -a arr=($1)\n    local\
    \ -i i=0\n    local -i len=${#arr[@]}\n    local -i inc=0\n    local -i dec=0\n\
    \    local -i cur=0\n    local -i prev=0\n    local -i next=0\n    local -i ret=0\n\
    \n    if [ $len -lt 2 ]; then\n        return 0\n    fi\n\n    prev=${arr[0]}\n\
    \    for ((i=1; i<len; i++)); do\n        cur=${arr[i]}\n        if [ $i -lt $((len-1))\
    \ ]; then\n            next=${arr[i+1]}\n        fi\n\n        if [ $cur -gt $prev\
    \ ]; then\n            inc=1\n        elif [ $cur -lt $prev ]; then\n        \
    \    dec=1\n        fi\n\n        if [ $inc -eq 1 -a $dec -eq 1 ]; then\n    \
    \        ret=1\n            break\n        fi\n\n        if [ $inc -eq 1 -a $cur\
    \ -gt $next ]; then\n            ret=1\n            break\n        fi\n\n    \
    \    if [ $dec -eq 1 -a $cur -lt $next ]; then\n            ret=1\n          \
    \  break\n        fi\n\n        prev=$cur\n    done\n\n    return $ret", "   \
    \ local -a arr=($1)\n    local -i i=0\n    local -i len=${#arr[@]}\n    local\
    \ -i inc=0\n    local -i dec=0\n    local -i prev=${arr[0]}\n    local -i curr=0\n\
    \    while [ $i -lt $len ]; do\n        curr=${arr[$i]}\n        if [ $curr -gt\
    \ $prev ]; then\n            inc=1\n        elif [ $curr -lt $prev ]; then\n \
    \           dec=1\n        fi\n        if [ $inc -eq 1 -a $dec -eq 1 ]; then\n\
    \            echo \"False\"\n            return\n        fi\n        prev=$curr\n\
    \        i=$i+1\n    done\n    echo \"True\"", "    local -a arr\n    local -i\
    \ i\n    local -i len\n    local -i is_increasing\n    local -i is_decreasing\n\
    \    local -i is_monotonic\n    local -i is_monotonic_increasing\n    local -i\
    \ is_monotonic_decreasing\n    local -i is_monotonic_increasing_or_decreasing\n\
    \    local -i is_monotonic_increasing_and_decreasing\n    local -i is_monotonic_increasing_or_constant\n\
    \    local -i is_monotonic_decreasing_or_constant\n    local -i is_monotonic_increasing_and_constant\n\
    \    local -i is_monotonic_decreasing_and_constant\n    local -i is_monotonic_increasing_or_decreasing_or_constant\n\
    \    local -i is_monotonic_increasing_and_decreasing_and_constant\n    local -i\
    \ is_monotonic_increasing_or_decreasing_and_constant\n    local -i is_monotonic_increasing_and_decreasing_or_constant\n\
    \    local -i is_monotonic_increasing_or_decreasing_or_constant_or_constant\n\
    \    local -i is_monotonic_increasing_and_decreasing_and_constant_and_constant\n\
    \    local -i is_monotonic_increasing_or_decreasing_and_constant_and_constant\n\
    \    local -i is_monotonic_increasing_and_decreasing_or_constant_and_constant\n\
    \    local -i is_monotonic_increasing_or_decreasing_or_constant_and_constant\n\
    \    local -i is_monotonic_increasing_and_decreasing_or_constant_or_constant\n\
    \    local -i is_monotonic_increasing_or_decreasing_and_constant_or_constant\n\
    \    local -i is_monotonic_increasing_or_decreasing_or_constant_or_constant_or_constant\n\
    \    local -i is_monotonic_", "    local -a arr\n    IFS=' ' read -r -a arr <<<\
    \ \"$1\"\n    local -i i\n    local -i len=${#arr[@]}\n    local -i increasing=1\n\
    \    local -i decreasing=1\n    for ((i=1; i<len; i++)); do\n        if (( arr[i]\
    \ < arr[i-1] )); then\n            increasing=0\n        elif (( arr[i] > arr[i-1]\
    \ )); then\n            decreasing=0\n        fi\n    done\n    (( increasing\
    \ || decreasing ))", "    local -a a=($1)\n    local -i i=0\n    local -i n=${#a[@]}\n\
    \    local -i incr=0\n    local -i decr=0\n    local -i ret=0\n    local -i prev=0\n\
    \    local -i curr=0\n    if (( n < 2 )); then\n        ret=1\n    else\n    \
    \    prev=${a[0]}\n        for (( i=1; i<n; i++ )); do\n            curr=${a[i]}\n\
    \            if (( curr > prev )); then\n                incr=1\n            elif\
    \ (( curr < prev )); then\n                decr=1\n            fi\n          \
    \  prev=$curr\n        done\n        (( incr == 1 && decr == 0 )) && ret=1\n \
    \       (( incr == 0 && decr == 1 )) && ret=1\n    fi\n    echo $ret", "    local\
    \ -a arr\n    local -i i=0\n    local -i len=0\n    local -i inc=0\n    local\
    \ -i dec=0\n    local -i is_monotonic=0\n    local -i is_decreasing=0\n    local\
    \ -i is_increasing=0\n    local -i is_constant=0\n    local -i is_empty=0\n  \
    \  local -i is_single=0\n    local -i is_two=0\n    local -i is_three=0\n    local\
    \ -i is_four=0\n    local -i is_five=0\n    local -i is_six=0\n    local -i is_seven=0\n\
    \    local -i is_eight=0\n    local -i is_nine=0\n    local -i is_ten=0\n    local\
    \ -i is_eleven=0\n    local -i is_twelve=0\n    local -i is_thirteen=0\n    local\
    \ -i is_fourteen=0\n    local -i is_fifteen=0\n    local -i is_sixteen=0\n   \
    \ local -i is_seventeen=0\n    local -i is_eighteen=0\n    local -i is_nineteen=0\n\
    \    local -i is_twenty=0\n    local -i is_twentyone=0\n    local -i is_twentytwo=0\n\
    \    local -i is_twentythree=0\n    local -i is_twentyfour=0\n    local -i is_twentyfive=0\n\
    \    local -i is_twentysix=0\n    local -i is_twentyseven=0\n    local -i is_twentyeight=0\n\
    \    local -i is_twentynine=0\n    local -i is_thirty=0\n    local -i is_thirtyone=0\n\
    \    local -i is_thirtytwo=0\n    local -i is_thirtythree=0\n    local -i is_thirtyfour=0\n\
    \    local -i is_thirtyfive=0\n    local -i is_thirtysix=0\n    local -i is_thirtyseven=0\n\
    \    local", "    local -a a=($1)\n    local -i i=0\n    local -i n=${#a[@]}\n\
    \    local -i inc=0\n    local -i dec=0\n    local -i sign=0\n    local -i prev=0\n\
    \    local -i curr=0\n    local -i next=0\n    local -i is_monotonic=0\n    local\
    \ -i is_increasing=0\n    local -i is_decreasing=0\n\n    if (( n < 2 )); then\n\
    \        echo \"True\"\n        return 0\n    fi\n\n    for (( i=0; i<n-1; i++\
    \ )); do\n        prev=${a[i]}\n        curr=${a[i+1]}\n        next=${a[i+2]}\n\
    \        if (( curr > prev )); then\n            inc=1\n        elif (( curr <\
    \ prev )); then\n            dec=1\n        fi\n        if (( inc && dec )); then\n\
    \            echo \"False\"\n            return 1\n        fi\n    done\n\n  \
    \  if (( inc )); then\n        sign=1\n    elif (( dec )); then\n        sign=-1\n\
    \    fi\n\n    for (( i=0; i<n-1; i++ )); do\n        prev=${a[i]}\n        curr=${a[i+1]}\n\
    \        next=${a[i+2]}\n        if (( sign == 1 )); then\n            if (( curr\
    \ < prev )); then\n                echo \"False\"\n                return 1\n\
    \            fi\n        elif (( sign == -1 )); then\n            if (( curr >\
    \ prev )); then\n                echo \"False\"\n                return 1\n  \
    \          fi\n        fi\n    done\n\n    echo \"True\"\n    return 0", "   \
    \ local -a a=($1)\n    local -i i\n    local -i n=${#a[@]}\n    local -i incr=0\n\
    \    local -i decr=0\n    for ((i=1; i<n; i++)); do\n        if (( a[i] > a[i-1]\
    \ )); then\n            (( incr++ ))\n        elif (( a[i] < a[i-1] )); then\n\
    \            (( decr++ ))\n        fi\n    done\n    (( incr == n-1 || decr ==\
    \ n-1 ))", "    local -a list=($1)\n    local -i i=0\n    local -i len=${#list[@]}\n\
    \    local -i inc=0\n    local -i dec=0\n    local -i cur=0\n    local -i prev=0\n\
    \    local -i result=0\n\n    if (( len < 2 )); then\n        echo \"True\"\n\
    \        return 0\n    fi\n\n    prev=${list[0]}\n    for (( i=1; i<len; i++ ));\
    \ do\n        cur=${list[i]}\n        if (( cur > prev )); then\n            inc=1\n\
    \        elif (( cur < prev )); then\n            dec=1\n        fi\n        prev=$cur\n\
    \    done\n\n    if (( inc == 1 && dec == 1 )); then\n        result=1\n    fi\n\
    \n    if (( result == 1 )); then\n        echo \"False\"\n    else\n        echo\
    \ \"True\"\n    fi", "    local -a list=($1)\n    local -i i\n    local -i len=${#list[@]}\n\
    \    local -i inc=0\n    local -i dec=0\n    for ((i=0; i<len-1; i++)); do\n \
    \       (( list[i] < list[i+1] )) && (( inc++ ))\n        (( list[i] > list[i+1]\
    \ )) && (( dec++ ))\n    done\n    (( inc == len-1 || dec == len-1 )) && echo\
    \ True || echo False", "    local -a arr=($1)\n    local -i i=0\n    local -i\
    \ len=${#arr[@]}\n    local -i incr=0\n    local -i decr=0\n    local -i res=0\n\
    \    if [ $len -lt 2 ]; then\n        echo 1\n        return\n    fi\n    for\
    \ ((i=0; i<len-1; i++)); do\n        if [ ${arr[$i]} -lt ${arr[$i+1]} ]; then\n\
    \            incr=1\n        elif [ ${arr[$i]} -gt ${arr[$i+1]} ]; then\n    \
    \        decr=1\n        fi\n    done\n    if [ $incr -eq 1 -a $decr -eq 0 ];\
    \ then\n        res=1\n    elif [ $incr -eq 0 -a $decr -eq 1 ]; then\n       \
    \ res=1\n    fi\n    echo $res", "    local -a arr=($1)\n    local -i i=0\n  \
    \  local -i len=${#arr[@]}\n    local -i incr=0\n    local -i decr=0\n    local\
    \ -i res=0\n    if (( len < 2 )); then\n        return 1\n    fi\n    if (( arr[0]\
    \ < arr[1] )); then\n        incr=1\n    elif (( arr[0] > arr[1] )); then\n  \
    \      decr=1\n    fi\n    for (( i=1; i<len-1; i++ )); do\n        if (( incr\
    \ )); then\n            if (( arr[i] > arr[i+1] )); then\n                return\
    \ 1\n            fi\n        elif (( decr )); then\n            if (( arr[i] <\
    \ arr[i+1] )); then\n                return 1\n            fi\n        else\n\
    \            return 1\n        fi\n    done\n    return 0", "    local -a array=($1)\n\
    \    local -i i=0\n    local -i len=${#array[@]}\n    local -i increasing=0\n\
    \    local -i decreasing=0\n    local -i result=0\n    local -i prev=0\n    local\
    \ -i curr=0\n\n    if (( len < 2 )); then\n        result=1\n    else\n      \
    \  prev=${array[0]}\n        for (( i=1; i<len; i++ )); do\n            curr=${array[i]}\n\
    \            if (( curr > prev )); then\n                increasing=1\n      \
    \      elif (( curr < prev )); then\n                decreasing=1\n          \
    \  fi\n            prev=$curr\n        done\n        (( increasing == 1 && decreasing\
    \ == 0 )) && result=1\n        (( increasing == 0 && decreasing == 1 )) && result=1\n\
    \    fi\n    echo $result", "    local list=($1)\n    local direction=0\n    local\
    \ last=${list[0]}\n    for i in ${list[@]:1}; do\n        if [[ $i -gt $last ]];\
    \ then\n            if [[ $direction -eq -1 ]]; then\n                return 1\n\
    \            fi\n            direction=1\n        elif [[ $i -lt $last ]]; then\n\
    \            if [[ $direction -eq 1 ]]; then\n                return 1\n     \
    \       fi\n            direction=-1\n        fi\n        last=$i\n    done\n\
    \    return 0", "    local -a arr=($1)\n    local -i i=0\n    local -i len=${#arr[@]}\n\
    \    local -i incr=0\n    local -i decr=0\n    local -i prev=${arr[0]}\n    local\
    \ -i curr=0\n    for ((i=1; i<len; i++)); do\n        curr=${arr[i]}\n       \
    \ if ((curr > prev)); then\n            ((incr++))\n        elif ((curr < prev));\
    \ then\n            ((decr++))\n        fi\n        prev=$curr\n    done\n   \
    \ if ((incr == len-1 || decr == len-1)); then\n        echo True\n    else\n \
    \       echo False\n    fi", "    local -a arr\n    local -i i\n    local -i n\n\
    \    local -i incr\n    local -i decr\n    arr=($1)\n    n=${#arr[@]}\n    incr=1\n\
    \    decr=1\n    for ((i=1; i<n; i++)); do\n        if (( arr[i] < arr[i-1] ));\
    \ then\n            incr=0\n        fi\n        if (( arr[i] > arr[i-1] )); then\n\
    \            decr=0\n        fi\n    done\n    if (( incr || decr )); then\n \
    \       echo True\n    else\n        echo False\n    fi", "    local -a arr=($1)\n\
    \    local -i i\n    local -i len=${#arr[@]}\n    local -i incr=0\n    local -i\
    \ decr=0\n    for ((i=0; i<len-1; i++)); do\n        if (( arr[i] < arr[i+1] ));\
    \ then\n            incr=1\n        elif (( arr[i] > arr[i+1] )); then\n     \
    \       decr=1\n        fi\n    done\n    (( incr + decr == 1 ))", "    local\
    \ -a a=($1)\n    local -i i=0\n    local -i n=${#a[@]}\n    local -i incr=0\n\
    \    local -i decr=0\n    while ((i < n-1)); do\n        if ((a[i] < a[i+1]));\
    \ then\n            ((incr++))\n        elif ((a[i] > a[i+1])); then\n       \
    \     ((decr++))\n        fi\n        ((i++))\n    done\n    if ((incr == n-1\
    \ || decr == n-1)); then\n        echo True\n    else\n        echo False\n  \
    \  fi", "    local -a arr=($1)\n    local -i i=0\n    local -i len=${#arr[@]}\n\
    \    local -i incr=0\n    local -i decr=0\n    local -i res=0\n    local -i prev=0\n\
    \    local -i curr=0\n\n    if [ $len -lt 2 ]; then\n        echo \"True\"\n \
    \       return\n    fi\n\n    for ((i=0; i<len; i++)); do\n        curr=${arr[$i]}\n\
    \        if [ $i -gt 0 ]; then\n            if [ $curr -gt $prev ]; then\n   \
    \             incr=1\n            elif [ $curr -lt $prev ]; then\n           \
    \     decr=1\n            fi\n        fi\n        prev=$curr\n    done\n\n   \
    \ if [ $incr -eq 1 -a $decr -eq 0 ]; then\n        res=1\n    elif [ $incr -eq\
    \ 0 -a $decr -eq 1 ]; then\n        res=1\n    fi\n\n    if [ $res -eq 1 ]; then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi", "    local\
    \ -a arr=(\"$@\")\n    local -a diffs\n    local -i i\n    local -i len=${#arr[@]}\n\
    \    local -i prev=${arr[0]}\n    local -i curr\n\n    for ((i=1; i<len; i++));\
    \ do\n        curr=${arr[i]}\n        diffs[i]=$((curr - prev))\n        prev=$curr\n\
    \    done\n\n    # All elements are equal\n    if [[ ${diffs[*]} =~ ^0+$ ]]; then\n\
    \        return 0\n    fi\n\n    # All elements are positive\n    if [[ ${diffs[*]}\
    \ =~ ^[0-9]+$ ]]; then\n        return 0\n    fi\n\n    # All elements are negative\n\
    \    if [[ ${diffs[*]} =~ ^-[0-9]+$ ]]; then\n        return 0\n    fi\n\n   \
    \ return 1", "    local -a arr=($1)\n    local -i i=0\n    local -i len=${#arr[@]}\n\
    \    local -i inc=0\n    local -i dec=0\n    local -i prev=${arr[0]}\n    for\
    \ ((i=1; i<len; i++)); do\n        if [[ ${arr[i]} -gt $prev ]]; then\n      \
    \      inc=1\n        elif [[ ${arr[i]} -lt $prev ]]; then\n            dec=1\n\
    \        fi\n        prev=${arr[i]}\n    done\n    if [[ $inc -eq 1 && $dec -eq\
    \ 1 ]]; then\n        echo \"False\"\n    else\n        echo \"True\"\n    fi",
  "    local -a list=($1)\n    local -i i=0\n    local -i n=${#list[@]}\n    local\
    \ -i incr=0\n    local -i decr=0\n    local -i res=0\n    if (( n < 2 )); then\n\
    \        return 0\n    fi\n    if (( list[0] < list[1] )); then\n        incr=1\n\
    \    else\n        decr=1\n    fi\n    for (( i=1; i<n-1; i++ )); do\n       \
    \ if (( incr )); then\n            if (( list[i] > list[i+1] )); then\n      \
    \          res=1\n                break\n            fi\n        elif (( decr\
    \ )); then\n            if (( list[i] < list[i+1] )); then\n                res=1\n\
    \                break\n            fi\n        fi\n    done\n    return $res",
  "    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local\
    \ -i incr=0\n    local -i decr=0\n    local -i prev=${arr[0]}\n    local -i curr=0\n\
    \    for ((i=1; i<len; i++)); do\n        curr=${arr[i]}\n        if ((curr >\
    \ prev)); then\n            incr=1\n        elif ((curr < prev)); then\n     \
    \       decr=1\n        fi\n        prev=$curr\n    done\n    ((incr + decr ==\
    \ 1))", "    local -a list=($1)\n    local -i i=0\n    local -i len=${#list[@]}\n\
    \    local -i inc=0\n    local -i dec=0\n    local -i prev=${list[0]}\n    local\
    \ -i curr=0\n    for ((i=1; i<len; i++)); do\n        curr=${list[i]}\n      \
    \  if (( curr > prev )); then\n            inc=1\n        elif (( curr < prev\
    \ )); then\n            dec=1\n        fi\n        prev=$curr\n    done\n    if\
    \ (( inc == 1 && dec == 1 )); then\n        echo \"False\"\n    else\n       \
    \ echo \"True\"\n    fi", "    local -a a=($1)\n    local -a b=($1)\n    local\
    \ -a c=($1)\n    local -a d=($1)\n    local -a e=($1)\n    local -a f=($1)\n \
    \   local -a g=($1)\n    local -a h=($1)\n    local -a i=($1)\n    local -a j=($1)\n\
    \    local -a k=($1)\n    local -a l=($1)\n    local -a m=($1)\n    local -a n=($1)\n\
    \    local -a o=($1)\n    local -a p=($1)\n    local -a q=($1)\n    local -a r=($1)\n\
    \    local -a s=($1)\n    local -a t=($1)\n    local -a u=($1)\n    local -a v=($1)\n\
    \    local -a w=($1)\n    local -a x=($1)\n    local -a y=($1)\n    local -a z=($1)\n\
    \    local -a aa=($1)\n    local -a ab=($1)\n    local -a ac=($1)\n    local -a\
    \ ad=($1)\n    local -a ae=($1)\n    local -a af=($1)\n    local -a ag=($1)\n\
    \    local -a ah=($1)\n    local -a ai=($1)\n    local -a aj=($1)\n    local -a\
    \ ak=($1)\n    local -a al=($1)\n    local -a am=($1)\n    local -a an=($1)\n\
    \    local -a ao=($1)\n    local -a ap=($1)\n    local -a aq=($1)\n    local -a\
    \ ar=($1)\n    local -a as=($1)\n    local -a at=($1)\n    local -a au=($1)\n\
    \    local -a av=($1)\n    local -a aw=($1)\n    local -a ax=($1)\n    local -a\
    \ ay", "    local -a a=($1)\n    local -i n=${#a[@]}\n    local -i i\n    local\
    \ -i incr=0\n    local -i decr=0\n    local -i prev=${a[0]}\n    for ((i=1; i<n;\
    \ i++)); do\n        if ((a[i] > prev)); then\n            incr=1\n        elif\
    \ ((a[i] < prev)); then\n            decr=1\n        fi\n        prev=${a[i]}\n\
    \    done\n    ((incr + decr == 1))", "    local -a arr=($1)\n    local -i i=0\n\
    \    local -i len=${#arr[@]}\n    local -i inc=0\n    local -i dec=0\n    local\
    \ -i res=0\n    if (( len < 2 )); then\n        return 0\n    fi\n    for (( i=1;\
    \ i<len; i++ )); do\n        if (( arr[i] > arr[i-1] )); then\n            inc=1\n\
    \        elif (( arr[i] < arr[i-1] )); then\n            dec=1\n        fi\n \
    \       if (( inc && dec )); then\n            res=1\n            break\n    \
    \    fi\n    done\n    return $res", "    local -a a=($1)\n    local -a b=($1)\n\
    \    local -a c=($1)\n    local -a d=($1)\n    local -a e=($1)\n    local -a f=($1)\n\
    \    local -a g=($1)\n    local -a h=($1)\n    local -a i=($1)\n    local -a j=($1)\n\
    \    local -a k=($1)\n    local -a l=($1)\n    local -a m=($1)\n    local -a n=($1)\n\
    \    local -a o=($1)\n    local -a p=($1)\n    local -a q=($1)\n    local -a r=($1)\n\
    \    local -a s=($1)\n    local -a t=($1)\n    local -a u=($1)\n    local -a v=($1)\n\
    \    local -a w=($1)\n    local -a x=($1)\n    local -a y=($1)\n    local -a z=($1)\n\
    \    local -a aa=($1)\n    local -a ab=($1)\n    local -a ac=($1)\n    local -a\
    \ ad=($1)\n    local -a ae=($1)\n    local -a af=($1)\n    local -a ag=($1)\n\
    \    local -a ah=($1)\n    local -a ai=($1)\n    local -a aj=($1)\n    local -a\
    \ ak=($1)\n    local -a al=($1)\n    local -a am=($1)\n    local -a an=($1)\n\
    \    local -a ao=($1)\n    local -a ap=($1)\n    local -a aq=($1)\n    local -a\
    \ ar=($1)\n    local -a as=($1)\n    local -a at=($1)\n    local -a au=($1)\n\
    \    local -a av=($1)\n    local -a aw=($1)\n    local -a ax=($1)\n    local -a\
    \ ay", "    local -a a=($1)\n    local -i i\n    local -i n=${#a[@]}\n    local\
    \ -i inc=0\n    local -i dec=0\n    for ((i=1; i<n; i++)); do\n        if (( a[i]\
    \ > a[i-1] )); then\n            (( inc++ ))\n        elif (( a[i] < a[i-1] ));\
    \ then\n            (( dec++ ))\n        fi\n    done\n    (( inc == n-1 || dec\
    \ == n-1 ))", "    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local\
    \ -a diffs\n    local i\n    for ((i=0; i < ${#arr[@]}-1; i++)); do\n        diffs[i]=$((arr[i+1]\
    \ - arr[i]))\n    done\n    local -a unique_diffs\n    unique_diffs=($(printf\
    \ \"%s\\n\" \"${diffs[@]}\" | sort -u))\n    if [[ ${#unique_diffs[@]} -eq 1 ]];\
    \ then\n        if [[ ${unique_diffs[0]} -eq 0 ]]; then\n            return 0\n\
    \        else\n            return 1\n        fi\n    elif [[ ${#unique_diffs[@]}\
    \ -eq 2 ]]; then\n        if [[ ${unique_diffs[0]} -eq 0 ]]; then\n          \
    \  return 0\n        elif [[ ${unique_diffs[0]} -lt 0 && ${unique_diffs[1]} -lt\
    \ 0 ]]; then\n            return 0\n        elif [[ ${unique_diffs[0]} -gt 0 &&\
    \ ${unique_diffs[1]} -gt 0 ]]; then\n            return 0\n        else\n    \
    \        return 1\n        fi\n    else\n        return 1\n    fi", "    local\
    \ -a list=($1)\n    local -i n=${#list[@]}\n    local -i i=0\n    local -i increasing=0\n\
    \    local -i decreasing=0\n    local -i result=0\n    if (( n < 2 )); then\n\
    \        echo True\n        return\n    fi\n    if (( list[0] < list[1] )); then\n\
    \        increasing=1\n    elif (( list[0] > list[1] )); then\n        decreasing=1\n\
    \    fi\n    for (( i=1; i<n-1; i++ )); do\n        if (( increasing )); then\n\
    \            if (( list[i] > list[i+1] )); then\n                result=1\n  \
    \              break\n            fi\n        elif (( decreasing )); then\n  \
    \          if (( list[i] < list[i+1] )); then\n                result=1\n    \
    \            break\n            fi\n        else\n            result=1\n     \
    \       break\n        fi\n    done\n    if (( result )); then\n        echo False\n\
    \    else\n        echo True\n    fi", "    local -a list=($1)\n    local -i i\n\
    \    local -i len=${#list[@]}\n    local -i incr=1\n    local -i decr=1\n    for\
    \ ((i=1; i<len; i++)); do\n        (( list[i] > list[i-1] )) && (( incr++ ))\n\
    \        (( list[i] < list[i-1] )) && (( decr++ ))\n    done\n    (( incr == len\
    \ || decr == len )) && echo True || echo False", "    local list=($1)\n    local\
    \ i=0\n    local n=${#list[@]}\n    local increasing=0\n    local decreasing=0\n\
    \    local increasing_count=0\n    local decreasing_count=0\n    local equal_count=0\n\
    \    local equal_value=${list[0]}\n    local prev_value=${list[0]}\n    local\
    \ value=0\n    for ((i=1; i<n; i++)); do\n        value=${list[$i]}\n        if\
    \ ((value > prev_value)); then\n            increasing=1\n            increasing_count=$((increasing_count\
    \ + 1))\n        elif ((value < prev_value)); then\n            decreasing=1\n\
    \            decreasing_count=$((decreasing_count + 1))\n        else\n      \
    \      equal_count=$((equal_count + 1))\n        fi\n        prev_value=$value\n\
    \    done\n    if ((increasing && decreasing)); then\n        echo \"False\"\n\
    \    elif ((increasing_count + decreasing_count + equal_count == n - 1)); then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi", "    local\
    \ list=($1)\n    local i=0\n    local len=${#list[@]}\n    local increasing=0\n\
    \    local decreasing=0\n    if [ $len -lt 2 ]; then\n        return 0\n    fi\n\
    \    for ((i=0; i<len-1; i++)); do\n        if [ ${list[$i]} -lt ${list[$i+1]}\
    \ ]; then\n            increasing=1\n        elif [ ${list[$i]} -gt ${list[$i+1]}\
    \ ]; then\n            decreasing=1\n        fi\n        if [ $increasing -eq\
    \ 1 ] && [ $decreasing -eq 1 ]; then\n            return 1\n        fi\n    done\n\
    \    return 0", "    local -a list=($1)\n    local -i i=0\n    local -i len=${#list[@]}\n\
    \    local -i increasing=0\n    local -i decreasing=0\n    local -i result=0\n\
    \n    if [ $len -eq 1 ]; then\n        echo 1\n        return\n    fi\n\n    if\
    \ [ ${list[0]} -lt ${list[1]} ]; then\n        increasing=1\n    else\n      \
    \  decreasing=1\n    fi\n\n    for ((i=1; i<len-1; i++)); do\n        if [ $increasing\
    \ -eq 1 ]; then\n            if [ ${list[i]} -gt ${list[i+1]} ]; then\n      \
    \          result=0\n                break\n            fi\n        elif [ $decreasing\
    \ -eq 1 ]; then\n            if [ ${list[i]} -lt ${list[i+1]} ]; then\n      \
    \          result=0\n                break\n            fi\n        fi\n     \
    \   result=1\n    done\n\n    echo $result", "    local -a arr=($1)\n    local\
    \ -i i\n    local -i len=${#arr[@]}\n    local -i inc=0\n    local -i dec=0\n\
    \    for ((i=0; i<len-1; i++)); do\n        if (( arr[i] < arr[i+1] )); then\n\
    \            (( inc++ ))\n        elif (( arr[i] > arr[i+1] )); then\n       \
    \     (( dec++ ))\n        fi\n    done\n    (( inc == len-1 || dec == len-1 ))\
    \ && echo True || echo False", "    local -a arr=($1)\n    local -i i=0\n    local\
    \ -i len=${#arr[@]}\n    local -i incr=0\n    local -i decr=0\n    local -i ret=0\n\
    \n    if [ $len -eq 1 ]; then\n        ret=1\n    elif [ $len -gt 1 ]; then\n\
    \        for ((i=0; i<len-1; i++)); do\n            if [ ${arr[$i]} -lt ${arr[$i+1]}\
    \ ]; then\n                incr=1\n            elif [ ${arr[$i]} -gt ${arr[$i+1]}\
    \ ]; then\n                decr=1\n            fi\n        done\n        if [\
    \ $incr -eq 1 -a $decr -eq 0 ]; then\n            ret=1\n        elif [ $incr\
    \ -eq 0 -a $decr -eq 1 ]; then\n            ret=1\n        fi\n    fi\n    echo\
    \ $ret", "    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local -i\
    \ i\n    local -i len=${#arr[@]}\n    local -i incr=0\n    local -i decr=0\n \
    \   for ((i=0; i<len-1; i++)); do\n        if (( arr[i] < arr[i+1] )); then\n\
    \            incr=1\n        elif (( arr[i] > arr[i+1] )); then\n            decr=1\n\
    \        fi\n    done\n    (( incr + decr == 1 ))", "    local -a a=($1)\n   \
    \ local -a b=($1)\n    local -a c=($1)\n    local -a d=($1)\n    local -a e=($1)\n\
    \    local -a f=($1)\n    local -a g=($1)\n    local -a h=($1)\n    local -a i=($1)\n\
    \    local -a j=($1)\n    local -a k=($1)\n    local -a l=($1)\n    local -a m=($1)\n\
    \    local -a n=($1)\n    local -a o=($1)\n    local -a p=($1)\n    local -a q=($1)\n\
    \    local -a r=($1)\n    local -a s=($1)\n    local -a t=($1)\n    local -a u=($1)\n\
    \    local -a v=($1)\n    local -a w=($1)\n    local -a x=($1)\n    local -a y=($1)\n\
    \    local -a z=($1)\n    local -a A=($1)\n    local -a B=($1)\n    local -a C=($1)\n\
    \    local -a D=($1)\n    local -a E=($1)\n    local -a F=($1)\n    local -a G=($1)\n\
    \    local -a H=($1)\n    local -a I=($1)\n    local -a J=($1)\n    local -a K=($1)\n\
    \    local -a L=($1)\n    local -a M=($1)\n    local -a N=($1)\n    local -a O=($1)\n\
    \    local -a P=($1)\n    local -a Q=($1)\n    local -a R=($1)\n    local -a S=($1)\n\
    \    local -a T=($1)\n    local -a U=($1)\n    local -a V=($1)\n    local -a W=($1)\n\
    \    local -a X=($1)\n    local -a Y=($1)\n   ", "    local -a arr=($1)\n    local\
    \ -a arr_sorted=($(echo \"$1\" | tr ' ' '\\n' | sort -n))\n    local -a arr_sorted_r=($(echo\
    \ \"$1\" | tr ' ' '\\n' | sort -nr))\n    if [[ \"${arr[*]}\" == \"${arr_sorted[*]}\"\
    \ ]] || [[ \"${arr[*]}\" == \"${arr_sorted_r[*]}\" ]]; then\n        echo \"True\"\
    \n    else\n        echo \"False\"\n    fi", "    local -a arr\n    IFS=' ' read\
    \ -r -a arr <<< \"$1\"\n    local -a diffs\n    for i in \"${arr[@]:1}\"; do\n\
    \        diffs+=(\"$((i - arr[-1]))\")\n        arr+=(\"$i\")\n    done\n    local\
    \ -a uniq_diffs\n    uniq_diffs=($(printf '%s\\n' \"${diffs[@]}\" | sort -u))\n\
    \    [[ ${#uniq_diffs[@]} -le 1 ]]", "    local -a arr=($1)\n    local -i i=0\n\
    \    local -i len=${#arr[@]}\n    local -i inc=0\n    local -i dec=0\n    local\
    \ -i res=0\n    local -i prev=0\n    local -i curr=0\n    local -i next=0\n\n\
    \    if [ $len -lt 2 ]; then\n        echo \"True\"\n        return 0\n    fi\n\
    \n    for ((i=0; i<len-1; i++)); do\n        prev=${arr[i]}\n        curr=${arr[i+1]}\n\
    \        if [ $i -lt $((len-2)) ]; then\n            next=${arr[i+2]}\n      \
    \  fi\n\n        if [ $curr -gt $prev ]; then\n            inc=$((inc+1))\n  \
    \      elif [ $curr -lt $prev ]; then\n            dec=$((dec+1))\n        fi\n\
    \n        if [ $inc -gt 0 ] && [ $dec -gt 0 ]; then\n            echo \"False\"\
    \n            return 1\n        fi\n\n        if [ $inc -gt 0 ] && [ $curr -gt\
    \ $next ]; then\n            echo \"False\"\n            return 1\n        fi\n\
    \n        if [ $dec -gt 0 ] && [ $curr -lt $next ]; then\n            echo \"\
    False\"\n            return 1\n        fi\n    done\n\n    echo \"True\"\n   \
    \ return 0", "    local -a A=($1)\n    local -i i=0\n    local -i n=${#A[@]}\n\
    \    local -i incr=0\n    local -i decr=0\n    local -i result=0\n    local -i\
    \ prev=${A[0]}\n    local -i curr=0\n    for ((i=1; i<n; i++)); do\n        curr=${A[i]}\n\
    \        if ((curr > prev)); then\n            incr=1\n        elif ((curr < prev));\
    \ then\n            decr=1\n        fi\n        prev=$curr\n    done\n    ((incr\
    \ + decr == 1)) && result=1\n    return $result", "    local list=\"$1\"\n   \
    \ local -i i=0\n    local -i len=0\n    local -i increasing=0\n    local -i decreasing=0\n\
    \    local -i prev=0\n    local -i curr=0\n    local -i result=0\n\n    len=$(echo\
    \ \"$list\" | wc -w)\n    if [ $len -le 1 ]; then\n        result=1\n    else\n\
    \        prev=$(echo \"$list\" | cut -d' ' -f1)\n        for ((i=2; i<=$len; i++));\
    \ do\n            curr=$(echo \"$list\" | cut -d' ' -f$i)\n            if [ $curr\
    \ -gt $prev ]; then\n                increasing=1\n            elif [ $curr -lt\
    \ $prev ]; then\n                decreasing=1\n            fi\n            if\
    \ [ $increasing -eq 1 ] && [ $decreasing -eq 1 ]; then\n                result=0\n\
    \                break\n            fi\n            prev=$curr\n        done\n\
    \        if [ $result -eq 0 ]; then\n            result=1\n        fi\n    fi\n\
    \    echo $result", "    local -a list=($1)\n    local -i i=0\n    local -i len=${#list[@]}\n\
    \    local -i inc=0\n    local -i dec=0\n    local -i cur=0\n    local -i prev=0\n\
    \    local -i next=0\n    local -i ret=0\n\n    if [ $len -lt 2 ]; then\n    \
    \    echo \"True\"\n        return 0\n    fi\n\n    for ((i=0; i<len; i++)); do\n\
    \        cur=${list[$i]}\n        prev=${list[$i-1]}\n        next=${list[$i+1]}\n\
    \n        if [ $i -eq 0 ]; then\n            if [ $cur -lt $next ]; then\n   \
    \             inc=1\n            elif [ $cur -gt $next ]; then\n             \
    \   dec=1\n            fi\n        elif [ $i -eq $((len-1)) ]; then\n        \
    \    if [ $cur -lt $prev ]; then\n                inc=1\n            elif [ $cur\
    \ -gt $prev ]; then\n                dec=1\n            fi\n        else\n   \
    \         if [ $cur -lt $prev ] && [ $cur -lt $next ]; then\n                inc=1\n\
    \            elif [ $cur -gt $prev ] && [ $cur -gt $next ]; then\n           \
    \     dec=1\n            fi\n        fi\n\n        if [ $inc -eq 1 ] && [ $dec\
    \ -eq 1 ]; then\n            ret=1\n            break\n        fi\n    done\n\n\
    \    if [ $ret -eq 1 ]; then\n        echo \"False\"\n    else\n        echo \"\
    True\"\n    fi", "    local -a list=($1)\n    local -i i=0\n    local -i len=${#list[@]}\n\
    \    local -i increasing=0\n    local -i decreasing=0\n    local -i result=0\n\
    \n    if [ $len -lt 2 ]; then\n        echo 1\n        return\n    fi\n\n    for\
    \ ((i=0; i<len-1; i++)); do\n        if [ ${list[$i]} -lt ${list[$i+1]} ]; then\n\
    \            increasing=1\n        elif [ ${list[$i]} -gt ${list[$i+1]} ]; then\n\
    \            decreasing=1\n        fi\n    done\n\n    if [ $increasing -eq 1\
    \ -a $decreasing -eq 0 ]; then\n        result=1\n    elif [ $increasing -eq 0\
    \ -a $decreasing -eq 1 ]; then\n        result=1\n    fi\n\n    echo $result",
  "    local -a list=($1)\n    local -i len=${#list[@]}\n    local -i i=0\n    local\
    \ -i inc=0\n    local -i dec=0\n    local -i cur=0\n    local -i prev=0\n    local\
    \ -i next=0\n    local -i ret=0\n\n    if [ $len -lt 2 ]; then\n        return\
    \ 0\n    fi\n\n    prev=${list[0]}\n    for ((i=1; i<len; i++)); do\n        cur=${list[i]}\n\
    \        if [ $i -lt $((len-1)) ]; then\n            next=${list[i+1]}\n     \
    \   fi\n\n        if [ $cur -gt $prev ]; then\n            inc=1\n        elif\
    \ [ $cur -lt $prev ]; then\n            dec=1\n        fi\n\n        if [ $inc\
    \ -eq 1 -a $dec -eq 1 ]; then\n            ret=1\n            break\n        fi\n\
    \n        if [ $inc -eq 1 -a $cur -gt $next ]; then\n            ret=1\n     \
    \       break\n        fi\n\n        if [ $dec -eq 1 -a $cur -lt $next ]; then\n\
    \            ret=1\n            break\n        fi\n\n        prev=$cur\n    done\n\
    \n    return $ret", "    local -a a=($1)\n    local -i n=${#a[@]}\n    local -i\
    \ i\n    local -i inc=0\n    local -i dec=0\n    for ((i=1; i<n; i++)); do\n \
    \       if ((a[i] > a[i-1])); then\n            inc=1\n        elif ((a[i] < a[i-1]));\
    \ then\n            dec=1\n        fi\n        if ((inc && dec)); then\n     \
    \       return 1\n        fi\n    done\n    return 0", "    local -a list=($1)\n\
    \    local -a diffs\n    local i\n    local len=${#list[@]}\n    local diff\n\
    \    local prev_diff\n    local is_monotonic=1\n\n    for ((i=1; i<len; i++));\
    \ do\n        diffs[i-1]=$((list[i] - list[i-1]))\n    done\n\n    prev_diff=${diffs[0]}\n\
    \    for ((i=1; i<len-1; i++)); do\n        diff=${diffs[i]}\n        if ((diff\
    \ * prev_diff < 0)); then\n            is_monotonic=0\n            break\n   \
    \     fi\n        prev_diff=$diff\n    done\n\n    echo $is_monotonic", "    local\
    \ -a arr\n    local -i i\n    local -i len\n    local -i increasing\n    local\
    \ -i decreasing\n    local -i ret\n\n    arr=($1)\n    len=${#arr[@]}\n    increasing=1\n\
    \    decreasing=1\n    ret=0\n\n    for ((i=1; i<len; i++)); do\n        if [[\
    \ ${arr[i]} -lt ${arr[i-1]} ]]; then\n            increasing=0\n        elif [[\
    \ ${arr[i]} -gt ${arr[i-1]} ]]; then\n            decreasing=0\n        fi\n \
    \   done\n\n    if [[ $increasing -eq 1 || $decreasing -eq 1 ]]; then\n      \
    \  ret=1\n    fi\n\n    return $ret", "    local -a arr=($1)\n    local -i i=0\n\
    \    local -i len=${#arr[@]}\n    local -i incr=0\n    local -i decr=0\n    if\
    \ (( len < 2 )); then\n        echo \"True\"\n        return\n    fi\n    for\
    \ (( i=1; i<len; i++ )); do\n        if (( arr[i] > arr[i-1] )); then\n      \
    \      incr=1\n        elif (( arr[i] < arr[i-1] )); then\n            decr=1\n\
    \        fi\n        if (( incr && decr )); then\n            echo \"False\"\n\
    \            return\n        fi\n    done\n    echo \"True\""]
stop_tokens:
- "\n}"
