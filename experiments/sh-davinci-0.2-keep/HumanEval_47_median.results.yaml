language: sh
name: HumanEval_47_median
results:
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=$1\n    local m=$(echo \"\
    $l\" | wc -w)\n    local n=$((m/2))\n    local s=$(echo \"$l\" | sort -n)\n  \
    \  if ((m%2)); then\n        echo \"$s\" | cut -d' ' -f$((n+1))\n    else\n  \
    \      local a=$(echo \"$s\" | cut -d' ' -f$n)\n        local b=$(echo \"$s\"\
    \ | cut -d' ' -f$((n+1)))\n        echo $(((a+b)/2))\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=$1\n    local n=$(echo $l\
    \ | wc -w)\n    local m=$((n/2))\n    local s=$(echo $l | tr ' ' '\\n' | sort\
    \ -n)\n    if ((n%2==0)); then\n        echo $s | cut -d' ' -f$m,$((m+1)) | awk\
    \ '{print ($1+$2)/2}'\n    else\n        echo $s | cut -d' ' -f$((m+1))\n    fi\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local n=$((m/2))\n    local o=$((n-1))\n    local p=$((n+1))\n    local q=$((m%2))\n\
    \    if [ $q -eq 0 ]; then\n        echo \"scale=1; (${l[$n]}+${l[$o]})/2\" |\
    \ bc\n    else\n        echo \"${l[$n]}\"\n    fi\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[*]}\n    for ((i=0;i<n;i++)); do\n    \
    \    s=$(echo \"$s\" | sed -e \"s/[^ ]* //\" | sort -n)\n    done\n    if ((n%2==1));\
    \ then\n        echo \"$s\" | cut -d' ' -f$((m+1))\n    else\n        local a=$(echo\
    \ \"$s\" | cut -d' ' -f$m)\n        local b=$(echo \"$s\" | cut -d' ' -f$((m+1)))\n\
    \        echo $(((a+b)/2))\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[$m]}\n    if ((n % 2 == 0)); then\n \
    \       s=$((s + ${l[$((m - 1))]}))\n        s=$((s / 2))\n    fi\n    echo $s\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[@]}\n    local t=()\n    local i=0\n\
    \    for e in $s; do\n        t[i]=$e\n        ((i++))\n    done\n    for ((i\
    \ = 0; i < n; i++)); do\n        for ((j = i; j > 0; j--)); do\n            if\
    \ ((${t[j]} < ${t[j-1]})); then\n                local tmp=${t[j]}\n         \
    \       t[j]=${t[j-1]}\n                t[j-1]=$tmp\n            fi\n        done\n\
    \    done\n    if ((n % 2 == 0)); then\n        echo $(((${t[m-1]} + ${t[m]})/2))\n\
    \    else\n        echo ${t[m]}\n    fi\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n  local l=($1)\n  local n=${#l[@]}\n\
    \  local m=$((n / 2))\n  local s=${l[$m]}\n  if ((n % 2 == 0)); then\n    s=$((s\
    \ + ${l[$((m - 1))]}))\n    s=$((s / 2))\n  fi\n  echo $s\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local i\n    local j\n    local tmp\n    for ((i=0; i<m; i++)); do\n    \
    \    for ((j=i+1; j<m; j++)); do\n            if ((${l[i]} > ${l[j]})); then\n\
    \                tmp=${l[i]}\n                l[i]=${l[j]}\n                l[j]=$tmp\n\
    \            fi\n        done\n    done\n    if ((m % 2 == 1)); then\n       \
    \ echo ${l[m/2]}\n    else\n        echo $(((${l[m/2-1]} + ${l[m/2]})/2))\n  \
    \  fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10\
    \ 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    if ((n%2==0)); then\n        echo \"$(((l[m-1]+l[m])/2))\"\
    \n    else\n        echo \"${l[m]}\"\n    fi\n}\n\ncandidate() {\n    median \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[$m]}\n    ((n % 2 == 0)) && s=$(echo\
    \ \"scale=1; (${l[$((m - 1))]} + $s) / 2\" | bc)\n    echo $s\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=$(( ${#l[@]}\
    \ / 2 ))\n    if (( ${#l[@]} % 2 == 0 )); then\n        echo \"$(( (${l[$m-1]}\
    \ + ${l[$m]})/2 ))\"\n    else\n        echo \"${l[$m]}\"\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    for ((i=0;i<n;i++)); do\n    \
    \    s=$(echo -e \"$s\\n${l[i]}\" | sort -n | tr '\\n' ' ')\n    done\n    local\
    \ l=($s)\n    if ((n%2==1)); then\n        echo ${l[m]}\n    else\n        echo\
    \ $(((${l[m-1]}+${l[m]})/2))\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\")\
    \ = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"\
    8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=$1\n    local n=$(echo \"\
    $l\" | wc -w)\n    local m=$((n/2))\n    local s=$(echo \"$l\" | sort -n)\n  \
    \  if ((n%2==0)); then\n        echo \"$s\" | awk -v m=$m '{print ($m+$(m+1))/2}'\n\
    \    else\n        echo \"$s\" | awk -v m=$m '{print $m+1}'\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=$1\n    local -a a=($l)\n\
    \    local n=${#a[@]}\n    local -a b=($(sort -n <<<\"${a[*]}\"))\n    echo \"\
    ${b[$((n/2))]}\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=$1\n    local mid=$((${#l[@]}\
    \ / 2))\n    local sorted=($(echo $l | tr ' ' '\\n' | sort -n))\n    if (( ${#l[@]}\
    \ % 2 == 0 )); then\n        echo \"$((${sorted[mid]} + ${sorted[mid-1]})) / 2\"\
    \ | bc -l\n    else\n        echo \"${sorted[mid]}\"\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local r\n    if ((n%2==0)); then\n        r=$(echo\
    \ \"scale=1; (${l[m-1]}+${l[m]})/2\" | bc)\n    else\n        r=${l[m]}\n    fi\n\
    \    echo $r\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[@]}\n    for ((i = 0; i < n; i++)); do\n\
    \        s=$(echo -e \"$s\\n${l[i]}\" | sort -n | tr '\\n' ' ')\n    done\n  \
    \  l=($s)\n    if ((n % 2 == 1)); then\n        echo ${l[m]}\n    else\n     \
    \   echo $(((${l[m - 1]} + ${l[m]})))\n    fi\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[$m]}\n    if ((n%2==0)); then\n       \
    \ s=$((s+l[m-1]))\n        s=$((s/2))\n    fi\n    echo $s\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=$((n % 2))\n    local r=0\n    local i=0\n\
    \    local x=0\n    local y=0\n    local z=0\n    local t=0\n    for i in ${l[@]};\
    \ do\n        ((x = x + i))\n    done\n    ((r = x / n))\n    for i in ${l[@]};\
    \ do\n        ((y = y + (i - r) * (i - r)))\n    done\n    ((z = y / n))\n   \
    \ ((t = z ** 0.5))\n    if ((s == 0)); then\n        ((r = (l[m - 1] + l[m]) /\
    \ 2))\n    fi\n    echo $r\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0w5n268d.sh: line 28: ((: t = z ** 0.5: syntax error: invalid arithmetic
    operator (error token is ".5")

    /tmp/tmp0w5n268d.sh: line 28: ((: t = z ** 0.5: syntax error: invalid arithmetic
    operator (error token is ".5")

    '
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    local i\n    for ((i=0; i<n; i++));\
    \ do\n        s=${s// ${l[i]}/}\n        if ((i>=m)); then\n            s=${s//\
    \ ${l[i-m]}/}\n        fi\n        if ((i==m)); then\n            echo \"${l[i]}\"\
    \n            return\n        fi\n        if ((${#s}==0)); then\n            echo\
    \ \"$(((l[i-1]+l[i])/2))\"\n            return\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local n=$((m/2))\n    local o=$((n-1))\n    local p=$((n+1))\n    local q=$((m%2))\n\
    \    if [ $q -eq 0 ]; then\n        echo \"$(((${l[$n]}+${l[$o]})/2))\"\n    else\n\
    \        echo \"${l[$n]}\"\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local n=$((m / 2))\n    local s=${l[*]}\n    local t=${s// /$'\\n'}\n   \
    \ local u=($(echo -e \"$t\" | sort -n))\n    local v=${u[$n]}\n    if ((m % 2\
    \ == 0)); then\n        local w=${u[$((n - 1))]}\n        echo $(((v + w) / 2))\n\
    \    else\n        echo $v\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local i\n    local j\n    local tmp\n    for ((i=0; i<m; i++)); do\n    \
    \    for ((j=i+1; j<m; j++)); do\n            if ((l[i] > l[j])); then\n     \
    \           tmp=${l[i]}\n                l[i]=${l[j]}\n                l[j]=$tmp\n\
    \            fi\n        done\n    done\n    if ((m % 2 == 1)); then\n       \
    \ echo ${l[m/2]}\n    else\n        echo $(((${l[m/2-1]} + ${l[m/2]})/2))\n  \
    \  fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10\
    \ 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local i=0\n   \
    \ local j=0\n    local k=0\n    local m=0\n    local n=0\n    local o=0\n    local\
    \ p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n\
    \    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n \
    \   local aa=0\n    local ab=0\n    local ac=0\n    local ad=0\n    local ae=0\n\
    \    local af=0\n    local ag=0\n    local ah=0\n    local ai=0\n    local aj=0\n\
    \    local ak=0\n    local al=0\n    local am=0\n    local an=0\n    local ao=0\n\
    \    local ap=0\n    local aq=0\n    local ar=0\n    local as=0\n    local at=0\n\
    \    local au=0\n    local av=0\n    local aw=0\n    local ax=0\n    local ay=0\n\
    \    local az=0\n    local ba=0\n    local bb=0\n    local bc=0\n    local bd=0\n\
    \    local be=0\n    local bf=0\n    local bg=0\n    local bh=0\n    local bi=0\n\
    \    local bj=0\n    local bk=0\n    local bl=0\n    local bm=0\n    local bn=0\n\
    \    local bo=0\n    local bp=0\n    local bq=0\n    local br=0\n    local bs=0\n\
    \    local bt=0\n    local bu=0\n    local bv=0\n    local bw=0\n    local bx=0\n\
    \    local by=0\n    local bz=0\n    local ca=0\n    local cb=0\n    local cc=0\n\
    \    local cd=0\n    local ce=0\n    local cf=0\n    local cg=0\n    local ch=0\n\
    \    local ci=0\n    local cj=0\n    local\n}\n\ncandidate() {\n    median \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local i\n    local\
    \ m\n    local n\n    local s\n    local t\n\n    for i in ${l[@]}; do\n     \
    \   ((m+=$i))\n        ((n++))\n    done\n    ((s=m/n))\n    for i in ${l[@]};\
    \ do\n        ((t+=(i-s)**2))\n    done\n    ((t/=n))\n    echo \"scale=2; sqrt($t)\"\
    \ | bc\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=$1\n    local m=$(echo \"\
    $l\" | tr ' ' '\\n' | sort -n | awk '{a[i++]=$0} END {print a[int(i/2)]}')\n \
    \   echo $m\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=$(( ${#l[@]}\
    \ / 2 ))\n    if (( ${#l[@]} % 2 == 0 )); then\n        echo \"$(( (${l[$m]} +\
    \ ${l[$(( $m - 1 ))]} ) / 2 ))\"\n    else\n        echo \"${l[$m]}\"\n    fi\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[$m]}\n    if ((n%2==0)); then\n       \
    \ s=$((s+l[m-1]))\n        s=$((s/2))\n    fi\n    echo $s\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m\n    local\
    \ i\n    local j\n    local k\n    local n\n    local tmp\n    n=${#l[@]}\n  \
    \  for ((i=0; i<n; i++)); do\n        k=i\n        for ((j=i+1; j<n; j++)); do\n\
    \            if ((l[j] < l[k])); then\n                k=$j\n            fi\n\
    \        done\n        tmp=${l[i]}\n        l[i]=${l[k]}\n        l[k]=$tmp\n\
    \    done\n    if ((n % 2 == 1)); then\n        m=${l[n/2]}\n    else\n      \
    \  m=$(((l[n/2] + l[n/2-1]) / 2))\n    fi\n    echo $m\n}\n\ncandidate() {\n \
    \   median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[$m]}\n    if ((n % 2 == 0)); then\n \
    \       ((m--))\n        s=$(echo \"scale=1; (${l[$m]} + $s) / 2\" | bc)\n   \
    \ fi\n    echo $s\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[*]}\n    for ((i=0;i<n;i++)); do\n    \
    \    s=$(echo $s | sed 's/\\([^ ]*\\) \\([^ ]*\\)/\\2 \\1/')\n    done\n    l=($s)\n\
    \    if ((n%2==1)); then\n        echo ${l[$m]}\n    else\n        echo $(((${l[$((m-1))]}+${l[$m]})/2))\n\
    \    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=$1\n    local m=$(echo \"\
    $l\" | wc -w)\n    local n=$((m / 2))\n    local r=$((m % 2))\n    local s=$(echo\
    \ \"$l\" | sort -n)\n    local t=$(echo \"$s\" | cut -d' ' -f$((n + 1)))\n   \
    \ if [ $r -eq 0 ]; then\n        local u=$(echo \"$s\" | cut -d' ' -f$n)\n   \
    \     echo \"($t + $u) / 2\" | bc -l\n    else\n        echo \"$t\"\n    fi\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local n=$((m/2))\n    if ((m%2==0)); then\n        echo $(((l[n-1]+l[n])/2))\n\
    \    else\n        echo ${l[n]}\n    fi\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n  local l=($1)\n  local mid=$(( ${#l[@]}\
    \ / 2 ))\n  local sorted=($(printf '%s\\n' \"${l[@]}\" | sort -n))\n  if (( ${#l[@]}\
    \ % 2 == 0 )); then\n    echo \"$(( (${sorted[$mid]} + ${sorted[$(( $mid - 1 ))]})\
    \ / 2 ))\"\n  else\n    echo \"${sorted[$mid]}\"\n  fi\n}\n\ncandidate() {\n \
    \   median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local i=0\n   \
    \ local m=0\n    local n=${#l[@]}\n    for ((i=0; i<n; i++)); do\n        m=$((m+l[i]))\n\
    \    done\n    echo $((m/n))\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=$((n % 2))\n    local a=0\n    local b=0\n\
    \    local i=0\n    for x in ${l[@]}; do\n        if ((i == m)); then\n      \
    \      a=$x\n        fi\n        if ((i == m + s)); then\n            b=$x\n \
    \       fi\n        ((i++))\n    done\n    if ((s == 0)); then\n        echo $(((a\
    \ + b) / 2))\n    else\n        echo $a\n    fi\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local i\n    local\
    \ m\n    local n\n    local -a s\n    for ((i=0; i<${#l[@]}; i++)); do\n     \
    \   s[i]=${l[i]}\n    done\n    for ((i=0; i<${#s[@]}; i++)); do\n        for\
    \ ((j=i+1; j<${#s[@]}; j++)); do\n            if ((s[i] > s[j])); then\n     \
    \           m=${s[i]}\n                s[i]=${s[j]}\n                s[j]=$m\n\
    \            fi\n        done\n    done\n    n=$(( ${#s[@]} / 2 ))\n    if ((\
    \ ${#s[@]} % 2 == 0 )); then\n        echo $(( (${s[n]} + ${s[n-1]} ) / 2 ))\n\
    \    else\n        echo ${s[n]}\n    fi\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    local t\n    for ((i=0; i<m; i++));\
    \ do\n        t=${s#* }\n        s=${s%$t}\n    done\n    if ((n%2==0)); then\n\
    \        echo $(((${l[m-1]}+${l[m]})/2))\n    else\n        echo ${l[m]}\n   \
    \ fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10\
    \ 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local i\n    local\
    \ m\n    local n\n    local s\n    local t\n\n    # Sort the list\n    for ((i\
    \ = 0; i < ${#l[@]}; i++)); do\n        for ((j = i + 1; j < ${#l[@]}; j++));\
    \ do\n            if ((${l[i]} > ${l[j]})); then\n                t=${l[i]}\n\
    \                l[i]=${l[j]}\n                l[j]=$t\n            fi\n     \
    \   done\n    done\n\n    # Get the median\n    n=${#l[@]}\n    m=$((n / 2))\n\
    \    if ((n % 2 == 0)); then\n        s=$(((${l[m - 1]} + ${l[m]})))\n       \
    \ echo $((s / 2))\n    else\n        echo ${l[m]}\n    fi\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    local t\n    for ((i=0; i<m; i++));\
    \ do\n        t=${s#* }\n        s=${s%$t}\n    done\n    if ((n%2)); then\n \
    \       echo $s\n    else\n        echo $(((s+${t% *})/2))\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw3fmvigo.sh: line 22: (s+)/2: syntax error: operand expected (error
    token is ")/2")

    '
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[$m]}\n    if ((n % 2 == 0)); then\n \
    \       s=$((s + ${l[$((m - 1))]}))\n        s=$((s / 2))\n    fi\n    echo $s\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=$(echo \"$1\" | tr ' ' '\\\
    n' | sort -n)\n    local n=$(echo \"$l\" | wc -l)\n    local m=$((n / 2))\n  \
    \  if ((n % 2 == 0)); then\n        echo \"$l\" | sed -n \"$((m - 1))p\"\n   \
    \     echo \"$l\" | sed -n \"$((m + 1))p\" | awk '{print ($1 + $2) / 2}'\n   \
    \ else\n        echo \"$l\" | sed -n \"$((m + 1))p\"\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=$((${#l[@]}\
    \ / 2))\n    if ((${#l[@]} % 2 == 0)); then\n        echo \"$((${l[$m]} + ${l[$((m\
    \ - 1))]})) / 2\" | bc -l\n    else\n        echo \"${l[$m]}\"\n    fi\n}\n\n\
    candidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    for ((i=0;i<n;i++)); do\n    \
    \    s=${s// ${l[i]}/}\n        l[i]=$(echo -e \"${l[i]}\\n$s\" | sort -n | head\
    \ -n $m | tail -n 1)\n    done\n    echo \"${l[@]}\" | tr ' ' '\\n' | sort -n\
    \ | head -n $m | tail -n 1\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    local t\n    for ((i=0; i<m; i++));\
    \ do\n        t=${s#* }\n        s=${s%$t}\n    done\n    if ((n%2==0)); then\n\
    \        echo $(((${l[m-1]}+${l[m]})/2))\n    else\n        echo ${l[m]}\n   \
    \ fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10\
    \ 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    for ((i=0;i<n;i++)); do\n    \
    \    s=${s// ${l[i]}/}\n        s=${s//${l[i]} /}\n        s=${s//${l[i]}/ }\n\
    \        if ((i>=m)); then\n            s=${s// ${l[i-m]}/}\n            s=${s//${l[i-m]}\
    \ /}\n            s=${s//${l[i-m]}/ }\n        fi\n        if ((${#s}<$((n-1))));\
    \ then\n            break\n        fi\n    done\n    local r=($s)\n    if ((n%2==1));\
    \ then\n        echo ${r[0]}\n    else\n        echo $(((${r[0]}+${r[1]})/2))\n\
    \    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local i\n    local\
    \ m\n    local n\n    local s\n    local t\n\n    # Sort the list\n    for ((i\
    \ = 0; i < ${#l[@]}; i++)); do\n        for ((j = i + 1; j < ${#l[@]}; j++));\
    \ do\n            if ((${l[i]} > ${l[j]})); then\n                t=${l[i]}\n\
    \                l[i]=${l[j]}\n                l[j]=$t\n            fi\n     \
    \   done\n    done\n\n    # Get the median\n    n=${#l[@]}\n    m=$((n / 2))\n\
    \    if ((n % 2 == 0)); then\n        s=$(((${l[m - 1]} + ${l[m]})))\n       \
    \ echo $((s / 2))\n    else\n        echo ${l[m]}\n    fi\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local i=0\n   \
    \ local m=0\n    local n=${#l[@]}\n    local -a sorted\n    sorted=($(printf \"\
    %s\\n\" \"${l[@]}\" | sort -n))\n    if (( n % 2 == 1 )); then\n        m=$((\
    \ n / 2 ))\n        echo ${sorted[$m]}\n    else\n        m=$(( n / 2 ))\n   \
    \     echo $(( (${sorted[$m]} + ${sorted[$((m - 1))]}) / 2 ))\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=$(( ${#l[@]}\
    \ / 2 ))\n    local s=${l[$m]}\n    if (( ${#l[@]} % 2 == 0 )); then\n       \
    \ s=$(( (s + ${l[$(( m - 1 ))]}) / 2 ))\n    fi\n    echo $s\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    if ((n % 2 == 0)); then\n        echo \"$(((l[m -\
    \ 1] + l[m]) / 2))\"\n    else\n        echo \"${l[m]}\"\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local n=$((m / 2))\n    local r=$((m % 2))\n    local s=()\n    local t=()\n\
    \    local i=0\n    local j=0\n    local k=0\n    local x=0\n    local y=0\n \
    \   local z=0\n    for ((i = 0; i < m; i++)); do\n        x=${l[i]}\n        y=${s[j]}\n\
    \        if ((x < y)); then\n            s[j]=\"$x\"\n            t[j]=\"$y\"\n\
    \            ((j++))\n        else\n            s[j]=\"$y\"\n            t[j]=\"\
    $x\"\n            ((j++))\n        fi\n        if ((j == n)); then\n         \
    \   if ((r == 0)); then\n                z=${s[j - 1]}\n            else\n   \
    \             z=${t[j - 1]}\n            fi\n            echo \"$z\"\n       \
    \     return\n        fi\n    done\n}\n\ncandidate() {\n    median \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local i\n    local\
    \ m\n    local n\n    local s\n\n    # sort\n    for ((i = 0; i < ${#l[@]}; i++));\
    \ do\n        for ((j = i + 1; j < ${#l[@]}; j++)); do\n            if ((${l[i]}\
    \ > ${l[j]})); then\n                m=${l[i]}\n                l[i]=${l[j]}\n\
    \                l[j]=$m\n            fi\n        done\n    done\n\n    # get\
    \ median\n    n=${#l[@]}\n    if ((n % 2 == 1)); then\n        s=$((n / 2))\n\
    \        echo ${l[s]}\n    else\n        s=$((n / 2))\n        echo $(((${l[s\
    \ - 1]} + ${l[s]}) / 2))\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local l1=($(echo ${l[@]} | tr ' ' '\\n' | sort -n |\
    \ head -n $m))\n    local l2=($(echo ${l[@]} | tr ' ' '\\n' | sort -n | tail -n\
    \ $m))\n    if (( n % 2 == 0 )); then\n        echo $(( (${l1[-1]} + ${l2[0]})\
    \ / 2 ))\n    else\n        echo ${l2[0]}\n    fi\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s\n    if ((n == 0)); then\n        echo 0\n\
    \    elif ((n == 1)); then\n        echo ${l[0]}\n    elif ((n % 2 == 0)); then\n\
    \        s=$(echo \"scale=1; (${l[m - 1]} + ${l[m]}) / 2\" | bc)\n        echo\
    \ $s\n    else\n        echo ${l[m]}\n    fi\n}\n\ncandidate() {\n    median \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    for ((i=0;i<n;i++)); do\n    \
    \    s=${s// ${l[i]}/}\n        local lt=${s// /$'\\n'}\n        lt=($(sort -n\
    \ <<<\"$lt\"))\n        local ln=${#lt[@]}\n        if ((ln==m)); then\n     \
    \       echo \"${lt[m-1]}\"\n            return\n        elif ((ln>m)); then\n\
    \            s=${lt[@]}\n        else\n            s=${l[@]}\n        fi\n   \
    \ done\n    echo \"${lt[m]}\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    local t=()\n    for ((i=0; i<n;\
    \ i++)); do\n        t+=(${l[i]})\n    done\n    for ((i=0; i<n; i++)); do\n \
    \       for ((j=i+1; j<n; j++)); do\n            if ((${t[i]} > ${t[j]})); then\n\
    \                local tmp=${t[i]}\n                t[i]=${t[j]}\n           \
    \     t[j]=$tmp\n            fi\n        done\n    done\n    if ((n % 2 == 0));\
    \ then\n        echo $(((${t[m-1]} + ${t[m]})/2))\n    else\n        echo ${t[m]}\n\
    \    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local i\n    local\
    \ m\n    local n\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local -a A\n    local -a B\n \
    \   local -a C\n    local -a D\n    local -a E\n    local -a F\n    local -a G\n\
    \    local -a H\n    local -a I\n    local -a J\n    local -a K\n    local -a\
    \ L\n    local -a M\n    local -a N\n    local -a O\n    local -a P\n    local\
    \ -a Q\n    local -a R\n    local -a S\n    local -a T\n    local -a U\n    local\
    \ -a V\n    local -a W\n    local -a X\n    local -a Y\n    local -a Z\n    local\
    \ -a a\n    local -a b\n    local -a c\n    local -a d\n    local -a e\n    local\
    \ -a f\n    local -a g\n    local -a h\n    local -a i\n    local -a j\n    local\
    \ -a k\n    local -a l\n    local -a m\n    local -a n\n    local -a o\n    local\
    \ -a p\n    local -a q\n    local -a r\n    local -a s\n    local -a t\n    local\
    \ -a u\n    local -a v\n    local -a w\n    local -a x\n    local -a y\n    local\
    \ -a z\n    local -a Aa\n    local -a Ab\n    local -a Ac\n    local -a Ad\n \
    \   local -a Ae\n    local -a Af\n    local -a Ag\n    local -a Ah\n    local\
    \ -a Ai\n    local -a Aj\n    local -a Ak\n    local -a Al\n    local -a Am\n\
    \    local -a An\n    local -a Ao\n    local -a Ap\n    local -a Aq\n    local\
    \ -a Ar\n    local -a As\n    local -a At\n    local -a Au\n    local -a Av\n\
    \    local -a Aw\n    local -a Ax\n   \n}\n\ncandidate() {\n    median \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\")\
    \ = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"\
    8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    l=($1)\n    n=${#l[@]}\n    if ((\
    \ $n == 0 )); then\n        echo 0\n    elif (( $n == 1 )); then\n        echo\
    \ ${l[0]}\n    else\n        l=($(printf '%f\\n' \"${l[@]}\" | sort -n))\n   \
    \     if (( $n % 2 == 1 )); then\n            echo ${l[$((n/2))]}\n        else\n\
    \            echo $(((${l[$((n/2-1))]}+${l[$((n/2))]})/2))\n        fi\n    fi\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=$(( ${#l[@]}\
    \ / 2 ))\n    if (( ${#l[@]} % 2 == 0 )); then\n        echo \"$(( (${l[$m]} +\
    \ ${l[$((m - 1))]}) / 2.0 ))\"\n    else\n        echo \"${l[$m]}\"\n    fi\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=$(( ${#l[@]}\
    \ / 2 ))\n    if (( ${#l[@]} % 2 == 0 )); then\n        echo $(echo \"scale=1;\
    \ (${l[$m-1]} + ${l[$m]}) / 2\" | bc)\n    else\n        echo ${l[$m]}\n    fi\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local n=$((m / 2))\n    local s=${l[@]}\n    for ((i = 0; i < n; i++)); do\n\
    \        s=${s#* }\n    done\n    if ((m % 2 == 0)); then\n        echo \"scale=1;\
    \ (${l[n-1]} + ${s%% *}) / 2\" | bc\n    else\n        echo ${s%% *}\n    fi\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[@]}\n    local t=()\n    local i=0\n\
    \    for e in $s; do\n        t[i]=$e\n        ((i++))\n    done\n    for ((i\
    \ = 0; i < n; i++)); do\n        for ((j = i; j > 0; j--)); do\n            if\
    \ ((${t[j]} < ${t[j-1]})); then\n                local tmp=${t[j]}\n         \
    \       t[j]=${t[j-1]}\n                t[j-1]=$tmp\n            fi\n        done\n\
    \    done\n    if ((n % 2 == 0)); then\n        echo $(((${t[m-1]} + ${t[m]} +\
    \ 1) / 2))\n    else\n        echo ${t[m]}\n    fi\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=$(echo \"$1\" | tr ' ' '\\\
    n' | sort -n)\n    local n=$(echo \"$l\" | wc -l)\n    local m=$((n / 2))\n  \
    \  if ((n % 2 == 0)); then\n        echo \"$l\" | sed -n \"$((m - 1))p\"\n   \
    \     echo \"$l\" | sed -n \"$((m + 1))p\" | awk '{print $1 / 2}'\n    else\n\
    \        echo \"$l\" | sed -n \"$((m + 1))p\"\n    fi\n}\n\ncandidate() {\n  \
    \  median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local n=$((m/2))\n    if ((m%2==0)); then\n        echo $(((l[n-1]+l[n])/2))\n\
    \    else\n        echo ${l[n]}\n    fi\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    for ((i=0;i<n;i++)); do\n    \
    \    s=$(echo \"$s\" | sed -e \"s/\\b${l[i]}\\b//\")\n        local l2=($s)\n\
    \        local n2=${#l2[@]}\n        if ((n2==m)); then\n            if ((n%2==1));\
    \ then\n                echo \"${l[i]}\"\n                return\n           \
    \ else\n                local l3=($(echo \"$s\" | sed -e \"s/\\b${l[i]}\\b//\"\
    ))\n                echo $(((${l[i]}+${l3[0]})/2))\n                return\n \
    \           fi\n        fi\n    done\n}\n\ncandidate() {\n    median \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\")\
    \ = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"\
    8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    local t=${s// /$'\\n'}\n    local\
    \ u=($(echo \"$t\" | sort -n))\n    if ((n%2==0)); then\n        echo \"$(((u[m-1]+u[m])/2))\"\
    \n    else\n        echo \"${u[m]}\"\n    fi\n}\n\ncandidate() {\n    median \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=$((${#l[@]}\
    \ / 2))\n    local s=$(printf \"%s\\n\" \"${l[@]}\" | sort -n)\n    local v=($s)\n\
    \    if (( ${#l[@]} % 2 == 1 )); then\n        echo ${v[$m]}\n    else\n     \
    \   echo $(( (${v[$m-1]} + ${v[$m]}) / 2 ))\n    fi\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=$(( ${#l[@]}\
    \ / 2 ))\n    local s=${l[$m]}\n    if (( ${#l[@]} % 2 == 0 )); then\n       \
    \ s=$(( (s + ${l[$(( m - 1 ))]}) / 2 ))\n    fi\n    echo $s\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=$1\n    local n=$(echo \"\
    $l\" | wc -w)\n    local m=$((n / 2))\n    local s=$(echo \"$l\" | sort -n)\n\
    \    if ((n % 2 == 0)); then\n        echo \"$s\" | awk \"NR==$m+1 {print \\$1}\"\
    \n    else\n        echo \"$s\" | awk \"NR==$m+1 {print \\$1}\"\n    fi\n}\n\n\
    candidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local i\n    local\
    \ m\n    local n\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local -a a\n    local -a b\n \
    \   local -a c\n    local -a d\n    local -a e\n    local -a f\n    local -a g\n\
    \    local -a h\n    local -a j\n    local -a k\n    local -a l\n    local -a\
    \ m\n    local -a n\n    local -a o\n    local -a p\n    local -a q\n    local\
    \ -a r\n    local -a s\n    local -a t\n    local -a u\n    local -a v\n    local\
    \ -a w\n    local -a x\n    local -a y\n    local -a z\n    local -A A\n    local\
    \ -A B\n    local -A C\n    local -A D\n    local -A E\n    local -A F\n    local\
    \ -A G\n    local -A H\n    local -A I\n    local -A J\n    local -A K\n    local\
    \ -A L\n    local -A M\n    local -A N\n    local -A O\n    local -A P\n    local\
    \ -A Q\n    local -A R\n    local -A S\n    local -A T\n    local -A U\n    local\
    \ -A V\n    local -A W\n    local -A X\n    local -A Y\n    local -A Z\n    local\
    \ -i i\n    local -i m\n    local -i n\n    local -i s\n    local -i t\n    local\
    \ -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local\
    \ -i z\n    local -i A\n    local -i B\n    local -i C\n    local -i D\n    local\
    \ -i E\n    local -i F\n    local -i G\n    local -i H\n    local -i I\n    local\
    \ -i J\n    local -i K\n    local -i L\n    local -i M\n    local -i N\n    local\
    \ -\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10\
    \ 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local n=$((m/2))\n    if ((m%2==0)); then\n        echo \"$(((${l[n-1]}+${l[n]})/2))\"\
    \n    else\n        echo \"${l[n]}\"\n    fi\n}\n\ncandidate() {\n    median \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=$1\n    local m=$(echo \"\
    $l\" | wc -w)\n    local n=$((m/2))\n    local o=$((n+1))\n    local p=$((m%2))\n\
    \    local q=$(echo \"$l\" | tr ' ' '\\n' | sort -n | sed -n \"${n}p\")\n    local\
    \ r=$(echo \"$l\" | tr ' ' '\\n' | sort -n | sed -n \"${o}p\")\n    if [ $p -eq\
    \ 0 ]; then\n        echo \"$(echo \"scale=1; ($q+$r)/2\" | bc)\"\n    else\n\
    \        echo \"$q\"\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[$m]}\n    if ((n % 2 == 0)); then\n \
    \       s=$((s + ${l[$((m - 1))]}))\n        s=$((s / 2))\n    fi\n    echo $s\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=$(( ${#l[@]}\
    \ / 2 ))\n    local s=${l[@]}\n    local n=${#l[@]}\n    echo $((${l[$m]} + ${l[$((m-1))]}))\
    \ / 2 | bc -l\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=$((${#l[@]}/2))\n\
    \    local m=$((${#l[@]}%2))\n    local s=${l[$n]}\n    if ((m==0)); then\n  \
    \      s=$(echo \"scale=1;(${l[$n-1]}+$s)/2\" | bc)\n    fi\n    echo $s\n}\n\n\
    candidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[$m]}\n    if ((n%2==0)); then\n       \
    \ s=$(((s+l[$((m-1))])/2))\n    fi\n    echo $s\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local len=${#l[@]}\n\
    \    if (( len == 0 )); then\n        echo 0\n        return\n    fi\n    local\
    \ mid=$(( len / 2 ))\n    if (( len % 2 == 0 )); then\n        echo $(( (l[mid-1]\
    \ + l[mid]) / 2 ))\n    else\n        echo ${l[mid]}\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=$((${#l[@]}\
    \ / 2))\n    local s=$(printf \"%s\\n\" \"${l[@]}\" | sort -n)\n    local r=$(echo\
    \ \"$s\" | sed -n \"${m}p\")\n    if (( ${#l[@]} % 2 == 0 )); then\n        local\
    \ r2=$(echo \"$s\" | sed -n \"$((m - 1))p\")\n        echo $(((r + r2) / 2))\n\
    \    else\n        echo $r\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local n=$((m/2))\n    local o=$((m%2))\n    local p=$((n-1))\n    local q=$((n+1))\n\
    \    local r=$((n+o))\n    local s=${l[$n]}\n    local t=${l[$p]}\n    local u=${l[$q]}\n\
    \    local v=${l[$r]}\n    local w=$((t+u))\n    local x=$((w/2))\n    local y=$((w%2))\n\
    \    local z=$((x+y))\n    echo $z\n}\n\ncandidate() {\n    median \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local r=$((n % 2))\n    if ((r == 0)); then\n   \
    \     echo \"$(((${l[m - 1]} + ${l[m]})/2))\"\n    else\n        echo \"${l[m]}\"\
    \n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[@]}\n    local t\n    for ((i = 0; i\
    \ < m; i++)); do\n        t=${s#* }\n        s=${s%$t}\n    done\n    if ((n &\
    \ 1)); then\n        echo $s\n    else\n        echo $(((s + ${t% *}) / 2))\n\
    \    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmygvt921.sh: line 22: (s + ) / 2: syntax error: operand expected
    (error token is ") / 2")

    '
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local n=$((m / 2))\n    local s=${l[@]}\n    local t\n    for ((i = 0; i\
    \ < n; i++)); do\n        t=${s#* }\n        s=${s%$t}\n    done\n    if ((m %\
    \ 2 == 0)); then\n        echo $(((s + t) / 2))\n    else\n        echo $t\n \
    \   fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[@]}\n    local t=()\n    local i\n  \
    \  for ((i = 0; i < n; i++)); do\n        t+=($(echo \"$s\" | tr ' ' '\\n' | sort\
    \ -n | sed -n \"$((i + 1))p\"))\n    done\n    if ((n % 2 == 0)); then\n     \
    \   echo \"$(((${t[m - 1]} + ${t[m]} + 1) / 2))\"\n    else\n        echo \"${t[m]}\"\
    \n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[@]}\n    local t\n    for ((i = 0; i\
    \ < m; i++)); do\n        t=${s#* }\n        s=${s%$t}\n    done\n    if ((n %\
    \ 2 == 0)); then\n        echo $(((${s##* } + ${t%% *}) / 2))\n    else\n    \
    \    echo ${s##* }\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=$(( ${#l[@]}\
    \ / 2 ))\n    if (( ${#l[@]} % 2 == 0 )); then\n        echo \"$(( (${l[$m-1]}\
    \ + ${l[$m]})/2 ))\"\n    else\n        echo \"${l[$m]}\"\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    for ((i=0;i<n;i++)); do\n    \
    \    s=$(echo \"$s\" | sed -e \"s/[^ ]* //\" | sort -n)\n    done\n    if ((n%2==1));\
    \ then\n        echo \"$s\" | sed -e \"s/ .*//\"\n    else\n        local a=$(echo\
    \ \"$s\" | sed -e \"s/ .*//\")\n        local b=$(echo \"$s\" | sed -e \"s/.*\
    \ //\")\n        echo $(((a+b)/2))\n    fi\n}\n\ncandidate() {\n    median \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[@]}\n    local t\n    for ((i = 0; i\
    \ < m; i++)); do\n        t=${s#* }\n        s=${s%$t}\n    done\n    if ((n %\
    \ 2 == 0)); then\n        echo $(((${s##* } + ${t%% *}) / 2))\n    else\n    \
    \    echo ${s##* }\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=$((${#l[@]}-1))\n\
    \    local m=$((n/2))\n    local s=${l[$m]}\n    if ((n%2==0)); then\n       \
    \ ((s+=${l[$((m-1))]}))\n        echo $((s/2))\n    else\n        echo $s\n  \
    \  fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10\
    \ 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    for ((i=0;i<n;i++)); do\n    \
    \    s=$(echo \"$s\" | sed -e \"s/\\b${l[i]}\\b//\")\n        if [ $((n-i)) -le\
    \ $m ]; then\n            echo \"${l[i]}\"\n            return\n        fi\n \
    \   done\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local i=0\n    local j=0\n    local k=0\n    local t=0\n    for ((i=0; i<m;\
    \ i++)); do\n        for ((j=i+1; j<m; j++)); do\n            if ((${l[i]} > ${l[j]}));\
    \ then\n                t=${l[i]}\n                l[i]=${l[j]}\n            \
    \    l[j]=$t\n            fi\n        done\n    done\n    if ((m % 2 == 0)); then\n\
    \        k=$((m / 2))\n        echo $(((${l[k-1]} + ${l[k]} + 1) / 2))\n    else\n\
    \        k=$((m / 2))\n        echo ${l[k]}\n    fi\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    for ((i=0;i<n;i++)); do\n    \
    \    s=${s/% ${l[i]}*}\n        if ((i>=m)); then\n            s=${s// ${l[i-m]}*}\n\
    \        fi\n        if ((i==m)); then\n            echo \"${l[i]}\"\n       \
    \     return\n        fi\n    done\n    local a=($s)\n    echo \"$((a[0]+a[1]))/2\"\
    \ | bc -l\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[$m]}\n    if ((n % 2 == 0)); then\n \
    \       s=$((s + ${l[$((m - 1))]}))\n        s=$((s / 2))\n    fi\n    echo $s\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local r=$((n%2))\n    if ((r==0)); then\n        echo\
    \ \"$(((${l[m-1]}+${l[m]})/2))\"\n    else\n        echo \"${l[m]}\"\n    fi\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=$1\n    local m\n    local\
    \ -a a\n    local -i i\n    local -i n\n    local -i p\n    local -i q\n    local\
    \ -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local\
    \ -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i A\n    local\
    \ -i B\n    local -i C\n    local -i D\n    local -i E\n    local -i F\n    local\
    \ -i G\n    local -i H\n    local -i I\n    local -i J\n    local -i K\n    local\
    \ -i L\n    local -i M\n    local -i N\n    local -i O\n    local -i P\n    local\
    \ -i Q\n    local -i R\n    local -i S\n    local -i T\n    local -i U\n    local\
    \ -i V\n    local -i W\n    local -i X\n    local -i Y\n    local -i Z\n    local\
    \ -i aa\n    local -i ab\n    local -i ac\n    local -i ad\n    local -i ae\n\
    \    local -i af\n    local -i ag\n    local -i ah\n    local -i ai\n    local\
    \ -i aj\n    local -i ak\n    local -i al\n    local -i am\n    local -i an\n\
    \    local -i ao\n    local -i ap\n    local -i aq\n    local -i ar\n    local\
    \ -i as\n    local -i at\n    local -i au\n    local -i av\n    local -i aw\n\
    \    local -i ax\n    local -i ay\n    local -i az\n    local -i ba\n    local\
    \ -i bb\n    local -i bc\n    local -i bd\n    local -i be\n    local -i bf\n\
    \    local -i bg\n    local -i bh\n    local -i bi\n    local -i bj\n    local\
    \ -i bk\n    local -i bl\n    local -i bm\n    local -i bn\n    local -i bo\n\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local i=0\n    local j=0\n    local k=0\n    local t=0\n    local n=0\n \
    \   local sum=0\n    local res=0\n    local tmp=0\n    local tmp1=0\n    local\
    \ tmp2=0\n    local tmp3=0\n    local tmp4=0\n    local tmp5=0\n    local tmp6=0\n\
    \    local tmp7=0\n    local tmp8=0\n    local tmp9=0\n    local tmp10=0\n   \
    \ local tmp11=0\n    local tmp12=0\n    local tmp13=0\n    local tmp14=0\n   \
    \ local tmp15=0\n    local tmp16=0\n    local tmp17=0\n    local tmp18=0\n   \
    \ local tmp19=0\n    local tmp20=0\n    local tmp21=0\n    local tmp22=0\n   \
    \ local tmp23=0\n    local tmp24=0\n    local tmp25=0\n    local tmp26=0\n   \
    \ local tmp27=0\n    local tmp28=0\n    local tmp29=0\n    local tmp30=0\n   \
    \ local tmp31=0\n    local tmp32=0\n    local tmp33=0\n    local tmp34=0\n   \
    \ local tmp35=0\n    local tmp36=0\n    local tmp37=0\n    local tmp38=0\n   \
    \ local tmp39=0\n    local tmp40=0\n    local tmp41=0\n    local tmp42=0\n   \
    \ local tmp43=0\n    local tmp44=0\n    local tmp45=0\n    local tmp46=0\n   \
    \ local tmp47=0\n    local tmp48=0\n    local tmp49=0\n    local tmp50=0\n   \
    \ local tmp51=0\n    local tmp52=0\n    local tmp53=0\n    local tmp54=0\n   \
    \ local tmp55=0\n    local tmp56=0\n    local tmp57=0\n    local tmp58=0\n   \
    \ local tmp59=0\n    local tmp60=0\n    local tmp61=0\n    local tmp62=0\n   \
    \ local tmp63=0\n    local tmp\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local i\n    local\
    \ m\n    local n\n    local s\n    local t\n    local x\n    local y\n    local\
    \ z\n    n=${#l[@]}\n    if ((n == 0)); then\n        echo 0\n        return\n\
    \    fi\n    if ((n == 1)); then\n        echo ${l[0]}\n        return\n    fi\n\
    \    if ((n == 2)); then\n        echo $(((${l[0]} + ${l[1]})/2))\n        return\n\
    \    fi\n    if ((n == 3)); then\n        x=${l[0]}\n        y=${l[1]}\n     \
    \   z=${l[2]}\n        if ((x <= y)); then\n            if ((y <= z)); then\n\
    \                echo $y\n            elif ((x <= z)); then\n                echo\
    \ $z\n            else\n                echo $x\n            fi\n        else\n\
    \            if ((x <= z)); then\n                echo $x\n            elif ((y\
    \ <= z)); then\n                echo $z\n            else\n                echo\
    \ $y\n            fi\n        fi\n        return\n    fi\n    if ((n == 4)); then\n\
    \        x=${l[0]}\n        y=${l[1]}\n        z=${l[2]}\n        t=${l[3]}\n\
    \        if ((x <= y)); then\n            if ((y <= z)); then\n              \
    \  if ((z <= t)); then\n                    echo $((($y + $z)/2))\n          \
    \      elif ((x <= t)); then\n                    echo $((($x + $z)/2))\n    \
    \            else\n                    echo $((($x + $y)/2))\n               \
    \ fi\n            elif ((x <= z)); then\n                if ((z <= t)); then\n\
    \                    echo $((($x + $z)/2))\n                elif ((x <= t)); then\n\
    \                    echo $((($x + $t)/2))\n                else\n           \
    \         echo $((($x + $y)/2))\n                fi\n            else\n      \
    \          if ((x <= t)); then\n                    echo $((($x + $z)/2))\n  \
    \              elif ((y <= t)); then\n                    echo $((($y + $z)/2\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyw__6_jz.sh: line 81: unexpected EOF while looking for matching
    `)''

    /tmp/tmpyw__6_jz.sh: line 98: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[$m]}\n    if ((n % 2 == 0)); then\n \
    \       s=$((s + ${l[$((m - 1))]}))\n        s=$((s / 2))\n    fi\n    echo $s\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=$1\n    local m=$(echo \"\
    $l\" | wc -w)\n    local n=$((m / 2))\n    local s=$(echo \"$l\" | sort -n)\n\
    \    if ((m % 2 == 0)); then\n        echo \"$s\" | awk -v n=$n '{print ($n +\
    \ $n + 1) / 2}'\n    else\n        echo \"$s\" | awk -v n=$n '{print $n + 1}'\n\
    \    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[$m]}\n    if ((n % 2 == 0)); then\n \
    \       s=$((s + ${l[$((m - 1))]}))\n        s=$((s / 2))\n    fi\n    echo $s\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    if ((n%2==0)); then\n        echo \"$((${l[m-1]}+${l[m]}))/2\"\
    \ | bc -l\n    else\n        echo \"${l[m]}\"\n    fi\n}\n\ncandidate() {\n  \
    \  median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=$(printf \"%s\\n\" \"${l[@]}\" | sort -n)\n\
    \    local r\n    if ((n%2)); then\n        r=$(echo \"$s\" | sed -n \"$((m+1))p\"\
    )\n    else\n        r=$(echo \"$s\" | sed -n \"$m,$((m+1))p\" | awk '{print ($1+$2)/2}')\n\
    \    fi\n    echo \"$r\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local r=$((n % 2))\n    if ((r == 0)); then\n   \
    \     echo $(((l[m - 1] + l[m]) / 2))\n    else\n        echo ${l[m]}\n    fi\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    local t\n    for ((i=0; i<m; i++));\
    \ do\n        t=${s#* }\n        s=${s%$t}\n    done\n    if ((n%2)); then\n \
    \       echo $s\n    else\n        echo $(((s+${t% *})/2))\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw3fmvigo.sh: line 22: (s+)/2: syntax error: operand expected (error
    token is ")/2")

    '
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[$m]}\n    if ((n % 2 == 0)); then\n \
    \       s=$((s + ${l[$((m - 1))]}))\n        s=$((s / 2))\n    fi\n    echo $s\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    if ((n%2==0)); then\n        echo \"$(echo \"${l[m-1]}\
    \ + ${l[m]}\" | bc -l) / 2\" | bc -l\n    else\n        echo \"${l[m]}\"\n   \
    \ fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10\
    \ 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[$m]}\n    if ((n%2==0)); then\n       \
    \ s=$((s+l[m-1]))\n        s=$((s/2))\n    fi\n    echo $s\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    if ((n%2==0)); then\n        echo \"scale=1; (${l[m-1]}+${l[m]})/2\"\
    \ | bc\n    else\n        echo \"${l[m]}\"\n    fi\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[@]}\n    local t\n    for ((i = 0; i\
    \ < m; i++)); do\n        t=${s#* }\n        s=${s%$t}\n    done\n    if ((n %\
    \ 2 == 0)); then\n        t=${s#* }\n        echo $(((${s%$t} + $t) / 2))\n  \
    \  else\n        echo $s\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw3bzj05u.sh: line 21: (-10  + ) / 2: syntax error: operand expected
    (error token is ") / 2")

    '
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[$m]}\n    if ((n % 2 == 0)); then\n \
    \       s=$((s + ${l[$((m - 1))]}))\n        s=$((s / 2))\n    fi\n    echo $s\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[$m]}\n    if ((n%2==0)); then\n       \
    \ s=$((s+l[m-1]))\n        s=$((s/2))\n    fi\n    echo $s\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    for ((i=0;i<n;i++)); do\n    \
    \    s=$(echo \"$s\" | sed -e \"s/[^ ]* //\" | sort -n)\n    done\n    if ((n%2==1));\
    \ then\n        echo \"$s\" | cut -d' ' -f$((m+1))\n    else\n        local a=$(echo\
    \ \"$s\" | cut -d' ' -f$m)\n        local b=$(echo \"$s\" | cut -d' ' -f$((m+1)))\n\
    \        echo $(((a+b)/2))\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=$1\n    local n=$(echo \"\
    $l\" | wc -w)\n    local m=$((n / 2))\n    local s=$(echo \"$l\" | sort -n)\n\
    \    if ((n == 0)); then\n        echo 0\n    elif ((n == 1)); then\n        echo\
    \ \"$l\"\n    elif ((n % 2 == 1)); then\n        echo \"$s\" | cut -d ' ' -f $((m\
    \ + 1))\n    else\n        echo \"$s\" | cut -d ' ' -f $m | awk '{print ($1 +\
    \ $2) / 2}'\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[$m]}\n    ((n%2)) && s=$(echo \"scale=1;(${l[$((m-1))]}+$s)/2\"\
    \ | bc)\n    echo $s\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local i=0\n    local j=0\n    local k=0\n    local t=0\n    for ((i=0; i<m;\
    \ i++)); do\n        for ((j=i+1; j<m; j++)); do\n            if ((${l[i]} > ${l[j]}));\
    \ then\n                t=${l[i]}\n                l[i]=${l[j]}\n            \
    \    l[j]=$t\n            fi\n        done\n    done\n    if ((m % 2 == 0)); then\n\
    \        k=$((m / 2))\n        echo $(((${l[k-1]} + ${l[k]} + 1) / 2))\n    else\n\
    \        k=$((m / 2))\n        echo ${l[k]}\n    fi\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=$1\n    local m=$(echo \"\
    $l\" | wc -w)\n    local n=$((m/2))\n    local o=$((m%2))\n    local p=$(echo\
    \ \"$l\" | sort -n | awk -v n=$n -v o=$o '{if (o==0) print ($n+$(n+1))/2; else\
    \ print $n}')\n    echo $p\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[@]}\n    local r=0\n    local t=0\n \
    \   local i=0\n    local j=0\n    local k=0\n    local p=0\n    local q=0\n  \
    \  local x=0\n    local y=0\n    local z=0\n    local v=0\n    local w=0\n   \
    \ local u=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local\
    \ e=0\n    local f=0\n    local g=0\n    local h=0\n    local o=0\n    local p=0\n\
    \    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n \
    \   local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n  \
    \  local aa=0\n    local ab=0\n    local ac=0\n    local ad=0\n    local ae=0\n\
    \    local af=0\n    local ag=0\n    local ah=0\n    local ai=0\n    local aj=0\n\
    \    local ak=0\n    local al=0\n    local am=0\n    local an=0\n    local ao=0\n\
    \    local ap=0\n    local aq=0\n    local ar=0\n    local as=0\n    local at=0\n\
    \    local au=0\n    local av=0\n    local aw=0\n    local ax=0\n    local ay=0\n\
    \    local az=0\n    local ba=0\n    local bb=0\n    local bc=0\n    local bd=0\n\
    \    local be=0\n    local bf=0\n    local bg=0\n    local bh=0\n    local bi=0\n\
    \    local bj=0\n    local bk=0\n    local bl=0\n    local bm=0\n    local bn=0\n\
    \    local bo=0\n    local bp=0\n    local bq=0\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[$m]}\n    if ((n % 2 == 0)); then\n \
    \       s=$((s + ${l[$((m - 1))]}))\n        s=$((s / 2))\n    fi\n    echo $s\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local i=0\n    local sum=0\n    local res=0\n    for i in ${l[@]}; do\n \
    \       sum=$(($sum + $i))\n    done\n    res=$(echo \"scale=2; $sum / $m\" |\
    \ bc)\n    echo $res\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 0
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    local t=${s// /$'\\n'}\n    local\
    \ u=($(echo -e \"$t\" | sort -n))\n    if ((n%2==0)); then\n        echo \"scale=1;(${u[m-1]}+${u[m]})/2\"\
    \ | bc\n    else\n        echo ${u[m]}\n    fi\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    if ((n%2==0)); then\n        echo \"$(((${l[m-1]}+${l[m]})/2))\"\
    \n    else\n        echo \"${l[m]}\"\n    fi\n}\n\ncandidate() {\n    median \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: -1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=$((n % 2))\n    local r=$((m + s))\n    local\
    \ l1=${l[@]:0:$m}\n    local l2=${l[@]:$r}\n    local m1=$(median \"$l1\")\n \
    \   local m2=$(median \"$l2\")\n    if ((s)); then\n        echo $m2\n    else\n\
    \        echo $(((m1 + m2) / 2))\n    fi\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659996105
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local n=$((m / 2))\n    local o=$((n - 1))\n    local p=$((n + 1))\n    local\
    \ q=$((m % 2))\n    if ((q == 0)); then\n        echo \"$(((${l[n]} + ${l[o]}\
    \ + 0.0) / 2))\"\n    else\n        echo \"${l[n]}\"\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    local -a a=($(echo $s | tr ' '\
    \ '\\n' | sort -n))\n    if ((n%2==1)); then\n        echo ${a[$m]}\n    else\n\
    \        echo $(((${a[$m-1]}+${a[$m]})/2))\n    fi\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local i\n    local j\n    local t\n    for ((i=0; i<m; i++)); do\n      \
    \  for ((j=i; j<m; j++)); do\n            if ((${l[i]} > ${l[j]})); then\n   \
    \             t=${l[i]}\n                l[i]=${l[j]}\n                l[j]=$t\n\
    \            fi\n        done\n    done\n    if ((m % 2 == 1)); then\n       \
    \ echo ${l[m/2]}\n    else\n        echo $(((${l[m/2-1]} + ${l[m/2]})/2))\n  \
    \  fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10\
    \ 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    for ((i=0;i<n;i++)); do\n    \
    \    s=${s// ${l[i]}/}\n        l[i]=$(echo -e \"${l[i]}\\n$s\" | sort -n | sed\
    \ -n \"$m p\")\n        if ((i<n-1)); then\n            s=${s//${l[i]} }\n   \
    \     fi\n    done\n    echo ${l[n-1]}\n}\n\ncandidate() {\n    median \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\")\
    \ = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"\
    8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[*]}\n    local i\n    for ((i = 0; i\
    \ < n; i++)); do\n        if ((i == m)); then\n            echo \"${l[$i]}\"\n\
    \            return\n        fi\n        s=${s/${l[$i]}/}\n    done\n    local\
    \ -a l=($s)\n    echo \"$(((${l[0]} + ${l[1]} + 1) / 2))\"\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[$m]}\n    ((n % 2 == 0)) && s=$(echo\
    \ \"scale=1; (${l[$((m - 1))]} + $s) / 2\" | bc)\n    echo $s\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[*]}\n    for ((i=0;i<n;i++)); do\n    \
    \    s=${s// ${l[i]}/}\n        local lt=${s%% *}\n        local gt=${s#* }\n\
    \        if [ ${#lt} -lt $m ]; then\n            s=$gt\n        elif [ ${#gt}\
    \ -lt $m ]; then\n            s=$lt\n        else\n            break\n       \
    \ fi\n    done\n    if [ $((n%2)) -eq 0 ]; then\n        echo $(((l[i]+l[i-1])/2))\n\
    \    else\n        echo ${l[i]}\n    fi\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s\n    if ((n%2==0)); then\n        s=$(echo\
    \ \"${l[m-1]} + ${l[m]}\" | bc -l)\n        echo \"$s / 2\" | bc -l\n    else\n\
    \        echo \"${l[m]}\"\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[$m]}\n    if ((n % 2 == 0)); then\n \
    \       s=$((s + ${l[$((m - 1))]}))\n        s=$((s / 2))\n    fi\n    echo $s\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local i\n    local m\n    local s\n    local t\n    for ((i=0; i<n; i++));\
    \ do\n        t=${l[i]}\n        s=${l[m]}\n        ((t < s)) && m=$i\n    done\n\
    \    ((n > 1)) || return\n    ((n & 1)) || {\n        ((m > 0)) || return\n  \
    \      ((l[m-1] < l[m+1])) && m=$((m-1))\n    }\n    echo ${l[m]}\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=$(( ${#l[@]}\
    \ / 2 ))\n    local s=${l[@]}\n    local t=${l[@]}\n    local i\n\n    for ((i=0;\
    \ i<m; i++)); do\n        s=${s#* }\n        t=${t% *}\n    done\n\n    if ((\
    \ ${#l[@]} % 2 == 0 )); then\n        echo \"scale=1; (${s%% *} + ${t##* }) /\
    \ 2\" | bc\n    else\n        echo \"${s%% *}\"\n    fi\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[$m]}\n    if ((n % 2 == 0)); then\n \
    \       s=$((s + ${l[$((m - 1))]}))\n        s=$((s / 2))\n    fi\n    echo $s\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 0
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local i\n    local\
    \ m\n    local n\n    local s\n    local t\n\n    n=${#l[@]}\n    if ((n == 0));\
    \ then\n        echo 0\n        return\n    fi\n\n    for ((i = 0; i < n; i++));\
    \ do\n        t=${l[i]}\n        for ((j = i - 1; j >= 0 && l[j] > t; j--)); do\n\
    \            l[j + 1]=${l[j]}\n        done\n        l[j + 1]=$t\n    done\n\n\
    \    if ((n % 2 == 1)); then\n        echo ${l[n / 2]}\n    else\n        m=$((n\
    \ / 2))\n        s=$(echo \"${l[m - 1]} + ${l[m]}\" | bc)\n        echo $(echo\
    \ \"scale=1; $s / 2\" | bc)\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    local t=()\n    for i in $(seq\
    \ 0 $((n-1))); do\n        t+=($(echo \"$s\" | tr ' ' '\\n' | sort -n | sed -n\
    \ \"$((i+1))p\"))\n    done\n    if ((n%2==1)); then\n        echo ${t[$m]}\n\
    \    else\n        echo $(((${t[$((m-1))]}+${t[$m]})/2))\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[$m]}\n    if ((n%2==0)); then\n       \
    \ s=$((s+l[$((m-1))]))\n        s=$((s/2))\n    fi\n    echo $s\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 0
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    local t=${s// /$'\\n'}\n    local\
    \ u=($(echo -e \"$t\" | sort -n))\n    if ((n%2==0)); then\n        echo \"scale=1;\
    \ (${u[m-1]}+${u[m]})/2\" | bc\n    else\n        echo ${u[m]}\n    fi\n}\n\n\
    candidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=$((${#l[@]}\
    \ / 2))\n    local r=$((${#l[@]} % 2))\n    if [ $r -eq 0 ]; then\n        echo\
    \ $((${l[$m]} + ${l[$m-1]})) / 2 | bc -l\n    else\n        echo ${l[$m]}\n  \
    \  fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10\
    \ 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=$(( ${#l[@]}\
    \ / 2 ))\n    if (( ${#l[@]} % 2 == 0 )); then\n        echo $(( (${l[$m-1]} +\
    \ ${l[$m]})/2.0 ))\n    else\n        echo ${l[$m]}\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[@]}\n    local t\n    for ((i = 0; i\
    \ < m; i++)); do\n        t=${s#* }\n        s=${s%$t}\n    done\n    if ((n %\
    \ 2 == 0)); then\n        echo $(((${s% *} + ${t% *}) / 2.0))\n    else\n    \
    \    echo ${s% *}\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkh9m0iqd.sh: line 20: (-10 + ) / 2.0: syntax error: operand expected
    (error token is ") / 2.0")

    '
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    for ((i=0;i<n;i++)); do\n    \
    \    s=$(echo \"$s\" | sed -e \"s/[^ ]* //\" | sort -n)\n    done\n    if ((n%2==1));\
    \ then\n        echo \"$s\" | sed -e \"s/ .*//\"\n    else\n        echo \"scale=1;\
    \ ($(echo \"$s\" | sed -e \"s/ .*//\") + $(echo \"$s\" | sed -e \"s/.* //\"))/2\"\
    \ | bc\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local i=0\n    local j=0\n    local k=0\n    local t=0\n    for ((i=0; i<m;\
    \ i++)); do\n        for ((j=i+1; j<m; j++)); do\n            if ((${l[i]} > ${l[j]}));\
    \ then\n                t=${l[i]}\n                l[i]=${l[j]}\n            \
    \    l[j]=$t\n            fi\n        done\n    done\n    if ((m % 2 == 0)); then\n\
    \        k=$((m / 2))\n        echo $(((${l[k]} + ${l[k-1]})))\n    else\n   \
    \     k=$((m / 2))\n        echo ${l[k]}\n    fi\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local n=$((m/2))\n    local r=$((m%2))\n    if ((r==0)); then\n        echo\
    \ \"$(((l[n-1]+l[n])/2))\"\n    else\n        echo \"${l[n]}\"\n    fi\n}\n\n\
    candidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m\n    local\
    \ i\n    local j\n    local k\n    local n\n    n=${#l[@]}\n    for ((i=0; i<n;\
    \ i++)); do\n        k=${l[i]}\n        for ((j=i; j>0 && l[j-1]>k; j--)); do\n\
    \            l[j]=${l[j-1]}\n        done\n        l[j]=$k\n    done\n    if ((n%2==1));\
    \ then\n        echo ${l[n/2]}\n    else\n        m=$((n/2))\n        echo $(((l[m-1]+l[m])/2))\n\
    \    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local n=$((m / 2))\n    local s=${l[$n]}\n    ((m % 2 == 0)) && s=$(echo\
    \ \"scale=1; (${l[$n]} + ${l[$((n - 1))]})/2\" | bc)\n    echo $s\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[$m]}\n    if ((n % 2 == 0)); then\n \
    \       s=$((s + ${l[$((m - 1))]}))\n        s=$((s / 2))\n    fi\n    echo $s\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[$m]}\n    ((n % 2 == 0)) && s=$(echo\
    \ \"scale=1; (${l[$((m - 1))]} + $s) / 2\" | bc)\n    echo $s\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local n=$((m/2))\n    local s=${l[*]}\n    local t=${s// /$'\\n'}\n    local\
    \ u=($(echo \"$t\" | sort -n))\n    if ((m%2==0)); then\n        echo \"$(((u[n-1]+u[n])/2))\"\
    \n    else\n        echo \"${u[n]}\"\n    fi\n}\n\ncandidate() {\n    median \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[@]}\n    local t=()\n    for i in ${l[@]};\
    \ do\n        t+=($i)\n    done\n    echo ${t[@]} | tr ' ' '\\n' | sort -n | awk\
    \ \"NR==$m\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local i=$((n / 2))\n    local m\n    if ((n % 2 == 0)); then\n        m=$(((l[i\
    \ - 1] + l[i]) / 2))\n    else\n        m=${l[i]}\n    fi\n    echo $m\n}\n\n\
    candidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local len=${#l[@]}\n\
    \    local mid=$((len / 2))\n    local sorted=($(printf \"%s\\n\" \"${l[@]}\"\
    \ | sort -n))\n    if ((len % 2 == 0)); then\n        echo $(((sorted[mid - 1]\
    \ + sorted[mid]) / 2))\n    else\n        echo ${sorted[mid]}\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=$((${#l[@]}\
    \ / 2))\n    local s=${l[@]}\n    for ((i=0; i<m; i++)); do\n        s=${s#* }\n\
    \    done\n    s=${s%% *}\n    if ((${#l[@]} % 2 == 0)); then\n        s=$(echo\
    \ \"scale=1; ($s + ${s#* })/2\" | bc)\n    fi\n    echo \"$s\"\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    for ((i=0;i<n;i++)); do\n    \
    \    s=${s// ${l[i]}/}\n        local lt=${s%% *}\n        local gt=${s#* }\n\
    \        if [ ${#lt} -lt $m ]; then\n            s=$gt\n        elif [ ${#gt}\
    \ -lt $m ]; then\n            s=$lt\n        else\n            break\n       \
    \ fi\n    done\n    if [ $((n%2)) -eq 0 ]; then\n        local a=($s)\n      \
    \  echo $(((${a[0]}+${a[1]})/2))\n    else\n        echo $s\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s\n    if ((n % 2 == 0)); then\n        s=$(echo\
    \ \"scale=1; (${l[m - 1]} + ${l[m]}) / 2\" | bc)\n    else\n        s=${l[m]}\n\
    \    fi\n    echo $s\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[*]}\n    for ((i=0;i<n;i++)); do\n    \
    \    for ((j=i;j<n;j++)); do\n            if [[ ${l[j]} < ${l[i]} ]]; then\n \
    \               t=${l[i]}\n                l[i]=${l[j]}\n                l[j]=$t\n\
    \            fi\n        done\n    done\n    if ((n%2==1)); then\n        echo\
    \ ${l[m]}\n    else\n        echo $(((${l[m-1]}+${l[m]})/2))\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=$((${#l[@]}\
    \ / 2))\n    if ((${#l[@]} % 2 == 0)); then\n        echo $(((${l[$m]} + ${l[$((m\
    \ - 1))]}) / 2))\n    else\n        echo ${l[$m]}\n    fi\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[*]}\n    for ((i=0;i<n;i++)); do\n    \
    \    for ((j=i;j<n;j++)); do\n            if [[ ${l[j]} < ${l[i]} ]]; then\n \
    \               t=${l[i]}\n                l[i]=${l[j]}\n                l[j]=$t\n\
    \            fi\n        done\n    done\n    if ((n%2==1)); then\n        echo\
    \ ${l[m]}\n    else\n        echo $(((${l[m-1]}+${l[m]})/2))\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[@]}\n    local t=${s// /$'\\n'}\n   \
    \ local u=($(echo -e \"$t\" | sort -n))\n    if ((n % 2 == 0)); then\n       \
    \ echo \"$(((u[m - 1] + u[m]) / 2))\"\n    else\n        echo \"${u[m]}\"\n  \
    \  fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10\
    \ 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=$(( ${#l[@]}\
    \ / 2 ))\n    local s=${l[$m]}\n    if (( ${#l[@]} % 2 == 0 )); then\n       \
    \ (( s += ${l[$(( m - 1 ))]} ))\n        echo $(( s / 2 ))\n    else\n       \
    \ echo $s\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local i\n    local\
    \ m\n    local n\n    local s\n    local t\n    for i in ${l[@]}; do\n       \
    \ m=$((m+i))\n        n=$((n+1))\n    done\n    s=$(echo \"scale=2; $m/$n\" |\
    \ bc)\n    t=$(echo \"scale=2; $s*2\" | bc)\n    echo $t\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[$m]}\n    if ((n % 2 == 0)); then\n \
    \       s=$((s + ${l[$((m - 1))]}))\n        s=$((s / 2))\n    fi\n    echo $s\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local i=0\n   \
    \ local m=0\n    local n=${#l[@]}\n    local s=0\n    local t=0\n    local x=0\n\
    \    local y=0\n    local z=0\n\n    if (( n == 0 )); then\n        echo 0\n \
    \       return\n    fi\n\n    if (( n == 1 )); then\n        echo ${l[0]}\n  \
    \      return\n    fi\n\n    for (( i = 0; i < n; i++ )); do\n        (( l[i]\
    \ > m )) && m=${l[i]}\n    done\n\n    for (( i = 0; i < n; i++ )); do\n     \
    \   (( l[i] < m )) && l[i]=$m\n    done\n\n    for (( i = 0; i < n; i++ )); do\n\
    \        (( s += l[i] ))\n    done\n\n    (( s % 2 == 0 )) && (( t = s / 2 ))\
    \ || (( t = (s + 1) / 2 ))\n\n    for (( i = 0; i < n; i++ )); do\n        ((\
    \ x += l[i] ))\n        (( x >= t )) && break\n    done\n\n    (( x == t )) &&\
    \ (( y = l[i] )) || (( y = l[i] + (t - x) ))\n\n    for (( i = 0; i < n; i++ ));\
    \ do\n        (( z += l[i] ))\n        (( z > t )) && break\n    done\n\n    ((\
    \ z == t )) && (( x = l[i] )) || (( x = l[i] - (z - t) ))\n\n    (( y == x ))\
    \ && echo $y || echo \"scale=1; ($y + $x) / 2\" | bc\n}\n\ncandidate() {\n   \
    \ median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\")\
    \ = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local i\n    local sum=0\n    for i in ${l[@]}; do\n        sum=$(($sum +\
    \ $i))\n    done\n    echo $((sum / m))\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=$((${#l[@]}/2))\n\
    \    local s=${l[$m]}\n    if (( ${#l[@]}%2 == 0 )); then\n        ((s+=${l[$m-1]}))\n\
    \        echo $(bc -l <<< \"scale=1; $s/2\")\n    else\n        echo $s\n    fi\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=$(( ${#l[@]}\
    \ / 2 ))\n    if (( ${#l[@]} % 2 == 0 )); then\n        echo \"scale=1; (${l[$m]}\
    \ + ${l[$(( m - 1 ))]})/2\" | bc\n    else\n        echo \"${l[$m]}\"\n    fi\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 0
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local r=0\n    if ((n % 2 == 0)); then\n        l=($(printf\
    \ \"%s\\n\" \"${l[@]}\" | sort -n))\n        r=$(echo \"scale=1; (${l[m - 1]}\
    \ + ${l[m]}) / 2\" | bc)\n    else\n        l=($(printf \"%s\\n\" \"${l[@]}\"\
    \ | sort -n))\n        r=${l[m]}\n    fi\n    echo $r\n}\n\ncandidate() {\n  \
    \  median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[$m]}\n    if ((n % 2 == 0)); then\n \
    \       ((m--))\n        s=$(echo \"scale=1; (${l[$m]} + $s) / 2\" | bc)\n   \
    \ fi\n    echo $s\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    if ((n%2==0)); then\n        echo \"$(((l[m-1]+l[m])/2))\"\
    \n    else\n        echo \"${l[m]}\"\n    fi\n}\n\ncandidate() {\n    median \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    for ((i=0;i<n;i++)); do\n    \
    \    s=$(echo \"$s\" | sed -e \"s/[^ ]* //\" | sort -n)\n    done\n    if ((n%2==1));\
    \ then\n        echo \"$s\" | cut -d' ' -f$((m+1))\n    else\n        local a=$(echo\
    \ \"$s\" | cut -d' ' -f$m)\n        local b=$(echo \"$s\" | cut -d' ' -f$((m+1)))\n\
    \        echo $(((a+b)/2))\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local i=0\n    local s=0\n    local t=0\n    for i in ${l[@]}; do\n     \
    \   s=$(($s + $i))\n        t=$(($t + 1))\n    done\n    echo $(($s / $t))\n}\n\
    \ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[*]}\n    if ((n == 0)); then\n      \
    \  echo 0\n    elif ((n == 1)); then\n        echo ${l[0]}\n    elif ((n % 2 ==\
    \ 1)); then\n        echo $((${l[$m]}))\n    else\n        echo $(($((${l[$m-1]}\
    \ + ${l[$m]})) / 2))\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 0
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local i\n    local\
    \ m\n    local n\n    local s\n    local t\n    for ((i=0; i<${#l[@]}; i++));\
    \ do\n        t=${l[i]}\n        for ((j=i-1; j>=0 && l[j]>t; j--)); do\n    \
    \        l[j+1]=${l[j]}\n        done\n        l[j+1]=$t\n    done\n    m=${#l[@]}\n\
    \    if ((m%2==1)); then\n        echo ${l[m/2]}\n    else\n        n=$((m/2))\n\
    \        s=$(echo \"${l[n-1]}+${l[n]}\" | bc)\n        echo $(echo \"scale=1;\
    \ $s/2\" | bc)\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s\n    local i\n    for ((i=0; i<n; i++)); do\n\
    \        s+=\"${l[i]}\"\n    done\n    s=$(echo \"$s\" | tr ' ' '\\n' | sort -n)\n\
    \    if ((n%2==0)); then\n        echo \"$s\" | sed -n \"$((m+1))p\"\n    else\n\
    \        echo \"$s\" | sed -n \"$((m+1))p\"\n    fi\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    for ((i=0;i<n;i++)); do\n    \
    \    s=$(echo \"$s\" | sed -e \"s/${l[i]}//\")\n        if [ $((n-i)) -eq $((m+1))\
    \ ]; then\n            echo \"${l[i]}\"\n            return\n        elif [ $((n-i))\
    \ -eq $m ]; then\n            local a=($s)\n            echo $(((${l[i]}+${a[0]})/2))\n\
    \            return\n        fi\n    done\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    for ((i=0;i<n;i++)); do\n    \
    \    s=${s// ${l[i]}/}\n        [[ ${#s} -lt $((n-m-1)) ]] && echo \"${l[i]}\"\
    \ && return\n    done\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    local i\n    for ((i=0; i<m; i++));\
    \ do\n        s=${s#* }\n    done\n    if ((n%2==0)); then\n        s=${s#* }\n\
    \        echo $(((${l[m-1]}+${s%% *})/2))\n    else\n        echo ${l[m]}\n  \
    \  fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10\
    \ 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local n=$((m/2))\n    local o=$((n+1))\n    local p=$((m%2))\n    if [ $p\
    \ -eq 0 ]; then\n        echo \"$((${l[$n]}+${l[$o]}))/2\" | bc -l\n    else\n\
    \        echo \"${l[$n]}\"\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[@]}\n    local t\n    for ((i = 0; i\
    \ < m; i++)); do\n        t=${s#* }\n        s=${s%$t}\n    done\n    if ((n %\
    \ 2 == 0)); then\n        echo $(((${s%% *} + ${t%% *}) / 2))\n    else\n    \
    \    echo ${s%% *}\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3donxubd.sh: line 20: (-10 + ) / 2: syntax error: operand expected
    (error token is ") / 2")

    '
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[@]}\n    local t\n    for ((i = 0; i\
    \ < m; i++)); do\n        t=${s#* }\n        s=${s%$t}\n    done\n    if ((n %\
    \ 2 == 0)); then\n        echo $(((s + t) / 2))\n    else\n        echo $t\n \
    \   fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local mid=$((n/2))\n    local sorted=($(printf \"%s\\n\" \"${l[@]}\" | sort\
    \ -n))\n    if ((n%2==1)); then\n        echo ${sorted[$mid]}\n    else\n    \
    \    echo $(((${sorted[$mid-1]}+${sorted[$mid]})/2))\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[@]}\n    local o\n    for ((i = 0; i\
    \ < n; i++)); do\n        o=${s%% *}\n        s=${s#* }\n        [[ $((i % 2))\
    \ -eq 0 ]] && l[$((i / 2))]=$o || l[$m]+=$o\n    done\n    echo \"${l[$m]}\"\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local n=$((m/2))\n    local r=$((m%2))\n    if ((r == 0)); then\n       \
    \ echo \"$(((${l[$n]}+${l[$((n-1))]})/2))\"\n    else\n        echo \"${l[$n]}\"\
    \n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n  local l=($1)\n  local n=${#l[@]}\n\
    \  local m=$((n/2))\n  local s=${l[$m]}\n  ((n%2)) && s=$(echo \"scale=1; (${l[$m]}+${l[$((m-1))]})/2\"\
    \ | bc)\n  echo $s\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local n=$((m/2))\n    local o=$((m%2))\n    local p=${l[$n]}\n    local q=${l[$((n-1))]}\n\
    \    if [ $o -eq 0 ]; then\n        echo $(((p+q)/2))\n    else\n        echo\
    \ $p\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local n=$((m/2))\n    local o=$((m%2))\n    local p=$((n-1))\n    local q=$((n+1))\n\
    \    local r=${l[$n]}\n    local s=${l[$p]}\n    local t=${l[$q]}\n    local u=$(((s+t)/2))\n\
    \    if [ $o -eq 0 ]; then\n        echo $u\n    else\n        echo $r\n    fi\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=$((${#l[@]}\
    \ - 1))\n    local m=$((n / 2))\n    local s=${l[$m]}\n    if ((n % 2 == 0));\
    \ then\n        s=$(echo \"scale=1; (${l[$m]} + ${l[$((m + 1))]}) / 2\" | bc)\n\
    \    fi\n    echo $s\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=$(( ${#l[@]}\
    \ / 2 ))\n    local s=${l[$m]}\n    if (( ${#l[@]} % 2 == 0 )); then\n       \
    \ s=$(( (s + ${l[$((m-1))]}) / 2 ))\n    fi\n    echo $s\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[*]}\n    local -a a=($s)\n    if ((n%2==1));\
    \ then\n        echo \"${a[$m]}\"\n    else\n        echo \"$((${a[$m-1]}+${a[$m]}))/2\"\
    \ | bc -l\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=$((${#l[@]}\
    \ - 1))\n    local m=$((n / 2))\n    local s=${l[*]}\n    for ((i = 0; i <= n;\
    \ i++)); do\n        s=$(echo \"$s\" | sed 's/\\([^ ]*\\) \\([^ ]*\\)/if (\\1\
    \ > \\2) {print \\2\" \"$1} else {print \\1\" \"$2}/e')\n    done\n    echo \"\
    $s\" | cut -d' ' -f$((m + 1))\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sh: 1: Syntax error: word unexpected (expecting "then")

    '
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[*]}\n    for ((i=0;i<n;i++)); do\n    \
    \    s=$(echo \"$s\" | sed -e \"s/[^ ]* //\" | sort -n)\n    done\n    if ((n%2==1));\
    \ then\n        echo \"$s\" | awk '{print $1}'\n    else\n        echo \"$s\"\
    \ | awk '{print ($1+$2)/2}'\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=$1\n    local n=$(echo \"\
    $l\" | wc -w)\n    local m=$((n/2))\n    local s=$(echo \"$l\" | sort -n)\n  \
    \  if ((n%2==0)); then\n        echo \"$s\" | awk -v m=$m '{print ($m+$(m+1))/2}'\n\
    \    else\n        echo \"$s\" | awk -v m=$m '{print $m+1}'\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local i=0\n    local j=0\n    local k=0\n    local t=0\n    local s=0\n \
    \   local r=0\n    local p=0\n    local q=0\n    local n=0\n    local o=0\n  \
    \  local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n   \
    \ local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local\
    \ e=0\n    local f=0\n    local g=0\n    local h=0\n    local l1=0\n    local\
    \ l2=0\n    local l3=0\n    local l4=0\n    local l5=0\n    local l6=0\n    local\
    \ l7=0\n    local l8=0\n    local l9=0\n    local l10=0\n    local l11=0\n   \
    \ local l12=0\n    local l13=0\n    local l14=0\n    local l15=0\n    local l16=0\n\
    \    local l17=0\n    local l18=0\n    local l19=0\n    local l20=0\n    local\
    \ l21=0\n    local l22=0\n    local l23=0\n    local l24=0\n    local l25=0\n\
    \    local l26=0\n    local l27=0\n    local l28=0\n    local l29=0\n    local\
    \ l30=0\n    local l31=0\n    local l32=0\n    local l33=0\n    local l34=0\n\
    \    local l35=0\n    local l36=0\n    local l37=0\n    local l38=0\n    local\
    \ l39=0\n    local l40=0\n    local l41=0\n    local l42=0\n    local l43=0\n\
    \    local l44=0\n    local l45=0\n    local l46=0\n    local l47=0\n    local\
    \ l48=0\n    local l49=0\n    local l50=\n}\n\ncandidate() {\n    median \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 0
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=`echo $1 | tr ' ' '\\n' |\
    \ sort -n`\n    local n=`echo $l | wc -w`\n    local m=$((n/2))\n    if [ $((n%2))\
    \ -eq 0 ]; then\n        echo \"scale=1; ($(echo $l | cut -d ' ' -f $m) + $(echo\
    \ $l | cut -d ' ' -f $((m+1)))) / 2\" | bc\n    else\n        echo $l | cut -d\
    \ ' ' -f $((m+1))\n    fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local i=0\n    local j=0\n    local k=0\n    local t=0\n    for ((i=0; i<m;\
    \ i++)); do\n        for ((j=i+1; j<m; j++)); do\n            if ((${l[i]} > ${l[j]}));\
    \ then\n                t=${l[i]}\n                l[i]=${l[j]}\n            \
    \    l[j]=$t\n            fi\n        done\n    done\n    if ((m % 2 == 0)); then\n\
    \        k=$((m / 2))\n        echo $(((${l[k-1]} + ${l[k]} + 1) / 2))\n    else\n\
    \        k=$((m / 2))\n        echo ${l[k]}\n    fi\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local m=${#l[@]}\n\
    \    local n=$((m/2))\n    if ((m%2==0)); then\n        echo \"$(((${l[n-1]}+${l[n]})/2))\"\
    \n    else\n        echo \"${l[n]}\"\n    fi\n}\n\ncandidate() {\n    median \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 0
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n/2))\n    local s=${l[@]}\n    local t=${s// /$'\\n'}\n    local\
    \ u=($(echo -e \"$t\" | sort -n))\n    if ((n%2==0)); then\n        echo \"scale=1;\
    \ (${u[m-1]}+${u[m]})/2\" | bc\n    else\n        echo ${u[m]}\n    fi\n}\n\n\
    candidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[$m]}\n    if ((n % 2 == 0)); then\n \
    \       s=$((s + ${l[$((m - 1))]}))\n        s=$((s / 2))\n    fi\n    echo $s\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=$1\n    local m=$(echo \"\
    $l\" | wc -w)\n    local n=$((m / 2))\n    local s=$(echo \"$l\" | sort -n)\n\
    \    if ((m % 2 == 0)); then\n        echo \"$s\" | awk \"NR==$n+1 {print \\$1}\"\
    \n    else\n        echo \"$s\" | awk \"NR==$n {print \\$1}\"\n    fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=${l[$m]}\n    if ((n % 2 == 0)); then\n \
    \       s=$((s + ${l[$((m - 1))]}))\n        s=$((s / 2))\n    fi\n    echo $s\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996099
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    echo $(echo \"\
    ${l[*]}\" | tr ' ' '\\n' | sort -n | awk '{a[i++]=$0} END {print a[int(i/2)]}')\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659996100
