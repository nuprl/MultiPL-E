completions:
- "    # TODO: Implement this function\n    # Hint: Use tr, sed, and awk\n    echo\
  \ $1 | tr '[:lower:]' '[:upper:]' | sed 's/[AEIOU]/\\U&/g' | sed 's/A/C/g' | sed\
  \ 's/E/G/g' | sed 's/I/K/g' | sed 's/O/M/g' | sed 's/U/W/g' | sed 's/B/D/g' | sed\
  \ 's/F/H/g' | sed 's/J/L/g' | sed 's/N/P/g' | sed 's/R/T/g' | sed 's/V/X/g' | sed\
  \ 's/Z/B/g' | sed 's/C/E/g' | sed 's/G/I/g' | sed 's/K/O/g' | sed 's/M/Q/g' | sed\
  \ 's/W/Y/g' | sed 's/D/F/g' | sed 's/H/J/g' | sed 's/L/N/g' | sed 's/P/R/g' | sed\
  \ 's/T/V/g' | sed 's/X/Z/g' | tr '[:upper:]' '[:lower:]'"
- "    # TODO: Write your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr\
  \ 'AEIOU' 'CGFKP'"
- "    # TODO: your code here\n    echo \"TODO\""
- "    # TODO: Your code here\n    # Hint: You can use the tr command to swap case\n\
  \    # Hint: You can use the tr command to replace characters\n    # Hint: You can\
  \ use the tr command to remove characters\n    # Hint: You can use the tr command\
  \ to replace characters with a range\n    # Hint: You can use the tr command to\
  \ replace characters with a string\n    # Hint: You can use the echo command to\
  \ get the ASCII value of a character\n    # Hint: You can use the expr command to\
  \ do arithmetic\n    # Hint: You can use the printf command to convert an ASCII\
  \ value to a character\n    # Hint: You can use the printf command to convert a\
  \ character to an ASCII value\n    # Hint: You can use the printf command to convert\
  \ a number to a string\n    # Hint: You can use the printf command to convert a\
  \ string to a number\n    # Hint: You can use the printf command to convert a number\
  \ to a hexadecimal string\n    # Hint: You can use the printf command to convert\
  \ a hexadecimal string to a number\n    # Hint: You can use the printf command to\
  \ convert a number to an octal string\n    # Hint: You can use the printf command\
  \ to convert an octal string to a number\n    # Hint: You can use the printf command\
  \ to convert a number to a binary string\n    # Hint: You can use the printf command\
  \ to convert a binary string to a number\n    # Hint: You can use the printf command\
  \ to convert a number to a base-36 string\n    # Hint: You can use the printf command\
  \ to convert a base-36 string to a number\n    # Hint: You can use the printf command\
  \ to convert a number to a base-64 string\n    # Hint: You can use the printf command\
  \ to convert a base-64 string to a number\n    # Hint: You can use the printf command\
  \ to convert a number to a base-85 string\n    # Hint: You can use the printf command\
  \ to convert a base-85 string to a number\n    # Hint: You can use the printf command\
  \ to convert a number to a base-256 string\n    # Hint: You can use the printf command\
  \ to convert a base-256 string to a number\n    # Hint"
- "    # TODO: Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
  \ 'CGFKP'"
- "    local input=$1\n    local output=\"\"\n    local vowels=\"aeiou\"\n    local\
  \ vowels_upper=\"AEIOU\"\n    local vowels_encoded=\"cfilorux\"\n    local vowels_encoded_upper=\"\
  CFILORUX\"\n    local i=0\n    local char=\"\"\n    local char_upper=\"\"\n    local\
  \ char_encoded=\"\"\n    local char_encoded_upper=\"\"\n    local char_index=0\n\
  \    local char_encoded_index=0\n    local char_encoded_upper_index=0\n    local\
  \ char_upper_index=0\n    local char_upper_encoded_index=0\n    local char_upper_encoded_upper_index=0\n\
  \    local char_upper_encoded=\"\"\n    local char_upper_encoded_upper=\"\"\n  \
  \  local char_upper_encoded_upper_index=0\n    local char_upper_encoded_index=0\n\
  \    local char_upper_index=0\n    local char_upper_encoded_upper_index=0\n    local\
  \ char_upper_encoded_upper=\"\"\n    local char_upper_encoded=\"\"\n    local char_upper_index=0\n\
  \    local char_upper_encoded_index=0\n    local char_upper_encoded_upper_index=0\n\
  \    local char_upper_encoded_upper=\"\"\n    local char_upper_encoded=\"\"\n  \
  \  local char_upper_index=0\n    local char_upper_encoded_index=0\n    local char_upper_encoded_upper_index=0\n\
  \    local char_upper_encoded_upper=\"\"\n    local char_upper_encoded=\"\"\n  \
  \  local char_upper_index=0\n    local char_upper_encoded_index=0\n    local char_upper_encoded_upper_index=0\n\
  \    local char_upper_encoded_upper=\"\"\n    local char_upper_encoded=\"\"\n  \
  \  local char_upper_index=0\n    local char_upper_encoded_index=0\n    local char_upper_encoded_upper_index=0\n\
  \    local char_upper_encoded_upper=\"\"\n    local char_upper_encoded=\"\"\n  \
  \  local char_upper"
- '    echo "$1" | tr ''a-zA-Z'' ''c-za-bC-ZA-B'' | tr ''aeiou'' ''cgkos'''
- "    # Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'"
- "    # Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'"
- "    # TODO: Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
  \ 'CGKOS'"
- '    echo $1 | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- '    echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEGIOU'' ''CFLRTZ'''
- "    # TODO: Implement this function\n    # Hint: You can use the tr command to\
  \ swap case\n    # Hint: You can use the tr command to replace characters\n    #\
  \ Hint: You can use the awk command to get the character 2 places ahead\n    # Hint:\
  \ You can use the modulus operator to wrap around the alphabet\n    # Hint: You\
  \ can use the ord function to get the ASCII value of a character\n    # Hint: You\
  \ can use the chr function to get the character from an ASCII value\n    # Hint:\
  \ You can use the echo command to print a string\n    # Hint: You can use the seq\
  \ command to generate a sequence of numbers\n    # Hint: You can use the paste command\
  \ to paste together multiple strings\n    # Hint: You can use the tr command to\
  \ delete characters\n    # Hint: You can use the fold command to wrap lines\n  \
  \  # Hint: You can use the rev command to reverse a string\n    # Hint: You can\
  \ use the sort command to sort lines\n    # Hint: You can use the uniq command to\
  \ remove duplicate lines\n    # Hint: You can use the wc command to count lines\n\
  \    # Hint: You can use the head command to get the first line\n    # Hint: You\
  \ can use the tail command to get all but the first line\n    # Hint: You can use\
  \ the cut command to get a substring\n    # Hint: You can use the expr command to\
  \ do arithmetic\n    # Hint: You can use the bc command to do arithmetic\n    #\
  \ Hint: You can use the read command to read a line of input\n    # Hint: You can\
  \ use the read command to read a character of input\n    # Hint: You can use the\
  \ read command to read a word of input\n    # Hint: You can use the read command\
  \ to read a line of input into an array\n    # Hint: You can use the read command\
  \ to read a line of input into a variable\n    # Hint: You can use the read command\
  \ to read a word of input into a variable\n    # Hint: You can use the read command\
  \ to read a character of input into a variable\n    # Hint: You can use the read\
  \ command to read a line of input into a variable and an array\n    # H"
- '    echo $1 | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- "    # TODO: Your code here\n    # Hint: You can use the tr command to swap case\n\
  \    # Hint: You can use the tr command to replace characters\n    # Hint: You can\
  \ use the tr command to delete characters\n    # Hint: You can use the echo command\
  \ to print a string\n    # Hint: You can use the expr command to do arithmetic\n\
  \    # Hint: You can use the ord command to get the ASCII value of a character\n\
  \    # Hint: You can use the chr command to get the character of an ASCII value\n\
  \    # Hint: You can use the echo command to print a string\n    # Hint: You can\
  \ use the expr command to do arithmetic\n    # Hint: You can use the ord command\
  \ to get the ASCII value of a character\n    # Hint: You can use the chr command\
  \ to get the character of an ASCII value\n    # Hint: You can use the echo command\
  \ to print a string\n    # Hint: You can use the expr command to do arithmetic\n\
  \    # Hint: You can use the ord command to get the ASCII value of a character\n\
  \    # Hint: You can use the chr command to get the character of an ASCII value\n\
  \    # Hint: You can use the echo command to print a string\n    # Hint: You can\
  \ use the expr command to do arithmetic\n    # Hint: You can use the ord command\
  \ to get the ASCII value of a character\n    # Hint: You can use the chr command\
  \ to get the character of an ASCII value\n    # Hint: You can use the echo command\
  \ to print a string\n    # Hint: You can use the expr command to do arithmetic\n\
  \    # Hint: You can use the ord command to get the ASCII value of a character\n\
  \    # Hint: You can use the chr command to get the character of an ASCII value\n\
  \    # Hint: You can use the echo command to print a string\n    # Hint: You can\
  \ use the expr command to do arithmetic\n    # Hint: You can use the ord command\
  \ to get the ASCII value of a character\n    # Hint: You can use the chr command\
  \ to get the character of an ASCII value\n    # Hint: You can use the echo command\
  \ to print a string\n    # Hint: You can use the"
- "    # TODO: Implement this function\n    # Hint: You can use the tr command to\
  \ swap case\n    # Hint: You can use the tr command to replace characters\n    #\
  \ Hint: You can use the tr command to delete characters\n    # Hint: You can use\
  \ the echo command to print a string\n    # Hint: You can use the expr command to\
  \ perform arithmetic\n    # Hint: You can use the seq command to generate a sequence\n\
  \    # Hint: You can use the fold command to wrap text\n    # Hint: You can use\
  \ the wc command to count words\n    # Hint: You can use the cut command to extract\
  \ columns\n    # Hint: You can use the sort command to sort lines\n    # Hint: You\
  \ can use the uniq command to remove duplicates\n    # Hint: You can use the head\
  \ command to get the first line\n    # Hint: You can use the tail command to get\
  \ the last line\n    # Hint: You can use the tr command to replace characters\n\
  \    # Hint: You can use the tr command to delete characters\n    # Hint: You can\
  \ use the echo command to print a string\n    # Hint: You can use the expr command\
  \ to perform arithmetic\n    # Hint: You can use the seq command to generate a sequence\n\
  \    # Hint: You can use the fold command to wrap text\n    # Hint: You can use\
  \ the wc command to count words\n    # Hint: You can use the cut command to extract\
  \ columns\n    # Hint: You can use the sort command to sort lines\n    # Hint: You\
  \ can use the uniq command to remove duplicates\n    # Hint: You can use the head\
  \ command to get the first line\n    # Hint: You can use the tail command to get\
  \ the last line\n    # Hint: You can use the tr command to replace characters\n\
  \    # Hint: You can use the tr command to delete characters\n    # Hint: You can\
  \ use the echo command to print a string\n    # Hint: You can use the expr command\
  \ to perform arithmetic\n    # Hint: You can use the seq command to generate a sequence\n\
  \    # Hint: You can use the fold command to wrap text\n    # Hint: You can use\
  \ the wc command to count words\n   "
- '    echo $1 | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEGIOU'' ''CFKPRS'''
- "    # TODO\n    echo \"TODO\""
- "    # TODO: Your code here\n    # Hint: You can use the tr command to translate\
  \ characters\n    #       e.g. tr '[:lower:]' '[:upper:]'\n    #       See man tr\
  \ for more info\n    #       You can also use the modulo operator to wrap around\n\
  \    #       the alphabet. e.g. ((i % 26))\n    #       See http://tldp.org/LDP/abs/html/arithexp.html\
  \ for more info\n    #       You can also use the case statement to match on a pattern\n\
  \    #       See http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html\n\
  \    #       for more info\n    #       You can also use the echo -n command to\
  \ print without a newline\n    #       See http://stackoverflow.com/questions/1167746/how-to-redirect-output-to-a-file-and-stdout\
  \ for more info\n    #       You can also use the echo -e command to interpret escape\
  \ sequences\n    #       See http://stackoverflow.com/questions/1527049/bash-join-elements-of-an-array\
  \ for more info\n    #       You can also use the echo -n command to print without\
  \ a newline\n    #       See http://stackoverflow.com/questions/1167746/how-to-redirect-output-to-a-file-and-stdout\
  \ for more info\n    #       You can also use the echo -e command to interpret escape\
  \ sequences\n    #       See http://stackoverflow.com/questions/1527049/bash-join-elements-of-an-array\
  \ for more info\n    #       You can also use the echo -n command to print without\
  \ a newline\n    #       See http://stackoverflow.com/questions/1167746/how-to-redirect-output-to-a-file-and-stdout\
  \ for more info\n    #       You can also use the echo -e command to interpret escape\
  \ sequences\n    #       See http://stackoverflow.com/questions/1527049/bash-join-elements-of-an-array\
  \ for more info\n    #       You"
- "    # TODO: Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
  \ 'CGFKP'"
- "    # declare an array of vowels\n    declare -a vowels=('a' 'e' 'i' 'o' 'u')\n\
  \    # declare an array of letters\n    declare -a letters=('a' 'b' 'c' 'd' 'e'\
  \ 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y'\
  \ 'z')\n    # declare an array of uppercase letters\n    declare -a uppercase=('A'\
  \ 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U'\
  \ 'V' 'W' 'X' 'Y' 'Z')\n    # declare an array of encoded letters\n    declare -a\
  \ encoded=('c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't'\
  \ 'u' 'v' 'w' 'x' 'y' 'z' 'a' 'b')\n    # declare an array of encoded uppercase\
  \ letters\n    declare -a encodedUppercase=('C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K'\
  \ 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z' 'A' 'B')\n    # declare\
  \ an empty string to hold the encoded message\n    encodedMessage=\"\"\n    # loop\
  \ through each character in the message\n    for (( i=0; i<${#1}; i++ )); do\n \
  \       # declare a variable to hold the current character\n        currentChar=${1:$i:1}\n\
  \        # declare a variable to hold the index of the current character\n     \
  \   currentCharIndex=0\n        # declare a"
- '    echo "$1" | tr ''[a-z]'' ''[n-za-m]'' | tr ''[aeiou]'' ''[cdfgjkl]'''
- "    # TODO: write your code here\n    echo \"TODO\""
- "    # TODO: Write your code here\n    # Hint: You can use the tr command to swap\
  \ case\n    # Hint: You can use the tr command to replace all vowels with the letter\
  \ that appears 2 places ahead of that vowel in the english alphabet\n    # Hint:\
  \ You can use the tr command to replace all vowels with the letter that appears\
  \ 2 places ahead of that vowel in the english alphabet\n    # Hint: You can use\
  \ the tr command to replace all vowels with the letter that appears 2 places ahead\
  \ of that vowel in the english alphabet\n    # Hint: You can use the tr command\
  \ to replace all vowels with the letter that appears 2 places ahead of that vowel\
  \ in the english alphabet\n    # Hint: You can use the tr command to replace all\
  \ vowels with the letter that appears 2 places ahead of that vowel in the english\
  \ alphabet\n    # Hint: You can use the tr command to replace all vowels with the\
  \ letter that appears 2 places ahead of that vowel in the english alphabet\n   \
  \ # Hint: You can use the tr command to replace all vowels with the letter that\
  \ appears 2 places ahead of that vowel in the english alphabet\n    # Hint: You\
  \ can use the tr command to replace all vowels with the letter that appears 2 places\
  \ ahead of that vowel in the english alphabet\n    # Hint: You can use the tr command\
  \ to replace all vowels with the letter that appears 2 places ahead of that vowel\
  \ in the english alphabet\n    # Hint: You can use the tr command to replace all\
  \ vowels with the letter that appears 2 places ahead of that vowel in the english\
  \ alphabet\n    # Hint: You can use the tr command to replace all vowels with the\
  \ letter that appears 2 places ahead of that vowel in the english alphabet\n   \
  \ # Hint: You can use the tr command to replace all vowels with the letter that\
  \ appears 2 places ahead of that vowel in the english alphabet\n    # Hint: You\
  \ can use the tr command to replace all vowels with the letter that appears 2 places\
  \ ahead of that vowel in the english alphabet\n    # Hint: You can use the tr command\
  \ to replace all vowels with the letter that appears 2 places ahead of that vowel\
  \ in the english alphabet\n    # Hint: You can use the tr command to replace all\
  \ vowels with the letter that appears 2 places ahead of that vowel in the english\
  \ alphabet\n    # Hint: You"
- "    # TODO: Write this function\n    echo \"Not yet implemented\""
- "    # TODO: Implement this function\n    echo \"TODO\""
- "    # TODO: Implement this function\n    echo \"TODO: Implement this function\""
- "    # TODO: your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEGIOU'\
  \ 'CFJKPV'"
- '  echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- "    # TODO: Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
  \ 'CGFKP'"
- "  # TODO: Your code here\n  # Hint: You can use the tr command to swap case\n \
  \ # Hint: You can use the tr command to replace characters\n  # Hint: You can use\
  \ the tr command to delete characters\n  # Hint: You can use the echo command to\
  \ print a string\n  # Hint: You can use the read command to read a string\n  # Hint:\
  \ You can use the expr command to manipulate numbers\n  # Hint: You can use the\
  \ expr command to manipulate strings\n  # Hint: You can use the expr command to\
  \ manipulate characters\n  # Hint: You can use the expr command to manipulate ASCII\
  \ values\n  # Hint: You can use the expr command to manipulate ASCII values\n  #\
  \ Hint: You can use the expr command to manipulate ASCII values\n  # Hint: You can\
  \ use the expr command to manipulate ASCII values\n  # Hint: You can use the expr\
  \ command to manipulate ASCII values\n  # Hint: You can use the expr command to\
  \ manipulate ASCII values\n  # Hint: You can use the expr command to manipulate\
  \ ASCII values\n  # Hint: You can use the expr command to manipulate ASCII values\n\
  \  # Hint: You can use the expr command to manipulate ASCII values\n  # Hint: You\
  \ can use the expr command to manipulate ASCII values\n  # Hint: You can use the\
  \ expr command to manipulate ASCII values\n  # Hint: You can use the expr command\
  \ to manipulate ASCII values\n  # Hint: You can use the expr command to manipulate\
  \ ASCII values\n  # Hint: You can use the expr command to manipulate ASCII values\n\
  \  # Hint: You can use the expr command to manipulate ASCII values\n  # Hint: You\
  \ can use the expr command to manipulate ASCII values\n  # Hint: You can use the\
  \ expr command to manipulate ASCII values\n  # Hint: You can use the expr command\
  \ to manipulate ASCII values\n  # Hint: You can use the expr command to manipulate\
  \ ASCII values\n  # Hint: You can use the expr command to manipulate ASCII values\n\
  \  # Hint: You can use the expr command to manipulate ASCII values\n  # Hint: You\
  \ can use the expr command to manipulate ASCII values\n  # Hint: You can use the\
  \ expr command to manipulate ASCII values\n  # Hint: You can use the expr command\
  \ to"
- "    # Convert to lowercase\n    local str=\"${1,,}\"\n    # Replace vowels with\
  \ the letter that appears 2 places ahead\n    str=\"${str//a/c}\"\n    str=\"${str//e/g}\"\
  \n    str=\"${str//i/k}\"\n    str=\"${str//o/q}\"\n    str=\"${str//u/w}\"\n  \
  \  # Convert to uppercase\n    echo \"${str^^}\""
- "    # TODO: implement this function\n    # Hint: use the tr command\n    echo \"\
  $1\" | tr '[a-z]' '[c-za-b]' | tr '[aeiou]' '[eoiu]'"
- "    # TODO: Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
  \ 'CGFKP'"
- "    # your code here\n    echo $1 | tr '[a-z]' '[c-za-b]' | tr '[aeiou]' '[eoiu]'"
- "    # TODO: Implement this function\n    echo \"TODO\""
- "    # TODO: your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
  \ 'CGKOS'"
- "    # TODO: Implement this function\n    echo \"Not implemented\""
- "    # TODO: Write your code here\n    # Hint: You can use the tr command to swap\
  \ case\n    # Hint: You can use the tr command to replace characters\n    # Hint:\
  \ You can use the awk command to get the character 2 places ahead\n    # Hint: You\
  \ can use the modulo operator to wrap around the alphabet\n    # Hint: You can use\
  \ the echo command to convert a string to lowercase\n    #       echo \"$1\" | tr\
  \ '[:upper:]' '[:lower:]'\n    # Hint: You can use the echo command to convert a\
  \ string to uppercase\n    #       echo \"$1\" | tr '[:lower:]' '[:upper:]'\n  \
  \  # Hint: You can use the echo command to remove all vowels\n    #       echo \"\
  $1\" | tr -d '[aeiouAEIOU]'\n    # Hint: You can use the echo command to replace\
  \ all vowels with a character\n    #       echo \"$1\" | tr '[aeiouAEIOU]' 'x'\n\
  \    # Hint: You can use the echo command to replace all characters with a character\n\
  \    #       echo \"$1\" | tr '[:alpha:]' 'x'\n    # Hint: You can use the echo\
  \ command to replace all characters with a character\n    #       echo \"$1\" |\
  \ tr '[:alnum:]' 'x'\n    # Hint: You can use the echo command to replace all characters\
  \ with a character\n    #       echo \"$1\" | tr '[:digit:]' 'x'\n    # Hint: You\
  \ can use the echo command to replace all characters with a character\n    #   \
  \    echo \"$1\" | tr '[:lower:]' 'x'\n    # Hint: You can use the echo command\
  \ to replace all characters with a character\n    #       echo \"$1\" | tr '[:upper:]'\
  \ 'x'\n    # Hint: You can use the echo command to replace all characters with a\
  \ character\n    #       echo \"$1\" | tr '[:punct:]' 'x'\n    # Hint: You can use\
  \ the echo command to replace all characters with a character\n    #       echo\
  \ \"$1\" | tr '[:space:]' 'x'\n    # Hint: You can use the echo command to replace\
  \ all characters"
- '    echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- '    echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- "    # TODO: Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
  \ 'CGFKP'"
- "    # TODO: Implement this function\n    echo \"TODO\""
- "  # your code here\n  echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'"
- "    # TODO: Write your code here\n    # Hint: You can use the tr command to swap\
  \ case\n    # Hint: You can use the tr command to replace characters\n    # Hint:\
  \ You can use the awk command to get the character\n    #       2 places ahead of\
  \ a vowel\n    # Hint: You can use the echo command to replace newlines with\n \
  \   #       spaces\n    # Hint: You can use the tr command to replace spaces with\
  \ nothing\n    # Hint: You can use the tr command to replace newlines with nothing\n\
  \    # Hint: You can use the tr command to replace spaces with nothing\n    # Hint:\
  \ You can use the tr command to replace newlines with nothing\n    # Hint: You can\
  \ use the tr command to replace spaces with nothing\n    # Hint: You can use the\
  \ tr command to replace newlines with nothing\n    # Hint: You can use the tr command\
  \ to replace spaces with nothing\n    # Hint: You can use the tr command to replace\
  \ newlines with nothing\n    # Hint: You can use the tr command to replace spaces\
  \ with nothing\n    # Hint: You can use the tr command to replace newlines with\
  \ nothing\n    # Hint: You can use the tr command to replace spaces with nothing\n\
  \    # Hint: You can use the tr command to replace newlines with nothing\n    #\
  \ Hint: You can use the tr command to replace spaces with nothing\n    # Hint: You\
  \ can use the tr command to replace newlines with nothing\n    # Hint: You can use\
  \ the tr command to replace spaces with nothing\n    # Hint: You can use the tr\
  \ command to replace newlines with nothing\n    # Hint: You can use the tr command\
  \ to replace spaces with nothing\n    # Hint: You can use the tr command to replace\
  \ newlines with nothing\n    # Hint: You can use the tr command to replace spaces\
  \ with nothing\n    # Hint: You can use the tr command to replace newlines with\
  \ nothing\n    # Hint: You can use the tr command to replace spaces with nothing\n\
  \    # Hint: You can use the tr command to replace newlines with nothing\n    #\
  \ Hint: You can use the tr command to replace spaces with nothing\n    # Hint: You\
  \ can use the tr command to replace newlines with nothing\n    #"
- "\t# TODO: Your code here\n\techo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEGIOU'\
  \ 'CFLRVX'"
- "\t# replace all vowels with the letter that appears 2 places ahead of that vowel\
  \ in the english alphabet\n\techo \"$1\" | tr 'aAeEiIoOuU' 'cCgGiIkKoOuU'\n\t# swap\
  \ case of all letters\n\techo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]'\
  \ '[:lower:]'"
- "    # TODO: Implement this function\n    echo \"$1\" | tr 'a-zA-Z' 'c-za-bC-ZA-B'\
  \ | tr 'aeiouAEIOU' 'cgjkCGNK'"
- "    # TODO: Your code here\n    # Hint: You may want to use the tr command\n  \
  \  # Hint: You may want to use the modulo operator\n    # Hint: You may want to\
  \ use the awk command\n    # Hint: You may want to use the echo command\n    # Hint:\
  \ You may want to use the expr command\n    # Hint: You may want to use the grep\
  \ command\n    # Hint: You may want to use the sed command\n    # Hint: You may\
  \ want to use the wc command\n    # Hint: You may want to use the sort command\n\
  \    # Hint: You may want to use the uniq command\n    # Hint: You may want to use\
  \ the head command\n    # Hint: You may want to use the tail command\n    # Hint:\
  \ You may want to use the cut command\n    # Hint: You may want to use the tr command\n\
  \    # Hint: You may want to use the rev command\n    # Hint: You may want to use\
  \ the tr command\n    # Hint: You may want to use the rev command\n    # Hint: You\
  \ may want to use the tr command\n    # Hint: You may want to use the rev command\n\
  \    # Hint: You may want to use the tr command\n    # Hint: You may want to use\
  \ the rev command\n    # Hint: You may want to use the tr command\n    # Hint: You\
  \ may want to use the rev command\n    # Hint: You may want to use the tr command\n\
  \    # Hint: You may want to use the rev command\n    # Hint: You may want to use\
  \ the tr command\n    # Hint: You may want to use the rev command\n    # Hint: You\
  \ may want to use the tr command\n    # Hint: You may want to use the rev command\n\
  \    # Hint: You may want to use the tr command\n    # Hint: You may want to use\
  \ the rev command\n    # Hint: You may want to use the tr command\n    # Hint: You\
  \ may want to use the rev command\n    # Hint: You may want to use the tr command\n\
  \    # Hint: You may want to use the rev command\n    # Hint: You may want"
- "  # TODO: Implement this function\n  echo \"TODO\""
- "    # TODO: Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
  \ 'CGFKP'"
- "    # TODO: Implement this function\n    echo \"TODO\""
- '    echo $1 | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- '    # TODO: your code here'
- '    echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''EGIOA'''
- "    # TODO: Your code here\n    # Hint: You can use the tr command to translate\
  \ characters\n    #       e.g. tr '[:lower:]' '[:upper:]'\n    #       e.g. tr '[:lower:]'\
  \ '[:upper:]' < input.txt\n    #       e.g. tr '[:lower:]' '[:upper:]' < input.txt\
  \ > output.txt\n    #       e.g. tr 'aeiou' 'eioua'\n    #       e.g. tr 'aeiou'\
  \ 'eioua' < input.txt\n    #       e.g. tr 'aeiou' 'eioua' < input.txt > output.txt\n\
  \    #       e.g. tr 'aeiou' 'eioua' < input.txt | tr '[:lower:]' '[:upper:]'\n\
  \    #       e.g. tr 'aeiou' 'eioua' < input.txt | tr '[:lower:]' '[:upper:]' >\
  \ output.txt\n    #       e.g. tr 'aeiou' 'eioua' < input.txt | tr '[:lower:]' '[:upper:]'\
  \ > output.txt\n    #       e.g. tr 'aeiou' 'eioua' < input.txt | tr '[:lower:]'\
  \ '[:upper:]' > output.txt\n    #       e.g. tr 'aeiou' 'eioua' < input.txt | tr\
  \ '[:lower:]' '[:upper:]' > output.txt\n    #       e.g. tr 'aeiou' 'eioua' < input.txt\
  \ | tr '[:lower:]' '[:upper:]' > output.txt\n    #       e.g. tr 'aeiou' 'eioua'\
  \ < input.txt | tr '[:lower:]' '[:upper:]' > output.txt\n    #       e.g. tr 'aeiou'\
  \ 'eioua' < input.txt | tr '[:lower:]' '[:upper:]' > output.txt\n    #       e.g.\
  \ tr 'aeiou' 'eioua' < input.txt | tr '[:lower:]' '[:upper:]' > output.txt\n   \
  \ #"
- '    # TODO: Your code here'
- "\t# TODO: Your code here\n\t# Hint: You can use the tr command to swap case of\
  \ all letters\n\t# Hint: You can use the tr command to replace all vowels with\n\
  \t# the letter that appears 2 places ahead of that vowel in the\n\t# english alphabet.\n\
  \t# Hint: You can use the echo command to print a string\n\t# Hint: You can use\
  \ the $1 variable to access the first argument\n\t# passed to the function\n\t#\
  \ Hint: You can use the return command to return a value\n\t# Hint: You can use\
  \ the exit command to exit the script\n\t# Hint: You can use the man command to\
  \ read the manual for a \n\t# command\n\t# Hint: You can use the echo command to\
  \ print a string\n\t# Hint: You can use the read command to read input from the\
  \ user\n\t# Hint: You can use the man command to read the manual for a \n\t# command\n\
  \t# Hint: You can use the echo command to print a string\n\t# Hint: You can use\
  \ the read command to read input from the user\n\t# Hint: You can use the man command\
  \ to read the manual for a \n\t# command\n\t# Hint: You can use the echo command\
  \ to print a string\n\t# Hint: You can use the read command to read input from the\
  \ user\n\t# Hint: You can use the man command to read the manual for a \n\t# command\n\
  \t# Hint: You can use the echo command to print a string\n\t# Hint: You can use\
  \ the read command to read input from the user\n\t# Hint: You can use the man command\
  \ to read the manual for a \n\t# command\n\t# Hint: You can use the echo command\
  \ to print a string\n\t# Hint: You can use the read command to read input from the\
  \ user\n\t# Hint: You can use the man command to read the manual for a \n\t# command\n\
  \t# Hint: You can use the echo command to print a string\n\t# Hint: You can use\
  \ the read command to read input from the user\n\t# Hint: You can use the man command\
  \ to read the manual for a \n\t# command\n\t# Hint: You can"
- '    echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- "    # Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'"
- "    # TODO: write your code here\n    # Hint: use tr, sed, and awk\n    echo $1\
  \ | tr '[:lower:]' '[:upper:]' | sed 's/[AEIOU]/\\U&/g' | sed 's/[AEIOU]/\\U&/g'\
  \ | sed 's/[AEIOU]/\\U&/g' | sed 's/[AEIOU]/\\U&/g' | sed 's/[AEIOU]/\\U&/g' | sed\
  \ 's/[AEIOU]/\\U&/g' | sed 's/[AEIOU]/\\U&/g' | sed 's/[AEIOU]/\\U&/g' | sed 's/[AEIOU]/\\\
  U&/g' | sed 's/[AEIOU]/\\U&/g' | sed 's/[AEIOU]/\\U&/g' | sed 's/[AEIOU]/\\U&/g'\
  \ | sed 's/[AEIOU]/\\U&/g' | sed 's/[AEIOU]/\\U&/g' | sed 's/[AEIOU]/\\U&/g' | sed\
  \ 's/[AEIOU]/\\U&/g' | sed 's/[AEIOU]/\\U&/g' | sed 's/[AEIOU]/\\U&/g' | sed 's/[AEIOU]/\\\
  U&/g' | sed 's/[AEIOU]/\\U&/g' | sed 's/[AEIOU]/\\U&/g' | sed 's/[AEIOU]/\\U&/g'\
  \ | sed 's/[AEIOU]/\\U&/g' | sed 's/[AEIOU]/\\U&/g' | sed 's/[AEIOU]/\\U&/g' | sed\
  \ 's/[AEIOU]/\\U&/g' | sed 's/[AEIOU]/\\U&/g' | sed 's/[AEIOU]/\\"
- "    # TODO: Write this function\n    echo \"Not implemented\""
- '    echo "$1" | tr ''[a-z]'' ''[c-za-b]'' | tr ''[aeiou]'' ''[eoiu]'''
- "    # TODO: Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
  \ 'CGFKP'"
- '    echo $1 | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CFKPV'''
- "    # TODO: write your code here\n    echo \"TODO\""
- "    # TODO: Implement this function\n    echo \"Not implemented\""
- '    echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEGIOU'' ''CFHJQV'''
- "    # TODO: Your code here\n    # Hint: You can use the tr command to do this\n\
  \    #       tr '[:lower:]' '[:upper:]' < input.txt\n    #       tr '[:upper:]'\
  \ '[:lower:]' < input.txt\n    #       tr 'abcdefghijklmnopqrstuvwxyz' 'cdefghijklmnopqrstuvwxyzab'\
  \ < input.txt\n    #       tr 'aeiou' 'eioua' < input.txt\n    #       tr 'AEIOU'\
  \ 'EIOUA' < input.txt\n    #       tr 'aeiou' 'eioua' < input.txt | tr 'AEIOU' 'EIOUA'\
  \ < input.txt\n    #       tr 'aeiou' 'eioua' < input.txt | tr 'AEIOU' 'EIOUA' <\
  \ input.txt | tr '[:lower:]' '[:upper:]' < input.txt\n    #       tr 'aeiou' 'eioua'\
  \ < input.txt | tr 'AEIOU' 'EIOUA' < input.txt | tr '[:upper:]' '[:lower:]' < input.txt\n\
  \    #       echo $1 | tr 'aeiou' 'eioua' < input.txt | tr 'AEIOU' 'EIOUA' < input.txt\
  \ | tr '[:upper:]' '[:lower:]' < input.txt\n    #       echo $1 | tr 'aeiou' 'eioua'\
  \ < input.txt | tr 'AEIOU' 'EIOUA' < input.txt | tr '[:upper:]' '[:lower:]' < input.txt\
  \ | tr '[:lower:]' '[:upper:]' < input.txt\n    #       echo $1 | tr 'aeiou' 'eioua'\
  \ < input.txt | tr 'AEIOU' 'EIOUA' < input.txt | tr '[:upper:]' '[:lower:]' < input.txt\
  \ | tr '[:lower:]' '[:upper:]' < input.txt | tr 'aeiou' 'eioua' < input.txt\n  \
  \  #       echo $1 | tr 'aeiou"
- '    echo $1 | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- '    echo $1 | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- "\t# TODO: Your code here"
- "    # TODO: write your code here\n    echo \"TODO\""
- "    # TODO: write this function\n    echo \"TODO\""
- "    # TODO: Implement this function\n    echo \"Not implemented\""
- "    # TODO: Implement this function\n    # Hint: use the tr command\n    # Hint:\
  \ use the tr command\n    # Hint: use the tr command\n    # Hint: use the tr command\n\
  \    # Hint: use the tr command\n    # Hint: use the tr command\n    # Hint: use\
  \ the tr command\n    # Hint: use the tr command\n    # Hint: use the tr command\n\
  \    # Hint: use the tr command\n    # Hint: use the tr command\n    # Hint: use\
  \ the tr command\n    # Hint: use the tr command\n    # Hint: use the tr command\n\
  \    # Hint: use the tr command\n    # Hint: use the tr command\n    # Hint: use\
  \ the tr command\n    # Hint: use the tr command\n    # Hint: use the tr command\n\
  \    # Hint: use the tr command\n    # Hint: use the tr command\n    # Hint: use\
  \ the tr command\n    # Hint: use the tr command\n    # Hint: use the tr command\n\
  \    # Hint: use the tr command\n    # Hint: use the tr command\n    # Hint: use\
  \ the tr command\n    # Hint: use the tr command\n    # Hint: use the tr command\n\
  \    # Hint: use the tr command\n    # Hint: use the tr command\n    # Hint: use\
  \ the tr command\n    # Hint: use the tr command\n    # Hint: use the tr command\n\
  \    # Hint: use the tr command\n    # Hint: use the tr command\n    # Hint: use\
  \ the tr command\n    # Hint: use the tr command\n    # Hint: use the tr command\n\
  \    # Hint: use the tr command\n    # Hint: use the tr command\n    # Hint: use\
  \ the tr command\n    # Hint: use the tr command\n    # Hint: use the tr command\n\
  \    # Hint: use the tr command\n    # Hint: use the tr command\n    # Hint: use\
  \ the tr command\n    # Hint: use the tr command\n    # Hint: use the tr command\n\
  \    # Hint: use the tr command\n    #"
- "    # TODO: write your code here\n    # Hint: use the tr command\n    # Hint: use\
  \ the echo command\n    # Hint: use the | (pipe) command\n    # Hint: use the rev\
  \ command\n    # Hint: use the tr command\n    # Hint: use the | (pipe) command\n\
  \    # Hint: use the tr command\n    # Hint: use the | (pipe) command\n    # Hint:\
  \ use the tr command\n    # Hint: use the | (pipe) command\n    # Hint: use the\
  \ tr command\n    # Hint: use the | (pipe) command\n    # Hint: use the tr command\n\
  \    # Hint: use the | (pipe) command\n    # Hint: use the tr command\n    # Hint:\
  \ use the | (pipe) command\n    # Hint: use the tr command\n    # Hint: use the\
  \ | (pipe) command\n    # Hint: use the tr command\n    # Hint: use the | (pipe)\
  \ command\n    # Hint: use the tr command\n    # Hint: use the | (pipe) command\n\
  \    # Hint: use the tr command\n    # Hint: use the | (pipe) command\n    # Hint:\
  \ use the tr command\n    # Hint: use the | (pipe) command\n    # Hint: use the\
  \ tr command\n    # Hint: use the | (pipe) command\n    # Hint: use the tr command\n\
  \    # Hint: use the | (pipe) command\n    # Hint: use the tr command\n    # Hint:\
  \ use the | (pipe) command\n    # Hint: use the tr command\n    # Hint: use the\
  \ | (pipe) command\n    # Hint: use the tr command\n    # Hint: use the | (pipe)\
  \ command\n    # Hint: use the tr command\n    # Hint: use the | (pipe) command\n\
  \    # Hint: use the tr command\n    # Hint: use the | (pipe) command\n    # Hint:\
  \ use the tr command\n    # Hint: use the | (pipe) command\n    # Hint: use the\
  \ tr command\n    # Hint: use the | (pipe)"
- '    echo $1 | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGKOS'''
- '    echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGKOS'''
- "    # TODO: Your code here\n    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
  \ 'CGFKP'"
- "    # TODO: Write your code here\n    echo \"Not implemented\""
- '    # Your code here'
- "    # TODO: Your code here\n    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
  \ 'EIOUA'"
- "    local message=$1\n    local new_message=\"\"\n    local vowels=\"aeiou\"\n\
  \    local i=0\n    local char=\"\"\n    local char_code=0\n    local new_char_code=0\n\
  \    local new_char=\"\"\n    local is_vowel=0\n    local is_upper=0\n    local\
  \ is_lower=0\n    local is_letter=0\n    local is_vowel_upper=0\n    local is_vowel_lower=0\n\
  \    local is_vowel_upper_code=0\n    local is_vowel_lower_code=0\n    local is_vowel_upper_new_code=0\n\
  \    local is_vowel_lower_new_code=0\n    local is_vowel_upper_new_char=\"\"\n \
  \   local is_vowel_lower_new_char=\"\"\n    local is_upper_new_char=\"\"\n    local\
  \ is_lower_new_char=\"\"\n    local is_upper_new_code=0\n    local is_lower_new_code=0\n\
  \    local is_upper_code=0\n    local is_lower_code=0\n    local is_upper_new_char_code=0\n\
  \    local is_lower_new_char_code=0\n    local is_upper_new_char_code_new=0\n  \
  \  local is_lower_new_char_code_new=0\n    local is_upper_new_char_new=\"\"\n  \
  \  local is_lower_new_char_new=\"\"\n    local is_upper_new_char_code_new_new=0\n\
  \    local is_lower_new_char_code_new_new=0\n    local is_upper_new_char_new_new=\"\
  \"\n    local is_lower_new_char_new_new=\"\"\n    local is_upper_new_char_code_new_new_new=0\n\
  \    local is_lower_new_char_code_new_new_new=0\n    local is_upper_new_char_new_new_new=\"\
  \"\n    local is_lower_new_char_new_new_new=\"\"\n    local is_upper_new_char_code_"
- "  local input=$1\n  local output=\"\"\n  local vowels=\"aAeEiIoOuU\"\n  local alphabet=\"\
  abcdefghijklmnopqrstuvwxyz\"\n  local alphabet_upper=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
  \n  local alphabet_lower=\"abcdefghijklmnopqrstuvwxyz\"\n  local alphabet_length=${#alphabet}\n\
  \  local alphabet_lower_length=${#alphabet_lower}\n  local alphabet_upper_length=${#alphabet_upper}\n\
  \  local alphabet_lower_index=0\n  local alphabet_upper_index=0\n  local alphabet_index=0\n\
  \  local char=\"\"\n  local char_index=0\n  local char_index_lower=0\n  local char_index_upper=0\n\
  \  local char_index_lower_new=0\n  local char_index_upper_new=0\n  local char_new=\"\
  \"\n  local char_new_lower=\"\"\n  local char_new_upper=\"\"\n  local char_new_lower_index=0\n\
  \  local char_new_upper_index=0\n  local char_new_index=0\n  local char_new_index_lower=0\n\
  \  local char_new_index_upper=0\n  local char_new_index_lower_new=0\n  local char_new_index_upper_new=0\n\
  \  local char_new_lower_new=\"\"\n  local char_new_upper_new=\"\"\n  local char_new_lower_new_index=0\n\
  \  local char_new_upper_new_index=0\n  local char_new_lower_new_index_lower=0\n\
  \  local char_new_upper_new_index_upper=0\n  local char_new_lower_new_index_lower_new=0\n\
  \  local char_new_upper_new_index_upper_new=0\n  local char_new_lower_new_lower=\"\
  \"\n  local char_new_upper_new_upper=\"\"\n  local char_new_lower_new_lower_index=0\n\
  \  local char_new_upper_new_upper_index=0\n  local"
- "    # TODO: Implement this function\n    # Hint: Use tr, sed, and awk\n    # Hint:\
  \ Use the ascii table to convert between letters and numbers\n    # Hint: Use the\
  \ modulo operator to wrap around the alphabet\n    # Hint: Use the ternary operator\
  \ to make your code more concise\n    # Hint: Use the built-in bash function ord()\
  \ to get the ascii value of a character\n    # Hint: Use the built-in bash function\
  \ chr() to get the character from an ascii value\n    # Hint: Use the built-in bash\
  \ function printf to format your output\n    # Hint: Use the built-in bash function\
  \ seq to generate a sequence of numbers\n    # Hint: Use the built-in bash function\
  \ echo to print to standard out\n    # Hint: Use the built-in bash function read\
  \ to read from standard in\n    # Hint: Use the built-in bash function readarray\
  \ to read from standard in\n    # Hint: Use the built-in bash function declare to\
  \ declare an array\n    # Hint: Use the built-in bash function ${#array[@]} to get\
  \ the length of an array\n    # Hint: Use the built-in bash function ${array[@]:start:length}\
  \ to get a slice of an array\n    # Hint: Use the built-in bash function ${array[@]/pattern/replacement}\
  \ to replace a pattern in an array\n    # Hint: Use the built-in bash function ${array[@]//pattern/replacement}\
  \ to replace a pattern in an array\n    # Hint: Use the built-in bash function ${array[@]/#pattern/replacement}\
  \ to replace a pattern in an array\n    # Hint: Use the built-in bash function ${array[@]/%pattern/replacement}\
  \ to replace a pattern in an array\n    # Hint: Use the built-in bash function ${array[@]/pattern}\
  \ to remove a pattern from an array\n    # Hint: Use the built-in bash function\
  \ ${array[@]//pattern} to remove a pattern from an array\n    # Hint: Use the built-in\
  \ bash function ${array[@]/#pattern} to remove a pattern from an array\n    # Hint:\
  \ Use the"
- "    # Write your code here\n    echo \"Not implemented\""
- "    local input=$1\n    local output=\"\"\n    local vowels=\"aeiou\"\n    local\
  \ alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n    local i=0\n    local char=\"\"\n\
  \    local index=0\n    local new_index=0\n    local new_char=\"\"\n    for (( i=0;\
  \ i<${#input}; i++ )); do\n        char=${input:$i:1}\n        index=$(echo $alphabet\
  \ | grep -b -o $char | cut -d: -f1)\n        if [[ $vowels =~ $char ]]; then\n \
  \           new_index=$(( $index + 2 ))\n            new_char=${alphabet:$new_index:1}\n\
  \        else\n            new_char=$char\n        fi\n        output=$output$new_char\n\
  \    done\n    echo $output"
- '    echo $1 | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEGIOU'' ''CFHJQV'''
- "    local -a vowels=(a e i o u)\n    local -a vowels_encoded=(c g k m q)\n    local\
  \ -a alphabet=(a b c d e f g h i j k l m n o p q r s t u v w x y z)\n    local -a\
  \ alphabet_encoded=(b c d e f g h i j k l m n o p q r s t u v w x y z a)\n    local\
  \ -a message=($(echo $1 | tr -d ' '))\n    local -a message_encoded=()\n    local\
  \ -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n\
  \    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local\
  \ -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n\
  \    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local\
  \ -i A=0\n    local -i B=0\n    local -i C=0\n    local -i D=0\n    local -i E=0\n\
  \    local -i F=0\n    local -i G=0\n    local -i H=0\n    local -i I=0\n    local\
  \ -i J=0\n    local -i K=0\n    local -i L=0\n    local -i M=0\n    local -i N=0\n\
  \    local -i O=0\n    local -i P=0\n    local -i Q=0\n    local -i R=0\n    local\
  \ -i S=0\n    local -i T=0\n    local -i U=0\n    local -i V=0\n    local -i W=0\n\
  \    local -i X=0\n    local -i Y=0\n    local -i Z=0\n    local -i index=0\n  \
  \  local -i index_encoded=0\n    local -i length=${#"
- '    echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- "    # Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'"
- "    # TODO: your code here\n    echo $1 | tr 'a-zA-Z' 'n-za-mN-ZA-M' | tr 'aeiou'\
  \ 'cdfgjk'"
- "    local -a vowels=('a' 'e' 'i' 'o' 'u')\n    local -a vowels_encoded=('c' 'g'\
  \ 'k' 'o' 's')\n    local -a alphabet=('a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k'\
  \ 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z')\n    local -a alphabet_encoded=('A'\
  \ 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U'\
  \ 'V' 'W' 'X' 'Y' 'Z')\n    local -a message=($(echo $1 | tr -d ' '))\n    local\
  \ -a message_encoded=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
  \    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
  \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
  \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
  \ -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n\
  \    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local\
  \ -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i\
  \ ll=0\n    local -i mm=0\n    local -i nn=0\n"
- '    # Your code here'
- "    # TODO: Implement this function\n    # Hint: Use tr, sed, and awk\n    # Hint:\
  \ Use the fact that the ASCII value of 'a' is 97\n    # Hint: Use the fact that\
  \ the ASCII value of 'A' is 65\n    # Hint: Use the fact that the ASCII value of\
  \ 'z' is 122\n    # Hint: Use the fact that the ASCII value of 'Z' is 90\n    #\
  \ Hint: Use the fact that the ASCII value of '0' is 48\n    # Hint: Use the fact\
  \ that the ASCII value of '9' is 57\n    # Hint: Use the fact that the ASCII value\
  \ of ' ' is 32\n    # Hint: Use the fact that the ASCII value of '\\n' is 10\n \
  \   # Hint: Use the fact that the ASCII value of '\\t' is 9\n    # Hint: Use the\
  \ fact that the ASCII value of '\\r' is 13\n    # Hint: Use the fact that the ASCII\
  \ value of '\\b' is 8\n    # Hint: Use the fact that the ASCII value of '\\f' is\
  \ 12\n    # Hint: Use the fact that the ASCII value of '\\v' is 11\n    # Hint:\
  \ Use the fact that the ASCII value of '\\a' is 7\n    # Hint: Use the fact that\
  \ the ASCII value of '\\e' is 27\n    # Hint: Use the fact that the ASCII value\
  \ of '\\033' is 27\n    # Hint: Use the fact that the ASCII value of '\\0' is 0\n\
  \    # Hint: Use the fact that the ASCII value of '\\x1b' is 27\n    # Hint: Use\
  \ the fact that the ASCII value of '\\x1f' is 31\n    # Hint: Use the fact that\
  \ the ASCII value of '\\x1e' is 30\n    # Hint: Use the fact that the ASCII value\
  \ of '\\x1d' is 29\n    # Hint: Use the fact that the ASCII value of '\\x1c' is\
  \ 28\n    # Hint: Use the fact that the ASCII value of '\\x1b' is 27\n    # Hint:\
  \ Use the fact that the ASCII value of '\\x1a' is 26\n    #"
- "    # TODO: Implement this function\n    echo \"Not implemented\""
- '    echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- "    # TODO: Your code here\n    # Hint: You can use the tr command to swap case\n\
  \    # Hint: You can use the tr command to translate characters\n    # Hint: You\
  \ can use the echo command to remove newlines\n    # Hint: You can use the fold\
  \ command to wrap text to a certain width\n    # Hint: You can use the grep command\
  \ to find all vowels\n    # Hint: You can use the sed command to replace text\n\
  \    # Hint: You can use the tr command to remove all non-alphabetic characters\n\
  \    # Hint: You can use the tr command to remove all non-alphabetic characters\n\
  \    # Hint: You can use the tr command to remove all non-alphabetic characters\n\
  \    # Hint: You can use the tr command to remove all non-alphabetic characters\n\
  \    # Hint: You can use the tr command to remove all non-alphabetic characters\n\
  \    # Hint: You can use the tr command to remove all non-alphabetic characters\n\
  \    # Hint: You can use the tr command to remove all non-alphabetic characters\n\
  \    # Hint: You can use the tr command to remove all non-alphabetic characters\n\
  \    # Hint: You can use the tr command to remove all non-alphabetic characters\n\
  \    # Hint: You can use the tr command to remove all non-alphabetic characters\n\
  \    # Hint: You can use the tr command to remove all non-alphabetic characters\n\
  \    # Hint: You can use the tr command to remove all non-alphabetic characters\n\
  \    # Hint: You can use the tr command to remove all non-alphabetic characters\n\
  \    # Hint: You can use the tr command to remove all non-alphabetic characters\n\
  \    # Hint: You can use the tr command to remove all non-alphabetic characters\n\
  \    # Hint: You can use the tr command to remove all non-alphabetic characters\n\
  \    # Hint: You can use the tr command to remove all non-alphabetic characters\n\
  \    # Hint: You can use the tr command to remove all non-alphabetic characters\n\
  \    # Hint: You can use the tr command to remove all non-alphabetic characters\n\
  \    # Hint: You can use the tr command to remove all non-alphabetic characters\n\
  \    # Hint:"
- "    # TODO: Your code here\n    echo \"TODO\""
- "    # TODO: Write your code here\n    echo \"encode() not implemented\""
- '    echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'' | tr ''[:upper:]''
  ''[:lower:]'''
- "    # TODO: your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEGIOU'\
  \ 'CFLRVX'"
- '    echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- "    # TODO: Your code here\n    # Hint: You can use the tr command to swap case\n\
  \    # Hint: You can use the tr command to replace characters\n    # Hint: You can\
  \ use the tr command to delete characters\n    # Hint: You can use the echo command\
  \ to print a string\n    # Hint: You can use the seq command to generate a sequence\
  \ of numbers\n    # Hint: You can use the tr command to translate characters\n \
  \   # Hint: You can use the fold command to wrap lines\n    # Hint: You can use\
  \ the tr command to squeeze repeated characters\n    # Hint: You can use the tr\
  \ command to delete characters\n    # Hint: You can use the tr command to translate\
  \ characters\n    # Hint: You can use the fold command to wrap lines\n    # Hint:\
  \ You can use the tr command to squeeze repeated characters\n    # Hint: You can\
  \ use the tr command to delete characters\n    # Hint: You can use the tr command\
  \ to translate characters\n    # Hint: You can use the fold command to wrap lines\n\
  \    # Hint: You can use the tr command to squeeze repeated characters\n    # Hint:\
  \ You can use the tr command to delete characters\n    # Hint: You can use the tr\
  \ command to translate characters\n    # Hint: You can use the fold command to wrap\
  \ lines\n    # Hint: You can use the tr command to squeeze repeated characters\n\
  \    # Hint: You can use the tr command to delete characters\n    # Hint: You can\
  \ use the tr command to translate characters\n    # Hint: You can use the fold command\
  \ to wrap lines\n    # Hint: You can use the tr command to squeeze repeated characters\n\
  \    # Hint: You can use the tr command to delete characters\n    # Hint: You can\
  \ use the tr command to translate characters\n    # Hint: You can use the fold command\
  \ to wrap lines\n    # Hint: You can use the tr command to squeeze repeated characters\n\
  \    # Hint: You can use the tr command to delete characters\n    # Hint: You can\
  \ use the tr command to translate characters\n    # Hint: You can use the fold command\
  \ to wrap lines\n    # Hint: You can use the tr command to squeeze repeated characters\n\
  \    # Hint: You can use the tr command"
- "    local str=\"$1\"\n    local vowels=\"aeiou\"\n    local vowels_upper=\"AEIOU\"\
  \n    local new_str=\"\"\n    local i=0\n    local char=\"\"\n    local is_upper=0\n\
  \    local is_vowel=0\n    local vowel_index=0\n    local new_char=\"\"\n    local\
  \ new_char_upper=\"\"\n    local new_char_lower=\"\"\n    local new_char_index=0\n\
  \    local new_char_upper_index=0\n    local new_char_lower_index=0\n    local new_char_upper_index_mod=0\n\
  \    local new_char_lower_index_mod=0\n    local new_char_upper_index_mod_2=0\n\
  \    local new_char_lower_index_mod_2=0\n    local new_char_upper_index_mod_2_plus_2=0\n\
  \    local new_char_lower_index_mod_2_plus_2=0\n    local new_char_upper_index_mod_2_plus_2_mod=0\n\
  \    local new_char_lower_index_mod_2_plus_2_mod=0\n    local new_char_upper_index_mod_2_plus_2_mod_char=\"\
  \"\n    local new_char_lower_index_mod_2_plus_2_mod_char=\"\"\n    local new_char_upper_index_mod_2_plus_2_mod_char_upper=\"\
  \"\n    local new_char_lower_index_mod_2_plus_2_mod_char_upper=\"\"\n    local new_char_upper_index_mod_2_plus_2_mod_char_lower=\"\
  \"\n    local new_char_lower_index_mod_2_plus_2_mod_char_lower=\"\"\n    local new_char_upper_index_mod_2_plus_2_mod_char_upper_index=0\n\
  \    local new_char_lower_index_mod_2_plus_2_mod_char_upper_index=0\n    local new_char_upper_index_mod_2_plus_2_mod_char_lower_index=0\n\
  \    local new_"
- "  # TODO: Your code here\n  echo \"Not Implemented\""
- '    echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'' | tr ''[:upper:]''
  ''[:lower:]'''
- "    # TODO: Write your code here\n    # Hint: You can use the tr command to swap\
  \ case\n    # Hint: You can use the tr command to replace characters\n    # Hint:\
  \ You can use the awk command to get the character 2 places ahead\n    # Hint: You\
  \ can use the modulo operator to wrap around the alphabet\n    # Hint: You can use\
  \ the echo command to convert a string to lowercase\n    #       and pipe it to\
  \ tr\n    # Hint: You can use the echo command to convert a string to uppercase\n\
  \    #       and pipe it to tr\n    # Hint: You can use the echo command to convert\
  \ a string to lowercase\n    #       and pipe it to awk\n    # Hint: You can use\
  \ the echo command to convert a string to uppercase\n    #       and pipe it to\
  \ awk\n    # Hint: You can use the echo command to convert a string to lowercase\n\
  \    #       and pipe it to tr\n    # Hint: You can use the echo command to convert\
  \ a string to uppercase\n    #       and pipe it to tr\n    # Hint: You can use\
  \ the echo command to convert a string to lowercase\n    #       and pipe it to\
  \ tr\n    # Hint: You can use the echo command to convert a string to uppercase\n\
  \    #       and pipe it to tr\n    # Hint: You can use the echo command to convert\
  \ a string to lowercase\n    #       and pipe it to tr\n    # Hint: You can use\
  \ the echo command to convert a string to uppercase\n    #       and pipe it to\
  \ tr\n    # Hint: You can use the echo command to convert a string to lowercase\n\
  \    #       and pipe it to tr\n    # Hint: You can use the echo command to convert\
  \ a string to uppercase\n    #       and pipe it to tr\n    # Hint: You can use\
  \ the echo command to convert a string to lowercase\n    #       and pipe it to\
  \ tr\n    # Hint: You can use the echo command to convert a string to uppercase\n\
  \    #       and pipe it to tr\n    # Hint: You can use the echo command to convert\
  \ a string to lowercase\n    #       and pipe it to tr\n    # Hint"
- "    # TODO: Implement this function\n    echo \"Not implemented\""
- '    # TODO: write your code here'
- "    # TODO: implement this function\n    echo \"TODO\""
- "    local -a vowels=(a e i o u)\n    local -a alphabet=(a b c d e f g h i j k l\
  \ m n o p q r s t u v w x y z)\n    local -a message=($(echo $1 | sed 's/./& /g'))\n\
  \    local -a encoded\n    local i\n    local j\n    local k\n    local l\n    local\
  \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
  \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
  \ y\n    local z\n    local A\n    local B\n    local C\n    local D\n    local\
  \ E\n    local F\n    local G\n    local H\n    local I\n    local J\n    local\
  \ K\n    local L\n    local M\n    local N\n    local O\n    local P\n    local\
  \ Q\n    local R\n    local S\n    local T\n    local U\n    local V\n    local\
  \ W\n    local X\n    local Y\n    local Z\n    local letter\n    local encoded_letter\n\
  \    local index\n    local encoded_index\n    local encoded_message\n    local\
  \ -a encoded_message_array\n    local -a encoded_message_array_lower\n    local\
  \ -a encoded_message_array_upper\n    local -a encoded_message_array_lower_vowels\n\
  \    local -a encoded_message_array_upper_vowels\n    local -a encoded_message_array_lower_consonants\n\
  \    local -a encoded_message_array_upper_consonants\n    local -a encoded_message_array_lower_vowels_encoded\n\
  \    local -a encoded_message_array_upper_vowels_encoded\n    local -a encoded_message_array_lower_consonants_encoded\n\
  \    local -a encoded_message_array_upper_consonants_encoded\n    local -a encoded_message_array_lower_encoded\n\
  \    local -a encoded_message_array_upper_encoded\n    local -a encoded_message_array_encoded\n\
  \    local -a encoded_message_array_encoded_string\n"
- "    # TODO: Implement this function\n    echo \"Not implemented\""
- "    local message=\"$1\"\n    local encoded=\"\"\n    local char=\"\"\n    local\
  \ char_code=\"\"\n    local char_code_encoded=\"\"\n    local char_encoded=\"\"\n\
  \    local vowels=\"aeiou\"\n    local vowels_encoded=\"cfilor\"\n    local i=0\n\
  \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n   \
  \ local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local\
  \ t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n\
  \    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n   \
  \ local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local\
  \ j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n\
  \    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n   \
  \ local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local\
  \ z=0\n    local A=0\n    local B=0\n    local C=0\n    local D=0\n    local E=0\n\
  \    local F=0\n    local G=0\n    local H=0\n    local I=0\n    local J=0\n   \
  \ local K=0\n    local L=0\n    local M=0\n    local N=0\n    local O=0\n    local\
  \ P=0\n    local Q=0\n    local R=0\n    local S=0\n    local T=0\n    local U=0\n\
  \    local V=0\n    local W=0\n    local X=0\n    local Y=0\n    local Z=0\n   \
  \ for ((i=0; i<${#message}; i++)); do\n        char=\"${message:$"
- '  echo $1 | tr ''[:lower:]'' ''[:upper:]'' | tr ''[:upper:]'' ''[:lower:]'' | tr
  ''aeiou'' ''cdfghj'''
- "    # TODO: Your code here\n    # Hint: You can use the tr command to swap case\n\
  \    # Hint: You can use the tr command to replace characters\n    # Hint: You can\
  \ use the fold command to wrap lines\n    # Hint: You can use the echo command to\
  \ remove newlines\n    # Hint: You can use the sed command to remove spaces\n  \
  \  # Hint: You can use the tr command to replace characters\n    # Hint: You can\
  \ use the fold command to wrap lines\n    # Hint: You can use the echo command to\
  \ remove newlines\n    # Hint: You can use the sed command to remove spaces\n  \
  \  # Hint: You can use the tr command to replace characters\n    # Hint: You can\
  \ use the fold command to wrap lines\n    # Hint: You can use the echo command to\
  \ remove newlines\n    # Hint: You can use the sed command to remove spaces\n  \
  \  # Hint: You can use the tr command to replace characters\n    # Hint: You can\
  \ use the fold command to wrap lines\n    # Hint: You can use the echo command to\
  \ remove newlines\n    # Hint: You can use the sed command to remove spaces\n  \
  \  # Hint: You can use the tr command to replace characters\n    # Hint: You can\
  \ use the fold command to wrap lines\n    # Hint: You can use the echo command to\
  \ remove newlines\n    # Hint: You can use the sed command to remove spaces\n  \
  \  # Hint: You can use the tr command to replace characters\n    # Hint: You can\
  \ use the fold command to wrap lines\n    # Hint: You can use the echo command to\
  \ remove newlines\n    # Hint: You can use the sed command to remove spaces\n  \
  \  # Hint: You can use the tr command to replace characters\n    # Hint: You can\
  \ use the fold command to wrap lines\n    # Hint: You can use the echo command to\
  \ remove newlines\n    # Hint: You can use the sed command to remove spaces\n  \
  \  # Hint: You can use the tr command to replace characters\n    # Hint: You can\
  \ use the fold command to wrap lines\n    # Hint: You can use the echo command to\
  \ remove newlines\n    # Hint: You can use the sed command to remove spaces"
- "    # TODO: Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
  \ 'CGFKP'"
- "    # TODO: Your code here\n    # Hint: You can use the tr command to swap case\n\
  \    # Hint: You can use the tr command to replace characters\n    # Hint: You can\
  \ use the tr command to delete characters\n    # Hint: You can use the echo command\
  \ to get the ASCII value of a character\n    # Hint: You can use the expr command\
  \ to perform arithmetic\n    # Hint: You can use the printf command to convert an\
  \ ASCII value to a character\n    # Hint: You can use the seq command to generate\
  \ a sequence of numbers\n    # Hint: You can use the paste command to combine two\
  \ strings\n    # Hint: You can use the fold command to wrap lines\n    # Hint: You\
  \ can use the head command to get the first line of a file\n    # Hint: You can\
  \ use the tail command to get all but the first line of a file\n    # Hint: You\
  \ can use the sort command to sort lines\n    # Hint: You can use the uniq command\
  \ to remove duplicate lines\n    # Hint: You can use the wc command to count lines\n\
  \    # Hint: You can use the cut command to get a substring\n    # Hint: You can\
  \ use the tr command to translate characters\n    # Hint: You can use the rev command\
  \ to reverse a string\n    # Hint: You can use the tac command to reverse a file\n\
  \    # Hint: You can use the sed command to replace text\n    # Hint: You can use\
  \ the sed command to delete text\n    # Hint: You can use the sed command to insert\
  \ text\n    # Hint: You can use the sed command to substitute text\n    # Hint:\
  \ You can use the sed command to translate characters\n    # Hint: You can use the\
  \ sed command to change case\n    # Hint: You can use the sed command to match a\
  \ regular expression\n    # Hint: You can use the sed command to match a regular\
  \ expression and replace text\n    # Hint: You can use the sed command to match\
  \ a regular expression and delete text\n    # Hint: You can use the sed command\
  \ to match a regular expression and insert text\n    # Hint: You can use the sed\
  \ command to match a regular expression and substitute text\n    # Hint: You can\
  \ use the sed command to"
- "  # TODO: Your code here\n  echo $1 | tr '[a-z]' '[c-za-b]' | tr '[aeiou]' '[eoiu]'"
- "    # convert to lower case\n    local lower=$(echo $1 | tr '[:upper:]' '[:lower:]')\n\
  \    # convert to upper case\n    local upper=$(echo $1 | tr '[:lower:]' '[:upper:]')\n\
  \    # convert to upper case\n    local upper=$(echo $1 | tr '[:lower:]' '[:upper:]')\n\
  \    # replace vowels with the letter that appears 2 places ahead of that vowel\
  \ in the english alphabet\n    local upper=$(echo $upper | tr 'aeiou' 'cfilor')\n\
  \    # replace vowels with the letter that appears 2 places ahead of that vowel\
  \ in the english alphabet\n    local lower=$(echo $lower | tr 'aeiou' 'cfilor')\n\
  \    # swap case of all letters\n    echo $lower | tr '[:upper:]' '[:lower:]' |\
  \ tr '[:lower:]' '[:upper:]'"
- "    # TODO: Implement this function\n    echo \"Not implemented\""
- '    # TODO: Your code here'
- "    # TODO: Your code here\n    echo \"Not implemented\""
- "    # TODO: write your code here\n    echo \"TODO\""
- "    # TODO: Write your code here\n    echo \"TODO\""
- "    # TODO: Write this function\n    echo \"Not yet implemented\""
- "    # TODO: Your code here\n    # Hint: You can use the tr command to swap case\n\
  \    # Hint: You can use the tr command to replace characters\n    # Hint: You can\
  \ use the tr command to delete characters\n    # Hint: You can use the echo command\
  \ to print a string\n    # Hint: You can use the seq command to generate a sequence\n\
  \    # Hint: You can use the fold command to wrap lines\n    # Hint: You can use\
  \ the rev command to reverse a string\n    # Hint: You can use the sort command\
  \ to sort a string\n    # Hint: You can use the uniq command to remove duplicates\n\
  \    # Hint: You can use the wc command to count characters\n    # Hint: You can\
  \ use the head command to get the first line\n    # Hint: You can use the tail command\
  \ to get the last line\n    # Hint: You can use the cut command to get a substring\n\
  \    # Hint: You can use the tr command to translate characters\n    # Hint: You\
  \ can use the tr command to squeeze characters\n    # Hint: You can use the tr command\
  \ to delete characters\n    # Hint: You can use the tr command to complement characters\n\
  \    # Hint: You can use the tr command to truncate characters\n    # Hint: You\
  \ can use the tr command to pad characters\n    # Hint: You can use the tr command\
  \ to fold characters\n    # Hint: You can use the tr command to map characters\n\
  \    # Hint: You can use the tr command to join characters\n    # Hint: You can\
  \ use the tr command to split characters\n    # Hint: You can use the tr command\
  \ to squeeze characters\n    # Hint: You can use the tr command to squeeze characters\n\
  \    # Hint: You can use the tr command to squeeze characters\n    # Hint: You can\
  \ use the tr command to squeeze characters\n    # Hint: You can use the tr command\
  \ to squeeze characters\n    # Hint: You can use the tr command to squeeze characters\n\
  \    # Hint: You can use the tr command to squeeze characters\n    # Hint: You can\
  \ use the tr command to squeeze characters\n    # Hint: You can use the tr command\
  \ to squeeze characters\n    # Hint: You can use"
- "    # TODO: Implement this function\n    echo $1 | tr '[:lower:]' '[:upper:]' |\
  \ tr 'AEIOU' 'CGFKP'"
- '    # TODO: Your code here'
- '  echo $1 | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- "    # TODO: write your code here\n    echo \"TODO\""
- "    # TODO: implement this function\n    echo \"TODO: implement this function\""
- "    local input=$1\n    local output=\"\"\n    local char=\"\"\n    local char_code=0\n\
  \    local char_code_new=0\n    local char_new=\"\"\n    local vowels=\"aeiou\"\n\
  \    local vowels_new=\"cgjln\"\n    local i=0\n    local j=0\n    local k=0\n \
  \   local len=0\n    local len_vowels=0\n    local len_vowels_new=0\n    local is_vowel=0\n\
  \n    len=${#input}\n    len_vowels=${#vowels}\n    len_vowels_new=${#vowels_new}\n\
  \n    for ((i=0; i<len; i++)); do\n        char=${input:$i:1}\n        char_code=$(printf\
  \ \"%d\" \"'$char\")\n        if [[ $char_code -ge 65 && $char_code -le 90 ]]; then\n\
  \            char_code_new=$((char_code + 32))\n        elif [[ $char_code -ge 97\
  \ && $char_code -le 122 ]]; then\n            char_code_new=$((char_code - 32))\n\
  \        else\n            char_code_new=$char_code\n        fi\n        char_new=$(printf\
  \ \\\\$(printf '%03o' $char_code_new))\n        output=$output$char_new\n    done\n\
  \n    for ((i=0; i<len; i++)); do\n        char=${output:$i:1}\n        is_vowel=0\n\
  \        for ((j=0; j<len_vowels; j++)); do\n            if [[ $char == ${vowels:$j:1}\
  \ ]]; then\n                is_vowel=1\n                break\n            fi\n\
  \        done\n        if [[ $is_vowel -eq 1 ]]; then\n            k=$((j + 2))\n\
  \            if [[ $k -ge $len_vowels_new ]]; then\n                k=$((k - len_vowels_new))\n\
  \            fi\n            char_new=${vowels_new:$k:1}\n            output=${output"
- "    # TODO: implement this function\n    # Hint: use the tr command to swap case\
  \ and replace characters\n    # with their english alphabet equivalents\n    # Hint:\
  \ use the modulo operator to wrap around the alphabet\n    # Hint: use the echo\
  \ command to print the result\n    # Hint: use the $1 variable to access the input\
  \ string\n    echo $1 | tr '[a-z]' '[n-za-m]' | tr '[aeiou]' '[eoiu]'"
- '    echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- "\t# TODO: Write your code here\n\techo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEGIOU'\
  \ 'CEGKQY'"
- "    # TODO: Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEGIOU'\
  \ 'CFLRVY'"
- "    local message=$1\n    local encoded=\"\"\n    local vowels=\"aeiou\"\n    local\
  \ vowel_index=0\n    local vowel_index_plus_two=0\n    local vowel_index_plus_two_mod=0\n\
  \    local vowel_index_plus_two_mod_plus_one=0\n    local vowel_index_plus_two_mod_plus_one_mod=0\n\
  \    local vowel_index_plus_two_mod_plus_one_mod_plus_one=0\n    local vowel_index_plus_two_mod_plus_one_mod_plus_one_mod=0\n\
  \    local vowel_index_plus_two_mod_plus_one_mod_plus_one_mod_plus_one=0\n    local\
  \ vowel_index_plus_two_mod_plus_one_mod_plus_one_mod_plus_one_mod=0\n    local vowel_index_plus_two_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one=0\n\
  \    local vowel_index_plus_two_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod=0\n\
  \    local vowel_index_plus_two_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one=0\n\
  \    local vowel_index_plus_two_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod=0\n\
  \    local vowel_index_plus_two_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one=0\n\
  \    local vowel_index_plus_two_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod=0\n\
  \    local vowel_index_plus_two_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod_plus_one_mod_"
- '    echo $1 | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- "    local message=$1\n    local encoded=\"\"\n    local letter=\"\"\n    local\
  \ char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local is_upper=0\n\
  \    local is_vowel=0\n    local vowels=\"aeiou\"\n    local vowels_upper=\"AEIOU\"\
  \n    local alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n    local alphabet_upper=\"\
  ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    for (( i=0; i<${#message}; i++ )); do\n      \
  \  letter=${message:$i:1}\n        is_upper=0\n        is_vowel=0\n        for ((\
  \ j=0; j<${#vowels}; j++ )); do\n            char=${vowels:$j:1}\n            if\
  \ [[ \"$letter\" == \"$char\" ]]; then\n                is_vowel=1\n           \
  \     break\n            fi\n        done\n        for (( j=0; j<${#vowels_upper};\
  \ j++ )); do\n            char=${vowels_upper:$j:1}\n            if [[ \"$letter\"\
  \ == \"$char\" ]]; then\n                is_vowel=1\n                is_upper=1\n\
  \                break\n            fi\n        done\n        if [[ $is_vowel -eq\
  \ 1 ]]; then\n            if [[ $is_upper -eq 1 ]]; then\n                for ((\
  \ j=0; j<${#alphabet_upper}; j++ )); do\n                    char=${alphabet_upper:$j:1}\n\
  \                    if [[ \"$letter\" == \"$char\" ]]; then\n                 \
  \       k=$(( ($j + 2) % 26 ))\n                        letter=${alphabet_upper:$k:1}\n\
  \                        break\n                    fi\n                done\n \
  \           else\n                for (( j=0; j<${#alphabet}; j++ )); do\n     \
  \               char=${alphabet:$j:1}\n                    if [[ \"$letter\" ==\
  \ \"$char\" ]]; then\n                        k=$(( ($j + 2) % 26 ))\n         \
  \               letter=${alphabet:$k:1}\n                        break\n       \
  \             fi\n                done"
- "    # TODO: Write your code here\n    echo $1 | tr '[a-z]' '[c-za-b]' | tr '[aeiou]'\
  \ '[eoiu]'"
- '    echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- "    # TODO: write this function\n    echo \"TODO\""
- "    local message=$1\n    local encoded=\"\"\n    local char=\"\"\n    local char_ascii=\"\
  \"\n    local char_ascii_encoded=\"\"\n    local char_encoded=\"\"\n    local vowels=\"\
  aeiou\"\n    local vowels_encoded=\"cgjkr\"\n    local i=0\n    local j=0\n    local\
  \ k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n\
  \    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n   \
  \ local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local\
  \ a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n\
  \    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n   \
  \ local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local\
  \ q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n\
  \    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local A=0\n   \
  \ local B=0\n    local C=0\n    local D=0\n    local E=0\n    local F=0\n    local\
  \ G=0\n    local H=0\n    local I=0\n    local J=0\n    local K=0\n    local L=0\n\
  \    local M=0\n    local N=0\n    local O=0\n    local P=0\n    local Q=0\n   \
  \ local R=0\n    local S=0\n    local T=0\n    local U=0\n    local V=0\n    local\
  \ W=0\n    local X=0\n    local Y=0\n    local Z=0\n    local length=${#message}\n\
  \    for (( i=0; i<length; i++"
- "    local message=$1\n    local vowels='aeiou'\n    local encoded_message=''\n\
  \    local char=''\n    local i=0\n    local index=0\n    local char_code=0\n  \
  \  local new_char_code=0\n    local new_char=''\n    local new_index=0\n    local\
  \ new_vowel=''\n    local new_vowel_index=0\n    local new_vowel_code=0\n    local\
  \ new_vowel_char=''\n    local new_vowel_char_code=0\n    local new_vowel_char_index=0\n\
  \    local new_vowel_char_index_plus_two=0\n    local new_vowel_char_index_plus_two_mod=0\n\
  \    local new_vowel_char_index_plus_two_mod_char=''\n    local new_vowel_char_index_plus_two_mod_char_code=0\n\
  \    local new_vowel_char_index_plus_two_mod_char_index=0\n    local new_vowel_char_index_plus_two_mod_char_index_plus_two=0\n\
  \    local new_vowel_char_index_plus_two_mod_char_index_plus_two_mod=0\n    local\
  \ new_vowel_char_index_plus_two_mod_char_index_plus_two_mod_char=''\n    local new_vowel_char_index_plus_two_mod_char_index_plus_two_mod_char_code=0\n\
  \    local new_vowel_char_index_plus_two_mod_char_index_plus_two_mod_char_index=0\n\
  \    local new_vowel_char_index_plus_two_mod_char_index_plus_two_mod_char_index_plus_two=0\n\
  \    local new_vowel_char_index_plus_two_mod_char_index_plus_two_mod_char_index_plus_two_mod=0\n\
  \    local new_vowel_char_index_plus_two_mod"
- "    # TODO: Implement this function\n    echo \"Not implemented\""
- "    # your code here\n    echo $1 | tr '[a-z]' '[c-za-b]' | tr '[aeiou]' '[eoiu]'"
- "    # TODO: Write your code here\n    echo \"TODO\""
- '    echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- "    # TODO: write your code here\n    echo \"TODO\""
- "    # TODO: Implement this function\n    echo \"Not implemented\""
- "  # TODO: Implement this function\n  echo \"Not yet implemented\""
- '    echo $1 | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- '    echo $1 | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- "    # TODO: Implement this function\n    echo \"Not implemented\""
- "    # TODO: write this function\n    echo \"TODO\""
- "    # TODO: write your code here\n    echo \"Not implemented\""
- "    # TODO: write your code here\n    echo \"TODO\""
- "    # TODO: implement this function\n    echo $1 | tr '[:lower:]' '[:upper:]' |\
  \ tr 'AEIOU' 'CGKOS' | tr '[:upper:]' '[:lower:]'"
- "    # TODO: implement this function\n    echo $1 | tr '[:lower:]' '[:upper:]' |\
  \ tr 'AEIOU' 'CGKOS'"
- "    # TODO: implement this function\n    echo $1 | tr '[:lower:]' '[:upper:]' |\
  \ tr 'AEIOU' 'CGFKP'"
- "  # TODO: Implement this function\n  echo \"Not implemented\""
- '    echo $1 | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKQS'''
- "    # TODO: Write this function\n    echo \"Not yet implemented\""
- "    # TODO: Implement this function\n    # Hint: You can use the tr command to\
  \ swap case\n    # Hint: You can use the tr command to replace characters\n    #\
  \ Hint: You can use the fold command to split the string into lines\n    # Hint:\
  \ You can use the fold command to split the string into lines\n    # Hint: You can\
  \ use the fold command to split the string into lines\n    # Hint: You can use the\
  \ fold command to split the string into lines\n    # Hint: You can use the fold\
  \ command to split the string into lines\n    # Hint: You can use the fold command\
  \ to split the string into lines\n    # Hint: You can use the fold command to split\
  \ the string into lines\n    # Hint: You can use the fold command to split the string\
  \ into lines\n    # Hint: You can use the fold command to split the string into\
  \ lines\n    # Hint: You can use the fold command to split the string into lines\n\
  \    # Hint: You can use the fold command to split the string into lines\n    #\
  \ Hint: You can use the fold command to split the string into lines\n    # Hint:\
  \ You can use the fold command to split the string into lines\n    # Hint: You can\
  \ use the fold command to split the string into lines\n    # Hint: You can use the\
  \ fold command to split the string into lines\n    # Hint: You can use the fold\
  \ command to split the string into lines\n    # Hint: You can use the fold command\
  \ to split the string into lines\n    # Hint: You can use the fold command to split\
  \ the string into lines\n    # Hint: You can use the fold command to split the string\
  \ into lines\n    # Hint: You can use the fold command to split the string into\
  \ lines\n    # Hint: You can use the fold command to split the string into lines\n\
  \    # Hint: You can use the fold command to split the string into lines\n    #\
  \ Hint: You can use the fold command to split the string into lines\n    # Hint:\
  \ You can use the fold command to split the string into lines\n    # Hint: You can\
  \ use the fold command to split the string into lines\n    # Hint: You can use the\
  \ fold command to split the string into lines\n    # Hint"
- "    local string=$1\n    local result=\"\"\n    local vowels=\"aeiou\"\n    local\
  \ vowel_index=0\n    local char_index=0\n    local char=\"\"\n    local char_ascii=0\n\
  \    local char_ascii_lower=0\n    local char_ascii_upper=0\n    local char_ascii_lower_encoded=0\n\
  \    local char_ascii_upper_encoded=0\n    local char_encoded=\"\"\n\n    for ((i=0;\
  \ i<${#string}; i++)); do\n        char=${string:$i:1}\n        char_ascii=$(printf\
  \ \"%d\" \"'$char\")\n        char_ascii_lower=$(printf \"%d\" \"'$(echo $char |\
  \ tr '[:upper:]' '[:lower:]')\")\n        char_ascii_upper=$(printf \"%d\" \"'$(echo\
  \ $char | tr '[:lower:]' '[:upper:]')\")\n        char_ascii_lower_encoded=$((char_ascii_lower\
  \ + 2))\n        char_ascii_upper_encoded=$((char_ascii_upper + 2))\n        char_encoded=$(printf\
  \ \"\\x$(printf %x $char_ascii_lower_encoded)\")\n        vowel_index=$(expr index\
  \ \"$vowels\" \"$(echo $char | tr '[:upper:]' '[:lower:]')\")\n        if [ $vowel_index\
  \ -gt 0 ]; then\n            char_encoded=$(printf \"\\x$(printf %x $char_ascii_lower_encoded)\"\
  )\n        elif [ $char_ascii_lower_encoded -gt 122 ]; then\n            char_encoded=$(printf\
  \ \"\\x$(printf %x $((char_ascii_lower_encoded - 26)))\")\n        fi\n        if\
  \ [ $char_ascii -eq $char_ascii_upper ]; then\n            char_encoded=$(echo $char_encoded\
  \ | tr '[:lower:]' '[:upper:]')\n        fi\n        result=\"$result$char_encoded\"\
  \n    done\n    echo $result"
- "    # TODO: Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
  \ 'CGFKP'"
- "    # TODO: Write your code here\n    echo \"TODO\""
- '    echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- '    echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- "    # TODO: your code here\n    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEOIU'\
  \ 'CGRVY'"
- "\t# TODO: Implement this function\n\techo $1 | tr 'a-zA-Z' 'c-za-bC-ZA-B' | tr\
  \ 'aeiouAEIOU' 'cgjkCGNK'"
- '    # TODO: Your code here'
- "    # Write your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
  \ 'CGFKP'"
- "    # TODO: Implement this function\n    echo \"Not implemented\""
- "    # TODO: Write your code here\n    echo \"encode\""
- '    echo $1 | tr ''[:lower:]'' ''[:upper:]'' | tr ''[A,E,I,O,U]'' ''[C,G,K,O,S]'''
- "    # TODO: Write your code here\n    echo \"$1\" | tr '[:lower:]' '[:upper:]'\
  \ | tr 'AEIOU' 'EGIOA'"
- '  echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- "    local str=$1\n    local newstr=\"\"\n    local vowels=\"aeiou\"\n    local\
  \ vowels_upper=\"AEIOU\"\n    local i=0\n    local char=\"\"\n    local char_upper=\"\
  \"\n    local char_lower=\"\"\n    local char_new=\"\"\n    local char_new_upper=\"\
  \"\n    local char_new_lower=\"\"\n    local char_new_index=0\n    local char_new_index_upper=0\n\
  \    local char_new_index_lower=0\n    local char_new_index_upper_mod=0\n    local\
  \ char_new_index_lower_mod=0\n    local char_new_index_upper_mod_add=0\n    local\
  \ char_new_index_lower_mod_add=0\n    local char_new_index_upper_mod_add_mod=0\n\
  \    local char_new_index_lower_mod_add_mod=0\n    local char_new_index_upper_mod_add_mod_add=0\n\
  \    local char_new_index_lower_mod_add_mod_add=0\n    local char_new_index_upper_mod_add_mod_add_mod=0\n\
  \    local char_new_index_lower_mod_add_mod_add_mod=0\n    local char_new_index_upper_mod_add_mod_add_mod_add=0\n\
  \    local char_new_index_lower_mod_add_mod_add_mod_add=0\n    local char_new_index_upper_mod_add_mod_add_mod_add_mod=0\n\
  \    local char_new_index_lower_mod_add_mod_add_mod_add_mod=0\n    local char_new_index_upper_mod_add_mod_add_mod_add_mod_add=0\n\
  \    local char_new_index_lower_mod_add_mod_add_mod_add_mod_add=0\n    local char_new_index_upper_mod_add_mod_add_mod_add_mod_add_mod=0\n\
  \    local char_new_index_lower_mod_add_mod_add_mod_add_mod_add_mod"
- "    local result=\"\"\n    local char=\"\"\n    local char_ascii=\"\"\n    local\
  \ char_ascii_new=\"\"\n    local char_new=\"\"\n    local vowels=\"aeiouAEIOU\"\n\
  \    local vowels_new=\"cgjkmCGNJM\"\n    local i=0\n    local j=0\n    local len=${#1}\n\
  \    for (( i=0; i<len; i++ )); do\n        char=${1:$i:1}\n        char_ascii=$(printf\
  \ \"%d\" \"'$char\")\n        if [[ \"$char\" =~ [a-zA-Z] ]]; then\n           \
  \ if [[ \"$char\" =~ [a-z] ]]; then\n                char_ascii_new=$(( char_ascii\
  \ - 32 ))\n            else\n                char_ascii_new=$(( char_ascii + 32\
  \ ))\n            fi\n            char_new=$(printf \\\\$(printf '%03o' $char_ascii_new))\n\
  \            result+=$char_new\n        else\n            result+=$char\n      \
  \  fi\n    done\n    echo \"$result\""
- "    # TODO: Write me\n    echo \"Not yet implemented\""
- '    echo $1 | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- "    # TODO: Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
  \ 'EGIKO'"
- "    # TODO: Implement this function\n    echo \"Not implemented\""
- "  local -a vowels=(a e i o u)\n  local -a alphabet=(a b c d e f g h i j k l m n\
  \ o p q r s t u v w x y z)\n  local -a encoded=()\n  local -a message=($(echo $1\
  \ | sed 's/./& /g'))\n  local -a encoded_vowels=()\n  local -a encoded_consonants=()\n\
  \  local vowel_index\n  local consonant_index\n  local i\n  local j\n  local k\n\
  \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n \
  \ local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
  \ z\n  local letter\n  local encoded_letter\n  local encoded_message\n  local -a\
  \ encoded_message_array=()\n  local -a encoded_message_array_lower=()\n  local -a\
  \ encoded_message_array_upper=()\n  local encoded_message_lower\n  local encoded_message_upper\n\
  \  local encoded_message_final\n\n  # loop through the message\n  for i in \"${!message[@]}\"\
  ; do\n    letter=\"${message[$i]}\"\n    # check if the letter is a vowel\n    for\
  \ j in \"${!vowels[@]}\"; do\n      if [[ \"${letter,,}\" == \"${vowels[$j]}\" ]];\
  \ then\n        # get the index of the vowel in the alphabet\n        for k in \"\
  ${!alphabet[@]}\"; do\n          if [[ \"${letter,,}\" == \"${alphabet[$k]}\" ]];\
  \ then\n            vowel_index=\"$k\"\n            break\n          fi\n      \
  \  done\n        # get the index of the encoded vowel in the alphabet\n        for\
  \ l in \"${!alphabet[@]}\"; do\n          if [[ \"${vowel_index}\" == \"$l\" ]];\
  \ then\n            encoded_vowels+=(\"${alphabet[$((l+2))]}\")\n            break\n\
  \          fi\n        done\n      fi\n    done\n    # check if the letter is a\
  \ consonant\n   "
- "    # TODO: Implement this function\n    # Hint: use tr and sed\n    echo $1 |\
  \ tr '[:lower:]' '[:upper:]' | sed 's/A/C/g;s/E/G/g;s/I/K/g;s/O/Q/g;s/U/W/g;s/Y/A/g'\
  \ | sed 's/B/D/g;s/F/H/g;s/J/L/g;s/P/R/g;s/V/X/g;s/Z/B/g' | sed 's/C/E/g;s/G/I/g;s/K/M/g;s/Q/S/g;s/W/Y/g;s/A/Z/g'\
  \ | sed 's/D/F/g;s/H/J/g;s/L/N/g;s/R/T/g;s/X/A/g;s/B/C/g' | sed 's/E/G/g;s/I/K/g;s/M/O/g;s/S/U/g;s/Y/W/g;s/Z/X/g'\
  \ | sed 's/F/H/g;s/J/L/g;s/N/P/g;s/T/V/g;s/A/Y/g;s/C/Z/g' | sed 's/G/I/g;s/K/M/g;s/O/Q/g;s/U/X/g;s/W/Z/g;s/X/B/g'\
  \ | sed 's/H/J/g;s/L/N/g;s/P/R/g;s/V/A/g;s/Y/C/g;s/Z/D/g' | sed 's/I/K/g;s/M/O/g;s/Q/S/g;s/X/E/g;s/Z/G/g;s/B/F/g'\
  \ | sed 's/J/L/g;s/N/P/"
- "    # TODO: implement this function\n    echo $1 | tr '[:lower:]' '[:upper:]' |\
  \ tr 'AEIOU' 'CGFKP'"
- "    local -l str=\"$1\"\n    local -l vowels=\"aeiou\"\n    local -l alphabet=\"\
  abcdefghijklmnopqrstuvwxyz\"\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
  \    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
  \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
  \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
  \ -i y=0\n    local -i z=0\n    local -i len=0\n    local -i index=0\n    local\
  \ -i index2=0\n    local -i index3=0\n    local -i index4=0\n    local -i index5=0\n\
  \    local -i index6=0\n    local -i index7=0\n    local -i index8=0\n    local\
  \ -i index9=0\n    local -i index10=0\n    local -i index11=0\n    local -i index12=0\n\
  \    local -i index13=0\n    local -i index14=0\n    local -i index15=0\n    local\
  \ -i index16=0\n    local -i index17=0\n    local -i index18=0\n    local -i index19=0\n\
  \    local -i index20=0\n    local -i index21=0\n    local -i index22=0\n    local\
  \ -i index23=0\n    local -i index24=0\n    local -i index25=0\n    local -i index26=0\n\
  \    local -i index27=0\n    local -i index28=0\n    local -i index29=0\n    local\
  \ -i index30=0\n    local -i index31=0\n    local -i index32=0\n    local -i index33=0\n\
  \    local -i index34=0\n    local -i index35=0\n   "
- '    echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- "    # Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'"
- "    # your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEGIOU' 'CEGKQY'"
- "    # TODO: implement this function\n    echo $1 | tr '[:lower:]' '[:upper:]' |\
  \ tr 'AEIOU' 'CGFKP'"
- "    # TODO: Your code here\n    echo $1 | tr 'a-zA-Z' 'c-za-bC-ZA-B' | tr 'aeiouAEIOU'\
  \ 'cgjkCGNK'"
- "\t# TODO: Write your code here\n\techo \"TODO\""
- '    echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- "    local -a vowels=(a e i o u)\n    local -a vowels_encoded=(c g k m q)\n    local\
  \ -a letters=(a b c d e f g h i j k l m n o p q r s t u v w x y z)\n    local -a\
  \ letters_encoded=(b c d e f g h i j k l m n o p q r s t u v w x y z a)\n    local\
  \ -a message_encoded=()\n    local -a message_encoded_vowels=()\n    local -a message_encoded_letters=()\n\
  \    local -a message_encoded_letters_upper=()\n    local -a message_encoded_letters_lower=()\n\
  \    local -a message_encoded_letters_upper_encoded=()\n    local -a message_encoded_letters_lower_encoded=()\n\
  \    local -a message_encoded_letters_encoded=()\n    local -a message_encoded_letters_encoded_upper=()\n\
  \    local -a message_encoded_letters_encoded_lower=()\n    local -a message_encoded_letters_encoded_upper_encoded=()\n\
  \    local -a message_encoded_letters_encoded_lower_encoded=()\n    local -a message_encoded_letters_encoded_upper_encoded_encoded=()\n\
  \    local -a message_encoded_letters_encoded_lower_encoded_encoded=()\n    local\
  \ -a message_encoded_letters_encoded_encoded=()\n    local -a message_encoded_letters_encoded_encoded_encoded=()\n\
  \    local -a message_encoded_letters_encoded_encoded_encoded_encoded=()\n    local\
  \ -a message_encoded_letters_encoded_encoded_encoded_encoded_encoded=()\n    local\
  \ -a message_encoded_letters_encoded_encoded_encoded_encoded_encoded_encoded=()\n\
  \    local -a message_encoded_letters_encoded_encoded_encoded_encoded_encoded_encoded_encoded=()\n\
  \    local -"
- '    echo "$1" | tr ''[:lower:]'' ''[:upper:]'' | tr ''AEIOU'' ''CGFKP'''
- "\t# TODO: Your code here\n\techo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'"
language: sh
name: HumanEval_93_encode
prompt: "#!/bin/bash\n# Write a function that takes a message, and encodes in such\
  \ a \n# way that it swaps case of all letters, replaces all vowels in \n# the message\
  \ with the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
  \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\n#\n# $1 is a string\nencode()\
  \ {\n"
stop_tokens:
- '

  }'
tests: "}\n\ncandidate() {\n    encode \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"TEST\") = \"tgst\" ]]\n    [[ $(candidate \"Mudasir\") = \"mWDCSKR\" ]]\n  \
  \  [[ $(candidate \"YES\") = \"ygs\" ]]\n    [[ $(candidate \"This is a message\"\
  ) = \"tHKS KS C MGSSCGG\" ]]\n    [[ $(candidate \"I DoNt KnOw WhAt tO WrItE\")\
  \ = \"k dQnT kNqW wHcT Tq wRkTg\" ]]\n}\n\nrun_test"
