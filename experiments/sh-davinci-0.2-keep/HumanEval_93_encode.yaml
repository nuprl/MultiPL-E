name: HumanEval_93_encode
language: humaneval_to_bash.py
prompt: "#!/bin/bash\n# Write a function that takes a message, and encodes in such\
  \ a \n# way that it swaps case of all letters, replaces all vowels in \n# the message\
  \ with the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
  \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\n#\n# $1 is a string\nencode()\
  \ {\n"
tests: "}\n\ncandidate() {\n    encode \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"TEST\") = \"tgst\" ]]\n    [[ $(candidate \"Mudasir\") = \"mWDCSKR\" ]]\n  \
  \  [[ $(candidate \"YES\") = \"ygs\" ]]\n    [[ $(candidate \"This is a message\"\
  ) = \"tHKS KS C MGSSCGG\" ]]\n    [[ $(candidate \"I DoNt KnOw WhAt tO WrItE\")\
  \ = \"k dQnT kNqW wHcT Tq wRkTg\" ]]\n}\n\nrun_test"
completions: ["    # TODO: Implement this function\n    # Hint: Use tr, sed, and awk\n\
    \    echo $1 | tr '[:lower:]' '[:upper:]' | sed 's/[AEIOU]/\\U&/g' | sed 's/A/C/g'\
    \ | sed 's/E/G/g' | sed 's/I/K/g' | sed 's/O/M/g' | sed 's/U/W/g' | sed 's/B/D/g'\
    \ | sed 's/F/H/g' | sed 's/J/L/g' | sed 's/N/P/g' | sed 's/R/T/g' | sed 's/V/X/g'\
    \ | sed 's/Z/B/g' | sed 's/C/E/g' | sed 's/G/I/g' | sed 's/K/O/g' | sed 's/M/Q/g'\
    \ | sed 's/W/Y/g' | sed 's/D/F/g' | sed 's/H/J/g' | sed 's/L/N/g' | sed 's/P/R/g'\
    \ | sed 's/T/V/g' | sed 's/X/Z/g' | tr '[:upper:]' '[:lower:]'", "    # TODO:\
    \ Write your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
    \ 'CGFKP'", "    # TODO: your code here\n    echo \"TODO\"", "    # TODO: Your\
    \ code here\n    # Hint: You can use the tr command to swap case\n    # Hint:\
    \ You can use the tr command to replace characters\n    # Hint: You can use the\
    \ tr command to remove characters\n    # Hint: You can use the tr command to replace\
    \ characters with a range\n    # Hint: You can use the tr command to replace characters\
    \ with a string\n    # Hint: You can use the echo command to get the ASCII value\
    \ of a character\n    # Hint: You can use the expr command to do arithmetic\n\
    \    # Hint: You can use the printf command to convert an ASCII value to a character\n\
    \    # Hint: You can use the printf command to convert a character to an ASCII\
    \ value\n    # Hint: You can use the printf command to convert a number to a string\n\
    \    # Hint: You can use the printf command to convert a string to a number\n\
    \    # Hint: You can use the printf command to convert a number to a hexadecimal\
    \ string\n    # Hint: You can use the printf command to convert a hexadecimal\
    \ string to a number\n    # Hint: You can use the printf command to convert a\
    \ number to an octal string\n    # Hint: You can use the printf command to convert\
    \ an octal string to a number\n    # Hint: You can use the printf command to convert\
    \ a number to a binary string\n    # Hint: You can use the printf command to convert\
    \ a binary string to a number\n    # Hint: You can use the printf command to convert\
    \ a number to a base-36 string\n    # Hint: You can use the printf command to\
    \ convert a base-36 string to a number\n    # Hint: You can use the printf command\
    \ to convert a number to a base-64 string\n    # Hint: You can use the printf\
    \ command to convert a base-64 string to a number\n    # Hint: You can use the\
    \ printf command to convert a number to a base-85 string\n    # Hint: You can\
    \ use the printf command to convert a base-85 string to a number\n    # Hint:\
    \ You can use the printf command to convert a number to a base-256 string\n  \
    \  # Hint: You can use the printf command to convert a base-256 string to a number\n\
    \    # Hint", "    # TODO: Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]'\
    \ | tr 'AEIOU' 'CGFKP'", "    local input=$1\n    local output=\"\"\n    local\
    \ vowels=\"aeiou\"\n    local vowels_upper=\"AEIOU\"\n    local vowels_encoded=\"\
    cfilorux\"\n    local vowels_encoded_upper=\"CFILORUX\"\n    local i=0\n    local\
    \ char=\"\"\n    local char_upper=\"\"\n    local char_encoded=\"\"\n    local\
    \ char_encoded_upper=\"\"\n    local char_index=0\n    local char_encoded_index=0\n\
    \    local char_encoded_upper_index=0\n    local char_upper_index=0\n    local\
    \ char_upper_encoded_index=0\n    local char_upper_encoded_upper_index=0\n   \
    \ local char_upper_encoded=\"\"\n    local char_upper_encoded_upper=\"\"\n   \
    \ local char_upper_encoded_upper_index=0\n    local char_upper_encoded_index=0\n\
    \    local char_upper_index=0\n    local char_upper_encoded_upper_index=0\n  \
    \  local char_upper_encoded_upper=\"\"\n    local char_upper_encoded=\"\"\n  \
    \  local char_upper_index=0\n    local char_upper_encoded_index=0\n    local char_upper_encoded_upper_index=0\n\
    \    local char_upper_encoded_upper=\"\"\n    local char_upper_encoded=\"\"\n\
    \    local char_upper_index=0\n    local char_upper_encoded_index=0\n    local\
    \ char_upper_encoded_upper_index=0\n    local char_upper_encoded_upper=\"\"\n\
    \    local char_upper_encoded=\"\"\n    local char_upper_index=0\n    local char_upper_encoded_index=0\n\
    \    local char_upper_encoded_upper_index=0\n    local char_upper_encoded_upper=\"\
    \"\n    local char_upper_encoded=\"\"\n    local char_upper_index=0\n    local\
    \ char_upper_encoded_index=0\n    local char_upper_encoded_upper_index=0\n   \
    \ local char_upper_encoded_upper=\"\"\n    local char_upper_encoded=\"\"\n   \
    \ local char_upper", "    echo \"$1\" | tr 'a-zA-Z' 'c-za-bC-ZA-B' | tr 'aeiou'\
    \ 'cgkos'", "    # Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' |\
    \ tr 'AEIOU' 'CGFKP'", "    # Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]'\
    \ | tr 'AEIOU' 'CGFKP'", "    # TODO: Your code here\n    echo $1 | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEIOU' 'CGKOS'", "    echo $1 | tr '[:lower:]' '[:upper:]'\
    \ | tr 'AEIOU' 'CGFKP'", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEGIOU'\
    \ 'CFLRTZ'", "    # TODO: Implement this function\n    # Hint: You can use the\
    \ tr command to swap case\n    # Hint: You can use the tr command to replace characters\n\
    \    # Hint: You can use the awk command to get the character 2 places ahead\n\
    \    # Hint: You can use the modulus operator to wrap around the alphabet\n  \
    \  # Hint: You can use the ord function to get the ASCII value of a character\n\
    \    # Hint: You can use the chr function to get the character from an ASCII value\n\
    \    # Hint: You can use the echo command to print a string\n    # Hint: You can\
    \ use the seq command to generate a sequence of numbers\n    # Hint: You can use\
    \ the paste command to paste together multiple strings\n    # Hint: You can use\
    \ the tr command to delete characters\n    # Hint: You can use the fold command\
    \ to wrap lines\n    # Hint: You can use the rev command to reverse a string\n\
    \    # Hint: You can use the sort command to sort lines\n    # Hint: You can use\
    \ the uniq command to remove duplicate lines\n    # Hint: You can use the wc command\
    \ to count lines\n    # Hint: You can use the head command to get the first line\n\
    \    # Hint: You can use the tail command to get all but the first line\n    #\
    \ Hint: You can use the cut command to get a substring\n    # Hint: You can use\
    \ the expr command to do arithmetic\n    # Hint: You can use the bc command to\
    \ do arithmetic\n    # Hint: You can use the read command to read a line of input\n\
    \    # Hint: You can use the read command to read a character of input\n    #\
    \ Hint: You can use the read command to read a word of input\n    # Hint: You\
    \ can use the read command to read a line of input into an array\n    # Hint:\
    \ You can use the read command to read a line of input into a variable\n    #\
    \ Hint: You can use the read command to read a word of input into a variable\n\
    \    # Hint: You can use the read command to read a character of input into a\
    \ variable\n    # Hint: You can use the read command to read a line of input into\
    \ a variable and an array\n    # H", "    echo $1 | tr '[:lower:]' '[:upper:]'\
    \ | tr 'AEIOU' 'CGFKP'", "    # TODO: Your code here\n    # Hint: You can use\
    \ the tr command to swap case\n    # Hint: You can use the tr command to replace\
    \ characters\n    # Hint: You can use the tr command to delete characters\n  \
    \  # Hint: You can use the echo command to print a string\n    # Hint: You can\
    \ use the expr command to do arithmetic\n    # Hint: You can use the ord command\
    \ to get the ASCII value of a character\n    # Hint: You can use the chr command\
    \ to get the character of an ASCII value\n    # Hint: You can use the echo command\
    \ to print a string\n    # Hint: You can use the expr command to do arithmetic\n\
    \    # Hint: You can use the ord command to get the ASCII value of a character\n\
    \    # Hint: You can use the chr command to get the character of an ASCII value\n\
    \    # Hint: You can use the echo command to print a string\n    # Hint: You can\
    \ use the expr command to do arithmetic\n    # Hint: You can use the ord command\
    \ to get the ASCII value of a character\n    # Hint: You can use the chr command\
    \ to get the character of an ASCII value\n    # Hint: You can use the echo command\
    \ to print a string\n    # Hint: You can use the expr command to do arithmetic\n\
    \    # Hint: You can use the ord command to get the ASCII value of a character\n\
    \    # Hint: You can use the chr command to get the character of an ASCII value\n\
    \    # Hint: You can use the echo command to print a string\n    # Hint: You can\
    \ use the expr command to do arithmetic\n    # Hint: You can use the ord command\
    \ to get the ASCII value of a character\n    # Hint: You can use the chr command\
    \ to get the character of an ASCII value\n    # Hint: You can use the echo command\
    \ to print a string\n    # Hint: You can use the expr command to do arithmetic\n\
    \    # Hint: You can use the ord command to get the ASCII value of a character\n\
    \    # Hint: You can use the chr command to get the character of an ASCII value\n\
    \    # Hint: You can use the echo command to print a string\n    # Hint: You can\
    \ use the", "    # TODO: Implement this function\n    # Hint: You can use the\
    \ tr command to swap case\n    # Hint: You can use the tr command to replace characters\n\
    \    # Hint: You can use the tr command to delete characters\n    # Hint: You\
    \ can use the echo command to print a string\n    # Hint: You can use the expr\
    \ command to perform arithmetic\n    # Hint: You can use the seq command to generate\
    \ a sequence\n    # Hint: You can use the fold command to wrap text\n    # Hint:\
    \ You can use the wc command to count words\n    # Hint: You can use the cut command\
    \ to extract columns\n    # Hint: You can use the sort command to sort lines\n\
    \    # Hint: You can use the uniq command to remove duplicates\n    # Hint: You\
    \ can use the head command to get the first line\n    # Hint: You can use the\
    \ tail command to get the last line\n    # Hint: You can use the tr command to\
    \ replace characters\n    # Hint: You can use the tr command to delete characters\n\
    \    # Hint: You can use the echo command to print a string\n    # Hint: You can\
    \ use the expr command to perform arithmetic\n    # Hint: You can use the seq\
    \ command to generate a sequence\n    # Hint: You can use the fold command to\
    \ wrap text\n    # Hint: You can use the wc command to count words\n    # Hint:\
    \ You can use the cut command to extract columns\n    # Hint: You can use the\
    \ sort command to sort lines\n    # Hint: You can use the uniq command to remove\
    \ duplicates\n    # Hint: You can use the head command to get the first line\n\
    \    # Hint: You can use the tail command to get the last line\n    # Hint: You\
    \ can use the tr command to replace characters\n    # Hint: You can use the tr\
    \ command to delete characters\n    # Hint: You can use the echo command to print\
    \ a string\n    # Hint: You can use the expr command to perform arithmetic\n \
    \   # Hint: You can use the seq command to generate a sequence\n    # Hint: You\
    \ can use the fold command to wrap text\n    # Hint: You can use the wc command\
    \ to count words\n   ", "    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEGIOU'\
    \ 'CFKPRS'", "    # TODO\n    echo \"TODO\"", "    # TODO: Your code here\n  \
    \  # Hint: You can use the tr command to translate characters\n    #       e.g.\
    \ tr '[:lower:]' '[:upper:]'\n    #       See man tr for more info\n    #    \
    \   You can also use the modulo operator to wrap around\n    #       the alphabet.\
    \ e.g. ((i % 26))\n    #       See http://tldp.org/LDP/abs/html/arithexp.html\
    \ for more info\n    #       You can also use the case statement to match on a\
    \ pattern\n    #       See http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html\n\
    \    #       for more info\n    #       You can also use the echo -n command to\
    \ print without a newline\n    #       See http://stackoverflow.com/questions/1167746/how-to-redirect-output-to-a-file-and-stdout\
    \ for more info\n    #       You can also use the echo -e command to interpret\
    \ escape sequences\n    #       See http://stackoverflow.com/questions/1527049/bash-join-elements-of-an-array\
    \ for more info\n    #       You can also use the echo -n command to print without\
    \ a newline\n    #       See http://stackoverflow.com/questions/1167746/how-to-redirect-output-to-a-file-and-stdout\
    \ for more info\n    #       You can also use the echo -e command to interpret\
    \ escape sequences\n    #       See http://stackoverflow.com/questions/1527049/bash-join-elements-of-an-array\
    \ for more info\n    #       You can also use the echo -n command to print without\
    \ a newline\n    #       See http://stackoverflow.com/questions/1167746/how-to-redirect-output-to-a-file-and-stdout\
    \ for more info\n    #       You can also use the echo -e command to interpret\
    \ escape sequences\n    #       See http://stackoverflow.com/questions/1527049/bash-join-elements-of-an-array\
    \ for more info\n    #       You", "    # TODO: Your code here\n    echo $1 |\
    \ tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'"]
stop_tokens:
- "\n}"
