language: sh
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local n=${#arr[@]}\n    local i j\n    for ((i=0; i<n; i++));\
    \ do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]}\
    \ ]]; then\n                local tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n\
    \            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a max\n    local i\n    local j\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n    done\n    for ((i=k;\
    \ i<len; i++)); do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n                break\n\
    \            fi\n        done\n    done\n    echo ${max[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdw0f_5yt.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local i=0\n    local j=0\n    local tmp=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]}\
    \ \"\n    done\n    echo\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local k=$2\n    local -a max_arr\n    local max_num\n    local max_index\n\
    \    local i\n    local j\n    local len=${#arr[@]}\n    for ((i=0; i<k; i++));\
    \ do\n        max_num=${arr[0]}\n        max_index=0\n        for ((j=1; j<len-i;\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max_num ]]; then\n             \
    \   max_num=${arr[j]}\n                max_index=$j\n            fi\n        done\n\
    \        max_arr[i]=$max_num\n        arr[max_index]=${arr[len-i-1]}\n    done\n\
    \    echo ${max_arr[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3ecatqk8.sh: line 33: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a result\n    for ((i=0; i<k; i++)); do\n        local\
    \ max=${arr[0]}\n        local max_index=0\n        for ((j=1; j<${#arr[@]}; j++));\
    \ do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        result+=($max)\n\
    \        unset arr[$max_index]\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0nh4g8u0.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=$2\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i max=0\n    local -i max_idx=0\n    local -i tmp=0\n    local -a\
    \ res=()\n\n    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_idx=0\n\
    \        for ((j=1; j<n-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]];\
    \ then\n                max=${arr[j]}\n                max_idx=$j\n          \
    \  fi\n        done\n        res+=($max)\n        tmp=${arr[n-i-1]}\n        arr[n-i-1]=$max\n\
    \        arr[max_idx]=$tmp\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp015c_g8t.sh: line 32: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ temp=0\n    local max=0\n    local max_idx=0\n    local result=()\n    for ((i=0;\
    \ i<k; i++)); do\n        max=${arr[0]}\n        max_idx=0\n        for ((j=1;\
    \ j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n        \
    \        max=${arr[j]}\n                max_idx=$j\n            fi\n        done\n\
    \        result[i]=$max\n        temp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n\
    \        arr[max_idx]=$temp\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n\
    \            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]}\
    \ \"\n    done\n    echo\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local i=0\n    local j=0\n    local tmp=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local k=$2\n    local -a max\n    local -a max_index\n    local -a\
    \ max_index_new\n    local -a max_new\n    local -a max_index_tmp\n    local -a\
    \ max_tmp\n    local -a max_index_tmp2\n    local -a max_tmp2\n    local -a max_index_tmp3\n\
    \    local -a max_tmp3\n    local -a max_index_tmp4\n    local -a max_tmp4\n \
    \   local -a max_index_tmp5\n    local -a max_tmp5\n    local -a max_index_tmp6\n\
    \    local -a max_tmp6\n    local -a max_index_tmp7\n    local -a max_tmp7\n \
    \   local -a max_index_tmp8\n    local -a max_tmp8\n    local -a max_index_tmp9\n\
    \    local -a max_tmp9\n    local -a max_index_tmp10\n    local -a max_tmp10\n\
    \    local -a max_index_tmp11\n    local -a max_tmp11\n    local -a max_index_tmp12\n\
    \    local -a max_tmp12\n    local -a max_index_tmp13\n    local -a max_tmp13\n\
    \    local -a max_index_tmp14\n    local -a max_tmp14\n    local -a max_index_tmp15\n\
    \    local -a max_tmp15\n    local -a max_index_tmp16\n    local -a max_tmp16\n\
    \    local -a max_index_tmp17\n    local -a max_tmp17\n    local -a max_index_tmp18\n\
    \    local -a max_tmp18\n    local -a max_index_tmp19\n    local -a max_tmp19\n\
    \    local -a max_index_tmp20\n    local -a max_tmp20\n    local -a max_index_tmp21\n\
    \    local -a max_tmp21\n    local -a max_index_tmp22\n    local -a max_tmp22\n\
    \    local -a max_index_tmp23\n    local -a max_tmp23\n    local -a\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i n=${#arr[@]}\n    local -i m=${2:-1}\n    for ((i=0; i<n; i++));\
    \ do\n        for ((j=0; j<m; j++)); do\n            if [[ $i -eq 0 ]]; then\n\
    \                max[$j]=${arr[$i]}\n            elif [[ ${arr[$i]} -gt ${max[$j]}\
    \ ]]; then\n                for ((k=m-1; k>j; k--)); do\n                    max[$k]=${max[$k-1]}\n\
    \                done\n                max[$j]=${arr[$i]}\n                break\n\
    \            fi\n        done\n    done\n    echo ${max[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpry3j2vwi.sh: line 32: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    /tmp/tmpry3j2vwi.sh: line 32: [[: -3 -4 5: syntax error in expression (error token
    is "5")

    /tmp/tmpry3j2vwi.sh: line 32: [[: -3 -4 5: syntax error in expression (error token
    is "5")

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max=()\n    for ((i=0; i<k; i++)); do\n        max[$i]=${arr[$i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[$i]} -gt ${max[$j]} ]]; then\n                max[$j]=${arr[$i]}\n\
    \                break\n            fi\n        done\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i\
    \ max_index\n    local -i temp\n    arr=($1)\n    k=$2\n    for ((i=0; i<k; i++));\
    \ do\n        max=${arr[i]}\n        max_index=$i\n        for ((j=i+1; j<${#arr[@]};\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        temp=${arr[i]}\n\
    \        arr[i]=${arr[max_index]}\n        arr[max_index]=$temp\n    done\n  \
    \  echo ${arr[@]:0:k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local max=0\n    local max_idx=0\n    local result=()\n    for ((i=0;\
    \ i<k; i++)); do\n        max=${arr[0]}\n        max_idx=0\n        for ((j=1;\
    \ j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n        \
    \        max=${arr[j]}\n                max_idx=$j\n            fi\n        done\n\
    \        result[i]=$max\n        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n\
    \        arr[max_idx]=$tmp\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local max=0\n    local max_idx=0\n    local result=()\n    for ((i=0;\
    \ i<k; i++)); do\n        max=${arr[0]}\n        max_idx=0\n        for ((j=1;\
    \ j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n        \
    \        max=${arr[j]}\n                max_idx=$j\n            fi\n        done\n\
    \        result[i]=$max\n        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n\
    \        arr[max_idx]=$tmp\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    for ((i=0; i<k; i++)); do\n        for ((j=i+1; j<len; j++)); do\n\
    \            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo \"${arr[@]:0:k}\"\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local k=${arr[-1]}\n    unset arr[-1]\n    local -a result=()\n   \
    \ local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    local -i max=0\n\
    \    local -i max_index=0\n    while ((i < k)); do\n        max=${arr[0]}\n  \
    \      max_index=0\n        for ((j=1; j<len; j++)); do\n            if ((arr[j]\
    \ > max)); then\n                max=${arr[j]}\n                max_index=j\n\
    \            fi\n        done\n        result+=($max)\n        unset arr[max_index]\n\
    \        ((i++))\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdunkcqbm.sh: line 31: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a max\n    local i\n    for ((i=0; i<k; i++)); do\n\
    \        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n\
    \        local j\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${max[j]} ]]; then\n                local tmp=${max[j]}\n              \
    \  max[j]=${arr[i]}\n                arr[i]=$tmp\n            fi\n        done\n\
    \    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphe59rcch.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local i=0\n    local j=0\n    local max=0\n    local max_index=0\n\
    \    local tmp=0\n    local result=()\n    for ((i=0; i<k; i++)); do\n       \
    \ max=${arr[0]}\n        max_index=0\n        for ((j=1; j<${#arr[@]}; j++));\
    \ do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        result[i]=$max\n\
    \        arr[max_index]=$((-1*${arr[max_index]}))\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    IFS=' ' read -r -a arr <<< \"$1\"\n    local k=$2\n    local -a max\n   \
    \ local i\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n    done\n\
    \    for ((i=k; i<${#arr[@]}; i++)); do\n        local j\n        for ((j=0; j<k;\
    \ j++)); do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n            \
    \    local t=${max[j]}\n                max[j]=${arr[i]}\n                arr[i]=$t\n\
    \            fi\n        done\n    done\n    echo \"${max[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i tmp=0\n  \
    \  local -i len=0\n    local -i max=0\n    local -i max_i=0\n    local -i max_j=0\n\
    \    local -i max_k=0\n    local -i max_l=0\n    local -i max_m=0\n    local -i\
    \ max_n=0\n    local -i max_o=0\n    local -i max_p=0\n    local -i max_q=0\n\
    \    local -i max_r=0\n    local -i max_s=0\n    local -i max_t=0\n    local -i\
    \ max_u=0\n    local -i max_v=0\n    local -i max_w=0\n    local -i max_x=0\n\
    \    local -i max_y=0\n    local -i max_z=0\n    local -i max_aa=0\n    local\
    \ -i max_ab=0\n    local -i max_ac=0\n    local -i max_ad=0\n    local -i max_ae=0\n\
    \    local -i max_af=0\n    local -i max_ag=0\n    local -i max_ah=0\n    local\
    \ -i max_ai=0\n    local -i max_aj=0\n    local -i max_ak=0\n    local -i max_al=0\n\
    \    local -i max_am=0\n    local -i max_an=0\n    local -i max_ao=0\n    local\
    \ -i max_ap=0\n    local -i max_aq=0\n    local -i max_ar=0\n    local -i max_as=0\n\
    \    local -i max_at=0\n    local -i max_au=0\n    local -i max_av=0\n    local\
    \ -i max_aw=0\n    local -i max_ax=0\n    local -i max_ay=0\n    local -i max_az=0\n\
    \    local -i max_ba=0\n    local -i max\n}\n\ncandidate() {\n    maximum \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local k=$2\n    local -a max\n    local -a max_index\n    local -a\
    \ max_value\n    local -a max_index_value\n    local -a max_index_value_index\n\
    \    local -a max_index_value_index_value\n    local -a max_index_value_index_value_index\n\
    \    local -a max_index_value_index_value_index_value\n    local -a max_index_value_index_value_index_value_index\n\
    \    local -a max_index_value_index_value_index_value_index_value\n    local -a\
    \ max_index_value_index_value_index_value_index_value_index\n    local -a max_index_value_index_value_index_value_index_value_index_value\n\
    \    local -a max_index_value_index_value_index_value_index_value_index_value_index\n\
    \    local -a max_index_value_index_value_index_value_index_value_index_value_index_value\n\
    \    local -a max_index_value_index_value_index_value_index_value_index_value_index_value_index\n\
    \    local -a max_index_value_index_value_index_value_index_value_index_value_index_value_index_value\n\
    \    local -a max_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index\n\
    \    local -a max_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\n\
    \    local -a max_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index\n\
    \    local -a max_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\n\
    \    local -a max_index_value_index_value_index_value_index_value_index_value_index_value_\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local k=\"$2\"\n    local -a max=()\n    local i=0\n    local j=0\n\
    \    local len=${#arr[@]}\n    local max_len=0\n    local max_index=0\n    local\
    \ max_value=0\n    local value=0\n    # find the max k numbers\n    for (( i=0;\
    \ i<k; i++ )); do\n        max_value=${arr[0]}\n        max_index=0\n        for\
    \ (( j=1; j<len; j++ )); do\n            value=${arr[j]}\n            if (( value\
    \ > max_value )); then\n                max_value=$value\n                max_index=$j\n\
    \            fi\n        done\n        max[$i]=$max_value\n        arr[$max_index]=0\n\
    \    done\n    # sort the max k numbers\n    max_len=${#max[@]}\n    for (( i=0;\
    \ i<max_len; i++ )); do\n        max_value=${max[0]}\n        max_index=0\n  \
    \      for (( j=1; j<max_len; j++ )); do\n            value=${max[j]}\n      \
    \      if (( value > max_value )); then\n                max_value=$value\n  \
    \              max_index=$j\n            fi\n        done\n        echo -n \"\
    $max_value \"\n        max[$max_index]=0\n    done\n    echo\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjcus26a4.sh: line 37: ((: -3 -4 5: syntax error in expression (error
    token is "5")

    /tmp/tmpjcus26a4.sh: line 52: ((: -3 -4 5: syntax error in expression (error token
    is "5")

    /tmp/tmpjcus26a4.sh: line 52: ((: -3 -4 5: syntax error in expression (error token
    is "5")

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local k=$2\n    local -a max=()\n    local -a max_index=()\n    local\
    \ -a max_index_sorted=()\n    local -a max_sorted=()\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n\
    \    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n \
    \   local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n  \
    \  local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n\
    \    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n\
    \    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n\
    \    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n\
    \    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n\
    \    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n\
    \    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local\
    \ hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n\
    \    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local\
    \ qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n\
    \    local vvv=0\n    local www=0\n    local xxx=0\n    local yyy=\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a max\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n                for\
    \ ((l=k-1; l>j; l--)); do\n                    max[l]=${max[l-1]}\n          \
    \      done\n                max[j]=${arr[i]}\n                break\n       \
    \     fi\n        done\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n   \
    \ maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"\
    3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n   \
    \ [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"\
    123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20\
    \ 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\"\
    \ \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"\
    2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10\
    \ 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpe3wqcia2.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i\
    \ max_i\n    local -i tmp\n    local -i len\n    local -i start\n    local -i\
    \ end\n    local -i mid\n    local -i mid_val\n    local -i val\n    arr=($1)\n\
    \    k=$2\n    len=${#arr[@]}\n    if [ $k -ge $len ]; then\n        echo \"${arr[@]}\"\
    \n        return\n    fi\n    for ((i=0; i<k; i++)); do\n        max=${arr[i]}\n\
    \        max_i=$i\n        for ((j=i+1; j<len; j++)); do\n            if [ ${arr[j]}\
    \ -gt $max ]; then\n                max=${arr[j]}\n                max_i=$j\n\
    \            fi\n        done\n        tmp=${arr[i]}\n        arr[i]=${arr[max_i]}\n\
    \        arr[max_i]=$tmp\n    done\n    echo \"${arr[@]:0:k}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=(\"$@\"\
    )\n    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n  \
    \  local temp=0\n    local max=0\n    local result=()\n    for ((i=0; i<len; i++));\
    \ do\n        max=${arr[i]}\n        for ((j=i+1; j<len; j++)); do\n         \
    \   if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n       \
    \         temp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$temp\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   result[i]=${arr[i]}\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1wlut_4h.sh: line 32: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=(\"$@\"\
    )\n    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n  \
    \  local tmp=0\n    local max=0\n    local max_idx=0\n    local result=()\n  \
    \  for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_idx=0\n     \
    \   for ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n\
    \                max=${arr[j]}\n                max_idx=$j\n            fi\n \
    \       done\n        result[i]=$max\n        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n\
    \        arr[max_idx]=$tmp\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpso37jurp.sh: line 34: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a max\n    local i\n    for ((i=0; i<k; i++)); do\n\
    \        max[$i]=${arr[$i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n\
    \        local j\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[$i]}\
    \ -gt ${max[$j]} ]]; then\n                local t=${max[$j]}\n              \
    \  max[$j]=${arr[$i]}\n                arr[$i]=$t\n            fi\n        done\n\
    \    done\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcecuf3mm.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ temp=0\n    local max=0\n    local max_index=0\n    local result=()\n    for\
    \ ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_index=0\n        for\
    \ ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n \
    \               max=${arr[j]}\n                max_index=$j\n            fi\n\
    \        done\n        result[i]=$max\n        temp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n\
    \        arr[max_index]=$temp\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max_arr=()\n    local max_arr_len=0\n    local i=0\n\
    \    local j=0\n    local len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n  \
    \      if [[ $max_arr_len -eq 0 ]]; then\n            max_arr[$max_arr_len]=${arr[$i]}\n\
    \            ((max_arr_len++))\n        else\n            for ((j=0; j<max_arr_len;\
    \ j++)); do\n                if [[ ${arr[$i]} -gt ${max_arr[$j]} ]]; then\n  \
    \                  max_arr[$j]=${arr[$i]}\n                    break\n       \
    \         fi\n            done\n            if [[ $j -eq $max_arr_len ]]; then\n\
    \                max_arr[$max_arr_len]=${arr[$i]}\n                ((max_arr_len++))\n\
    \            fi\n        fi\n        if [[ $max_arr_len -gt $k ]]; then\n    \
    \        ((max_arr_len--))\n        fi\n    done\n    echo ${max_arr[@]}\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a max\n    local i\n    for ((i=0; i<k; i++)); do\n\
    \        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n\
    \        local j\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${max[j]} ]]; then\n                local t=${max[j]}\n                max[j]=${arr[i]}\n\
    \                arr[i]=$t\n            fi\n        done\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfvgkr0jq.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=$2\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i max=0\n    local -i max_index=0\n    local -i temp=0\n    local\
    \ -a result=()\n\n    if [ $k -gt $n ]; then\n        k=$n\n    fi\n\n    for\
    \ ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_index=0\n        for\
    \ ((j=1; j<n-i; j++)); do\n            if [ ${arr[j]} -gt $max ]; then\n     \
    \           max=${arr[j]}\n                max_index=$j\n            fi\n    \
    \    done\n        result[i]=$max\n        temp=${arr[n-i-1]}\n        arr[n-i-1]=$max\n\
    \        arr[max_index]=$temp\n    done\n\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1izsyo4r.sh: line 36: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n\
    \            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local i=0\n    local j=0\n    local tmp=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local k=$2\n    local -a result=()\n    local i=0\n    local j=0\n\
    \    local max=0\n    local max_index=0\n    local len=${#arr[@]}\n    if [[ $k\
    \ -gt $len ]]; then\n        k=$len\n    fi\n    for ((i=0; i<k; i++)); do\n \
    \       max=${arr[0]}\n        max_index=0\n        for ((j=1; j<len-i; j++));\
    \ do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        result+=($max)\n\
    \        arr[$max_index]=${arr[$len-i-1]}\n    done\n    echo ${result[@]}\n}\n\
    \ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_2br0r8f.sh: line 36: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=(\"$@\"\
    )\n    local k=$2\n    local i=0\n    local j=0\n    local max=0\n    local max_index=0\n\
    \    local tmp=0\n    local result=()\n    for ((i=0; i<k; i++)); do\n       \
    \ max=${arr[0]}\n        max_index=0\n        for ((j=1; j<${#arr[@]}; j++));\
    \ do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        result[i]=$max\n\
    \        unset arr[$max_index]\n        arr=(\"${arr[@]}\")\n    done\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbsyher23.sh: line 33: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ temp=0\n    local max=0\n    local max_index=0\n    local result=()\n    for\
    \ ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_index=0\n        for\
    \ ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n \
    \               max=${arr[j]}\n                max_index=$j\n            fi\n\
    \        done\n        result[i]=$max\n        temp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n\
    \        arr[max_index]=$temp\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i tmp=0\n  \
    \  local -i len=0\n    local -i max=0\n    local -i max_i=0\n    local -i max_j=0\n\
    \    local -i max_tmp=0\n    local -i max_len=0\n    local -i max_max=0\n    local\
    \ -i max_max_i=0\n    local -i max_max_j=0\n    local -i max_max_tmp=0\n    local\
    \ -i max_max_len=0\n    local -i max_max_max=0\n    local -i max_max_max_i=0\n\
    \    local -i max_max_max_j=0\n    local -i max_max_max_tmp=0\n    local -i max_max_max_len=0\n\
    \    local -i max_max_max_max=0\n    local -i max_max_max_max_i=0\n    local -i\
    \ max_max_max_max_j=0\n    local -i max_max_max_max_tmp=0\n    local -i max_max_max_max_len=0\n\
    \    local -i max_max_max_max_max=0\n    local -i max_max_max_max_max_i=0\n  \
    \  local -i max_max_max_max_max_j=0\n    local -i max_max_max_max_max_tmp=0\n\
    \    local -i max_max_max_max_max_len=0\n    local -i max_max_max_max_max_max=0\n\
    \    local -i max_max_max_max_max_max_i=0\n    local -i max_max_max_max_max_max_j=0\n\
    \    local -i max_max_max_max_max_max_tmp=0\n    local -i max_max_max_max_max_max_len=0\n\
    \    local -i max_max_max_max_max_max_max=0\n    local -i max\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max=()\n    local max_len=0\n    local i=0\n    local\
    \ j=0\n    local len=${#arr[@]}\n    local tmp=0\n    local tmp_len=0\n    local\
    \ tmp_max=()\n    for ((i=0; i<len; i++)); do\n        tmp=${arr[i]}\n       \
    \ tmp_len=${#tmp_max[@]}\n        if [[ $tmp_len -eq 0 ]]; then\n            tmp_max=($tmp)\n\
    \        else\n            for ((j=0; j<tmp_len; j++)); do\n                if\
    \ [[ $tmp -gt ${tmp_max[j]} ]]; then\n                    tmp_max=(${tmp_max[@]:0:j}\
    \ $tmp ${tmp_max[@]:j})\n                    break\n                fi\n     \
    \       done\n            if [[ $j -eq $tmp_len ]]; then\n                tmp_max=(${tmp_max[@]}\
    \ $tmp)\n            fi\n        fi\n        if [[ $tmp_len -eq $k ]]; then\n\
    \            tmp_max=(${tmp_max[@]:1})\n        fi\n        if [[ $tmp_len -gt\
    \ $max_len ]]; then\n            max_len=$tmp_len\n            max=(${tmp_max[@]})\n\
    \        fi\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ temp=0\n    local max=0\n    local max_index=0\n    local result=()\n    for\
    \ ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_index=0\n        for\
    \ ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n \
    \               max=${arr[j]}\n                max_index=$j\n            fi\n\
    \        done\n        result[i]=$max\n        temp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n\
    \        arr[max_index]=$temp\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    while [ $i -lt $k ]; do\n        max[$i]=${arr[$i]}\n        i=$((i+1))\n\
    \    done\n    i=$k\n    while [ $i -lt $len ]; do\n        j=0\n        while\
    \ [ $j -lt $k ]; do\n            if [ ${arr[$i]} -gt ${max[$j]} ]; then\n    \
    \            max[$j]=${arr[$i]}\n                break\n            fi\n     \
    \       j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ temp=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n\
    \        do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]\n            then\n\
    \                temp=${arr[i]}\n                arr[i]=${arr[j]}\n          \
    \      arr[j]=$temp\n            fi\n        done\n    done\n    echo ${arr[@]:0:$k}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n    local\
    \ max=0\n    local max_index=0\n    local tmp=0\n    local result=()\n    for\
    \ ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_index=0\n        for\
    \ ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n \
    \               max=${arr[j]}\n                max_index=$j\n            fi\n\
    \        done\n        result[i]=$max\n        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n\
    \        arr[max_index]=$tmp\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local max_arr=()\n    for ((i=0; i<k; i++)); do\n       \
    \ local max=${arr[0]}\n        local max_index=0\n        for ((j=1; j<${#arr[@]};\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        max_arr+=($max)\n\
    \        unset arr[$max_index]\n    done\n    echo ${max_arr[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1vuww9tj.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n\
    \            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    local max_len=0\n    local max_index=0\n    local max_value=0\n    local\
    \ tmp=0\n    if [ $len -le $k ]; then\n        echo \"${arr[@]}\"\n        return\n\
    \    fi\n    for ((i=0; i<k; i++)); do\n        max[$i]=${arr[$i]}\n    done\n\
    \    max_len=$k\n    for ((i=k; i<len; i++)); do\n        max_value=${max[0]}\n\
    \        max_index=0\n        for ((j=1; j<max_len; j++)); do\n            if\
    \ [ ${max[$j]} -gt $max_value ]; then\n                max_value=${max[$j]}\n\
    \                max_index=$j\n            fi\n        done\n        if [ ${arr[$i]}\
    \ -lt $max_value ]; then\n            max[$max_index]=${arr[$i]}\n        fi\n\
    \    done\n    for ((i=0; i<max_len; i++)); do\n        for ((j=i+1; j<max_len;\
    \ j++)); do\n            if [ ${max[$i]} -lt ${max[$j]} ]; then\n            \
    \    tmp=${max[$i]}\n                max[$i]=${max[$j]}\n                max[$j]=$tmp\n\
    \            fi\n        done\n    done\n    echo \"${max[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local max=0\n    local max_idx=0\n    local result=()\n    for ((i=0;\
    \ i<k; i++)); do\n        max=${arr[0]}\n        max_idx=0\n        for ((j=1;\
    \ j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n        \
    \        max=${arr[j]}\n                max_idx=$j\n            fi\n        done\n\
    \        result[i]=$max\n        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n\
    \        arr[max_idx]=$tmp\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max_arr=()\n    local max_num=-1000\n    local max_index=0\n\
    \    for ((i=0; i<k; i++)); do\n        for ((j=0; j<${#arr[@]}; j++)); do\n \
    \           if [[ ${arr[j]} -gt $max_num ]]; then\n                max_num=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        max_arr+=($max_num)\n\
    \        arr[$max_index]=-1001\n        max_num=-1000\n    done\n    echo ${max_arr[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i\
    \ max_index\n    local -i tmp\n    arr=($1)\n    k=$2\n    for ((i=0; i<k; i++));\
    \ do\n        max=${arr[i]}\n        max_index=$i\n        for ((j=i+1; j<${#arr[@]};\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        tmp=${arr[i]}\n\
    \        arr[i]=${arr[max_index]}\n        arr[max_index]=$tmp\n    done\n   \
    \ echo ${arr[@]:0:k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a max\n    local i\n    for ((i=0; i<k; i++)); do\n\
    \        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n\
    \        local j\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${max[j]} ]]; then\n                local tmp=${max[j]}\n              \
    \  max[j]=${arr[i]}\n                arr[i]=$tmp\n            fi\n        done\n\
    \    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphe59rcch.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local i j\n    for ((i=0; i<k; i++)); do\n        for ((j=i+1;\
    \ j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n\
    \                local tmp=${arr[i]}\n                arr[i]=${arr[j]}\n     \
    \           arr[j]=$tmp\n            fi\n        done\n    done\n    echo ${arr[@]:0:k}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptpr8xjny.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n\
    \            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]}\
    \ \"\n    done\n    echo\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    # Sort the list\
    \ in descending order\n    local sorted=($(echo \"$1\" | tr ' ' '\\n' | sort -nr))\n\
    \    # Return the first $2 elements\n    echo \"${sorted[@]:0:$2}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local k=$2\n    local -a max=()\n    local -a min=()\n    local i=0\n\
    \    local j=0\n    local len=${#arr[@]}\n    local max_len=0\n    local min_len=0\n\
    \    local max_val=0\n    local min_val=0\n    local max_idx=0\n    local min_idx=0\n\
    \    local tmp=0\n    local tmp_idx=0\n    local tmp_val=0\n    local tmp_len=0\n\
    \    local tmp_arr=()\n    local tmp_arr_len=0\n    local tmp_arr_idx=0\n    local\
    \ tmp_arr_val=0\n    local tmp_arr_len=0\n    local tmp_arr_idx=0\n    local tmp_arr_val=0\n\
    \    local tmp_arr_len=0\n    local tmp_arr_idx=0\n    local tmp_arr_val=0\n \
    \   local tmp_arr_len=0\n    local tmp_arr_idx=0\n    local tmp_arr_val=0\n  \
    \  local tmp_arr_len=0\n    local tmp_arr_idx=0\n    local tmp_arr_val=0\n   \
    \ local tmp_arr_len=0\n    local tmp_arr_idx=0\n    local tmp_arr_val=0\n    local\
    \ tmp_arr_len=0\n    local tmp_arr_idx=0\n    local tmp_arr_val=0\n    local tmp_arr_len=0\n\
    \    local tmp_arr_idx=0\n    local tmp_arr_val=0\n    local tmp_arr_len=0\n \
    \   local tmp_arr_idx=0\n    local tmp_arr_val=0\n    local tmp_arr_len=0\n  \
    \  local tmp_arr_idx=0\n    local tmp_arr_val=0\n    local tmp_arr_len=0\n   \
    \ local tmp_arr_idx=0\n    local tmp_arr_val=0\n    local tmp_arr_len=0\n    local\
    \ tmp_arr_idx=0\n    local tmp_\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max=()\n    local i=0\n    local j=0\n    local n=${#arr[@]}\n\
    \    for ((i=0; i<n; i++)); do\n        if ((${#max[@]} < k)); then\n        \
    \    max+=(${arr[i]})\n        else\n            for ((j=0; j<k; j++)); do\n \
    \               if ((${arr[i]} > ${max[j]})); then\n                    max[j]=${arr[i]}\n\
    \                    break\n                fi\n            done\n        fi\n\
    \    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n\
    \            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i i k\n    read -a arr <<< \"$1\"\n    k=$2\n    for ((i=0; i<k; i++));\
    \ do\n        echo ${arr[i]}\n    done | sort -nr\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a res=()\n    local -i i j\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[i]\
    \ < arr[j])); then\n                local tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        res[i]=${arr[i]}\n    done\n    echo ${res[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        if ((${#max[@]} < k)); then\n      \
    \      max+=(${arr[i]})\n        else\n            for ((j=0; j<k; j++)); do\n\
    \                if ((${arr[i]} > ${max[j]})); then\n                    max[j]=${arr[i]}\n\
    \                    break\n                fi\n            done\n        fi\n\
    \    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    while [ $i -lt $k ] && [ $i -lt $len ]; do\n        max[$i]=${arr[$i]}\n\
    \        i=$((i+1))\n    done\n    while [ $i -lt $len ]; do\n        j=0\n  \
    \      while [ $j -lt $k ]; do\n            if [ ${arr[$i]} -gt ${max[$j]} ];\
    \ then\n                max[$j]=${arr[$i]}\n                break\n          \
    \  fi\n            j=$((j+1))\n        done\n        i=$((i+1))\n    done\n  \
    \  echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local max_arr=()\n    local max_arr_len=0\n    for i in ${arr[@]};\
    \ do\n        if [[ ${#max_arr[@]} -lt $k ]]; then\n            max_arr+=($i)\n\
    \            max_arr_len=$k\n        else\n            local min_index=0\n   \
    \         local min_value=${max_arr[0]}\n            for ((j=1; j<$max_arr_len;\
    \ j++)); do\n                if [[ ${max_arr[j]} -lt $min_value ]]; then\n   \
    \                 min_index=$j\n                    min_value=${max_arr[j]}\n\
    \                fi\n            done\n            if [[ $i -gt $min_value ]];\
    \ then\n                max_arr[$min_index]=$i\n            fi\n        fi\n \
    \   done\n    echo ${max_arr[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1qg8n8gj.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=$1\n\
    \    local k=$2\n    local max_arr=()\n    local max_arr_len=0\n    local arr_len=0\n\
    \    local i=0\n    local j=0\n    local tmp=0\n    local arr_i=0\n    local max_arr_j=0\n\
    \    local max_arr_j_1=0\n    local max_arr_j_2=0\n    local max_arr_j_3=0\n \
    \   local max_arr_j_4=0\n    local max_arr_j_5=0\n    local max_arr_j_6=0\n  \
    \  local max_arr_j_7=0\n    local max_arr_j_8=0\n    local max_arr_j_9=0\n   \
    \ local max_arr_j_10=0\n    local max_arr_j_11=0\n    local max_arr_j_12=0\n \
    \   local max_arr_j_13=0\n    local max_arr_j_14=0\n    local max_arr_j_15=0\n\
    \    local max_arr_j_16=0\n    local max_arr_j_17=0\n    local max_arr_j_18=0\n\
    \    local max_arr_j_19=0\n    local max_arr_j_20=0\n    local max_arr_j_21=0\n\
    \    local max_arr_j_22=0\n    local max_arr_j_23=0\n    local max_arr_j_24=0\n\
    \    local max_arr_j_25=0\n    local max_arr_j_26=0\n    local max_arr_j_27=0\n\
    \    local max_arr_j_28=0\n    local max_arr_j_29=0\n    local max_arr_j_30=0\n\
    \    local max_arr_j_31=0\n    local max_arr_j_32=0\n    local max_arr_j_33=0\n\
    \    local max_arr_j_34=0\n    local max_arr_j_35=0\n    local max_arr_j_36=0\n\
    \    local max_arr\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ max=0\n    local max_idx=0\n    local tmp=0\n    local tmp_idx=0\n    local\
    \ res=()\n    for ((i=0; i<k; i++)); do\n        max=${arr[i]}\n        max_idx=$i\n\
    \        for ((j=i+1; j<len; j++)); do\n            if [ ${arr[j]} -gt $max ];\
    \ then\n                max=${arr[j]}\n                max_idx=$j\n          \
    \  fi\n        done\n        tmp=${arr[i]}\n        tmp_idx=$i\n        arr[i]=$max\n\
    \        arr[max_idx]=$tmp\n        res[i]=$max\n    done\n    echo ${res[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i temp=0\n \
    \   local -i len=0\n    local -i max=0\n    local -i max_index=0\n    local -i\
    \ min=0\n    local -i min_index=0\n    local -i max_arr=0\n    local -i min_arr=0\n\
    \    local -i max_arr_index=0\n    local -i min_arr_index=0\n    local -i max_arr_index_temp=0\n\
    \    local -i min_arr_index_temp=0\n    local -i max_arr_temp=0\n    local -i\
    \ min_arr_temp=0\n    local -i max_arr_index_temp_temp=0\n    local -i min_arr_index_temp_temp=0\n\
    \    local -i max_arr_temp_temp=0\n    local -i min_arr_temp_temp=0\n    local\
    \ -i max_arr_index_temp_temp_temp=0\n    local -i min_arr_index_temp_temp_temp=0\n\
    \    local -i max_arr_temp_temp_temp=0\n    local -i min_arr_temp_temp_temp=0\n\
    \    local -i max_arr_index_temp_temp_temp_temp=0\n    local -i min_arr_index_temp_temp_temp_temp=0\n\
    \    local -i max_arr_temp_temp_temp_temp=0\n    local -i min_arr_temp_temp_temp_temp=0\n\
    \    local -i max_arr_index_temp_temp_temp_temp_temp=0\n    local -i min_arr_index_temp_temp_temp_temp_temp=0\n\
    \    local -i max_arr_temp_temp_temp_temp_temp=0\n    local -i min_arr_temp_temp_temp_temp_temp=0\n\
    \    local -i max_arr_index_temp_temp_temp_temp_temp_temp=0\n    local -i min_arr_index_temp_temp_temp_temp_temp\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local i\n    local j\n    local n\n   \
    \ local m\n    local -i max_len=0\n    local -i arr_len=${#arr[@]}\n    for ((i=0;\
    \ i<arr_len; i++)); do\n        n=${arr[i]}\n        for ((j=0; j<max_len; j++));\
    \ do\n            m=${max[j]}\n            if [[ $n -gt $m ]]; then\n        \
    \        max[j]=$n\n                break\n            fi\n        done\n    \
    \    if [[ $j -eq $max_len ]]; then\n            max[max_len++]=$n\n        fi\n\
    \    done\n    echo ${max[@]:0:$k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local i=0\n    local j=0\n    local tmp=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvw0kkpv8.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local max=0\n    local max_idx=0\n    local result=()\n    for ((i=0;\
    \ i<k; i++)); do\n        max=${arr[0]}\n        max_idx=0\n        for ((j=1;\
    \ j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n        \
    \        max=${arr[j]}\n                max_idx=$j\n            fi\n        done\n\
    \        result[i]=$max\n        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n\
    \        arr[max_idx]=$tmp\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=$2\n    local -i i j\n    local -a max\n    for ((i=0; i<k;\
    \ i++)); do\n        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]};\
    \ i++)); do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt\
    \ ${max[j]} ]]; then\n                max[j]=${arr[i]}\n                break\n\
    \            fi\n        done\n    done\n    echo \"${max[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max_arr=()\n    local max_arr_len=0\n    local i=0\n\
    \    local j=0\n    local max_val=0\n    local max_idx=0\n    local tmp=0\n  \
    \  local len=${#arr[@]}\n    if [[ $len -eq 0 ]]; then\n        echo \"Empty array\"\
    \n        return\n    fi\n    if [[ $k -gt $len ]]; then\n        echo \"k is\
    \ greater than array length\"\n        return\n    fi\n    for ((i=0; i<k; i++));\
    \ do\n        max_val=${arr[0]}\n        max_idx=0\n        for ((j=1; j<len-i;\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max_val ]]; then\n             \
    \   max_val=${arr[j]}\n                max_idx=$j\n            fi\n        done\n\
    \        max_arr[$i]=$max_val\n        max_arr_len=$((max_arr_len+1))\n      \
    \  tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max_val\n        arr[$max_idx]=$tmp\n\
    \    done\n    echo ${max_arr[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local i\n    local j\n    for ((i=0; i<k;\
    \ i++)); do\n        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]};\
    \ i++)); do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt\
    \ ${max[j]} ]]; then\n                max[j]=${arr[i]}\n                break\n\
    \            fi\n        done\n    done\n    echo ${max[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local result=()\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           tmp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$tmp\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   result[i]=${arr[i]}\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local i\n    for ((i=0; i<k; i++)); do\n\
    \        max[$i]=${arr[$i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n\
    \        local j\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[$i]}\
    \ -gt ${max[$j]} ]]; then\n                local t=${max[$j]}\n              \
    \  max[$j]=${arr[$i]}\n                arr[$i]=$t\n            fi\n        done\n\
    \    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local i j\n    for ((i=0; i<k; i++)); do\n\
    \        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n\
    \        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${max[j]}\
    \ ]]; then\n                max[j]=${arr[i]}\n                break\n        \
    \    fi\n        done\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i tmp=0\n  \
    \  local -i len=0\n    local -i max=0\n    local -i max_index=0\n    local -i\
    \ max_index_2=0\n    local -i max_index_3=0\n    local -i max_index_4=0\n    local\
    \ -i max_index_5=0\n    local -i max_index_6=0\n    local -i max_index_7=0\n \
    \   local -i max_index_8=0\n    local -i max_index_9=0\n    local -i max_index_10=0\n\
    \    local -i max_index_11=0\n    local -i max_index_12=0\n    local -i max_index_13=0\n\
    \    local -i max_index_14=0\n    local -i max_index_15=0\n    local -i max_index_16=0\n\
    \    local -i max_index_17=0\n    local -i max_index_18=0\n    local -i max_index_19=0\n\
    \    local -i max_index_20=0\n    local -i max_index_21=0\n    local -i max_index_22=0\n\
    \    local -i max_index_23=0\n    local -i max_index_24=0\n    local -i max_index_25=0\n\
    \    local -i max_index_26=0\n    local -i max_index_27=0\n    local -i max_index_28=0\n\
    \    local -i max_index_29=0\n    local -i max_index_30=0\n    local -i max_index_31=0\n\
    \    local -i max_index_32=0\n    local -i max_index_33=0\n    local -i max_index_34=0\n\
    \    local -i max_index_35=0\n    local -i max_index_36=0\n    local -i max_index_37=0\n\
    \    local -i max_index_38=0\n   \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local i j\n    local -a max\n    for ((i=0; i<k; i++)); do\n\
    \        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n\
    \        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${max[j]}\
    \ ]]; then\n                max[j]=${arr[i]}\n                break\n        \
    \    fi\n        done\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdgbwkp6d.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n    done\n    for ((i=k;\
    \ i<len; i++)); do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n                break\n\
    \            fi\n        done\n    done\n    echo ${max[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=$1\n\
    \    local k=$2\n    local max_arr=()\n    local max_arr_len=0\n    local i=0\n\
    \    local j=0\n    local tmp=0\n    local arr_len=${#arr[@]}\n    if [ $arr_len\
    \ -lt $k ]; then\n        echo \"The length of the array is less than k\"\n  \
    \      return\n    fi\n    for ((i=0; i<$k; i++)); do\n        max_arr[$i]=${arr[$i]}\n\
    \    done\n    max_arr_len=$k\n    for ((i=$k; i<$arr_len; i++)); do\n       \
    \ tmp=${arr[$i]}\n        for ((j=0; j<$max_arr_len; j++)); do\n            if\
    \ [ $tmp -gt ${max_arr[$j]} ]; then\n                tmp=${max_arr[$j]}\n    \
    \            max_arr[$j]=${arr[$i]}\n                break\n            fi\n \
    \       done\n    done\n    echo ${max_arr[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local i\n    local j\n    local max_i\n\
    \    local max_j\n    local max_val\n    local val\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        val=${arr[$i]}\n        for ((j=0; j<${#max[@]}; j++)); do\n\
    \            if [[ ${max[$j]} -lt $val ]]; then\n                max_i=$i\n  \
    \              max_j=$j\n                max_val=$val\n                break\n\
    \            fi\n        done\n        if [[ $j -lt $k ]]; then\n            max[$j]=$val\n\
    \        else\n            arr[$max_i]=$max_val\n            max[$max_j]=$val\n\
    \        fi\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n\tlocal arr=($1)\n\t\
    local k=$2\n\tlocal i=0\n\tlocal j=0\n\tlocal len=${#arr[@]}\n\tlocal tmp=0\n\t\
    local max=0\n\tlocal max_index=0\n\tlocal result=()\n\tfor ((i=0; i<k; i++));\
    \ do\n\t\tmax=${arr[0]}\n\t\tmax_index=0\n\t\tfor ((j=1; j<len-i; j++)); do\n\t\
    \t\tif [[ ${arr[j]} -gt $max ]]; then\n\t\t\t\tmax=${arr[j]}\n\t\t\t\tmax_index=$j\n\
    \t\t\tfi\n\t\tdone\n\t\tresult[i]=$max\n\t\ttmp=${arr[len-i-1]}\n\t\tarr[len-i-1]=$max\n\
    \t\tarr[max_index]=$tmp\n\tdone\n\techo ${result[@]}\n}\n\ncandidate() {\n   \
    \ maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"\
    3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n   \
    \ [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"\
    123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20\
    \ 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\"\
    \ \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"\
    2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10\
    \ 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local res=()\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           tmp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$tmp\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   res[i]=${arr[i]}\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local i\n    local j\n    local max_index\n\
    \    local max_value\n    for ((i=0; i<k; i++)); do\n        max_index=$i\n  \
    \      max_value=${arr[$i]}\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n  \
    \          if [[ ${arr[$j]} -gt $max_value ]]; then\n                max_index=$j\n\
    \                max_value=${arr[$j]}\n            fi\n        done\n        max[$i]=$max_value\n\
    \        arr[$max_index]=${arr[$i]}\n        arr[$i]=$max_value\n    done\n  \
    \  echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a max\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    while [ $i -lt $k ]; do\n        max[$i]=${arr[$i]}\n        i=$((i+1))\n\
    \    done\n    while [ $i -lt $len ]; do\n        j=0\n        while [ $j -lt\
    \ $k ]; do\n            if [ ${arr[$i]} -gt ${max[$j]} ]; then\n             \
    \   max[$j]=${arr[$i]}\n                break\n            fi\n            j=$((j+1))\n\
    \        done\n        i=$((i+1))\n    done\n    echo ${max[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0l0s1d1n.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i tmp=0\n  \
    \  local -i len=0\n    local -i max=0\n    local -i max_idx=0\n    local -i ret=0\n\
    \    local -i ret_idx=0\n    local -i ret_len=0\n    local -i ret_idx_len=0\n\
    \    local -i ret_idx_len_max=0\n    local -i ret_idx_len_max_idx=0\n    local\
    \ -i ret_idx_len_max_idx_tmp=0\n    local -i ret_idx_len_max_idx_tmp_len=0\n \
    \   local -i ret_idx_len_max_idx_tmp_len_max=0\n    local -i ret_idx_len_max_idx_tmp_len_max_idx=0\n\
    \    local -i ret_idx_len_max_idx_tmp_len_max_idx_ret=0\n    local -i ret_idx_len_max_idx_tmp_len_max_idx_ret_idx=0\n\
    \    local -i ret_idx_len_max_idx_tmp_len_max_idx_ret_idx_len=0\n    local -i\
    \ ret_idx_len_max_idx_tmp_len_max_idx_ret_idx_len_max=0\n    local -i ret_idx_len_max_idx_tmp_len_max_idx_ret_idx_len_max_idx=0\n\
    \    local -i ret_idx_len_max_idx_tmp_len_max_idx_ret_idx_len_max_idx_ret=0\n\
    \    local -i ret_idx_len_max_idx_tmp_len_max_idx_ret_idx_len_max_idx_ret_idx=0\n\
    \    local -i ret_idx_len_max_idx_tmp_len_max\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local i=0\n    local j=0\n    local tmp=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a max\n    local i\n    for ((i=0; i<k; i++)); do\n\
    \        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n\
    \        local j\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${max[j]} ]]; then\n                local t=${max[j]}\n                max[j]=${arr[i]}\n\
    \                arr[i]=$t\n            fi\n        done\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfvgkr0jq.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    if [ $k -eq 0 ]; then\n       \
    \ echo \"\"\n        return\n    fi\n    if [ $k -gt $len ]; then\n        echo\
    \ \"${arr[@]}\"\n        return\n    fi\n    local max=()\n    local i=0\n   \
    \ while [ $i -lt $k ]; do\n        local j=0\n        local max_index=0\n    \
    \    local max_value=${arr[0]}\n        while [ $j -lt $len ]; do\n          \
    \  if [ ${arr[$j]} -gt $max_value ]; then\n                max_index=$j\n    \
    \            max_value=${arr[$j]}\n            fi\n            let j++\n     \
    \   done\n        max+=($max_value)\n        unset arr[$max_index]\n        let\
    \ i++\n    done\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzmmmhvhe.sh: line 39: [: -gt: unary operator expected

    /tmp/tmpzmmmhvhe.sh: line 39: [: -4: unary operator expected

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ max=0\n    local max_index=0\n    local tmp=0\n    local result=()\n    for\
    \ ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_index=0\n        for\
    \ ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n \
    \               max=${arr[j]}\n                max_index=$j\n            fi\n\
    \        done\n        result[i]=$max\n        tmp=${arr[max_index]}\n       \
    \ arr[max_index]=${arr[len-i-1]}\n        arr[len-i-1]=$tmp\n    done\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i n=0\n    local\
    \ -i tmp=0\n    local -i max=0\n    local -i max_idx=0\n    local -i len=0\n \
    \   local -i len_k=0\n    local -i len_arr=0\n    local -i len_arr_k=0\n    local\
    \ -i len_arr_k_1=0\n    local -i len_arr_k_2=0\n    local -i len_arr_k_3=0\n \
    \   local -i len_arr_k_4=0\n    local -i len_arr_k_5=0\n    local -i len_arr_k_6=0\n\
    \    local -i len_arr_k_7=0\n    local -i len_arr_k_8=0\n    local -i len_arr_k_9=0\n\
    \    local -i len_arr_k_10=0\n    local -i len_arr_k_11=0\n    local -i len_arr_k_12=0\n\
    \    local -i len_arr_k_13=0\n    local -i len_arr_k_14=0\n    local -i len_arr_k_15=0\n\
    \    local -i len_arr_k_16=0\n    local -i len_arr_k_17=0\n    local -i len_arr_k_18=0\n\
    \    local -i len_arr_k_19=0\n    local -i len_arr_k_20=0\n    local -i len_arr_k_21=0\n\
    \    local -i len_arr_k_22=0\n    local -i len_arr_k_23=0\n    local -i len_arr_k_24=0\n\
    \    local -i len_arr_k_25=0\n    local -i len_arr_k_26=0\n    local -i len_arr_k_27=0\n\
    \    local -i len_arr_k_28=0\n    local -i len_arr_k_29=\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a result\n    local i=0\n    for ((i=0; i<k; i++));\
    \ do\n        result[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++));\
    \ do\n        local j=0\n        for ((j=0; j<k; j++)); do\n            if [[\
    \ ${arr[i]} -gt ${result[j]} ]]; then\n                local tmp=${result[j]}\n\
    \                result[j]=${arr[i]}\n                arr[i]=$tmp\n          \
    \  fi\n        done\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n   \
    \ maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"\
    3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n   \
    \ [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"\
    123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20\
    \ 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\"\
    \ \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"\
    2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10\
    \ 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpmmzc1b1i.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n    done\n    for ((i=k;\
    \ i<len; i++)); do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n                break\n\
    \            fi\n        done\n    done\n    echo ${max[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i tmp=0\n  \
    \  local -i len=0\n    local -i max=0\n    local -i max_idx=0\n    local -i max_idx_2=0\n\
    \    local -i max_2=0\n    local -i max_3=0\n    local -i max_idx_3=0\n    local\
    \ -i max_4=0\n    local -i max_idx_4=0\n    local -i max_5=0\n    local -i max_idx_5=0\n\
    \    local -i max_6=0\n    local -i max_idx_6=0\n    local -i max_7=0\n    local\
    \ -i max_idx_7=0\n    local -i max_8=0\n    local -i max_idx_8=0\n    local -i\
    \ max_9=0\n    local -i max_idx_9=0\n    local -i max_10=0\n    local -i max_idx_10=0\n\
    \    local -i max_11=0\n    local -i max_idx_11=0\n    local -i max_12=0\n   \
    \ local -i max_idx_12=0\n    local -i max_13=0\n    local -i max_idx_13=0\n  \
    \  local -i max_14=0\n    local -i max_idx_14=0\n    local -i max_15=0\n    local\
    \ -i max_idx_15=0\n    local -i max_16=0\n    local -i max_idx_16=0\n    local\
    \ -i max_17=0\n    local -i max_idx_17=0\n    local -i max_18=0\n    local -i\
    \ max_idx_18=0\n    local -i max_19=0\n    local -i max_idx_19=0\n    local -i\
    \ max_20=0\n    local -i max_idx_20=0\n    local -i max_21\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    local max_len=${#max[@]}\n    while [ $i -lt $len ]; do\n        if [ $max_len\
    \ -lt $k ]; then\n            max+=(${arr[$i]})\n            max_len=${#max[@]}\n\
    \        else\n            j=0\n            while [ $j -lt $max_len ]; do\n  \
    \              if [ ${arr[$i]} -gt ${max[$j]} ]; then\n                    max[$j]=${arr[$i]}\n\
    \                    break\n                fi\n                j=$((j+1))\n \
    \           done\n        fi\n        i=$((i+1))\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n\
    \            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local i j\n    for ((i=0; i<k; i++)); do\n\
    \        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n\
    \        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${max[j]}\
    \ ]]; then\n                max[j]=${arr[i]}\n                break\n        \
    \    fi\n        done\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ temp=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n\
    \        do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]\n            then\n\
    \                temp=${arr[i]}\n                arr[i]=${arr[j]}\n          \
    \      arr[j]=$temp\n            fi\n        done\n    done\n    for ((i=0; i<k;\
    \ i++))\n    do\n        echo -n \"${arr[i]} \"\n    done\n    echo\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local k=\"$2\"\n    local -a res=()\n    local i=0\n    local j=0\n\
    \    local len=${#arr[@]}\n    local max=0\n    local max_index=0\n    while [\
    \ $i -lt $k ]; do\n        max=${arr[0]}\n        max_index=0\n        for ((j=1;\
    \ j<len; j++)); do\n            if [ ${arr[j]} -gt $max ]; then\n            \
    \    max=${arr[j]}\n                max_index=$j\n            fi\n        done\n\
    \        res[$i]=$max\n        arr[$max_index]=0\n        i=$((i+1))\n    done\n\
    \    echo ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxj8bjxq7.sh: line 33: [: too many arguments

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local i\n    local j\n    local len=${#arr[@]}\n\
    \    local max_len=${#max[@]}\n    local max_i\n    local max_val\n    for ((i=0;\
    \ i<len; i++)); do\n        if ((max_len < k)); then\n            max+=(${arr[i]})\n\
    \            max_len=${#max[@]}\n        else\n            max_i=0\n         \
    \   max_val=${max[0]}\n            for ((j=1; j<max_len; j++)); do\n         \
    \       if ((max_val < ${max[j]})); then\n                    max_i=$j\n     \
    \               max_val=${max[j]}\n                fi\n            done\n    \
    \        if ((max_val > ${arr[i]})); then\n                max[max_i]=${arr[i]}\n\
    \            fi\n        fi\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a result\n    local i\n    local j\n    local max\n\
    \    local max_index\n    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n \
    \       max_index=0\n        for ((j=1; j<${#arr[@]}; j++)); do\n            if\
    \ [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n            \
    \    max_index=$j\n            fi\n        done\n        result[i]=$max\n    \
    \    unset arr[$max_index]\n        arr=(\"${arr[@]}\")\n    done\n    echo \"\
    ${result[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiph2u7js.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local i\n    for ((i=0; i<k; i++)); do\n\
    \        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n\
    \        local j\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${max[j]} ]]; then\n                local t=${max[j]}\n                max[j]=${arr[i]}\n\
    \                arr[i]=$t\n            fi\n        done\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local i j\n    for ((i=0; i<k; i++)); do\n\
    \        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n\
    \        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${max[j]}\
    \ ]]; then\n                max[j]=${arr[i]}\n                break\n        \
    \    fi\n        done\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max_arr=()\n    local max_arr_len=0\n    local len=${#arr[@]}\n\
    \    local i=0\n    local j=0\n    local tmp=0\n    local max=0\n    local max_index=0\n\
    \    while [ $i -lt $len ]; do\n        max=${arr[$i]}\n        max_index=$i\n\
    \        j=$i\n        while [ $j -lt $len ]; do\n            if [ ${arr[$j]}\
    \ -gt $max ]; then\n                max=${arr[$j]}\n                max_index=$j\n\
    \            fi\n            j=$((j+1))\n        done\n        tmp=${arr[$i]}\n\
    \        arr[$i]=$max\n        arr[$max_index]=$tmp\n        i=$((i+1))\n    done\n\
    \    i=0\n    while [ $i -lt $k ]; do\n        max_arr[$i]=${arr[$i]}\n      \
    \  i=$((i+1))\n    done\n    echo ${max_arr[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local max=()\n    local i=0\n \
    \   local j=0\n    local max_i=0\n    local max_j=0\n    local max_v=0\n    local\
    \ v=0\n    for ((i=0; i<k; i++)); do\n        max_v=${arr[0]}\n        for ((j=0;\
    \ j<len; j++)); do\n            v=${arr[j]}\n            if [[ $v -gt $max_v ]];\
    \ then\n                max_v=$v\n                max_i=$i\n                max_j=$j\n\
    \            fi\n        done\n        max[$max_i]=$max_v\n        arr[$max_j]=0\n\
    \    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local max=0\n    local max_idx=0\n    local result=()\n    if [[\
    \ $len -eq 0 ]]; then\n        echo \"Empty array\"\n        return\n    fi\n\
    \    if [[ $k -gt $len ]]; then\n        echo \"k is greater than the length of\
    \ the array\"\n        return\n    fi\n    for ((i=0; i<k; i++)); do\n       \
    \ max=${arr[0]}\n        max_idx=0\n        for ((j=1; j<len-i; j++)); do\n  \
    \          if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_idx=$j\n            fi\n        done\n        result[i]=$max\n\
    \        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n        arr[max_idx]=$tmp\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local k=\"$2\"\n    local -a max=()\n    local -i i=0\n    local -i\
    \ j=0\n    local -i len=${#arr[@]}\n    local -i max_len=0\n    local -i max_index=0\n\
    \    local -i max_value=0\n    local -i tmp_value=0\n    local -i tmp_index=0\n\
    \    local -i tmp_len=0\n    local -i tmp_max_len=0\n    local -i tmp_max_index=0\n\
    \    local -i tmp_max_value=0\n    local -i tmp_max_value_index=0\n    local -i\
    \ tmp_max_value_len=0\n    local -i tmp_max_value_max_len=0\n    local -i tmp_max_value_max_index=0\n\
    \    local -i tmp_max_value_max_value=0\n    local -i tmp_max_value_max_value_index=0\n\
    \    local -i tmp_max_value_max_value_len=0\n    local -i tmp_max_value_max_value_max_len=0\n\
    \    local -i tmp_max_value_max_value_max_index=0\n    local -i tmp_max_value_max_value_max_value=0\n\
    \    local -i tmp_max_value_max_value_max_value_index=0\n    local -i tmp_max_value_max_value_max_value_len=0\n\
    \    local -i tmp_max_value_max_value_max_value_max_len=0\n    local -i tmp_max_value_max_value_max_value_max_index=0\n\
    \    local -i tmp_max_value_max_value_max_value_max_value=0\n    local -i tmp_max_value_max_value_max_value_max_value_index=0\n\
    \    local -i tmp_max_value_max_value_max_value_max_value_len=0\n    local -i\
    \ tmp_max_value_max_value_max_value_max\n}\n\ncandidate() {\n    maximum \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n    done\n    for ((i=k;\
    \ i<len; i++)); do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n                break\n\
    \            fi\n        done\n    done\n    echo ${max[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=\"$1\"\
    \n    local k=\"$2\"\n    local i=0\n    local j=0\n    local tmp=0\n    local\
    \ len=0\n    local res=()\n    local arr_len=0\n    local arr_tmp=()\n    local\
    \ arr_tmp_len=0\n    local arr_tmp_i=0\n    local arr_tmp_j=0\n    local arr_tmp_tmp=0\n\
    \    local arr_tmp_res=()\n    local arr_tmp_res_len=0\n    local arr_tmp_res_i=0\n\
    \    local arr_tmp_res_j=0\n    local arr_tmp_res_tmp=0\n    local arr_tmp_res_res=()\n\
    \    local arr_tmp_res_res_len=0\n    local arr_tmp_res_res_i=0\n    local arr_tmp_res_res_j=0\n\
    \    local arr_tmp_res_res_tmp=0\n    local arr_tmp_res_res_res=()\n    local\
    \ arr_tmp_res_res_res_len=0\n    local arr_tmp_res_res_res_i=0\n    local arr_tmp_res_res_res_j=0\n\
    \    local arr_tmp_res_res_res_tmp=0\n    local arr_tmp_res_res_res_res=()\n \
    \   local arr_tmp_res_res_res_res_len=0\n    local arr_tmp_res_res_res_res_i=0\n\
    \    local arr_tmp_res_res_res_res_j=0\n    local arr_tmp_res_res_res_res_tmp=0\n\
    \    local arr_tmp_res_res_res_res_res=()\n    local arr_tmp_res_res_res_res_res_len=0\n\
    \    local arr_tmp_res_res_res_res_res_i=0\n    local arr_tmp_res_res_res_res_res_j=0\n\
    \    local arr_tmp_res_res_res_res_res_tmp=0\n    local arr_tmp_res_res_res_res_res_res=()\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n\
    \            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local i=0\n    local j=0\n    local tmp=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n _arr=$1\n\
    \    local _k=$2\n    local -a _max\n    local _i\n    local _j\n    local _len\n\
    \    local _max_len\n    local _max_i\n    local _max_j\n    local _max_val\n\
    \    local _val\n    _len=${#_arr[@]}\n    _max_len=${#_max[@]}\n    if [[ $_k\
    \ -gt $_len ]]; then\n        _k=$_len\n    fi\n    for ((_i=0; _i<_k; _i++));\
    \ do\n        _max_val=${_arr[0]}\n        _max_i=0\n        for ((_j=1; _j<_len;\
    \ _j++)); do\n            _val=${_arr[_j]}\n            if [[ $_val -gt $_max_val\
    \ ]]; then\n                _max_val=$_val\n                _max_i=$_j\n     \
    \       fi\n        done\n        _max[$_max_len]=$_max_val\n        _max_len=$((_max_len+1))\n\
    \        _arr[$_max_i]=${_arr[$((_len-1))]}\n        _len=$((_len-1))\n    done\n\
    \    echo ${_max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpx139rgg8.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i j\n    for ((i=0; i<k;\
    \ i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                local tmp=${arr[i]}\n              \
    \  arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n        done\n\
    \    done\n    echo ${arr[@]:0:k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfusentod.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i j\n    for ((i=0; i<len;\
    \ i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                local tmp=${arr[i]}\n              \
    \  arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n        done\n\
    \    done\n    for ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n   \
    \ done\n    echo\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local i\n    local j\n    local max_i\n\
    \    local max_j\n    local max_val\n    local tmp\n\n    for ((i=0; i<k; i++));\
    \ do\n        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++));\
    \ do\n        max_val=${max[0]}\n        max_i=0\n        for ((j=1; j<k; j++));\
    \ do\n            if [[ ${max[j]} -gt $max_val ]]; then\n                max_val=${max[j]}\n\
    \                max_i=$j\n            fi\n        done\n        if [[ ${arr[i]}\
    \ -lt $max_val ]]; then\n            max[$max_i]=${arr[i]}\n        fi\n    done\n\
    \    for ((i=0; i<k; i++)); do\n        max_val=${max[i]}\n        max_i=$i\n\
    \        for ((j=i+1; j<k; j++)); do\n            if [[ ${max[j]} -gt $max_val\
    \ ]]; then\n                max_val=${max[j]}\n                max_i=$j\n    \
    \        fi\n        done\n        if [[ $max_i -ne $i ]]; then\n            tmp=${max[i]}\n\
    \            max[i]=${max[max_i]}\n            max[max_i]=$tmp\n        fi\n \
    \   done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=(\"$@\"\
    )\n    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n  \
    \  local max=0\n    local max_index=0\n    local tmp=0\n    local result=()\n\
    \    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_index=0\n \
    \       for ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]];\
    \ then\n                max=${arr[j]}\n                max_index=$j\n        \
    \    fi\n        done\n        result[i]=$max\n        tmp=${arr[len-i-1]}\n \
    \       arr[len-i-1]=$max\n        arr[max_index]=$tmp\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp51g_zf1x.sh: line 34: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local max=0\n    local max_idx=0\n    local res=()\n    local res_len=0\n\
    \    for ((i=0; i<len; i++)); do\n        max=${arr[$i]}\n        max_idx=$i\n\
    \        for ((j=$i+1; j<len; j++)); do\n            if [[ ${arr[$j]} -gt $max\
    \ ]]; then\n                max=${arr[$j]}\n                max_idx=$j\n     \
    \       fi\n        done\n        tmp=${arr[$i]}\n        arr[$i]=${arr[$max_idx]}\n\
    \        arr[$max_idx]=$tmp\n        if [[ $i -lt $k ]]; then\n            res[$res_len]=${arr[$i]}\n\
    \            res_len=$(($res_len+1))\n        fi\n    done\n    echo ${res[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local i j\n    for ((i=0; i<k; i++)); do\n\
    \        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n\
    \        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${max[j]}\
    \ ]]; then\n                max[j]=${arr[i]}\n                break\n        \
    \    fi\n        done\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local k=$2\n    local -a max\n    local i\n    local j\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n    done\n    for ((i=k;\
    \ i<len; i++)); do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n                break\n\
    \            fi\n        done\n    done\n    echo ${max[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local max=0\n    local max_idx=0\n    local result=()\n    if [ $len\
    \ -lt $k ]; then\n        echo \"Error: length of array is less than k\"\n   \
    \     return 1\n    fi\n    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n\
    \        max_idx=0\n        for ((j=1; j<len-i; j++)); do\n            if [ ${arr[j]}\
    \ -gt $max ]; then\n                max=${arr[j]}\n                max_idx=$j\n\
    \            fi\n        done\n        result[i]=$max\n        tmp=${arr[len-i-1]}\n\
    \        arr[len-i-1]=$max\n        arr[max_idx]=$tmp\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=(\"$@\"\
    )\n    local k=$2\n    local i=0\n    local j=0\n    local temp=0\n    local result=()\n\
    \    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++));\
    \ do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                temp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        result+=(${arr[i]})\n\
    \    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4oezq74v.sh: line 29: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=$2\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i max_idx=0\n    local -i tmp=0\n    local -a result=()\n\n    for\
    \ ((i=0; i<k; i++)); do\n        max_idx=$i\n        for ((j=i+1; j<n; j++));\
    \ do\n            if [[ ${arr[j]} -gt ${arr[max_idx]} ]]; then\n             \
    \   max_idx=$j\n            fi\n        done\n        tmp=${arr[i]}\n        arr[i]=${arr[max_idx]}\n\
    \        arr[max_idx]=$tmp\n        result[i]=${arr[i]}\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp10qqcxhq.sh: line 33: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    /tmp/tmp10qqcxhq.sh: line 37: -3 -4 5: syntax error in expression (error token
    is "5")

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i len=0\n  \
    \  local -i tmp=0\n    local -i max=0\n    local -i max_idx=0\n    local -i max_idx_tmp=0\n\
    \    local -i max_idx_tmp2=0\n    local -i max_idx_tmp3=0\n    local -i max_idx_tmp4=0\n\
    \    local -i max_idx_tmp5=0\n    local -i max_idx_tmp6=0\n    local -i max_idx_tmp7=0\n\
    \    local -i max_idx_tmp8=0\n    local -i max_idx_tmp9=0\n    local -i max_idx_tmp10=0\n\
    \    local -i max_idx_tmp11=0\n    local -i max_idx_tmp12=0\n    local -i max_idx_tmp13=0\n\
    \    local -i max_idx_tmp14=0\n    local -i max_idx_tmp15=0\n    local -i max_idx_tmp16=0\n\
    \    local -i max_idx_tmp17=0\n    local -i max_idx_tmp18=0\n    local -i max_idx_tmp19=0\n\
    \    local -i max_idx_tmp20=0\n    local -i max_idx_tmp21=0\n    local -i max_idx_tmp22=0\n\
    \    local -i max_idx_tmp23=0\n    local -i max_idx_tmp24=0\n    local -i max_idx_tmp25=0\n\
    \    local -i max_idx_tmp26=0\n    local -i max_idx_tmp27=0\n    local -i max_idx_tmp28=0\n\
    \    local -i max_idx_tmp29=0\n    local -i max_idx_tmp30=0\n    local -i max_idx_tmp31=0\n\
    \    local -i max_idx_tmp32\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i n=0\n    local\
    \ -i tmp=0\n    local -i max=0\n    local -i max_i=0\n    local -i max_j=0\n \
    \   local -i max_n=0\n    local -i max_tmp=0\n    local -i max_k=0\n    local\
    \ -i max_i_k=0\n    local -i max_j_k=0\n    local -i max_n_k=0\n    local -i max_tmp_k=0\n\
    \    local -i max_i_k_1=0\n    local -i max_j_k_1=0\n    local -i max_n_k_1=0\n\
    \    local -i max_tmp_k_1=0\n    local -i max_i_k_2=0\n    local -i max_j_k_2=0\n\
    \    local -i max_n_k_2=0\n    local -i max_tmp_k_2=0\n    local -i max_i_k_3=0\n\
    \    local -i max_j_k_3=0\n    local -i max_n_k_3=0\n    local -i max_tmp_k_3=0\n\
    \    local -i max_i_k_4=0\n    local -i max_j_k_4=0\n    local -i max_n_k_4=0\n\
    \    local -i max_tmp_k_4=0\n    local -i max_i_k_5=0\n    local -i max_j_k_5=0\n\
    \    local -i max_n_k_5=0\n    local -i max_tmp_k_5=0\n    local -i max_i_k_6=0\n\
    \    local -i max_j_k_6=0\n    local -i max_n_k_6=0\n    local -i max_tmp_k_6=0\n\
    \    local -i max_i_k_7=0\n    local -i max_j\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local i\n    for ((i=0; i<k; i++)); do\n\
    \        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n\
    \        local j\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${max[j]} ]]; then\n                local tmp=${max[j]}\n              \
    \  max[j]=${arr[i]}\n                arr[i]=$tmp\n            fi\n        done\n\
    \    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local i\n    local j\n    local tmp\n    for ((i=0; i<k;\
    \ i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]:0:k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n    local\
    \ tmp=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n\
    \            if ((arr[i] < arr[j])); then\n                tmp=${arr[i]}\n   \
    \             arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]}\
    \ \"\n    done\n    echo\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=$2\n    local -i i=0 j=0\n    local -i len=${#arr[@]}\n\
    \    local -i max=0\n    local -a result=()\n    for ((i=0; i<k; i++)); do\n \
    \       max=0\n        for ((j=0; j<len; j++)); do\n            if [[ ${arr[j]}\
    \ -gt ${arr[max]} ]]; then\n                max=$j\n            fi\n        done\n\
    \        result+=(${arr[max]})\n        arr[max]=0\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2kf4_b_z.sh: line 30: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    /tmp/tmp2kf4_b_z.sh: line 30: [[: -3 -4 5: syntax error in expression (error token
    is "5")

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local i j\n    local max\n    local result=()\n    for ((i=0;\
    \ i<k; i++)); do\n        max=${arr[0]}\n        for ((j=1; j<${#arr[@]}; j++));\
    \ do\n            if (( arr[j] > max )); then\n                max=${arr[j]}\n\
    \            fi\n        done\n        result+=($max)\n        arr=(${arr[@]/$max})\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphv4tv9yf.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a res=()\n    local i=0\n    local j=0\n    local\
    \ max=0\n    local max_idx=0\n    local len=${#arr[@]}\n    while [ $i -lt $k\
    \ ]; do\n        max=${arr[0]}\n        max_idx=0\n        for ((j=1; j<len; j++));\
    \ do\n            if [ ${arr[$j]} -gt $max ]; then\n                max=${arr[$j]}\n\
    \                max_idx=$j\n            fi\n        done\n        res[$i]=$max\n\
    \        arr[$max_idx]=$((-1 * max))\n        i=$((i+1))\n    done\n    echo ${res[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local i=0\n    local j=0\n    local max=0\n    local max_idx=0\n\
    \    local tmp=0\n    local result=()\n    while [ $i -lt $k ]; do\n        max=${arr[0]}\n\
    \        max_idx=0\n        j=0\n        while [ $j -lt ${#arr[@]} ]; do\n   \
    \         if [ ${arr[$j]} -gt $max ]; then\n                max=${arr[$j]}\n \
    \               max_idx=$j\n            fi\n            j=$((j+1))\n        done\n\
    \        result[$i]=$max\n        arr[$max_idx]=$((-1*${arr[$max_idx]}))\n   \
    \     i=$((i+1))\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local i\n    local j\n    local max_i\n\
    \    local max_j\n    local max_val\n    local val\n    for ((i=0; i<k; i++));\
    \ do\n        max_val=${arr[0]}\n        max_i=0\n        max_j=0\n        for\
    \ ((j=0; j<${#arr[@]}; j++)); do\n            val=${arr[j]}\n            if ((val\
    \ > max_val)); then\n                max_val=$val\n                max_i=$i\n\
    \                max_j=$j\n            fi\n        done\n        max[i]=$max_val\n\
    \        unset arr[max_j]\n        arr=(${arr[@]})\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n\
    \            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ temp=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n\
    \        do\n            if [[ ${arr[$i]} -lt ${arr[$j]} ]]\n            then\n\
    \                temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n       \
    \         arr[$j]=$temp\n            fi\n        done\n    done\n    echo ${arr[@]:0:$k}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i n\n    local -i\
    \ max\n    local -i max_index\n    local -i tmp\n    arr=($1)\n    k=$2\n    n=${#arr[@]}\n\
    \    for ((i=0; i<k; i++)); do\n        max=${arr[i]}\n        max_index=$i\n\
    \        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]} -gt $max ]];\
    \ then\n                max=${arr[j]}\n                max_index=$j\n        \
    \    fi\n        done\n        tmp=${arr[i]}\n        arr[i]=${arr[max_index]}\n\
    \        arr[max_index]=$tmp\n    done\n    echo ${arr[@]:0:k}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a res=()\n    local len=${#arr[@]}\n    local i=0\n\
    \    local j=0\n    local max=0\n    local max_index=0\n    while [ $i -lt $k\
    \ ]; do\n        max=${arr[0]}\n        max_index=0\n        for ((j=1; j<$len;\
    \ j++)); do\n            if [ ${arr[$j]} -gt $max ]; then\n                max=${arr[$j]}\n\
    \                max_index=$j\n            fi\n        done\n        res[$i]=$max\n\
    \        arr[$max_index]=0\n        ((i++))\n    done\n    echo ${res[@]}\n}\n\
    \ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local res=()\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           tmp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$tmp\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   res[i]=${arr[i]}\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local sorted_arr=($(printf \"%s\\n\" \"${arr[@]}\" | sort\
    \ -nr))\n    local max_k_arr=()\n    for ((i=0; i<k; i++)); do\n        max_k_arr+=(${sorted_arr[i]})\n\
    \    done\n    echo ${max_k_arr[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        if ((${#max[@]} < k)); then\n      \
    \      max+=(${arr[i]})\n        else\n            for ((j=0; j<k; j++)); do\n\
    \                if ((arr[i] > max[j])); then\n                    max[j]=${arr[i]}\n\
    \                    break\n                fi\n            done\n        fi\n\
    \    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    while [ $i -lt $k ]\n    do\n        max[$i]=${arr[$i]}\n        i=$((i+1))\n\
    \    done\n    while [ $i -lt $len ]\n    do\n        j=0\n        while [ $j\
    \ -lt $k ]\n        do\n            if [ ${arr[$i]} -gt ${max[$j]} ]\n       \
    \     then\n                max[$j]=${arr[$i]}\n                break\n      \
    \      fi\n            j=$((j+1))\n        done\n        i=$((i+1))\n    done\n\
    \    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    local temp=0\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n \
    \   done\n    for ((i=k; i<len; i++)); do\n        for ((j=0; j<k; j++)); do\n\
    \            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n                temp=${max[j]}\n\
    \                max[j]=${arr[i]}\n                arr[i]=$temp\n            fi\n\
    \        done\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=$2\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i max=0\n    local -i tmp=0\n    local -i index=0\n    local -a result=()\n\
    \    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        index=0\n     \
    \   for ((j=1; j<n-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n\
    \                max=${arr[j]}\n                index=$j\n            fi\n   \
    \     done\n        result[i]=$max\n        tmp=${arr[n-i-1]}\n        arr[n-i-1]=$max\n\
    \        arr[index]=$tmp\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbs4hat6x.sh: line 31: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local max=()\n    local i=0\n \
    \   local j=0\n    local tmp=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           tmp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$tmp\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   max[i]=${arr[i]}\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local k\n    IFS=' ' read -r -a arr <<< \"$1\"\n    k=\"$2\"\n    if [[ \"\
    ${#arr[@]}\" -lt \"$k\" ]]; then\n        echo \"Error: k must be less than or\
    \ equal to the length of the array.\"\n        return 1\n    fi\n    local -a\
    \ max\n    local i\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        local j\n        for\
    \ ((j=0; j<k; j++)); do\n            if [[ \"${arr[i]}\" -gt \"${max[j]}\" ]];\
    \ then\n                local tmp\n                tmp=\"${max[j]}\"\n       \
    \         max[j]=\"${arr[i]}\"\n                arr[i]=\"$tmp\"\n            fi\n\
    \        done\n    done\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local max=0\n    local max_idx=0\n    local result=()\n    for ((i=0;\
    \ i<$k; i++)); do\n        max=${arr[0]}\n        max_idx=0\n        for ((j=1;\
    \ j<$len; j++)); do\n            if [[ ${arr[$j]} -gt $max ]]; then\n        \
    \        max=${arr[$j]}\n                max_idx=$j\n            fi\n        done\n\
    \        result+=($max)\n        arr[$max_idx]=$((-1*$max))\n    done\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a max\n    local i\n    local j\n    local n\n   \
    \ local tmp\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n    done\n\
    \    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++)); do\n \
    \           if [[ ${arr[i]} -gt ${max[j]} ]]; then\n                tmp=${max[j]}\n\
    \                max[j]=${arr[i]}\n                for ((n=j+1; n<k; n++)); do\n\
    \                    tmp2=${max[n]}\n                    max[n]=$tmp\n       \
    \             tmp=$tmp2\n                done\n                break\n       \
    \     fi\n        done\n    done\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmps13se0kw.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i\
    \ max_index\n    local -i temp\n    local -i len\n    IFS=' ' read -r -a arr <<<\
    \ \"$1\"\n    k=$2\n    len=${#arr[@]}\n    for ((i=0; i<k; i++)); do\n      \
    \  max=${arr[i]}\n        max_index=$i\n        for ((j=i+1; j<len; j++)); do\n\
    \            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        temp=${arr[i]}\n\
    \        arr[i]=${arr[max_index]}\n        arr[max_index]=$temp\n    done\n  \
    \  echo \"${arr[@]:0:k}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i j\n    for ((i=0; i<len;\
    \ i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                local tmp=${arr[i]}\n              \
    \  arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n        done\n\
    \    done\n    for ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n   \
    \ done\n    echo\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a max\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo \"${max[@]}\"\
    \ | tr ' ' '\\n' | sort -n\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8nw4zj1p.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local max=0\n    local max_index=0\n    local result=()\n    for\
    \ ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_index=0\n        for\
    \ ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n \
    \               max=${arr[j]}\n                max_index=$j\n            fi\n\
    \        done\n        result+=($max)\n        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n\
    \        arr[max_index]=$tmp\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i tmp=0\n  \
    \  local -i len=0\n    local -i max=0\n    local -i max_idx=0\n    local -i min=0\n\
    \    local -i min_idx=0\n    local -i max_arr=0\n    local -i min_arr=0\n    local\
    \ -i max_arr_idx=0\n    local -i min_arr_idx=0\n    local -i max_arr_len=0\n \
    \   local -i min_arr_len=0\n    local -i max_arr_max=0\n    local -i min_arr_min=0\n\
    \    local -i max_arr_max_idx=0\n    local -i min_arr_min_idx=0\n    local -i\
    \ max_arr_max_arr=0\n    local -i min_arr_min_arr=0\n    local -i max_arr_max_arr_idx=0\n\
    \    local -i min_arr_min_arr_idx=0\n    local -i max_arr_max_arr_len=0\n    local\
    \ -i min_arr_min_arr_len=0\n    local -i max_arr_max_arr_max=0\n    local -i min_arr_min_arr_min=0\n\
    \    local -i max_arr_max_arr_max_idx=0\n    local -i min_arr_min_arr_min_idx=0\n\
    \    local -i max_arr_max_arr_max_arr=0\n    local -i min_arr_min_arr_min_arr=0\n\
    \    local -i max_arr_max_arr_max_arr_idx=0\n    local -i min_arr_min_arr_min_arr_idx=0\n\
    \    local -i max_arr_max_arr_max_arr_len=0\n    local -i min_arr_min_arr_min_arr_len=0\n\
    \    local -i max_arr_max_arr_max_arr_max=0\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i n=0\n    local\
    \ -i tmp=0\n    local -i max=0\n    local -i max_idx=0\n    local -i max_idx_tmp=0\n\
    \    local -i max_idx_tmp2=0\n    local -i max_idx_tmp3=0\n    local -i max_idx_tmp4=0\n\
    \    local -i max_idx_tmp5=0\n    local -i max_idx_tmp6=0\n    local -i max_idx_tmp7=0\n\
    \    local -i max_idx_tmp8=0\n    local -i max_idx_tmp9=0\n    local -i max_idx_tmp10=0\n\
    \    local -i max_idx_tmp11=0\n    local -i max_idx_tmp12=0\n    local -i max_idx_tmp13=0\n\
    \    local -i max_idx_tmp14=0\n    local -i max_idx_tmp15=0\n    local -i max_idx_tmp16=0\n\
    \    local -i max_idx_tmp17=0\n    local -i max_idx_tmp18=0\n    local -i max_idx_tmp19=0\n\
    \    local -i max_idx_tmp20=0\n    local -i max_idx_tmp21=0\n    local -i max_idx_tmp22=0\n\
    \    local -i max_idx_tmp23=0\n    local -i max_idx_tmp24=0\n    local -i max_idx_tmp25=0\n\
    \    local -i max_idx_tmp26=0\n    local -i max_idx_tmp27=0\n    local -i max_idx_tmp28=0\n\
    \    local -i max_idx_tmp29=0\n    local -i max_idx_tmp30=0\n    local -i max_idx_tmp31=0\n\
    \    local -i max_idx_tmp32\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local max_arr=()\n    local max_index=0\n\
    \    local max_value=${arr[0]}\n    for (( i=0; i<len; i++ )); do\n        if\
    \ [[ ${arr[i]} -gt $max_value ]]; then\n            max_value=${arr[i]}\n    \
    \        max_index=$i\n        fi\n    done\n    max_arr+=($max_value)\n    arr[$max_index]=0\n\
    \    if [[ $k -gt 1 ]]; then\n        maximum \"${arr[@]}\" $((k-1))\n    fi\n\
    \    echo \"${max_arr[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local result=()\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           tmp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$tmp\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   result[i]=${arr[i]}\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=(\"$@\"\
    )\n    local k=$2\n    local len=${#arr[@]}\n    local max=()\n    local max_len=0\n\
    \    local i=0\n    local j=0\n    local tmp=0\n    local max_i=0\n    local max_j=0\n\
    \    local max_tmp=0\n    local max_index=0\n    local max_index_tmp=0\n    local\
    \ max_index_i=0\n    local max_index_j=0\n    local max_index_tmp=0\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[$i]}\
    \ -gt ${arr[$j]} ]]; then\n                tmp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n\
    \                arr[$j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<len; i++)); do\n        echo ${arr[$i]}\n    done\n    for ((i=0; i<len;\
    \ i++)); do\n        max_i=${arr[$i]}\n        max_index_i=$i\n        for ((j=i+1;\
    \ j<len; j++)); do\n            max_j=${arr[$j]}\n            max_index_j=$j\n\
    \            if [[ $max_i -lt $max_j ]]; then\n                max_tmp=$max_i\n\
    \                max_i=$max_j\n                max_j=$max_tmp\n              \
    \  max_index_tmp=$max_index_i\n                max_index_i=$max_index_j\n    \
    \            max_index_j=$max_index_tmp\n            fi\n        done\n      \
    \  max[$max_index_i]=$max_i\n        max_index[$max_index_i]=$max_index_i\n  \
    \  done\n    for ((i=0; i<k; i++)); do\n        echo ${max[$i]}\n    done\n}\n\
    \ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcmc1oe8m.sh: line 39: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    /tmp/tmpcmc1oe8m.sh: line 55: [[: -3 -4 5: syntax error in expression (error token
    is "5")

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=(\"$@\"\
    )\n    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n  \
    \  local tmp=0\n    local max=0\n    local max_idx=0\n    local res=()\n    for\
    \ ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_idx=0\n        for\
    \ ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n \
    \               max=${arr[j]}\n                max_idx=$j\n            fi\n  \
    \      done\n        res[i]=$max\n        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n\
    \        arr[max_idx]=$tmp\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgbyxuq3s.sh: line 34: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i n=0\n    local\
    \ -i tmp=0\n    local -i max=0\n    local -i max_idx=0\n    local -i max_idx_tmp=0\n\
    \    local -i max_idx_tmp2=0\n    local -i max_idx_tmp3=0\n    local -i max_idx_tmp4=0\n\
    \    local -i max_idx_tmp5=0\n    local -i max_idx_tmp6=0\n    local -i max_idx_tmp7=0\n\
    \    local -i max_idx_tmp8=0\n    local -i max_idx_tmp9=0\n    local -i max_idx_tmp10=0\n\
    \    local -i max_idx_tmp11=0\n    local -i max_idx_tmp12=0\n    local -i max_idx_tmp13=0\n\
    \    local -i max_idx_tmp14=0\n    local -i max_idx_tmp15=0\n    local -i max_idx_tmp16=0\n\
    \    local -i max_idx_tmp17=0\n    local -i max_idx_tmp18=0\n    local -i max_idx_tmp19=0\n\
    \    local -i max_idx_tmp20=0\n    local -i max_idx_tmp21=0\n    local -i max_idx_tmp22=0\n\
    \    local -i max_idx_tmp23=0\n    local -i max_idx_tmp24=0\n    local -i max_idx_tmp25=0\n\
    \    local -i max_idx_tmp26=0\n    local -i max_idx_tmp27=0\n    local -i max_idx_tmp28=0\n\
    \    local -i max_idx_tmp29=0\n    local -i max_idx_tmp30=0\n    local -i max_idx_tmp31=0\n\
    \    local -i max_idx_tmp32\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local max=0\n    local max_idx=0\n    local result=()\n    for ((i=0;\
    \ i<k; i++)); do\n        max=${arr[0]}\n        max_idx=0\n        for ((j=1;\
    \ j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n        \
    \        max=${arr[j]}\n                max_idx=$j\n            fi\n        done\n\
    \        result[i]=$max\n        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n\
    \        arr[max_idx]=$tmp\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a res\n    local -i i j\n    for ((i=0; i<k; i++));\
    \ do\n        res[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++));\
    \ do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${res[j]}\
    \ ]]; then\n                res[j]=${arr[i]}\n                break\n        \
    \    fi\n        done\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a result=()\n    local i=0\n    local j=0\n    local\
    \ max=0\n    local max_index=0\n    local len=${#arr[@]}\n    for ((i=0; i<k;\
    \ i++)); do\n        max=${arr[0]}\n        max_index=0\n        for ((j=1; j<len-i;\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        result[i]=$max\n\
    \        arr[max_index]=${arr[len-i-1]}\n    done\n    echo ${result[@]}\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992197
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local k=\"$2\"\n    local -a max\n    local i=0\n    local j=0\n  \
    \  local len=${#arr[@]}\n    local max_len=0\n    local tmp=0\n    local max_idx=0\n\
    \    local max_val=0\n    local max_val_idx=0\n    local max_val_idx_tmp=0\n \
    \   local max_val_tmp=0\n    local max_val_idx_tmp=0\n    local max_val_tmp=0\n\
    \    local max_val_idx_tmp=0\n    local max_val_tmp=0\n    local max_val_idx_tmp=0\n\
    \    local max_val_tmp=0\n    local max_val_idx_tmp=0\n    local max_val_tmp=0\n\
    \    local max_val_idx_tmp=0\n    local max_val_tmp=0\n    local max_val_idx_tmp=0\n\
    \    local max_val_tmp=0\n    local max_val_idx_tmp=0\n    local max_val_tmp=0\n\
    \    local max_val_idx_tmp=0\n    local max_val_tmp=0\n    local max_val_idx_tmp=0\n\
    \    local max_val_tmp=0\n    local max_val_idx_tmp=0\n    local max_val_tmp=0\n\
    \    local max_val_idx_tmp=0\n    local max_val_tmp=0\n    local max_val_idx_tmp=0\n\
    \    local max_val_tmp=0\n    local max_val_idx_tmp=0\n    local max_val_tmp=0\n\
    \    local max_val_idx_tmp=0\n    local max_val_tmp=0\n    local max_val_idx_tmp=0\n\
    \    local max_val_tmp=0\n    local max_val_idx_tmp=0\n    local max_val_tmp=0\n\
    \    local max_val_idx_tmp=0\n    local max_val_tmp=0\n    local max_val_id\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if ((${arr[i]} < ${arr[j]})); then\n                local tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992197
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local k=0\n    local -a max=()\n    local i=0\n    local j=0\n    local tmp=0\n\
    \    local len=0\n    local -a result=()\n\n    arr=($1)\n    k=$2\n    len=${#arr[@]}\n\
    \    if [ $len -eq 0 ]; then\n        echo \"Empty array\"\n        return 1\n\
    \    fi\n    if [ $k -gt $len ]; then\n        echo \"k is greater than the length\
    \ of the array\"\n        return 1\n    fi\n    if [ $k -eq 0 ]; then\n      \
    \  echo \"k is zero\"\n        return 1\n    fi\n    for ((i=0; i<$k; i++)); do\n\
    \        max[$i]=${arr[$i]}\n    done\n    for ((i=0; i<$k; i++)); do\n      \
    \  for ((j=$i; j<$k; j++)); do\n            if [ ${max[$i]} -lt ${max[$j]} ];\
    \ then\n                tmp=${max[$i]}\n                max[$i]=${max[$j]}\n \
    \               max[$j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=$k; i<$len; i++)); do\n        for ((j=0; j<$k; j++)); do\n            if\
    \ [ ${max[$j]} -lt ${arr[$i]} ]; then\n                max[$j]=${arr[$i]}\n  \
    \              break\n            fi\n        done\n    done\n    for ((i=0; i<$k;\
    \ i++)); do\n        result[$i]=${max[$i]}\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a max\n    local i\n    local j\n    local n\n   \
    \ local m\n\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n    done\n\
    \    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++)); do\n \
    \           if [[ ${arr[i]} -gt ${max[j]} ]]; then\n                for ((n=k-1;\
    \ n>j; n--)); do\n                    max[n]=${max[n-1]}\n                done\n\
    \                max[j]=${arr[i]}\n                break\n            fi\n   \
    \     done\n    done\n    for ((i=0; i<k; i++)); do\n        echo -n \"${max[i]}\
    \ \"\n    done\n    echo\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_2ciwdgs.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i\
    \ max_i\n    local -i tmp\n    arr=($1)\n    k=$2\n    for ((i=0; i<k; i++));\
    \ do\n        max=${arr[i]}\n        max_i=$i\n        for ((j=i+1; j<${#arr[@]};\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_i=$j\n            fi\n        done\n        tmp=${arr[i]}\n\
    \        arr[i]=${arr[max_i]}\n        arr[max_i]=$tmp\n    done\n    echo ${arr[@]:0:k}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local k=$2\n    local -a max\n    local i\n    for ((i=0; i<k; i++));\
    \ do\n        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++));\
    \ do\n        local j\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${max[j]} ]]; then\n                local tmp=${max[j]}\n              \
    \  max[j]=${arr[i]}\n                arr[i]=$tmp\n            fi\n        done\n\
    \    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local i=0\n    local j=0\n    local tmp=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local i j\n    for ((i=0; i<k; i++)); do\n        for ((j=i+1;\
    \ j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n\
    \                local tmp=${arr[i]}\n                arr[i]=${arr[j]}\n     \
    \           arr[j]=$tmp\n            fi\n        done\n    done\n    echo ${arr[@]:0:k}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptpr8xjny.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local res=()\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           tmp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$tmp\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   res[i]=${arr[i]}\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=$2\n    local -i i=0 j=0\n    local -i n=${#arr[@]}\n  \
    \  local -i max=0\n    local -a res\n    for ((i=0; i<k; i++)); do\n        max=0\n\
    \        for ((j=0; j<n; j++)); do\n            if [[ ${arr[j]} -gt ${arr[max]}\
    \ ]]; then\n                max=$j\n            fi\n        done\n        res[i]=${arr[max]}\n\
    \        arr[max]=${arr[n-1]}\n        n=$n-1\n    done\n    echo \"${res[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsdtjcyil.sh: line 30: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    /tmp/tmpsdtjcyil.sh: line 30: [[: -3 -4 5: syntax error in expression (error token
    is "5")

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local k=$2\n    local -a res\n    for ((i=0; i<k; i++)); do\n     \
    \   local max=${arr[0]}\n        local max_index=0\n        for ((j=1; j<${#arr[@]};\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        res+=($max)\n\
    \        unset arr[$max_index]\n        arr=(\"${arr[@]}\")\n    done\n    echo\
    \ \"${res[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmffns32l.sh: line 28: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local max=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        if [[ ${#max[@]} -lt $k ]]; then\n \
    \           max+=(\"${arr[$i]}\")\n        else\n            for ((j=0; j<k; j++));\
    \ do\n                if [[ ${arr[$i]} -gt ${max[$j]} ]]; then\n             \
    \       max[$j]=${arr[$i]}\n                    break\n                fi\n  \
    \          done\n        fi\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1n5q4_rf.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=(\"$@\"\
    )\n    local k=$2\n    local max=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    local max_index=0\n    local max_value=${arr[0]}\n    while [ $i -lt $k ];\
    \ do\n        max_value=${arr[0]}\n        max_index=0\n        for j in $(seq\
    \ 0 $((len-1))); do\n            if [ ${arr[$j]} -gt $max_value ]; then\n    \
    \            max_value=${arr[$j]}\n                max_index=$j\n            fi\n\
    \        done\n        max[$i]=$max_value\n        unset arr[$max_index]\n   \
    \     arr=(\"${arr[@]}\")\n        i=$((i+1))\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsfsd4vuq.sh: line 33: [: -3: unary operator expected

    /tmp/tmpsfsd4vuq.sh: line 33: [: too many arguments

    /tmp/tmpsfsd4vuq.sh: line 33: [: -gt: unary operator expected

    '
  stdout: ''
  timestamp: 1659992197
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a result\n    local -a max_heap\n    local -i i=0\n\
    \    local -i j=0\n    local -i n=${#arr[@]}\n    local -i m=0\n    local -i tmp=0\n\
    \    local -i index=0\n    local -i left=0\n    local -i right=0\n    local -i\
    \ largest=0\n    local -i heap_size=0\n    local -i parent=0\n    local -i tmp_index=0\n\
    \    local -i tmp_value=0\n    local -i tmp_index2=0\n    local -i tmp_value2=0\n\
    \    local -i tmp_index3=0\n    local -i tmp_value3=0\n    local -i tmp_index4=0\n\
    \    local -i tmp_value4=0\n    local -i tmp_index5=0\n    local -i tmp_value5=0\n\
    \    local -i tmp_index6=0\n    local -i tmp_value6=0\n    local -i tmp_index7=0\n\
    \    local -i tmp_value7=0\n    local -i tmp_index8=0\n    local -i tmp_value8=0\n\
    \    local -i tmp_index9=0\n    local -i tmp_value9=0\n    local -i tmp_index10=0\n\
    \    local -i tmp_value10=0\n    local -i tmp_index11=0\n    local -i tmp_value11=0\n\
    \    local -i tmp_index12=0\n    local -i tmp_value12=0\n    local -i tmp_index13=0\n\
    \    local -i tmp_value13=0\n    local -i tmp_index14=0\n    local -i tmp_value14=0\n\
    \    local -i tmp_index15=0\n    local -i tmp_value15=0\n    local -i tmp_index16=0\n\
    \    local -i tmp_value16=0\n    local -i tmp_index17=0\n    local -i tmp_value17=0\n\
    \    local -i tmp_index18=0\n    local\n}\n\ncandidate() {\n    maximum \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i tmp=0\n  \
    \  local -i len=0\n    local -i max=0\n    local -i max_idx=0\n    local -i min=0\n\
    \    local -i min_idx=0\n    local -i ret=0\n    local -i ret_idx=0\n    local\
    \ -i ret_len=0\n    local -i ret_max=0\n    local -i ret_min=0\n    local -i ret_max_idx=0\n\
    \    local -i ret_min_idx=0\n    local -i ret_tmp=0\n    local -i ret_tmp_idx=0\n\
    \    local -i ret_tmp_len=0\n    local -i ret_tmp_max=0\n    local -i ret_tmp_min=0\n\
    \    local -i ret_tmp_max_idx=0\n    local -i ret_tmp_min_idx=0\n    local -i\
    \ ret_tmp_tmp=0\n    local -i ret_tmp_tmp_idx=0\n    local -i ret_tmp_tmp_len=0\n\
    \    local -i ret_tmp_tmp_max=0\n    local -i ret_tmp_tmp_min=0\n    local -i\
    \ ret_tmp_tmp_max_idx=0\n    local -i ret_tmp_tmp_min_idx=0\n    local -i ret_tmp_tmp_tmp=0\n\
    \    local -i ret_tmp_tmp_tmp_idx=0\n    local -i ret_tmp_tmp_tmp_len=0\n    local\
    \ -i ret_tmp_tmp_tmp_max=0\n    local -i ret_tmp_tmp_tmp_min=0\n    local -i ret_tmp_tmp_tmp_max_idx=0\n\
    \    local -i ret_tmp_tmp_tmp_min_idx=0\n    local -i ret_tmp_tmp_tmp_tmp=0\n\
    \    local -i ret_tmp_tmp_tmp_tmp_idx=0\n    local -i ret_\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992197
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i j tmp\n    for ((i=0; i<len;\
    \ i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local k=$2\n    local -a result=()\n    local -i i=0\n    local -i\
    \ j=0\n    local -i len=${#arr[@]}\n    local -i max=0\n    local -i max_index=0\n\
    \    local -i tmp=0\n    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n  \
    \      max_index=0\n        for ((j=1; j<len-i; j++)); do\n            tmp=${arr[j]}\n\
    \            if ((tmp > max)); then\n                max=$tmp\n              \
    \  max_index=$j\n            fi\n        done\n        result[i]=$max\n      \
    \  arr[max_index]=${arr[len-i-1]}\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppqcbgalw.sh: line 31: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1659992197
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local k=${arr[-1]}\n    unset arr[-1]\n    local -a max=()\n    for\
    \ ((i=0; i<${#arr[@]}; i++)); do\n        if ((${#max[@]} < k)); then\n      \
    \      max+=(${arr[i]})\n        else\n            local min=${max[0]}\n     \
    \       local min_index=0\n            for ((j=1; j<${#max[@]}; j++)); do\n  \
    \              if ((min > max[j])); then\n                    min=${max[j]}\n\
    \                    min_index=$j\n                fi\n            done\n    \
    \        if ((arr[i] > min)); then\n                max[min_index]=${arr[i]}\n\
    \            fi\n        fi\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992197
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n\
    \            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyrjdid89.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local i=0\n    local j=0\n    local tmp=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]}\
    \ \"\n    done\n    echo\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    for (( i=0; i<len; i++ )); do\n        if [[ ${#max[@]} -lt $k ]]; then\n\
    \            max+=(${arr[$i]})\n        else\n            for (( j=0; j<k; j++\
    \ )); do\n                if [[ ${arr[$i]} -gt ${max[$j]} ]]; then\n         \
    \           max[$j]=${arr[$i]}\n                    break\n                fi\n\
    \            done\n        fi\n    done\n    echo ${max[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992197
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local k=$2\n    local -a res=()\n    local -a tmp=()\n    local i=0\n\
    \    local j=0\n    local n=${#arr[@]}\n    local m=0\n    local max=0\n    local\
    \ max_i=0\n    local max_j=0\n    local tmp_i=0\n    local tmp_j=0\n    local\
    \ tmp_max=0\n    local tmp_max_i=0\n    local tmp_max_j=0\n    local tmp_n=0\n\
    \    local tmp_m=0\n    local tmp_k=0\n    local tmp_res=()\n    local tmp_tmp=()\n\
    \    local tmp_arr=()\n    local tmp_arr_i=0\n    local tmp_arr_j=0\n    local\
    \ tmp_arr_n=0\n    local tmp_arr_m=0\n    local tmp_arr_k=0\n    local tmp_arr_res=()\n\
    \    local tmp_arr_tmp=()\n    local tmp_arr_arr=()\n    local tmp_arr_arr_i=0\n\
    \    local tmp_arr_arr_j=0\n    local tmp_arr_arr_n=0\n    local tmp_arr_arr_m=0\n\
    \    local tmp_arr_arr_k=0\n    local tmp_arr_arr_res=()\n    local tmp_arr_arr_tmp=()\n\
    \    local tmp_arr_arr_arr=()\n    local tmp_arr_arr_arr_i=0\n    local tmp_arr_arr_arr_j=0\n\
    \    local tmp_arr_arr_arr_n=0\n    local tmp_arr_arr_arr_m=0\n    local tmp_arr_arr_arr_k=0\n\
    \    local tmp_arr_arr_arr_res=()\n    local tmp_arr_arr_arr_tmp=()\n    local\
    \ tmp_arr_arr_arr_arr=()\n    local tmp_arr_arr_arr_arr_i=0\n    local tmp_arr_arr_arr_arr_j=0\n\
    \    local tmp_arr_arr_arr_arr_n=0\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992197
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local max=()\n    local i=0\n \
    \   local j=0\n    local max_i=0\n    local max_j=0\n    local max_val=0\n   \
    \ local temp=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++));\
    \ do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]; then\n                temp=${arr[$i]}\n\
    \                arr[$i]=${arr[$j]}\n                arr[$j]=$temp\n         \
    \   fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n        max[$i]=${arr[$i]}\n\
    \    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local result=()\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           tmp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$tmp\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   result[i]=${arr[i]}\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local result=()\n    local result_len=0\n    local max=0\n    local\
    \ max_index=0\n    local max_count=0\n    local max_count_index=0\n    local max_count_value=0\n\
    \    local max_count_value_index=0\n    local max_count_value_count=0\n    local\
    \ max_count_value_count_index=0\n    local max_count_value_count_value=0\n   \
    \ local max_count_value_count_value_index=0\n    local max_count_value_count_value_count=0\n\
    \    local max_count_value_count_value_count_index=0\n    local max_count_value_count_value_count_value=0\n\
    \    local max_count_value_count_value_count_value_index=0\n    local max_count_value_count_value_count_value_count=0\n\
    \    local max_count_value_count_value_count_value_count_index=0\n    local max_count_value_count_value_count_value_count_value=0\n\
    \    local max_count_value_count_value_count_value_count_value_index=0\n    local\
    \ max_count_value_count_value_count_value_count_value_count=0\n    local max_count_value_count_value_count_value_count_value_count_index=0\n\
    \    local max_count_value_count_value_count_value_count_value_count_value=0\n\
    \    local max_count_value_count_value_count_value_count_value_count_value_index=0\n\
    \    local max_count_value_count_value_count_value_count_value_count_value_count=0\n\
    \    local max_count_value_count_value_count_value_count_value_count_value_count_index=0\n\
    \    local max_count_value_count_value_count_value_count_value_count_\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992197
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=(\"$@\"\
    )\n    local max=${arr[0]}\n    for i in \"${arr[@]}\"; do\n        if [[ $i -gt\
    \ $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplk7joqcd.sh: line 24: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    /tmp/tmplk7joqcd.sh: line 24: [[: -3 -4 5: syntax error in expression (error token
    is "5")

    '
  stdout: ''
  timestamp: 1659992197
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    for ((i=0; i<$len; i++)); do\n        for ((j=i+1; j<$len; j++));\
    \ do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<$k; i++)); do\n        echo -n \"${arr[i]}\
    \ \"\n    done\n    echo\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992197
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    while [ $i -lt $k ]\n    do\n        max[$i]=${arr[$i]}\n        i=$((i+1))\n\
    \    done\n    while [ $i -lt $len ]\n    do\n        j=0\n        while [ $j\
    \ -lt $k ]\n        do\n            if [ ${arr[$i]} -gt ${max[$j]} ]\n       \
    \     then\n                max[$j]=${arr[$i]}\n                break\n      \
    \      fi\n            j=$((j+1))\n        done\n        i=$((i+1))\n    done\n\
    \    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local max=0\n    local max_idx=0\n    local result=()\n    for ((i=0;\
    \ i<k; i++)); do\n        max=${arr[0]}\n        max_idx=0\n        for ((j=1;\
    \ j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n        \
    \        max=${arr[j]}\n                max_idx=$j\n            fi\n        done\n\
    \        result[i]=$max\n        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n\
    \        arr[max_idx]=$tmp\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n\
    \            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]}\
    \ \"\n    done\n    echo\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local max=()\n    for ((i=0; i<len;\
    \ i++)); do\n        if ((${#max[@]} < k)); then\n            max+=(${arr[i]})\n\
    \        else\n            local max_i=0\n            for ((j=1; j<k; j++)); do\n\
    \                if ((max[j] > max[max_i])); then\n                    max_i=$j\n\
    \                fi\n            done\n            if ((arr[i] > max[max_i]));\
    \ then\n                max[max_i]=${arr[i]}\n            fi\n        fi\n   \
    \ done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992197
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n    local\
    \ max=0\n    local tmp=0\n    local result=()\n    for ((i=0; i<len; i++)); do\n\
    \        max=${arr[$i]}\n        for ((j=i+1; j<len; j++)); do\n            if\
    \ [ ${arr[$j]} -gt $max ]; then\n                tmp=${arr[$i]}\n            \
    \    arr[$i]=${arr[$j]}\n                arr[$j]=$tmp\n                max=${arr[$i]}\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   result[$i]=${arr[$i]}\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992197
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local result=()\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           tmp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$tmp\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   result[i]=${arr[i]}\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n\
    \            if ((arr[i] < arr[j])); then\n                tmp=${arr[i]}\n   \
    \             arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992197
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local max=0\n    local max_idx=0\n    local res=()\n    for ((i=0;\
    \ i<k; i++)); do\n        max=${arr[i]}\n        max_idx=$i\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n          \
    \      max=${arr[j]}\n                max_idx=$j\n            fi\n        done\n\
    \        tmp=${arr[i]}\n        arr[i]=$max\n        arr[max_idx]=$tmp\n     \
    \   res[i]=$max\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992197
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ temp=0\n    local max=0\n    local max_index=0\n    local result=()\n    for\
    \ ((i=0; i<k; i++)); do\n        max=${arr[i]}\n        max_index=$i\n       \
    \ for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n\
    \                max=${arr[j]}\n                max_index=$j\n            fi\n\
    \        done\n        temp=${arr[i]}\n        arr[i]=$max\n        arr[max_index]=$temp\n\
    \        result[i]=$max\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992197
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    # Convert the space-separated\
    \ list to an array\n    local -n arr=$1\n    local k=$2\n    # Sort the array\
    \ in descending order\n    mapfile -t arr < <(printf '%s\\n' \"${arr[@]}\" | sort\
    \ -nr)\n    # Print the first k elements\n    printf '%s\\n' \"${arr[@]:0:$k}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdootq97k.sh: line 22: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1659992197
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    for i in ${arr[@]}; do\n        if [[ ${#max[@]}\
    \ -lt $k ]]; then\n            max+=($i)\n        else\n            for j in ${!max[@]};\
    \ do\n                if [[ ${max[$j]} -lt $i ]]; then\n                    max[$j]=$i\n\
    \                    break\n                fi\n            done\n        fi\n\
    \    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992197
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    if [ $# -ne 2 ];\
    \ then\n        echo \"Usage: maximum <space-separated list> <integer>\"\n   \
    \     return 1\n    fi\n    local list=$1\n    local k=$2\n    local arr\n   \
    \ IFS=' ' read -r -a arr <<< \"$list\"\n    local len=${#arr[@]}\n    if [ $k\
    \ -gt $len ]; then\n        echo \"The length of the array is less than the given\
    \ k\"\n        return 1\n    fi\n    local i=0\n    while [ $i -lt $k ]; do\n\
    \        local j=$i\n        while [ $j -lt $len ]; do\n            if [ ${arr[$i]}\
    \ -lt ${arr[$j]} ]; then\n                local tmp=${arr[$i]}\n             \
    \   arr[$i]=${arr[$j]}\n                arr[$j]=$tmp\n            fi\n       \
    \     j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo \"${arr[@]:0:$k}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992197
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i j\n    for ((i=0; i<len;\
    \ i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                local tmp=${arr[i]}\n              \
    \  arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n        done\n\
    \    done\n    for ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n   \
    \ done\n    echo\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992196
