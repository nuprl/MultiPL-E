language: sh
name: HumanEval_128_prod_signs
results:
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    if [ -z \"$1\" ]; then\n        echo \"None\"\n    else\n\
    \        echo $1 | tr ' ' '\\n' | awk '{\n            if ($1 > 0) {\n        \
    \        sign = 1\n            } else if ($1 < 0) {\n                sign = -1\n\
    \            } else {\n                sign = 0\n            }\n            prod\
    \ *= sign\n            sum += sign * $1\n        } END {\n            if (sum\
    \ == 0) {\n                print \"None\"\n            } else {\n            \
    \    print prod * sum\n            }\n        }'\n    fi\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [ $i -lt 0 ]; then\n            prod=$((prod\
    \ * -1))\n        elif [ $i -gt 0 ]; then\n            prod=$((prod * 1))\n  \
    \      else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -gt 0 ]]; then\n            prod=$((prod\
    \ * 1))\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod * -1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in \"\
    ${arr[@]}\"; do\n    if [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    elif\
    \ [ $i -gt 0 ]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in\
    \ \"${arr[@]}\"; do\n    if [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n  \
    \  elif [ $i -gt 0 ]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod\
    \ * 0))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_nm3nqj6.sh: line 17: [: too many arguments

    /tmp/tmp_nm3nqj6.sh: line 19: [: too many arguments

    /tmp/tmp_nm3nqj6.sh: line 24: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  if [ -z \"$1\" ]; then\n    echo \"None\"\n  else\n    local\
    \ prod=1\n    local sum=0\n    for i in $1; do\n      if [ $i -lt 0 ]; then\n\
    \        prod=$((prod * -1))\n      elif [ $i -gt 0 ]; then\n        prod=$((prod\
    \ * 1))\n      else\n        prod=0\n      fi\n      sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n  fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in\
    \ \"${arr[@]}\"; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n\
    \    elif [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwl4d2b4d.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpwl4d2b4d.sh: line 20: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpwl4d2b4d.sh: line 23: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [ $i -gt 0 ]; then\n            sum=$((sum +\
    \ i))\n            prod=$((prod * 1))\n        elif [ $i -lt 0 ]; then\n     \
    \       sum=$((sum + i * -1))\n            prod=$((prod * -1))\n        fi\n \
    \   done\n    if [ ${#arr[@]} -eq 0 ]; then\n        echo None\n    else\n   \
    \     echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [ $i -lt 0 ]; then\n            prod=$((prod\
    \ * -1))\n        elif [ $i -gt 0 ]; then\n            prod=$((prod * 1))\n  \
    \      else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [ $i -lt 0 ]; then\n      prod=$((prod*-1))\n    elif [ $i -gt 0\
    \ ]; then\n      prod=$((prod*1))\n    else\n      prod=$((prod*0))\n    fi\n\
    \    sum=$((sum+i))\n  done\n  echo $((sum*prod))\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  for i in \"${arr[@]}\"; do\n        if [[ $i -gt 0 ]]; then\n            sum=$((sum\
    \ + i))\n            prod=$((prod * 1))\n        elif [[ $i -lt 0 ]]; then\n \
    \           sum=$((sum + i * -1))\n            prod=$((prod * -1))\n        else\n\
    \            prod=$((prod * 0))\n        fi\n    done\n    if [[ $prod -eq 0 ]];\
    \ then\n        echo None\n    else\n        echo $((sum * prod))\n    fi\n}\n\
    \ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa215a88d.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpa215a88d.sh: line 20: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    local\
    \ sign=0\n    for i in ${arr[@]}; do\n        if [ $i -gt 0 ]; then\n        \
    \    sign=1\n        elif [ $i -lt 0 ]; then\n            sign=-1\n        else\n\
    \            sign=0\n        fi\n        sum=$(( $sum + $i ))\n        prod=$((\
    \ $prod * $sign ))\n    done\n    if [ ${#arr[@]} -eq 0 ]; then\n        echo\
    \ None\n    else\n        echo $(( $sum * $prod ))\n    fi\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    local\
    \ i=0\n    if [[ ${#arr[@]} -eq 0 ]]; then\n        echo \"None\"\n    else\n\
    \        for i in ${arr[@]}; do\n            if [[ $i -eq 0 ]]; then\n       \
    \         prod=0\n                break\n            elif [[ $i -lt 0 ]]; then\n\
    \                prod=$((prod * -1))\n            fi\n            sum=$((sum +\
    \ i))\n        done\n        echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    if [ -z \"$1\" ]; then\n        echo \"None\"\n    else\n\
    \        local prod=1\n        local sum=0\n        for i in $@; do\n        \
    \    if [ $i -gt 0 ]; then\n                prod=$((prod * 1))\n            elif\
    \ [ $i -lt 0 ]; then\n                prod=$((prod * -1))\n            else\n\
    \                prod=0\n            fi\n            sum=$((sum + i))\n      \
    \  done\n        echo $((prod * sum))\n    fi\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -gt 0 ]]; then\n            sum=$((sum\
    \ + i))\n            prod=$((prod * 1))\n        elif [[ $i -lt 0 ]]; then\n \
    \           sum=$((sum + i * -1))\n            prod=$((prod * -1))\n        fi\n\
    \    done\n    if [[ $sum -eq 0 ]]; then\n        echo None\n    else\n      \
    \  echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n  \
    \          break\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        fi\n        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  for i in \"${arr[@]}\"; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n\
    \            break\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        fi\n        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn1byfbzi.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpn1byfbzi.sh: line 20: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpn1byfbzi.sh: line 23: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -gt 0 ]]; then\n            sum=$((sum\
    \ + i))\n            prod=$((prod * 1))\n        elif [[ $i -lt 0 ]]; then\n \
    \           sum=$((sum + i * -1))\n            prod=$((prod * -1))\n        fi\n\
    \    done\n    if [[ $sum -eq 0 ]]; then\n        echo None\n    else\n      \
    \  echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=$1\n  local sum=0\n  local prod=1\n  for i in $arr;\
    \ do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [ $i -gt 0 ]; then\n      sum=$((sum + i))\n      prod=$((prod *\
    \ 1))\n    elif [ $i -lt 0 ]; then\n      sum=$((sum + i * -1))\n      prod=$((prod\
    \ * -1))\n    else\n      prod=$((prod * 0))\n    fi\n  done\n  if [ $prod -eq\
    \ 0 ]; then\n    echo None\n  else\n    echo $((sum * prod))\n  fi\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    if [ -z \"$1\" ]; then\n        echo \"None\"\n    else\n\
    \        local prod=1\n        local sum=0\n        for n in $1; do\n        \
    \    if [ $n -lt 0 ]; then\n                prod=$((prod * -1))\n            elif\
    \ [ $n -gt 0 ]; then\n                prod=$((prod * 1))\n            fi\n   \
    \         sum=$((sum + n))\n        done\n        echo $((sum * prod))\n    fi\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n  \
    \          break\n        fi\n        sum=$((sum + i))\n        prod=$((prod *\
    \ i / abs(i)))\n    done\n    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3pdyn7o_.sh: line 22: prod * i / abs(i): division by 0 (error token
    is "abs(i)")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in\
    \ \"${arr[@]}\"; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i\
    \ -lt 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((prod * sum))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpoin11s7z.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpoin11s7z.sh: line 19: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpoin11s7z.sh: line 22: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in \"\
    ${arr[@]}\"; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n  \
    \      elif [[ $i -lt 0 ]]; then\n            prod=$((prod * -1))\n        fi\n\
    \        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  if [ ${#arr[@]} -eq 0 ]; then\n        echo \"None\"\n    else\n        for\
    \ i in \"${arr[@]}\"; do\n            if [ $i -eq 0 ]; then\n                prod=0\n\
    \                break\n            elif [ $i -lt 0 ]; then\n                prod=$((prod\
    \ * -1))\n            fi\n            sum=$((sum + i))\n        done\n       \
    \ echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpvg59femq.sh: line 20: [: too many arguments

    /tmp/tmpvg59femq.sh: line 23: [: too many arguments

    /tmp/tmpvg59femq.sh: line 26: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local sum=0\n    local prod=1\n    for i in $1; do\n     \
    \   if [ $i -lt 0 ]; then\n            prod=$((prod * -1))\n        elif [ $i\
    \ -gt 0 ]; then\n            prod=$((prod * 1))\n        else\n            prod=0\n\
    \        fi\n        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n}\n\
    \ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  local sign=0\n\
    \  for i in ${arr[@]}; do\n    if [[ $i -gt 0 ]]; then\n      sign=1\n    elif\
    \ [[ $i -lt 0 ]]; then\n      sign=-1\n    else\n      sign=0\n    fi\n    sum=$((sum\
    \ + i))\n    prod=$((prod * sign))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n  \
    \          break\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        fi\n        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    elif [ $i -gt\
    \ 0 ]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  local i\n    for i in \"${arr[@]}\"; do\n        if [[ $i -lt 0 ]]; then\n\
    \            prod=$((prod * -1))\n        elif [[ $i -gt 0 ]]; then\n        \
    \    prod=$((prod * 1))\n        else\n            prod=0\n        fi\n      \
    \  sum=$((sum + i))\n    done\n    echo $((sum * prod))\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf4cvpt2l.sh: line 18: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpf4cvpt2l.sh: line 20: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpf4cvpt2l.sh: line 25: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  for i in \"${arr[@]}\"; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=$((prod * 0))\n        fi\n        sum=$((sum\
    \ + i))\n    done\n    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf9_wr513.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpf9_wr513.sh: line 19: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpf9_wr513.sh: line 24: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  local i\n    for i in \"${arr[@]}\"; do\n        if [[ $i -eq 0 ]]; then\n\
    \            prod=0\n            break\n        elif [[ $i -lt 0 ]]; then\n  \
    \          prod=$((prod * -1))\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp5x9s9nu0.sh: line 18: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp5x9s9nu0.sh: line 21: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp5x9s9nu0.sh: line 24: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    # write your code here\n    if [ -z \"$1\" ]; then\n     \
    \   echo \"None\"\n    else\n        local sum=0\n        local prod=1\n     \
    \   for i in $1; do\n            if [ $i -lt 0 ]; then\n                prod=$((prod\
    \ * -1))\n            elif [ $i -gt 0 ]; then\n                prod=$((prod *\
    \ 1))\n            else\n                prod=$((prod * 0))\n            fi\n\
    \            sum=$((sum + i))\n        done\n        echo $((sum * prod))\n  \
    \  fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    elif [ $i -gt\
    \ 0 ]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in\
    \ \"${arr[@]}\"; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n\
    \    elif [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwl4d2b4d.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpwl4d2b4d.sh: line 20: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpwl4d2b4d.sh: line 23: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    local\
    \ sign=0\n    local n=0\n    for n in ${arr[@]}; do\n        if [[ $n -gt 0 ]];\
    \ then\n            sign=1\n        elif [[ $n -lt 0 ]]; then\n            sign=-1\n\
    \        else\n            sign=0\n        fi\n        sum=$((sum + n))\n    \
    \    prod=$((prod * sign))\n    done\n    if [[ $sum -eq 0 ]]; then\n        echo\
    \ None\n    else\n        echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n \
    \   prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    if [ -z \"$1\" ]; then\n        echo \"None\"\n    else\n\
    \        local prod=1\n        local sum=0\n        for i in $1; do\n        \
    \    if [ $i -lt 0 ]; then\n                prod=$((prod * -1))\n            elif\
    \ [ $i -gt 0 ]; then\n                prod=$((prod * 1))\n            else\n \
    \               prod=0\n            fi\n            sum=$((sum + i))\n       \
    \ done\n        echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [ $i -lt 0 ]; then\n            prod=$((prod\
    \ * -1))\n        elif [ $i -gt 0 ]; then\n            prod=$((prod * 1))\n  \
    \      else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [ $i -gt 0 ]; then\n            sum=$((sum +\
    \ i))\n            prod=$((prod * 1))\n        elif [ $i -lt 0 ]; then\n     \
    \       sum=$((sum + i * -1))\n            prod=$((prod * -1))\n        else\n\
    \            prod=$((prod * 0))\n        fi\n    done\n    if [ $prod -eq 0 ];\
    \ then\n        echo None\n    else\n        echo $((sum * prod))\n    fi\n}\n\
    \ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    fi\n    if [[\
    \ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n\
    \  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 0
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=$1\n    local sum=0\n    local prod=1\n    for i\
    \ in $arr; do\n        if [[ $i -gt 0 ]]; then\n            sum=$((sum + i))\n\
    \            prod=$((prod * 1))\n        elif [[ $i -lt 0 ]]; then\n         \
    \   sum=$((sum + i * -1))\n            prod=$((prod * -1))\n        else\n   \
    \         sum=$((sum + 0))\n            prod=$((prod * 0))\n        fi\n    done\n\
    \    if [[ $sum -eq 0 ]]; then\n        echo \"None\"\n    else\n        echo\
    \ $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -gt 0 ]]; then\n            prod=$((prod\
    \ * 1))\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod * -1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -gt 0 ]]; then\n            sum=$((sum\
    \ + i))\n            prod=$((prod * 1))\n        elif [[ $i -lt 0 ]]; then\n \
    \           sum=$((sum + i * -1))\n            prod=$((prod * -1))\n        fi\n\
    \    done\n    if [[ $sum -eq 0 ]]; then\n        echo None\n    else\n      \
    \  echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  for i in \"${arr[@]}\"; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n\
    \            break\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        fi\n        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn1byfbzi.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpn1byfbzi.sh: line 20: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpn1byfbzi.sh: line 23: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -gt 0 ]]; then\n            prod=$((prod\
    \ * 1))\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod * -1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    if\
    \ [ ${#arr[@]} -eq 0 ]; then\n        echo \"None\"\n    else\n        for i in\
    \ ${arr[@]}; do\n            if [ $i -lt 0 ]; then\n                prod=$((prod\
    \ * -1))\n            elif [ $i -eq 0 ]; then\n                prod=0\n      \
    \          break\n            fi\n            sum=$((sum + i))\n        done\n\
    \        echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n  \
    \  [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\")\
    \ = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -gt 0 ]]; then\n            sum=$((sum\
    \ + i))\n            prod=$((prod * 1))\n        elif [[ $i -lt 0 ]]; then\n \
    \           sum=$((sum + i * -1))\n            prod=$((prod * -1))\n        fi\n\
    \    done\n    if [[ $sum -eq 0 ]]; then\n        echo None\n    else\n      \
    \  echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -gt 0 ]]; then\n      sum=$((sum + i))\n      prod=$((prod\
    \ * 1))\n    elif [[ $i -lt 0 ]]; then\n      sum=$((sum + i * -1))\n      prod=$((prod\
    \ * -1))\n    fi\n  done\n  if [[ $sum -eq 0 ]]; then\n    echo None\n  else\n\
    \    echo $((sum * prod))\n  fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  for i in \"${arr[@]}\"; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=$((prod * 0))\n        fi\n        sum=$((sum\
    \ + i))\n    done\n    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf9_wr513.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpf9_wr513.sh: line 19: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpf9_wr513.sh: line 24: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in \"\
    ${arr[@]}\"; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 0
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -gt 0 ]]; then\n      sum=$((sum + i))\n      prod=$((prod\
    \ * 1))\n    elif [[ $i -lt 0 ]]; then\n      sum=$((sum + i * -1))\n      prod=$((prod\
    \ * -1))\n    else\n      prod=$((prod * 0))\n    fi\n  done\n  if [[ $sum -eq\
    \ 0 ]]; then\n    echo None\n  else\n    echo $((sum * prod))\n  fi\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    local\
    \ sign=0\n    if [ ${#arr[@]} -eq 0 ]; then\n        echo None\n    else\n   \
    \     for i in ${arr[@]}; do\n            if [ $i -eq 0 ]; then\n            \
    \    sign=0\n            elif [ $i -lt 0 ]; then\n                sign=-1\n  \
    \          else\n                sign=1\n            fi\n            sum=$((sum\
    \ + i))\n            prod=$((prod * sign))\n        done\n        echo $((sum\
    \ * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in \"\
    ${arr[@]}\"; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    if [ -z \"$1\" ]; then\n        echo \"None\"\n    else\n\
    \        echo \"$1\" | tr ' ' '\\n' | awk '{\n            sign = $1 < 0 ? -1 :\
    \ ($1 > 0 ? 1 : 0);\n            prod *= sign;\n            sum += sign * $1;\n\
    \        } END {\n            print prod * sum;\n        }'\n    fi\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    fi\n    sum=$((sum\
    \ + i))\n    prod=$((prod * i / abs(i)))\n  done\n  echo $((sum * prod))\n}\n\n\
    candidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqoax66tp.sh: line 22: prod * i / abs(i): division by 0 (error token
    is "abs(i)")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [ $i -lt 0 ]; then\n            prod=$((prod\
    \ * -1))\n        elif [ $i -gt 0 ]; then\n            prod=$((prod * 1))\n  \
    \      else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    if [[ $sum -eq 0 ]]; then\n        echo None\n    else\n        echo $((sum\
    \ * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    if [ -z \"$1\" ]; then\n        echo \"None\"\n    else\n\
    \        local prod=1\n        local sum=0\n        for i in $1; do\n        \
    \    if [ $i -lt 0 ]; then\n                prod=$((prod * -1))\n            elif\
    \ [ $i -gt 0 ]; then\n                prod=$((prod * 1))\n            else\n \
    \               prod=0\n            fi\n            sum=$((sum + i))\n       \
    \ done\n        echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n  \
    \          break\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        fi\n        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    elif [ $i -gt\
    \ 0 ]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [ $i -gt 0 ]; then\n            sum=$((sum +\
    \ i))\n            prod=$((prod * 1))\n        elif [ $i -lt 0 ]; then\n     \
    \       sum=$((sum + i * -1))\n            prod=$((prod * -1))\n        fi\n \
    \   done\n    if [ ${#arr[@]} -eq 0 ]; then\n        echo None\n    else\n   \
    \     echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -gt 0 ]]; then\n            prod=$((prod\
    \ * 1))\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod * -1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [ $i -gt 0 ]; then\n            sum=$((sum +\
    \ i))\n            prod=$((prod * 1))\n        elif [ $i -lt 0 ]; then\n     \
    \       sum=$((sum + i * -1))\n            prod=$((prod * -1))\n        fi\n \
    \   done\n    if [ ${#arr[@]} -eq 0 ]; then\n        echo None\n    else\n   \
    \     echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    fi\n    sum=$((sum\
    \ + i))\n    prod=$((prod * i / abs(i)))\n  done\n  echo $((sum * prod))\n}\n\n\
    candidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqoax66tp.sh: line 22: prod * i / abs(i): division by 0 (error token
    is "abs(i)")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    if [ -z \"$1\" ]; then\n        echo \"None\"\n    else\n\
    \        local prod=1\n        local sum=0\n        for i in $1; do\n        \
    \    if [ $i -lt 0 ]; then\n                prod=$((prod * -1))\n            elif\
    \ [ $i -gt 0 ]; then\n                prod=$((prod * 1))\n            else\n \
    \               prod=0\n            fi\n            sum=$((sum + i))\n       \
    \ done\n        echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    if [ -z \"$1\" ]; then\n        echo \"None\"\n    else\n\
    \        local prod=1\n        local sum=0\n        for i in $1; do\n        \
    \    if [ $i -lt 0 ]; then\n                prod=$((prod * -1))\n            elif\
    \ [ $i -gt 0 ]; then\n                prod=$((prod * 1))\n            else\n \
    \               prod=0\n            fi\n            sum=$((sum + i))\n       \
    \ done\n        echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in\
    \ \"${arr[@]}\"; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n\
    \    elif [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwl4d2b4d.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpwl4d2b4d.sh: line 20: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpwl4d2b4d.sh: line 23: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [ $i -gt 0 ]; then\n            prod=$((prod\
    \ * 1))\n        elif [ $i -lt 0 ]; then\n            prod=$((prod * -1))\n  \
    \      else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in \"\
    ${arr[@]}\"; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif\
    \ [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n   \
    \ fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local -a arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for\
    \ i in \"${arr[@]}\"; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n\
    \    fi\n    sum=$((sum + i))\n    prod=$((prod * i / abs(i)))\n  done\n  echo\
    \ $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqzdb3hwr.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpqzdb3hwr.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  local sign=0\n    for i in \"${arr[@]}\"; do\n        if [[ $i -lt 0 ]]; then\n\
    \            sign=1\n        elif [[ $i -gt 0 ]]; then\n            sign=0\n \
    \       else\n            sign=-1\n        fi\n        prod=$((prod * sign))\n\
    \        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe71cfh6j.sh: line 18: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpe71cfh6j.sh: line 20: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpe71cfh6j.sh: line 26: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local -a arr=(\"$@\")\n    local sum=0\n    local prod=1\n\
    \    for i in \"${arr[@]}\"; do\n        if [[ $i -eq 0 ]]; then\n           \
    \ prod=0\n            break\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        fi\n        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfczv0oua.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpfczv0oua.sh: line 20: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpfczv0oua.sh: line 23: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local prod=1\n    local sum=0\n  \
    \  for i in \"${arr[@]}\"; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n\
    \        elif [[ $i -lt 0 ]]; then\n            prod=$((prod * -1))\n        fi\n\
    \        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp39pzohk9.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp39pzohk9.sh: line 19: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp39pzohk9.sh: line 22: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local -a arr=(\"$@\")\n    local sum=0\n    local prod=1\n\
    \    for i in \"${arr[@]}\"; do\n        if [[ $i -eq 0 ]]; then\n           \
    \ prod=0\n            break\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        fi\n        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfczv0oua.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpfczv0oua.sh: line 20: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpfczv0oua.sh: line 23: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -gt 0 ]]; then\n            prod=$((prod\
    \ * 1))\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod * -1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [ $i -lt 0 ]; then\n            prod=$((prod\
    \ * -1))\n        elif [ $i -gt 0 ]; then\n            prod=$((prod * 1))\n  \
    \      else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local -a arr=($1)\n  local prod=1\n  local sum=0\n  for i in\
    \ \"${arr[@]}\"; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n\
    \    elif [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  for i in \"${arr[@]}\"; do\n        if [ $i -gt 0 ]; then\n            sum=$((sum\
    \ + i))\n            prod=$((prod * 1))\n        elif [ $i -lt 0 ]; then\n   \
    \         sum=$((sum + i * -1))\n            prod=$((prod * -1))\n        fi\n\
    \    done\n    if [ ${#arr[@]} -eq 0 ]; then\n        echo \"None\"\n    else\n\
    \        echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n  \
    \  [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\")\
    \ = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxbtsvb7l.sh: line 17: [: too many arguments

    /tmp/tmpxbtsvb7l.sh: line 20: [: too many arguments

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  local i\n    for i in \"${arr[@]}\"; do\n        if [[ $i -gt 0 ]]; then\n\
    \            sum=$((sum + i))\n            prod=$((prod * 1))\n        elif [[\
    \ $i -lt 0 ]]; then\n            sum=$((sum + (-i)))\n            prod=$((prod\
    \ * -1))\n        fi\n    done\n    if [[ $sum -eq 0 ]]; then\n        echo None\n\
    \    else\n        echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp61ydeqyl.sh: line 18: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp61ydeqyl.sh: line 21: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in\
    \ \"${arr[@]}\"; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n\
    \    elif [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod\
    \ * 0))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr5csr9lj.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpr5csr9lj.sh: line 19: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpr5csr9lj.sh: line 24: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  for i in \"${arr[@]}\"; do\n        if [ \"$i\" -gt 0 ]; then\n           \
    \ sum=$((sum + i))\n            prod=$((prod * 1))\n        elif [ \"$i\" -lt\
    \ 0 ]; then\n            sum=$((sum + i * -1))\n            prod=$((prod * -1))\n\
    \        fi\n    done\n    if [ \"$sum\" -eq 0 ]; then\n        echo \"None\"\n\
    \    else\n        echo \"$((sum * prod))\"\n    fi\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjx3qj26e.sh: line 17: [: 1 2 2 -4: integer expression expected

    /tmp/tmpjx3qj26e.sh: line 20: [: 1 2 2 -4: integer expression expected

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  local i\n \
    \ for i in \"${arr[@]}\"; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod\
    \ * -1))\n    elif [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    else\n\
    \      prod=0\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in \"\
    ${arr[@]}\"; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in \"\
    ${arr[@]}\"; do\n    if [ $i -gt 0 ]; then\n      prod=$((prod * 1))\n    elif\
    \ [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    else\n      prod=0\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -gt 0 ]]; then\n            prod=$((prod\
    \ * 1))\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod * -1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in \"\
    ${arr[@]}\"; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif\
    \ [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n   \
    \ fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [ $i -eq 0 ]; then\n            prod=0\n    \
    \    elif [ $i -lt 0 ]; then\n            prod=$((prod * -1))\n        fi\n  \
    \      sum=$((sum + i))\n    done\n    echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n  \
    \      elif [[ $i -lt 0 ]]; then\n            prod=$((prod * -1))\n        fi\n\
    \        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [ $i -lt 0 ]; then\n            prod=$((prod\
    \ * -1))\n        elif [ $i -gt 0 ]; then\n            prod=$((prod * 1))\n  \
    \      else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -gt 0 ]]; then\n      ((sum+=i))\n      ((prod*=1))\n    elif\
    \ [[ $i -lt 0 ]]; then\n      ((sum+=i*-1))\n      ((prod*=-1))\n    else\n  \
    \    ((prod*=0))\n    fi\n  done\n  if [[ $prod -eq 0 ]]; then\n    echo None\n\
    \  else\n    echo $((sum*prod))\n  fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n  \
    \  [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\")\
    \ = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [ $i -lt 0 ]; then\n            prod=$((prod\
    \ * -1))\n        elif [ $i -gt 0 ]; then\n            prod=$((prod * 1))\n  \
    \      else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  local i=0\n\
    \  if [[ ${#arr[@]} -eq 0 ]]; then\n    echo \"None\"\n    return\n  fi\n  for\
    \ i in ${arr[@]}; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n\
    \    elif [[ $i -eq 0 ]]; then\n      prod=0\n    fi\n    sum=$((sum + i))\n \
    \ done\n  echo $((prod * sum))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [ $i -lt 0 ]; then\n            prod=$((prod\
    \ * -1))\n        elif [ $i -gt 0 ]; then\n            prod=$((prod * 1))\n  \
    \      else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in \"\
    ${arr[@]}\"; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif\
    \ [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n   \
    \ fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + (i * prod)))\n\
    \    done\n    echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n  \
    \          break\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        fi\n        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  for i in \"${arr[@]}\"; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=$((prod * 0))\n        fi\n        sum=$((sum\
    \ + i))\n    done\n    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf9_wr513.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpf9_wr513.sh: line 19: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpf9_wr513.sh: line 24: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -gt 0 ]]; then\n            sum=$((sum\
    \ + i))\n            prod=$((prod * 1))\n        elif [[ $i -lt 0 ]]; then\n \
    \           sum=$((sum + i * -1))\n            prod=$((prod * -1))\n        fi\n\
    \    done\n    if [[ $sum -eq 0 ]]; then\n        echo None\n    else\n      \
    \  echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in\
    \ \"${arr[@]}\"; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n\
    \    elif [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod\
    \ * 0))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr5csr9lj.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpr5csr9lj.sh: line 19: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpr5csr9lj.sh: line 24: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=\"$1\"\n    local prod=1\n    local sum=0\n    for\
    \ i in $arr; do\n        if [ $i -gt 0 ]; then\n            prod=$((prod * 1))\n\
    \        elif [ $i -lt 0 ]; then\n            prod=$((prod * -1))\n        else\n\
    \            prod=0\n        fi\n        sum=$((sum + i))\n    done\n    echo\
    \ $((prod * sum))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -gt 0 ]]; then\n            sum=$((sum\
    \ + i))\n            prod=$((prod * 1))\n        elif [[ $i -lt 0 ]]; then\n \
    \           sum=$((sum + i * -1))\n            prod=$((prod * -1))\n        fi\n\
    \    done\n    if [[ $sum -eq 0 ]]; then\n        echo None\n    else\n      \
    \  echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n  \
    \          break\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        fi\n        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  for i in \"${arr[@]}\"; do\n        if [ $i -lt 0 ]; then\n            prod=$((prod\
    \ * -1))\n        elif [ $i -gt 0 ]; then\n            prod=$((prod * 1))\n  \
    \      else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpq5dtvsj6.sh: line 17: [: too many arguments

    /tmp/tmpq5dtvsj6.sh: line 19: [: too many arguments

    /tmp/tmpq5dtvsj6.sh: line 24: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -gt 0 ]]; then\n      sum=$((sum + i))\n      prod=$((prod\
    \ * 1))\n    elif [[ $i -lt 0 ]]; then\n      sum=$((sum + i * -1))\n      prod=$((prod\
    \ * -1))\n    fi\n  done\n  if [[ $sum -eq 0 ]]; then\n    echo None\n  else\n\
    \    echo $((sum * prod))\n  fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    if [ -z \"$1\" ]; then\n        echo \"None\"\n    else\n\
    \        echo \"$1\" | tr ' ' '\\n' | awk '{\n            if ($1 > 0) {\n    \
    \            sign = 1\n            } else if ($1 < 0) {\n                sign\
    \ = -1\n            } else {\n                sign = 0\n            }\n      \
    \      sum += sign\n            prod *= sign\n            mag += abs($1)\n   \
    \     } END {\n            if (sum == 0) {\n                print 0\n        \
    \    } else {\n                print mag * prod\n            }\n        }'\n \
    \   fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:11: (FILENAME=- FNR=1) fatal: function `abs'' not defined

    '
  stdout: ''
  timestamp: 1659992501
- exit_code: 0
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    local\
    \ sign=0\n    for i in ${arr[@]}; do\n        if [[ $i -eq 0 ]]; then\n      \
    \      sign=0\n        elif [[ $i -lt 0 ]]; then\n            sign=-1\n      \
    \  else\n            sign=1\n        fi\n        sum=$((sum + i * sign))\n   \
    \     prod=$((prod * sign))\n    done\n    if [[ ${#arr[@]} -eq 0 ]]; then\n \
    \       echo None\n    else\n        echo $((sum * prod))\n    fi\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    if [ -z \"$1\" ]; then\n        echo \"None\"\n    else\n\
    \        local prod=1\n        local sum=0\n        for i in $1; do\n        \
    \    if [ $i -lt 0 ]; then\n                prod=$((prod * -1))\n            elif\
    \ [ $i -gt 0 ]; then\n                prod=$((prod * 1))\n            else\n \
    \               prod=0\n            fi\n            sum=$((sum + i))\n       \
    \ done\n        echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  for i in \"${arr[@]}\"; do\n        if [ $i -lt 0 ]; then\n            prod=$((prod\
    \ * -1))\n        elif [ $i -gt 0 ]; then\n            prod=$((prod * 1))\n  \
    \      else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpq5dtvsj6.sh: line 17: [: too many arguments

    /tmp/tmpq5dtvsj6.sh: line 19: [: too many arguments

    /tmp/tmpq5dtvsj6.sh: line 24: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local sum=0\n  local prod=1\n  for i in $1; do\n    if [[ $i\
    \ -gt 0 ]]; then\n      sum=$((sum + i))\n      prod=$((prod * 1))\n    elif [[\
    \ $i -lt 0 ]]; then\n      sum=$((sum + i * -1))\n      prod=$((prod * -1))\n\
    \    fi\n  done\n  if [[ $sum -eq 0 ]]; then\n    echo None\n  else\n    echo\
    \ $((sum * prod))\n  fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    if [ -z \"$1\" ]; then\n        echo \"None\"\n    else\n\
    \        echo \"$1\" | tr ' ' '\\n' | awk '{\n            if ($1 > 0) {\n    \
    \            sign = 1\n            } else if ($1 < 0) {\n                sign\
    \ = -1\n            } else {\n                sign = 0\n            }\n      \
    \      sum += sign\n            product *= sign\n            abs += abs($1)\n\
    \        } END {\n            if (sum == 0) {\n                print 0\n     \
    \       } else {\n                print abs * product\n            }\n       \
    \ }'\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:11: error: attempt to use non-function `abs'' in function
    call

    '
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local prod=1\n    local sum=0\n  \
    \  for i in \"${arr[@]}\"; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmparfrkw7y.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmparfrkw7y.sh: line 19: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmparfrkw7y.sh: line 24: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [ $i -eq 0 ]; then\n            prod=0\n    \
    \        break\n        fi\n        sum=$((sum + i))\n        prod=$((prod * i\
    \ / abs(i)))\n    done\n    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1anyrneh.sh: line 22: prod * i / abs(i): division by 0 (error token
    is "abs(i)")

    '
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -gt 0 ]]; then\n            sum=$((sum\
    \ + i))\n            prod=$((prod * 1))\n        elif [[ $i -lt 0 ]]; then\n \
    \           sum=$((sum + i * -1))\n            prod=$((prod * -1))\n        fi\n\
    \    done\n    if [[ $sum -eq 0 ]]; then\n        echo None\n    else\n      \
    \  echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  local sign=0\n    for i in \"${arr[@]}\"; do\n        if [[ $i -eq 0 ]]; then\n\
    \            sign=0\n        elif [[ $i -lt 0 ]]; then\n            sign=-1\n\
    \        else\n            sign=1\n        fi\n        sum=$((sum + i))\n    \
    \    prod=$((prod * sign))\n    done\n    if [[ $sum -eq 0 ]]; then\n        echo\
    \ \"None\"\n    else\n        echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa7laotz2.sh: line 18: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpa7laotz2.sh: line 20: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpa7laotz2.sh: line 25: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -gt 0 ]]; then\n      sum=$((sum + i))\n      prod=$((prod\
    \ * 1))\n    elif [[ $i -lt 0 ]]; then\n      sum=$((sum + i * -1))\n      prod=$((prod\
    \ * -1))\n    fi\n  done\n  if [[ $sum -eq 0 ]]; then\n    echo None\n  else\n\
    \    echo $((sum * prod))\n  fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    local\
    \ len=${#arr[@]}\n    if [ $len -eq 0 ]; then\n        echo \"None\"\n       \
    \ return\n    fi\n    for i in ${arr[@]}; do\n        if [ $i -lt 0 ]; then\n\
    \            prod=$((prod * -1))\n        elif [ $i -gt 0 ]; then\n          \
    \  prod=$((prod * 1))\n        else\n            prod=0\n            break\n \
    \       fi\n        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n}\n\n\
    candidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in\
    \ \"${arr[@]}\"; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n\
    \    elif [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod\
    \ * 0))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjqfj0upj.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpjqfj0upj.sh: line 19: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpjqfj0upj.sh: line 24: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    if [[ -z $1 ]]; then\n        echo \"None\"\n    else\n  \
    \      local prod=1\n        local sum=0\n        for i in $1; do\n          \
    \  if [[ $i -gt 0 ]]; then\n                prod=$((prod * 1))\n            elif\
    \ [[ $i -lt 0 ]]; then\n                prod=$((prod * -1))\n            else\n\
    \                prod=$((prod * 0))\n            fi\n            sum=$((sum +\
    \ i))\n        done\n        echo $((prod * sum))\n    fi\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local -a arr\n    local -i sum=0\n    local -i prod=1\n  \
    \  local -i i=0\n    arr=($1)\n    if [ ${#arr[@]} -eq 0 ]; then\n        echo\
    \ \"None\"\n        return\n    fi\n    for (( i=0; i<${#arr[@]}; i++ )); do\n\
    \        if [ ${arr[$i]} -lt 0 ]; then\n            prod=$(( prod * -1 ))\n  \
    \      elif [ ${arr[$i]} -eq 0 ]; then\n            prod=0\n            break\n\
    \        fi\n        sum=$(( sum + ${arr[$i]} ))\n    done\n    echo $(( sum *\
    \ prod ))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    if [ $# -eq 0 ]; then\n        echo \"None\"\n    else\n \
    \       echo \"$@\" | tr ' ' '\\n' | awk '{if ($1>0) {p=p*1} else if ($1<0) {p=p*-1}\
    \ else {p=p*0}; s=s+abs($1)} END {print s*p}'\n    fi\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:1: (FILENAME=- FNR=1) fatal: function `abs'' not defined

    '
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n  \
    \          break\n        fi\n        sum=$((sum + i))\n        prod=$((prod *\
    \ i / abs(i)))\n    done\n    if [[ $prod -eq 0 ]]; then\n        echo None\n\
    \    else\n        echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5cz43ek9.sh: line 22: prod * i / abs(i): division by 0 (error token
    is "abs(i)")

    '
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local -a arr\n  local sum=0\n  local prod=1\n  arr=($1)\n  if\
    \ [[ ${#arr[@]} -eq 0 ]]; then\n    echo \"None\"\n    return\n  fi\n  for i in\
    \ ${arr[@]}; do\n    if [[ $i -gt 0 ]]; then\n      sum=$((sum + i))\n      prod=$((prod\
    \ * 1))\n    elif [[ $i -lt 0 ]]; then\n      sum=$((sum + i * -1))\n      prod=$((prod\
    \ * -1))\n    fi\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local -a arr\n  local -i prod=1\n  local -i sum=0\n  local -i\
    \ i=0\n  local -i len=0\n  arr=($1)\n  len=${#arr[@]}\n  if [ $len -eq 0 ]; then\n\
    \    echo \"None\"\n    return\n  fi\n  for ((i=0; i<len; i++)); do\n    if [\
    \ ${arr[$i]} -eq 0 ]; then\n      prod=0\n      break\n    fi\n    if [ ${arr[$i]}\
    \ -lt 0 ]; then\n      prod=-1\n    fi\n    sum=$((sum + ${arr[$i]}))\n  done\n\
    \  echo $((prod * sum))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -gt 0 ]]; then\n      sum=$((sum + i))\n      prod=$((prod\
    \ * 1))\n    elif [[ $i -lt 0 ]]; then\n      sum=$((sum + i * -1))\n      prod=$((prod\
    \ * -1))\n    fi\n  done\n  if [[ $sum -eq 0 ]]; then\n    echo None\n  else\n\
    \    echo $((sum * prod))\n  fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    local\
    \ sign=0\n    for i in ${arr[@]}; do\n        if [ $i -gt 0 ]; then\n        \
    \    sign=1\n        elif [ $i -lt 0 ]; then\n            sign=-1\n        else\n\
    \            sign=0\n        fi\n        sum=$((sum + i))\n        prod=$((prod\
    \ * sign))\n    done\n    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n  \
    \          break\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        fi\n        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  for i in \"${arr[@]}\"; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n\
    \            break\n        fi\n        sum=$((sum + i))\n        prod=$((prod\
    \ * i / abs(i)))\n    done\n    echo $((sum * prod))\n}\n\ncandidate() {\n   \
    \ prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5lraqvit.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp5lraqvit.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in\
    \ \"${arr[@]}\"; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n\
    \    fi\n    sum=$((sum + abs($i)))\n    prod=$((prod * sign($i)))\n  done\n \
    \ echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp9pzn8run.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp9pzn8run.sh: line 21: sum + abs(1 2 2 -4): syntax error in expression
    (error token is "(1 2 2 -4)")

    '
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=$1\n  local sum=0\n  local prod=1\n  local num\n \
    \ for num in $arr; do\n    if [[ $num -gt 0 ]]; then\n      sum=$((sum + num))\n\
    \      prod=$((prod * 1))\n    elif [[ $num -lt 0 ]]; then\n      sum=$((sum +\
    \ num * -1))\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n\
    \    fi\n  done\n  if [[ $prod -eq 0 ]]; then\n    echo None\n  else\n    echo\
    \ $((sum * prod))\n  fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n  \
    \          break\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        fi\n        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 0
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -gt 0 ]]; then\n            sum=$((sum\
    \ + i))\n            prod=$((prod * 1))\n        elif [[ $i -lt 0 ]]; then\n \
    \           sum=$((sum + i * -1))\n            prod=$((prod * -1))\n        else\n\
    \            prod=$((prod * 0))\n        fi\n    done\n    if [[ $sum -eq 0 ]];\
    \ then\n        echo None\n    else\n        echo $((sum * prod))\n    fi\n}\n\
    \ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  for i in \"${arr[@]}\"; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=$((prod * 0))\n        fi\n        sum=$((sum\
    \ + i))\n    done\n    echo \"$((sum * prod))\"\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp18l62qun.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp18l62qun.sh: line 19: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp18l62qun.sh: line 24: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    local\
    \ sign=0\n    for i in ${arr[@]}; do\n        if [[ $i -eq 0 ]]; then\n      \
    \      sign=0\n        elif [[ $i -lt 0 ]]; then\n            sign=-1\n      \
    \  else\n            sign=1\n        fi\n        sum=$((sum + i))\n        prod=$((prod\
    \ * sign))\n    done\n    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    if [ $# -eq 0 ]; then\n        echo \"None\"\n    else\n \
    \       local prod=1\n        local sum=0\n        for i in $@; do\n         \
    \   if [ $i -lt 0 ]; then\n                prod=$((prod*-1))\n            elif\
    \ [ $i -gt 0 ]; then\n                prod=$((prod*1))\n            fi\n     \
    \       sum=$((sum+i))\n        done\n        echo $((prod*sum))\n    fi\n}\n\n\
    candidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n  \
    \          break\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        fi\n        sum=$((sum + (i < 0 ? -i : i)))\n    done\n    echo\
    \ $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [ $i -lt 0 ]; then\n            prod=$((prod\
    \ * -1))\n        elif [ $i -gt 0 ]; then\n            prod=$((prod * 1))\n  \
    \      else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in\
    \ \"${arr[@]}\"; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n\
    \    elif [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwl4d2b4d.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpwl4d2b4d.sh: line 20: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpwl4d2b4d.sh: line 23: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in \"\
    ${arr[@]}\"; do\n    if [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    elif\
    \ [ $i -gt 0 ]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local prod=1\n    local sum=0\n  \
    \  for i in \"${arr[@]}\"; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n\
    \        elif [[ $i -lt 0 ]]; then\n            prod=$((prod * -1))\n        fi\n\
    \        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp39pzohk9.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp39pzohk9.sh: line 19: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp39pzohk9.sh: line 22: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [ $i -lt 0 ]; then\n            prod=$((prod\
    \ * -1))\n        elif [ $i -gt 0 ]; then\n            prod=$((prod * 1))\n  \
    \      else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n  \
    \      elif [[ $i -lt 0 ]]; then\n            prod=$((prod * -1))\n        fi\n\
    \        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  for i in \"${arr[@]}\"; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=$((prod * 0))\n        fi\n        sum=$((sum\
    \ + i))\n    done\n    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf9_wr513.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpf9_wr513.sh: line 19: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpf9_wr513.sh: line 24: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    local\
    \ num\n    for num in \"${arr[@]}\"; do\n        if [[ $num -lt 0 ]]; then\n \
    \           prod=$((prod * -1))\n        elif [[ $num -gt 0 ]]; then\n       \
    \     prod=$((prod * 1))\n        else\n            prod=0\n        fi\n     \
    \   sum=$((sum + num))\n    done\n    echo $((sum * prod))\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n  \
    \          break\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        fi\n        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    fi\n    sum=$((sum\
    \ + i))\n    prod=$((prod * i / abs(i)))\n  done\n  if [[ $prod -eq 0 ]]; then\n\
    \    echo 0\n  else\n    echo $((sum * prod))\n  fi\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt5af27u2.sh: line 22: prod * i / abs(i): division by 0 (error token
    is "abs(i)")

    '
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  for i in \"${arr[@]}\"; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n\
    \            break\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        fi\n        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn1byfbzi.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpn1byfbzi.sh: line 20: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpn1byfbzi.sh: line 23: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    if [[ -z $1 ]]; then\n        echo \"None\"\n    else\n  \
    \      local prod=1\n        local sum=0\n        for i in $1; do\n          \
    \  if [[ $i -lt 0 ]]; then\n                prod=$((prod * -1))\n            elif\
    \ [[ $i -gt 0 ]]; then\n                prod=$((prod * 1))\n            else\n\
    \                prod=0\n            fi\n            sum=$((sum + i))\n      \
    \  done\n        echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    if [[ $# -eq 0 ]]; then\n        echo \"None\"\n    else\n\
    \        local prod=1\n        local sum=0\n        for i in $@; do\n        \
    \    if [[ $i -lt 0 ]]; then\n                prod=$((prod * -1))\n          \
    \  elif [[ $i -eq 0 ]]; then\n                prod=0\n            fi\n       \
    \     sum=$((sum + i))\n        done\n        echo $((prod * sum))\n    fi\n}\n\
    \ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in\
    \ \"${arr[@]}\"; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n\
    \    elif [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwl4d2b4d.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpwl4d2b4d.sh: line 20: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpwl4d2b4d.sh: line 23: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -gt 0 ]]; then\n            ((sum+=i))\n\
    \        elif [[ $i -lt 0 ]]; then\n            ((sum-=i))\n            ((prod*=i))\n\
    \        fi\n    done\n    echo $((sum*prod))\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in \"\
    ${arr[@]}\"; do\n    if [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    elif\
    \ [ $i -gt 0 ]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local prod=1\n    local sum=0\n  \
    \  for i in \"${arr[@]}\"; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n\
    \        elif [[ $i -lt 0 ]]; then\n            prod=$((prod * -1))\n        fi\n\
    \        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp39pzohk9.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp39pzohk9.sh: line 19: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp39pzohk9.sh: line 22: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    local prod=1\n  \
    \  for i in \"${arr[@]}\"; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n\
    \            break\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        fi\n        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn1byfbzi.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpn1byfbzi.sh: line 20: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpn1byfbzi.sh: line 23: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    local\
    \ sign=0\n    for i in ${arr[@]}; do\n        if [ $i -gt 0 ]; then\n        \
    \    sign=1\n        elif [ $i -lt 0 ]; then\n            sign=-1\n        else\n\
    \            sign=0\n        fi\n        sum=$((sum + i))\n        prod=$((prod\
    \ * sign))\n    done\n    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=(\"$@\")\n    local prod=1\n    local sum=0\n  \
    \  for i in \"${arr[@]}\"; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmparfrkw7y.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmparfrkw7y.sh: line 19: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmparfrkw7y.sh: line 24: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in\
    \ \"${arr[@]}\"; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n\
    \    elif [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwl4d2b4d.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpwl4d2b4d.sh: line 20: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpwl4d2b4d.sh: line 23: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in \"\
    ${arr[@]}\"; do\n    if [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    elif\
    \ [ $i -gt 0 ]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n  \
    \          break\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        fi\n        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  local i\n \
    \ for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ ${arr[$i]} -lt 0 ]]; then\n  \
    \    prod=$((prod * -1))\n    elif [[ ${arr[$i]} -eq 0 ]]; then\n      prod=0\n\
    \      break\n    fi\n    sum=$((sum + ${arr[$i]}))\n  done\n  echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        elif [[ $i -gt 0 ]]; then\n            prod=$((prod * 1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n  \
    \      elif [[ $i -lt 0 ]]; then\n            prod=$((prod * -1))\n        fi\n\
    \        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local -a arr=($1)\n    local sum=0\n    local prod=1\n   \
    \ for i in \"${arr[@]}\"; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n\
    \            break\n        fi\n        sum=$((sum + i))\n        prod=$((prod\
    \ * i / abs(i)))\n    done\n    echo $((sum * prod))\n}\n\ncandidate() {\n   \
    \ prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpce2c6uqq.sh: line 22: prod * i / abs(i): division by 0 (error token
    is "abs(i)")

    '
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -gt 0 ]]; then\n            prod=$((prod\
    \ * 1))\n        elif [[ $i -lt 0 ]]; then\n            prod=$((prod * -1))\n\
    \        else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in \"\
    ${arr[@]}\"; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local -a arr=(\"$@\")\n    local sum=0\n    local prod=1\n\
    \    for i in \"${arr[@]}\"; do\n        if [[ $i -eq 0 ]]; then\n           \
    \ prod=0\n            break\n        fi\n        sum=$((sum + i))\n        prod=$((prod\
    \ * i / abs(i)))\n    done\n    if [[ $prod -eq 0 ]]; then\n        echo \"None\"\
    \n    else\n        echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphba0hz_r.sh: line 17: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmphba0hz_r.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=$1\n    local sum=0\n    local prod=1\n    for i\
    \ in $arr; do\n        if [ $i -eq 0 ]; then\n            prod=0\n           \
    \ break\n        fi\n        sum=$((sum + i))\n        prod=$((prod * i / abs(i)))\n\
    \    done\n    if [ $prod -eq 0 ]; then\n        echo None\n    else\n       \
    \ echo $((sum * prod))\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmp5bv51lrn.sh: line 22: prod * i / abs(i): division by 0 (error token
    is "abs(i)")

    '
  stdout: ''
  timestamp: 1659992501
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [ $i -lt 0 ]; then\n            prod=$((prod\
    \ * -1))\n        elif [ $i -gt 0 ]; then\n            prod=$((prod * 1))\n  \
    \      else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local prod=1\n    local sum=0\n    for\
    \ i in ${arr[@]}; do\n        if [ $i -gt 0 ]; then\n            prod=$((prod\
    \ * 1))\n        elif [ $i -lt 0 ]; then\n            prod=$((prod * -1))\n  \
    \      else\n            prod=0\n        fi\n        sum=$((sum + i))\n    done\n\
    \    echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992500
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0,\
    \ 1]) == 0\n# >>> prod_signs([]) == None\n#\n# $1 is a space-separated list\n\
    prod_signs() {\n    local arr=($1)\n    local sum=0\n    local prod=1\n    for\
    \ i in ${arr[@]}; do\n        if [[ $i -eq 0 ]]; then\n            prod=0\n  \
    \          break\n        fi\n        if [[ $i -lt 0 ]]; then\n            prod=$((prod\
    \ * -1))\n        fi\n        sum=$((sum + i))\n    done\n    echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992501
