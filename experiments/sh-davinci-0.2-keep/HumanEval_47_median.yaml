name: HumanEval_47_median
language: humaneval_to_bash.py
prompt: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
  \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1 is\
  \ a space-separated list\nmedian() {\n"
tests: "}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
  \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
  \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
completions: ["    local l=$1\n    local m=$(echo \"$l\" | wc -w)\n    local n=$((m/2))\n\
    \    local s=$(echo \"$l\" | sort -n)\n    if ((m%2)); then\n        echo \"$s\"\
    \ | cut -d' ' -f$((n+1))\n    else\n        local a=$(echo \"$s\" | cut -d' '\
    \ -f$n)\n        local b=$(echo \"$s\" | cut -d' ' -f$((n+1)))\n        echo $(((a+b)/2))\n\
    \    fi", "    local l=$1\n    local n=$(echo $l | wc -w)\n    local m=$((n/2))\n\
    \    local s=$(echo $l | tr ' ' '\\n' | sort -n)\n    if ((n%2==0)); then\n  \
    \      echo $s | cut -d' ' -f$m,$((m+1)) | awk '{print ($1+$2)/2}'\n    else\n\
    \        echo $s | cut -d' ' -f$((m+1))\n    fi", "    local l=($1)\n    local\
    \ m=${#l[@]}\n    local n=$((m/2))\n    local o=$((n-1))\n    local p=$((n+1))\n\
    \    local q=$((m%2))\n    if [ $q -eq 0 ]; then\n        echo \"scale=1; (${l[$n]}+${l[$o]})/2\"\
    \ | bc\n    else\n        echo \"${l[$n]}\"\n    fi", "    local l=($1)\n    local\
    \ n=${#l[@]}\n    local m=$((n/2))\n    local s=${l[*]}\n    for ((i=0;i<n;i++));\
    \ do\n        s=$(echo \"$s\" | sed -e \"s/[^ ]* //\" | sort -n)\n    done\n \
    \   if ((n%2==1)); then\n        echo \"$s\" | cut -d' ' -f$((m+1))\n    else\n\
    \        local a=$(echo \"$s\" | cut -d' ' -f$m)\n        local b=$(echo \"$s\"\
    \ | cut -d' ' -f$((m+1)))\n        echo $(((a+b)/2))\n    fi", "    local l=($1)\n\
    \    local n=${#l[@]}\n    local m=$((n / 2))\n    local s=${l[$m]}\n    if ((n\
    \ % 2 == 0)); then\n        s=$((s + ${l[$((m - 1))]}))\n        s=$((s / 2))\n\
    \    fi\n    echo $s", "    local l=($1)\n    local n=${#l[@]}\n    local m=$((n\
    \ / 2))\n    local s=${l[@]}\n    local t=()\n    local i=0\n    for e in $s;\
    \ do\n        t[i]=$e\n        ((i++))\n    done\n    for ((i = 0; i < n; i++));\
    \ do\n        for ((j = i; j > 0; j--)); do\n            if ((${t[j]} < ${t[j-1]}));\
    \ then\n                local tmp=${t[j]}\n                t[j]=${t[j-1]}\n  \
    \              t[j-1]=$tmp\n            fi\n        done\n    done\n    if ((n\
    \ % 2 == 0)); then\n        echo $(((${t[m-1]} + ${t[m]})/2))\n    else\n    \
    \    echo ${t[m]}\n    fi", "  local l=($1)\n  local n=${#l[@]}\n  local m=$((n\
    \ / 2))\n  local s=${l[$m]}\n  if ((n % 2 == 0)); then\n    s=$((s + ${l[$((m\
    \ - 1))]}))\n    s=$((s / 2))\n  fi\n  echo $s", "    local l=($1)\n    local\
    \ m=${#l[@]}\n    local i\n    local j\n    local tmp\n    for ((i=0; i<m; i++));\
    \ do\n        for ((j=i+1; j<m; j++)); do\n            if ((${l[i]} > ${l[j]}));\
    \ then\n                tmp=${l[i]}\n                l[i]=${l[j]}\n          \
    \      l[j]=$tmp\n            fi\n        done\n    done\n    if ((m % 2 == 1));\
    \ then\n        echo ${l[m/2]}\n    else\n        echo $(((${l[m/2-1]} + ${l[m/2]})/2))\n\
    \    fi", "    local l=($1)\n    local n=${#l[@]}\n    local m=$((n/2))\n    if\
    \ ((n%2==0)); then\n        echo \"$(((l[m-1]+l[m])/2))\"\n    else\n        echo\
    \ \"${l[m]}\"\n    fi", "    local l=($1)\n    local n=${#l[@]}\n    local m=$((n\
    \ / 2))\n    local s=${l[$m]}\n    ((n % 2 == 0)) && s=$(echo \"scale=1; (${l[$((m\
    \ - 1))]} + $s) / 2\" | bc)\n    echo $s", "    local l=($1)\n    local m=$((\
    \ ${#l[@]} / 2 ))\n    if (( ${#l[@]} % 2 == 0 )); then\n        echo \"$(( (${l[$m-1]}\
    \ + ${l[$m]})/2 ))\"\n    else\n        echo \"${l[$m]}\"\n    fi", "    local\
    \ l=($1)\n    local n=${#l[@]}\n    local m=$((n/2))\n    local s=${l[@]}\n  \
    \  for ((i=0;i<n;i++)); do\n        s=$(echo -e \"$s\\n${l[i]}\" | sort -n | tr\
    \ '\\n' ' ')\n    done\n    local l=($s)\n    if ((n%2==1)); then\n        echo\
    \ ${l[m]}\n    else\n        echo $(((${l[m-1]}+${l[m]})/2))\n    fi", "    local\
    \ l=$1\n    local n=$(echo \"$l\" | wc -w)\n    local m=$((n/2))\n    local s=$(echo\
    \ \"$l\" | sort -n)\n    if ((n%2==0)); then\n        echo \"$s\" | awk -v m=$m\
    \ '{print ($m+$(m+1))/2}'\n    else\n        echo \"$s\" | awk -v m=$m '{print\
    \ $m+1}'\n    fi", "    local l=$1\n    local -a a=($l)\n    local n=${#a[@]}\n\
    \    local -a b=($(sort -n <<<\"${a[*]}\"))\n    echo \"${b[$((n/2))]}\"", " \
    \   local l=$1\n    local mid=$((${#l[@]} / 2))\n    local sorted=($(echo $l |\
    \ tr ' ' '\\n' | sort -n))\n    if (( ${#l[@]} % 2 == 0 )); then\n        echo\
    \ \"$((${sorted[mid]} + ${sorted[mid-1]})) / 2\" | bc -l\n    else\n        echo\
    \ \"${sorted[mid]}\"\n    fi", "    local l=($1)\n    local n=${#l[@]}\n    local\
    \ m=$((n/2))\n    local r\n    if ((n%2==0)); then\n        r=$(echo \"scale=1;\
    \ (${l[m-1]}+${l[m]})/2\" | bc)\n    else\n        r=${l[m]}\n    fi\n    echo\
    \ $r", "    local l=($1)\n    local n=${#l[@]}\n    local m=$((n / 2))\n    local\
    \ s=${l[@]}\n    for ((i = 0; i < n; i++)); do\n        s=$(echo -e \"$s\\n${l[i]}\"\
    \ | sort -n | tr '\\n' ' ')\n    done\n    l=($s)\n    if ((n % 2 == 1)); then\n\
    \        echo ${l[m]}\n    else\n        echo $(((${l[m - 1]} + ${l[m]})))\n \
    \   fi", "    local l=($1)\n    local n=${#l[@]}\n    local m=$((n/2))\n    local\
    \ s=${l[$m]}\n    if ((n%2==0)); then\n        s=$((s+l[m-1]))\n        s=$((s/2))\n\
    \    fi\n    echo $s", "    local l=($1)\n    local n=${#l[@]}\n    local m=$((n\
    \ / 2))\n    local s=$((n % 2))\n    local r=0\n    local i=0\n    local x=0\n\
    \    local y=0\n    local z=0\n    local t=0\n    for i in ${l[@]}; do\n     \
    \   ((x = x + i))\n    done\n    ((r = x / n))\n    for i in ${l[@]}; do\n   \
    \     ((y = y + (i - r) * (i - r)))\n    done\n    ((z = y / n))\n    ((t = z\
    \ ** 0.5))\n    if ((s == 0)); then\n        ((r = (l[m - 1] + l[m]) / 2))\n \
    \   fi\n    echo $r", "    local l=($1)\n    local n=${#l[@]}\n    local m=$((n/2))\n\
    \    local s=${l[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        s=${s//\
    \ ${l[i]}/}\n        if ((i>=m)); then\n            s=${s// ${l[i-m]}/}\n    \
    \    fi\n        if ((i==m)); then\n            echo \"${l[i]}\"\n           \
    \ return\n        fi\n        if ((${#s}==0)); then\n            echo \"$(((l[i-1]+l[i])/2))\"\
    \n            return\n        fi\n    done"]
stop_tokens:
- "\n}"
