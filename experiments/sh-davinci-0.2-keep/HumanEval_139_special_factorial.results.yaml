language: sh
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=n; i>0; i--)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i = 1; i <= n; i++)); do\n     \
    \   result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n \
    \   special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [[ $1 -eq 0 ]]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local factorial=1\n    for (( i = n; i > 0; i-- )); do\n \
    \       factorial=$(( factorial * i ))\n    done\n    echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for (( i=1; i<=$n; i++ ))\n  do\n    result=$((\
    \ $result * $i ))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for (( i=1; i<=$n; i++ )); do\n    result=$((\
    \ result * i ))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  for ((i=1; i<=n-1; i++)); do\n    result=$((result * i))\n\
    \  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$((result\
    \ * n))\n        n=$((n - 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n    fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=n; i>0; i--)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$((result\
    \ * n))\n        n=$((n - 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=n; i>=1; i--)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   if [ $1 -le 0 ]; then\n        echo \"Error: input must be a positive integer\"\
    \n        return 1\n    fi\n    local result=1\n    for ((i=1; i<=$1; i++)); do\n\
    \        result=$((result * i))\n    done\n    for ((i=$1-1; i>0; i--)); do\n\
    \        result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for (( i = n; i > 0; i-- )); do\n    result=$((\
    \ result * i ))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$((result\
    \ * n))\n        n=$((n - 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    local i\n    for ((i=n; i>0; i--)); do\n\
    \        result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=n; i>0; i--)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n    result=$((\
    \ $result * $i ))\n    i=$(( $i + 1 ))\n  done\n  i=$(( $n - 1 ))\n  while [ $i\
    \ -ge 1 ]; do\n    result=$(( $result * $i ))\n    i=$(( $i - 1 ))\n  done\n \
    \ echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    while (( n > 0 )); do\n        result=$((\
    \ result * n ))\n        n=$(( n - 1 ))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ # TODO: Implement this function\n  # Hint: You can use recursion\n  if [ $1\
    \ -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial $(($1\
    \ - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local i=1\n  local result=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for (( i=1; i<=$n; i++ )); do\n      \
    \  result=$(( $result * $i ))\n    done\n    for (( i=$n; i>=1; i-- )); do\n \
    \       result=$(( $result * $i ))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n ]; do\n\
    \        result=$((result * i))\n        i=$((i + 1))\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(( $(special_factorial\
    \ $(( $1 - 1 ))) * $1 ))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for (( i=n; i>0; i-- )); do\n    result=$((\
    \ result * i ))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=n; i>0; i--)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=n; i>0; i--)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i\n\n  for ((i=n; i>0; i--)); do\n   \
    \ result=$((result * i))\n  done\n\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local factorial=1\n    for ((i=1; i<=n; i++)); do\n      \
    \  factorial=$((factorial * i))\n    done\n    echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$((result\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n    result=$((\
    \ $result * $i ))\n    i=$(( $i + 1 ))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$(($result\
    \ * $n))\n        n=$(($n - 1))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local factorial=1\n    while [ $n -gt 0 ]; do\n        factorial=$((factorial\
    \ * n))\n        n=$((n - 1))\n    done\n    echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$((result\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [ $1 -le 0 ]; then\n    echo \"0\"\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   # Write your code here\n    # To print results to the standard output you\
    \ can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"Not\
    \ implemented\"\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local i=1\n  local result=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=n; i>0; i--)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$((result\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$(($result\
    \ * $n))\n        n=$(($n - 1))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$((result\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n ]; do\n\
    \        result=$((result * i))\n        i=$((i + 1))\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$((result\
    \ * n))\n        n=$((n - 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$((result\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$((result\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for (( i=n; i>0; i-- )); do\n    result=$((\
    \ result * i ))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local factorial=1\n    for ((i=1; i<=n; i++)); do\n      \
    \  factorial=$((factorial * i))\n    done\n    echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local factorial=1\n  for ((i=1; i<=n; i++)); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$((result\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local factorial=1\n    for (( i = 1; i <= n; i++ )); do\n\
    \        factorial=$(( factorial * i ))\n    done\n    echo $factorial\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local factorial=1\n  for ((i=n; i>0; i--)); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=n; i>=1; i--)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n ]; do\n\
    \        result=$((result * i))\n        i=$((i + 1))\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local factorial=1\n    for ((i=1; i<=n; i++)); do\n      \
    \  factorial=$((factorial * i))\n    done\n    echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local factorial=1\n  for ((i=1; i<=n; i++)); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local factorial=1\n    local i\n    for ((i = n; i > 0; i--));\
    \ do\n        factorial=$((factorial * i))\n    done\n    echo $factorial\n}\n\
    \ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ # Write your code here\n  # To print results to the standard output you can\
    \ use echo\n  # To debug: echo \"Debug messages...\" >&2\n  if [ $1 -eq 0 ]; then\n\
    \    echo 1\n  else\n    echo $(($1 * $(special_factorial $(($1 - 1)))))\n  fi\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ # Write your code here\n  # To print results to the standard output you can\
    \ use echo\n  # To debug: echo \"Debug messages...\" >&2\n  if [ $1 -lt 0 ]; then\n\
    \    echo \"Error: input must be greater than 0\" >&2\n    exit 1\n  fi\n  if\
    \ [ $1 -eq 0 ]; then\n    echo 1\n    exit 0\n  fi\n  echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n    result=$((\
    \ $result * $i ))\n    i=$(( $i + 1 ))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=n; i>0; i--)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$((result\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [ $1 -le 0 ]; then\n    echo \"0\"\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [[ $1 -eq 0 ]]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 2
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ # TODO: Implement this function\n  # Hint: You may want to use the factorial\
    \ function you implemented in the\n  # previous exercise.\n  # Hint: You may want\
    \ to use the seq command.\n  # Hint: You may want to use the bc command.\n  #\
    \ Hint: You may want to use the paste command.\n  # Hint: You may want to use\
    \ the tr command.\n  # Hint: You may want to use the fold command.\n  # Hint:\
    \ You may want to use the xargs command.\n  # Hint: You may want to use the sort\
    \ command.\n  # Hint: You may want to use the uniq command.\n  # Hint: You may\
    \ want to use the head command.\n  # Hint: You may want to use the tail command.\n\
    \  # Hint: You may want to use the wc command.\n  # Hint: You may want to use\
    \ the cut command.\n  # Hint: You may want to use the sed command.\n  # Hint:\
    \ You may want to use the tr command.\n  # Hint: You may want to use the paste\
    \ command.\n  # Hint: You may want to use the bc command.\n  # Hint: You may want\
    \ to use the awk command.\n  # Hint: You may want to use the sed command.\n  #\
    \ Hint: You may want to use the tr command.\n  # Hint: You may want to use the\
    \ paste command.\n  # Hint: You may want to use the bc command.\n  # Hint: You\
    \ may want to use the awk command.\n  # Hint: You may want to use the sed command.\n\
    \  # Hint: You may want to use the tr command.\n  # Hint: You may want to use\
    \ the paste command.\n  # Hint: You may want to use the bc command.\n  # Hint:\
    \ You may want to use the awk command.\n  # Hint: You may want to use the sed\
    \ command.\n  # Hint: You may want to use the tr command.\n  # Hint: You may want\
    \ to use the paste command.\n  # Hint: You may want to use the bc command.\n \
    \ # Hint: You\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppe1rbxni.sh: line 48: syntax error near unexpected token `}''

    /tmp/tmppe1rbxni.sh: line 48: `}''

    '
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ # Write your code here\n  # To print results to the standard output you can\
    \ use echo\n  # To debug: echo \"Debug messages...\" >&2\n  if [ $1 -eq 0 ]; then\n\
    \    echo 1\n  else\n    echo $(($1 * $(special_factorial $(($1 - 1)))))\n  fi\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ # TODO: Implement this function\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n\
    \    echo $(($1 * $(special_factorial $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$((result\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$((result\
    \ * n))\n        n=$((n - 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for (( i=1; i<=$n; i++ )); do\n      \
    \  result=$(( $result * $i ))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [[ $1 -eq 0 ]]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [[ $1 -eq 0 ]]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local i=0\n  local result=1\n  while [ $i -lt $n ]; do\n    result=$((result\
    \ * (n - i)))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   # Write your code here\n    # To print results to the standard output you\
    \ can use echo\n    # Example: echo \"Hello world\"\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   if [ $1 -le 0 ]; then\n        echo \"0\"\n    else\n        echo \"$(($1\
    \ * $(special_factorial $(($1 - 1)))))\"\n    fi\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for (( i=n; i>0; i-- )); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for (( i=1; i<=$n; i++ )); do\n    result=$((\
    \ $result * $i ))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local i=1\n    local result=1\n    while [ $i -le $n ]; do\n\
    \        result=$((result * i))\n        i=$((i + 1))\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   if [[ $1 -eq 0 ]]; then\n        echo 1\n    else\n        echo $(( $1 * $(special_factorial\
    \ $(( $1 - 1 ))) ))\n    fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 2
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ # Your code here\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgmrk_1zs.sh: line 14: syntax error near unexpected token `}''

    /tmp/tmpgmrk_1zs.sh: line 14: `}''

    '
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(( $1 * $(special_factorial\
    \ $(( $1 - 1 ))) ))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local i=1\n  local result=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [ $1 -le 0 ]; then\n    echo \"Error: input must be greater than 0\"\n  \
    \  return 1\n  fi\n  local result=1\n  for ((i=$1; i>0; i--)); do\n    result=$((result\
    \ * i))\n  done\n  for ((i=$1; i>1; i--)); do\n    result=$((result * i))\n  done\n\
    \  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=n; i>0; i--)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=n; i>0; i--)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i\n  for ((i = n; i > 0; i--)); do\n \
    \   result=$((result * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n ]; do\n\
    \        result=$((result * i))\n        i=$((i + 1))\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $n ]; do\n  \
    \  factorial=$((factorial * i))\n    i=$((i + 1))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    local i\n    for ((i=n; i>0; i--)); do\n\
    \        result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [ $1 -gt 0 ]; then\n    echo $(( $1 * $(special_factorial $(( $1 - 1 )))\
    \ ))\n  else\n    echo 1\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local factorial=1\n  for (( i=1; i<=$n; i++ )); do\n    factorial=$((\
    \ factorial * i ))\n  done\n  local result=$factorial\n  for (( i=$n-1; i>0; i--\
    \ )); do\n    factorial=$(( factorial * i ))\n    result=$(( result * factorial\
    \ ))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [ $1 -lt 1 ]; then\n    echo \"Error: the argument must be greater than 0\"\
    \n    return 1\n  fi\n  local result=1\n  for ((i=1; i<=$1; i++)); do\n    result=$((result\
    \ * i))\n  done\n  for ((i=$1-1; i>0; i--)); do\n    result=$((result * i))\n\
    \  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(( $(special_factorial\
    \ $(( $1 - 1 ))) * $1 ))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   if [ $1 -lt 0 ]; then\n        echo \"Error: the number must be positive\"\
    \n        return 1\n    fi\n    if [ $1 -eq 0 ]; then\n        echo 1\n      \
    \  return 0\n    fi\n    local result=1\n    for i in $(seq 1 $1); do\n      \
    \  result=$(($result * $i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local factorial=1\n    for ((i=1; i<=$1; i++)); do\n        factorial=$((factorial\
    \ * i))\n    done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local i=1\n  local result=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  for ((i=n-1; i>=1; i--)); do\n    result=$((result * i))\n\
    \  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for (( i = n; i > 0; i-- )); do\n    result=$((\
    \ result * i ))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for (( i=n; i>0; i-- )); do\n    result=$((\
    \ result * i ))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for (( i=n; i>=1; i-- )); do\n    result=$((\
    \ result * i ))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n ]; do\n\
    \        result=$((result * i))\n        i=$((i + 1))\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $n ]; do\n  \
    \  factorial=$((factorial * i))\n    i=$((i + 1))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for (( i = 1; i <= n; i++ )); do\n   \
    \     result=$(( result * i ))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local factorial=1\n    local i=1\n    while [ $i -le $n ];\
    \ do\n        factorial=$((factorial * i))\n        i=$((i + 1))\n    done\n \
    \   echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$((result\
    \ * n))\n        n=$((n - 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=0\n  for (( i=1; i<=n; i++ )); do\n\
    \    result=$(( result * i ))\n  done\n  echo $result\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ # TODO: implement the function here\n  # Hint: use the factorial function you\
    \ implemented in the previous exercise\n  # and the multiplication function you\
    \ implemented in the previous exercise\n  # as well.\n  if [ $1 -eq 0 ]; then\n\
    \    echo 1\n  else\n    echo $(($(factorial $1) * $(special_factorial $(($1 -\
    \ 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe_nqz3sl.sh: line 20: factorial: command not found

    /tmp/tmpe_nqz3sl.sh: line 20: factorial: command not found

    /tmp/tmpe_nqz3sl.sh: line 20: factorial: command not found

    /tmp/tmpe_nqz3sl.sh: line 20: factorial: command not found

    /tmp/tmpe_nqz3sl.sh: line 20: * 1: syntax error: operand expected (error token
    is "* 1")

    /tmp/tmpe_nqz3sl.sh: line 20: * : syntax error: operand expected (error token
    is "* ")

    /tmp/tmpe_nqz3sl.sh: line 20: * : syntax error: operand expected (error token
    is "* ")

    /tmp/tmpe_nqz3sl.sh: line 20: * : syntax error: operand expected (error token
    is "* ")

    '
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [ $1 -le 0 ]; then\n    echo \"Error: input must be greater than 0\"\n  \
    \  return 1\n  fi\n  local result=1\n  for ((i=$1; i>0; i--)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i = 1; i <= n; i++)); do\n     \
    \   result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n \
    \   special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        echo $(( $(special_factorial\
    \ $(( $1 - 1 ))) * $1 ))\n    fi\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local factorial=1\n    local i=1\n    while [ $i -le $n ];\
    \ do\n        factorial=$((factorial * i))\n        i=$((i + 1))\n    done\n \
    \   echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n ]; do\n\
    \        result=$((result * i))\n        i=$((i + 1))\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n ]; do\n\
    \        result=$((result * i))\n        i=$((i + 1))\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local factorial=1\n    for ((i=1; i<=n; i++)); do\n      \
    \  factorial=$((factorial * i))\n    done\n    echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local factorial=1\n    for ((i=1; i<=n; i++)); do\n      \
    \  factorial=$((factorial * i))\n    done\n    echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local factorial=1\n  for ((i=1; i<=n; i++)); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for (( i=n; i>0; i-- )); do\n        result=$((\
    \ result * i ))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local i=1\n  local result=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local i=1\n  local result=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i = 1; i <= n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  for ((i = n - 1; i > 0; i--)); do\n    result=$((result * i))\n\
    \  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n    result=$((\
    \ $result * $i ))\n    i=$(( $i + 1 ))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for (( i=1; i<=$n; i++ )); do\n      \
    \  result=$(( $result * $i ))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local result=1\n  for ((i=1; i<=$1; i++)); do\n    result=$((result * i))\n\
    \  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n ]; do\n\
    \        result=$(( $result * $i ))\n        i=$(( $i + 1 ))\n    done\n    echo\
    \ $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=n; i>0; i--)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=n; i>0; i--)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local i=1\n    local result=1\n    while [ $i -le $n ]; do\n\
    \        result=$((result * i))\n        i=$((i + 1))\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   if [ $1 -le 0 ]; then\n        echo \"0\"\n    else\n        echo $(($1 *\
    \ $(special_factorial $(($1 - 1)))))\n    fi\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n    fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ if [ $1 -le 0 ]; then\n    echo \"0\"\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for ((i=n; i>0; i--)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  for (( i=n; i>0; i-- )); do\n    result=$((\
    \ result * i ))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \ local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n \
    \   local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$((result\
    \ * n))\n        n=$((n - 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993747
