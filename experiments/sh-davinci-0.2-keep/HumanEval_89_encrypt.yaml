name: HumanEval_89_encrypt
language: humaneval_to_bash.py
prompt: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
  \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
  \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
  \ to two places.\n# For example:\n# encrypt('hi') returns 'lm'\n# encrypt('asdfghjkl')\
  \ returns 'ewhjklnop'\n# encrypt('gf') returns 'kj'\n# encrypt('et') returns 'ix'\n\
  #\n# $1 is a string\nencrypt() {\n"
tests: "}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\"\
  \ ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\"\
  \ ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
  \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
  ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
  a\") = \"e\" ]]\n}\n\nrun_test"
completions: ['    # your code here', '    # TODO: Write your code here', "    # TODO:\
    \ implement this function\n    # Hint: use the tr command\n    # Hint: use the\
    \ seq command\n    # Hint: use the echo command\n    # Hint: use the rev command\n\
    \    # Hint: use the cut command\n    # Hint: use the tr command\n    # Hint:\
    \ use the rev command\n    # Hint: use the tr command\n    # Hint: use the rev\
    \ command\n    # Hint: use the tr command\n    # Hint: use the rev command\n \
    \   # Hint: use the tr command\n    # Hint: use the rev command\n    # Hint: use\
    \ the tr command\n    # Hint: use the rev command\n    # Hint: use the tr command\n\
    \    # Hint: use the rev command\n    # Hint: use the tr command\n    # Hint:\
    \ use the rev command\n    # Hint: use the tr command\n    # Hint: use the rev\
    \ command\n    # Hint: use the tr command\n    # Hint: use the rev command\n \
    \   # Hint: use the tr command\n    # Hint: use the rev command\n    # Hint: use\
    \ the tr command\n    # Hint: use the rev command\n    # Hint: use the tr command\n\
    \    # Hint: use the rev command\n    # Hint: use the tr command\n    # Hint:\
    \ use the rev command\n    # Hint: use the tr command\n    # Hint: use the rev\
    \ command\n    # Hint: use the tr command\n    # Hint: use the rev command\n \
    \   # Hint: use the tr command\n    # Hint: use the rev command\n    # Hint: use\
    \ the tr command\n    # Hint: use the rev command\n    # Hint: use the tr command\n\
    \    # Hint: use the rev command\n    # Hint: use the tr command\n    # Hint:\
    \ use the rev command\n    # Hint: use the tr command\n    # Hint: use the rev\
    \ command\n    # Hint: use the tr command\n    # Hint: use the rev command\n \
    \   # Hint: use the tr command\n    # Hint: use the rev command\n    # Hint: use\
    \ the tr command\n    #", "    # TODO: Implement this function\n    echo \"TODO\"",
  "    # TODO: Write this function\n    echo \"TODO\"", "    # TODO: Write this function\n\
    \    # Hint: Use the command line to find out how to rotate the alphabet\n   \
    \ # Hint: Use the command line to find out how to remove the first two characters\
    \ of a string\n    # Hint: Use the command line to find out how to remove the\
    \ last two characters of a string\n    # Hint: Use the command line to find out\
    \ how to concatenate strings\n    # Hint: Use the command line to find out how\
    \ to convert a string to lowercase\n    # Hint: Use the command line to find out\
    \ how to convert a string to uppercase\n    # Hint: Use the command line to find\
    \ out how to convert a string to an array\n    # Hint: Use the command line to\
    \ find out how to convert an array to a string\n    # Hint: Use the command line\
    \ to find out how to convert a string to an array\n    # Hint: Use the command\
    \ line to find out how to convert an array to a string\n    # Hint: Use the command\
    \ line to find out how to convert a string to an array\n    # Hint: Use the command\
    \ line to find out how to convert an array to a string\n    # Hint: Use the command\
    \ line to find out how to convert a string to an array\n    # Hint: Use the command\
    \ line to find out how to convert an array to a string\n    # Hint: Use the command\
    \ line to find out how to convert a string to an array\n    # Hint: Use the command\
    \ line to find out how to convert an array to a string\n    # Hint: Use the command\
    \ line to find out how to convert a string to an array\n    # Hint: Use the command\
    \ line to find out how to convert an array to a string\n    # Hint: Use the command\
    \ line to find out how to convert a string to an array\n    # Hint: Use the command\
    \ line to find out how to convert an array to a string\n    # Hint: Use the command\
    \ line to find out how to convert a string to an array\n    # Hint: Use the command\
    \ line to find out how to convert an array to a string\n    # Hint: Use the command\
    \ line to find out how to convert a string to an array\n    # Hint: Use the command\
    \ line to find out how to convert an array to a", '    # Write your code here',
  "    # TODO: Implement this function\n    # Hint: You can use the tr command to\
    \ translate characters\n    # Example:\n    # echo \"hello\" | tr 'a-z' 'c-za-b'\n\
    \    #\n    # This will translate all characters in the string \"hello\"\n   \
    \ # to the character that is two characters after it in the alphabet.\n    # For\
    \ example, 'h' will be translated to 'j', 'e' will be translated\n    # to 'g',\
    \ and so on.\n    #\n    # To rotate the alphabet by two characters, you can use\
    \ the following\n    # command:\n    # echo \"hello\" | tr 'a-z' 'c-za-b'\n  \
    \  #\n    # To rotate the alphabet by four characters, you can use the following\n\
    \    # command:\n    # echo \"hello\" | tr 'a-z' 'e-za-d'\n    #\n    # To rotate\
    \ the alphabet by six characters, you can use the following\n    # command:\n\
    \    # echo \"hello\" | tr 'a-z' 'g-za-f'\n    #\n    # To rotate the alphabet\
    \ by eight characters, you can use the following\n    # command:\n    # echo \"\
    hello\" | tr 'a-z' 'i-za-h'\n    #\n    # To rotate the alphabet by ten characters,\
    \ you can use the following\n    # command:\n    # echo \"hello\" | tr 'a-z' 'k-za-j'\n\
    \    #\n    # To rotate the alphabet by twelve characters, you can use the following\n\
    \    # command:\n    # echo \"hello\" | tr 'a-z' 'm-za-l'\n    #\n    # To rotate\
    \ the alphabet by fourteen characters, you can use the following\n    # command:\n\
    \    # echo \"hello\" | tr 'a-z' 'o-za-n'\n    #\n    # To rotate the alphabet\
    \ by sixteen characters, you can use the following\n    # command:\n    # echo\
    \ \"hello\" | tr 'a-z' 'q-za-p'\n    #\n    # To rotate the alphabet by eighteen\
    \ characters, you can use the following\n    # command:\n    # echo \"hello\"\
    \ | tr 'a-", "    # TODO: implement this function\n    # Hint: use the rotate\
    \ function\n    # Hint: use the ord function\n    # Hint: use the chr function\n\
    \    # Hint: use the string concatenation operator\n    # Hint: use the string\
    \ length operator\n    # Hint: use the string index operator\n    # Hint: use\
    \ the modulo operator\n    # Hint: use the multiplication operator\n    # Hint:\
    \ use the addition operator\n    # Hint: use the subtraction operator\n    # Hint:\
    \ use the assignment operator\n    # Hint: use the return keyword\n    # Hint:\
    \ use the for keyword\n    # Hint: use the range keyword\n    # Hint: use the\
    \ if keyword\n    # Hint: use the else keyword\n    # Hint: use the elif keyword\n\
    \    # Hint: use the and keyword\n    # Hint: use the or keyword\n    # Hint:\
    \ use the not keyword\n    # Hint: use the in keyword\n    # Hint: use the continue\
    \ keyword\n    # Hint: use the break keyword\n    # Hint: use the pass keyword\n\
    \    # Hint: use the len function\n    # Hint: use the str function\n    # Hint:\
    \ use the int function\n    # Hint: use the float function\n    # Hint: use the\
    \ type function\n    # Hint: use the isinstance function\n    # Hint: use the\
    \ print function\n    # Hint: use the input function\n    # Hint: use the exit\
    \ function\n    # Hint: use the assert function\n    # Hint: use the eval function\n\
    \    # Hint: use the exec function\n    # Hint: use the dir function\n    # Hint:\
    \ use the help function\n    # Hint: use the id function\n    # Hint: use the\
    \ hash function\n    # Hint: use the hex function\n    # Hint: use the oct function\n\
    \    # Hint: use the bin function\n    # Hint: use the round function\n    # Hint:\
    \ use the abs function\n    # Hint: use the divmod function\n    # Hint: use the\
    \ pow function\n    # Hint: use the sum function\n    # Hint: use the sorted function\n\
    \   ", "    # TODO: Write your code here\n    # Hint: You can use the tr command\
    \ to translate characters\n    #       For example: tr 'a-z' 'c-za-b'\n    # \
    \      This will translate all characters from a-z to c-za-b\n    #       You\
    \ can also use the -d option to delete characters\n    #       For example: tr\
    \ -d 'a-z'\n    #       This will delete all characters from a-z\n    #      \
    \ You can also use the -s option to squeeze repeated characters\n    #       For\
    \ example: tr -s 'a-z'\n    #       This will replace all repeated characters\
    \ with a single character\n    #       You can also use the -c option to complement\
    \ a set of characters\n    #       For example: tr -c 'a-z'\n    #       This\
    \ will delete all characters except a-z\n    #       You can also use the -C option\
    \ to complement a set of characters\n    #       For example: tr -C 'a-z'\n  \
    \  #       This will delete all characters except a-z\n    #       You can also\
    \ use the -t option to truncate a set of characters\n    #       For example:\
    \ tr -t 'a-z'\n    #       This will delete all characters except a-z\n    # \
    \      You can also use the -T option to truncate a set of characters\n    # \
    \      For example: tr -T 'a-z'\n    #       This will delete all characters except\
    \ a-z\n    #       You can also use the -u option to squeeze repeated characters\n\
    \    #       For example: tr -u 'a-z'\n    #       This will replace all repeated\
    \ characters with a single character\n    #       You can also use the -U option\
    \ to squeeze repeated characters\n    #       For example: tr -U 'a-z'\n    #\
    \       This will replace all repeated characters with a single character\n  \
    \  #       You can also use the -y option to translate characters\n    #     \
    \  For example: tr -y 'a-z'\n    #       This will translate all characters from\
    \ a-z to c-za-b\n    #       You can also use the -Y option to translate characters\n\
    \    #       For example: tr -Y 'a-z'\n    #       This", '    # Your code here',
  "    # TODO: implement this function\n    # Hint: use the rotate function\n    #\
    \ Hint: use the rotate function\n    # Hint: use the rotate function\n    # Hint:\
    \ use the rotate function\n    # Hint: use the rotate function\n    # Hint: use\
    \ the rotate function\n    # Hint: use the rotate function\n    # Hint: use the\
    \ rotate function\n    # Hint: use the rotate function\n    # Hint: use the rotate\
    \ function\n    # Hint: use the rotate function\n    # Hint: use the rotate function\n\
    \    # Hint: use the rotate function\n    # Hint: use the rotate function\n  \
    \  # Hint: use the rotate function\n    # Hint: use the rotate function\n    #\
    \ Hint: use the rotate function\n    # Hint: use the rotate function\n    # Hint:\
    \ use the rotate function\n    # Hint: use the rotate function\n    # Hint: use\
    \ the rotate function\n    # Hint: use the rotate function\n    # Hint: use the\
    \ rotate function\n    # Hint: use the rotate function\n    # Hint: use the rotate\
    \ function\n    # Hint: use the rotate function\n    # Hint: use the rotate function\n\
    \    # Hint: use the rotate function\n    # Hint: use the rotate function\n  \
    \  # Hint: use the rotate function\n    # Hint: use the rotate function\n    #\
    \ Hint: use the rotate function\n    # Hint: use the rotate function\n    # Hint:\
    \ use the rotate function\n    # Hint: use the rotate function\n    # Hint: use\
    \ the rotate function\n    # Hint: use the rotate function\n    # Hint: use the\
    \ rotate function\n    # Hint: use the rotate function\n    # Hint: use the rotate\
    \ function\n    # Hint: use the rotate function\n    # Hint: use the rotate function\n\
    \    # Hint: use the rotate function\n    # Hint: use the rotate function\n  \
    \  # Hint: use the rotate function\n    # Hint: use the rotate function\n    #\
    \ Hint: use the rotate function\n    # Hint: use the rotate function\n    # Hint:\
    \ use the rotate function\n    # Hint: use the rotate function\n    #", '    #
    TODO: Write your code here', "    # TODO: Implement this function\n    echo \"\
    TODO\"", "    # TODO: implement this function\n    echo \"TODO\"", "    # TODO:\
    \ Implement this function\n    # Hint: Use the ord and chr functions\n    # Hint:\
    \ Use the modulo operator to wrap around the alphabet\n    # Hint: Use the range\
    \ function to generate the alphabet\n    # Hint: Use the map function to apply\
    \ the rotation to each character\n    # Hint: Use the join function to join the\
    \ list of characters into a string\n    # Hint: Use the eval function to evaluate\
    \ the string as a python expression\n    # Hint: Use the str function to convert\
    \ the result to a string\n    # Hint: Use the print function to print the result\n\
    \    # Hint: Use the return function to return the result\n    pass", "    # TODO:\
    \ Write this function\n    # Hint: You can use the tr command to translate characters\n\
    \    #       in a string.\n    #       For example:\n    #       echo 'abc' |\
    \ tr 'abc' 'def'\n    #       will print 'def'\n    #       echo 'abc' | tr 'abc'\
    \ 'defg'\n    #       will print 'def'\n    #       echo 'abc' | tr 'abc' 'defgh'\n\
    \    #       will print 'defg'\n    #       echo 'abc' | tr 'abc' 'defghi'\n \
    \   #       will print 'defgh'\n    #       echo 'abc' | tr 'abc' 'defghij'\n\
    \    #       will print 'defghi'\n    #       echo 'abc' | tr 'abc' 'defghijk'\n\
    \    #       will print 'defghij'\n    #       echo 'abc' | tr 'abc' 'defghijkl'\n\
    \    #       will print 'defghijk'\n    #       echo 'abc' | tr 'abc' 'defghijklm'\n\
    \    #       will print 'defghijkl'\n    #       echo 'abc' | tr 'abc' 'defghijklmn'\n\
    \    #       will print 'defghijklm'\n    #       echo 'abc' | tr 'abc' 'defghijklmno'\n\
    \    #       will print 'defghijklmn'\n    #       echo 'abc' | tr 'abc' 'defghijklmnop'\n\
    \    #       will print 'defghijklmno'\n    #       echo 'abc' | tr 'abc' 'defghijklmnopq'\n\
    \    #       will print 'defghijklmnop'\n    #       echo 'abc' | tr 'abc' 'defghijklmnopqr'\n\
    \    #       will print 'defghijklmnopq'\n    #       echo 'abc' | tr 'abc' 'defghijklmnopqrs'\n\
    \    #       will print 'defghijklmnopqr'\n    #       echo 'abc' | tr 'abc' 'defghijklmnopqrst'\n\
    \    #       will print 'def", "    # TODO: Write your code here\n    # Hint:\
    \ You can use the modulo operator to wrap around the alphabet\n    # Hint: You\
    \ can use the ord() and chr() functions to convert between letters and ASCII values\n\
    \    # Hint: You can use the range() function to create a list of numbers\n  \
    \  # Hint: You can use the join() function to join a list of strings\n    # Hint:\
    \ You can use the map() function to apply a function to each element of a list\n\
    \    # Hint: You can use the zip() function to combine two lists\n    # Hint:\
    \ You can use the str() function to convert a number to a string", "    # TODO:\
    \ Implement this function\n    # Hint: You can use the modulo operator to wrap\
    \ around the alphabet\n    # Hint: You can use the ord and chr functions to convert\
    \ between characters and their ASCII values\n    # Hint: You can use the length\
    \ function to get the length of a string\n    # Hint: You can use the substr function\
    \ to get a substring of a string\n    # Hint: You can use the concatenation operator\
    \ to concatenate strings\n    # Hint: You can use the assignment operator to assign\
    \ a value to a variable\n    # Hint: You can use the return statement to return\
    \ a value\n    # Hint: You can use the for loop to loop over the characters in\
    \ a string\n    # Hint: You can use the if statement to check if a condition is\
    \ true\n    # Hint: You can use the else statement to execute code if a condition\
    \ is false\n    # Hint: You can use the elif statement to check if a condition\
    \ is true and execute code if it is\n    # Hint: You can use the while loop to\
    \ loop while a condition is true\n    # Hint: You can use the break statement\
    \ to break out of a loop\n    # Hint: You can use the continue statement to skip\
    \ to the next iteration of a loop\n    # Hint: You can use the arithmetic operators\
    \ to perform arithmetic\n    # Hint: You can use the comparison operators to compare\
    \ values\n    # Hint: You can use the logical operators to combine conditions\n\
    \    # Hint: You can use the bitwise operators to perform bitwise operations\n\
    \    # Hint: You can use the ternary operator to perform an if-else in one line\n\
    \    # Hint: You can use the string functions to manipulate strings\n    # Hint:\
    \ You can use the array functions to manipulate arrays\n    # Hint: You can use\
    \ the math functions to perform mathematical operations\n    # Hint: You can use\
    \ the file functions to manipulate files\n    # Hint: You can use the system functions\
    \ to execute system commands\n    # Hint: You can use the regex functions to perform\
    \ regular expression operations\n    # Hint: You can use the date functions to\
    \ manipulate dates\n    # Hint: You can use the object functions to manipulate\
    \ objects\n    # Hint: You can use the function functions to manipulate functions\n",
  "  # TODO: Write your code here\n  # Hint: You can use the modulo operator to loop\
    \ back to the beginning of the alphabet\n  # Hint: You can use the ord() and chr()\
    \ functions to convert between ASCII values and characters\n  # Hint: You can\
    \ use the range() function to generate a list of numbers\n  # Hint: You can use\
    \ the join() function to join a list of characters together\n  # Hint: You can\
    \ use the map() function to apply a function to every element of a list\n  # Hint:\
    \ You can use the zip() function to combine two lists into a list of tuples\n\
    \  # Hint: You can use the ord() function to get the ASCII value of a character\n\
    \  # Hint: You can use the chr() function to get the character of an ASCII value\n\
    \  # Hint: You can use the isalpha() function to check if a character is a letter\n\
    \  # Hint: You can use the isupper() function to check if a character is uppercase\n\
    \  # Hint: You can use the islower() function to check if a character is lowercase\n\
    \  # Hint: You can use the lower() function to convert a character to lowercase\n\
    \  # Hint: You can use the upper() function to convert a character to uppercase\n\
    \  # Hint: You can use the join() function to join a list of characters together\n\
    \  # Hint: You can use the map() function to apply a function to every element\
    \ of a list\n  # Hint: You can use the zip() function to combine two lists into\
    \ a list of tuples\n  # Hint: You can use the ord() function to get the ASCII\
    \ value of a character\n  # Hint: You can use the chr() function to get the character\
    \ of an ASCII value\n  # Hint: You can use the isalpha() function to check if\
    \ a character is a letter\n  # Hint: You can use the isupper() function to check\
    \ if a character is uppercase\n  # Hint: You can use the islower() function to\
    \ check if a character is lowercase\n  # Hint: You can use the lower() function\
    \ to convert a character to lowercase\n  # Hint: You can use the upper() function\
    \ to convert a character to uppercase\n  #", "    # TODO: Implement this function\n\
    \    echo \"Not implemented\"", '    # TODO: Write your code here', "    # TODO:\
    \ Implement this function\n    echo \"Not implemented\"", "    # TODO: Implement\
    \ this function\n    echo \"TODO\"", '    # Your code here', "    # Your code\
    \ here\n    echo $1 | tr 'a-z' 'c-za-b'", '    # TODO: Write your code here',
  "    # TODO: Implement this function\n    echo \"Not implemented\"", "    # TODO:\
    \ Write your code here\n    # Hint: You can use the tr command to translate characters\n\
    \    #       in a string.\n    #       For example:\n    #       echo \"hi\" |\
    \ tr 'a-z' 'c-za-b'\n    #       will return 'jk'\n    #       echo \"hi\" | tr\
    \ 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b'\n    #       will return 'lm'\n    #    \
    \   echo \"hi\" | tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b'\n\
    \    #       will return 'no'\n    #       echo \"hi\" | tr 'a-z' 'c-za-b' | tr\
    \ 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b'\n    #       will return\
    \ 'pq'\n    #       echo \"hi\" | tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b' | tr 'a-z'\
    \ 'c-za-b' | tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b'\n    #       will return 'rs'\n\
    \    #       echo \"hi\" | tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b'\
    \ | tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b'\n    #       will\
    \ return 'tu'\n    #       echo \"hi\" | tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b'\
    \ | tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b' | tr 'a-z' 'c", "    # TODO: Write this\
    \ function\n    # Hint: You can use the tr command to translate characters\n \
    \   #       e.g. tr '[a-z]' '[c-za-b]' < file.txt\n    #       translates all\
    \ lowercase letters in file.txt by two places\n    #       e.g. a -> c, b -> d,\
    \ ..., z -> b\n    #       e.g. tr '[a-z]' '[c-za-b]' < file.txt | tr '[A-Z]'\
    \ '[C-ZA-B]'\n    #       translates all lowercase letters in file.txt by two\
    \ places\n    #       and all uppercase letters in file.txt by two places\n  \
    \  #       e.g. A -> C, B -> D, ..., Z -> B\n    #       e.g. tr '[a-z]' '[c-za-b]'\
    \ < file.txt | tr '[A-Z]' '[C-ZA-B]' | tr '[0-9]' '[2-92-0]'\n    #       translates\
    \ all lowercase letters in file.txt by two places\n    #       and all uppercase\
    \ letters in file.txt by two places\n    #       and all digits in file.txt by\
    \ two places\n    #       e.g. 0 -> 2, 1 -> 3, ..., 9 -> 1\n    #       e.g. tr\
    \ '[a-z]' '[c-za-b]' < file.txt | tr '[A-Z]' '[C-ZA-B]' | tr '[0-9]' '[2-92-0]'\
    \ | tr '[^a-zA-Z0-9]' '[^c-za-bC-ZA-B2-92-0]'\n    #       translates all lowercase\
    \ letters in file.txt by two places\n    #       and all uppercase letters in\
    \ file.txt by two places\n    #       and all digits in file.txt by two places\n\
    \    #       and all non-alphanumeric characters in file.txt by two places\n \
    \   #       e.g. ! -> #, @ -> %, ..., ^ -> &, _ -> ~\n    #       e.g. tr '[a-z]'\
    \ '[c-za-b]' < file.txt | tr '[A-Z]' '[C-ZA", "    # TODO: Implement this function\n\
    \    echo \"Not yet implemented\"", "    # TODO: implement this function\n   \
    \ # Hint: use the rotate function\n    # Hint: use the ord function\n    # Hint:\
    \ use the chr function\n    # Hint: use the concat function\n    # Hint: use the\
    \ range function\n    # Hint: use the map function\n    # Hint: use the join function\n\
    \    # Hint: use the reduce function\n    # Hint: use the filter function\n  \
    \  # Hint: use the zip function\n    # Hint: use the enumerate function\n    #\
    \ Hint: use the sorted function\n    # Hint: use the reversed function\n    #\
    \ Hint: use the sum function\n    # Hint: use the max function\n    # Hint: use\
    \ the min function\n    # Hint: use the abs function\n    # Hint: use the pow\
    \ function\n    # Hint: use the round function\n    # Hint: use the divmod function\n\
    \    # Hint: use the all function\n    # Hint: use the any function\n    # Hint:\
    \ use the len function\n    # Hint: use the str function\n    # Hint: use the\
    \ int function\n    # Hint: use the float function\n    # Hint: use the chr function\n\
    \    # Hint: use the ord function\n    # Hint: use the bin function\n    # Hint:\
    \ use the hex function\n    # Hint: use the oct function\n    # Hint: use the\
    \ format function\n    # Hint: use the input function\n    # Hint: use the print\
    \ function\n    # Hint: use the eval function\n    # Hint: use the exec function\n\
    \    # Hint: use the locals function\n    # Hint: use the globals function\n \
    \   # Hint: use the vars function\n    # Hint: use the dir function\n    # Hint:\
    \ use the help function\n    # Hint: use the id function\n    # Hint: use the\
    \ type function\n    # Hint: use the isinstance function\n    # Hint: use the\
    \ issubclass function\n    # Hint: use the callable function\n    # Hint: use\
    \ the iter function\n    # Hint: use the next function\n    # Hint: use the iterable\
    \ function\n", "    # TODO: Implement this function\n    # Hint: You can use the\
    \ tr command to translate characters\n    #       in a string.\n    #       For\
    \ example:\n    #       echo 'hi' | tr 'hi' 'lm'\n    #       outputs 'lm'\n \
    \   #       echo 'hi' | tr 'hi' 'lm' | tr 'lm' 'hi'\n    #       outputs 'hi'\n\
    \    #       echo 'hi' | tr 'hi' 'lm' | tr 'lm' 'hi' | tr 'hi' 'lm'\n    #   \
    \    outputs 'lm'\n    #       echo 'hi' | tr 'hi' 'lm' | tr 'lm' 'hi' | tr 'hi'\
    \ 'lm' | tr 'lm' 'hi'\n    #       outputs 'hi'\n    #       echo 'hi' | tr 'hi'\
    \ 'lm' | tr 'lm' 'hi' | tr 'hi' 'lm' | tr 'lm' 'hi' | tr 'hi' 'lm'\n    #    \
    \   outputs 'lm'\n    #       echo 'hi' | tr 'hi' 'lm' | tr 'lm' 'hi' | tr 'hi'\
    \ 'lm' | tr 'lm' 'hi' | tr 'hi' 'lm' | tr 'lm' 'hi'\n    #       outputs 'hi'\n\
    \    #       echo 'hi' | tr 'hi' 'lm' | tr 'lm' 'hi' | tr 'hi' 'lm' | tr 'lm'\
    \ 'hi' | tr 'hi' 'lm' | tr 'lm' 'hi' | tr 'hi' 'lm'\n    #       outputs 'lm'\n\
    \    #       echo 'hi' | tr 'hi' 'lm' | tr 'lm' 'hi' | tr 'hi' 'lm' | tr 'lm'\
    \ 'hi' | tr 'hi' 'lm' | tr 'lm' 'hi' | tr 'hi' 'lm' | tr 'lm' 'hi'\n    #    \
    \   outputs 'hi'\n    #       echo 'hi' | tr 'hi' 'lm'", "    # TODO: Write your\
    \ code here\n    echo \"TODO\"", "    # TODO: Implement this function\n    echo\
    \ \"TODO\"", "    # TODO: Implement this function\n    echo \"TODO\"", "    #\
    \ TODO: implement this function\n    # Hint: use the ord and chr functions\n \
    \   # ord('a') returns 97\n    # chr(97) returns 'a'\n    #\n    # Hint: use the\
    \ modulo operator\n    # 5 % 2 returns 1\n    # 6 % 2 returns 0\n    #\n    #\
    \ Hint: use the range operator\n    # {1..5} returns 1 2 3 4 5\n    #\n    # Hint:\
    \ use the for loop\n    # for i in {1..5}; do echo $i; done\n    #\n    # Hint:\
    \ use the for loop\n    # for i in {1..5}; do echo $i; done\n    #\n    # Hint:\
    \ use the for loop\n    # for i in {1..5}; do echo $i; done\n    #\n    # Hint:\
    \ use the for loop\n    # for i in {1..5}; do echo $i; done\n    #\n    # Hint:\
    \ use the for loop\n    # for i in {1..5}; do echo $i; done\n    #\n    # Hint:\
    \ use the for loop\n    # for i in {1..5}; do echo $i; done\n    #\n    # Hint:\
    \ use the for loop\n    # for i in {1..5}; do echo $i; done\n    #\n    # Hint:\
    \ use the for loop\n    # for i in {1..5}; do echo $i; done\n    #\n    # Hint:\
    \ use the for loop\n    # for i in {1..5}; do echo $i; done\n    #\n    # Hint:\
    \ use the for loop\n    # for i in {1..5}; do echo $i; done\n    #\n    # Hint:\
    \ use the for loop\n    # for i in {1..5}; do echo $i; done\n    #\n    # Hint:\
    \ use the for loop\n    # for i in {1..5}; do echo $i; done\n    #\n    # Hint:\
    \ use the for loop\n    # for i in {1..5}; do echo $i; done\n    #\n    # Hint:\
    \ use the for loop\n    # for i in {1..", '    # your code here', "    # TODO:\
    \ Implement this function\n    # Hint: Use the tr command\n    # Hint: Use the\
    \ echo command\n    # Hint: Use the bc command\n    # Hint: Use the expr command\n\
    \    # Hint: Use the printf command\n    # Hint: Use the seq command\n    # Hint:\
    \ Use the rev command\n    # Hint: Use the sort command\n    # Hint: Use the uniq\
    \ command\n    # Hint: Use the wc command\n    # Hint: Use the sed command\n \
    \   # Hint: Use the head command\n    # Hint: Use the tail command\n    # Hint:\
    \ Use the cut command\n    # Hint: Use the tr command\n    # Hint: Use the rev\
    \ command\n    # Hint: Use the tr command\n    # Hint: Use the rev command\n \
    \   # Hint: Use the tr command\n    # Hint: Use the rev command\n    # Hint: Use\
    \ the tr command\n    # Hint: Use the rev command\n    # Hint: Use the tr command\n\
    \    # Hint: Use the rev command\n    # Hint: Use the tr command\n    # Hint:\
    \ Use the rev command\n    # Hint: Use the tr command\n    # Hint: Use the rev\
    \ command\n    # Hint: Use the tr command\n    # Hint: Use the rev command\n \
    \   # Hint: Use the tr command\n    # Hint: Use the rev command\n    # Hint: Use\
    \ the tr command\n    # Hint: Use the rev command\n    # Hint: Use the tr command\n\
    \    # Hint: Use the rev command\n    # Hint: Use the tr command\n    # Hint:\
    \ Use the rev command\n    # Hint: Use the tr command\n    # Hint: Use the rev\
    \ command\n    # Hint: Use the tr command\n    # Hint: Use the rev command\n \
    \   # Hint: Use the tr command\n    # Hint: Use the rev command\n    # Hint: Use\
    \ the tr command\n    # Hint: Use the rev command\n    # Hint: Use the tr command\n\
    \    # Hint: Use the rev command\n    # Hint: Use the tr command\n    # Hint:\
    \ Use the rev command\n", "    # TODO: Write this function\n    echo \"TODO\"",
  "    # TODO: Implement this function\n    # Hint: Use the ord and chr functions\n\
    \    # ord takes a character and returns its ASCII value\n    # chr takes an ASCII\
    \ value and returns its character\n    #\n    # Example:\n    # ord('a') returns\
    \ 97\n    # chr(97) returns 'a'\n    #\n    # Example:\n    # ord('b') returns\
    \ 98\n    # ord('b') + 2 returns 100\n    # chr(100) returns 'd'\n    #\n    #\
    \ Example:\n    # ord('z') returns 122\n    # ord('z') + 2 returns 124\n    #\
    \ chr(124) returns '|'\n    #\n    # Example:\n    # ord('|') returns 124\n  \
    \  # ord('|') - 26 returns 98\n    # chr(98) returns 'b'\n    #\n    # Example:\n\
    \    # ord('a') returns 97\n    # ord('a') - 26 returns 71\n    # chr(71) returns\
    \ 'G'\n    #\n    # Example:\n    # ord('A') returns 65\n    # ord('A') + 2 returns\
    \ 67\n    # chr(67) returns 'C'\n    #\n    # Example:\n    # ord('Z') returns\
    \ 90\n    # ord('Z') + 2 returns 92\n    # chr(92) returns '\\\\'\n    #\n   \
    \ # Example:\n    # ord('\\\\') returns 92\n    # ord('\\\\') - 26 returns 66\n\
    \    # chr(66) returns 'B'\n    #\n    # Example:\n    # ord('A') returns 65\n\
    \    # ord('A') - 26 returns 39\n    # chr(39) returns '\\''\n    #\n    # Example:\n\
    \    # ord('0') returns 48\n    # ord('0') + 2 returns 50\n    # chr(50) returns\
    \ '2'\n    #\n    # Example:\n    # ord('9') returns 57\n    # ord('9') + 2 returns\
    \ 59\n    # chr(59) returns ';'\n    #\n    # Example:\n    # ord(';') returns\
    \ 59\n    # ord(';') - 10 returns 49\n    # chr(49)", "    # TODO: Implement this\
    \ function\n    # Hint: You can use the modulus operator to wrap around the alphabet\n\
    \    # Hint: You can use the ord() and chr() functions to convert between\n  \
    \  #       ascii characters and their integer values\n    # Hint: You can use\
    \ the string concatenation operator to append\n    #       characters to a string\n\
    \    # Hint: You can use the string length operator to get the length of\n   \
    \ #       a string\n    # Hint: You can use the string index operator to get the\
    \ character\n    #       at a given index in a string\n    # Hint: You can use\
    \ the string slice operator to get a substring\n    #       from a string\n  \
    \  # Hint: You can use the string assignment operator to replace a\n    #    \
    \   character in a string\n    # Hint: You can use the string assignment operator\
    \ to insert a\n    #       character into a string\n    # Hint: You can use the\
    \ string assignment operator to delete a\n    #       character from a string\n\
    \    # Hint: You can use the string assignment operator to append a\n    #   \
    \    character to a string\n    # Hint: You can use the string assignment operator\
    \ to prepend a\n    #       character to a string\n    # Hint: You can use the\
    \ string assignment operator to concatenate\n    #       two strings\n    # Hint:\
    \ You can use the string assignment operator to repeat a\n    #       string\n\
    \    # Hint: You can use the string assignment operator to reverse a\n    #  \
    \     string\n    # Hint: You can use the string assignment operator to sort a\
    \ string\n    # Hint: You can use the string assignment operator to remove\n \
    \   #       duplicate characters from a string\n    # Hint: You can use the string\
    \ assignment operator to remove\n    #       whitespace from a string\n    # Hint:\
    \ You can use the string assignment operator to remove\n    #       punctuation\
    \ from a string\n    # Hint: You can use the string assignment operator to remove\n\
    \    #       digits from a string\n    # Hint: You can use the string assignment\
    \ operator to remove\n    #       non-alphabetic characters from a string\n  \
    \  # Hint: You can use the string assignment operator to remove\n    #       non-alphanumeric\
    \ characters from", "    # Your code here\n    echo $1 | tr 'a-z' 'c-za-b'", " \
    \   # TODO: Write your code here\n    # Hint: You can use the following command\
    \ to rotate the alphabet\n    # echo {a..z} | tr ' ' '\\n' | tail -n +3 | tr '\\\
    n' ' '\n    #\n    # Hint: You can use the following command to rotate the alphabet\
    \ in reverse\n    # echo {a..z} | tr ' ' '\\n' | tail -n +3 | tac | tr '\\n' '\
    \ '\n    #\n    # Hint: You can use the following command to rotate the alphabet\
    \ by n places\n    # echo {a..z} | tr ' ' '\\n' | tail -n +3 | tail -n +$n | tr\
    \ '\\n' ' '\n    #\n    # Hint: You can use the following command to rotate the\
    \ alphabet in reverse by n places\n    # echo {a..z} | tr ' ' '\\n' | tail -n\
    \ +3 | tail -n +$n | tac | tr '\\n' ' '\n    #\n    # Hint: You can use the following\
    \ command to rotate the alphabet by n places\n    # echo {a..z} | tr ' ' '\\n'\
    \ | tail -n +3 | tail -n +$n | tr '\\n' ' '\n    #\n    # Hint: You can use the\
    \ following command to rotate the alphabet in reverse by n places\n    # echo\
    \ {a..z} | tr ' ' '\\n' | tail -n +3 | tail -n +$n | tac | tr '\\n' ' '\n    #\n\
    \    # Hint: You can use the following command to rotate the alphabet by n places\n\
    \    # echo {a..z} | tr ' ' '\\n' | tail -n +3 | tail -n +$n | tr '\\n' ' '\n\
    \    #\n    # Hint: You can use the following command to rotate the alphabet in\
    \ reverse by n places\n    # echo {a..z} | tr ' ' '\\n' | tail -n +3 | tail -n\
    \ +$n | tac | tr '\\n' ' '\n    #\n    # Hint: You can use the following command\
    \ to rotate the alphabet by n places\n    # echo {a..", "    # TODO: implement\
    \ this function\n    # Hint: use the ord and chr functions\n    # Hint: use the\
    \ modulus operator\n    # Hint: use the range operator\n    # Hint: use the string\
    \ concatenation operator\n    # Hint: use the string length operator\n    # Hint:\
    \ use the string indexing operator\n    # Hint: use the string slicing operator\n\
    \    # Hint: use the string repetition operator\n    # Hint: use the string repetition\
    \ operator\n    # Hint: use the string repetition operator\n    # Hint: use the\
    \ string repetition operator\n    # Hint: use the string repetition operator\n\
    \    # Hint: use the string repetition operator\n    # Hint: use the string repetition\
    \ operator\n    # Hint: use the string repetition operator\n    # Hint: use the\
    \ string repetition operator\n    # Hint: use the string repetition operator\n\
    \    # Hint: use the string repetition operator\n    # Hint: use the string repetition\
    \ operator\n    # Hint: use the string repetition operator\n    # Hint: use the\
    \ string repetition operator\n    # Hint: use the string repetition operator\n\
    \    # Hint: use the string repetition operator\n    # Hint: use the string repetition\
    \ operator\n    # Hint: use the string repetition operator\n    # Hint: use the\
    \ string repetition operator\n    # Hint: use the string repetition operator\n\
    \    # Hint: use the string repetition operator\n    # Hint: use the string repetition\
    \ operator\n    # Hint: use the string repetition operator\n    # Hint: use the\
    \ string repetition operator\n    # Hint: use the string repetition operator\n\
    \    # Hint: use the string repetition operator\n    # Hint: use the string repetition\
    \ operator\n    # Hint: use the string repetition operator\n    # Hint: use the\
    \ string repetition operator\n    # Hint: use the string repetition operator\n\
    \    # Hint: use the string repetition operator\n    # Hint: use the string repetition\
    \ operator\n    # Hint: use the string repetition operator\n    # Hint: use the\
    \ string repetition operator\n    # Hint: use the string repetition operator\n\
    \    # Hint: use the string repetition operator\n    # Hint: use the string repetition\
    \ operator\n    # Hint: use the string repetition operator\n    # H", "    # TODO:\
    \ Implement this function\n    # Hint: You can use the modulo operator to wrap\
    \ around the alphabet\n    # Hint: You can use the ord and chr functions to convert\
    \ between characters and their ASCII values\n    # Hint: You can use the string\
    \ concatenation operator to join strings together\n    # Hint: You can use the\
    \ length function to get the length of a string\n    # Hint: You can use the range\
    \ function to iterate over the characters in a string\n    # Hint: You can use\
    \ the ord function to get the ASCII value of a character\n    # Hint: You can\
    \ use the chr function to get the character for an ASCII value\n    # Hint: You\
    \ can use the string concatenation operator to join strings together\n    # Hint:\
    \ You can use the length function to get the length of a string\n    # Hint: You\
    \ can use the range function to iterate over the characters in a string\n    #\
    \ Hint: You can use the ord function to get the ASCII value of a character\n \
    \   # Hint: You can use the chr function to get the character for an ASCII value\n\
    \    # Hint: You can use the string concatenation operator to join strings together\n\
    \    # Hint: You can use the length function to get the length of a string\n \
    \   # Hint: You can use the range function to iterate over the characters in a\
    \ string\n    # Hint: You can use the ord function to get the ASCII value of a\
    \ character\n    # Hint: You can use the chr function to get the character for\
    \ an ASCII value\n    # Hint: You can use the string concatenation operator to\
    \ join strings together\n    # Hint: You can use the length function to get the\
    \ length of a string\n    # Hint: You can use the range function to iterate over\
    \ the characters in a string\n    # Hint: You can use the ord function to get\
    \ the ASCII value of a character\n    # Hint: You can use the chr function to\
    \ get the character for an ASCII value\n    # Hint: You can use the string concatenation\
    \ operator to join strings together\n    # Hint: You can use the length function\
    \ to get the length of a string\n    # Hint: You can use the range function to\
    \ iterate over the characters in a string\n    #", "    # TODO: implement this\
    \ function\n    # Hint: use the rotate function\n    echo \"TODO\"", "    # Write\
    \ your code here\n    echo $1", '    # your code here', '    # TODO: write your
    code here', "    # TODO: Write your code here\n    # Hint: You can use the ord()\
    \ and chr() functions to convert between\n    # ASCII numbers and characters.\n\
    \    # Hint: You can use the modulo operator (%) to wrap around the alphabet.\n\
    \    # Hint: You can use the range operator (..) to iterate over the string.\n\
    \    # Hint: You can use the length operator (#) to get the length of a string.\n\
    \    # Hint: You can use the concatenation operator (..) to concatenate strings.\n\
    \    # Hint: You can use the substitution operator (//) to replace characters.\n\
    \    # Hint: You can use the index operator ([]) to get the character at a given\
    \ index.\n    # Hint: You can use the assignment operator (=) to assign a value\
    \ to a variable.\n    # Hint: You can use the addition operator (+) to add two\
    \ numbers.\n    # Hint: You can use the multiplication operator (*) to multiply\
    \ two numbers.\n    # Hint: You can use the division operator (/) to divide two\
    \ numbers.\n    # Hint: You can use the exponentiation operator (**) to raise\
    \ a number to a power.\n    # Hint: You can use the floor division operator (//)\
    \ to divide two numbers and get the integer part.\n    # Hint: You can use the\
    \ modulo operator (%) to divide two numbers and get the remainder.\n    # Hint:\
    \ You can use the range operator (..) to iterate over a range of numbers.\n  \
    \  # Hint: You can use the length operator (#) to get the length of a string.\n\
    \    # Hint: You can use the concatenation operator (..) to concatenate strings.\n\
    \    # Hint: You can use the substitution operator (//) to replace characters.\n\
    \    # Hint: You can use the index operator ([]) to get the character at a given\
    \ index.\n    # Hint: You can use the assignment operator (=) to assign a value\
    \ to a variable.\n    # Hint: You can use the addition operator (+) to add two\
    \ numbers.\n    # Hint: You can use the multiplication operator (*) to multiply\
    \ two numbers.\n    # Hint: You can use the division operator (/) to divide two\
    \ numbers.\n    #", "    echo $1 | tr 'a-z' 'c-za-b'", "    # TODO: write your\
    \ code here\n    # Hint: use the command 'echo' and the pipe '|'\n    #      \
    \ to send the output of one command to another\n    #       for example:\n   \
    \ #       echo \"hello\" | tr \"a-z\" \"b-za\"\n    #       will translate all\
    \ letters from a-z to b-za\n    #       and print \"ifmmp\"\n    #\n    #    \
    \   You can also use the command 'expr' to perform\n    #       arithmetic operations\n\
    \    #       for example:\n    #       expr 5 + 3\n    #       will print 8\n\
    \    #\n    #       You can also use the command 'bc' to perform\n    #      \
    \ arithmetic operations\n    #       for example:\n    #       echo \"5 + 3\"\
    \ | bc\n    #       will print 8\n    #\n    #       You can also use the command\
    \ 'od' to convert\n    #       text to ascii values\n    #       for example:\n\
    \    #       echo \"hi\" | od -An -t dC\n    #       will print \"104 105 \"\n\
    \    #\n    #       You can also use the command 'tr' to translate\n    #    \
    \   ascii values to text\n    #       for example:\n    #       echo \"104 105\
    \ \" | tr \"0-9 \" \"\\n\" | tr \"0-9a-f\" \"a-p\"\n    #       will print \"\
    hi\"\n    #\n    #       You can also use the command 'fold' to wrap\n    #  \
    \     text to a certain width\n    #       for example:\n    #       echo \"hello\
    \ world\" | fold -w5\n    #       will print\n    #       hello\n    #       world\n\
    \    #\n    #       You can also use the command 'head' to print\n    #      \
    \ the first part of a file or output\n    #       for example:\n    #       echo\
    \ \"hello world\" | head -n1\n    #       will print \"hello\"\n    #\n    # \
    \      You can also use the command 'tail' to print\n    #       the last part\
    \ of a file or output\n    #       for example:\n    #       echo \"hello world\"\
    \ | tail -n1\n    #       will print \"", "  # TODO: Implement this function\n\
    \  # Hint: You can use the modulo operator to wrap around the alphabet\n  # Hint:\
    \ You can use the ord() and chr() functions to convert between\n  #       characters\
    \ and ASCII values\n  # Hint: You can use the $1 variable to access the argument\n\
    \  # Hint: You can use the echo command to return a value\n  # Hint: You can use\
    \ the expr command to do arithmetic\n  # Hint: You can use the seq command to\
    \ generate a sequence of numbers\n  # Hint: You can use the tr command to translate\
    \ characters\n  # Hint: You can use the echo -n command to echo without a newline\n\
    \  # Hint: You can use the echo -e command to interpret escape characters\n  #\
    \ Hint: You can use the echo -e command to interpret escape characters\n  # Hint:\
    \ You can use the echo -e command to interpret escape characters\n  # Hint: You\
    \ can use the echo -e command to interpret escape characters\n  # Hint: You can\
    \ use the echo -e command to interpret escape characters\n  # Hint: You can use\
    \ the echo -e command to interpret escape characters\n  # Hint: You can use the\
    \ echo -e command to interpret escape characters\n  # Hint: You can use the echo\
    \ -e command to interpret escape characters\n  # Hint: You can use the echo -e\
    \ command to interpret escape characters\n  # Hint: You can use the echo -e command\
    \ to interpret escape characters\n  # Hint: You can use the echo -e command to\
    \ interpret escape characters\n  # Hint: You can use the echo -e command to interpret\
    \ escape characters\n  # Hint: You can use the echo -e command to interpret escape\
    \ characters\n  # Hint: You can use the echo -e command to interpret escape characters\n\
    \  # Hint: You can use the echo -e command to interpret escape characters\n  #\
    \ Hint: You can use the echo -e command to interpret escape characters\n  # Hint:\
    \ You can use the echo -e command to interpret escape characters\n  # Hint: You\
    \ can use the echo -e command to interpret escape characters\n  # Hint: You can\
    \ use the echo -e command to interpret escape characters\n  # Hint: You can use\
    \ the echo -e command", "    # Your code here\n    # You can use the following\
    \ command to convert a character to its ASCII value:\n    # printf \"%d\\n\" \"\
    '$char\"\n    #\n    # You can use the following command to convert an ASCII value\
    \ to a character:\n    # printf \\\\$(printf '%03o' $int)\n    #\n    # You can\
    \ use the following command to convert a string to an array:\n    # arr=($string)\n\
    \    #\n    # You can use the following command to convert an array to a string:\n\
    \    # string=${arr[@]}", "    # TODO: Write your code here\n    # Hint: You can\
    \ use the following command to get the length of a string:\n    # len=${#1}\n\
    \    # Hint: You can use the following command to get the ASCII value of a character:\n\
    \    # ord=`printf \"%d\" \"'$c\"`\n    # Hint: You can use the following command\
    \ to convert an ASCII value to a character:\n    # chr=`printf \\\\$(printf '%03o'\
    \ $ord)`\n    # Hint: You can use the following command to convert a character\
    \ to lowercase:\n    # lower=`echo $c | tr '[:upper:]' '[:lower:]'`\n    # Hint:\
    \ You can use the following command to convert a character to uppercase:\n   \
    \ # upper=`echo $c | tr '[:lower:]' '[:upper:]'`\n    # Hint: You can use the\
    \ following command to get the first character of a string:\n    # first=${1:0:1}\n\
    \    # Hint: You can use the following command to get the last character of a\
    \ string:\n    # last=${1: -1}\n    # Hint: You can use the following command\
    \ to get the substring of a string:\n    # sub=${1:1:$len-2}\n    # Hint: You\
    \ can use the following command to convert a string to an array:\n    # arr=($1)\n\
    \    # Hint: You can use the following command to get the length of an array:\n\
    \    # len=${#arr[@]}\n    # Hint: You can use the following command to get the\
    \ first element of an array:\n    # first=${arr[0]}\n    # Hint: You can use the\
    \ following command to get the last element of an array:\n    # last=${arr[$len-1]}\n\
    \    # Hint: You can use the following command to get the substring of an array:\n\
    \    # sub=${arr[@]:1:$len-2}\n    # Hint: You can use the following command to\
    \ convert an array to a string:\n    # str=\"${arr[@]}\"\n    # Hint: You can\
    \ use the following command to convert a string", "    # TODO: Implement this\
    \ function\n    # Hint: Use the ord and chr functions\n    # Hint: Use the modulo\
    \ operator\n    # Hint: Use the range function\n    # Hint: Use the join function\n\
    \    # Hint: Use the map function\n    # Hint: Use the lambda function\n    #\
    \ Hint: Use the zip function\n    # Hint: Use the list function\n    # Hint: Use\
    \ the ord function\n    # Hint: Use the chr function\n    # Hint: Use the range\
    \ function\n    # Hint: Use the join function\n    # Hint: Use the map function\n\
    \    # Hint: Use the lambda function\n    # Hint: Use the zip function\n    #\
    \ Hint: Use the list function\n    # Hint: Use the ord function\n    # Hint: Use\
    \ the chr function\n    # Hint: Use the range function\n    # Hint: Use the join\
    \ function\n    # Hint: Use the map function\n    # Hint: Use the lambda function\n\
    \    # Hint: Use the zip function\n    # Hint: Use the list function\n    # Hint:\
    \ Use the ord function\n    # Hint: Use the chr function\n    # Hint: Use the\
    \ range function\n    # Hint: Use the join function\n    # Hint: Use the map function\n\
    \    # Hint: Use the lambda function\n    # Hint: Use the zip function\n    #\
    \ Hint: Use the list function\n    # Hint: Use the ord function\n    # Hint: Use\
    \ the chr function\n    # Hint: Use the range function\n    # Hint: Use the join\
    \ function\n    # Hint: Use the map function\n    # Hint: Use the lambda function\n\
    \    # Hint: Use the zip function\n    # Hint: Use the list function\n    # Hint:\
    \ Use the ord function\n    # Hint: Use the chr function\n    # Hint: Use the\
    \ range function\n    # Hint: Use the join function\n    # Hint: Use the map function\n\
    \    # Hint: Use the lambda function\n    # Hint: Use the zip function\n    #\
    \ Hint: Use the list function\n    # Hint: Use the ord function\n    # H", '    #
    TODO: Write your code here', "    # TODO: Implement this function\n    # Hint:\
    \ You can use the modulo operator to wrap around the alphabet\n    # Hint: You\
    \ can use the ord() and chr() functions to convert between\n    #       ascii\
    \ characters and ascii values\n    # Hint: You can use the string concatenation\
    \ operator to combine\n    #       strings together\n    # Hint: You can use the\
    \ string length operator to get the length of\n    #       a string\n    # Hint:\
    \ You can use the string index operator to get the character\n    #       at a\
    \ given index of a string\n    # Hint: You can use the string slice operator to\
    \ get a substring of\n    #       a string\n    # Hint: You can use the string\
    \ replace operator to replace a substring\n    #       of a string\n    # Hint:\
    \ You can use the string split operator to split a string into\n    #       an\
    \ array of strings\n    # Hint: You can use the string join operator to join an\
    \ array of\n    #       strings into a single string\n    # Hint: You can use\
    \ the string lower operator to convert a string\n    #       to lowercase\n  \
    \  # Hint: You can use the string upper operator to convert a string\n    #  \
    \     to uppercase\n    # Hint: You can use the string strip operator to remove\
    \ leading and\n    #       trailing whitespace from a string\n    # Hint: You\
    \ can use the string lstrip operator to remove leading\n    #       whitespace\
    \ from a string\n    # Hint: You can use the string rstrip operator to remove\
    \ trailing\n    #       whitespace from a string\n    # Hint: You can use the\
    \ string isalpha operator to check if a string\n    #       contains only alphabetic\
    \ characters\n    # Hint: You can use the string isdigit operator to check if\
    \ a string\n    #       contains only numeric characters\n    # Hint: You can\
    \ use the string isalnum operator to check if a string\n    #       contains only\
    \ alphanumeric characters\n    # Hint: You can use the string islower operator\
    \ to check if a string\n    #       contains only lowercase characters\n    #\
    \ Hint: You can use the string isupper operator to check if a string\n    #  \
    \     contains only uppercase characters\n    #", "    # TODO: Implement this\
    \ function\n    # Hint: You can use the modulo operator to wrap around the alphabet\n\
    \    # Hint: You can use the ord() and chr() functions to convert between\n  \
    \  #       characters and their ASCII values\n    # Hint: You can use the string\
    \ concatenation operator to join strings\n    #       together\n    # Hint: You\
    \ can use the length() function to get the length of a string\n    # Hint: You\
    \ can use the substr() function to get a substring of a string\n    # Hint: You\
    \ can use the index() function to get the index of a character\n    #       in\
    \ a string\n    # Hint: You can use the gsub() function to replace all occurrences\
    \ of a\n    #       character in a string\n    # Hint: You can use the toupper()\
    \ function to convert a string to uppercase\n    # Hint: You can use the tolower()\
    \ function to convert a string to lowercase\n    # Hint: You can use the ascii_letters\
    \ variable to get all letters in the\n    #       alphabet\n    # Hint: You can\
    \ use the isalpha() function to check if a character is a\n    #       letter\n\
    \    # Hint: You can use the isupper() function to check if a character is\n \
    \   #       uppercase\n    # Hint: You can use the islower() function to check\
    \ if a character is\n    #       lowercase\n    # Hint: You can use the isdigit()\
    \ function to check if a character is a\n    #       digit\n    # Hint: You can\
    \ use the isalnum() function to check if a character is a\n    #       letter\
    \ or a digit\n    # Hint: You can use the ispunct() function to check if a character\
    \ is a\n    #       punctuation character\n    # Hint: You can use the isspace()\
    \ function to check if a character is a\n    #       whitespace character\n  \
    \  # Hint: You can use the isprintable() function to check if a character is\n\
    \    #       printable\n    # Hint: You can use the isascii() function to check\
    \ if a character is an\n    #       ASCII character\n    # Hint: You can use the\
    \ isdecimal() function to check if a", "    # TODO: Implement this function\n\
    \    # Hint: You can use the modulo operator to wrap around the alphabet\n   \
    \ # Hint: You can use the ord() and chr() functions to convert between\n    #\
    \       characters and their ASCII values\n    # Hint: You can use the string\
    \ concatenation operator to join strings\n    #       together\n    # Hint: You\
    \ can use the string slicing operator to get a substring\n    #       from a string\n\
    \    # Hint: You can use the string length operator to get the length of\n   \
    \ #       a string\n    # Hint: You can use the string repetition operator to\
    \ repeat a\n    #       string multiple times\n    # Hint: You can use the string\
    \ indexing operator to get a character\n    #       from a string\n    # Hint:\
    \ You can use the string assignment operator to assign a\n    #       character\
    \ to a string\n    # Hint: You can use the string assignment operator to assign\
    \ a\n    #       substring to a string\n    # Hint: You can use the string assignment\
    \ operator to assign a\n    #       string to a string\n    # Hint: You can use\
    \ the string assignment operator to assign a\n    #       character to a substring\
    \ of a string\n    # Hint: You can use the string assignment operator to assign\
    \ a\n    #       substring to a substring of a string\n    # Hint: You can use\
    \ the string assignment operator to assign a\n    #       string to a substring\
    \ of a string\n    # Hint: You can use the string assignment operator to assign\
    \ a\n    #       substring to a substring of a string\n    # Hint: You can use\
    \ the string assignment operator to assign a\n    #       string to a substring\
    \ of a string\n    # Hint: You can use the string assignment operator to assign\
    \ a\n    #       substring to a substring of a string\n    # Hint: You can use\
    \ the string assignment operator to assign a\n    #       string to a substring\
    \ of a string\n    # Hint: You can use the string assignment operator to assign\
    \ a\n    #       substring to a substring of a string\n    # Hint: You can use\
    \ the string assignment operator to assign a\n    #       string to a substring\
    \ of a string\n    # Hint: You", "    # TODO: Implement this function\n    echo\
    \ $1 | tr 'a-z' 'c-za-b'", "    # TODO: Implement this function\n    # Hint: Use\
    \ the ord and chr functions to convert between characters and their ASCII values\n\
    \    # Hint: Use the modulo operator to wrap around the alphabet\n    # Hint:\
    \ Use the range function to create a list of numbers\n    # Hint: Use the join\
    \ function to join a list of characters together\n    # Hint: Use the map function\
    \ to apply a function to every element of a list\n    # Hint: Use the zip function\
    \ to combine two lists\n    # Hint: Use the enumerate function to get the index\
    \ of an element in a list\n    # Hint: Use the filter function to filter out elements\
    \ of a list\n    # Hint: Use the reduce function to combine the elements of a\
    \ list\n    # Hint: Use the sorted function to sort a list\n    # Hint: Use the\
    \ reversed function to reverse a list\n    # Hint: Use the list function to convert\
    \ a string into a list\n    # Hint: Use the str function to convert a list into\
    \ a string\n    # Hint: Use the len function to get the length of a list\n   \
    \ # Hint: Use the int function to convert a string into an integer\n    # Hint:\
    \ Use the float function to convert a string into a float\n    # Hint: Use the\
    \ round function to round a float\n    # Hint: Use the abs function to get the\
    \ absolute value of a number\n    # Hint: Use the pow function to raise a number\
    \ to a power\n    # Hint: Use the sqrt function to get the square root of a number\n\
    \    # Hint: Use the sum function to sum the elements of a list\n    # Hint: Use\
    \ the max function to get the maximum element of a list\n    # Hint: Use the min\
    \ function to get the minimum element of a list\n    # Hint: Use the all function\
    \ to check if all elements of a list are true\n    # Hint: Use the any function\
    \ to check if any elements of a list are true\n    # Hint: Use the zip_longest\
    \ function to combine two lists\n    # Hint: Use the isinstance function to check\
    \ if an object is an instance of a class\n    # Hint: Use the isinstance function\
    \ to check if an object is an instance of a class\n    # Hint: Use the is", '    #
    TODO: write your code here', "    # TODO: Implement this function\n    echo $1",
  '    # TODO: Write your code here', "    # TODO: Implement this function\n    #\
    \ Hint: You may want to use the modulo operator\n    #       and the length of\
    \ the string\n    # Hint: You may want to use the ord() and chr() functions\n\
    \    #       to convert between characters and their ASCII values\n    # Hint:\
    \ You may want to use the string concatenation operator\n    #       to append\
    \ characters to a string\n    # Hint: You may want to use the string slicing operator\n\
    \    #       to extract a substring from a string\n    # Hint: You may want to\
    \ use the string repetition operator\n    #       to repeat a string\n    # Hint:\
    \ You may want to use the string replace operator\n    #       to replace a substring\
    \ with another substring\n    # Hint: You may want to use the string split operator\n\
    \    #       to split a string into a list of strings\n    # Hint: You may want\
    \ to use the string join operator\n    #       to join a list of strings into\
    \ a string\n    # Hint: You may want to use the string strip operator\n    # \
    \      to remove whitespace from a string\n    # Hint: You may want to use the\
    \ string lower operator\n    #       to convert a string to lowercase\n    # Hint:\
    \ You may want to use the string upper operator\n    #       to convert a string\
    \ to uppercase\n    # Hint: You may want to use the string capitalize operator\n\
    \    #       to capitalize a string\n    # Hint: You may want to use the string\
    \ title operator\n    #       to titlecase a string\n    # Hint: You may want\
    \ to use the string swapcase operator\n    #       to swap the case of a string\n\
    \    # Hint: You may want to use the string center operator\n    #       to center\
    \ a string\n    # Hint: You may want to use the string ljust operator\n    # \
    \      to left-justify a string\n    # Hint: You may want to use the string rjust\
    \ operator\n    #       to right-justify a string\n    # Hint: You may want to\
    \ use the string zfill operator\n    #       to zero-fill a string\n    # Hint:\
    \ You may want to use the string format operator\n    #       to format a string\n\
    \    # Hint: You", "    # TODO: Implement this function\n    # Hint: You can use\
    \ the modulo operator to rotate the alphabet\n    # Hint: You can use the ord()\
    \ and chr() functions to convert between\n    #       characters and their ASCII\
    \ values\n    # Hint: You can use the range() function to create a list of numbers\n\
    \    #       from 0 to 25\n    # Hint: You can use the join() function to join\
    \ a list of characters\n    #       together into a string\n    # Hint: You can\
    \ use the map() function to apply a function to each\n    #       element of a\
    \ list\n    # Hint: You can use the zip() function to combine two lists into a\n\
    \    #       list of tuples\n    # Hint: You can use the enumerate() function\
    \ to get the index of an\n    #       element in a list\n    # Hint: You can use\
    \ the str() function to convert a number to a string\n    # Hint: You can use\
    \ the int() function to convert a string to a number\n    # Hint: You can use\
    \ the ord() function to convert a character to a\n    #       number\n    # Hint:\
    \ You can use the chr() function to convert a number to a\n    #       character\n\
    \    # Hint: You can use the len() function to get the length of a string\n  \
    \  # Hint: You can use the range() function to create a list of numbers\n    #\
    \       from 0 to 25\n    # Hint: You can use the join() function to join a list\
    \ of characters\n    #       together into a string\n    # Hint: You can use the\
    \ map() function to apply a function to each\n    #       element of a list\n\
    \    # Hint: You can use the zip() function to combine two lists into a\n    #\
    \       list of tuples\n    # Hint: You can use the enumerate() function to get\
    \ the index of an\n    #       element in a list\n    # Hint: You can use the\
    \ str() function to convert a number to a string\n    # Hint: You can use the\
    \ int() function to convert a string to a number\n    # Hint: You can use the\
    \ ord() function to convert a character to a\n    #       number\n    # Hint:\
    \ You can use the chr", "\t# TODO: Write this function\n\t# Hint: You can use\
    \ the tr command to translate characters\n\t# in a string. For example:\n\t# echo\
    \ 'hello' | tr 'a-z' 'c-za-b'\n\t# will translate all the characters in the string\
    \ 'hello'\n\t# to the next character in the alphabet.\n\t#\n\t# The tr command\
    \ can also take a string of characters to\n\t# translate. For example:\n\t# echo\
    \ 'hello' | tr 'aeiou' '12345'\n\t# will translate all the vowels in the string\
    \ 'hello' to\n\t# the numbers 1, 2, 3, 4, and 5.\n\t#\n\t# You can also use the\
    \ tr command to delete characters from\n\t# a string. For example:\n\t# echo 'hello'\
    \ | tr -d 'l'\n\t# will delete all the 'l' characters from the string 'hello'.\n\
    \t#\n\t# You can also use the tr command to squeeze multiple\n\t# occurrences\
    \ of a character into a single occurrence. For\n\t# example:\n\t# echo 'hello'\
    \ | tr -s 'l'\n\t# will squeeze all the 'l' characters in the string 'hello'\n\
    \t# into a single 'l' character.\n\t#\n\t# You can also use the tr command to\
    \ complement a set of\n\t# characters. For example:\n\t# echo 'hello' | tr -c\
    \ 'a-z' 'A-Z'\n\t# will translate all the characters in the string 'hello'\n\t\
    # that are not in the range 'a-z' to the corresponding\n\t# uppercase letter.\n\
    \t#\n\t# You can also use the tr command to translate characters\n\t# from a string\
    \ to a string of characters. For example:\n\t# echo 'hello' | tr 'el' 'ip'\n\t\
    # will translate all the 'e' characters in the string 'hello'\n\t# to 'i' and\
    \ all the 'l' characters to 'p'.\n\t#\n\t# You can also use the tr command to\
    \ translate characters\n\t# from a string to a string of characters. For example:\n\
    \t# echo 'hello' | tr 'el' 'ip'\n\t# will translate all the 'e' characters", " \
    \   # TODO: Implement this function\n    # Hint: You can use the modulo operator\
    \ to wrap around the alphabet\n    # Hint: You can use the ord() and chr() functions\
    \ to convert between characters and ascii values\n    # Hint: You can use the\
    \ length() function to get the length of a string\n    # Hint: You can use the\
    \ substr() function to get a substring of a string\n    # Hint: You can use the\
    \ concatenation operator to concatenate strings\n    # Hint: You can use the assignment\
    \ operator to assign a value to a variable\n    # Hint: You can use the return\
    \ keyword to return a value from a function\n    # Hint: You can use the for keyword\
    \ to loop over a list of values\n    # Hint: You can use the range() function\
    \ to generate a list of values\n    # Hint: You can use the if keyword to check\
    \ if a condition is true\n    # Hint: You can use the else keyword to execute\
    \ code if a condition is false\n    # Hint: You can use the elif keyword to check\
    \ if a condition is true\n    # Hint: You can use the continue keyword to skip\
    \ the rest of the loop\n    # Hint: You can use the break keyword to break out\
    \ of a loop\n    # Hint: You can use the and keyword to check if two conditions\
    \ are true\n    # Hint: You can use the or keyword to check if one of two conditions\
    \ is true\n    # Hint: You can use the not keyword to check if a condition is\
    \ false\n    # Hint: You can use the in keyword to check if a value is in a list\n\
    \    # Hint: You can use the not in keyword to check if a value is not in a list\n\
    \    # Hint: You can use the is keyword to check if two values are equal\n   \
    \ # Hint: You can use the is not keyword to check if two values are not equal\n\
    \    # Hint: You can use the <, >, <=, >=, ==, != operators to compare two values\n\
    \    # Hint: You can use the +, -, *, /, %, ** operators to do arithmetic\n  \
    \  # Hint: You can use the +=, -=, *=, /=, %=, **= operators to do arithmetic\
    \ assignment\n    #", "    # TODO: Implement this function\n    # Hint: You can\
    \ use the modulo operator to wrap around the alphabet\n    # Hint: You can use\
    \ the ord() and chr() functions to convert between characters and ASCII values\n\
    \    # Hint: You can use the string concatenation operator to combine strings\n\
    \    # Hint: You can use the length() function to get the length of a string\n\
    \    # Hint: You can use the substr() function to get a substring of a string\n\
    \    # Hint: You can use the index() function to get the index of a character\
    \ in a string\n    # Hint: You can use the gsub() function to replace all occurrences\
    \ of a character in a string\n    # Hint: You can use the toupper() function to\
    \ convert a string to uppercase\n    # Hint: You can use the tolower() function\
    \ to convert a string to lowercase\n    # Hint: You can use the match() function\
    \ to check if a string matches a regular expression\n    # Hint: You can use the\
    \ sub() function to replace a regular expression match in a string\n    # Hint:\
    \ You can use the gsub() function to replace all regular expression matches in\
    \ a string\n    # Hint: You can use the split() function to split a string into\
    \ an array of strings\n    # Hint: You can use the join() function to join an\
    \ array of strings into a string\n    # Hint: You can use the sort() function\
    \ to sort an array of strings\n    # Hint: You can use the reverse() function\
    \ to reverse an array of strings\n    # Hint: You can use the sprintf() function\
    \ to format a string\n    # Hint: You can use the printf() function to print a\
    \ formatted string\n    # Hint: You can use the system() function to execute a\
    \ shell command\n    # Hint: You can use the getline() function to read a line\
    \ from standard input\n    # Hint: You can use the close() function to close a\
    \ file\n    # Hint: You can use the open() function to open a file\n    # Hint:\
    \ You can use the exit() function to exit the program\n    # Hint: You can use\
    \ the rand() function to generate a random number\n    # Hint: You can use the\
    \ srand() function to seed the random number", "    # TODO: Implement this function\n\
    \    # Hint: You can use the tr command to translate characters\n    # in a string.\n\
    \    # Hint: You can use the expr command to perform arithmetic\n    # operations.\n\
    \    # Hint: You can use the echo command to print a string.\n    # Hint: You\
    \ can use the read command to read a string.\n    # Hint: You can use the $1 variable\
    \ to access the first\n    # argument passed to the function.\n    # Hint: You\
    \ can use the $2 variable to access the second\n    # argument passed to the function.\n\
    \    # Hint: You can use the $3 variable to access the third\n    # argument passed\
    \ to the function.\n    # Hint: You can use the $4 variable to access the fourth\n\
    \    # argument passed to the function.\n    # Hint: You can use the $5 variable\
    \ to access the fifth\n    # argument passed to the function.\n    # Hint: You\
    \ can use the $6 variable to access the sixth\n    # argument passed to the function.\n\
    \    # Hint: You can use the $7 variable to access the seventh\n    # argument\
    \ passed to the function.\n    # Hint: You can use the $8 variable to access the\
    \ eighth\n    # argument passed to the function.\n    # Hint: You can use the\
    \ $9 variable to access the ninth\n    # argument passed to the function.\n  \
    \  # Hint: You can use the ${10} variable to access the tenth\n    # argument\
    \ passed to the function.\n    # Hint: You can use the ${11} variable to access\
    \ the eleventh\n    # argument passed to the function.\n    # Hint: You can use\
    \ the ${12} variable to access the twelfth\n    # argument passed to the function.\n\
    \    # Hint: You can use the ${13} variable to access the thirteenth\n    # argument\
    \ passed to the function.\n    # Hint: You can use the ${14} variable to access\
    \ the fourteenth\n    # argument passed to the function.\n    # Hint: You can\
    \ use the ${15} variable to access the fifteenth\n    # argument passed to the\
    \ function.\n    # Hint: You can use the ${16} variable to access the sixteenth\n\
    \    # argument passed to", "    # TODO: Implement this function\n    # Hint:\
    \ You can use the ord() and chr() functions to convert between\n    #       characters\
    \ and their ASCII values.\n    # Hint: You can use the modulo operator to wrap\
    \ around the alphabet.\n    # Hint: You can use the range operator to iterate\
    \ over the characters\n    #       in a string.\n    # Hint: You can use the join()\
    \ function to join a list of characters\n    #       into a string.\n    # Hint:\
    \ You can use the append() function to add an element to a list.\n    # Hint:\
    \ You can use the ord() function to get the ASCII value of a\n    #       character.\n\
    \    # Hint: You can use the chr() function to get the character from an\n   \
    \ #       ASCII value.\n    # Hint: You can use the range() function to create\
    \ a list of numbers.\n    # Hint: You can use the len() function to get the length\
    \ of a list.\n    # Hint: You can use the range() function to create a list of\
    \ numbers.\n    # Hint: You can use the len() function to get the length of a\
    \ list.\n    # Hint: You can use the range() function to create a list of numbers.\n\
    \    # Hint: You can use the len() function to get the length of a list.\n   \
    \ # Hint: You can use the range() function to create a list of numbers.\n    #\
    \ Hint: You can use the len() function to get the length of a list.\n    # Hint:\
    \ You can use the range() function to create a list of numbers.\n    # Hint: You\
    \ can use the len() function to get the length of a list.\n    # Hint: You can\
    \ use the range() function to create a list of numbers.\n    # Hint: You can use\
    \ the len() function to get the length of a list.\n    # Hint: You can use the\
    \ range() function to create a list of numbers.\n    # Hint: You can use the len()\
    \ function to get the length of a list.\n    # Hint: You can use the range() function\
    \ to create a list of numbers.\n    # Hint: You can use the len() function to\
    \ get the length of a list", '    # TODO: Write your code here', "    # TODO:\
    \ Implement this function\n    # Hint: You can use the modulo operator to wrap\
    \ around the alphabet\n    # Hint: You can use the ord() and chr() functions to\
    \ convert between\n    #       characters and their ASCII values\n    # Hint:\
    \ You can use the string concatenation operator to join strings\n    # Hint: You\
    \ can use the string slicing operator to extract substrings\n    # Hint: You can\
    \ use the string length operator to get the length of a string\n    # Hint: You\
    \ can use the string repetition operator to repeat a string\n    # Hint: You can\
    \ use the string indexing operator to get the character at a given index\n   \
    \ # Hint: You can use the string assignment operator to replace a character at\
    \ a given index\n    # Hint: You can use the string assignment operator to replace\
    \ a substring at a given index\n    # Hint: You can use the string assignment\
    \ operator to replace a substring at a given index\n    # Hint: You can use the\
    \ string assignment operator to replace a substring at a given index\n    # Hint:\
    \ You can use the string assignment operator to replace a substring at a given\
    \ index\n    # Hint: You can use the string assignment operator to replace a substring\
    \ at a given index\n    # Hint: You can use the string assignment operator to\
    \ replace a substring at a given index\n    # Hint: You can use the string assignment\
    \ operator to replace a substring at a given index\n    # Hint: You can use the\
    \ string assignment operator to replace a substring at a given index\n    # Hint:\
    \ You can use the string assignment operator to replace a substring at a given\
    \ index\n    # Hint: You can use the string assignment operator to replace a substring\
    \ at a given index\n    # Hint: You can use the string assignment operator to\
    \ replace a substring at a given index\n    # Hint: You can use the string assignment\
    \ operator to replace a substring at a given index\n    # Hint: You can use the\
    \ string assignment operator to replace a substring at a given index\n    # Hint:\
    \ You can use the string assignment operator to replace a substring at a given\
    \ index\n    # Hint: You can use the string assignment operator to replace a substring\
    \ at a given index\n    # Hint: You can use the string", "    # TODO: Implement\
    \ this function\n    echo \"Not implemented\"", "    # TODO: Write this function\n\
    \    # Hint: You will need to use the ord and chr functions\n    # ord takes a\
    \ character and returns the ASCII code for that character\n    # chr takes an\
    \ ASCII code and returns the character for that ASCII code\n    #\n    # You will\
    \ also need to use the modulo operator %\n    #\n    # You may want to use the\
    \ following variables:\n    # alphabet='abcdefghijklmnopqrstuvwxyz'\n    # alphabet_length=${#alphabet}\n\
    \    #\n    # You can use the following command to get the length of a string:\n\
    \    # length=${#string}\n    #\n    # You can use the following command to get\
    \ the nth character of a string:\n    # character=${string:n:1}\n    #\n    #\
    \ You can use the following command to get the ASCII code of a character:\n  \
    \  # ascii_code=$(printf '%d' \"'$character\")\n    #\n    # You can use the following\
    \ command to get the character for an ASCII code:\n    # character=$(printf \\\
    \\$(printf '%03o' $ascii_code))\n    #\n    # You can use the following command\
    \ to get the substring of a string:\n    # substring=${string:start:length}\n\
    \    #\n    # You can use the following command to get the index of a character\
    \ in a string:\n    # index=$(expr index \"$string\" \"$character\")\n    #\n\
    \    # You can use the following command to get the last character of a string:\n\
    \    # last_character=${string: -1}\n    #\n    # You can use the following command\
    \ to get the first character of a string:\n    # first_character=${string:0:1}\n\
    \    #\n    # You can use the following command to get the substring of a string\
    \ without the first character:\n    # substring=${string:1}\n    #\n    # You\
    \ can use the following command to get the substring of a string without the last\
    \ character:\n    # substring=${string:0:length-1}\n    #\n    # You can use the\
    \ following command to concatenate two strings:\n    # string=$string$other",
  "    # TODO: Implement this function\n    echo \"TODO\"", '    # Write your code
    here', "  # TODO: Write your code here\n  # Hint: You can use the ord() function\
    \ to get the ASCII value of a character\n  # Hint: You can use the chr() function\
    \ to get the character from an ASCII value\n  # Hint: You can use the modulo operator\
    \ to wrap around the alphabet\n  # Hint: You can use the range operator to loop\
    \ through the alphabet\n  # Hint: You can use the len() function to get the length\
    \ of a string\n  # Hint: You can use the range operator to loop through the string\n\
    \  # Hint: You can use the string concatenation operator to append to a string\n\
    \  # Hint: You can use the string indexing operator to get a character from a\
    \ string\n  # Hint: You can use the string indexing operator to set a character\
    \ in a string\n  # Hint: You can use the string slicing operator to get a substring\
    \ from a string\n  # Hint: You can use the string slicing operator to set a substring\
    \ in a string\n  # Hint: You can use the string assignment operator to set a string\n\
    \  # Hint: You can use the string assignment operator to set a character in a\
    \ string\n  # Hint: You can use the string assignment operator to set a substring\
    \ in a string\n  # Hint: You can use the string assignment operator to append\
    \ to a string\n  # Hint: You can use the string assignment operator to prepend\
    \ to a string\n  # Hint: You can use the string assignment operator to insert\
    \ into a string\n  # Hint: You can use the string assignment operator to delete\
    \ from a string\n  # Hint: You can use the string assignment operator to replace\
    \ in a string\n  # Hint: You can use the string assignment operator to reverse\
    \ a string\n  # Hint: You can use the string assignment operator to sort a string\n\
    \  # Hint: You can use the string assignment operator to shuffle a string\n  #\
    \ Hint: You can use the string assignment operator to reverse a string\n  # Hint:\
    \ You can use the string assignment operator to sort a string\n  # Hint: You can\
    \ use the string assignment operator to shuffle a string\n  # Hint: You can use\
    \ the string assignment operator to reverse a string\n  # Hint: You can use the\
    \ string assignment operator to sort", "    # TODO: implement this function\n\
    \    # Hint: use the rotate function you created in the previous exercise\n  \
    \  # Hint: use the ord function you created in the previous exercise\n    # Hint:\
    \ use the chr function you created in the previous exercise\n    # Hint: use the\
    \ map function you created in the previous exercise\n    # Hint: use the join\
    \ function you created in the previous exercise\n    echo $(join $(map $(chr $(ord\
    \ $(rotate $(ord $(map $(chr $1)))) 2 2))));", "    # TODO: Implement this function\n\
    \    # Hint: You can use the modulo operator to wrap around the alphabet\n   \
    \ # Hint: You can use the ord() and chr() functions to convert between\n    #\
    \       characters and their ASCII values\n    # Hint: You can use the string\
    \ concatenation operator to join strings\n    #       together\n    # Hint: You\
    \ can use the length() function to get the length of a string\n    # Hint: You\
    \ can use the range() function to iterate over a range of\n    #       numbers\n\
    \    # Hint: You can use the string indexing operator to get the character\n \
    \   #       at a given index in a string\n    # Hint: You can use the string slicing\
    \ operator to get a substring of a\n    #       string\n    # Hint: You can use\
    \ the string assignment operator to assign a value to\n    #       a character\
    \ in a string\n    # Hint: You can use the string multiplication operator to repeat\
    \ a\n    #       string\n    # Hint: You can use the string join() method to join\
    \ a list of strings\n    #       together\n    # Hint: You can use the string\
    \ split() method to split a string into a\n    #       list of strings\n    #\
    \ Hint: You can use the string replace() method to replace all\n    #       occurrences\
    \ of a substring in a string with another substring\n    # Hint: You can use the\
    \ string strip() method to remove whitespace from\n    #       the beginning and\
    \ end of a string\n    # Hint: You can use the string lower() method to convert\
    \ a string to\n    #       lowercase\n    # Hint: You can use the string upper()\
    \ method to convert a string to\n    #       uppercase\n    # Hint: You can use\
    \ the string isalpha() method to check if a string\n    #       contains only\
    \ alphabetic characters\n    # Hint: You can use the string isdigit() method to\
    \ check if a string\n    #       contains only numeric characters\n    # Hint:\
    \ You can use the string isalnum() method to check if a string\n    #       contains\
    \ only alphanumeric characters\n    # Hint: You can use the string islower() method\
    \ to check if a string\n    #       contains only lowercase characters\n   ",
  "    # TODO: Implement this function\n    # Hint: You can use the following command\
    \ to get the length of a string:\n    # len=${#1}\n    # You can use the following\
    \ command to get the character at a specific index:\n    # char=${1:index:1}\n\
    \    # You can use the following command to set the character at a specific index:\n\
    \    # new_string=${1:0:index}${char}${1:index+1}\n    # You can use the following\
    \ command to get the index of a character:\n    # index=$(expr index \"$1\" \"\
    $char\")\n    # You can use the following command to convert a character to its\
    \ ASCII value:\n    # ascii=$(printf \"%d\" \"'$char\")\n    # You can use the\
    \ following command to convert an ASCII value to a character:\n    # char=$(printf\
    \ \\\\$(printf '%03o' $ascii))\n    len=${#1}\n    new_string=\"\"\n    for ((i=0;\
    \ i<len; i++)); do\n        char=${1:i:1}\n        ascii=$(printf \"%d\" \"'$char\"\
    )\n        ascii=$((ascii+4))\n        char=$(printf \\\\$(printf '%03o' $ascii))\n\
    \        new_string=$new_string$char\n    done\n    echo $new_string", "    #\
    \ TODO: Implement this function\n    echo \"TODO\"", "    # TODO: implement this\
    \ function\n    echo \"TODO\"", '    # Your code here', '    # TODO: Write your
    code here', "    # TODO: Implement this function\n    # Hint: You can use the\
    \ modulo operator to wrap around the alphabet\n    # Hint: You can use the ord()\
    \ and chr() functions to convert between\n    #       characters and ascii values\n\
    \    # Hint: You can use the echo command to print a string to the terminal\n\
    \    # Hint: You can use the seq command to generate a sequence of numbers\n \
    \   #       in a range\n    # Hint: You can use the tr command to translate characters\
    \ in a string\n    #       to other characters\n    # Hint: You can use the tr\
    \ command to delete characters in a string\n    #       by translating them to\
    \ nothing\n    # Hint: You can use the tr command to squeeze repeated characters\
    \ in a\n    #       string by translating them to themselves\n    # Hint: You\
    \ can use the tr command to delete characters in a string\n    #       by translating\
    \ them to nothing\n    # Hint: You can use the tr command to squeeze repeated\
    \ characters in a\n    #       string by translating them to themselves\n    #\
    \ Hint: You can use the tr command to delete characters in a string\n    #   \
    \    by translating them to nothing\n    # Hint: You can use the tr command to\
    \ squeeze repeated characters in a\n    #       string by translating them to\
    \ themselves\n    # Hint: You can use the tr command to delete characters in a\
    \ string\n    #       by translating them to nothing\n    # Hint: You can use\
    \ the tr command to squeeze repeated characters in a\n    #       string by translating\
    \ them to themselves\n    # Hint: You can use the tr command to delete characters\
    \ in a string\n    #       by translating them to nothing\n    # Hint: You can\
    \ use the tr command to squeeze repeated characters in a\n    #       string by\
    \ translating them to themselves\n    # Hint: You can use the tr command to delete\
    \ characters in a string\n    #       by translating them to nothing\n    # Hint:\
    \ You can use the tr command to squeeze repeated characters in a\n    #      \
    \ string by translating them to themselves\n    # Hint: You can use the tr command\
    \ to delete characters in a string\n    #       by translating them to nothing\n\
    \    # Hint: You can use the tr command to squeeze repeated characters in a\n\
    \    #       string by translating them to themselves\n", "    # TODO: Write your\
    \ code here\n    echo \"TODO\"", "    # TODO: Implement this function\n    # Hint:\
    \ You can use the modulo operator to wrap around the alphabet\n    # Hint: You\
    \ can use the ord() and chr() functions to convert between\n    #       characters\
    \ and their ASCII values\n    # Hint: You can use the length() function to get\
    \ the length of a string\n    # Hint: You can use the substr() function to get\
    \ a substring of a string\n    # Hint: You can use the index() function to get\
    \ the index of a character\n    #       in a string\n    # Hint: You can use the\
    \ sprintf() function to convert an integer to a\n    #       string\n    # Hint:\
    \ You can use the concatenation operator to concatenate strings\n    # Hint: You\
    \ can use the assignment operator to assign a value to a variable\n    # Hint:\
    \ You can use the for loop to iterate over a string\n    # Hint: You can use the\
    \ if statement to check if a condition is true\n    # Hint: You can use the else\
    \ statement to execute code if a condition is\n    #       false\n    # Hint:\
    \ You can use the else if statement to check if a condition is true\n    #   \
    \    and execute code if it is\n    # Hint: You can use the while loop to iterate\
    \ while a condition is true\n    # Hint: You can use the until loop to iterate\
    \ while a condition is false\n    # Hint: You can use the break statement to exit\
    \ a loop\n    # Hint: You can use the continue statement to skip the rest of the\
    \ loop\n    # Hint: You can use the return statement to return a value from a\
    \ function\n    # Hint: You can use the exit statement to exit a script\n    #\
    \ Hint: You can use the read statement to read input from the user\n    # Hint:\
    \ You can use the echo statement to print output to the screen\n    # Hint: You\
    \ can use the printf statement to format output to the screen\n    # Hint: You\
    \ can use the man command to view the manual for a command\n    # Hint: You can\
    \ use the help command to view the help for a command\n    # Hint: You can use\
    \ the backtick operator to execute a command and store\n    #       its output\
    \ in a variable\n    # H", "    # TODO: Implement this function\n    # Hint: You\
    \ will need to use the tr command\n    # Hint: You will need to use the echo command\n\
    \    # Hint: You will need to use the pipe operator\n    # Hint: You will need\
    \ to use the $1 variable\n    echo $1 | tr 'a-z' 'c-za-b'", "    # TODO: Write\
    \ your code here\n    # Hint: You can use the tr command to translate characters\n\
    \    #       in a string.\n    #       For example:\n    #       echo 'hi' | tr\
    \ 'a-z' 'c-za-b'\n    #       returns 'lm'\n    #       echo 'hi' | tr 'a-z' 'e-za-d'\n\
    \    #       returns 'kj'\n    #       echo 'hi' | tr 'a-z' 'g-za-f'\n    #  \
    \     returns 'mn'\n    #       echo 'hi' | tr 'a-z' 'i-za-h'\n    #       returns\
    \ 'op'\n    #       echo 'hi' | tr 'a-z' 'k-za-j'\n    #       returns 'qr'\n\
    \    #       echo 'hi' | tr 'a-z' 'm-za-l'\n    #       returns 'st'\n    #  \
    \     echo 'hi' | tr 'a-z' 'o-za-n'\n    #       returns 'uv'\n    #       echo\
    \ 'hi' | tr 'a-z' 'q-za-p'\n    #       returns 'wx'\n    #       echo 'hi' |\
    \ tr 'a-z' 's-za-r'\n    #       returns 'yz'\n    #       echo 'hi' | tr 'a-z'\
    \ 'u-za-t'\n    #       returns 'ab'\n    #       echo 'hi' | tr 'a-z' 'w-za-v'\n\
    \    #       returns 'cd'\n    #       echo 'hi' | tr 'a-z' 'y-za-x'\n    #  \
    \     returns 'ef'\n    #       echo 'hi' | tr 'a-z' 'a-za'\n    #       returns\
    \ 'hi'\n    #       echo 'hi' | tr 'a-z' 'b-za-a'\n    #       returns 'ij'\n\
    \    #       echo 'hi' | tr 'a-z' 'd-za-c'\n    #       returns 'kl'\n    #  \
    \     echo 'hi' | tr 'a-z' 'f-za-e'", "    echo $1 | tr 'a-z' 'c-za-b'", "   \
    \ # TODO: Write your code here\n    # Hint: You can use the following command\
    \ to rotate the alphabet\n    # echo {a..z} | tr ' ' '\\n' | tail -n +3 | tr '\\\
    n' ' '\n    #\n    # Hint: You can use the following command to rotate the alphabet\n\
    \    # echo {a..z} | tr ' ' '\\n' | tail -n +3 | tr '\\n' ' '\n    #\n    # Hint:\
    \ You can use the following command to rotate the alphabet\n    # echo {a..z}\
    \ | tr ' ' '\\n' | tail -n +3 | tr '\\n' ' '\n    #\n    # Hint: You can use the\
    \ following command to rotate the alphabet\n    # echo {a..z} | tr ' ' '\\n' |\
    \ tail -n +3 | tr '\\n' ' '\n    #\n    # Hint: You can use the following command\
    \ to rotate the alphabet\n    # echo {a..z} | tr ' ' '\\n' | tail -n +3 | tr '\\\
    n' ' '\n    #\n    # Hint: You can use the following command to rotate the alphabet\n\
    \    # echo {a..z} | tr ' ' '\\n' | tail -n +3 | tr '\\n' ' '\n    #\n    # Hint:\
    \ You can use the following command to rotate the alphabet\n    # echo {a..z}\
    \ | tr ' ' '\\n' | tail -n +3 | tr '\\n' ' '\n    #\n    # Hint: You can use the\
    \ following command to rotate the alphabet\n    # echo {a..z} | tr ' ' '\\n' |\
    \ tail -n +3 | tr '\\n' ' '\n    #\n    # Hint: You can use the following command\
    \ to rotate the alphabet\n    # echo {a..z} | tr ' ' '\\n' | tail -n +3 | tr '\\\
    n' ' '\n    #\n    # Hint: You can use the following command to rotate the alphabet\n\
    \    # echo {a..z} | tr ' ' '\\n' | tail -n +3 | tr '\\n' ' '\n    #\n   ", " \
    \   # TODO: Write your code here\n    # Hint: You can use the following to get\
    \ the length of a string:\n    # length=${#1}\n    # Hint: You can use the following\
    \ to get the character at a particular index:\n    # char=${1:index:1}\n    #\
    \ Hint: You can use the following to get the ASCII value of a character:\n   \
    \ # ascii=$(printf '%d' \"'$char\")\n    # Hint: You can use the following to\
    \ get the character from an ASCII value:\n    # char=$(printf \\\\$(printf '%03o'\
    \ $ascii))\n    # Hint: You can use the following to append to a string:\n   \
    \ # encrypted=$encrypted$char\n    # Hint: You can use the following to get the\
    \ remainder of a division:\n    # remainder=$((ascii % 26))\n    # Hint: You can\
    \ use the following to get the quotient of a division:\n    # quotient=$((ascii\
    \ / 26))\n    # Hint: You can use the following to get the remainder of a division:\n\
    \    # remainder=$((ascii % 26))\n    # Hint: You can use the following to get\
    \ the quotient of a division:\n    # quotient=$((ascii / 26))\n    # Hint: You\
    \ can use the following to get the remainder of a division:\n    # remainder=$((ascii\
    \ % 26))\n    # Hint: You can use the following to get the quotient of a division:\n\
    \    # quotient=$((ascii / 26))\n    # Hint: You can use the following to get\
    \ the remainder of a division:\n    # remainder=$((ascii % 26))\n    # Hint: You\
    \ can use the following to get the quotient of a division:\n    # quotient=$((ascii\
    \ / 26))\n    # Hint: You can use the following to get the remainder of a division:\n\
    \    # remainder=$((ascii % 26))\n    # Hint: You can use the following to get\
    \ the quotient of a division:\n    # quotient=$((ascii / 26))\n    # Hint: You\
    \ can use the following to get the remainder of a division:", "    # TODO: implement\
    \ this function\n    # Hint: use the rotate function\n    # Hint: use the rotate\
    \ function\n    echo $1 | tr '[a-z]' '[c-za-b]'", "    # TODO: Implement this\
    \ function\n    # Hint: You can use the modulo operator to wrap around the alphabet\n\
    \    # Hint: You can use the ord() and chr() functions to convert between characters\
    \ and their ASCII values\n    # Hint: You can use the echo command to print to\
    \ the terminal\n    # Hint: You can use the return command to return a value\n\
    \    # Hint: You can use the $1 variable to access the first argument passed to\
    \ the function\n    # Hint: You can use the $2 variable to access the second argument\
    \ passed to the function\n    # Hint: You can use the $3 variable to access the\
    \ third argument passed to the function\n    # Hint: You can use the $4 variable\
    \ to access the fourth argument passed to the function\n    # Hint: You can use\
    \ the $5 variable to access the fifth argument passed to the function\n    # Hint:\
    \ You can use the $6 variable to access the sixth argument passed to the function\n\
    \    # Hint: You can use the $7 variable to access the seventh argument passed\
    \ to the function\n    # Hint: You can use the $8 variable to access the eighth\
    \ argument passed to the function\n    # Hint: You can use the $9 variable to\
    \ access the ninth argument passed to the function\n    # Hint: You can use the\
    \ ${10} variable to access the tenth argument passed to the function\n    # Hint:\
    \ You can use the ${11} variable to access the eleventh argument passed to the\
    \ function\n    # Hint: You can use the ${12} variable to access the twelfth argument\
    \ passed to the function\n    # Hint: You can use the ${13} variable to access\
    \ the thirteenth argument passed to the function\n    # Hint: You can use the\
    \ ${14} variable to access the fourteenth argument passed to the function\n  \
    \  # Hint: You can use the ${15} variable to access the fifteenth argument passed\
    \ to the function\n    # Hint: You can use the ${16} variable to access the sixteenth\
    \ argument passed to the function\n    # Hint: You can use the ${17} variable\
    \ to access the seventeenth argument passed to the function\n    # Hint: You can\
    \ use the ${18} variable to access the eighteenth argument passed to the function\n\
    \    # Hint: You can use the ${19} variable", "    # TODO: write this function\n\
    \    echo $1 | tr 'a-z' 'c-za-b'", "    # Write your code here\n    echo $1",
  "    # TODO: Implement this function\n    # Hint: Use the ord and chr functions\n\
    \    # Hint: Use the modulo operator (%)\n    # Hint: Use the range function\n\
    \    # Hint: Use the join function\n    # Hint: Use the map function\n    # Hint:\
    \ Use the zip function\n    # Hint: Use the list function\n    # Hint: Use the\
    \ str function\n    # Hint: Use the int function\n    # Hint: Use the len function\n\
    \    # Hint: Use the ord function\n    # Hint: Use the chr function\n    # Hint:\
    \ Use the range function\n    # Hint: Use the join function\n    # Hint: Use the\
    \ map function\n    # Hint: Use the zip function\n    # Hint: Use the list function\n\
    \    # Hint: Use the str function\n    # Hint: Use the int function\n    # Hint:\
    \ Use the len function\n    # Hint: Use the ord function\n    # Hint: Use the\
    \ chr function\n    # Hint: Use the range function\n    # Hint: Use the join function\n\
    \    # Hint: Use the map function\n    # Hint: Use the zip function\n    # Hint:\
    \ Use the list function\n    # Hint: Use the str function\n    # Hint: Use the\
    \ int function\n    # Hint: Use the len function\n    # Hint: Use the ord function\n\
    \    # Hint: Use the chr function\n    # Hint: Use the range function\n    # Hint:\
    \ Use the join function\n    # Hint: Use the map function\n    # Hint: Use the\
    \ zip function\n    # Hint: Use the list function\n    # Hint: Use the str function\n\
    \    # Hint: Use the int function\n    # Hint: Use the len function\n    # Hint:\
    \ Use the ord function\n    # Hint: Use the chr function\n    # Hint: Use the\
    \ range function\n    # Hint: Use the join function\n    # Hint: Use the map function\n\
    \    # Hint: Use the zip function\n    # Hint: Use the list function\n    # Hint:\
    \ Use the str function\n    # Hint: Use the int function\n    # H", "    # TODO:\
    \ Implement this function\n    # Hint: You can use the modulo operator to wrap\
    \ around the alphabet\n    # Hint: You can use the ord() and chr() functions to\
    \ convert between\n    #       characters and their ASCII values\n    # Hint:\
    \ You can use the string concatenation operator to join strings\n    #       together\n\
    \    # Hint: You can use the length() function to get the length of a string\n\
    \    # Hint: You can use the substr() function to get a substring of a string\n\
    \    # Hint: You can use the index() function to get the index of a character\n\
    \    #       in a string\n    # Hint: You can use the toupper() function to convert\
    \ a string to uppercase\n    # Hint: You can use the tolower() function to convert\
    \ a string to lowercase\n    # Hint: You can use the gsub() function to replace\
    \ all instances of a\n    #       character in a string\n    # Hint: You can use\
    \ the gensub() function to replace all instances of a\n    #       character in\
    \ a string with a different string\n    # Hint: You can use the match() function\
    \ to match a regular expression\n    #       against a string\n    # Hint: You\
    \ can use the sub() function to replace the first instance of a\n    #       regular\
    \ expression in a string\n    # Hint: You can use the gsub() function to replace\
    \ all instances of a\n    #       regular expression in a string\n    # Hint:\
    \ You can use the sub() function to replace the first instance of a\n    #   \
    \    regular expression in a string with a different string\n    # Hint: You can\
    \ use the gensub() function to replace all instances of a\n    #       regular\
    \ expression in a string with a different string\n    # Hint: You can use the\
    \ split() function to split a string into an array\n    #       of strings\n \
    \   # Hint: You can use the join() function to join an array of strings into\n\
    \    #       a single string\n    # Hint: You can use the asort() function to\
    \ sort an array of strings\n    # Hint: You can use the asorti() function to sort\
    \ an array of strings\n    #       while preserving the indices\n    # Hint: You\
    \ can use", "    # TODO: Implement this function\n    # Hint: You can use the\
    \ modulo operator to get the remainder of a division\n    # Hint: You can use\
    \ the ord() function to get the ASCII value of a character\n    # Hint: You can\
    \ use the chr() function to get the character from an ASCII value\n    # Hint:\
    \ You can use the range() function to get a list of numbers\n    # Hint: You can\
    \ use the join() function to join a list of strings\n    # Hint: You can use the\
    \ map() function to apply a function to each element of a list\n    # Hint: You\
    \ can use the zip() function to combine two lists\n    # Hint: You can use the\
    \ list() function to convert a string to a list of characters\n    # Hint: You\
    \ can use the str() function to convert an integer to a string\n    # Hint: You\
    \ can use the int() function to convert a string to an integer\n    # Hint: You\
    \ can use the len() function to get the length of a string\n    # Hint: You can\
    \ use the range() function to get a list of numbers\n    # Hint: You can use the\
    \ join() function to join a list of strings\n    # Hint: You can use the map()\
    \ function to apply a function to each element of a list\n    # Hint: You can\
    \ use the zip() function to combine two lists\n    # Hint: You can use the list()\
    \ function to convert a string to a list of characters\n    # Hint: You can use\
    \ the str() function to convert an integer to a string\n    # Hint: You can use\
    \ the int() function to convert a string to an integer\n    # Hint: You can use\
    \ the len() function to get the length of a string\n    # Hint: You can use the\
    \ range() function to get a list of numbers\n    # Hint: You can use the join()\
    \ function to join a list of strings\n    # Hint: You can use the map() function\
    \ to apply a function to each element of a list\n    # Hint: You can use the zip()\
    \ function to combine two lists\n    # Hint: You can use the list() function to\
    \ convert a string to a list of characters\n    # Hint: You can use the str()\
    \ function to convert an integer to a string", "    # TODO: Implement this function\n\
    \    # Hint: You can use the modulo operator to wrap around the alphabet\n   \
    \ # Hint: You can use the ord() and chr() functions to convert between characters\
    \ and their ASCII values\n    # Hint: You can use the string concatenation operator\
    \ to join strings together\n    # Hint: You can use the length() function to get\
    \ the length of a string\n    # Hint: You can use the range() function to iterate\
    \ over a range of numbers\n    # Hint: You can use the int() function to convert\
    \ a string to an integer\n    # Hint: You can use the str() function to convert\
    \ an integer to a string\n    # Hint: You can use the string indexing operator\
    \ to get a character at a specific index in a string\n    # Hint: You can use\
    \ the string slicing operator to get a substring of a string\n    # Hint: You\
    \ can use the string assignment operator to replace a character at a specific\
    \ index in a string\n    # Hint: You can use the string assignment operator to\
    \ replace a substring of a string\n    # Hint: You can use the string assignment\
    \ operator to append a character to a string\n    # Hint: You can use the string\
    \ assignment operator to append a substring to a string\n    # Hint: You can use\
    \ the string assignment operator to remove a character from a string\n    # Hint:\
    \ You can use the string assignment operator to remove a substring from a string\n\
    \    # Hint: You can use the string assignment operator to insert a character\
    \ into a string\n    # Hint: You can use the string assignment operator to insert\
    \ a substring into a string\n    # Hint: You can use the string assignment operator\
    \ to reverse a string\n    # Hint: You can use the string assignment operator\
    \ to sort a string\n    # Hint: You can use the string assignment operator to\
    \ shuffle a string\n    # Hint: You can use the string assignment operator to\
    \ reverse a string\n    # Hint: You can use the string assignment operator to\
    \ sort a string\n    # Hint: You can use the string assignment operator to shuffle\
    \ a string\n    # Hint: You can use the string assignment operator to reverse\
    \ a string\n    # Hint: You can use the string assignment operator to sort a string\n\
    \    # Hint: You can use the", "    # TODO: Implement this function\n    echo\
    \ \"$1\"", "    # TODO: implement this function\n    echo \"TODO\"", "    # TODO:\
    \ implement this function\n    echo \"TODO\"", "    # TODO: Implement this function\n\
    \    # Hint: Use the ord and chr functions\n    # Hint: Use the modulo operator\
    \ to wrap around the alphabet\n    # Hint: Use the range function to generate\
    \ a list of numbers\n    # Hint: Use the map function to apply a function to each\
    \ element of a list\n    # Hint: Use the join function to join a list of characters\
    \ into a string\n    # Hint: Use the str function to convert a character to a\
    \ string\n    # Hint: Use the int function to convert a string to an integer\n\
    \    # Hint: Use the len function to get the length of a string\n    # Hint: Use\
    \ the zip function to zip two lists together\n    # Hint: Use the list function\
    \ to convert a string to a list of characters\n    # Hint: Use the ord function\
    \ to get the ASCII value of a character\n    # Hint: Use the chr function to get\
    \ the character corresponding to an ASCII value\n    # Hint: Use the range function\
    \ to generate a list of numbers\n    # Hint: Use the map function to apply a function\
    \ to each element of a list\n    # Hint: Use the join function to join a list\
    \ of characters into a string\n    # Hint: Use the str function to convert a character\
    \ to a string\n    # Hint: Use the int function to convert a string to an integer\n\
    \    # Hint: Use the len function to get the length of a string\n    # Hint: Use\
    \ the zip function to zip two lists together\n    # Hint: Use the list function\
    \ to convert a string to a list of characters\n    # Hint: Use the ord function\
    \ to get the ASCII value of a character\n    # Hint: Use the chr function to get\
    \ the character corresponding to an ASCII value\n    # Hint: Use the range function\
    \ to generate a list of numbers\n    # Hint: Use the map function to apply a function\
    \ to each element of a list\n    # Hint: Use the join function to join a list\
    \ of characters into a string\n    # Hint: Use the str function to convert a character\
    \ to a string\n    # Hint: Use the int function to convert a string to an integer\n\
    \    # Hint: Use the len function to get the length of a string\n    # Hint: Use\
    \ the zip function to zip", "    # TODO: implement this function\n    # Hint:\
    \ use the ord and chr functions\n    # Hint: use the modulo operator\n    # Hint:\
    \ use the range function\n    # Hint: use the join function\n    # Hint: use the\
    \ map function\n    # Hint: use the zip function\n    # Hint: use the enumerate\
    \ function\n    # Hint: use the list function\n    # Hint: use the str function\n\
    \    # Hint: use the int function\n    # Hint: use the len function\n    # Hint:\
    \ use the abs function\n    # Hint: use the ord function\n    # Hint: use the\
    \ chr function\n    # Hint: use the range function\n    # Hint: use the join function\n\
    \    # Hint: use the map function\n    # Hint: use the zip function\n    # Hint:\
    \ use the enumerate function\n    # Hint: use the list function\n    # Hint: use\
    \ the str function\n    # Hint: use the int function\n    # Hint: use the len\
    \ function\n    # Hint: use the abs function\n    # Hint: use the ord function\n\
    \    # Hint: use the chr function\n    # Hint: use the range function\n    # Hint:\
    \ use the join function\n    # Hint: use the map function\n    # Hint: use the\
    \ zip function\n    # Hint: use the enumerate function\n    # Hint: use the list\
    \ function\n    # Hint: use the str function\n    # Hint: use the int function\n\
    \    # Hint: use the len function\n    # Hint: use the abs function\n    # Hint:\
    \ use the ord function\n    # Hint: use the chr function\n    # Hint: use the\
    \ range function\n    # Hint: use the join function\n    # Hint: use the map function\n\
    \    # Hint: use the zip function\n    # Hint: use the enumerate function\n  \
    \  # Hint: use the list function\n    # Hint: use the str function\n    # Hint:\
    \ use the int function\n    # Hint: use the len function\n    # Hint: use the\
    \ abs function\n    # Hint: use the ord function\n   ", '  # TODO: Write your
    code here', "    # Your code here\n    echo $1", '    # TODO: write your code
    here', "    # TODO: implement this function\n    echo \"TODO\"", "    # TODO:\
    \ implement this function\n    # Hint: use the tr command\n    # Hint: use the\
    \ echo command\n    # Hint: use the $1 variable\n    # Hint: use the $2 variable\n\
    \    # Hint: use the $3 variable\n    # Hint: use the $4 variable\n    # Hint:\
    \ use the $5 variable\n    # Hint: use the $6 variable\n    # Hint: use the $7\
    \ variable\n    # Hint: use the $8 variable\n    # Hint: use the $9 variable\n\
    \    # Hint: use the ${10} variable\n    # Hint: use the ${11} variable\n    #\
    \ Hint: use the ${12} variable\n    # Hint: use the ${13} variable\n    # Hint:\
    \ use the ${14} variable\n    # Hint: use the ${15} variable\n    # Hint: use\
    \ the ${16} variable\n    # Hint: use the ${17} variable\n    # Hint: use the\
    \ ${18} variable\n    # Hint: use the ${19} variable\n    # Hint: use the ${20}\
    \ variable\n    # Hint: use the ${21} variable\n    # Hint: use the ${22} variable\n\
    \    # Hint: use the ${23} variable\n    # Hint: use the ${24} variable\n    #\
    \ Hint: use the ${25} variable\n    # Hint: use the ${26} variable\n    # Hint:\
    \ use the ${27} variable\n    # Hint: use the ${28} variable\n    # Hint: use\
    \ the ${29} variable\n    # Hint: use the ${30} variable\n    # Hint: use the\
    \ ${31} variable\n    # Hint: use the ${32} variable\n    # Hint: use the ${33}\
    \ variable\n    # Hint: use the ${34} variable\n    # Hint: use the ${35} variable\n\
    \    # Hint: use the ${36} variable\n    # Hint: use the ${37} variable\n    #\
    \ Hint: use the ${38} variable\n    # Hint: use the ${39} variable\n    # Hint:\
    \ use the ${40} variable\n    # Hint: use the ${41} variable", "    # TODO: Implement\
    \ this function\n    echo \"Not yet implemented\"", "    # TODO: Implement this\
    \ function\n    # Hint: You can use the modulo operator to get the remainder\n\
    \    # of a division. For example:\n    # echo $((5 % 3))\n    # prints 2\n  \
    \  #\n    # Hint: You can use the ord and chr functions to convert\n    # between\
    \ characters and their ASCII values. For example:\n    # echo $(ord 'a')\n   \
    \ # prints 97\n    # echo $(chr 97)\n    # prints a\n    #\n    # Hint: You can\
    \ use the echo -n command to print without\n    # a newline. For example:\n  \
    \  # echo -n \"hello\"\n    # prints hello\n    # echo \"hello\"\n    # prints\
    \ hello\\n\n    #\n    # Hint: You can use the echo -e command to print with\n\
    \    # escape sequences. For example:\n    # echo -e \"\\nhello\"\n    # prints\
    \ \\nhello\n    # echo \"\\nhello\"\n    # prints \\nhello\\n\n    #\n    # Hint:\
    \ You can use the echo -e command to print with\n    # escape sequences. For example:\n\
    \    # echo -e \"\\nhello\"\n    # prints \\nhello\n    # echo \"\\nhello\"\n\
    \    # prints \\nhello\\n\n    #\n    # Hint: You can use the echo -e command\
    \ to print with\n    # escape sequences. For example:\n    # echo -e \"\\nhello\"\
    \n    # prints \\nhello\n    # echo \"\\nhello\"\n    # prints \\nhello\\n\n \
    \   #\n    # Hint: You can use the echo -e command to print with\n    # escape\
    \ sequences. For example:\n    # echo -e \"\\nhello\"\n    # prints \\nhello\n\
    \    # echo \"\\nhello\"\n    # prints \\nhello\\n\n    #\n    # Hint: You can\
    \ use the echo -e command to print with\n    # escape sequences. For example:\n\
    \    # echo -e \"\\nhello\"\n    # prints \\nhello\n    # echo \"\\nhello\"\n\
    \    # prints \\nhello\\n\n    #\n    # Hint: You can use the echo -e command\
    \ to print with\n    # escape sequences. For", "    # TODO: Implement this function\n\
    \    # Hint: You can use the modulo operator to wrap around the alphabet\n   \
    \ # Hint: You can use the ord() and chr() functions to convert between\n    #\
    \       characters and ascii values\n    # Hint: You can use the string concatenation\
    \ operator to join strings\n    #       together\n    # Hint: You can use the\
    \ length() function to get the length of a string\n    # Hint: You can use the\
    \ substr() function to get a substring of a string\n    # Hint: You can use the\
    \ ord() function to get the ascii value of a character\n    # Hint: You can use\
    \ the chr() function to get the character of an ascii value\n    # Hint: You can\
    \ use the string concatenation operator to join strings together\n    # Hint:\
    \ You can use the length() function to get the length of a string\n    # Hint:\
    \ You can use the substr() function to get a substring of a string\n    # Hint:\
    \ You can use the ord() function to get the ascii value of a character\n    #\
    \ Hint: You can use the chr() function to get the character of an ascii value\n\
    \    # Hint: You can use the string concatenation operator to join strings together\n\
    \    # Hint: You can use the length() function to get the length of a string\n\
    \    # Hint: You can use the substr() function to get a substring of a string\n\
    \    # Hint: You can use the ord() function to get the ascii value of a character\n\
    \    # Hint: You can use the chr() function to get the character of an ascii value\n\
    \    # Hint: You can use the string concatenation operator to join strings together\n\
    \    # Hint: You can use the length() function to get the length of a string\n\
    \    # Hint: You can use the substr() function to get a substring of a string\n\
    \    # Hint: You can use the ord() function to get the ascii value of a character\n\
    \    # Hint: You can use the chr() function to get the character of an ascii value\n\
    \    # Hint: You can use the string concatenation operator to join strings together\n\
    \    # H", "    # TODO: Implement this function\n    echo \"TODO\"", "    # TODO:\
    \ implement this function\n    # Hint: use the rotate function\n    # Hint: use\
    \ the echo command\n    # Hint: use the tr command\n    # Hint: use the $1 variable\n\
    \    # Hint: use the $2 variable\n    # Hint: use the $3 variable\n    # Hint:\
    \ use the $4 variable\n    # Hint: use the $5 variable\n    # Hint: use the $6\
    \ variable\n    # Hint: use the $7 variable\n    # Hint: use the $8 variable\n\
    \    # Hint: use the $9 variable\n    # Hint: use the $0 variable\n    # Hint:\
    \ use the $# variable\n    # Hint: use the $@ variable\n    # Hint: use the $?\
    \ variable\n    # Hint: use the $! variable\n    # Hint: use the $$ variable\n\
    \    # Hint: use the $* variable\n    # Hint: use the $- variable\n    # Hint:\
    \ use the $_ variable\n    # Hint: use the $IFS variable\n    # Hint: use the\
    \ $LINENO variable\n    # Hint: use the $SECONDS variable\n    # Hint: use the\
    \ $RANDOM variable\n    # Hint: use the $UID variable\n    # Hint: use the $EUID\
    \ variable\n    # Hint: use the $PPID variable\n    # Hint: use the $SHELL variable\n\
    \    # Hint: use the $BASH variable\n    # Hint: use the $BASH_VERSION variable\n\
    \    # Hint: use the $BASH_VERSINFO variable\n    # Hint: use the $BASH_VERSINFO[0]\
    \ variable\n    # Hint: use the $BASH_VERSINFO[1] variable\n    # Hint: use the\
    \ $BASH_VERSINFO[2] variable\n    # Hint: use the $BASH_VERSINFO[3] variable\n\
    \    # Hint: use the $BASH_VERSINFO[4] variable\n    # Hint: use the $BASH_VERSINFO[5]\
    \ variable\n    # Hint: use the $BASH_VERSINFO[6] variable\n    # Hint: use the\
    \ $BASH", "    # TODO: Write this function\n    # Hint: You can use the modulo\
    \ operator to wrap around the alphabet\n    # Hint: You can use the ord() and\
    \ chr() functions to convert between\n    #       characters and their ASCII values\n\
    \    # Hint: You can use the length() function to find the length of a string\n\
    \    # Hint: You can use the substr() function to get a substring of a string\n\
    \    # Hint: You can use the index() function to find the index of a character\n\
    \    #       in a string\n    # Hint: You can use the sprintf() function to convert\
    \ an integer to a string\n    # Hint: You can use the concatenation operator (.)\
    \ to concatenate strings\n    # Hint: You can use the assignment operator (=)\
    \ to assign a value to a variable\n    # Hint: You can use the addition operator\
    \ (+) to add two numbers together\n    # Hint: You can use the multiplication\
    \ operator (*) to multiply two numbers together\n    # Hint: You can use the division\
    \ operator (/) to divide two numbers\n    # Hint: You can use the subtraction\
    \ operator (-) to subtract two numbers\n    # Hint: You can use the exponentiation\
    \ operator (**) to raise a number to a power\n    # Hint: You can use the less\
    \ than operator (<) to compare two numbers\n    # Hint: You can use the greater\
    \ than operator (>) to compare two numbers\n    # Hint: You can use the less than\
    \ or equal to operator (<=) to compare two numbers\n    # Hint: You can use the\
    \ greater than or equal to operator (>=) to compare two numbers\n    # Hint: You\
    \ can use the equal to operator (==) to compare two numbers\n    # Hint: You can\
    \ use the not equal to operator (!=) to compare two numbers\n    # Hint: You can\
    \ use the logical and operator (&&) to combine two boolean expressions\n    #\
    \ Hint: You can use the logical or operator (||) to combine two boolean expressions\n\
    \    # Hint: You can use the logical not operator (!) to negate a boolean expression\n\
    \    # Hint: You can use the if statement to execute a block of code if a condition\
    \ is true\n    # Hint: You can use the else statement to execute a block of",
  "    # TODO: implement this function\n    # Hint: use the rotate function you created\
    \ in the previous exercise\n    # Hint: use the ord and chr functions\n    # Hint:\
    \ use the string concatenation operator\n    # Hint: use the modulus operator\n\
    \    # Hint: use the multiplication operator\n    # Hint: use the division operator\n\
    \    # Hint: use the subtraction operator\n    # Hint: use the addition operator\n\
    \    # Hint: use the string length function\n    # Hint: use the range function\n\
    \    # Hint: use the string indexing operator\n    # Hint: use the string assignment\
    \ operator\n    # Hint: use the string concatenation operator\n    # Hint: use\
    \ the string concatenation assignment operator\n    # Hint: use the string length\
    \ function\n    # Hint: use the range function\n    # Hint: use the string indexing\
    \ operator\n    # Hint: use the string assignment operator\n    # Hint: use the\
    \ string concatenation operator\n    # Hint: use the string concatenation assignment\
    \ operator\n    # Hint: use the string length function\n    # Hint: use the range\
    \ function\n    # Hint: use the string indexing operator\n    # Hint: use the\
    \ string assignment operator\n    # Hint: use the string concatenation operator\n\
    \    # Hint: use the string concatenation assignment operator\n    # Hint: use\
    \ the string length function\n    # Hint: use the range function\n    # Hint:\
    \ use the string indexing operator\n    # Hint: use the string assignment operator\n\
    \    # Hint: use the string concatenation operator\n    # Hint: use the string\
    \ concatenation assignment operator\n    # Hint: use the string length function\n\
    \    # Hint: use the range function\n    # Hint: use the string indexing operator\n\
    \    # Hint: use the string assignment operator\n    # Hint: use the string concatenation\
    \ operator\n    # Hint: use the string concatenation assignment operator\n   \
    \ # Hint: use the string length function\n    # Hint: use the range function\n\
    \    # Hint: use the string indexing operator\n    # Hint: use the string assignment\
    \ operator\n    # Hint: use the string conc", "    # TODO: Write this function\n\
    \    echo $1 | tr 'a-z' 'c-za-b'", '    # Write your code here', "    # TODO:\
    \ Implement this function\n    echo \"TODO\"", '    # Your code here', "    #\
    \ TODO: implement this function\n    # Hint: use the command tr\n    # Hint: use\
    \ the command seq\n    # Hint: use the command echo\n    # Hint: use the command\
    \ rev\n    # Hint: use the command cut\n    # Hint: use the command head\n   \
    \ # Hint: use the command tail\n    # Hint: use the command tr\n    # Hint: use\
    \ the command rev\n    # Hint: use the command tr\n    # Hint: use the command\
    \ rev\n    # Hint: use the command tr\n    # Hint: use the command rev\n    #\
    \ Hint: use the command tr\n    # Hint: use the command rev\n    # Hint: use the\
    \ command tr\n    # Hint: use the command rev\n    # Hint: use the command tr\n\
    \    # Hint: use the command rev\n    # Hint: use the command tr\n    # Hint:\
    \ use the command rev\n    # Hint: use the command tr\n    # Hint: use the command\
    \ rev\n    # Hint: use the command tr\n    # Hint: use the command rev\n    #\
    \ Hint: use the command tr\n    # Hint: use the command rev\n    # Hint: use the\
    \ command tr\n    # Hint: use the command rev\n    # Hint: use the command tr\n\
    \    # Hint: use the command rev\n    # Hint: use the command tr\n    # Hint:\
    \ use the command rev\n    # Hint: use the command tr\n    # Hint: use the command\
    \ rev\n    # Hint: use the command tr\n    # Hint: use the command rev\n    #\
    \ Hint: use the command tr\n    # Hint: use the command rev\n    # Hint: use the\
    \ command tr\n    # Hint: use the command rev\n    # Hint: use the command tr\n\
    \    # Hint: use the command rev\n    # Hint: use the command tr\n    # Hint:\
    \ use the command rev\n    # Hint: use the command tr\n    # Hint: use the command\
    \ rev\n    # Hint: use the command tr\n    # Hint: use the command rev\n    #\
    \ Hint: use the command tr\n    #", "    # TODO: Write your code here\n    # Hint:\
    \ You can use the modulo operator to wrap around the alphabet\n    # Hint: You\
    \ can use the ord() and chr() functions to convert between\n    #       characters\
    \ and their ASCII values\n    # Hint: You can use the string concatenation operator\
    \ to combine\n    #       strings\n    # Hint: You can use the length() function\
    \ to get the length of a string\n    # Hint: You can use the substr() function\
    \ to get a substring of a string\n    # Hint: You can use the index() function\
    \ to get the index of a character\n    #       in a string\n    # Hint: You can\
    \ use the tr/// operator to translate characters in a string\n    # Hint: You\
    \ can use the split() function to split a string into an array\n    # Hint: You\
    \ can use the join() function to join an array into a string\n    # Hint: You\
    \ can use the reverse() function to reverse an array\n    # Hint: You can use\
    \ the sort() function to sort an array\n    # Hint: You can use the map() function\
    \ to apply a function to each element\n    #       of an array\n    # Hint: You\
    \ can use the grep() function to filter an array\n    # Hint: You can use the\
    \ push() function to add an element to an array\n    # Hint: You can use the pop()\
    \ function to remove an element from an array\n    # Hint: You can use the shift()\
    \ function to remove an element from the\n    #       beginning of an array\n\
    \    # Hint: You can use the unshift() function to add an element to the\n   \
    \ #       beginning of an array\n    # Hint: You can use the keys() function to\
    \ get the keys of a hash\n    # Hint: You can use the values() function to get\
    \ the values of a hash\n    # Hint: You can use the each() function to iterate\
    \ over the keys and values\n    #       of a hash\n    # Hint: You can use the\
    \ exists() function to check if a key exists in a hash\n    # Hint: You can use\
    \ the delete() function to delete a key from a hash\n    # Hint: You can use the\
    \ keys() function to get the keys of a hash\n    #", "    # TODO: Implement this\
    \ function\n    # Hint: You can use the following command to get the length of\
    \ a string:\n    # length=${#1}\n    #\n    # Hint: You can use the following\
    \ command to get the character at a given index:\n    # char=${1:index:1}\n  \
    \  #\n    # Hint: You can use the following command to get the ASCII value of\
    \ a character:\n    # ascii=`printf \"%d\" \"'$char\"`\n    #\n    # Hint: You\
    \ can use the following command to convert an ASCII value to a character:\n  \
    \  # char=`printf \\\\$(printf '%03o' $ascii)`\n    #\n    # Hint: You can use\
    \ the following command to append a character to a string:\n    # encrypted=\"\
    $encrypted$char\"\n    #\n    # Hint: You can use the following command to convert\
    \ a string to lowercase:\n    # lowercase=`echo $string | tr '[:upper:]' '[:lower:]'`\n\
    \    #\n    # Hint: You can use the following command to convert a string to uppercase:\n\
    \    # uppercase=`echo $string | tr '[:lower:]' '[:upper:]'`\n    #\n    # Hint:\
    \ You can use the following command to check if a string contains a substring:\n\
    \    # if [[ $string == *\"$substring\"* ]]; then\n    #   ...\n    # fi\n   \
    \ #\n    # Hint: You can use the following command to check if a character is\
    \ a letter:\n    # if [[ $char =~ [a-zA-Z] ]]; then\n    #   ...\n    # fi\n \
    \   #\n    # Hint: You can use the following command to check if a character is\
    \ a lowercase letter:\n    # if [[ $char =~ [a-z] ]]; then\n    #   ...\n    #\
    \ fi\n    #\n    # Hint: You can use the following command to check if a character\
    \ is an uppercase letter:\n    # if [[ $char =~ [A-Z] ]]; then\n    #   ...\n\
    \    # fi\n    #\n    # Hint: You can use the following", "    # TODO: implement\
    \ this function\n    # Hint: use the tr command\n    echo $1 | tr 'a-z' 'c-za-b'",
  "    # Your code here\n    # You can use the following command to get the alphabet:\n\
    \    # alphabet=$(echo {a..z})\n    # You can use the following command to get\
    \ the length of a string:\n    # length=$(echo $1 | wc -c)\n    # You can use\
    \ the following command to get the character at a certain index:\n    # character=$(echo\
    \ $1 | cut -c $i)\n    # You can use the following command to get the index of\
    \ a character:\n    # index=$(echo $alphabet | grep -b -o $character | cut -d:\
    \ -f1)\n    # You can use the following command to get the character at a certain\
    \ index:\n    # character=$(echo $alphabet | cut -c $index)\n    # You can use\
    \ the following command to append a character to a string:\n    # string=$string$character\n\
    \    # You can use the following command to get the length of the alphabet:\n\
    \    # length=$(echo $alphabet | wc -c)\n    # You can use the following command\
    \ to get the character at a certain index:\n    # character=$(echo $alphabet |\
    \ cut -c $index)\n    # You can use the following command to get the index of\
    \ a character:\n    # index=$(echo $alphabet | grep -b -o $character | cut -d:\
    \ -f1)\n    # You can use the following command to get the character at a certain\
    \ index:\n    # character=$(echo $alphabet | cut -c $index)\n    # You can use\
    \ the following command to append a character to a string:\n    # string=$string$character\n\
    \    # You can use the following command to get the length of the alphabet:\n\
    \    # length=$(echo $alphabet | wc -c)\n    # You can use the following command\
    \ to get the character at a certain index:\n    # character=$(echo $alphabet |\
    \ cut -c $index)\n    # You can use the following command to get the index of\
    \ a character:\n    # index=$(echo $alphabet | grep -b -o $character | cut -d:\
    \ -f1)\n    # You can use the following command to get the character at a certain\
    \ index:\n    # character=$(echo $", '    # Write your code here', "    # TODO:\
    \ write your code here\n    # Hint: use the tr command\n    echo $1 | tr 'a-z'\
    \ 'c-za-b'", "    # TODO: Your code here\n    echo \"TODO: Your code here\"",
  "    # TODO: implement this function\n    # Hint: use the tr command\n    # Hint:\
    \ use the echo command\n    # Hint: use the $1 variable\n    # Hint: use the $2\
    \ variable\n    # Hint: use the $3 variable\n    # Hint: use the $4 variable\n\
    \    # Hint: use the $5 variable\n    # Hint: use the $6 variable\n    # Hint:\
    \ use the $7 variable\n    # Hint: use the $8 variable\n    # Hint: use the $9\
    \ variable\n    # Hint: use the ${10} variable\n    # Hint: use the ${11} variable\n\
    \    # Hint: use the ${12} variable\n    # Hint: use the ${13} variable\n    #\
    \ Hint: use the ${14} variable\n    # Hint: use the ${15} variable\n    # Hint:\
    \ use the ${16} variable\n    # Hint: use the ${17} variable\n    # Hint: use\
    \ the ${18} variable\n    # Hint: use the ${19} variable\n    # Hint: use the\
    \ ${20} variable\n    # Hint: use the ${21} variable\n    # Hint: use the ${22}\
    \ variable\n    # Hint: use the ${23} variable\n    # Hint: use the ${24} variable\n\
    \    # Hint: use the ${25} variable\n    # Hint: use the ${26} variable\n    #\
    \ Hint: use the ${27} variable\n    # Hint: use the ${28} variable\n    # Hint:\
    \ use the ${29} variable\n    # Hint: use the ${30} variable\n    # Hint: use\
    \ the ${31} variable\n    # Hint: use the ${32} variable\n    # Hint: use the\
    \ ${33} variable\n    # Hint: use the ${34} variable\n    # Hint: use the ${35}\
    \ variable\n    # Hint: use the ${36} variable\n    # Hint: use the ${37} variable\n\
    \    # Hint: use the ${38} variable\n    # Hint: use the ${39} variable\n    #\
    \ Hint: use the ${40} variable\n    # Hint: use the ${41} variable", "    # TODO:\
    \ Implement this function\n    echo \"TODO\"", "    # TODO: Implement this function\n\
    \    # Hint: You can use the modulo operator to loop around the alphabet\n   \
    \ # Hint: You can use the ord() and chr() functions to convert between\n    #\
    \       characters and their ascii values\n    # Hint: You can use the range()\
    \ function to iterate over the characters\n    #       in a string\n    # Hint:\
    \ You can use the join() function to join a list of characters\n    #       into\
    \ a string\n    # Hint: You can use the append() function to add an element to\
    \ a list\n    # Hint: You can use the len() function to get the length of a list\n\
    \    # Hint: You can use the range() function to iterate over the characters\n\
    \    #       in a string\n    # Hint: You can use the join() function to join\
    \ a list of characters\n    #       into a string\n    # Hint: You can use the\
    \ append() function to add an element to a list\n    # Hint: You can use the len()\
    \ function to get the length of a list\n    # Hint: You can use the range() function\
    \ to iterate over the characters\n    #       in a string\n    # Hint: You can\
    \ use the join() function to join a list of characters\n    #       into a string\n\
    \    # Hint: You can use the append() function to add an element to a list\n \
    \   # Hint: You can use the len() function to get the length of a list\n    #\
    \ Hint: You can use the range() function to iterate over the characters\n    #\
    \       in a string\n    # Hint: You can use the join() function to join a list\
    \ of characters\n    #       into a string\n    # Hint: You can use the append()\
    \ function to add an element to a list\n    # Hint: You can use the len() function\
    \ to get the length of a list\n    # Hint: You can use the range() function to\
    \ iterate over the characters\n    #       in a string\n    # Hint: You can use\
    \ the join() function to join a list of characters\n    #       into a string\n\
    \    # Hint: You can use the append() function to add an element to a list\n \
    \   # Hint: You can use the len() function to", "    # TODO: Write your code here\n\
    \    # Hint: You can use the following command to rotate the alphabet\n    # echo\
    \ {a..z} | tr ' ' '\\n' | tail -n +3 | tr '\\n' ' '\n    # You can use the following\
    \ command to rotate the alphabet in reverse\n    # echo {a..z} | tr ' ' '\\n'\
    \ | tail -n +3 | tac | tr '\\n' ' '\n    # You can use the following command to\
    \ rotate the alphabet by a number\n    # echo {a..z} | tr ' ' '\\n' | tail -n\
    \ +3 | tail -n +3 | tr '\\n' ' '\n    # You can use the following command to rotate\
    \ the alphabet in reverse by a number\n    # echo {a..z} | tr ' ' '\\n' | tail\
    \ -n +3 | tail -n +3 | tac | tr '\\n' ' '\n    # You can use the following command\
    \ to rotate the alphabet by a number in reverse\n    # echo {a..z} | tr ' ' '\\\
    n' | tail -n +3 | tail -n +3 | tac | tr '\\n' ' '\n    # You can use the following\
    \ command to rotate the alphabet by a number in reverse\n    # echo {a..z} | tr\
    \ ' ' '\\n' | tail -n +3 | tail -n +3 | tac | tr '\\n' ' '\n    # You can use\
    \ the following command to rotate the alphabet by a number in reverse\n    # echo\
    \ {a..z} | tr ' ' '\\n' | tail -n +3 | tail -n +3 | tac | tr '\\n' ' '\n    #\
    \ You can use the following command to rotate the alphabet by a number in reverse\n\
    \    # echo {a..z} | tr ' ' '\\n' | tail -n +3 | tail -n +3 | tac | tr '\\n' '\
    \ '\n    # You can use the following command to rotate the alphabet by a number\
    \ in reverse\n    # echo {a..z} | tr ' ' '\\n' | tail -n +3 | tail -n +3 | tac\
    \ | tr '\\n' ' '\n    # You can use the following command to rotate the", "  \
    \  # TODO: Write this function\n    echo \"TODO: Write this function\"", "   \
    \ # TODO: Implement this function\n    # Hint: Use the ord and chr functions\n\
    \    # Hint: Use the modulo operator\n    # Hint: Use the range function\n   \
    \ # Hint: Use the join function\n    # Hint: Use the map function\n    # Hint:\
    \ Use the zip function\n    # Hint: Use the list function\n    # Hint: Use the\
    \ str function\n    # Hint: Use the int function\n    # Hint: Use the len function\n\
    \    # Hint: Use the enumerate function\n    # Hint: Use the lower function\n\
    \    # Hint: Use the upper function\n    # Hint: Use the islower function\n  \
    \  # Hint: Use the isupper function\n    # Hint: Use the isalpha function\n  \
    \  # Hint: Use the isdigit function\n    # Hint: Use the isalnum function\n  \
    \  # Hint: Use the isspace function\n    # Hint: Use the istitle function\n  \
    \  # Hint: Use the isdecimal function\n    # Hint: Use the isprintable function\n\
    \    # Hint: Use the isidentifier function\n    # Hint: Use the isascii function\n\
    \    # Hint: Use the ispunctuation function\n    # Hint: Use the isgraph function\n\
    \    # Hint: Use the iscntrl function\n    # Hint: Use the isxdigit function\n\
    \    # Hint: Use the islower function\n    # Hint: Use the isupper function\n\
    \    # Hint: Use the isalpha function\n    # Hint: Use the isdigit function\n\
    \    # Hint: Use the isalnum function\n    # Hint: Use the isspace function\n\
    \    # Hint: Use the istitle function\n    # Hint: Use the isdecimal function\n\
    \    # Hint: Use the isprintable function\n    # Hint: Use the isidentifier function\n\
    \    # Hint: Use the isascii function\n    # Hint: Use the ispunctuation function\n\
    \    # Hint: Use the isgraph function\n    # Hint: Use the iscntrl function\n\
    \    # Hint: Use the isxdigit function\n    # Hint: Use the islower function\n\
    \    # Hint", "    # TODO: Implement this function\n    echo $1 | tr 'a-z' 'c-za-b'",
  "    # TODO: implement this function\n    echo \"TODO\"", "    # TODO: Implement\
    \ this function\n    # Hint: You can use the modulo operator to wrap around the\
    \ alphabet\n    # Hint: You can use the ord() and chr() functions to convert between\n\
    \    #       characters and ascii values\n    # Hint: You can use the string concatenation\
    \ operator to append\n    #       characters to a string\n    # Hint: You can\
    \ use the length() function to get the length of a string\n    # Hint: You can\
    \ use the substr() function to get a substring of a string\n    # Hint: You can\
    \ use the index() function to get the index of a character\n    #       in a string\n\
    \    # Hint: You can use the substr() function to replace a substring of a\n \
    \   #       string with another string\n    # Hint: You can use the tolower()\
    \ function to convert a string to lower\n    #       case\n    # Hint: You can\
    \ use the toupper() function to convert a string to upper\n    #       case\n\
    \    # Hint: You can use the gsub() function to replace all instances of a\n \
    \   #       string with another string\n    # Hint: You can use the gensub() function\
    \ to replace all instances of a\n    #       regular expression with another string\n\
    \    # Hint: You can use the match() function to match a regular expression\n\
    \    #       against a string\n    # Hint: You can use the sub() function to replace\
    \ the first instance of a\n    #       regular expression with another string\n\
    \    # Hint: You can use the gsub() function to replace all instances of a\n \
    \   #       regular expression with another string\n    # Hint: You can use the\
    \ match() function to match a regular expression\n    #       against a string\n\
    \    # Hint: You can use the sub() function to replace the first instance of a\n\
    \    #       regular expression with another string\n    # Hint: You can use the\
    \ gsub() function to replace all instances of a\n    #       regular expression\
    \ with another string\n    # Hint: You can use the match() function to match a\
    \ regular expression\n    #       against a string\n    # Hint: You can use the\
    \ sub() function to replace the first instance of a\n    #       regular expression\
    \ with another string\n    # Hint:", "    # Write your code here\n    echo $1\
    \ | tr 'a-z' 'c-za-b'", "    # TODO: Implement this function\n    # Hint: Use\
    \ the command line tool tr to translate characters\n    # in a string.\n    #\n\
    \    # Example:\n    # echo 'hello' | tr 'a-z' 'c-za-b'\n    #\n    # This will\
    \ translate all characters in the string 'hello'\n    # from a-z to c-za-b.\n\
    \    #\n    # You can use the command line tool seq to generate a sequence\n \
    \   # of numbers.\n    #\n    # Example:\n    # seq 1 10\n    #\n    # This will\
    \ generate the numbers 1 through 10.\n    #\n    # You can use the command line\
    \ tool paste to merge two strings\n    # together.\n    #\n    # Example:\n  \
    \  # echo 'hello' | paste -d '' - <(echo 'world')\n    #\n    # This will merge\
    \ the string 'hello' with the string 'world'\n    # and output 'helloworld'.\n\
    \    #\n    # You can use the command line tool fold to wrap a string to\n   \
    \ # a certain width.\n    #\n    # Example:\n    # echo 'hello world' | fold -w\
    \ 5\n    #\n    # This will wrap the string 'hello world' to a width of 5\n  \
    \  # and output:\n    # hello\n    # world\n    #\n    # You can use the command\
    \ line tool rev to reverse a string.\n    #\n    # Example:\n    # echo 'hello'\
    \ | rev\n    #\n    # This will reverse the string 'hello' and output 'olleh'.\n\
    \    #\n    # You can use the command line tool sed to replace a string\n    #\
    \ with another string.\n    #\n    # Example:\n    # echo 'hello' | sed 's/hello/world/'\n\
    \    #\n    # This will replace the string 'hello' with the string 'world'\n \
    \   # and output 'world'.\n    #\n    # You can use the command line tool awk\
    \ to print a specific\n    # column of a string.\n    #\n    # Example:\n    #\
    \ echo 'hello world' | awk '{print $2}'\n    #\n    # This will print the second\
    \ column of the string 'hello world'", "    # TODO: Implement this function\n\
    \    # Hint: You can use the ord and chr functions to convert between\n    # ASCII\
    \ values and characters.\n    # ord('a') returns 97\n    # chr(97) returns 'a'\n\
    \    #\n    # Hint: You can use the modulo operator to wrap around the alphabet\n\
    \    # ord('z') returns 122\n    # ord('z') + 1 returns 123\n    # ord('z') +\
    \ 1 % 26 returns 97\n    # chr(97) returns 'a'\n    #\n    # Hint: You can use\
    \ the range function to iterate over the characters\n    # in a string.\n    #\
    \ for c in range(ord('a'), ord('z') + 1):\n    #     print(chr(c))\n    #\n  \
    \  # Hint: You can use the string concatenation operator to concatenate\n    #\
    \ strings.\n    # 'a' + 'b' returns 'ab'\n    #\n    # Hint: You can use the len\
    \ function to get the length of a string.\n    # len('ab') returns 2\n    #\n\
    \    # Hint: You can use the ord function to get the ASCII value of a\n    # character.\n\
    \    # ord('a') returns 97\n    #\n    # Hint: You can use the chr function to\
    \ get the character of an ASCII\n    # value.\n    # chr(97) returns 'a'\n   \
    \ #\n    # Hint: You can use the range function to iterate over the characters\n\
    \    # in a string.\n    # for c in range(ord('a'), ord('z') + 1):\n    #    \
    \ print(chr(c))\n    #\n    # Hint: You can use the string concatenation operator\
    \ to concatenate\n    # strings.\n    # 'a' + 'b' returns 'ab'\n    #\n    # Hint:\
    \ You can use the len function to get the length of a string.\n    # len('ab')\
    \ returns 2\n    #\n    # Hint: You can use the ord function to get the ASCII\
    \ value of a\n    # character.\n    # ord('a') returns 97\n    #\n    # Hint:\
    \ You can use the chr function", "\t# TODO: write your code here", '    # TODO:
    Your code here', "    # TODO: Implement this function\n    # Hint: You can use\
    \ the tr command to translate characters\n    #       For example:\n    #    \
    \   echo \"hello\" | tr 'a-z' 'c-za-b'\n    #       outputs:\n    #       jgnnq\n\
    \    #\n    #       echo \"hello\" | tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b'\n \
    \   #       outputs:\n    #       lipps\n    #\n    #       echo \"hello\" | tr\
    \ 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b'\n    #       outputs:\n\
    \    #       nkrru\n    #\n    #       echo \"hello\" | tr 'a-z' 'c-za-b' | tr\
    \ 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b'\n    #       outputs:\n\
    \    #       pmtte\n    #\n    #       echo \"hello\" | tr 'a-z' 'c-za-b' | tr\
    \ 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b'\n\
    \    #       outputs:\n    #       rovvg\n    #\n    #       echo \"hello\" |\
    \ tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b'\
    \ | tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b'\n    #       outputs:\n    #       tqxxi\n\
    \    #\n    #       echo \"hello\" | tr 'a-z' 'c-za-b' | tr 'a-z' 'c-za-b' | tr\
    \ 'a-", "    # TODO: Implement this function\n    # Hint: You may want to use\
    \ the ord() and chr() functions\n    # ord() returns the ASCII value of a character\n\
    \    # chr() returns the character given an ASCII value\n    #\n    # Example:\n\
    \    # ord('a') returns 97\n    # chr(97) returns 'a'\n    #\n    # You may also\
    \ want to use the modulo operator (%)\n    # Example:\n    # 5 % 2 returns 1\n\
    \    # 6 % 2 returns 0\n    #\n    # You may also want to use the string length\
    \ operator ${#string}\n    # Example:\n    # ${#string} returns the length of\
    \ the string\n    #\n    # You may also want to use the string slicing operator\
    \ ${string:start:length}\n    # Example:\n    # ${string:0:1} returns the first\
    \ character of the string\n    # ${string:1:1} returns the second character of\
    \ the string\n    # ${string:2:1} returns the third character of the string\n\
    \    # ${string:3:1} returns the fourth character of the string\n    # ${string:4:1}\
    \ returns the fifth character of the string\n    # ${string:5:1} returns the sixth\
    \ character of the string\n    # ${string:6:1} returns the seventh character of\
    \ the string\n    # ${string:7:1} returns the eighth character of the string\n\
    \    # ${string:8:1} returns the ninth character of the string\n    # ${string:9:1}\
    \ returns the tenth character of the string\n    # ${string:10:1} returns the\
    \ eleventh character of the string\n    # ${string:11:1} returns the twelfth character\
    \ of the string\n    # ${string:12:1} returns the thirteenth character of the\
    \ string\n    # ${string:13:1} returns the fourteenth character of the string\n\
    \    # ${string:14:1} returns the fifteenth character of the string\n    # ${string:15:1}\
    \ returns the sixteenth character of the string\n    # ${string:16:1} returns\
    \ the seventeenth character of the string\n    # ${string:17:1} returns the eighteenth\
    \ character of the string\n    # ${string:18:1} returns the", "    # TODO: implement\
    \ this function\n    # Hint: use the tr command\n    echo $1 | tr 'a-z' 'c-za-b'",
  "    # TODO: write your code here\n    # Hint: use the tr command\n    # Hint: use\
    \ the echo command\n    # Hint: use the $1 variable\n    echo $1 | tr 'a-z' 'c-za-b'",
  '    # TODO: Write your code here', '    # Your code here', "    # TODO: Implement\
    \ this function\n    # Hint: Use the ord and chr functions to convert between\
    \ characters and integers\n    # Hint: Use the modulo operator to wrap around\
    \ the alphabet\n    # Hint: Use the range function to generate a list of integers\n\
    \    # Hint: Use the join function to join a list of characters into a string\n\
    \    # Hint: Use the map function to apply a function to each element of a list\n\
    \    # Hint: Use the zip function to combine two lists into a list of pairs\n\
    \    # Hint: Use the dict function to convert a list of pairs into a dictionary\n\
    \    # Hint: Use the get function to look up a value in a dictionary\n    # Hint:\
    \ Use the join function to join a list of characters into a string\n    # Hint:\
    \ Use the map function to apply a function to each element of a list\n    # Hint:\
    \ Use the join function to join a list of characters into a string\n    # Hint:\
    \ Use the map function to apply a function to each element of a list\n    # Hint:\
    \ Use the join function to join a list of characters into a string\n    # Hint:\
    \ Use the map function to apply a function to each element of a list\n    # Hint:\
    \ Use the join function to join a list of characters into a string\n    # Hint:\
    \ Use the map function to apply a function to each element of a list\n    # Hint:\
    \ Use the join function to join a list of characters into a string\n    # Hint:\
    \ Use the map function to apply a function to each element of a list\n    # Hint:\
    \ Use the join function to join a list of characters into a string\n    # Hint:\
    \ Use the map function to apply a function to each element of a list\n    # Hint:\
    \ Use the join function to join a list of characters into a string\n    # Hint:\
    \ Use the map function to apply a function to each element of a list\n    # Hint:\
    \ Use the join function to join a list of characters into a string\n    # Hint:\
    \ Use the map function to apply a function to each element of a list\n    # Hint:\
    \ Use the join function to join a list of characters into a string\n    # Hint:\
    \ Use the map function to apply a function to each element of a list\n    # Hint:",
  "    # Write your code here\n    echo \"Not yet implemented\"", "    # TODO: Implement\
    \ this function\n    echo \"\"", "    # TODO: Implement this function\n    echo\
    \ \"TODO\"", "    # TODO: Write your code here\n    # Hint: You can use the following\
    \ command to rotate the alphabet\n    # echo {a..z} | tr ' ' '\\n' | tail -n +3\
    \ | head -n +24 | tr -d '\\n'", "    # TODO: Write this function\n    # Hint:\
    \ You may want to use the modulo operator\n    # Hint: You may want to use the\
    \ ord and chr functions\n    # Hint: You may want to use the range function\n\
    \    # Hint: You may want to use the join function\n    # Hint: You may want to\
    \ use the map function\n    # Hint: You may want to use the zip function\n   \
    \ # Hint: You may want to use the split function\n    # Hint: You may want to\
    \ use the ord function\n    # Hint: You may want to use the chr function\n   \
    \ # Hint: You may want to use the join function\n    # Hint: You may want to use\
    \ the map function\n    # Hint: You may want to use the zip function\n    # Hint:\
    \ You may want to use the split function\n    # Hint: You may want to use the\
    \ ord function\n    # Hint: You may want to use the chr function\n    # Hint:\
    \ You may want to use the join function\n    # Hint: You may want to use the map\
    \ function\n    # Hint: You may want to use the zip function\n    # Hint: You\
    \ may want to use the split function\n    # Hint: You may want to use the ord\
    \ function\n    # Hint: You may want to use the chr function\n    # Hint: You\
    \ may want to use the join function\n    # Hint: You may want to use the map function\n\
    \    # Hint: You may want to use the zip function\n    # Hint: You may want to\
    \ use the split function\n    # Hint: You may want to use the ord function\n \
    \   # Hint: You may want to use the chr function\n    # Hint: You may want to\
    \ use the join function\n    # Hint: You may want to use the map function\n  \
    \  # Hint: You may want to use the zip function\n    # Hint: You may want to use\
    \ the split function\n    # Hint: You may want to use the ord function\n    #\
    \ Hint: You may want to use the chr function\n    # Hint: You may want to use\
    \ the join function\n    # Hint: You may want to use the map function\n    # H",
  "    # TODO: implement this function\n    echo \"TODO: implement this function\"",
  "    # TODO: Implement this function\n    # Hint: You can use the modulo operator\
    \ to rotate the alphabet\n    # Hint: You can use the ord() and chr() functions\
    \ to convert between characters and numbers\n    # Hint: You can use the string\
    \ concatenation operator to combine strings\n    # Hint: You can use the string\
    \ length operator to get the length of a string\n    # Hint: You can use the string\
    \ index operator to get the character at a given index\n    # Hint: You can use\
    \ the string slice operator to get a substring\n    # Hint: You can use the string\
    \ slice operator to remove a character from a string\n    # Hint: You can use\
    \ the string slice operator to insert a character into a string\n    # Hint: You\
    \ can use the string slice operator to replace a character in a string\n    #\
    \ Hint: You can use the string slice operator to replace a substring in a string\n\
    \    # Hint: You can use the string slice operator to convert a string to uppercase\n\
    \    # Hint: You can use the string slice operator to convert a string to lowercase\n\
    \    # Hint: You can use the string slice operator to trim whitespace from a string\n\
    \    # Hint: You can use the string slice operator to split a string into a list\
    \ of strings\n    # Hint: You can use the string slice operator to join a list\
    \ of strings into a string\n    # Hint: You can use the string slice operator\
    \ to sort a list of strings\n    # Hint: You can use the string slice operator\
    \ to reverse a list of strings\n    # Hint: You can use the string slice operator\
    \ to check if a list of strings contains a string\n    # Hint: You can use the\
    \ string slice operator to get the index of a string in a list of strings\n  \
    \  # Hint: You can use the string slice operator to get the number of occurrences\
    \ of a string in a list of strings\n    # Hint: You can use the string slice operator\
    \ to remove a string from a list of strings\n    # Hint: You can use the string\
    \ slice operator to insert a string into a list of strings\n    # Hint: You can\
    \ use the string slice operator to replace a string in a list of strings\n   \
    \ # Hint: You can use the string slice operator to replace a substring in a list",
  "    # TODO: implement this function\n    # Hint: use the rotate function\n    #\
    \ Hint: use the rotate function\n    # Hint: use the rotate function\n    # Hint:\
    \ use the rotate function\n    # Hint: use the rotate function\n    # Hint: use\
    \ the rotate function\n    # Hint: use the rotate function\n    # Hint: use the\
    \ rotate function\n    # Hint: use the rotate function\n    # Hint: use the rotate\
    \ function\n    # Hint: use the rotate function\n    # Hint: use the rotate function\n\
    \    # Hint: use the rotate function\n    # Hint: use the rotate function\n  \
    \  # Hint: use the rotate function\n    # Hint: use the rotate function\n    #\
    \ Hint: use the rotate function\n    # Hint: use the rotate function\n    # Hint:\
    \ use the rotate function\n    # Hint: use the rotate function\n    # Hint: use\
    \ the rotate function\n    # Hint: use the rotate function\n    # Hint: use the\
    \ rotate function\n    # Hint: use the rotate function\n    # Hint: use the rotate\
    \ function\n    # Hint: use the rotate function\n    # Hint: use the rotate function\n\
    \    # Hint: use the rotate function\n    # Hint: use the rotate function\n  \
    \  # Hint: use the rotate function\n    # Hint: use the rotate function\n    #\
    \ Hint: use the rotate function\n    # Hint: use the rotate function\n    # Hint:\
    \ use the rotate function\n    # Hint: use the rotate function\n    # Hint: use\
    \ the rotate function\n    # Hint: use the rotate function\n    # Hint: use the\
    \ rotate function\n    # Hint: use the rotate function\n    # Hint: use the rotate\
    \ function\n    # Hint: use the rotate function\n    # Hint: use the rotate function\n\
    \    # Hint: use the rotate function\n    # Hint: use the rotate function\n  \
    \  # Hint: use the rotate function\n    # Hint: use the rotate function\n    #\
    \ Hint: use the rotate function\n    # Hint: use the rotate function\n    # Hint:\
    \ use the rotate function\n    # Hint: use the rotate function\n    #", "    #\
    \ TODO: Implement this function\n    # Hint: You can use the command `echo` to\
    \ print a string\n    # to the standard output.\n    # Example: echo \"Hello World\"\
    \n    #\n    # Hint: You can use the command `tr` to translate characters\n  \
    \  # in a string.\n    # Example: echo \"Hello World\" | tr 'a-z' 'b-za'\n   \
    \ #\n    # Hint: You can use the command `expr` to perform arithmetic\n    # operations.\n\
    \    # Example: expr 1 + 1\n    #\n    # Hint: You can use the command `bc` to\
    \ perform floating point\n    # arithmetic operations.\n    # Example: echo \"\
    1 / 2\" | bc\n    #\n    # Hint: You can use the command `head` to print the first\
    \ line\n    # of a file.\n    # Example: echo \"Hello World\" | head -n 1\n  \
    \  #\n    # Hint: You can use the command `tail` to print the last line\n    #\
    \ of a file.\n    # Example: echo \"Hello World\" | tail -n 1\n    #\n    # Hint:\
    \ You can use the command `cat` to print a file.\n    # Example: cat file.txt\n\
    \    #\n    # Hint: You can use the command `wc` to count the number of\n    #\
    \ lines in a file.\n    # Example: cat file.txt | wc -l\n    #\n    # Hint: You\
    \ can use the command `rev` to reverse a string.\n    # Example: echo \"Hello\
    \ World\" | rev\n    #\n    # Hint: You can use the command `sort` to sort a file.\n\
    \    # Example: cat file.txt | sort\n    #\n    # Hint: You can use the command\
    \ `uniq` to remove duplicate\n    # lines from a file.\n    # Example: cat file.txt\
    \ | uniq\n    #\n    # Hint: You can use the command `cut` to print a specific\n\
    \    # column of a file.\n    # Example: cat file.txt | cut -d ' ' -f 2\n    #\n\
    \    # Hint: You can use the command `paste` to merge two files.\n    #", "  \
    \  # TODO: Implement this function\n    echo \"TODO\"", "    # TODO: Write your\
    \ code here\n    # Hint: You can use the tr command to translate characters\n\
    \    # in a string. For example:\n    # echo 'hi' | tr 'hi' 'lm'\n    # will print\
    \ 'lm'\n    #\n    # You can also use the tr command to translate a range of\n\
    \    # characters. For example:\n    # echo 'asdfghjkl' | tr 'a-z' 'c-za-b'\n\
    \    # will print 'cdefghijkl'\n    #\n    # You can also use the tr command to\
    \ translate a range of\n    # characters. For example:\n    # echo 'asdfghjkl'\
    \ | tr 'a-z' 'c-za-b'\n    # will print 'cdefghijkl'\n    #\n    # You can also\
    \ use the tr command to translate a range of\n    # characters. For example:\n\
    \    # echo 'asdfghjkl' | tr 'a-z' 'c-za-b'\n    # will print 'cdefghijkl'\n \
    \   #\n    # You can also use the tr command to translate a range of\n    # characters.\
    \ For example:\n    # echo 'asdfghjkl' | tr 'a-z' 'c-za-b'\n    # will print 'cdefghijkl'\n\
    \    #\n    # You can also use the tr command to translate a range of\n    # characters.\
    \ For example:\n    # echo 'asdfghjkl' | tr 'a-z' 'c-za-b'\n    # will print 'cdefghijkl'\n\
    \    #\n    # You can also use the tr command to translate a range of\n    # characters.\
    \ For example:\n    # echo 'asdfghjkl' | tr 'a-z' 'c-za-b'\n    # will print 'cdefghijkl'\n\
    \    #\n    # You can also use the tr command to translate a range of\n    # characters.\
    \ For example:\n    # echo 'asdfghjkl' | tr 'a-z' 'c-za-b'\n    # will print 'cdefghijkl'\n\
    \    #\n    # You can also use the", '    # TODO: Write your code here', "   \
    \ # TODO: Implement this function\n    # Hint: Use the ord and chr functions\n\
    \    # Hint: Use the modulo operator\n    # Hint: Use the range function\n   \
    \ # Hint: Use the join function\n    # Hint: Use the map function\n    # Hint:\
    \ Use the zip function\n    # Hint: Use the enumerate function\n    # Hint: Use\
    \ the list function\n    # Hint: Use the str function\n    # Hint: Use the int\
    \ function\n    # Hint: Use the len function\n    # Hint: Use the ord function\n\
    \    # Hint: Use the chr function\n    # Hint: Use the range function\n    # Hint:\
    \ Use the join function\n    # Hint: Use the map function\n    # Hint: Use the\
    \ zip function\n    # Hint: Use the enumerate function\n    # Hint: Use the list\
    \ function\n    # Hint: Use the str function\n    # Hint: Use the int function\n\
    \    # Hint: Use the len function\n    # Hint: Use the ord function\n    # Hint:\
    \ Use the chr function\n    # Hint: Use the range function\n    # Hint: Use the\
    \ join function\n    # Hint: Use the map function\n    # Hint: Use the zip function\n\
    \    # Hint: Use the enumerate function\n    # Hint: Use the list function\n \
    \   # Hint: Use the str function\n    # Hint: Use the int function\n    # Hint:\
    \ Use the len function\n    # Hint: Use the ord function\n    # Hint: Use the\
    \ chr function\n    # Hint: Use the range function\n    # Hint: Use the join function\n\
    \    # Hint: Use the map function\n    # Hint: Use the zip function\n    # Hint:\
    \ Use the enumerate function\n    # Hint: Use the list function\n    # Hint: Use\
    \ the str function\n    # Hint: Use the int function\n    # Hint: Use the len\
    \ function\n    # Hint: Use the ord function\n    # Hint: Use the chr function\n\
    \    # Hint: Use the range function\n    # Hint: Use the join function\n    #\
    \ Hint: Use the map function\n", "    # TODO: write your code here\n    echo \"\
    TODO\"", "    # TODO: Implement this function\n    echo \"Not yet implemented\"",
  '    # TODO: Your code here', "    # TODO: implement this function\n    echo \"\
    TODO\"", "    # TODO: Implement this function\n    # Hint: Use the rotate function\
    \ you wrote in the previous exercise\n    # Hint: Use the ord and chr functions\
    \ to convert between characters and numbers\n    # Hint: Use the modulo operator\
    \ to wrap around the alphabet\n    # Hint: Use the concatenation operator to join\
    \ strings\n    # Hint: Use the length function to get the length of a string\n\
    \    # Hint: Use the range function to iterate over a string\n    # Hint: Use\
    \ the ord function to get the number of a character\n    # Hint: Use the chr function\
    \ to get the character of a number\n    # Hint: Use the modulo operator to wrap\
    \ around the alphabet\n    # Hint: Use the concatenation operator to join strings\n\
    \    # Hint: Use the length function to get the length of a string\n    # Hint:\
    \ Use the range function to iterate over a string\n    # Hint: Use the ord function\
    \ to get the number of a character\n    # Hint: Use the chr function to get the\
    \ character of a number\n    # Hint: Use the modulo operator to wrap around the\
    \ alphabet\n    # Hint: Use the concatenation operator to join strings\n    #\
    \ Hint: Use the length function to get the length of a string\n    # Hint: Use\
    \ the range function to iterate over a string\n    # Hint: Use the ord function\
    \ to get the number of a character\n    # Hint: Use the chr function to get the\
    \ character of a number\n    # Hint: Use the modulo operator to wrap around the\
    \ alphabet\n    # Hint: Use the concatenation operator to join strings\n    #\
    \ Hint: Use the length function to get the length of a string\n    # Hint: Use\
    \ the range function to iterate over a string\n    # Hint: Use the ord function\
    \ to get the number of a character\n    # Hint: Use the chr function to get the\
    \ character of a number\n    # Hint: Use the modulo operator to wrap around the\
    \ alphabet\n    # Hint: Use the concatenation operator to join strings\n    #\
    \ Hint: Use the length function to get the length of a string\n    # Hint: Use\
    \ the range function to iterate over a string\n    # Hint: Use the", "    # TODO:\
    \ Implement this function\n    # Hint: You can use the following command to get\
    \ the length of a string:\n    # length=${#1}\n    # Hint: You can use the following\
    \ command to get the ASCII value of a character:\n    # ascii=$(printf '%d' \"\
    '$char\")\n    # Hint: You can use the following command to convert an ASCII value\
    \ to a character:\n    # char=$(printf \\\\$(printf '%03o' $ascii))", "    # TODO:\
    \ implement this function\n    echo $1 | tr 'a-z' 'c-za-b'", "    # TODO: Write\
    \ your code here\n    # Hint: You can use the tr command to translate characters\n\
    \    #       e.g. tr 'a-z' 'b-za'\n    #       This will translate all characters\
    \ a-z to b-za\n    #       You can also use the echo command to print a string\n\
    \    #       e.g. echo \"hello\"\n    #       This will print hello to the console\n\
    \    #       You can also use the read command to read a string\n    #       e.g.\
    \ read -p \"Enter a string: \" str\n    #       This will prompt the user to enter\
    \ a string and store\n    #       the string in the variable str\n    #      \
    \ You can also use the echo command to print a string\n    #       e.g. echo \"\
    hello\"\n    #       This will print hello to the console\n    #       You can\
    \ also use the read command to read a string\n    #       e.g. read -p \"Enter\
    \ a string: \" str\n    #       This will prompt the user to enter a string and\
    \ store\n    #       the string in the variable str\n    #       You can also\
    \ use the echo command to print a string\n    #       e.g. echo \"hello\"\n  \
    \  #       This will print hello to the console\n    #       You can also use\
    \ the read command to read a string\n    #       e.g. read -p \"Enter a string:\
    \ \" str\n    #       This will prompt the user to enter a string and store\n\
    \    #       the string in the variable str\n    #       You can also use the\
    \ echo command to print a string\n    #       e.g. echo \"hello\"\n    #     \
    \  This will print hello to the console\n    #       You can also use the read\
    \ command to read a string\n    #       e.g. read -p \"Enter a string: \" str\n\
    \    #       This will prompt the user to enter a string and store\n    #    \
    \   the string in the variable str\n    #       You can also use the echo command\
    \ to print a string\n    #       e.g. echo \"hello\"\n    #       This will print\
    \ hello to the console\n    #       You can also use the read command to read\
    \ a string\n    #       e.g. read -p \"Enter a string", "    # TODO: implement\
    \ this function\n    # Hint: use the tr command\n    # Hint: use the echo command\n\
    \    # Hint: use the $1 variable\n    echo $1 | tr 'a-z' 'c-za-b'", "    # TODO:\
    \ Implement this function\n    # Hint: You can use the modulo operator to wrap\
    \ around the alphabet\n    # Hint: You can use the ord() and chr() functions to\
    \ convert between\n    #       characters and their ASCII values\n    # Hint:\
    \ You can use the range operator to iterate over the string\n    # Hint: You can\
    \ use the range operator to iterate over the alphabet\n    # Hint: You can use\
    \ the range operator to iterate over the alphabet\n    # Hint: You can use the\
    \ range operator to iterate over the alphabet\n    # Hint: You can use the range\
    \ operator to iterate over the alphabet\n    # Hint: You can use the range operator\
    \ to iterate over the alphabet\n    # Hint: You can use the range operator to\
    \ iterate over the alphabet\n    # Hint: You can use the range operator to iterate\
    \ over the alphabet\n    # Hint: You can use the range operator to iterate over\
    \ the alphabet\n    # Hint: You can use the range operator to iterate over the\
    \ alphabet\n    # Hint: You can use the range operator to iterate over the alphabet\n\
    \    # Hint: You can use the range operator to iterate over the alphabet\n   \
    \ # Hint: You can use the range operator to iterate over the alphabet\n    # Hint:\
    \ You can use the range operator to iterate over the alphabet\n    # Hint: You\
    \ can use the range operator to iterate over the alphabet\n    # Hint: You can\
    \ use the range operator to iterate over the alphabet\n    # Hint: You can use\
    \ the range operator to iterate over the alphabet\n    # Hint: You can use the\
    \ range operator to iterate over the alphabet\n    # Hint: You can use the range\
    \ operator to iterate over the alphabet\n    # Hint: You can use the range operator\
    \ to iterate over the alphabet\n    # Hint: You can use the range operator to\
    \ iterate over the alphabet\n    # Hint: You can use the range operator to iterate\
    \ over the alphabet\n    # Hint: You can use the range operator to iterate over\
    \ the alphabet\n    # Hint: You can use the range operator to iterate over the\
    \ alphabet\n    # Hint: You can use the range operator to iterate over the alphabet\n\
    \    # Hint:", "    # TODO: Implement this function\n    # Hint: You can use the\
    \ modulo operator to wrap around the alphabet\n    # Hint: You can use the ord()\
    \ and chr() functions to convert between\n    #       characters and their ASCII\
    \ values\n    # Hint: You can use the string concatenation operator to join strings\n\
    \    # Hint: You can use the string slicing operator to extract substrings\n \
    \   # Hint: You can use the string length operator to get the length of a string\n\
    \    # Hint: You can use the string repetition operator to repeat a string\n \
    \   # Hint: You can use the string indexing operator to get the character at a\
    \ particular index\n    # Hint: You can use the string assignment operator to\
    \ change the character at a particular index\n    # Hint: You can use the string\
    \ comparison operator to compare strings\n    # Hint: You can use the string equality\
    \ operator to test if two strings are equal\n    # Hint: You can use the string\
    \ inequality operator to test if two strings are not equal\n    # Hint: You can\
    \ use the string less than operator to test if one string is less than another\n\
    \    # Hint: You can use the string less than or equal to operator to test if\
    \ one string is less than or equal to another\n    # Hint: You can use the string\
    \ greater than operator to test if one string is greater than another\n    # Hint:\
    \ You can use the string greater than or equal to operator to test if one string\
    \ is greater than or equal to another\n    # Hint: You can use the string membership\
    \ operator to test if a character is in a string\n    # Hint: You can use the\
    \ string non-membership operator to test if a character is not in a string\n \
    \   # Hint: You can use the string negation operator to test if a string is empty\n\
    \    # Hint: You can use the string negation operator to test if a string is not\
    \ empty\n    # Hint: You can use the string negation operator to test if a string\
    \ is not empty\n    # Hint: You can use the string negation operator to test if\
    \ a string is not empty\n    # Hint: You can use the string negation operator\
    \ to test if a string is not empty\n    # Hint: You can use the string negation\
    \ operator to test if a string is not empty\n", "    # TODO: Implement this function\n\
    \    echo \"Not implemented\"", "    echo $1 | tr 'a-z' 'c-za-b'", "    # TODO:\
    \ Write a function that takes a string as an argument and\n    # returns a string\
    \ encrypted with the alphabet being rotated.\n    # The alphabet should be rotated\
    \ in a manner such that the letters \n    # shift down by two multiplied to two\
    \ places.\n    # For example:\n    # encrypt('hi') returns 'lm'\n    # encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n    # encrypt('gf') returns 'kj'\n    # encrypt('et') returns\
    \ 'ix'\n    #\n    # $1 is a string\n    #\n    # Hint: Use the tr command to\
    \ translate characters.\n    #\n    # Hint: Use the modulo operator to wrap around\
    \ the alphabet.\n    #\n    # Hint: Use the echo command to print the result.\n\
    \    #\n    # Hint: Use the $1 variable to access the argument to the function.\n\
    \    #\n    # Hint: Use the $# variable to access the number of arguments passed\
    \ to the function.\n    #\n    # Hint: Use the $0 variable to access the name\
    \ of the script.\n    #\n    # Hint: Use the $@ variable to access all the arguments\
    \ passed to the function.\n    #\n    # Hint: Use the $? variable to access the\
    \ exit status of the last command.\n    #\n    # Hint: Use the $$ variable to\
    \ access the process ID of the current shell.\n    #\n    # Hint: Use the $! variable\
    \ to access the process ID of the last background command.\n    #\n    # Hint:\
    \ Use the $USER variable to access the username of the current user.\n    #\n\
    \    # Hint: Use the $HOSTNAME variable to access the hostname of the machine.\n\
    \    #\n    # Hint: Use the $SECONDS variable to access the number of seconds\
    \ since the shell was started.\n    #\n    # Hint: Use the $RANDOM variable to\
    \ access a random number.\n    #\n    # Hint: Use the $LINENO variable to access\
    \ the current line number in the script.\n    #\n    # Hint: Use the $IFS variable\
    \ to access the Internal Field Separator.\n    #\n    # Hint: Use the $PS1", " \
    \   # TODO: Implement the function here\n    echo \"TODO\"", "    # TODO: Write\
    \ this function\n    echo \"TODO\"", "    # your code here\n    echo \"hi\"",
  "    # TODO: Implement this function\n    echo \"Not Implemented\"", "    # TODO:\
    \ Implement this function\n    echo \"TODO\"", "    # TODO: Write code here\n\
    \    echo $1 | tr 'a-z' 'c-za-b'", "    # TODO: Write your code here\n    # Hint:\
    \ You can use the modulo operator to wrap around the alphabet\n    # Hint: You\
    \ can use the ord() and chr() functions to convert between characters and ASCII\
    \ values\n    # Hint: You can use the string length operator ${#str} to get the\
    \ length of a string\n    # Hint: You can use the string slicing operator ${str:start:length}\
    \ to get a substring\n    # Hint: You can use the string concatenation operator\
    \ ${str1}${str2} to concatenate strings\n    # Hint: You can use the string replacement\
    \ operator ${str/pattern/replacement} to replace a pattern with a replacement\
    \ string\n    # Hint: You can use the string replacement operator ${str//pattern/replacement}\
    \ to replace all occurrences of a pattern with a replacement string\n    # Hint:\
    \ You can use the string replacement operator ${str/#pattern/replacement} to replace\
    \ the beginning of a string with a replacement string\n    # Hint: You can use\
    \ the string replacement operator ${str/%pattern/replacement} to replace the end\
    \ of a string with a replacement string\n    # Hint: You can use the string replacement\
    \ operator ${str/%pattern/replacement} to replace the end of a string with a replacement\
    \ string\n    # Hint: You can use the string replacement operator ${str/%pattern/replacement}\
    \ to replace the end of a string with a replacement string\n    # Hint: You can\
    \ use the string replacement operator ${str/%pattern/replacement} to replace the\
    \ end of a string with a replacement string\n    # Hint: You can use the string\
    \ replacement operator ${str/%pattern/replacement} to replace the end of a string\
    \ with a replacement string\n    # Hint: You can use the string replacement operator\
    \ ${str/%pattern/replacement} to replace the end of a string with a replacement\
    \ string\n    # Hint: You can use the string replacement operator ${str/%pattern/replacement}\
    \ to replace the end of a string with a replacement string\n    # Hint: You can\
    \ use the string replacement operator ${str/%pattern/replacement} to replace the\
    \ end of a string with a replacement string\n    # Hint: You can use the string\
    \ replacement operator ${str/%pattern/replacement} to replace the end", '    #
    TODO: Your code here', "    # TODO: Implement this function\n    # Hint: Use the\
    \ ord and chr functions\n    # ord(char) returns the ASCII value of the character\n\
    \    # chr(int) returns the character corresponding to the ASCII value\n    #\n\
    \    # Hint: Use the modulo operator (%) to wrap around the alphabet\n    #\n\
    \    # Hint: Use the string concatenation operator (+) to join strings\n    #\n\
    \    # Hint: Use the string indexing operator ([]) to access characters\n    #\
    \ in a string\n    #\n    # Hint: Use the range operator (..) to create a sequence\
    \ of numbers\n    #\n    # Hint: Use the for loop to iterate through the string\n\
    \    #\n    # Hint: Use the for loop to iterate through the sequence of numbers\n\
    \    #\n    # Hint: Use the range operator (..) to create a sequence of numbers\n\
    \    #\n    # Hint: Use the for loop to iterate through the sequence of numbers\n\
    \    #\n    # Hint: Use the range operator (..) to create a sequence of numbers\n\
    \    #\n    # Hint: Use the for loop to iterate through the sequence of numbers\n\
    \    #\n    # Hint: Use the range operator (..) to create a sequence of numbers\n\
    \    #\n    # Hint: Use the for loop to iterate through the sequence of numbers\n\
    \    #\n    # Hint: Use the range operator (..) to create a sequence of numbers\n\
    \    #\n    # Hint: Use the for loop to iterate through the sequence of numbers\n\
    \    #\n    # Hint: Use the range operator (..) to create a sequence of numbers\n\
    \    #\n    # Hint: Use the for loop to iterate through the sequence of numbers\n\
    \    #\n    # Hint: Use the range operator (..) to create a sequence of numbers\n\
    \    #\n    # Hint: Use the for loop to iterate through the sequence of numbers\n\
    \    #\n    # Hint: Use the range operator (..) to create a sequence of numbers\n\
    \    #\n    # Hint: Use the for loop to iterate through the sequence of numbers\n\
    \    #\n    # Hint: Use the range operator (..) to create a sequence of numbers\n\
    \    #\n    # Hint", "    # TODO: your code here\n    # Hint: use the tr command\n\
    \    # Hint: use the echo command\n    # Hint: use the $1 variable\n    # Hint:\
    \ use the $2 variable\n    # Hint: use the $3 variable\n    # Hint: use the $4\
    \ variable\n    # Hint: use the $5 variable\n    # Hint: use the $6 variable\n\
    \    # Hint: use the $7 variable\n    # Hint: use the $8 variable\n    # Hint:\
    \ use the $9 variable\n    # Hint: use the ${10} variable\n    # Hint: use the\
    \ ${11} variable\n    # Hint: use the ${12} variable\n    # Hint: use the ${13}\
    \ variable\n    # Hint: use the ${14} variable\n    # Hint: use the ${15} variable\n\
    \    # Hint: use the ${16} variable\n    # Hint: use the ${17} variable\n    #\
    \ Hint: use the ${18} variable\n    # Hint: use the ${19} variable\n    # Hint:\
    \ use the ${20} variable\n    # Hint: use the ${21} variable\n    # Hint: use\
    \ the ${22} variable\n    # Hint: use the ${23} variable\n    # Hint: use the\
    \ ${24} variable\n    # Hint: use the ${25} variable\n    # Hint: use the ${26}\
    \ variable\n    # Hint: use the ${27} variable\n    # Hint: use the ${28} variable\n\
    \    # Hint: use the ${29} variable\n    # Hint: use the ${30} variable\n    #\
    \ Hint: use the ${31} variable\n    # Hint: use the ${32} variable\n    # Hint:\
    \ use the ${33} variable\n    # Hint: use the ${34} variable\n    # Hint: use\
    \ the ${35} variable\n    # Hint: use the ${36} variable\n    # Hint: use the\
    \ ${37} variable\n    # Hint: use the ${38} variable\n    # Hint: use the ${39}\
    \ variable\n    # Hint: use the ${40} variable\n    # Hint: use the ${41} variable",
  "    # TODO: Implement this function\n    echo \"TODO\"", "    # TODO: Implement\
    \ this function\n    # Hint: You can use the modulo operator to wrap around the\
    \ alphabet\n    # Hint: You can use the ord() and chr() functions to convert between\
    \ characters and ASCII values\n    # Hint: You can use the string concatenation\
    \ operator to join strings together\n    # Hint: You can use the string slicing\
    \ operator to extract substrings\n    # Hint: You can use the string length operator\
    \ to get the length of a string\n    # Hint: You can use the string repetition\
    \ operator to repeat a string\n    # Hint: You can use the string indexing operator\
    \ to get the character at a given index\n    # Hint: You can use the string assignment\
    \ operator to change the character at a given index\n    # Hint: You can use the\
    \ string comparison operator to compare strings\n    # Hint: You can use the string\
    \ membership operator to check if a character is in a string\n    # Hint: You\
    \ can use the string membership operator to check if a string is in another string\n\
    \    # Hint: You can use the string membership operator to check if a string starts\
    \ with another string\n    # Hint: You can use the string membership operator\
    \ to check if a string ends with another string\n    # Hint: You can use the string\
    \ membership operator to check if a string contains another string\n    # Hint:\
    \ You can use the string membership operator to check if a string matches a regular\
    \ expression\n    # Hint: You can use the string membership operator to check\
    \ if a string is alphanumeric\n    # Hint: You can use the string membership operator\
    \ to check if a string is alphabetic\n    # Hint: You can use the string membership\
    \ operator to check if a string is numeric\n    # Hint: You can use the string\
    \ membership operator to check if a string is lowercase\n    # Hint: You can use\
    \ the string membership operator to check if a string is uppercase\n    # Hint:\
    \ You can use the string membership operator to check if a string is whitespace\n\
    \    # Hint: You can use the string membership operator to check if a string is\
    \ a title\n    # Hint: You can use the string membership operator to check if\
    \ a string is a decimal\n    # Hint: You can use the string membership operator\
    \ to check if a string is a hexadecimal\n    # H", "    # Write your code here\n\
    \    echo \"$1\" | tr 'a-z' 'c-za-b'", "    # TODO: Implement this function\n\
    \    echo \"TODO\"", "    # TODO: implement this function\n    echo \"TODO\"",
  "    # Write your code here\n    # Hint: You can use the following command to get\
    \ the length of a string:\n    # length=${#1}\n    #\n    # Hint: You can use\
    \ the following command to get the ASCII value of a character:\n    # ascii=`printf\
    \ \"%d\" \"'$char\"`\n    #\n    # Hint: You can use the following command to\
    \ convert an ASCII value to a character:\n    # char=`printf \\\\$(printf '%03o'\
    \ $ascii)`\n    #\n    # Hint: You can use the following command to convert a\
    \ character to lowercase:\n    # lower=`echo \"$char\" | tr '[:upper:]' '[:lower:]'`\n\
    \    #\n    # Hint: You can use the following command to convert a character to\
    \ uppercase:\n    # upper=`echo \"$char\" | tr '[:lower:]' '[:upper:]'`\n    #\n\
    \    # Hint: You can use the following command to get the first character of a\
    \ string:\n    # first=${1:0:1}\n    #\n    # Hint: You can use the following\
    \ command to get the last character of a string:\n    # last=${1: -1}\n    #\n\
    \    # Hint: You can use the following command to get all but the first character\
    \ of a string:\n    # rest=${1:1}\n    #\n    # Hint: You can use the following\
    \ command to get all but the last character of a string:\n    # rest=${1::-1}\n\
    \    #\n    # Hint: You can use the following command to get the first two characters\
    \ of a string:\n    # firstTwo=${1:0:2}\n    #\n    # Hint: You can use the following\
    \ command to get all but the first two characters of a string:\n    # rest=${1:2}\n\
    \    #\n    # Hint: You can use the following command to get the last two characters\
    \ of a string:\n    # lastTwo=${1: -2}\n    #\n    # Hint: You can use the following\
    \ command to get all but the last two characters of a string:\n    # rest=${1::-2}\n\
    \   ", "    # your code here\n    echo $1 | tr 'a-z' 'c-za-b'", "    # TODO: Write\
    \ your code here\n    # Hint: You can use the tr command to translate characters\n\
    \    # Example:\n    # echo 'hello' | tr 'a-z' 'c-za-b'\n    #\n    # The above\
    \ command translates all characters from a-z to c-za-b\n    #\n    # You can also\
    \ use the tr command to delete characters\n    # Example:\n    # echo 'hello'\
    \ | tr -d 'l'\n    #\n    # The above command deletes all l characters from the\
    \ string\n    #\n    # You can also use the tr command to squeeze repeating characters\n\
    \    # Example:\n    # echo 'hello' | tr -s 'l'\n    #\n    # The above command\
    \ squeezes all repeating l characters from the string\n    #\n    # You can also\
    \ use the tr command to squeeze repeating characters\n    # Example:\n    # echo\
    \ 'hello' | tr -s 'l'\n    #\n    # The above command squeezes all repeating l\
    \ characters from the string\n    #\n    # You can also use the tr command to\
    \ squeeze repeating characters\n    # Example:\n    # echo 'hello' | tr -s 'l'\n\
    \    #\n    # The above command squeezes all repeating l characters from the string\n\
    \    #\n    # You can also use the tr command to squeeze repeating characters\n\
    \    # Example:\n    # echo 'hello' | tr -s 'l'\n    #\n    # The above command\
    \ squeezes all repeating l characters from the string\n    #\n    # You can also\
    \ use the tr command to squeeze repeating characters\n    # Example:\n    # echo\
    \ 'hello' | tr -s 'l'\n    #\n    # The above command squeezes all repeating l\
    \ characters from the string\n    #\n    # You can also use the tr command to\
    \ squeeze repeating characters\n    # Example:\n    # echo 'hello' | tr -s 'l'\n\
    \    #\n    # The above command squeezes all repeating l characters from the string\n\
    \    #\n    # You can also use the tr command to squeeze repeating characters\n\
    \    # Example:\n    # echo 'hello' | tr -s 'l'\n    #\n    # The above command\
    \ squeezes all repeating l characters from the string\n    #\n    # You can also",
  "    # TODO: Implement this function\n    echo \"Not implemented\"", "    # TODO:\
    \ Implement this function\n    # Hint: You can use the tr command to translate\
    \ characters\n    #       For example, tr 'a-z' 'b-za' will translate a to b,\
    \ b to c, etc.\n    #       You can also use the tr command to translate a string\
    \ to a different\n    #       string. For example, tr 'abc' '123' will translate\
    \ a to 1, b to 2, etc.\n    #       You can also use the tr command to delete\
    \ characters. For example,\n    #       tr -d 'a-z' will delete all lowercase\
    \ letters.\n    #       You can also use the tr command to squeeze characters.\
    \ For example,\n    #       tr -s 'a-z' will squeeze all lowercase letters.\n\
    \    #       You can also use the tr command to complement characters. For example,\n\
    \    #       tr -c 'a-z' 'A-Z' will complement all lowercase letters.\n    # \
    \      You can also use the tr command to translate characters. For example,\n\
    \    #       tr 'a-z' 'A-Z' will translate all lowercase letters to uppercase\
    \ letters.\n    #       You can also use the tr command to translate characters.\
    \ For example,\n    #       tr 'a-z' 'A-Z' will translate all lowercase letters\
    \ to uppercase letters.\n    #       You can also use the tr command to translate\
    \ characters. For example,\n    #       tr 'a-z' 'A-Z' will translate all lowercase\
    \ letters to uppercase letters.\n    #       You can also use the tr command to\
    \ translate characters. For example,\n    #       tr 'a-z' 'A-Z' will translate\
    \ all lowercase letters to uppercase letters.\n    #       You can also use the\
    \ tr command to translate characters. For example,\n    #       tr 'a-z' 'A-Z'\
    \ will translate all lowercase letters to uppercase letters.\n    #       You\
    \ can also use the tr command to translate characters. For example,\n    #   \
    \    tr 'a-z' 'A-Z' will translate all lowercase letters to uppercase letters.\n\
    \    #       You can also use the tr command to translate characters. For example,\n\
    \    #       tr 'a-"]
stop_tokens:
- "\n}"
