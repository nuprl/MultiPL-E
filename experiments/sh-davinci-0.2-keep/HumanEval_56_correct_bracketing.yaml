name: HumanEval_56_correct_bracketing
language: humaneval_to_bash.py
prompt: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True if\
  \ every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
  <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
  <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
  correct_bracketing() {\n"
tests: "}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") =\
  \ \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
  \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
  ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
  \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
  \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
  \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
  ) = \"false\" ]]\n}\n\nrun_test"
completions: ["  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      count=$(( count\
    \ + 1 ))\n    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      count=$(( count\
    \ - 1 ))\n    fi\n    if [[ $count -lt 0 ]]; then\n      return 1\n    fi\n  done\n\
    \  if [[ $count -eq 0 ]]; then\n    return 0\n  else\n    return 1\n  fi", " \
    \   # TODO: implement this function\n    return 0", "    local brackets=$1\n \
    \   local stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local\
    \ bracket=${brackets:$i:1}\n        if [[ $bracket == \"<\" ]]; then\n       \
    \     stack=\"$stack<\"\n        elif [[ $bracket == \">\" ]]; then\n        \
    \    if [[ -z $stack ]]; then\n                return 1\n            fi\n    \
    \        stack=${stack:0:-1}\n        fi\n    done\n    if [[ -z $stack ]]; then\n\
    \        return 0\n    else\n        return 1\n    fi", "  local brackets=\"$1\"\
    \n  local open=0\n  local close=0\n  local i=0\n  while [ $i -lt ${#brackets}\
    \ ]; do\n    if [ \"${brackets:$i:1}\" == \"<\" ]; then\n      open=$((open+1))\n\
    \    elif [ \"${brackets:$i:1}\" == \">\" ]; then\n      close=$((close+1))\n\
    \    fi\n    if [ $close -gt $open ]; then\n      return 1\n    fi\n    i=$((i+1))\n\
    \  done\n  if [ $open -eq $close ]; then\n    return 0\n  else\n    return 1\n\
    \  fi", "    local brackets=\"$1\"\n    local stack=\"\"\n    local open=\"<\"\
    \n    local close=\">\"\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        local char=\"${brackets:$i:1}\"\n        if [[ \"$char\" == \"$open\"\
    \ ]]; then\n            stack=\"$stack$open\"\n        elif [[ \"$char\" == \"\
    $close\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n                return\
    \ 1\n            fi\n            stack=\"${stack%?}\"\n        fi\n    done\n\
    \    if [[ -z \"$stack\" ]]; then\n        return 0\n    fi\n    return 1", " \
    \ local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n\
    \    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n    elif [[\
    \ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n    if [[ $count\
    \ < 0 ]]; then\n      return 1\n    fi\n  done\n  if [[ $count == 0 ]]; then\n\
    \    return 0\n  else\n    return 1\n  fi", "    local brackets=\"$1\"\n    local\
    \ open=0\n    local close=0\n    for (( i=0; i<${#brackets}; i++ )); do\n    \
    \    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            (( open++ ))\n\
    \        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            (( close++\
    \ ))\n        fi\n    done\n    if [[ $open -eq $close ]]; then\n        echo\
    \ \"True\"\n    else\n        echo \"False\"\n    fi", "    local brackets=$1\n\
    \    local count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        local\
    \ char=${brackets:$i:1}\n        if [[ $char == \"<\" ]]; then\n            ((\
    \ count++ ))\n        elif [[ $char == \">\" ]]; then\n            (( count--\
    \ ))\n        fi\n        if [[ $count < 0 ]]; then\n            return 1\n  \
    \      fi\n    done\n    if [[ $count == 0 ]]; then\n        return 0\n    else\n\
    \        return 1\n    fi", "    local brackets=$1\n    local stack=()\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            stack+=(${brackets:$i:1})\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n         \
    \       return 1\n            else\n                stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n            fi\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \        return 0\n    else\n        return 1\n    fi", "    local brackets=$1\n\
    \    local open_brackets=0\n    local close_brackets=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n            open_brackets=$((\
    \ open_brackets + 1 ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n \
    \           close_brackets=$(( close_brackets + 1 ))\n        fi\n    done\n \
    \   if [[ $open_brackets -eq $close_brackets ]]; then\n        echo \"True\"\n\
    \    else\n        echo \"False\"\n    fi", "    local brackets=$1\n    local\
    \ stack=()\n    for (( i=0; i<${#brackets}; i++ )); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == \"<\" ]]; then\n            stack+=($c)\n        elif [[\
    \ $c == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n      \
    \          return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi", "  local brackets=\"$1\"\n  local count=0\n\
    \  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n      (( count++ ))\n    elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \      (( count-- ))\n    fi\n    if [[ $count -lt 0 ]]; then\n      return 1\n\
    \    fi\n  done\n  if [[ $count -eq 0 ]]; then\n    return 0\n  else\n    return\
    \ 1\n  fi", "    local brackets=$1\n    local stack=()\n    local i=0\n    local\
    \ len=${#brackets}\n    while [ $i -lt $len ]; do\n        local c=${brackets:$i:1}\n\
    \        if [ \"$c\" == \"<\" ]; then\n            stack+=($c)\n        elif [\
    \ \"$c\" == \">\" ]; then\n            if [ ${#stack[@]} -eq 0 ]; then\n     \
    \           return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n        i=$((i+1))\n    done\n    if [ ${#stack[@]} -eq 0 ]; then\n\
    \        return 0\n    else\n        return 1\n    fi", "    local brackets=$1\n\
    \    local stack=''\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == '<' ]]; then\n            stack+='<'\n        elif [[ $c\
    \ == '>' ]]; then\n            if [[ -z $stack ]]; then\n                return\
    \ 1\n            fi\n            stack=${stack%?}\n        fi\n    done\n    if\
    \ [[ -z $stack ]]; then\n        return 0\n    else\n        return 1\n    fi",
  "    local brackets=$1\n    local stack=()\n    local bracket\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        bracket=${brackets:$i:1}\n        if [[ $bracket == \"<\"\
    \ ]]; then\n            stack+=($bracket)\n        elif [[ $bracket == \">\" ]];\
    \ then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                return\
    \ 1\n            fi\n            unset stack[${#stack[@]}-1]\n        fi\n   \
    \ done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n  \
    \      return 1\n    fi", "    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if [[ $count -lt\
    \ 0 ]]; then\n            return 1\n        fi\n    done\n    if [[ $count -eq\
    \ 0 ]]; then\n        return 0\n    else\n        return 1\n    fi", "    local\
    \ brackets=\"$1\"\n    local len=${#brackets}\n    local i=0\n    local count=0\n\
    \    while [ $i -lt $len ]; do\n        if [ \"${brackets:$i:1}\" == \"<\" ];\
    \ then\n            count=$((count+1))\n        else\n            count=$((count-1))\n\
    \        fi\n        if [ $count -lt 0 ]; then\n            return 1\n       \
    \ fi\n        i=$((i+1))\n    done\n    if [ $count -eq 0 ]; then\n        return\
    \ 0\n    else\n        return 1\n    fi", "    local brackets=$1\n    local count=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} ==\
    \ \"<\" ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            return 1\n        fi\n    done\n    if\
    \ [[ $count -eq 0 ]]; then\n        return 0\n    else\n        return 1\n   \
    \ fi", "    local brackets=$1\n    local count=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n            ((\
    \ count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n           \
    \ (( count-- ))\n        fi\n        if [[ $count -lt 0 ]]; then\n           \
    \ return 1\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi", "  local brackets=$1\n  local count=0\n\
    \  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n      (( count++ ))\n    elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \      (( count-- ))\n    fi\n    if [[ $count -lt 0 ]]; then\n      return 1\n\
    \    fi\n  done\n  if [[ $count -eq 0 ]]; then\n    return 0\n  else\n    return\
    \ 1\n  fi"]
stop_tokens:
- "\n}"
