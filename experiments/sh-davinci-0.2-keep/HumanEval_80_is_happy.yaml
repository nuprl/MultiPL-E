name: HumanEval_80_is_happy
language: humaneval_to_bash.py
prompt: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
  \ string is happy or not.\n# A string is happy if its length is at least 3 and every\
  \ 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n#\
  \ is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n#\
  \ is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
  \ {\n"
tests: "}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n\
  \    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\"\
  \ ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"\
  false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"\
  iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
completions: ["    if [[ ${#1} -lt 3 ]]; then\n        echo \"False\"\n    else\n\
    \        for ((i=0; i<${#1}-2; i++)); do\n            if [[ ${1:i:1} == ${1:i+1:1}\
    \ ]] || [[ ${1:i:1} == ${1:i+2:1} ]] || [[ ${1:i+1:1} == ${1:i+2:1} ]]; then\n\
    \                echo \"False\"\n                return\n            fi\n    \
    \    done\n        echo \"True\"\n    fi", "    if [ ${#1} -lt 3 ]; then\n   \
    \     echo \"False\"\n    else\n        echo \"True\"\n    fi", "  if [[ ${#1}\
    \ -lt 3 ]]; then\n    echo \"False\"\n  else\n    for (( i=0; i<${#1}-2; i++ ));\
    \ do\n      if [[ \"${1:$i:1}\" == \"${1:$i+1:1}\" ]] || [[ \"${1:$i:1}\" == \"\
    ${1:$i+2:1}\" ]] || [[ \"${1:$i+1:1}\" == \"${1:$i+2:1}\" ]]; then\n        echo\
    \ \"False\"\n        return\n      fi\n    done\n    echo \"True\"\n  fi", " \
    \   if [[ ${#1} -lt 3 ]]; then\n        echo \"False\"\n    else\n        for\
    \ ((i=0; i<${#1}-2; i++)); do\n            if [[ ${1:i:1} == ${1:i+1:1} ]] ||\
    \ [[ ${1:i:1} == ${1:i+2:1} ]] || [[ ${1:i+1:1} == ${1:i+2:1} ]]; then\n     \
    \           echo \"False\"\n                return\n            fi\n        done\n\
    \        echo \"True\"\n    fi", "    # write your code here\n    echo \"Not implemented\"",
  "  if [[ ${#1} -lt 3 ]]; then\n    echo \"False\"\n  else\n    for (( i=0; i<${#1}-2;\
    \ i++ )); do\n      if [[ ${1:$i:1} == ${1:$i+1:1} ]] || [[ ${1:$i:1} == ${1:$i+2:1}\
    \ ]] || [[ ${1:$i+1:1} == ${1:$i+2:1} ]]; then\n        echo \"False\"\n     \
    \   return\n      fi\n    done\n    echo \"True\"\n  fi", "    if [[ ${#1} -lt\
    \ 3 ]]; then\n        echo \"False\"\n    else\n        for (( i=0; i<${#1}-2;\
    \ i++ )); do\n            if [[ ${1:$i:1} == ${1:$i+1:1} ]] || [[ ${1:$i:1} ==\
    \ ${1:$i+2:1} ]] || [[ ${1:$i+1:1} == ${1:$i+2:1} ]]; then\n                echo\
    \ \"False\"\n                return\n            fi\n        done\n        echo\
    \ \"True\"\n    fi", "  if [ ${#1} -lt 3 ]; then\n    echo \"False\"\n  else\n\
    \    for (( i=0; i<${#1}-2; i++ )); do\n      if [ \"${1:$i:1}\" == \"${1:$i+1:1}\"\
    \ ] || [ \"${1:$i:1}\" == \"${1:$i+2:1}\" ] || [ \"${1:$i+1:1}\" == \"${1:$i+2:1}\"\
    \ ]; then\n        echo \"False\"\n        return\n      fi\n    done\n    echo\
    \ \"True\"\n  fi", "    if [[ ${#1} -lt 3 ]]; then\n        echo \"False\"\n \
    \   else\n        for (( i=0; i<${#1}-2; i++ )); do\n            if [[ ${1:$i:1}\
    \ == ${1:$i+1:1} ]] || [[ ${1:$i:1} == ${1:$i+2:1} ]] || [[ ${1:$i+1:1} == ${1:$i+2:1}\
    \ ]]; then\n                echo \"False\"\n                return\n         \
    \   fi\n        done\n        echo \"True\"\n    fi", "  if [ ${#1} -lt 3 ]; then\n\
    \    echo \"False\"\n  else\n    for ((i=0; i<${#1}-2; i++)); do\n      if [ \"\
    ${1:$i:1}\" == \"${1:$i+1:1}\" ] || [ \"${1:$i:1}\" == \"${1:$i+2:1}\" ] || [\
    \ \"${1:$i+1:1}\" == \"${1:$i+2:1}\" ]; then\n        echo \"False\"\n       \
    \ return\n      fi\n    done\n    echo \"True\"\n  fi", "  if [ ${#1} -lt 3 ];\
    \ then\n    echo \"False\"\n  else\n    for (( i=0; i<${#1}-2; i++ )); do\n  \
    \    if [ \"${1:$i:1}\" == \"${1:$i+1:1}\" ] || [ \"${1:$i:1}\" == \"${1:$i+2:1}\"\
    \ ] || [ \"${1:$i+1:1}\" == \"${1:$i+2:1}\" ]; then\n        echo \"False\"\n\
    \        return\n      fi\n    done\n    echo \"True\"\n  fi", "  local str=$1\n\
    \  local len=${#str}\n  if [ $len -lt 3 ]; then\n    echo False\n    return\n\
    \  fi\n  for ((i=0; i<len-2; i++)); do\n    if [ ${str:$i:1} == ${str:$((i+1)):1}\
    \ ] || [ ${str:$i:1} == ${str:$((i+2)):1} ] || [ ${str:$((i+1)):1} == ${str:$((i+2)):1}\
    \ ]; then\n      echo False\n      return\n    fi\n  done\n  echo True", "   \
    \ local str=$1\n    local len=${#str}\n    local i=0\n    local j=0\n    local\
    \ k=0\n    local is_happy=1\n    if [ $len -lt 3 ]; then\n        is_happy=0\n\
    \    else\n        for ((i=0; i<len-2; i++)); do\n            j=$((i+1))\n   \
    \         k=$((i+2))\n            if [ \"${str:$i:1}\" == \"${str:$j:1}\" ] ||\
    \ [ \"${str:$i:1}\" == \"${str:$k:1}\" ] || [ \"${str:$j:1}\" == \"${str:$k:1}\"\
    \ ]; then\n                is_happy=0\n                break\n            fi\n\
    \        done\n    fi\n    echo $is_happy", "  local str=$1\n  local len=${#str}\n\
    \  local i=0\n  local j=0\n  local k=0\n  local sub=''\n  local sub1=''\n  local\
    \ sub2=''\n  local sub3=''\n  if [[ $len -lt 3 ]]; then\n    echo False\n    return\n\
    \  fi\n  while [[ $i -lt $len ]]; do\n    j=$((i+1))\n    k=$((i+2))\n    if [[\
    \ $j -lt $len ]] && [[ $k -lt $len ]]; then\n      sub1=${str:$i:1}\n      sub2=${str:$j:1}\n\
    \      sub3=${str:$k:1}\n      sub=\"$sub1$sub2$sub3\"\n      if [[ $sub == $sub1$sub1$sub1\
    \ ]]; then\n        echo False\n        return\n      fi\n    fi\n    i=$((i+1))\n\
    \  done\n  echo True", "    if [[ ${#1} -lt 3 ]]; then\n        echo \"False\"\
    \n    else\n        for (( i=0; i<${#1}-2; i++ )); do\n            if [[ ${1:$i:1}\
    \ == ${1:$i+1:1} ]] || [[ ${1:$i:1} == ${1:$i+2:1} ]] || [[ ${1:$i+1:1} == ${1:$i+2:1}\
    \ ]]; then\n                echo \"False\"\n                return\n         \
    \   fi\n        done\n        echo \"True\"\n    fi", "    if [ ${#1} -lt 3 ];\
    \ then\n        echo False\n    else\n        for (( i=0; i<${#1}-2; i++ )); do\n\
    \            if [ \"${1:$i:1}\" == \"${1:$i+1:1}\" ] || [ \"${1:$i:1}\" == \"\
    ${1:$i+2:1}\" ] || [ \"${1:$i+1:1}\" == \"${1:$i+2:1}\" ]; then\n            \
    \    echo False\n                return\n            fi\n        done\n      \
    \  echo True\n    fi", "  if [ ${#1} -lt 3 ]; then\n    echo \"False\"\n  else\n\
    \    for (( i=0; i<${#1}-2; i++ )); do\n      if [ \"${1:$i:1}\" == \"${1:$i+1:1}\"\
    \ ] || [ \"${1:$i:1}\" == \"${1:$i+2:1}\" ] || [ \"${1:$i+1:1}\" == \"${1:$i+2:1}\"\
    \ ]; then\n        echo \"False\"\n        return\n      fi\n    done\n    echo\
    \ \"True\"\n  fi", "  if [ ${#1} -lt 3 ]; then\n    echo \"False\"\n  else\n \
    \   for (( i=0; i<${#1}-2; i++ )); do\n      if [ ${1:$i:1} == ${1:$i+1:1} ] ||\
    \ [ ${1:$i:1} == ${1:$i+2:1} ] || [ ${1:$i+1:1} == ${1:$i+2:1} ]; then\n     \
    \   echo \"False\"\n        return\n      fi\n    done\n    echo \"True\"\n  fi",
  "    if [ ${#1} -lt 3 ]; then\n        echo \"False\"\n    else\n        for ((\
    \ i=0; i<${#1}-2; i++ )); do\n            if [ \"${1:$i:1}\" == \"${1:$i+1:1}\"\
    \ ] || [ \"${1:$i:1}\" == \"${1:$i+2:1}\" ] || [ \"${1:$i+1:1}\" == \"${1:$i+2:1}\"\
    \ ]; then\n                echo \"False\"\n                return\n          \
    \  fi\n        done\n        echo \"True\"\n    fi", "    if [ ${#1} -lt 3 ];\
    \ then\n        echo \"False\"\n    else\n        for (( i=0; i<${#1}-2; i++ ));\
    \ do\n            if [ \"${1:$i:1}\" == \"${1:$i+1:1}\" ] || [ \"${1:$i:1}\" ==\
    \ \"${1:$i+2:1}\" ] || [ \"${1:$i+1:1}\" == \"${1:$i+2:1}\" ]; then\n        \
    \        echo \"False\"\n                return\n            fi\n        done\n\
    \        echo \"True\"\n    fi"]
stop_tokens:
- "\n}"
