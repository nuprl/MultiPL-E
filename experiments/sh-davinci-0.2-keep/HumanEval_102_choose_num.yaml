completions:
- "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for i in $(seq\
  \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
  \ $i\n                break\n            fi\n        done\n    fi"
- "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for i in $(seq\
  \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
  \ $i\n                break\n            fi\n        done\n    fi"
- "  if [[ $1 -gt $2 ]]; then\n    echo -1\n  else\n    for (( i=$1; i<=$2; i++ ));\
  \ do\n      if [[ $((i%2)) -eq 0 ]]; then\n        echo $i\n        break\n    \
  \  fi\n    done\n  fi"
- "    # TODO: Write your code here\n    # Please use choose_num to name your function\n\
  \    # Please use $1 and $2 to represent the parameters of this function\n    #\
  \ Please use echo to print the result in the function\n    # Please use return to\
  \ return the result of this function\n    for ((i=$1; i<=$2; i++))\n    do\n   \
  \     if [ $((i%2)) -eq 0 ]\n        then\n            echo $i\n            return\n\
  \        fi\n    done\n    echo -1\n    return"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $(($i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $1 -eq $2 ]; then\n   \
  \     if [ $1 -eq 0 ]; then\n            echo 0\n        elif [ $1 -eq 1 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 2 ]; then\n            echo 2\n    \
  \    elif [ $1 -eq 3 ]; then\n            echo -1\n        elif [ $1 -eq 4 ]; then\n\
  \            echo 4\n        elif [ $1 -eq 5 ]; then\n            echo -1\n    \
  \    elif [ $1 -eq 6 ]; then\n            echo 6\n        elif [ $1 -eq 7 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 8 ]; then\n            echo 8\n    \
  \    elif [ $1 -eq 9 ]; then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n\
  \            echo 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n  \
  \      elif [ $1 -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 14 ]; then\n            echo\
  \ 14\n        elif [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 16 ]; then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif\
  \ [ $1 -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n \
  \           echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n   \
  \     elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq 23 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n            echo\
  \ 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 28 ]; then\n            echo 28\n        elif\
  \ ["
- "  # TODO: Implement this function\n  # Hint: You can use the modulo operator to\
  \ check if a number is even\n  # or odd.\n  #\n  # For example:\n  # $ echo $((5\
  \ % 2))\n  # 1\n  # $ echo $((6 % 2))\n  # 0\n  #\n  # The first command above shows\
  \ that 5 is odd, and the second command\n  # shows that 6 is even.\n  #\n  # You\
  \ can also use the if-then-else statement to check if a number is\n  # even or odd.\n\
  \  #\n  # For example:\n  # $ if [ $((5 % 2)) -eq 0 ]; then echo \"even\"; else\
  \ echo \"odd\"; fi\n  # odd\n  # $ if [ $((6 % 2)) -eq 0 ]; then echo \"even\";\
  \ else echo \"odd\"; fi\n  # even\n  #\n  # The first command above shows that 5\
  \ is odd, and the second command\n  # shows that 6 is even.\n  #\n  # You can also\
  \ use the if-then-else statement to check if a number is\n  # even or odd.\n  #\n\
  \  # For example:\n  # $ if [ $((5 % 2)) -eq 0 ]; then echo \"even\"; else echo\
  \ \"odd\"; fi\n  # odd\n  # $ if [ $((6 % 2)) -eq 0 ]; then echo \"even\"; else\
  \ echo \"odd\"; fi\n  # even\n  #\n  # The first command above shows that 5 is odd,\
  \ and the second command\n  # shows that 6 is even.\n  #\n  # You can also use the\
  \ if-then-else statement to check if a number is\n  # even or odd.\n  #\n  # For\
  \ example:\n  # $ if [ $((5 % 2)) -eq 0 ]; then echo \"even\"; else echo \"odd\"\
  ; fi\n  # odd\n  # $ if [ $((6 % 2)) -eq 0 ]; then echo \"even\"; else echo \"odd\"\
  ; fi\n  # even\n  #\n  # The first command above shows that 5 is odd, and the second\
  \ command\n  # shows that 6 is even.\n  #\n  # You can also use the if-then-else\
  \ statement to check"
- "    # TODO: Write your code here\n    # Hint: You can use the modulo operator to\
  \ check if a number is even.\n    # For example:\n    # if [ $(($1 % 2)) -eq 0 ];\
  \ then\n    #   echo \"$1 is even\"\n    # else\n    #   echo \"$1 is odd\"\n  \
  \  # fi\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for (( i=$1;\
  \ i<=$2; i++ )); do\n            if [ $(($i % 2)) -eq 0 ]; then\n              \
  \  echo $i\n                break\n            fi\n        done\n    fi"
- "    # TODO: write your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n\
  \    else\n        for ((i=$1; i<=$2; i++)); do\n            if [ $((i%2)) -eq 0\
  \ ]; then\n                echo $i\n                break\n            fi\n    \
  \    done\n    fi"
- "    # Write your code here\n    # To print results to the standard output you can\
  \ use echo\n    # To debug your program, you can insert echos like this\n    # echo\
  \ \"Debug messages...\" >&2\n    echo \"x: $1\" >&2\n    echo \"y: $2\" >&2\n  \
  \  if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n        for ((i=$1; i<=$2;\
  \ i++)); do\n            if [ $((i%2)) -eq 0 ]; then\n                echo \"$i\"\
  \n                break\n            fi\n        done\n    fi"
- "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for i in $(seq\
  \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
  \ $i\n                break\n            fi\n        done\n    fi"
- "  if [ $1 -gt $2 ]; then\n    echo -1\n  else\n    for i in $(seq $1 $2); do\n\
  \      if [ $((i % 2)) -eq 0 ]; then\n        echo $i\n        break\n      fi\n\
  \    done\n  fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $1 -eq $2 ]; then\n   \
  \     if [ $1 -eq 0 ]; then\n            echo 0\n        elif [ $1 -eq 1 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 2 ]; then\n            echo 2\n    \
  \    elif [ $1 -eq 3 ]; then\n            echo -1\n        elif [ $1 -eq 4 ]; then\n\
  \            echo 4\n        elif [ $1 -eq 5 ]; then\n            echo -1\n    \
  \    elif [ $1 -eq 6 ]; then\n            echo 6\n        elif [ $1 -eq 7 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 8 ]; then\n            echo 8\n    \
  \    elif [ $1 -eq 9 ]; then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n\
  \            echo 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n  \
  \      elif [ $1 -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 14 ]; then\n            echo\
  \ 14\n        elif [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 16 ]; then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif\
  \ [ $1 -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n \
  \           echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n   \
  \     elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq 23 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n            echo\
  \ 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 28 ]; then\n            echo 28\n        elif\
  \ ["
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $(($i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # TODO: Implement this function\n    # Hint: You can use the modulo operator\
  \ to check if a number is even.\n    # For example:\n    # $(( 10 % 2 )) = 0\n \
  \   # $(( 11 % 2 )) = 1\n    #\n    # You can use the ternary operator to return\
  \ a value based on a\n    # condition. For example:\n    # $(( 10 > 5 ? 10 : 5 ))\
  \ = 10\n    # $(( 10 > 15 ? 10 : 15 )) = 15\n    #\n    # You can use the ternary\
  \ operator inside an if statement. For example:\n    # if (( 10 > 5 ? 10 : 5 ))\n\
  \    # then\n    #     echo \"10 is greater than 5\"\n    # else\n    #     echo\
  \ \"10 is not greater than 5\"\n    # fi\n    #\n    # You can use the ternary operator\
  \ inside a for loop. For example:\n    # for i in $(seq 1 $(( 10 > 5 ? 10 : 5 )));\
  \ do\n    #     echo $i\n    # done\n    #\n    # You can use the ternary operator\
  \ inside a while loop. For example:\n    # i=1\n    # while (( i <= (10 > 5 ? 10\
  \ : 5) )); do\n    #     echo $i\n    #     (( i++ ))\n    # done\n    #\n    #\
  \ You can use the ternary operator inside an arithmetic expression. For\n    # example:\n\
  \    # $(( (10 > 5 ? 10 : 5) + 1 )) = 11\n    # $(( (10 > 15 ? 10 : 15) + 1 )) =\
  \ 16\n    #\n    # You can use the ternary operator inside a variable assignment.\
  \ For\n    # example:\n    # x=$(( 10 > 5 ? 10 : 5 ))\n    # echo $x\n    #\n  \
  \  # You can use the ternary operator inside a function. For example:\n    # foo()\
  \ {\n    #     echo $(( 10 > 5 ? 10 : 5 ))\n    # }\n    # foo\n    #\n    # You\
  \ can use the ternary operator inside a command substitution. For\n    # example:\n\
  \    # echo $(($(echo $(( 10 > 5 ? 10 : 5 ))) + 1))"
- "    # TODO: Your code here\n    # Hint: You can use the modulo operator.\n    #\
  \ Hint: You can use the expr command.\n    # Hint: You can use the if-then-else\
  \ statement.\n    # Hint: You can use the for loop.\n    # Hint: You can use the\
  \ seq command.\n    # Hint: You can use the break statement.\n    # Hint: You can\
  \ use the continue statement.\n    # Hint: You can use the echo command.\n    #\
  \ Hint: You can use the return statement.\n    # Hint: You can use the test command.\n\
  \    # Hint: You can use the -eq, -ne, -lt, -le, -gt, -ge operators.\n    # Hint:\
  \ You can use the -a, -o operators.\n    # Hint: You can use the &&, || operators.\n\
  \    # Hint: You can use the $#, $@, $1, $2, $3, ... variables.\n    # Hint: You\
  \ can use the $((...)) construct.\n    # Hint: You can use the $[...] construct.\n\
  \    # Hint: You can use the $((...)) construct.\n    # Hint: You can use the $[...]\
  \ construct.\n    # Hint: You can use the $((...)) construct.\n    # Hint: You can\
  \ use the $[...] construct.\n    # Hint: You can use the $((...)) construct.\n \
  \   # Hint: You can use the $[...] construct.\n    # Hint: You can use the $((...))\
  \ construct.\n    # Hint: You can use the $[...] construct.\n    # Hint: You can\
  \ use the $((...)) construct.\n    # Hint: You can use the $[...] construct.\n \
  \   # Hint: You can use the $((...)) construct.\n    # Hint: You can use the $[...]\
  \ construct.\n    # Hint: You can use the $((...)) construct.\n    # Hint: You can\
  \ use the $[...] construct.\n    # Hint: You can use the $((...)) construct.\n \
  \   # Hint: You can use the $[...] construct."
- "    # Write your code here\n    # You can use the following functions:\n    # -\
  \ is_even(x) returns true if x is even, false otherwise\n    # - is_positive(x)\
  \ returns true if x is positive, false otherwise\n    # - is_integer(x) returns\
  \ true if x is an integer, false otherwise\n    # - is_in_range(x, y, z) returns\
  \ true if x is in the range [y, z], false otherwise\n    # - max(x, y) returns the\
  \ maximum of x and y\n    # - min(x, y) returns the minimum of x and y\n    # -\
  \ abs(x) returns the absolute value of x\n    # - floor(x) returns the floor of\
  \ x\n    # - ceil(x) returns the ceiling of x\n    # - round(x) returns the rounded\
  \ value of x\n    # - log(x) returns the natural logarithm of x\n    # - log10(x)\
  \ returns the base-10 logarithm of x\n    # - sqrt(x) returns the square root of\
  \ x\n    # - pow(x, y) returns x to the power of y\n    # - sin(x) returns the sine\
  \ of x\n    # - cos(x) returns the cosine of x\n    # - tan(x) returns the tangent\
  \ of x\n    # - asin(x) returns the arcsine of x\n    # - acos(x) returns the arccosine\
  \ of x\n    # - atan(x) returns the arctangent of x\n    # - sinh(x) returns the\
  \ hyperbolic sine of x\n    # - cosh(x) returns the hyperbolic cosine of x\n   \
  \ # - tanh(x) returns the hyperbolic tangent of x\n    # - asinh(x) returns the\
  \ hyperbolic arcsine of x\n    # - acosh(x) returns the hyperbolic arccosine of\
  \ x\n    # - atanh(x) returns the hyperbolic arctangent of x\n    # - deg2rad(x)\
  \ converts x from degrees to radians\n    # - rad2deg(x) converts x from radians\
  \ to degrees\n    # - random() returns a random"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    if [ $1 -le $2 ]; then\n        for ((i=$1; i<=$2; i++)); do\n            if\
  \ [ $((i%2)) -eq 0 ]; then\n                echo $i\n                break\n   \
  \         fi\n        done\n    else\n        echo -1\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for (( i=$1; i<=$2;\
  \ i++ )); do\n            if [ $((i%2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # TODO: Write your code here\n    # Please use choose_num to name your function\n\
  \    # Please use $1 and $2 to represent the parameters\n    if [ $1 -gt $2 ]; then\n\
  \        echo -1\n    else\n        for ((i=$1; i<=$2; i++)); do\n            if\
  \ [ $((i%2)) -eq 0 ]; then\n                echo $i\n                break\n   \
  \         fi\n        done\n    fi"
- "    # TODO: Write your code here\n    # Please use the following syntax to print\
  \ the result\n    # echo $result\n    if [ $1 -gt $2 ]; then\n        echo -1\n\
  \    else\n        for ((i=$1; i<=$2; i++)); do\n            if [ $((i%2)) -eq 0\
  \ ]; then\n                echo $i\n                break\n            fi\n    \
  \    done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $1 -eq $2 ]; then\n   \
  \     if [ $1 -eq 0 ]; then\n            echo 0\n        elif [ $1 -eq 1 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 2 ]; then\n            echo 2\n    \
  \    elif [ $1 -eq 3 ]; then\n            echo -1\n        elif [ $1 -eq 4 ]; then\n\
  \            echo 4\n        elif [ $1 -eq 5 ]; then\n            echo -1\n    \
  \    elif [ $1 -eq 6 ]; then\n            echo 6\n        elif [ $1 -eq 7 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 8 ]; then\n            echo 8\n    \
  \    elif [ $1 -eq 9 ]; then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n\
  \            echo 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n  \
  \      elif [ $1 -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 14 ]; then\n            echo\
  \ 14\n        elif [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 16 ]; then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif\
  \ [ $1 -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n \
  \           echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n   \
  \     elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq 23 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n            echo\
  \ 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 28 ]; then\n            echo 28\n        elif\
  \ ["
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $1 -eq $2 ]; then\n   \
  \     if [ $1 -eq 0 ]; then\n            echo 0\n        elif [ $1 -eq 1 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 2 ]; then\n            echo 2\n    \
  \    elif [ $1 -eq 3 ]; then\n            echo -1\n        elif [ $1 -eq 4 ]; then\n\
  \            echo 4\n        elif [ $1 -eq 5 ]; then\n            echo -1\n    \
  \    elif [ $1 -eq 6 ]; then\n            echo 6\n        elif [ $1 -eq 7 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 8 ]; then\n            echo 8\n    \
  \    elif [ $1 -eq 9 ]; then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n\
  \            echo 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n  \
  \      elif [ $1 -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 14 ]; then\n            echo\
  \ 14\n        elif [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 16 ]; then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif\
  \ [ $1 -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n \
  \           echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n   \
  \     elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq 23 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n            echo\
  \ 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 28 ]; then\n            echo 28\n        elif\
  \ ["
- "    if [ $1 -lt $2 ]; then\n        for i in $(seq $1 $2); do\n            if [\
  \ $((i % 2)) -eq 0 ]; then\n                echo $i\n                return\n  \
  \          fi\n        done\n    fi\n    echo -1"
- "    # Write your code here\n    # To print results to the standard output you can\
  \ use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\""
- "    # Your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n \
  \       for (( i=$1; i<=$2; i++ )); do\n            if [ $((i%2)) -eq 0 ]; then\n\
  \                echo $i\n                break\n            fi\n        done\n\
  \    fi"
- "    # TODO: write your code here\n    # \n    # Hint: use the modulo operator %\
  \ to find out whether a number is even.\n    # For example:\n    # x=10\n    # if\
  \ [ $((x % 2)) -eq 0 ]; then\n    #     echo \"$x is even\"\n    # else\n    # \
  \    echo \"$x is odd\"\n    # fi\n    #\n    # Hint: use the following loop to\
  \ iterate over the range [x, y] inclusive:\n    # for i in $(seq $1 $2); do\n  \
  \  #     echo $i\n    # done\n    #\n    # Hint: use the following command to return\
  \ a value from the function:\n    # return <value>\n    #\n    # Hint: use the following\
  \ command to exit the script if a condition is\n    # met:\n    # exit <value>\n\
  \    #\n    # Hint: use the following command to print a message to stderr:\n  \
  \  # echo <message> >&2\n    #\n    # Hint: use the following command to print the\
  \ usage message:\n    # usage\n    #\n    # Hint: use the following command to print\
  \ the script name:\n    # echo $0\n    #\n    # Hint: use the following command\
  \ to print the number of arguments:\n    # echo $#\n    #\n    # Hint: use the following\
  \ command to print the arguments:\n    # echo $@\n    #\n    # Hint: use the following\
  \ command to print the first argument:\n    # echo $1\n    #\n    # Hint: use the\
  \ following command to print the second argument:\n    # echo $2\n    #\n    # Hint:\
  \ use the following command to print the third argument:\n    # echo $3\n    #\n\
  \    # Hint: use the following command to print the fourth argument:\n    # echo\
  \ $4\n    #\n    # Hint: use the following command to print the fifth argument:\n\
  \    # echo $5\n    #\n    # Hint: use the following command to print the sixth\
  \ argument:\n    # echo $6\n    #\n    # Hint: use the following command to print\
  \ the seventh argument:\n    # echo $7\n    #\n"
- "  # Write your code here\n  if [ $1 -gt $2 ]; then\n    echo -1\n  else\n    for\
  \ i in $(seq $1 $2); do\n      if [ $(($i % 2)) -eq 0 ]; then\n        echo $i\n\
  \        break\n      fi\n    done\n  fi"
- "    # TODO: Write your code here\n    # Please use choose_num to refer to the function\
  \ name\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for (( i=$1;\
  \ i<=$2; i++ )); do\n            if [ $(( i % 2 )) -eq 0 ]; then\n             \
  \   echo $i\n                break\n            fi\n        done\n    fi"
- "    # TODO: Implement this function\n    # Hint: You can use the modulo operator\
  \ to check if a number is even.\n    # For example:\n    # if [ $(($1 % 2)) -eq\
  \ 0 ]; then\n    #     echo \"$1 is even\"\n    # else\n    #     echo \"$1 is odd\"\
  \n    # fi\n    #\n    # You can also use the ternary operator to simplify your\
  \ code.\n    # For example:\n    # echo $(( $1 > $2 ? $1 : $2 ))\n    #\n    # You\
  \ can also use the ternary operator to simplify your code.\n    # For example:\n\
  \    # echo $(( $1 > $2 ? $1 : $2 ))\n    #\n    # You can also use the ternary\
  \ operator to simplify your code.\n    # For example:\n    # echo $(( $1 > $2 ?\
  \ $1 : $2 ))\n    #\n    # You can also use the ternary operator to simplify your\
  \ code.\n    # For example:\n    # echo $(( $1 > $2 ? $1 : $2 ))\n    #\n    # You\
  \ can also use the ternary operator to simplify your code.\n    # For example:\n\
  \    # echo $(( $1 > $2 ? $1 : $2 ))\n    #\n    # You can also use the ternary\
  \ operator to simplify your code.\n    # For example:\n    # echo $(( $1 > $2 ?\
  \ $1 : $2 ))\n    #\n    # You can also use the ternary operator to simplify your\
  \ code.\n    # For example:\n    # echo $(( $1 > $2 ? $1 : $2 ))\n    #\n    # You\
  \ can also use the ternary operator to simplify your code.\n    # For example:\n\
  \    # echo $(( $1 > $2 ? $1 : $2 ))\n    #\n    # You can also use the ternary\
  \ operator to simplify your code.\n    # For example:\n    # echo $(( $1 > $2 ?\
  \ $1 : $2 ))\n    #\n    # You can also use the ternary operator to simplify your\
  \ code.\n    # For example:\n    # echo $(( $1 > $"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $(($i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for (( i=$1; i<=$2;\
  \ i++ )); do\n            if [ $((i%2)) -eq 0 ]; then\n                echo $i\n\
  \                return\n            fi\n        done\n        echo -1\n    fi"
- "    local x=$1\n    local y=$2\n    local max=-1\n    local i\n    for ((i=x; i<=y;\
  \ i++)); do\n        if ((i % 2 == 0)); then\n            if ((i > max)); then\n\
  \                max=$i\n            fi\n        fi\n    done\n    echo $max"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for ((i=$1; i<=$2;\
  \ i++)); do\n            if [ $((i%2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # TODO: Implement this function\n    # Hint: You can use the modulo operator\
  \ % to check if a number is even\n    # or odd.\n    #\n    # Hint: You can use\
  \ the bc utility to do floating point arithmetic.\n    # For example, to add two\
  \ floating point numbers, you can do:\n    # echo \"1.5 + 2.5\" | bc\n    #\n  \
  \  # Hint: You can use the seq utility to generate a sequence of numbers.\n    #\
  \ For example, to generate the sequence of numbers from 1 to 10, you\n    # can\
  \ do:\n    # seq 1 10\n    #\n    # Hint: You can use the sort utility to sort a\
  \ list of numbers.\n    # For example, to sort a list of numbers in ascending order,\
  \ you can\n    # do:\n    # sort -n\n    #\n    # Hint: You can use the tac utility\
  \ to reverse a list of numbers.\n    # For example, to reverse a list of numbers,\
  \ you can do:\n    # tac\n    #\n    # Hint: You can use the head utility to get\
  \ the first line of a list\n    # of numbers.\n    # For example, to get the first\
  \ line of a list of numbers, you can do:\n    # head -n 1\n    #\n    # Hint: You\
  \ can use the tail utility to get all but the first line of\n    # a list of numbers.\n\
  \    # For example, to get all but the first line of a list of numbers, you\n  \
  \  # can do:\n    # tail -n +2\n    #\n    # Hint: You can use the tr utility to\
  \ replace all occurrences of a\n    # character with another character.\n    # For\
  \ example, to replace all occurrences of 'a' with 'b', you can do:\n    # tr 'a'\
  \ 'b'\n    #\n    # Hint: You can use the wc utility to count the number of lines\
  \ in a\n    # list of numbers.\n    # For example, to count the number of lines\
  \ in a list of numbers, you\n    # can do:\n    # wc -l\n    #\n    # Hint: You\
  \ can use the test utility to check if a number is equal to\n    # another number.\n\
  \   "
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $(($i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "  if [ $1 -gt $2 ]; then\n    echo -1\n  else\n    for i in $(seq $1 $2); do\n\
  \      if [ $((i % 2)) -eq 0 ]; then\n        echo $i\n        return\n      fi\n\
  \    done\n    echo -1\n  fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $(($i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "  # Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # Write your code here\n    # To print results to the standard output you can\
  \ use echo\n    # To debug your program, you can insert echos like this\n    # echo\
  \ \"Debug messages...\" >&2\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n\
  \        for i in $(seq $1 $2); do\n            if [ $((i%2)) -eq 0 ]; then\n  \
  \              echo $i\n                break\n            fi\n        done\n  \
  \  fi"
- "    if [[ $1 -le $2 ]]; then\n        for ((i=$1; i<=$2; i++)); do\n          \
  \  if [[ $((i%2)) -eq 0 ]]; then\n                echo $i\n                return\n\
  \            fi\n        done\n    else\n        for ((i=$2; i<=$1; i++)); do\n\
  \            if [[ $((i%2)) -eq 0 ]]; then\n                echo $i\n          \
  \      return\n            fi\n        done\n    fi\n    echo -1"
- "    # TODO: write your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n\
  \    else\n        for ((i=$1; i<=$2; i++)); do\n            if [ $((i%2)) -eq 0\
  \ ]; then\n                echo $i\n                break\n            fi\n    \
  \    done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $1 -eq $2 ]; then\n   \
  \     if [ $1 -eq 0 ]; then\n            echo 0\n        elif [ $1 -eq 1 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 2 ]; then\n            echo 2\n    \
  \    elif [ $1 -eq 3 ]; then\n            echo -1\n        elif [ $1 -eq 4 ]; then\n\
  \            echo 4\n        elif [ $1 -eq 5 ]; then\n            echo -1\n    \
  \    elif [ $1 -eq 6 ]; then\n            echo 6\n        elif [ $1 -eq 7 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 8 ]; then\n            echo 8\n    \
  \    elif [ $1 -eq 9 ]; then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n\
  \            echo 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n  \
  \      elif [ $1 -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 14 ]; then\n            echo\
  \ 14\n        elif [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 16 ]; then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif\
  \ [ $1 -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n \
  \           echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n   \
  \     elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq 23 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n            echo\
  \ 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 28 ]; then\n            echo 28\n        elif\
  \ ["
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # Write your code here\n    # To print results to the standard output you can\
  \ use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\""
- "    # TODO: Implement this function\n    # Hint: You can use the modulo operator\
  \ % to check if a number is even\n    # or odd.\n    if [ $1 -gt $2 ]; then\n  \
  \      echo -1\n    else\n        for (( i=$1; i<=$2; i++ )); do\n            if\
  \ [ $((i%2)) -eq 0 ]; then\n                echo $i\n                break\n   \
  \         fi\n        done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $1 -eq $2 ]; then\n   \
  \     if [ $1 -eq 0 ]; then\n            echo -1\n        elif [ $1 -eq 1 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 2 ]; then\n            echo 2\n    \
  \    elif [ $1 -eq 3 ]; then\n            echo -1\n        elif [ $1 -eq 4 ]; then\n\
  \            echo 4\n        elif [ $1 -eq 5 ]; then\n            echo -1\n    \
  \    elif [ $1 -eq 6 ]; then\n            echo 6\n        elif [ $1 -eq 7 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 8 ]; then\n            echo 8\n    \
  \    elif [ $1 -eq 9 ]; then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n\
  \            echo 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n  \
  \      elif [ $1 -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 14 ]; then\n            echo\
  \ 14\n        elif [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 16 ]; then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif\
  \ [ $1 -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n \
  \           echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n   \
  \     elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq 23 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n            echo\
  \ 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 28 ]; then\n            echo 28\n        elif"
- "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for i in $(seq\
  \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
  \ $i\n                break\n            fi\n        done\n    fi"
- "  if [ $1 -gt $2 ]; then\n    echo -1\n  elif [ $1 -eq $2 ]; then\n    if [ $1\
  \ -eq 0 ]; then\n      echo 0\n    elif [ $1 -eq 1 ]; then\n      echo -1\n    elif\
  \ [ $1 -eq 2 ]; then\n      echo 2\n    elif [ $1 -eq 3 ]; then\n      echo -1\n\
  \    elif [ $1 -eq 4 ]; then\n      echo 4\n    elif [ $1 -eq 5 ]; then\n      echo\
  \ -1\n    elif [ $1 -eq 6 ]; then\n      echo 6\n    elif [ $1 -eq 7 ]; then\n \
  \     echo -1\n    elif [ $1 -eq 8 ]; then\n      echo 8\n    elif [ $1 -eq 9 ];\
  \ then\n      echo -1\n    elif [ $1 -eq 10 ]; then\n      echo 10\n    elif [ $1\
  \ -eq 11 ]; then\n      echo -1\n    elif [ $1 -eq 12 ]; then\n      echo 12\n \
  \   elif [ $1 -eq 13 ]; then\n      echo -1\n    elif [ $1 -eq 14 ]; then\n    \
  \  echo 14\n    elif [ $1 -eq 15 ]; then\n      echo -1\n    elif [ $1 -eq 16 ];\
  \ then\n      echo 16\n    elif [ $1 -eq 17 ]; then\n      echo -1\n    elif [ $1\
  \ -eq 18 ]; then\n      echo 18\n    elif [ $1 -eq 19 ]; then\n      echo -1\n \
  \   elif [ $1 -eq 20 ]; then\n      echo 20\n    elif [ $1 -eq 21 ]; then\n    \
  \  echo -1\n    elif [ $1 -eq 22 ]; then\n      echo 22\n    elif [ $1 -eq 23 ];\
  \ then\n      echo -1\n    elif [ $1 -eq 24 ]; then\n      echo 24\n    elif [ $1\
  \ -eq 25 ]; then\n      echo -1\n    elif [ $1 -eq 26 ]; then\n      echo 26\n \
  \   elif [ $1 -eq 27 ]; then\n      echo -1\n    elif [ $1 -eq 28 ]; then\n    \
  \  echo 28\n    elif ["
- "  if [[ $1 -gt $2 ]]; then\n    echo -1\n  elif [[ $1 -eq $2 ]]; then\n    if [[\
  \ $1%2 -eq 0 ]]; then\n      echo $1\n    else\n      echo -1\n    fi\n  else\n\
  \    for (( i=$2; i>=$1; i-- )); do\n      if [[ $i%2 -eq 0 ]]; then\n        echo\
  \ $i\n        break\n      fi\n    done\n  fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $(( $i % 2 )) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "  # Write your code here\n  if [ $1 -gt $2 ]; then\n    echo -1\n  else\n    for\
  \ (( i=$1; i<=$2; i++ )); do\n      if [ $((i%2)) -eq 0 ]; then\n        echo $i\n\
  \        break\n      fi\n    done\n  fi"
- "  # TODO: Write your code here\n  # Please use the following syntax to print the\
  \ result\n  # echo $result\n  if [ $1 -gt $2 ]; then\n    echo -1\n  else\n    for\
  \ (( i=$1; i<=$2; i++ )); do\n      if [ $((i%2)) -eq 0 ]; then\n        echo $i\n\
  \        break\n      fi\n    done\n  fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # Your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n \
  \       for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n \
  \               echo $i\n                break\n            fi\n        done\n \
  \   fi"
- "    # TODO: implement this function\n    if [ $1 -gt $2 ]; then\n        echo \"\
  -1\"\n    else\n        for i in $(seq $1 $2); do\n            if [ $(($i % 2))\
  \ -eq 0 ]; then\n                echo $i\n                break\n            fi\n\
  \        done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # TODO: Write your code here\n    # Please use choose_num to name your function\n\
  \    # Please use $1, $2 to represent the parameters of this function\n    # Please\
  \ use echo to print the result in one line\n    # Please use /bin/bash to run your\
  \ code\n    # Please use return to return the result\n    for ((i=$1; i<=$2; i++));\
  \ do\n        if [ $((i%2)) -eq 0 ]; then\n            echo $i\n            return\n\
  \        fi\n    done\n    echo -1\n    return"
- "    # TODO: Write your code here\n    # \n    # Hint: Use the modulo operator %\
  \ to check if a number is even.\n    #\n    # Hint: Use the if-else statement to\
  \ check if a number is even.\n    #\n    # Hint: Use the if-else statement to check\
  \ if a number is in the\n    # range [x, y] inclusive.\n    #\n    # Hint: Use the\
  \ if-else statement to check if a number is the\n    # biggest even integer number\
  \ in the range [x, y] inclusive.\n    #\n    # Hint: Use the if-else statement to\
  \ check if there's no such number.\n    #\n    # Hint: Use the echo command to return\
  \ the result.\n    #\n    # Hint: Use the echo command to return -1.\n    #\n  \
  \  # Hint: Use the echo command to return the biggest even integer number.\n   \
  \ #\n    # Hint: Use the echo command to return the biggest even integer number\n\
  \    # in the range [x, y] inclusive.\n    #\n    # Hint: Use the echo command to\
  \ return the biggest even integer number\n    # in the range [x, y] inclusive.\n\
  \    #\n    # Hint: Use the echo command to return the biggest even integer number\n\
  \    # in the range [x, y] inclusive.\n    #\n    # Hint: Use the echo command to\
  \ return the biggest even integer number\n    # in the range [x, y] inclusive.\n\
  \    #\n    # Hint: Use the echo command to return the biggest even integer number\n\
  \    # in the range [x, y] inclusive.\n    #\n    # Hint: Use the echo command to\
  \ return the biggest even integer number\n    # in the range [x, y] inclusive.\n\
  \    #\n    # Hint: Use the echo command to return the biggest even integer number\n\
  \    # in the range [x, y] inclusive.\n    #\n    # Hint: Use the echo command to\
  \ return the biggest even integer number\n    # in the range [x, y] inclusive.\n\
  \    #\n    # Hint: Use the echo command to return the biggest even integer number\n\
  \    # in the range [x, y] inclusive.\n    #\n"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for ((i=$1; i<=$2;\
  \ i++)); do\n            if [ $((i%2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    local x=$1\n    local y=$2\n    local i=0\n    local max=-1\n    for ((i=x;\
  \ i<=y; i++)); do\n        if ((i % 2 == 0)); then\n            if ((i > max));\
  \ then\n                max=$i\n            fi\n        fi\n    done\n    echo $max"
- "    # TODO: Write your code here\n    # \n    if [ $1 -gt $2 ]; then\n        echo\
  \ -1\n    else\n        for ((i=$1; i<=$2; i++)); do\n            if [ $((i%2))\
  \ -eq 0 ]; then\n                echo $i\n                break\n            fi\n\
  \        done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        return -1\n    fi\n    for i in $(seq $1 $2);\
  \ do\n        if [ $((i % 2)) -eq 0 ]; then\n            echo $i\n            return\
  \ 0\n        fi\n    done\n    return -1"
- "    local x=$1\n    local y=$2\n    local z=0\n    if [ $x -gt $y ]; then\n   \
  \     z=$x\n        x=$y\n        y=$z\n    fi\n    if [ $((x%2)) -eq 0 ]; then\n\
  \        echo $x\n    else\n        echo $((x+1))\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $(($i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "  if [ $1 -gt $2 ]; then\n    return -1\n  fi\n  for i in $(seq $1 $2); do\n  \
  \  if [ $((i % 2)) -eq 0 ]; then\n      echo $i\n      return\n    fi\n  done\n\
  \  echo -1"
- "    # Write your code here\n    # To print results to the standard output you can\
  \ use echo\n    # To debug your program, you can insert echos like this\n    # echo\
  \ \"Debug messages...\" >&2\n    echo \"x: $1, y: $2\" >&2\n    if [[ $1 -gt $2\
  \ ]]; then\n        echo \"x > y\" >&2\n        return -1\n    fi\n    for (( i=$1;\
  \ i<=$2; i++ )); do\n        if [[ $((i%2)) -eq 0 ]]; then\n            echo \"\
  i: $i\" >&2\n            echo $i\n            return 0\n        fi\n    done\n \
  \   echo \"-1\"\n    return -1"
- "    # Write your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n\
  \        for i in $(seq $1 $2); do\n            if [ $(($i % 2)) -eq 0 ]; then\n\
  \                echo $i\n                break\n            fi\n        done\n\
  \    fi"
- "    # Write your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n\
  \        for (( i=$1; i<=$2; i++ )); do\n            if [ $((i%2)) -eq 0 ]; then\n\
  \                echo $i\n                break\n            fi\n        done\n\
  \    fi"
- "    # Write your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n\
  \        for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n\
  \                echo $i\n                break\n            fi\n        done\n\
  \    fi"
- "    # TODO: Write your code here\n    # Please use the following syntax to print\
  \ your result:\n    # echo \"choose_num($1, $2) = $RESULT\"\n    # where $RESULT\
  \ is the result of your computation\n    #\n    # Hint: You can use the modulo operator\
  \ % to check if a number is even\n    # or odd. For example:\n    #\n    # x=5\n\
  \    # if [ $((x%2)) -eq 0 ]; then\n    #     echo \"x is even\"\n    # else\n \
  \   #     echo \"x is odd\"\n    # fi\n    #\n    # The above code will print \"\
  x is odd\" because 5 is odd.\n    #\n    # You can also use the following syntax\
  \ to check if a number is even:\n    #\n    # x=5\n    # if [ $((x&1)) -eq 0 ];\
  \ then\n    #     echo \"x is even\"\n    # else\n    #     echo \"x is odd\"\n\
  \    # fi\n    #\n    # The above code will print \"x is odd\" because 5 is odd.\n\
  \    #\n    # You can also use the following syntax to check if a number is even:\n\
  \    #\n    # x=5\n    # if ((x%2 == 0)); then\n    #     echo \"x is even\"\n \
  \   # else\n    #     echo \"x is odd\"\n    # fi\n    #\n    # The above code will\
  \ print \"x is odd\" because 5 is odd.\n    #\n    # You can also use the following\
  \ syntax to check if a number is even:\n    #\n    # x=5\n    # if ((x&1 == 0));\
  \ then\n    #     echo \"x is even\"\n    # else\n    #     echo \"x is odd\"\n\
  \    # fi\n    #\n    # The above code will print \"x is odd\" because 5 is odd.\n\
  \    #\n    # You can also use the following syntax to check if a number is even:\n\
  \    #\n    # x=5\n    # if [ $((x%2)) -ne 0 ]; then\n    #     echo \"x is odd\"\
  \n    # else\n    #     echo \"x is even\"\n   "
- "  if [ $1 -gt $2 ]; then\n    echo -1\n  else\n    for (( i=$1; i<=$2; i++ ));\
  \ do\n      if [ $((i%2)) -eq 0 ]; then\n        echo $i\n        break\n      fi\n\
  \    done\n  fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for ((i=$1; i<=$2;\
  \ i++)); do\n            if [ $((i%2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # Write your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n\
  \        if [ $(( $1 % 2 )) -eq 0 ]; then\n            echo $1\n        else\n \
  \           echo $(( $1 + 1 ))\n        fi\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    elif [[ $1 -eq $2 ]]; then\n\
  \        if [[ $1%2 -eq 0 ]]; then\n            echo $1\n        else\n        \
  \    echo -1\n        fi\n    else\n        for (( i=$2; i>=$1; i-- )); do\n   \
  \         if [[ $i%2 -eq 0 ]]; then\n                echo $i\n                break\n\
  \            fi\n        done\n    fi"
- "    # TODO: implement this function\n    if [ $1 -gt $2 ]; then\n        echo -1\n\
  \    else\n        for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0\
  \ ]; then\n                echo $i\n                break\n            fi\n    \
  \    done\n    fi"
- "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for ((i=$1; i<=$2;\
  \ i++)); do\n            if [[ $((i%2)) -eq 0 ]]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # Your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n \
  \       for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n \
  \               echo $i\n                break\n            fi\n        done\n \
  \   fi"
- "  # TODO: Write your code here\n  # Please use the following syntax to print your\
  \ result:\n  # echo \"Your answer is: $result\"\n  #\n  # Hint: You can use the\
  \ modulo operator to check if a number is even.\n  # For example:\n  # if [ $(($1\
  \ % 2)) -eq 0 ]; then\n  #   echo \"$1 is even\"\n  # else\n  #   echo \"$1 is odd\"\
  \n  # fi\n  #\n  # Hint: You can use the following syntax to compare two numbers:\n\
  \  # if [ $1 -gt $2 ]; then\n  #   echo \"$1 is greater than $2\"\n  # else\n  #\
  \   echo \"$1 is less than or equal to $2\"\n  # fi\n  #\n  # Hint: You can use\
  \ the following syntax to check if a number is in a\n  # range:\n  # if [ $1 -ge\
  \ $2 ] && [ $1 -le $3 ]; then\n  #   echo \"$1 is in the range [$2, $3]\"\n  # else\n\
  \  #   echo \"$1 is not in the range [$2, $3]\"\n  # fi\n  #\n  # Hint: You can\
  \ use the following syntax to check if a number is in a\n  # range:\n  # if [ $1\
  \ -ge $2 ] && [ $1 -le $3 ]; then\n  #   echo \"$1 is in the range [$2, $3]\"\n\
  \  # else\n  #   echo \"$1 is not in the range [$2, $3]\"\n  # fi\n  #\n  # Hint:\
  \ You can use the following syntax to check if a number is in a\n  # range:\n  #\
  \ if [ $1 -ge $2 ] && [ $1 -le $3 ]; then\n  #   echo \"$1 is in the range [$2,\
  \ $3]\"\n  # else\n  #   echo \"$1 is not in the range [$2, $3]\"\n  # fi\n  #\n\
  \  # Hint: You can use the following syntax to check if a number is in a\n  # range:\n\
  \  # if [ $1 -ge $2 ] && [ $1 -le $3"
- "    # TODO: write your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n\
  \    else\n        for (( i=$1; i<=$2; i++ )); do\n            if [ $((i%2)) -eq\
  \ 0 ]; then\n                echo $i\n                break\n            fi\n  \
  \      done\n    fi"
- "    # TODO: Write your code here\n    # Hint: Use a loop\n    # Hint: Use the modulo\
  \ operator\n    # Hint: Use the if statement\n    # Hint: Use the break statement\n\
  \    # Hint: Use the continue statement\n    # Hint: Use the else statement\n  \
  \  # Hint: Use the return statement\n    # Hint: Use the echo statement\n    # Hint:\
  \ Use the $1 and $2 variables\n    # Hint: Use the $# variable\n    # Hint: Use\
  \ the $@ variable\n    # Hint: Use the $? variable\n    # Hint: Use the $0 variable\n\
  \    # Hint: Use the $* variable\n    # Hint: Use the $! variable\n    # Hint: Use\
  \ the $$ variable\n    # Hint: Use the $RANDOM variable\n    # Hint: Use the $LINENO\
  \ variable\n    # Hint: Use the $SECONDS variable\n    # Hint: Use the $IFS variable\n\
  \    # Hint: Use the $UID variable\n    # Hint: Use the $EUID variable\n    # Hint:\
  \ Use the $PPID variable\n    # Hint: Use the $PWD variable\n    # Hint: Use the\
  \ $OLDPWD variable\n    # Hint: Use the $SHELL variable\n    # Hint: Use the $HOME\
  \ variable\n    # Hint: Use the $PATH variable\n    # Hint: Use the $PS1 variable\n\
  \    # Hint: Use the $PS2 variable\n    # Hint: Use the $PS3 variable\n    # Hint:\
  \ Use the $PS4 variable\n    # Hint: Use the $SHLVL variable\n    # Hint: Use the\
  \ $BASH_VERSION variable\n    # Hint: Use the $BASH_VERSINFO variable\n    # Hint:\
  \ Use the $BASH_SOURCE variable\n    # Hint: Use the $BASH_SUBSHELL variable\n \
  \   # Hint: Use the $BASH_LINENO variable\n    # Hint: Use the $BASH_ARGC variable\n\
  \    # Hint: Use the $BASH_ARGV variable\n    # Hint: Use the $BASH_EXECUTION_STRING\
  \ variable\n"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # TODO: Write your code here\n    # \n    # Hint: Use the modulo operator (%)\
  \ to check if a number is even.\n    #\n    # Hint: Use the following if-else statement\
  \ to check if a number is even:\n    # if [ $((x % 2)) -eq 0 ]; then\n    #    \
  \ echo \"$x is even\"\n    # else\n    #     echo \"$x is odd\"\n    # fi\n    #\n\
  \    # Hint: Use the following if-else statement to check if a number is even:\n\
  \    # if [ $((x % 2)) -eq 0 ]; then\n    #     echo \"$x is even\"\n    # else\n\
  \    #     echo \"$x is odd\"\n    # fi\n    #\n    # Hint: Use the following if-else\
  \ statement to check if a number is even:\n    # if [ $((x % 2)) -eq 0 ]; then\n\
  \    #     echo \"$x is even\"\n    # else\n    #     echo \"$x is odd\"\n    #\
  \ fi\n    #\n    # Hint: Use the following if-else statement to check if a number\
  \ is even:\n    # if [ $((x % 2)) -eq 0 ]; then\n    #     echo \"$x is even\"\n\
  \    # else\n    #     echo \"$x is odd\"\n    # fi\n    #\n    # Hint: Use the\
  \ following if-else statement to check if a number is even:\n    # if [ $((x % 2))\
  \ -eq 0 ]; then\n    #     echo \"$x is even\"\n    # else\n    #     echo \"$x\
  \ is odd\"\n    # fi\n    #\n    # Hint: Use the following if-else statement to\
  \ check if a number is even:\n    # if [ $((x % 2)) -eq 0 ]; then\n    #     echo\
  \ \"$x is even\"\n    # else\n    #     echo \"$x is odd\"\n    # fi\n    #\n  \
  \  # Hint: Use the following if-else statement to check if a number is even:\n \
  \   # if [ $((x % 2)) -eq 0 ]; then\n    #     echo \"$x is even\"\n    # else\n\
  \    #     echo \"$x is odd\"\n    # fi\n   "
- "    # Write your code here\n    # You can use the following functions:\n    # -\
  \ is_even(x)\n    # - is_odd(x)\n    # - is_positive(x)\n    # - is_negative(x)\n\
  \    # - is_zero(x)\n    # - is_non_zero(x)\n    # - is_greater_than(x, y)\n   \
  \ # - is_less_than(x, y)\n    # - is_equal_to(x, y)\n    # - is_not_equal_to(x,\
  \ y)\n    # - is_greater_than_or_equal_to(x, y)\n    # - is_less_than_or_equal_to(x,\
  \ y)\n    # - is_in_range(x, y, z)\n    # - is_not_in_range(x, y, z)\n    # - is_in_range_exclusive(x,\
  \ y, z)\n    # - is_not_in_range_exclusive(x, y, z)\n    # - is_in_range_inclusive(x,\
  \ y, z)\n    # - is_not_in_range_inclusive(x, y, z)\n    # - is_in_range_exclusive_left(x,\
  \ y, z)\n    # - is_not_in_range_exclusive_left(x, y, z)\n    # - is_in_range_exclusive_right(x,\
  \ y, z)\n    # - is_not_in_range_exclusive_right(x, y, z)\n    # - is_in_range_inclusive_left(x,\
  \ y, z)\n    # - is_not_in_range_inclusive_left(x, y, z)\n    # - is_in_range_inclusive_right(x,\
  \ y, z)\n    # - is_not_in_range_inclusive_right(x, y, z)\n    # - is_in_range_inclusive_left_right(x,\
  \ y, z)\n    # - is_not_in_range_inclusive_left_right(x, y, z)\n"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $1 -eq $2 ]; then\n   \
  \     if [ $1 -eq 0 ]; then\n            echo 0\n        elif [ $1 -eq 1 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 2 ]; then\n            echo 2\n    \
  \    elif [ $1 -eq 3 ]; then\n            echo -1\n        elif [ $1 -eq 4 ]; then\n\
  \            echo 4\n        elif [ $1 -eq 5 ]; then\n            echo -1\n    \
  \    elif [ $1 -eq 6 ]; then\n            echo 6\n        elif [ $1 -eq 7 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 8 ]; then\n            echo 8\n    \
  \    elif [ $1 -eq 9 ]; then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n\
  \            echo 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n  \
  \      elif [ $1 -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 14 ]; then\n            echo\
  \ 14\n        elif [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 16 ]; then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif\
  \ [ $1 -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n \
  \           echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n   \
  \     elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq 23 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n            echo\
  \ 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 28 ]; then\n            echo 28\n        elif\
  \ ["
- "    # Write your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n\
  \        for (( i=$1; i<=$2; i++ )); do\n            if [ $((i%2)) -eq 0 ]; then\n\
  \                echo $i\n                break\n            fi\n        done\n\
  \    fi"
- "    # Write your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n\
  \        for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n\
  \                echo $i\n                break\n            fi\n        done\n\
  \    fi"
- "    local x=$1\n    local y=$2\n    local i=$x\n    local max=-1\n    while [ $i\
  \ -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n            if [ $i -gt $max\
  \ ]; then\n                max=$i\n            fi\n        fi\n        i=$((i +\
  \ 1))\n    done\n    echo $max"
- "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n        for i in $(seq\
  \ $1 $2); do\n            if [ $(($i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # Write your code here\n    # To print results to the standard output you can\
  \ use echo\n    # To debug your program, you can insert echos like this\n    # echo\
  \ \"Debug messages...\" >&2\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n\
  \        for i in $(seq $1 $2); do\n            if [ $((i%2)) -eq 0 ]; then\n  \
  \              echo $i\n                break\n            fi\n        done\n  \
  \  fi"
- "    # Your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n \
  \       for ((i=$1; i<=$2; i++)); do\n            if [ $((i%2)) -eq 0 ]; then\n\
  \                echo $i\n                break\n            fi\n        done\n\
  \    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # Your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n \
  \       for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n \
  \               echo $i\n                break\n            fi\n        done\n \
  \   fi"
- "    # Write your code here\n    # To print results to the standard output you can\
  \ use echo\n    # To debug your program, you can insert echos like this\n    # echo\
  \ \"Debug messages...\" >&2\n    echo \"12\""
- "  if [ $1 -gt $2 ]; then\n    echo -1\n  else\n    for i in $(seq $1 $2); do\n\
  \      if [ $(($i % 2)) -eq 0 ]; then\n        echo $i\n        break\n      fi\n\
  \    done\n  fi"
- "    local x=$1\n    local y=$2\n    local i=$x\n    local max=-1\n    while [ $i\
  \ -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n            max=$i\n    \
  \    fi\n        i=$((i + 1))\n    done\n    echo $max"
- "    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
  \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
  \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   \
  \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
  \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
  \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
  \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   \
  \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
  \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
  \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
  \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   \
  \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
  \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
  \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
  \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   \
  \ #\n    #\n    #\n    #\n"
- "    local x=$1\n    local y=$2\n    local i\n    local max=-1\n    for ((i=x; i<=y;\
  \ i++)); do\n        if ((i % 2 == 0)); then\n            if ((i > max)); then\n\
  \                max=$i\n            fi\n        fi\n    done\n    echo $max"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # TODO: Write your code here\n    # Please use choose_num to name your function\n\
  \    # Please use $1 and $2 to represent the parameters\n    # Please use the return\
  \ command to return your result\n    # Please use echo to print your result\n  \
  \  # Please use the following command to help you debug: echo \"Debug messages\"\
  \ > /dev/stderr\n    # Example: echo \"x is $1 and y is $2\" > /dev/stderr\n   \
  \ if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1 $2);\
  \ do\n            if [ $((i%2)) -eq 0 ]; then\n                echo $i\n       \
  \         break\n            fi\n        done\n    fi"
- "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for (( i=$1; i<=$2;\
  \ i++ )); do\n            if [[ $((i%2)) -eq 0 ]]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for ((i=$1; i<=$2;\
  \ i++)); do\n            if [ $((i%2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $1 -eq $2 ]; then\n   \
  \     if [ $1 -eq 0 ]; then\n            echo 0\n        elif [ $1 -eq 1 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 2 ]; then\n            echo 2\n    \
  \    elif [ $1 -eq 3 ]; then\n            echo -1\n        elif [ $1 -eq 4 ]; then\n\
  \            echo 4\n        elif [ $1 -eq 5 ]; then\n            echo -1\n    \
  \    elif [ $1 -eq 6 ]; then\n            echo 6\n        elif [ $1 -eq 7 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 8 ]; then\n            echo 8\n    \
  \    elif [ $1 -eq 9 ]; then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n\
  \            echo 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n  \
  \      elif [ $1 -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 14 ]; then\n            echo\
  \ 14\n        elif [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 16 ]; then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif\
  \ [ $1 -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n \
  \           echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n   \
  \     elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq 23 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n            echo\
  \ 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 28 ]; then\n            echo 28\n        elif\
  \ ["
- "    local x=$1\n    local y=$2\n    local i=0\n    local max=-1\n    for ((i=x;\
  \ i<=y; i++)); do\n        if ((i % 2 == 0)); then\n            if ((i > max));\
  \ then\n                max=$i\n            fi\n        fi\n    done\n    echo $max"
- "  if [ $1 -gt $2 ]; then\n    echo -1\n  elif [ $1 -eq $2 ]; then\n    if [ $1\
  \ -eq 0 ]; then\n      echo 0\n    elif [ $1 -eq 1 ]; then\n      echo -1\n    elif\
  \ [ $1 -eq 2 ]; then\n      echo 2\n    elif [ $1 -eq 3 ]; then\n      echo -1\n\
  \    elif [ $1 -eq 4 ]; then\n      echo 4\n    elif [ $1 -eq 5 ]; then\n      echo\
  \ -1\n    elif [ $1 -eq 6 ]; then\n      echo 6\n    elif [ $1 -eq 7 ]; then\n \
  \     echo -1\n    elif [ $1 -eq 8 ]; then\n      echo 8\n    elif [ $1 -eq 9 ];\
  \ then\n      echo -1\n    elif [ $1 -eq 10 ]; then\n      echo 10\n    elif [ $1\
  \ -eq 11 ]; then\n      echo -1\n    elif [ $1 -eq 12 ]; then\n      echo 12\n \
  \   elif [ $1 -eq 13 ]; then\n      echo -1\n    elif [ $1 -eq 14 ]; then\n    \
  \  echo 14\n    elif [ $1 -eq 15 ]; then\n      echo -1\n    elif [ $1 -eq 16 ];\
  \ then\n      echo 16\n    elif [ $1 -eq 17 ]; then\n      echo -1\n    elif [ $1\
  \ -eq 18 ]; then\n      echo 18\n    elif [ $1 -eq 19 ]; then\n      echo -1\n \
  \   elif [ $1 -eq 20 ]; then\n      echo 20\n    elif [ $1 -eq 21 ]; then\n    \
  \  echo -1\n    elif [ $1 -eq 22 ]; then\n      echo 22\n    elif [ $1 -eq 23 ];\
  \ then\n      echo -1\n    elif [ $1 -eq 24 ]; then\n      echo 24\n    elif [ $1\
  \ -eq 25 ]; then\n      echo -1\n    elif [ $1 -eq 26 ]; then\n      echo 26\n \
  \   elif [ $1 -eq 27 ]; then\n      echo -1\n    elif [ $1 -eq 28 ]; then\n    \
  \  echo 28\n    elif ["
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for (( i=$1; i<=$2;\
  \ i++ )); do\n            if [ $((i%2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "  # TODO: implement this function\n  # Hint: use the modulo operator\n  # Hint:\
  \ use the if statement\n  # Hint: use the for loop\n  # Hint: use the if statement\n\
  \  # Hint: use the break statement\n  # Hint: use the continue statement\n  # Hint:\
  \ use the echo command\n  # Hint: use the return command\n  # Hint: use the -eq\
  \ operator\n  # Hint: use the -le operator\n  # Hint: use the -ge operator\n  #\
  \ Hint: use the -ne operator\n  # Hint: use the -gt operator\n  # Hint: use the\
  \ -lt operator\n  # Hint: use the -o operator\n  # Hint: use the -a operator\n \
  \ # Hint: use the -z operator\n  # Hint: use the -n operator\n  # Hint: use the\
  \ -e operator\n  # Hint: use the -f operator\n  # Hint: use the -d operator\n  #\
  \ Hint: use the -r operator\n  # Hint: use the -w operator\n  # Hint: use the -x\
  \ operator\n  # Hint: use the -s operator\n  # Hint: use the -p operator\n  # Hint:\
  \ use the -u operator\n  # Hint: use the -g operator\n  # Hint: use the -k operator\n\
  \  # Hint: use the -t operator\n  # Hint: use the -b operator\n  # Hint: use the\
  \ -c operator\n  # Hint: use the -l operator\n  # Hint: use the -S operator\n  #\
  \ Hint: use the -N operator\n  # Hint: use the -O operator\n  # Hint: use the -G\
  \ operator\n  # Hint: use the -L operator\n  # Hint: use the -p operator\n  # Hint:\
  \ use the -b operator\n  # Hint: use the -c operator\n  # Hint: use the -t operator\n\
  \  # Hint: use the -u operator\n  # Hint: use the -g operator\n  # Hint: use the\
  \ -k operator\n  # Hint: use the -s operator\n  # H"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $(($i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # TODO: Write your code here\n    # Please use choose_num to name your function\n\
  \    # Please use $1 and $2 to represent the input parameters to this function\n\
  \    # Please use echo to print the output of this function\n    if [ $1 -gt $2\
  \ ]; then\n        echo -1\n    else\n        for ((i=$1; i<=$2; i++)); do\n   \
  \         if [ $(($i % 2)) -eq 0 ]; then\n                echo $i\n            \
  \    break\n            fi\n        done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "  if [ $1 -gt $2 ]; then\n    echo -1\n  elif [ $1 -eq $2 ]; then\n    if [ $1\
  \ -eq 0 ]; then\n      echo 0\n    elif [ $1 -eq 1 ]; then\n      echo -1\n    elif\
  \ [ $1 -eq 2 ]; then\n      echo 2\n    elif [ $1 -eq 3 ]; then\n      echo -1\n\
  \    elif [ $1 -eq 4 ]; then\n      echo 4\n    elif [ $1 -eq 5 ]; then\n      echo\
  \ -1\n    elif [ $1 -eq 6 ]; then\n      echo 6\n    elif [ $1 -eq 7 ]; then\n \
  \     echo -1\n    elif [ $1 -eq 8 ]; then\n      echo 8\n    elif [ $1 -eq 9 ];\
  \ then\n      echo -1\n    elif [ $1 -eq 10 ]; then\n      echo 10\n    elif [ $1\
  \ -eq 11 ]; then\n      echo -1\n    elif [ $1 -eq 12 ]; then\n      echo 12\n \
  \   elif [ $1 -eq 13 ]; then\n      echo -1\n    elif [ $1 -eq 14 ]; then\n    \
  \  echo 14\n    elif [ $1 -eq 15 ]; then\n      echo -1\n    fi\n  else\n    if\
  \ [ $1 -eq 0 ]; then\n      echo 0\n    elif [ $1 -eq 1 ]; then\n      echo 2\n\
  \    elif [ $1 -eq 2 ]; then\n      echo 2\n    elif [ $1 -eq 3 ]; then\n      echo\
  \ 4\n    elif [ $1 -eq 4 ]; then\n      echo 4\n    elif [ $1 -eq 5 ]; then\n  \
  \    echo 6\n    elif [ $1 -eq 6 ]; then\n      echo 6\n    elif [ $1 -eq 7 ]; then\n\
  \      echo 8\n    elif [ $1 -eq 8 ]; then\n      echo 8\n    elif [ $1 -eq 9 ];\
  \ then\n      echo 10\n    elif [ $1 -eq 10 ]; then\n      echo 10\n    elif [ $1\
  \ -eq 11 ]; then\n      echo 12\n    elif [ $1 -eq 12 ]; then\n      echo 12\n \
  \   elif [ $"
- "    # TODO: Write your code here\n    # Hint: You can use the modulo operator to\
  \ check if a number is even\n    # or odd.\n    #\n    # For example:\n    # x=5\n\
  \    # y=3\n    # if [ $((x % 2)) -eq 0 ]; then\n    #   echo \"x is even\"\n  \
  \  # else\n    #   echo \"x is odd\"\n    # fi\n    #\n    # if [ $((y % 2)) -eq\
  \ 0 ]; then\n    #   echo \"y is even\"\n    # else\n    #   echo \"y is odd\"\n\
  \    # fi\n    #\n    # The above code will print:\n    # x is odd\n    # y is odd\n\
  \    #\n    # Note that the modulo operator returns the remainder of the division\n\
  \    # of the first operand by the second operand.\n    #\n    # For example:\n\
  \    # x=5\n    # y=3\n    # echo $((x % y))\n    #\n    # The above code will print:\n\
  \    # 2\n    #\n    # Note that the remainder of the division of 5 by 3 is 2.\n\
  \    #\n    # Another example:\n    # x=6\n    # y=3\n    # echo $((x % y))\n  \
  \  #\n    # The above code will print:\n    # 0\n    #\n    # Note that the remainder\
  \ of the division of 6 by 3 is 0.\n    #\n    # Another example:\n    # x=7\n  \
  \  # y=3\n    # echo $((x % y))\n    #\n    # The above code will print:\n    #\
  \ 1\n    #\n    # Note that the remainder of the division of 7 by 3 is 1.\n    #\n\
  \    # Another example:\n    # x=8\n    # y=3\n    # echo $((x % y))\n    #\n  \
  \  # The above code will print:\n    # 2\n    #\n    # Note that the remainder of\
  \ the division of 8 by 3 is 2.\n    #\n    # Another example:\n    # x=9\n    #\
  \ y=3\n    # echo $((x % y))\n    #\n    # The above code"
- "    # Write your code here\n    # To print results to the standard output you can\
  \ use echo\n    # To debug your program, you can insert echos like this\n    # echo\
  \ \"Debug messages...\" >&2\n    echo \"x: $1, y: $2\" >&2\n    if [ $1 -gt $2 ];\
  \ then\n        echo -1\n    else\n        if [ $1 -eq $2 ]; then\n            if\
  \ [ $1 -eq 0 ]; then\n                echo 0\n            else\n               \
  \ if [ $(( $1 % 2 )) -eq 0 ]; then\n                    echo $1\n              \
  \  else\n                    echo -1\n                fi\n            fi\n     \
  \   else\n            if [ $(( $1 % 2 )) -eq 0 ]; then\n                echo $1\n\
  \            else\n                choose_num $(( $1 + 1 )) $2\n            fi\n\
  \        fi\n    fi"
- "    # TODO: Implement this function\n    if [ $1 -gt $2 ]; then\n        echo -1\n\
  \    else\n        for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0\
  \ ]; then\n                echo $i\n                break\n            fi\n    \
  \    done\n    fi"
- "  if [ $1 -gt $2 ]; then\n    echo -1\n  elif [ $1 -eq $2 ]; then\n    if [ $1\
  \ -eq 0 ]; then\n      echo 0\n    elif [ $1 -eq 1 ]; then\n      echo -1\n    elif\
  \ [ $1 -eq 2 ]; then\n      echo 2\n    elif [ $1 -eq 3 ]; then\n      echo -1\n\
  \    elif [ $1 -eq 4 ]; then\n      echo 4\n    elif [ $1 -eq 5 ]; then\n      echo\
  \ -1\n    elif [ $1 -eq 6 ]; then\n      echo 6\n    elif [ $1 -eq 7 ]; then\n \
  \     echo -1\n    elif [ $1 -eq 8 ]; then\n      echo 8\n    elif [ $1 -eq 9 ];\
  \ then\n      echo -1\n    elif [ $1 -eq 10 ]; then\n      echo 10\n    elif [ $1\
  \ -eq 11 ]; then\n      echo -1\n    elif [ $1 -eq 12 ]; then\n      echo 12\n \
  \   elif [ $1 -eq 13 ]; then\n      echo -1\n    elif [ $1 -eq 14 ]; then\n    \
  \  echo 14\n    elif [ $1 -eq 15 ]; then\n      echo -1\n    elif [ $1 -eq 16 ];\
  \ then\n      echo 16\n    elif [ $1 -eq 17 ]; then\n      echo -1\n    elif [ $1\
  \ -eq 18 ]; then\n      echo 18\n    elif [ $1 -eq 19 ]; then\n      echo -1\n \
  \   elif [ $1 -eq 20 ]; then\n      echo 20\n    elif [ $1 -eq 21 ]; then\n    \
  \  echo -1\n    elif [ $1 -eq 22 ]; then\n      echo 22\n    elif [ $1 -eq 23 ];\
  \ then\n      echo -1\n    elif [ $1 -eq 24 ]; then\n      echo 24\n    elif [ $1\
  \ -eq 25 ]; then\n      echo -1\n    elif [ $1 -eq 26 ]; then\n      echo 26\n \
  \   elif [ $1 -eq 27 ]; then\n      echo -1\n    elif [ $1 -eq 28 ]; then\n    \
  \  echo 28\n    elif ["
- "    # TODO: Write your code here\n    # \n    # HINT: You can use the modulo operator\
  \ % to check if a number is even.\n    # For example:\n    #\n    # if [ $(($1 %\
  \ 2)) -eq 0 ]; then\n    #   echo \"$1 is even\"\n    # else\n    #   echo \"$1\
  \ is odd\"\n    # fi\n    #\n    # You can also use the ternary operator to simplify\
  \ your code.\n    # For example:\n    #\n    # echo $(( $1 < $2 ? $1 : $2 ))\n \
  \   #\n    # This line prints the smaller number between $1 and $2.\n    #\n   \
  \ # You can also use the ternary operator to simplify your code.\n    # For example:\n\
  \    #\n    # echo $(( $1 < $2 ? $1 : $2 ))\n    #\n    # This line prints the smaller\
  \ number between $1 and $2.\n    #\n    # You can also use the ternary operator\
  \ to simplify your code.\n    # For example:\n    #\n    # echo $(( $1 < $2 ? $1\
  \ : $2 ))\n    #\n    # This line prints the smaller number between $1 and $2.\n\
  \    #\n    # You can also use the ternary operator to simplify your code.\n   \
  \ # For example:\n    #\n    # echo $(( $1 < $2 ? $1 : $2 ))\n    #\n    # This\
  \ line prints the smaller number between $1 and $2.\n    #\n    # You can also use\
  \ the ternary operator to simplify your code.\n    # For example:\n    #\n    #\
  \ echo $(( $1 < $2 ? $1 : $2 ))\n    #\n    # This line prints the smaller number\
  \ between $1 and $2.\n    #\n    # You can also use the ternary operator to simplify\
  \ your code.\n    # For example:\n    #\n    # echo $(( $1 < $2 ? $1 : $2 ))\n \
  \   #\n    # This line prints the smaller number between $1 and $2.\n    #\n   \
  \ # You can also use the ternary operator to simplify your code.\n    # For example:\n"
- "    # TODO: Write your code here\n    # Please use choose_num_solution as solution\n\
  \    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for ((i=$1; i<=$2;\
  \ i++)); do\n            if [ $((i%2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for i in $(seq\
  \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
  \ $i\n                break\n            fi\n        done\n    fi"
- "    # TODO: Write your code here\n    # \n    # Hint: Use the modulo operator to\
  \ check if a number is even.\n    #\n    # For example:\n    #\n    # if [ $(($1\
  \ % 2)) -eq 0 ]; then\n    #   echo \"$1 is even\"\n    # else\n    #   echo \"\
  $1 is odd\"\n    # fi\n    #\n    # Note: The above code snippet checks if $1 is\
  \ even.\n    #\n    #\n    # Hint: Use the following code snippet to check if $1\
  \ is greater than $2.\n    #\n    # if [ $1 -gt $2 ]; then\n    #   echo \"$1 is\
  \ greater than $2\"\n    # else\n    #   echo \"$1 is less than or equal to $2\"\
  \n    # fi\n    #\n    # Note: The above code snippet checks if $1 is greater than\
  \ $2.\n    #\n    #\n    # Hint: Use the following code snippet to check if $1 is\
  \ less than or equal to $2.\n    #\n    # if [ $1 -le $2 ]; then\n    #   echo \"\
  $1 is less than or equal to $2\"\n    # else\n    #   echo \"$1 is greater than\
  \ $2\"\n    # fi\n    #\n    # Note: The above code snippet checks if $1 is less\
  \ than or equal to $2.\n    #\n    #\n    # Hint: Use the following code snippet\
  \ to check if $1 is equal to $2.\n    #\n    # if [ $1 -eq $2 ]; then\n    #   echo\
  \ \"$1 is equal to $2\"\n    # else\n    #   echo \"$1 is not equal to $2\"\n  \
  \  # fi\n    #\n    # Note: The above code snippet checks if $1 is equal to $2.\n\
  \    #\n    #\n    # Hint: Use the following code snippet to check if $1 is not\
  \ equal to $2.\n    #\n    # if [ $1 -ne $2 ]; then\n    #   echo \"$1 is not equal\
  \ to $2\"\n    # else\n    #   echo \"$1 is equal to $2\"\n    # fi\n    #\n   \
  \ # Note: The above code"
- "    # Your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n \
  \       for (( i=$1; i<=$2; i++ )); do\n            if [ $((i%2)) -eq 0 ]; then\n\
  \                echo $i\n                break\n            fi\n        done\n\
  \    fi"
- "    # TODO: implement this function\n    if [ $1 -gt $2 ]; then\n        echo -1\n\
  \    else\n        for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0\
  \ ]; then\n                echo $i\n                break\n            fi\n    \
  \    done\n    fi"
- "    # Your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n \
  \       for ((i=$1; i<=$2; i++)); do\n            if [ $((i%2)) -eq 0 ]; then\n\
  \                echo $i\n                break\n            fi\n        done\n\
  \    fi"
- "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for i in $(seq\
  \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
  \ $i\n                break\n            fi\n        done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "  # Your code here\n  if (( $1 % 2 == 0 ))\n  then\n    if (( $2 % 2 == 0 ))\n\
  \    then\n      if (( $1 > $2 ))\n      then\n        echo $1\n      else\n   \
  \     echo $2\n      fi\n    else\n      echo $1\n    fi\n  else\n    if (( $2 %\
  \ 2 == 0 ))\n    then\n      echo $2\n    else\n      echo -1\n    fi\n  fi"
- "  # Your code here\n  if [ $1 -gt $2 ]; then\n    echo -1\n  else\n    for i in\
  \ $(seq $1 $2); do\n      if [ $((i % 2)) -eq 0 ]; then\n        echo $i\n     \
  \   break\n      fi\n    done\n  fi"
- "    # Write your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n\
  \        for i in $(seq $1 $2); do\n            if [ $(($i % 2)) -eq 0 ]; then\n\
  \                echo $i\n                break\n            fi\n        done\n\
  \    fi"
- "    # TODO: Write your code here\n    # Please use choose_num to name your function\n\
  \    # Please use $1 and $2 to represent the parameters\n    if [ $1 -gt $2 ]; then\n\
  \        echo -1\n    else\n        for ((i=$1; i<=$2; i++)); do\n            if\
  \ [ $((i%2)) -eq 0 ]; then\n                echo $i\n                break\n   \
  \         fi\n        done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $1 -eq $2 ]; then\n   \
  \     if [ $1 -eq 0 ]; then\n            echo 0\n        elif [ $1 -eq 1 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 2 ]; then\n            echo 2\n    \
  \    elif [ $1 -eq 3 ]; then\n            echo -1\n        elif [ $1 -eq 4 ]; then\n\
  \            echo 4\n        elif [ $1 -eq 5 ]; then\n            echo -1\n    \
  \    elif [ $1 -eq 6 ]; then\n            echo 6\n        elif [ $1 -eq 7 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 8 ]; then\n            echo 8\n    \
  \    elif [ $1 -eq 9 ]; then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n\
  \            echo 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n  \
  \      elif [ $1 -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 14 ]; then\n            echo\
  \ 14\n        elif [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 16 ]; then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif\
  \ [ $1 -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n \
  \           echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n   \
  \     elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq 23 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n            echo\
  \ 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 28 ]; then\n            echo 28\n        elif\
  \ ["
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $1 -eq $2 ]; then\n   \
  \     if [ $1 -eq 0 ]; then\n            echo 0\n        elif [ $1 -eq 1 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 2 ]; then\n            echo 2\n    \
  \    elif [ $1 -eq 3 ]; then\n            echo -1\n        elif [ $1 -eq 4 ]; then\n\
  \            echo 4\n        elif [ $1 -eq 5 ]; then\n            echo -1\n    \
  \    elif [ $1 -eq 6 ]; then\n            echo 6\n        elif [ $1 -eq 7 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 8 ]; then\n            echo 8\n    \
  \    elif [ $1 -eq 9 ]; then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n\
  \            echo 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n  \
  \      elif [ $1 -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 14 ]; then\n            echo\
  \ 14\n        elif [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 16 ]; then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif\
  \ [ $1 -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n \
  \           echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n   \
  \     elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq 23 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n            echo\
  \ 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 28 ]; then\n            echo 28\n        elif\
  \ ["
- "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for i in $(seq\
  \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
  \ $i\n                break\n            fi\n        done\n    fi"
- "    # TODO: Write your code here\n    # Hint: You can use the modulo operator %\
  \ to check if a number is even.\n    # For example:\n    # if [ $(($1 % 2)) -eq\
  \ 0 ]; then\n    #     echo \"$1 is even\"\n    # else\n    #     echo \"$1 is odd\"\
  \n    # fi\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for ((\
  \ i=$1; i<=$2; i++ )); do\n            if [ $(($i % 2)) -eq 0 ]; then\n        \
  \        echo $i\n                break\n            fi\n        done\n    fi"
- "    # TODO: Write your code here\n    # Please remove the \"return\" statement\
  \ when you start coding\n    #return\n    if [ $1 -gt $2 ]; then\n        echo -1\n\
  \    else\n        for (( i=$1; i<=$2; i++ )); do\n            if [ $((i%2)) -eq\
  \ 0 ]; then\n                echo $i\n                break\n            fi\n  \
  \      done\n    fi"
- "  if [ $1 -gt $2 ]; then\n    echo -1\n  else\n    for (( i=$1; i<=$2; i++ ));\
  \ do\n      if [ $((i%2)) -eq 0 ]; then\n        echo $i\n        break\n      fi\n\
  \    done\n  fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $1 -eq $2 ]; then\n   \
  \     if [ $1 -eq 0 ]; then\n            echo 0\n        elif [ $1 -eq 1 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 2 ]; then\n            echo 2\n    \
  \    elif [ $1 -eq 3 ]; then\n            echo -1\n        elif [ $1 -eq 4 ]; then\n\
  \            echo 4\n        elif [ $1 -eq 5 ]; then\n            echo -1\n    \
  \    elif [ $1 -eq 6 ]; then\n            echo 6\n        elif [ $1 -eq 7 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 8 ]; then\n            echo 8\n    \
  \    elif [ $1 -eq 9 ]; then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n\
  \            echo 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n  \
  \      elif [ $1 -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 14 ]; then\n            echo\
  \ 14\n        elif [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 16 ]; then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif\
  \ [ $1 -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n \
  \           echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n   \
  \     elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq 23 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n            echo\
  \ 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 28 ]; then\n            echo 28\n        elif\
  \ ["
- "  if [ $1 -gt $2 ]; then\n    echo -1\n  else\n    for (( i=$1; i<=$2; i++ ));\
  \ do\n      if [ $((i%2)) -eq 0 ]; then\n        echo $i\n        break\n      fi\n\
  \    done\n  fi"
- "    # TODO: implement this function\n    if [ $1 -gt $2 ]; then\n        echo -1\n\
  \    elif [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n            echo 0\n\
  \        elif [ $1 -eq 1 ]; then\n            echo -1\n        elif [ $1 -eq 2 ];\
  \ then\n            echo 2\n        elif [ $1 -eq 3 ]; then\n            echo -1\n\
  \        elif [ $1 -eq 4 ]; then\n            echo 4\n        elif [ $1 -eq 5 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 6 ]; then\n            echo 6\n\
  \        elif [ $1 -eq 7 ]; then\n            echo -1\n        elif [ $1 -eq 8 ];\
  \ then\n            echo 8\n        elif [ $1 -eq 9 ]; then\n            echo -1\n\
  \        elif [ $1 -eq 10 ]; then\n            echo 10\n        elif [ $1 -eq 11\
  \ ]; then\n            echo -1\n        elif [ $1 -eq 12 ]; then\n            echo\
  \ 12\n        elif [ $1 -eq 13 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 14 ]; then\n            echo 14\n        elif [ $1 -eq 15 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 16 ]; then\n            echo 16\n        elif\
  \ [ $1 -eq 17 ]; then\n            echo -1\n        elif [ $1 -eq 18 ]; then\n \
  \           echo 18\n        elif [ $1 -eq 19 ]; then\n            echo -1\n   \
  \     elif [ $1 -eq 20 ]; then\n            echo 20\n        elif [ $1 -eq 21 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 22 ]; then\n            echo\
  \ 22\n        elif [ $1 -eq 23 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 24 ]; then\n            echo 24\n        elif [ $1 -eq 25 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 26 ]; then\n            echo 26\n        elif\
  \ [ $1 -eq 27 ]; then\n            echo -1\n        elif [ $1 -eq 28 ]; then"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $1 -eq $2 ]; then\n   \
  \     if [ $1 -eq 0 ]; then\n            echo 0\n        elif [ $1 -eq 1 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 2 ]; then\n            echo 2\n    \
  \    elif [ $1 -eq 3 ]; then\n            echo -1\n        elif [ $1 -eq 4 ]; then\n\
  \            echo 4\n        elif [ $1 -eq 5 ]; then\n            echo -1\n    \
  \    elif [ $1 -eq 6 ]; then\n            echo 6\n        elif [ $1 -eq 7 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 8 ]; then\n            echo 8\n    \
  \    elif [ $1 -eq 9 ]; then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n\
  \            echo 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n  \
  \      elif [ $1 -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 14 ]; then\n            echo\
  \ 14\n        elif [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 16 ]; then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif\
  \ [ $1 -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n \
  \           echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n   \
  \     elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq 23 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n            echo\
  \ 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 28 ]; then\n            echo 28\n        elif\
  \ ["
- "    # TODO: Write your code here\n    # \n    #\n    #\n    #\n    #\n    #\n \
  \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
  \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   \
  \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
  \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
  \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
  \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   \
  \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
  \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
  \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
  \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   \
  \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
  \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
  \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
  \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   \
  \ #\n    #\n    #\n    #"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "  # TODO: Implement this function.\n  # Hint: Use the modulo operator % to check\
  \ if a number is even.\n  # Hint: Use the bash built-in function echo to print the\
  \ result.\n  # Hint: Use the bash built-in function seq to generate a sequence of\n\
  \  # numbers.\n  # Hint: Use the bash built-in function sort to sort the sequence\
  \ of\n  # numbers.\n  # Hint: Use the bash built-in function head to get the first\
  \ number\n  # from the sorted sequence.\n  # Hint: Use the bash built-in function\
  \ tail to get the last number\n  # from the sorted sequence.\n  # Hint: Use the\
  \ bash built-in function read to read the input from\n  # the command line.\n  #\
  \ Hint: Use the bash built-in function echo to print the result.\n  # Hint: Use\
  \ the bash built-in function exit to exit the script.\n  # Hint: Use the bash built-in\
  \ function test to check if a number is\n  # greater than another number.\n  # Hint:\
  \ Use the bash built-in function test to check if a number is\n  # less than another\
  \ number.\n  # Hint: Use the bash built-in function test to check if a number is\n\
  \  # equal to another number.\n  # Hint: Use the bash built-in function test to\
  \ check if a number is\n  # not equal to another number.\n  # Hint: Use the bash\
  \ built-in function test to check if a number is\n  # greater than or equal to another\
  \ number.\n  # Hint: Use the bash built-in function test to check if a number is\n\
  \  # less than or equal to another number.\n  # Hint: Use the bash built-in function\
  \ test to check if a number is\n  # even.\n  # Hint: Use the bash built-in function\
  \ test to check if a number is\n  # odd.\n  # Hint: Use the bash built-in function\
  \ test to check if a string is\n  # empty.\n  # Hint: Use the bash built-in function\
  \ test to check if a string is\n  # not empty.\n  # Hint: Use the bash built-in\
  \ function test to check if a string is\n"
- "    # TODO: Implement this function\n    if [ $1 -gt $2 ]; then\n        echo -1\n\
  \    else\n        for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0\
  \ ]; then\n                echo $i\n                break\n            fi\n    \
  \    done\n    fi"
- "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for (( i=$1; i<=$2;\
  \ i++ )); do\n            if [[ $((i%2)) -eq 0 ]]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # TODO: write your code here\n    # \n    # Hint: you can use the modulo operator\
  \ % to check if a number is even\n    # or odd.\n    #\n    # Hint: you can use\
  \ the if statement to check if a number is even or\n    # odd.\n    #\n    # Hint:\
  \ you can use the if statement to check if a number is greater\n    # than another\
  \ number.\n    #\n    # Hint: you can use the if statement to check if a number\
  \ is less than\n    # another number.\n    #\n    # Hint: you can use the if statement\
  \ to check if a number is equal to\n    # another number.\n    #\n    # Hint: you\
  \ can use the if statement to check if a number is not equal\n    # to another number.\n\
  \    #\n    # Hint: you can use the if statement to check if a number is greater\n\
  \    # than or equal to another number.\n    #\n    # Hint: you can use the if statement\
  \ to check if a number is less than\n    # or equal to another number.\n    #\n\
  \    # Hint: you can use the if statement to check if a number is greater\n    #\
  \ than another number and less than another number.\n    #\n    # Hint: you can\
  \ use the if statement to check if a number is greater\n    # than another number\
  \ or less than another number.\n    #\n    # Hint: you can use the if statement\
  \ to check if a number is greater\n    # than another number and less than another\
  \ number or greater than\n    # another number and less than another number.\n \
  \   #\n    # Hint: you can use the if statement to check if a number is greater\n\
  \    # than another number or less than another number or greater than\n    # another\
  \ number or less than another number.\n    #\n    # Hint: you can use the if statement\
  \ to check if a number is greater\n    # than another number and less than another\
  \ number or greater than\n    # another number or less than another number.\n  \
  \  #\n    # Hint: you can use the if statement to check if a number is greater\n\
  \    # than another number or less than another number and greater than\n    # another\
  \ number or less than another number.\n    #\n    #"
- "    # TODO: Write your code here\n    # Please use choose_num to name your function\n\
  \    # Please use $1 and $2 to represent the parameters\n    # Please use echo to\
  \ print the result\n    # Please use return to return the result\n    for ((i=$1;\
  \ i<=$2; i++))\n    do\n        if [ $((i%2)) -eq 0 ]\n        then\n          \
  \  echo $i\n            return $i\n        fi\n    done\n    echo -1\n    return\
  \ -1"
- "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    elif [[ $1 -eq $2 ]]; then\n\
  \        if [[ $1%2 -eq 0 ]]; then\n            echo $1\n        else\n        \
  \    echo -1\n        fi\n    else\n        for (( i=$2; i>=$1; i-- )); do\n   \
  \         if [[ $i%2 -eq 0 ]]; then\n                echo $i\n                break\n\
  \            fi\n        done\n    fi"
- "    # TODO: Implement the function\n    if [ $1 -ge $2 ]; then\n        echo -1\n\
  \    else\n        for ((i=$1; i<=$2; i++)); do\n            if [ $((i%2)) -eq 0\
  \ ]; then\n                echo $i\n                break\n            fi\n    \
  \    done\n    fi"
- "    # Write your code here\n    # To print results to the standard output you can\
  \ use echo\n    # To debug your program, you can insert echos like this\n    # echo\
  \ \"Debug messages...\" >&2\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n\
  \        for ((i=$1; i<=$2; i++)); do\n            if [ $((i%2)) -eq 0 ]; then\n\
  \                echo $i\n                break\n            fi\n        done\n\
  \    fi"
- "    # Write your code here\n    # To print results to the standard output you can\
  \ use echo\n    # To debug your program, you can insert echos like this\n    # echo\
  \ \"Debug messages...\" >&2\n    echo \"x = $1\" >&2\n    echo \"y = $2\" >&2\n\
  \    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n        for (( i=$1;\
  \ i<=$2; i++ )); do\n            if [ $((i%2)) -eq 0 ]; then\n                echo\
  \ \"$i\"\n                break\n            fi\n        done\n    fi"
- "    # TODO: implement this function\n    if [ $1 -gt $2 ]; then\n        echo -1\n\
  \    else\n        for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0\
  \ ]; then\n                echo $i\n                break\n            fi\n    \
  \    done\n    fi"
- "    # TODO: Write your code here\n    # Please use the following syntax to print\
  \ the result:\n    # echo $result\n    if [ $1 -gt $2 ]; then\n        echo -1\n\
  \    else\n        for ((i=$1; i<=$2; i++)); do\n            if [ $((i%2)) -eq 0\
  \ ]; then\n                echo $i\n                break\n            fi\n    \
  \    done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    elif [[ $1 -eq $2 ]]; then\n\
  \        if [[ $1%2 -eq 0 ]]; then\n            echo $1\n        else\n        \
  \    echo -1\n        fi\n    else\n        for (( i=$2; i>=$1; i-- )); do\n   \
  \         if [[ $i%2 -eq 0 ]]; then\n                echo $i\n                break\n\
  \            fi\n        done\n    fi"
- "    # Write your code here\n    # You can use the following command to print to\
  \ standard error:\n    # echo \"Error: $1\" >&2\n    #\n    # You can use the following\
  \ command to print to standard output:\n    # echo \"$1\"\n    if [ $1 -gt $2 ];\
  \ then\n        echo -1\n    else\n        for (( i=$1; i<=$2; i++ )); do\n    \
  \        if [ $((i%2)) -eq 0 ]; then\n                echo $i\n                break\n\
  \            fi\n        done\n    fi"
- "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for i in $(seq\
  \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
  \ $i\n                return\n            fi\n        done\n        echo -1\n  \
  \  fi"
- "    # Write your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n\
  \        for ((i=$1; i<=$2; i++)); do\n            if [ $((i%2)) -eq 0 ]; then\n\
  \                echo $i\n                break\n            fi\n        done\n\
  \    fi"
- "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for i in $(seq\
  \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
  \ $i\n                return\n            fi\n        done\n        echo -1\n  \
  \  fi"
- "    # Write your code here\n    # To print results to the standard output you can\
  \ use echo\n    # Example: echo \"Hello world\"\n    if [ $1 -gt $2 ]; then\n  \
  \      echo -1\n    else\n        for ((i=$1; i<=$2; i++)); do\n            if [\
  \ $((i%2)) -eq 0 ]; then\n                echo $i\n                break\n     \
  \       fi\n        done\n    fi"
- "    # Write your code here\n    # To print results to the standard output you can\
  \ use echo\n    # To debug your program, you can insert echos like this\n    # echo\
  \ \"Debug messages...\" >&2\n    echo \"x = $1\" >&2\n    echo \"y = $2\" >&2\n\
  \    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n        if [ $(( $1\
  \ % 2 )) -eq 0 ]; then\n            echo \"$1\"\n        else\n            echo\
  \ \"$(( $1 + 1 ))\"\n        fi\n    fi"
- "    # TODO: Write your code here\n    # Please use the following syntax to print\
  \ the result:\n    # echo \"choose_num($1, $2) = $result\"\n    # where $result\
  \ is the result of the function\n    #\n    # Hint: You can use the command \"expr\"\
  \ to do arithmetic operations\n    # in bash. For example:\n    # expr 2 + 3\n \
  \   # expr 2 \\* 3\n    # expr 2 / 3\n    # expr 2 % 3\n    #\n    # Hint: You can\
  \ use the command \"test\" to do comparison operations\n    # in bash. For example:\n\
  \    # test $x -eq $y\n    # test $x -ne $y\n    # test $x -gt $y\n    # test $x\
  \ -ge $y\n    # test $x -lt $y\n    # test $x -le $y\n    #\n    # Hint: You can\
  \ use the command \"if\" to do conditional branching\n    # in bash. For example:\n\
  \    # if test $x -eq $y; then\n    #     echo \"x is equal to y\"\n    # fi\n \
  \   #\n    # Hint: You can use the command \"for\" to do looping in bash. For example:\n\
  \    # for i in {1..10}; do\n    #     echo $i\n    # done\n    #\n    # Hint: You\
  \ can use the command \"break\" to break out of a loop in bash.\n    # For example:\n\
  \    # for i in {1..10}; do\n    #     if test $i -eq 5; then\n    #         break\n\
  \    #     fi\n    #     echo $i\n    # done\n    #\n    # Hint: You can use the\
  \ command \"continue\" to skip the current iteration\n    # of a loop in bash. For\
  \ example:\n    # for i in {1..10}; do\n    #     if test $i -eq 5; then\n    #\
  \         continue\n    #     fi\n    #     echo $i\n    # done\n    #\n    # Hint:\
  \ You can use the command \"let\" to do arithmetic operations in bash.\n    # For\
  \ example:\n    # let x=x+1\n    #"
- "  # Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
  \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for (( i=$1; i<=$2;\
  \ i++ )); do\n            if [ $((i%2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # TODO: Write your code here\n    # Please use the following syntax to print\
  \ the result\n    # echo $result\n    if [ $1 -gt $2 ]; then\n        echo -1\n\
  \    else\n        for ((i=$1; i<=$2; i++)); do\n            if [ $((i%2)) -eq 0\
  \ ]; then\n                echo $i\n                break\n            fi\n    \
  \    done\n    fi"
- "    # Write your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n\
  \        for ((i = $1; i <= $2; i++)); do\n            if [ $((i % 2)) -eq 0 ];\
  \ then\n                echo $i\n                break\n            fi\n       \
  \ done\n    fi"
- "    # TODO: Implement this function\n    # Hint: you can use the modulo operator\
  \ %\n    # Hint: you can use the if statement\n    # Hint: you can use the for loop\n\
  \    # Hint: you can use the seq command\n    # Hint: you can use the echo command\n\
  \    # Hint: you can use the break command\n    # Hint: you can use the continue\
  \ command\n    # Hint: you can use the return command\n    # Hint: you can use the\
  \ -eq operator\n    # Hint: you can use the -ne operator\n    # Hint: you can use\
  \ the -gt operator\n    # Hint: you can use the -lt operator\n    # Hint: you can\
  \ use the -ge operator\n    # Hint: you can use the -le operator\n    # Hint: you\
  \ can use the && operator\n    # Hint: you can use the || operator\n    # Hint:\
  \ you can use the ! operator\n    # Hint: you can use the -o operator\n    # Hint:\
  \ you can use the -a operator\n    # Hint: you can use the -z operator\n    # Hint:\
  \ you can use the -n operator\n    # Hint: you can use the -e operator\n    # Hint:\
  \ you can use the -d operator\n    # Hint: you can use the -f operator\n    # Hint:\
  \ you can use the -r operator\n    # Hint: you can use the -w operator\n    # Hint:\
  \ you can use the -x operator\n    # Hint: you can use the -s operator\n    # Hint:\
  \ you can use the -t operator\n    # Hint: you can use the -p operator\n    # Hint:\
  \ you can use the -u operator\n    # Hint: you can use the -g operator\n    # Hint:\
  \ you can use the -k operator\n    # Hint: you can use the -l operator\n    # Hint:\
  \ you can use the -S operator\n    # Hint: you can use the -b operator\n    # Hint:\
  \ you can use the -c operator\n    # Hint: you can use the -M operator\n    # Hint:\
  \ you can use the -O operator\n    # Hint"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # TODO: Write your code here\n    # Please use choose_num to name your function\n\
  \    # Please use $1 and $2 to represent the parameters\n    # Please use echo to\
  \ print the result\n    # Please do not use any other language feature\n    # Please\
  \ do not use any external tool\n    # Please do not use any other file\n    # Please\
  \ do not use any other variable\n    # Please do not use any other function\n  \
  \  # Please do not use any other loop\n    # Please do not use any other conditional\
  \ statement\n    # Please do not use any other control flow statement\n    # Please\
  \ do not use any other arithmetic operation\n    # Please do not use any other comparison\
  \ operator\n    # Please do not use any other logical operator\n    # Please do\
  \ not use any other bitwise operator\n    # Please do not use any other string operation\n\
  \    # Please do not use any other array operation\n    # Please do not use any\
  \ other regular expression\n    # Please do not use any other file operation\n \
  \   # Please do not use any other directory operation\n    # Please do not use any\
  \ other process operation\n    # Please do not use any other system call\n    #\
  \ Please do not use any other built-in command\n    # Please do not use any other\
  \ external command\n    # Please do not use any other external library\n    # Please\
  \ do not use any other external package\n    # Please do not use any other external\
  \ module\n    # Please do not use any other external framework\n    # Please do\
  \ not use any other external API\n    # Please do not use any other external protocol\n\
  \    # Please do not use any other external format\n    # Please do not use any\
  \ other external standard\n    # Please do not use any other external convention\n\
  \    # Please do not use any other external convention\n    # Please do not use\
  \ any other external convention\n    # Please do not use any other external convention\n\
  \    # Please do not use any other external convention\n    # Please do not use\
  \ any other external convention\n    # Please do not use any other external convention\n\
  \    # Please do not use any other external convention\n    # Please do not use\
  \ any other external convention\n    # Please do not use any other external convention\n\
  \    # Please do not use any other external convention\n    # Please do not use\
  \ any other external convention\n    # Please do not use any other external convention\n\
  \    # Please do"
- "    if [ $1 -gt $2 ]; then\n        return -1\n    fi\n    for i in $(seq $1 $2);\
  \ do\n        if [ $((i % 2)) -eq 0 ]; then\n            echo $i\n            return\
  \ 0\n        fi\n    done\n    return -1"
- "    # Write your code here\n    # To print results to the standard output you can\
  \ use echo\n    # To debug your program, you can insert echos like this\n    # echo\
  \ \"Debug messages...\" >&2\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n\
  \        for (( i=$1; i<=$2; i++ )); do\n            if [ $((i%2)) -eq 0 ]; then\n\
  \                echo $i\n                break\n            fi\n        done\n\
  \    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # TODO: Write your code here\n    # Please use the following syntax to print\
  \ the result:\n    # echo \"choose_num($1, $2) = $result\"\n    # where $result\
  \ is the result of the function\n    #\n    # Hint: You can use the modulo operator\
  \ % to check if a number is even.\n    # For example:\n    # x=5\n    # if [ $((x%2))\
  \ -eq 0 ]; then\n    #   echo \"$x is even\"\n    # else\n    #   echo \"$x is odd\"\
  \n    # fi\n    #\n    # Hint: You can use the following syntax to iterate from\
  \ x to y:\n    # for i in $(seq $x $y); do\n    #   echo $i\n    # done\n    #\n\
  \    # Hint: You can use the following syntax to return a value from a function:\n\
  \    # return $result\n    #\n    # Hint: You can use the following syntax to return\
  \ -1 from a function:\n    # return -1\n    #\n    # Hint: You can use the following\
  \ syntax to check if a number is in a range:\n    # if [ $x -le $y ]; then\n   \
  \ #   echo \"$x is in the range [$x, $y]\"\n    # else\n    #   echo \"$x is not\
  \ in the range [$x, $y]\"\n    # fi\n    #\n    # Hint: You can use the following\
  \ syntax to check if a number is greater than another number:\n    # if [ $x -gt\
  \ $y ]; then\n    #   echo \"$x is greater than $y\"\n    # else\n    #   echo \"\
  $x is not greater than $y\"\n    # fi\n    #\n    # Hint: You can use the following\
  \ syntax to check if a number is less than another number:\n    # if [ $x -lt $y\
  \ ]; then\n    #   echo \"$x is less than $y\"\n    # else\n    #   echo \"$x is\
  \ not less than $y\"\n    # fi\n    #\n    # Hint: You can use the following syntax\
  \ to check if a number is equal to another number:\n    # if [ $x -eq $y ]; then\n"
- "    # Write your code here\n    # To print results to the standard output you can\
  \ use echo\n    # To debug your program, you can insert echos like this\n    # echo\
  \ \"Debug messages...\" >&2\n    if [ $1 -gt $2 ]; then\n        echo -1\n    elif\
  \ [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n            echo 0\n     \
  \   elif [ $1 -eq 1 ]; then\n            echo -1\n        elif [ $1 -eq 2 ]; then\n\
  \            echo 2\n        elif [ $1 -eq 3 ]; then\n            echo -1\n    \
  \    elif [ $1 -eq 4 ]; then\n            echo 4\n        elif [ $1 -eq 5 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 6 ]; then\n            echo 6\n    \
  \    elif [ $1 -eq 7 ]; then\n            echo -1\n        elif [ $1 -eq 8 ]; then\n\
  \            echo 8\n        elif [ $1 -eq 9 ]; then\n            echo -1\n    \
  \    elif [ $1 -eq 10 ]; then\n            echo 10\n        elif [ $1 -eq 11 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 12 ]; then\n            echo\
  \ 12\n        elif [ $1 -eq 13 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 14 ]; then\n            echo 14\n        elif [ $1 -eq 15 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 16 ]; then\n            echo 16\n        elif\
  \ [ $1 -eq 17 ]; then\n            echo -1\n        elif [ $1 -eq 18 ]; then\n \
  \           echo 18\n        elif [ $1 -eq 19 ]; then\n            echo -1\n   \
  \     elif [ $1 -eq 20 ]; then\n            echo 20\n        elif [ $1 -eq 21 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 22 ]; then\n            echo\
  \ 22\n        elif [ $1 -eq 23 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 24 ]; then\n            echo 24\n        elif [ $1 -eq 25 ]; then\n          \
  \  echo -1\n        elif [ $"
- "  # TODO: Write your code here\n  # Please use the following syntax:\n  # echo\
  \ $((YOUR_CODE_HERE))\n  if [ $1 -gt $2 ]; then\n    echo -1\n  else\n    for i\
  \ in $(seq $1 $2); do\n      if [ $((i % 2)) -eq 0 ]; then\n        echo $i\n  \
  \      break\n      fi\n    done\n  fi"
- "    # TODO: Write your code here\n    # Please use the following syntax to print\
  \ the result\n    # echo $result\n    if [ $1 -gt $2 ]; then\n        echo -1\n\
  \    else\n        for ((i=$1; i<=$2; i++)); do\n            if [ $((i%2)) -eq 0\
  \ ]; then\n                echo $i\n                break\n            fi\n    \
  \    done\n    fi"
- "    # Write your code here\n    # To print results to the standard output you can\
  \ use echo\n    # Example: echo \"Hello world\"\n    if [ $1 -gt $2 ]; then\n  \
  \      echo -1\n    else\n        if [ $1 -eq $2 ]; then\n            if [ $1 -eq\
  \ 0 ]; then\n                echo 0\n            else\n                if [ $1 -eq\
  \ 1 ]; then\n                    echo -1\n                else\n               \
  \     if [ $1 -eq 2 ]; then\n                        echo 2\n                  \
  \  else\n                        if [ $1 -eq 3 ]; then\n                       \
  \     echo -1\n                        else\n                            if [ $1\
  \ -eq 4 ]; then\n                                echo 4\n                      \
  \      else\n                                if [ $1 -eq 5 ]; then\n           \
  \                         echo -1\n                                else\n      \
  \                              if [ $1 -eq 6 ]; then\n                         \
  \               echo 6\n                                    else\n             \
  \                           if [ $1 -eq 7 ]; then\n                            \
  \                echo -1\n                                        else\n       \
  \                                     if [ $1 -eq 8 ]; then\n                  \
  \                              echo 8\n                                        \
  \    else\n                                                if [ $1 -eq 9 ]; then\n\
  \                                                    echo -1\n                 \
  \                               else\n                                         \
  \           if [ $1 -eq 10 ]; then\n                                           \
  \             echo 10\n                                                    else\n\
  \                                                        if [ $1 -eq 11 ]; then\n\
  \                                                            echo -1\n         \
  \                                               else\n                         \
  \                                   if [ $1 -eq 12 ]; then\n                   \
  \                                             echo 12\n                        \
  \                                    else\n                                    \
  \                            if [ $1 -eq 13 ]; then\n                          \
  \                                          echo -1\n                           \
  \                                     else\n                                   \
  \                                 if [ $1 -eq 14 ]; then\n                     \
  \                                                   echo 14\n                  \
  \                                                  else\n                      \
  \                                                  if [ $1 -eq 15 ]; then\n    \
  \                                                                        echo -1\n\
  \                                                                        else\n\
  \                                                                            if\
  \ [ $1 -eq 16 ]; then\n                                                        \
  \                        echo 16\n                                             \
  \                               else\n                                         \
  \                                       if [ $1 -eq 17 ]; then\n               \
  \                                                                     echo -1\n\
  \                                                                              \
  \  else\n                                                                      \
  \              if [ $1 -eq 18 ]; then\n"
- "  # your code here\n  if [[ $1 -gt $2 ]]; then\n    echo -1\n  else\n    for ((i\
  \ = $1; i <= $2; i++)); do\n      if [[ $((i % 2)) -eq 0 ]]; then\n        echo\
  \ $i\n        break\n      fi\n    done\n  fi"
- "    # TODO: Write your code here\n    # Please use a while loop\n    # Please use\
  \ the modulo operator (%)\n    # Please use the if statement\n    # Please use the\
  \ echo command\n    # Please use the return command\n    # Please use the continue\
  \ command\n    # Please use the break command\n    # Please use the else command\n\
  \    # Please use the elif command\n    # Please use the arithmetic expansion\n\
  \    # Please use the logical operators\n    # Please use the relational operators\n\
  \    # Please use the bitwise operators\n    # Please use the assignment operators\n\
  \    # Please use the arithmetic operators\n    # Please use the conditional operator\n\
  \    # Please use the comma operator\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \    # Please use the arithmetic operators\n    # Please use the arithmetic operators\n\
  \   "
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for ((i=$1; i<=$2;\
  \ i++)); do\n            if [ $((i%2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for ((i=$1; i<=$2;\
  \ i++)); do\n            if [ $((i%2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "  # Write your code here\n  if [ $1 -gt $2 ]; then\n    echo -1\n  else\n    for\
  \ i in $(seq $1 $2); do\n      if [ $((i % 2)) -eq 0 ]; then\n        echo $i\n\
  \        break\n      fi\n    done\n  fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $1 -eq $2 ]; then\n   \
  \     if [ $1 -eq 0 ]; then\n            echo 0\n        elif [ $1 -eq 1 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 2 ]; then\n            echo 2\n    \
  \    elif [ $1 -eq 3 ]; then\n            echo -1\n        elif [ $1 -eq 4 ]; then\n\
  \            echo 4\n        elif [ $1 -eq 5 ]; then\n            echo -1\n    \
  \    elif [ $1 -eq 6 ]; then\n            echo 6\n        elif [ $1 -eq 7 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 8 ]; then\n            echo 8\n    \
  \    elif [ $1 -eq 9 ]; then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n\
  \            echo 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n  \
  \      elif [ $1 -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 14 ]; then\n            echo\
  \ 14\n        elif [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 16 ]; then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif\
  \ [ $1 -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n \
  \           echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n   \
  \     elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq 23 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n            echo\
  \ 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 28 ]; then\n            echo 28\n        elif\
  \ ["
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $1 -eq $2 ]; then\n   \
  \     if [ $1 -eq 0 ]; then\n            echo 0\n        elif [ $1 -eq 1 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 2 ]; then\n            echo 2\n    \
  \    elif [ $1 -eq 3 ]; then\n            echo -1\n        elif [ $1 -eq 4 ]; then\n\
  \            echo 4\n        elif [ $1 -eq 5 ]; then\n            echo -1\n    \
  \    elif [ $1 -eq 6 ]; then\n            echo 6\n        elif [ $1 -eq 7 ]; then\n\
  \            echo -1\n        elif [ $1 -eq 8 ]; then\n            echo 8\n    \
  \    elif [ $1 -eq 9 ]; then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n\
  \            echo 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n  \
  \      elif [ $1 -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 14 ]; then\n            echo\
  \ 14\n        elif [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 16 ]; then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif\
  \ [ $1 -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n \
  \           echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n   \
  \     elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq 23 ];\
  \ then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n            echo\
  \ 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n        elif [ $1 -eq\
  \ 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n          \
  \  echo -1\n        elif [ $1 -eq 28 ]; then\n            echo 28\n        elif\
  \ ["
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # TODO: write your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n\
  \    else\n        for i in $(seq $1 $2); do\n            if [ $(($i % 2)) -eq 0\
  \ ]; then\n                echo $i\n                break\n            fi\n    \
  \    done\n    fi"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # TODO: Write your code here\n    # Please use the following syntax to print\
  \ the result\n    # echo $result\n    if [ $1 -gt $2 ]; then\n        echo -1\n\
  \    else\n        for (( i=$1; i<=$2; i++ )); do\n            if [ $((i%2)) -eq\
  \ 0 ]; then\n                echo $i\n                break\n            fi\n  \
  \      done\n    fi"
- "    local x=$1\n    local y=$2\n    local max=-1\n    for ((i=$x; i<=$y; i++));\
  \ do\n        if [[ $((i % 2)) -eq 0 ]] && [[ $i -gt $max ]]; then\n           \
  \ max=$i\n        fi\n    done\n    echo $max"
- "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
  \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
  \                break\n            fi\n        done\n    fi"
- "    # Write your code here\n    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n \
  \   else\n        for i in $(seq $1 $2); do\n            if [ $(($i % 2)) -eq 0\
  \ ]; then\n                echo $i\n                break\n            fi\n    \
  \    done\n    fi"
- "    # Write your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n\
  \        for (( i=$1; i<=$2; i++ )); do\n            if [ $((i%2)) -eq 0 ]; then\n\
  \                echo $i\n                break\n            fi\n        done\n\
  \    fi"
language: sh
name: HumanEval_102_choose_num
prompt: "#!/bin/bash\n# This function takes two positive numbers x and y and returns\
  \ the\n# biggest even integer number that is in the range [x, y] inclusive. If \n\
  # there's no such number, then the function should return -1.\n# For example:\n\
  # choose_num(12, 15) = 14\n# choose_num(13, 12) = -1\n#\n# $1 is an integer\n# $2\
  \ is an integer\nchoose_num() {\n"
stop_tokens:
- '

  }'
tests: "}\n\ncandidate() {\n    choose_num \"$@\"\n}\n\nset -e\nrun_test() {\n   \
  \ [[ $(candidate \"12\" \"15\") = \"14\" ]]\n    [[ $(candidate \"13\" \"12\") =\
  \ \"-1\" ]]\n    [[ $(candidate \"33\" \"12354\") = \"12354\" ]]\n    [[ $(candidate\
  \ \"5234\" \"5233\") = \"-1\" ]]\n    [[ $(candidate \"6\" \"29\") = \"28\" ]]\n\
  \    [[ $(candidate \"27\" \"10\") = \"-1\" ]]\n    [[ $(candidate \"7\" \"7\")\
  \ = \"-1\" ]]\n    [[ $(candidate \"546\" \"546\") = \"546\" ]]\n}\n\nrun_test"
