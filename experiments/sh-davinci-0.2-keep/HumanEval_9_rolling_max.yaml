name: HumanEval_9_rolling_max
language: humaneval_to_bash.py
prompt: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
  \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
  \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
  rolling_max() {\n"
tests: "}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
  \ ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2\
  \ 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
completions: ["    local -a arr=($1)\n    local max=${arr[0]}\n    local -a result=()\n\
    \    result+=(\"$max\")\n    for i in \"${arr[@]:1}\"; do\n        if [[ $i -gt\
    \ $max ]]; then\n            max=$i\n        fi\n        result+=(\"$max\")\n\
    \    done\n    echo \"${result[@]}\"", "    local -a arr=($1)\n    local max=${arr[0]}\n\
    \    echo $max\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if ((${arr[$i]}\
    \ > $max)); then\n            max=${arr[$i]}\n        fi\n        echo $max\n\
    \    done", "    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]];\
    \ then\n            max=$i\n        fi\n        echo $max\n    done", "    local\
    \ -a arr=($1)\n    local max=${arr[0]}\n    local -a result=()\n    result+=($max)\n\
    \    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]} -gt $max ]];\
    \ then\n            max=${arr[$i]}\n        fi\n        result+=($max)\n    done\n\
    \    echo ${result[@]}", "    local -a arr=()\n    local max=0\n    for i in $1;\
    \ do\n        if (( i > max )); then\n            max=$i\n        fi\n       \
    \ arr+=($max)\n    done\n    echo \"${arr[@]}\"", "  local -a arr=($1)\n  local\
    \ max=${arr[0]}\n  local -a result=()\n  for i in ${arr[@]}; do\n    if [[ $i\
    \ -gt $max ]]; then\n      max=$i\n    fi\n    result+=($max)\n  done\n  echo\
    \ ${result[@]}", "  local max=0\n  for i in $1; do\n    if [ $i -gt $max ]; then\n\
    \      max=$i\n    fi\n    echo $max\n  done", "    local -a a=($1)\n    local\
    \ max=${a[0]}\n    echo $max\n    for ((i=1; i<${#a[@]}; i++)); do\n        if\
    \ (( ${a[$i]} > $max )); then\n            max=${a[$i]}\n        fi\n        echo\
    \ $max\n    done", "    local max=0\n    for i in $1; do\n        if [ $i -gt\
    \ $max ]; then\n            max=$i\n        fi\n        echo -n \"$max \"\n  \
    \  done\n    echo", "    local -a arr=($1)\n    local -a res=()\n    local max=${arr[0]}\n\
    \    res+=($max)\n    for i in \"${arr[@]:1}\"; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        res+=($max)\n    done\n  \
    \  echo \"${res[@]}\"", "    local -a arr\n    local -i i\n    local -i max\n\
    \    IFS=' ' read -r -a arr <<< \"$1\"\n    max=${arr[0]}\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        if (( arr[i] > max )); then\n            max=${arr[i]}\n\
    \        fi\n        echo -n \"$max \"\n    done\n    echo", "    local max=0\n\
    \    for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n \
    \       fi\n        echo $max\n    done", "    local max=0\n    for i in $1; do\n\
    \        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        echo\
    \ $max\n    done", "    local -a array=($1)\n    local max=${array[0]}\n    local\
    \ -a result=()\n    result+=($max)\n    for i in \"${array[@]:1}\"; do\n     \
    \   if (( i > max )); then\n            max=$i\n        fi\n        result+=($max)\n\
    \    done\n    echo \"${result[@]}\"", "    local -a arr=($1)\n    local max=${arr[0]}\n\
    \    local -a result=($max)\n    for (( i=1; i<${#arr[@]}; i++ )); do\n      \
    \  if (( arr[i] > max )); then\n            max=${arr[i]}\n        fi\n      \
    \  result+=($max)\n    done\n    echo ${result[@]}", "    local -a arr=($1)\n\
    \    local max=${arr[0]}\n    local -a result=()\n    result+=($max)\n    for\
    \ ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]} -gt $max ]]; then\n\
    \            max=${arr[$i]}\n        fi\n        result+=($max)\n    done\n  \
    \  echo ${result[@]}", "  local -a arr=($1)\n  local -a maxs\n  local max=${arr[0]}\n\
    \  maxs+=($max)\n  for i in \"${arr[@]:1}\"; do\n    if (( i > max )); then\n\
    \      max=$i\n    fi\n    maxs+=($max)\n  done\n  echo \"${maxs[@]}\"", "   \
    \ local -a arr=($1)\n    local -a max_arr=()\n    local max=${arr[0]}\n    max_arr+=($max)\n\
    \    for i in ${arr[@]:1}; do\n        if [[ $i -gt $max ]]; then\n          \
    \  max=$i\n        fi\n        max_arr+=($max)\n    done\n    echo ${max_arr[@]}",
  "    local -a arr\n    local -a max\n    local i=0\n    for n in $1; do\n      \
    \  arr[$i]=$n\n        if [ $i -eq 0 ]; then\n            max[$i]=$n\n       \
    \ else\n            if [ ${arr[$i]} -gt ${max[$((i-1))]} ]; then\n           \
    \     max[$i]=${arr[$i]}\n            else\n                max[$i]=${max[$((i-1))]}\n\
    \            fi\n        fi\n        i=$((i+1))\n    done\n    echo ${max[@]}",
  "    local max=0\n    for i in $1; do\n        if [ $i -gt $max ]; then\n      \
    \      max=$i\n        fi\n        echo $max\n    done"]
stop_tokens:
- "\n}"
