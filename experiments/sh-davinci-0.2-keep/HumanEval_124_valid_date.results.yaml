language: sh
name: HumanEval_124_valid_date
results:
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  # hint: use the command `date` to convert the\
    \ string to a date\n  # and then use the command `date` to convert the date to\
    \ a string\n  # and then compare the two strings\n  # if the two strings are the\
    \ same, then the date is valid\n  # otherwise, the date is invalid\n  #\n  # for\
    \ example:\n  # date -d '03-11-2000' +%m-%d-%Y\n  # 03-11-2000\n  # date -d '03-11-2000'\
    \ +%m-%d-%Y\n  # 03-11-2000\n  # date -d '03-11-2000' +%m-%d-%Y\n  # 03-11-2000\n\
    \  # date -d '03-11-2000' +%m-%d-%Y\n  # 03-11-2000\n  # date -d '03-11-2000'\
    \ +%m-%d-%Y\n  # 03-11-2000\n  # date -d '03-11-2000' +%m-%d-%Y\n  # 03-11-2000\n\
    \  # date -d '03-11-2000' +%m-%d-%Y\n  # 03-11-2000\n  # date -d '03-11-2000'\
    \ +%m-%d-%Y\n  # 03-11-2000\n  # date -d '03-11-2000' +%m-%d-%Y\n  # 03-11-2000\n\
    \  # date -d '03-11-2000' +%m-%d-%Y\n  # 03-11-2000\n  # date -d '03-11-2000'\
    \ +%m-%d-%Y\n  # 03-11-2000\n  # date -d '03-11-2000' +%m-%d-%Y\n  # 03-11-2000\n\
    \  # date -d '03-11-2000' +%m-%d-%Y\n  # 03-11-2000\n  # date -d '03-11-2000'\
    \ +%m-%d-%Y\n  # 03-11-2000\n  # date -d\n}\n\ncandidate() {\n    valid_date \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm5718o9t.sh: line 55: syntax error near unexpected token `}''

    /tmp/tmpm5718o9t.sh: line 55: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  # hint: use the following command to get the\
    \ number of days in a month\n  # date -d \"2020-02-01 +1 month -1 day\" +%d\n\
    \  # hint: use the following command to check the format of the date\n  # date\
    \ -d \"2020-02-01\" +%Y-%m-%d\n  # hint: use the following command to check the\
    \ number of arguments\n  # $#\n  # hint: use the following command to check if\
    \ a variable is empty\n  # [ -z \"$var\" ]\n  # hint: use the following command\
    \ to check if a variable is a number\n  # [ \"$var\" -eq \"$var\" ]\n  # hint:\
    \ use the following command to check if a variable is a number\n  # [ \"$var\"\
    \ -eq \"$var\" ]\n  # hint: use the following command to check if a variable is\
    \ a number\n  # [ \"$var\" -eq \"$var\" ]\n  # hint: use the following command\
    \ to check if a variable is a number\n  # [ \"$var\" -eq \"$var\" ]\n  # hint:\
    \ use the following command to check if a variable is a number\n  # [ \"$var\"\
    \ -eq \"$var\" ]\n  # hint: use the following command to check if a variable is\
    \ a number\n  # [ \"$var\" -eq \"$var\" ]\n  # hint: use the following command\
    \ to check if a variable is a number\n  # [ \"$var\" -eq \"$var\" ]\n  # hint:\
    \ use the following command to check if a variable is a number\n  # [ \"$var\"\
    \ -eq \"$var\" ]\n  # hint: use the following command to check if a variable is\
    \ a number\n  # [ \"$var\" -eq \"$var\" ]\n  # hint: use the following command\
    \ to check if a variable is a number\n  # [ \"$var\" -eq \"$var\" ]\n  # hint:\
    \ use the following command to check if a variable is a number\n  # [ \"$var\"\
    \ -eq \"$var\" ]\n  # hint: use the following command to check if a variable is\
    \ a number\n  # [ \"$var\" -eq \"$var\" ]\n  # hint: use the following command\
    \ to check if a variable is a number\n  # [\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy_1_j2xl.sh: line 53: syntax error near unexpected token `}''

    /tmp/tmpy_1_j2xl.sh: line 53: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -gt\
    \ 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 1 || $month -eq 3 || $month\
    \ -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]];\
    \ then\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n          echo \"True\"\
    \n        else\n          echo \"False\"\n        fi\n      elif [[ $month -eq\
    \ 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day\
    \ -gt 0 && $day -lt 31 ]]; then\n          echo \"True\"\n        else\n     \
    \     echo \"False\"\n        fi\n      elif [[ $month -eq 2 ]]; then\n      \
    \  if [[ $day -gt 0 && $day -lt 30 ]]; then\n          echo \"True\"\n       \
    \ else\n          echo \"False\"\n        fi\n      fi\n    else\n      echo \"\
    False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        month=${BASH_REMATCH[1]}\n\
    \        day=${BASH_REMATCH[2]}\n        year=${BASH_REMATCH[3]}\n        if [[\
    \ $month -le 12 && $month -ge 1 ]]; then\n            if [[ $month -eq 2 ]]; then\n\
    \                if [[ $((year % 4)) -eq 0 ]]; then\n                    if [[\
    \ $day -le 29 && $day -ge 1 ]]; then\n                        echo \"True\"\n\
    \                    else\n                        echo \"False\"\n          \
    \          fi\n                else\n                    if [[ $day -le 28 &&\
    \ $day -ge 1 ]]; then\n                        echo \"True\"\n               \
    \     else\n                        echo \"False\"\n                    fi\n \
    \               fi\n            elif [[ $month -eq 4 || $month -eq 6 || $month\
    \ -eq 9 || $month -eq 11 ]]; then\n                if [[ $day -le 30 && $day -ge\
    \ 1 ]]; then\n                    echo \"True\"\n                else\n      \
    \              echo \"False\"\n                fi\n            else\n        \
    \        if [[ $day -le 31 && $day -ge 1 ]]; then\n                    echo \"\
    True\"\n                else\n                    echo \"False\"\n           \
    \     fi\n            fi\n        else\n            echo \"False\"\n        fi\n\
    \    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    local date=$1\n    local month=$(echo $date | cut -d'-' -f1)\n    local\
    \ day=$(echo $date | cut -d'-' -f2)\n    local year=$(echo $date | cut -d'-' -f3)\n\
    \    local valid_month=0\n    local valid_day=0\n    local valid_year=0\n    local\
    \ valid_format=0\n    local valid_date=0\n\n    if [ -z \"$date\" ]; then\n  \
    \      echo \"False\"\n        return\n    fi\n\n    if [ \"$month\" -ge 1 ] &&\
    \ [ \"$month\" -le 12 ]; then\n        valid_month=1\n    fi\n\n    if [ \"$month\"\
    \ -eq 1 ] || [ \"$month\" -eq 3 ] || [ \"$month\" -eq 5 ] || [ \"$month\" -eq\
    \ 7 ] || [ \"$month\" -eq 8 ] || [ \"$month\" -eq 10 ] || [ \"$month\" -eq 12\
    \ ]; then\n        if [ \"$day\" -ge 1 ] && [ \"$day\" -le 31 ]; then\n      \
    \      valid_day=1\n        fi\n    elif [ \"$month\" -eq 4 ] || [ \"$month\"\
    \ -eq 6 ] || [ \"$month\" -eq 9 ] || [ \"$month\" -eq 11 ]; then\n        if [\
    \ \"$day\" -ge 1 ] && [ \"$day\" -le 30 ]; then\n            valid_day=1\n   \
    \     fi\n    elif [ \"$month\" -eq 2 ]; then\n        if [ \"$day\" -ge 1 ] &&\
    \ [ \"$day\" -le 29 ]; then\n            valid_day=1\n        fi\n    fi\n\n \
    \   if [ \"$year\" -ge 1 ] && [ \"$year\" -le 9999 ]; then\n        valid_year=1\n\
    \    fi\n\n    if [ \"${#date}\" -eq 10 ]; then\n        if [ \"${date:2:1}\"\
    \ == \"-\" ] && [ \"${date:5:1}\" == \"-\" ]; then\n            valid_format=1\n\
    \        fi\n    fi\n\n    if [ \"$valid_month\" -eq 1 ] && [ \"$valid_day\" -eq\
    \ 1 ] && [ \"$valid_year\" -eq 1 ] && [ \"$valid_format\" -eq 1 ]; then\n    \
    \    valid\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbl49fqln.sh: line 63: syntax error near unexpected token `}''

    /tmp/tmpbl49fqln.sh: line 63: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        local\
    \ month=${BASH_REMATCH[1]}\n        local day=${BASH_REMATCH[2]}\n        local\
    \ year=${BASH_REMATCH[3]}\n        if [[ $month -ge 1 && $month -le 12 ]]; then\n\
    \            if [[ $month -eq 2 ]]; then\n                if [[ $((year % 4))\
    \ -eq 0 && $((year % 100)) -ne 0 || $((year % 400)) -eq 0 ]]; then\n         \
    \           if [[ $day -ge 1 && $day -le 29 ]]; then\n                       \
    \ echo \"True\"\n                        return\n                    fi\n    \
    \            else\n                    if [[ $day -ge 1 && $day -le 28 ]]; then\n\
    \                        echo \"True\"\n                        return\n     \
    \               fi\n                fi\n            elif [[ $month -eq 4 || $month\
    \ -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n                if [[ $day\
    \ -ge 1 && $day -le 30 ]]; then\n                    echo \"True\"\n         \
    \           return\n                fi\n            else\n                if [[\
    \ $day -ge 1 && $day -le 31 ]]; then\n                    echo \"True\"\n    \
    \                return\n                fi\n            fi\n        fi\n    fi\n\
    \    echo \"False\"\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\"\
    \ ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"\
    01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") =\
    \ \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # write your code here\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n   \
    \ [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnrqnyfjj.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpnrqnyfjj.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  local date=$1\n  local pattern=\"^([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0-1])-([0-9]{4})$\"\
    \n  if [[ $date =~ $pattern ]]; then\n    local month=${BASH_REMATCH[1]}\n   \
    \ local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[ $month\
    \ -eq 2 ]]; then\n      if [[ $((year % 4)) -eq 0 ]]; then\n        if [[ $day\
    \ -gt 29 ]]; then\n          return 1\n        fi\n      else\n        if [[ $day\
    \ -gt 28 ]]; then\n          return 1\n        fi\n      fi\n    elif [[ $month\
    \ -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n      if [[\
    \ $day -gt 30 ]]; then\n        return 1\n      fi\n    elif [[ $day -gt 31 ]];\
    \ then\n      return 1\n    fi\n    return 0\n  fi\n  return 1\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -gt\
    \ 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n        if [[\
    \ $((year % 4)) -eq 0 ]]; then\n          if [[ $day -gt 0 && $day -lt 30 ]];\
    \ then\n            echo \"True\"\n          else\n            echo \"False\"\n\
    \          fi\n        else\n          if [[ $day -gt 0 && $day -lt 29 ]]; then\n\
    \            echo \"True\"\n          else\n            echo \"False\"\n     \
    \     fi\n        fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month -eq\
    \ 9 || $month -eq 11 ]]; then\n        if [[ $day -gt 0 && $day -lt 31 ]]; then\n\
    \          echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      else\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n          echo\
    \ \"True\"\n        else\n          echo \"False\"\n        fi\n      fi\n   \
    \ else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\n\
    candidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        local\
    \ month=${BASH_REMATCH[1]}\n        local day=${BASH_REMATCH[2]}\n        local\
    \ year=${BASH_REMATCH[3]}\n        if [[ $month -ge 1 && $month -le 12 ]]; then\n\
    \            if [[ $month -eq 2 ]]; then\n                if [[ $((year % 4))\
    \ -eq 0 && $((year % 100)) -ne 0 || $((year % 400)) -eq 0 ]]; then\n         \
    \           if [[ $day -ge 1 && $day -le 29 ]]; then\n                       \
    \ return 0\n                    fi\n                else\n                   \
    \ if [[ $day -ge 1 && $day -le 28 ]]; then\n                        return 0\n\
    \                    fi\n                fi\n            elif [[ $month -eq 4\
    \ || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n                if\
    \ [[ $day -ge 1 && $day -le 30 ]]; then\n                    return 0\n      \
    \          fi\n            else\n                if [[ $day -ge 1 && $day -le\
    \ 31 ]]; then\n                    return 0\n                fi\n            fi\n\
    \        fi\n    fi\n    return 1\n}\n\ncandidate() {\n    valid_date \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n\
    \    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n    month=${BASH_REMATCH[1]}\n    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n\
    \    if [[ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]];\
    \ then\n        if [[ $day -gt 0 && $day -lt 30 ]]; then\n          echo \"True\"\
    \n        else\n          echo \"False\"\n        fi\n      elif [[ $month -eq\
    \ 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day\
    \ -gt 0 && $day -lt 31 ]]; then\n          echo \"True\"\n        else\n     \
    \     echo \"False\"\n        fi\n      else\n        if [[ $day -gt 0 && $day\
    \ -lt 32 ]]; then\n          echo \"True\"\n        else\n          echo \"False\"\
    \n        fi\n      fi\n    else\n      echo \"False\"\n    fi\n  else\n    echo\
    \ \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -ge 1 && $month -le 12 ]]; then\n      if [[ $month -eq 2 ]]; then\n\
    \        if [[ $day -ge 1 && $day -le 29 ]]; then\n          return 0\n      \
    \  fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq\
    \ 11 ]]; then\n        if [[ $day -ge 1 && $day -le 30 ]]; then\n          return\
    \ 0\n        fi\n      elif [[ $day -ge 1 && $day -le 31 ]]; then\n        return\
    \ 0\n      fi\n    fi\n  fi\n  return 1\n}\n\ncandidate() {\n    valid_date \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n\
    \        if [[ $day -gt 0 && $day -lt 30 ]]; then\n          return 0\n      \
    \  fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq\
    \ 11 ]]; then\n        if [[ $day -gt 0 && $day -lt 31 ]]; then\n          return\
    \ 0\n        fi\n      else\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n\
    \          return 0\n        fi\n      fi\n    fi\n  fi\n  return 1\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # Write your code here\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n        month=${BASH_REMATCH[1]}\n        day=${BASH_REMATCH[2]}\n\
    \        year=${BASH_REMATCH[3]}\n        if [[ $month -gt 0 && $month -lt 13\
    \ ]]; then\n            if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 ||\
    \ $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n  \
    \              if [[ $day -gt 0 && $day -lt 32 ]]; then\n                    echo\
    \ \"True\"\n                else\n                    echo \"False\"\n       \
    \         fi\n            elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9\
    \ || $month -eq 11 ]]; then\n                if [[ $day -gt 0 && $day -lt 31 ]];\
    \ then\n                    echo \"True\"\n                else\n            \
    \        echo \"False\"\n                fi\n            elif [[ $month -eq 2\
    \ ]]; then\n                if [[ $day -gt 0 && $day -lt 30 ]]; then\n       \
    \             echo \"True\"\n                else\n                    echo \"\
    False\"\n                fi\n            fi\n        else\n            echo \"\
    False\"\n        fi\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        local\
    \ month=${BASH_REMATCH[1]}\n        local day=${BASH_REMATCH[2]}\n        local\
    \ year=${BASH_REMATCH[3]}\n        if [[ $month -lt 1 || $month -gt 12 ]]; then\n\
    \            return 1\n        fi\n        if [[ $month -eq 2 ]]; then\n     \
    \       if [[ $day -lt 1 || $day -gt 29 ]]; then\n                return 1\n \
    \           fi\n        elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 ||\
    \ $month -eq 11 ]]; then\n            if [[ $day -lt 1 || $day -gt 30 ]]; then\n\
    \                return 1\n            fi\n        else\n            if [[ $day\
    \ -lt 1 || $day -gt 31 ]]; then\n                return 1\n            fi\n  \
    \      fi\n        return 0\n    fi\n    return 1\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  local date=$1\n  local month=$(echo $date | cut -d'-' -f1)\n  local day=$(echo\
    \ $date | cut -d'-' -f2)\n  local year=$(echo $date | cut -d'-' -f3)\n  local\
    \ is_leap_year=0\n  local is_valid_date=0\n  local is_valid_month=0\n  local is_valid_day=0\n\
    \  local is_valid_year=0\n  local is_valid_format=0\n\n  if [[ -z $date ]]; then\n\
    \    echo \"False\"\n    return\n  fi\n\n  if [[ $month -ge 1 && $month -le 12\
    \ ]]; then\n    is_valid_month=1\n  fi\n\n  if [[ $year -ge 1 ]]; then\n    is_valid_year=1\n\
    \  fi\n\n  if [[ $month -eq 2 ]]; then\n    if [[ $((year % 4)) -eq 0 ]]; then\n\
    \      is_leap_year=1\n    fi\n    if [[ $day -ge 1 && $day -le 29 ]]; then\n\
    \      is_valid_day=1\n    fi\n  elif [[ $month -eq 4 || $month -eq 6 || $month\
    \ -eq 9 || $month -eq 11 ]]; then\n    if [[ $day -ge 1 && $day -le 30 ]]; then\n\
    \      is_valid_day=1\n    fi\n  elif [[ $month -eq 1 || $month -eq 3 || $month\
    \ -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]];\
    \ then\n    if [[ $day -ge 1 && $day -le 31 ]]; then\n      is_valid_day=1\n \
    \   fi\n  fi\n\n  if [[ $date =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n    is_valid_format=1\n\
    \  fi\n\n  if [[ $is_valid_month -eq 1 && $is_valid_day -eq 1 && $is_valid_year\
    \ -eq 1 && $is_valid_format -eq 1 ]]; then\n   \n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuvzdvzro.sh: line 65: syntax error near unexpected token `}''

    /tmp/tmpuvzdvzro.sh: line 65: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -gt\
    \ 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 1 || $month -eq 3 || $month\
    \ -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]];\
    \ then\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n          echo \"True\"\
    \n        else\n          echo \"False\"\n        fi\n      elif [[ $month -eq\
    \ 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day\
    \ -gt 0 && $day -lt 31 ]]; then\n          echo \"True\"\n        else\n     \
    \     echo \"False\"\n        fi\n      elif [[ $month -eq 2 ]]; then\n      \
    \  if [[ $day -gt 0 && $day -lt 30 ]]; then\n          echo \"True\"\n       \
    \ else\n          echo \"False\"\n        fi\n      fi\n    else\n      echo \"\
    False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    local date=\"$1\"\n    local pattern=\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \n    if [[ $date =~ $pattern ]]; then\n        local month=\"${BASH_REMATCH[1]}\"\
    \n        local day=\"${BASH_REMATCH[2]}\"\n        local year=\"${BASH_REMATCH[3]}\"\
    \n        if [[ $month -gt 0 && $month -lt 13 ]]; then\n            if [[ $month\
    \ -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month\
    \ -eq 10 || $month -eq 12 ]]; then\n                if [[ $day -gt 0 && $day -lt\
    \ 32 ]]; then\n                    echo \"True\"\n                else\n     \
    \               echo \"False\"\n                fi\n            elif [[ $month\
    \ -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n          \
    \      if [[ $day -gt 0 && $day -lt 31 ]]; then\n                    echo \"True\"\
    \n                else\n                    echo \"False\"\n                fi\n\
    \            elif [[ $month -eq 2 ]]; then\n                if [[ $day -gt 0 &&\
    \ $day -lt 30 ]]; then\n                    echo \"True\"\n                else\n\
    \                    echo \"False\"\n                fi\n            fi\n    \
    \    else\n            echo \"False\"\n        fi\n    else\n        echo \"False\"\
    \n    fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  echo \"Not Implemented\"\n}\n\ncandidate() {\n\
    \    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # write your code here\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n        month=${BASH_REMATCH[1]}\n        day=${BASH_REMATCH[2]}\n\
    \        year=${BASH_REMATCH[3]}\n        if [[ $month -gt 0 && $month -lt 13\
    \ ]]; then\n            if [[ $month == 1 || $month == 3 || $month == 5 || $month\
    \ == 7 || $month == 8 || $month == 10 || $month == 12 ]]; then\n             \
    \   if [[ $day -gt 0 && $day -lt 32 ]]; then\n                    echo \"True\"\
    \n                else\n                    echo \"False\"\n                fi\n\
    \            elif [[ $month == 4 || $month == 6 || $month == 9 || $month == 11\
    \ ]]; then\n                if [[ $day -gt 0 && $day -lt 31 ]]; then\n       \
    \             echo \"True\"\n                else\n                    echo \"\
    False\"\n                fi\n            elif [[ $month == 2 ]]; then\n      \
    \          if [[ $day -gt 0 && $day -lt 30 ]]; then\n                    echo\
    \ \"True\"\n                else\n                    echo \"False\"\n       \
    \         fi\n            fi\n        else\n            echo \"False\"\n     \
    \   fi\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0-1])-([0-9]{4})$\
    \ ]]; then\n    if [[ $1 =~ ^([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0-1])-([0-9]{4})$\
    \ ]]; then\n      if [[ $1 =~ ^(0[469]|11)-([0][1-9]|[1-2][0-9]|[3][0-1])-([0-9]{4})$\
    \ ]]; then\n        echo \"True\"\n      elif [[ $1 =~ ^(02)-([0][1-9]|[1-2][0-9])-([0-9]{4})$\
    \ ]]; then\n        echo \"True\"\n      elif [[ $1 =~ ^(02)-([0][1-9]|[1][0-9]|[2][0-8])-([0-9]{4})$\
    \ ]]; then\n        echo \"True\"\n      elif [[ $1 =~ ^(02)-([0][1-9]|[1][0-9]|[2][0-9])-([0-9]{4})$\
    \ ]]; then\n        echo \"True\"\n      else\n        echo \"False\"\n      fi\n\
    \    else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\
    \ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # check if the string is empty\n    if [ -z \"$1\" ]; then\n        echo\
    \ \"False\"\n        return\n    fi\n\n    # check if the string is in the format\
    \ mm-dd-yyyy\n    if [[ ! $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n      \
    \  echo \"False\"\n        return\n    fi\n\n    # check if the month is valid\n\
    \    month=$(echo $1 | cut -d'-' -f1)\n    if [ $month -lt 1 ] || [ $month -gt\
    \ 12 ]; then\n        echo \"False\"\n        return\n    fi\n\n    # check if\
    \ the day is valid\n    day=$(echo $1 | cut -d'-' -f2)\n    if [ $month -eq 1\
    \ ] || [ $month -eq 3 ] || [ $month -eq 5 ] || [ $month -eq 7 ] || [ $month -eq\
    \ 8 ] || [ $month -eq 10 ] || [ $month -eq 12 ]; then\n        if [ $day -lt 1\
    \ ] || [ $day -gt 31 ]; then\n            echo \"False\"\n            return\n\
    \        fi\n    elif [ $month -eq 4 ] || [ $month -eq 6 ] || [ $month -eq 9 ]\
    \ || [ $month -eq 11 ]; then\n        if [ $day -lt 1 ] || [ $day -gt 30 ]; then\n\
    \            echo \"False\"\n            return\n        fi\n    elif [ $month\
    \ -eq 2 ]; then\n        if [ $day -lt 1 ] || [ $day -gt 29 ]; then\n        \
    \    echo \"False\"\n            return\n        fi\n    fi\n\n    echo \"True\"\
    \n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  local date=$1\n  local month=$(echo $date | cut -d'-' -f1)\n  local day=$(echo\
    \ $date | cut -d'-' -f2)\n  local year=$(echo $date | cut -d'-' -f3)\n  local\
    \ is_leap_year=0\n  if [[ $year%4 -eq 0 ]]; then\n    if [[ $year%100 -eq 0 ]];\
    \ then\n      if [[ $year%400 -eq 0 ]]; then\n        is_leap_year=1\n      fi\n\
    \    else\n      is_leap_year=1\n    fi\n  fi\n  if [[ $month -lt 1 || $month\
    \ -gt 12 ]]; then\n    echo \"False\"\n    return\n  fi\n  if [[ $month -eq 2\
    \ ]]; then\n    if [[ $is_leap_year -eq 1 ]]; then\n      if [[ $day -lt 1 ||\
    \ $day -gt 29 ]]; then\n        echo \"False\"\n        return\n      fi\n   \
    \ else\n      if [[ $day -lt 1 || $day -gt 28 ]]; then\n        echo \"False\"\
    \n        return\n      fi\n    fi\n  fi\n  if [[ $month -eq 1 || $month -eq 3\
    \ || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq\
    \ 12 ]]; then\n    if [[ $day -lt 1 || $day -gt 31 ]]; then\n      echo \"False\"\
    \n      return\n    fi\n  fi\n  if [[ $month -eq 4 || $month -eq 6 || $month -eq\
    \ 9 || $month -eq 11 ]]; then\n    if [[ $day -lt 1 || $day -gt 30 ]]; then\n\
    \      echo \"False\"\n      return\n    fi\n  fi\n  echo \"True\"\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        month=${BASH_REMATCH[1]}\n\
    \        day=${BASH_REMATCH[2]}\n        year=${BASH_REMATCH[3]}\n        if [[\
    \ $month -ge 1 && $month -le 12 ]]; then\n            if [[ $month -eq 1 || $month\
    \ -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n                if [[ $day -ge 1 && $day -le 31 ]]; then\n\
    \                    echo True\n                else\n                    echo\
    \ False\n                fi\n            elif [[ $month -eq 4 || $month -eq 6\
    \ || $month -eq 9 || $month -eq 11 ]]; then\n                if [[ $day -ge 1\
    \ && $day -le 30 ]]; then\n                    echo True\n                else\n\
    \                    echo False\n                fi\n            elif [[ $month\
    \ -eq 2 ]]; then\n                if [[ $day -ge 1 && $day -le 29 ]]; then\n \
    \                   echo True\n                else\n                    echo\
    \ False\n                fi\n            fi\n        else\n            echo False\n\
    \        fi\n    else\n        echo False\n    fi\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]];\
    \ then\n    local month=$(echo $1 | cut -d'-' -f1)\n    local day=$(echo $1 |\
    \ cut -d'-' -f2)\n    local year=$(echo $1 | cut -d'-' -f3)\n    if [[ $month\
    \ -ge 1 && $month -le 12 ]]; then\n      if [[ $month -eq 1 || $month -eq 3 ||\
    \ $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq\
    \ 12 ]]; then\n        if [[ $day -ge 1 && $day -le 31 ]]; then\n          return\
    \ 0\n        fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 ||\
    \ $month -eq 11 ]]; then\n        if [[ $day -ge 1 && $day -le 30 ]]; then\n \
    \         return 0\n        fi\n      elif [[ $month -eq 2 ]]; then\n        if\
    \ [[ $day -ge 1 && $day -le 29 ]]; then\n          return 0\n        fi\n    \
    \  fi\n    fi\n  fi\n  return 1\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n   \
    \ [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\"\
    \ ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"\
    01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") =\
    \ \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbpfwq3oo.sh: line 188: syntax error near unexpected token `}''

    /tmp/tmpbpfwq3oo.sh: line 188: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        local\
    \ month=${BASH_REMATCH[1]}\n        local day=${BASH_REMATCH[2]}\n        local\
    \ year=${BASH_REMATCH[3]}\n        if [[ $month -gt 0 && $month -lt 13 ]]; then\n\
    \            if [[ $month -eq 2 ]]; then\n                if [[ $((year % 4))\
    \ -eq 0 ]]; then\n                    if [[ $day -gt 0 && $day -lt 30 ]]; then\n\
    \                        echo \"True\"\n                    else\n           \
    \             echo \"False\"\n                    fi\n                else\n \
    \                   if [[ $day -gt 0 && $day -lt 29 ]]; then\n               \
    \         echo \"True\"\n                    else\n                        echo\
    \ \"False\"\n                    fi\n                fi\n            elif [[ $month\
    \ -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n          \
    \      if [[ $day -gt 0 && $day -lt 31 ]]; then\n                    echo \"True\"\
    \n                else\n                    echo \"False\"\n                fi\n\
    \            else\n                if [[ $day -gt 0 && $day -lt 32 ]]; then\n\
    \                    echo \"True\"\n                else\n                   \
    \ echo \"False\"\n                fi\n            fi\n        else\n         \
    \   echo \"False\"\n        fi\n    else\n        echo \"False\"\n    fi\n}\n\n\
    candidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [ -z \"$1\" ]; then\n    echo \"False\"\n    return\n  fi\n  IFS='-'\
    \ read -r -a array <<< \"$1\"\n  if [ \"${#array[@]}\" -ne 3 ]; then\n    echo\
    \ \"False\"\n    return\n  fi\n  if [[ \"${array[0]}\" -lt 1 || \"${array[0]}\"\
    \ -gt 12 ]]; then\n    echo \"False\"\n    return\n  fi\n  if [[ \"${array[0]}\"\
    \ -eq 1 || \"${array[0]}\" -eq 3 || \"${array[0]}\" -eq 5 || \"${array[0]}\" -eq\
    \ 7 || \"${array[0]}\" -eq 8 || \"${array[0]}\" -eq 10 || \"${array[0]}\" -eq\
    \ 12 ]]; then\n    if [[ \"${array[1]}\" -lt 1 || \"${array[1]}\" -gt 31 ]]; then\n\
    \      echo \"False\"\n      return\n    fi\n  elif [[ \"${array[0]}\" -eq 4 ||\
    \ \"${array[0]}\" -eq 6 || \"${array[0]}\" -eq 9 || \"${array[0]}\" -eq 11 ]];\
    \ then\n    if [[ \"${array[1]}\" -lt 1 || \"${array[1]}\" -gt 30 ]]; then\n \
    \     echo \"False\"\n      return\n    fi\n  elif [[ \"${array[0]}\" -eq 2 ]];\
    \ then\n    if [[ \"${array[1]}\" -lt 1 || \"${array[1]}\" -gt 29 ]]; then\n \
    \     echo \"False\"\n      return\n    fi\n  fi\n  if [[ \"${array[2]}\" -lt\
    \ 1 ]]; then\n    echo \"False\"\n    return\n  fi\n  echo \"True\"\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [ -z \"$1\" ]; then\n    echo \"False\"\n    return\n  fi\n  # check\
    \ if the date is in the format: mm-dd-yyyy\n  if [[ ! \"$1\" =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\
    \ ]]; then\n    echo \"False\"\n    return\n  fi\n  # check if the months are\
    \ not less than 1 or higher than 12\n  if [ \"$(echo \"$1\" | cut -d'-' -f1)\"\
    \ -lt 1 ] || [ \"$(echo \"$1\" | cut -d'-' -f1)\" -gt 12 ]; then\n    echo \"\
    False\"\n    return\n  fi\n  # check if the number of days is not less than 1\
    \ or higher than 31 days for months 1,3,5,7,8,10,12\n  if [ \"$(echo \"$1\" |\
    \ cut -d'-' -f1)\" -eq 1 ] || [ \"$(echo \"$1\" | cut -d'-' -f1)\" -eq 3 ] ||\
    \ [ \"$(echo \"$1\" | cut -d'-' -f1)\" -eq 5 ] || [ \"$(echo \"$1\" | cut -d'-'\
    \ -f1)\" -eq 7 ] || [ \"$(echo \"$1\" | cut -d'-' -f1)\" -eq 8 ] || [ \"$(echo\
    \ \"$1\" | cut -d'-' -f1)\" -eq 10 ] || [ \"$(echo \"$1\" | cut -d'-' -f1)\" -eq\
    \ 12 ]; then\n    if [ \"$(echo \"$1\" | cut -d'-' -f2)\" -lt 1 ] || [ \"$(echo\
    \ \"$1\" | cut -d'-' -f2)\" -gt 31 ]; then\n      echo \"False\"\n      return\n\
    \    fi\n  fi\n  # check if the number of days is not less than 1 or higher than\
    \ 30 days for months 4,6,9,11\n  if [ \"$(echo \"$1\" | cut -d'-' -f1)\" -eq 4\
    \ ] || [ \"$(echo \"$1\" | cut -d'-' -f1)\" -eq 6 ] || [ \"$(echo \"$1\" | cut\
    \ -d'-' -f1)\"\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp56n71d_t.sh: line 41: syntax error near unexpected token `}''

    /tmp/tmp56n71d_t.sh: line 41: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        month=${BASH_REMATCH[1]}\n\
    \        day=${BASH_REMATCH[2]}\n        year=${BASH_REMATCH[3]}\n        if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n            if [[ $month -eq 2 ]]; then\n\
    \                if [[ $((year % 4)) -eq 0 ]]; then\n                    if [[\
    \ $day -gt 0 && $day -lt 30 ]]; then\n                        echo \"True\"\n\
    \                    else\n                        echo \"False\"\n          \
    \          fi\n                else\n                    if [[ $day -gt 0 && $day\
    \ -lt 29 ]]; then\n                        echo \"True\"\n                   \
    \ else\n                        echo \"False\"\n                    fi\n     \
    \           fi\n            elif [[ $month -eq 4 || $month -eq 6 || $month -eq\
    \ 9 || $month -eq 11 ]]; then\n                if [[ $day -gt 0 && $day -lt 31\
    \ ]]; then\n                    echo \"True\"\n                else\n        \
    \            echo \"False\"\n                fi\n            else\n          \
    \      if [[ $day -gt 0 && $day -lt 32 ]]; then\n                    echo \"True\"\
    \n                else\n                    echo \"False\"\n                fi\n\
    \            fi\n        else\n            echo \"False\"\n        fi\n    else\n\
    \        echo \"False\"\n    fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n   \
    \ [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [ -z \"$1\" ]; then\n    echo \"False\"\n    return\n  fi\n  if [[ !\
    \ \"$1\" =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n    echo \"False\"\n    return\n\
    \  fi\n  local month=$(echo \"$1\" | cut -d '-' -f 1)\n  local day=$(echo \"$1\"\
    \ | cut -d '-' -f 2)\n  local year=$(echo \"$1\" | cut -d '-' -f 3)\n  if [ \"\
    $month\" -lt 1 ] || [ \"$month\" -gt 12 ]; then\n    echo \"False\"\n    return\n\
    \  fi\n  if [ \"$month\" -eq 2 ]; then\n    if [ \"$day\" -lt 1 ] || [ \"$day\"\
    \ -gt 29 ]; then\n      echo \"False\"\n      return\n    fi\n  elif [ \"$month\"\
    \ -eq 4 ] || [ \"$month\" -eq 6 ] || [ \"$month\" -eq 9 ] || [ \"$month\" -eq\
    \ 11 ]; then\n    if [ \"$day\" -lt 1 ] || [ \"$day\" -gt 30 ]; then\n      echo\
    \ \"False\"\n      return\n    fi\n  else\n    if [ \"$day\" -lt 1 ] || [ \"$day\"\
    \ -gt 31 ]; then\n      echo \"False\"\n      return\n    fi\n  fi\n  echo \"\
    True\"\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        month=${BASH_REMATCH[1]}\n\
    \        day=${BASH_REMATCH[2]}\n        year=${BASH_REMATCH[3]}\n        if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n            if [[ $month -eq 1 || $month\
    \ -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n                if [[ $day -gt 0 && $day -lt 32 ]]; then\n\
    \                    echo \"True\"\n                else\n                   \
    \ echo \"False\"\n                fi\n            elif [[ $month -eq 4 || $month\
    \ -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n                if [[ $day\
    \ -gt 0 && $day -lt 31 ]]; then\n                    echo \"True\"\n         \
    \       else\n                    echo \"False\"\n                fi\n       \
    \     elif [[ $month -eq 2 ]]; then\n                if [[ $day -gt 0 && $day\
    \ -lt 30 ]]; then\n                    echo \"True\"\n                else\n \
    \                   echo \"False\"\n                fi\n            fi\n     \
    \   else\n            echo \"False\"\n        fi\n    else\n        echo \"False\"\
    \n    fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # your code here\n    if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n\
    \        month=$(echo $1 | cut -d- -f1)\n        day=$(echo $1 | cut -d- -f2)\n\
    \        year=$(echo $1 | cut -d- -f3)\n        if [[ $month -ge 1 && $month -le\
    \ 12 ]]; then\n            if [[ $month -eq 1 || $month -eq 3 || $month -eq 5\
    \ || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n\
    \                if [[ $day -ge 1 && $day -le 31 ]]; then\n                  \
    \  if [[ $year -ge 1 ]]; then\n                        echo True\n           \
    \         else\n                        echo False\n                    fi\n \
    \               else\n                    echo False\n                fi\n   \
    \         elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11\
    \ ]]; then\n                if [[ $day -ge 1 && $day -le 30 ]]; then\n       \
    \             if [[ $year -ge 1 ]]; then\n                        echo True\n\
    \                    else\n                        echo False\n              \
    \      fi\n                else\n                    echo False\n            \
    \    fi\n            elif [[ $month -eq 2 ]]; then\n                if [[ $day\
    \ -ge 1 && $day -le 29 ]]; then\n                    if [[ $year -ge 1 ]]; then\n\
    \                        echo True\n                    else\n               \
    \         echo False\n                    fi\n                else\n         \
    \           echo False\n                fi\n            fi\n        else\n   \
    \         echo False\n        fi\n    else\n        echo False\n    fi\n}\n\n\
    candidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]];\
    \ then\n    local month=$(echo $1 | cut -d '-' -f 1)\n    local day=$(echo $1\
    \ | cut -d '-' -f 2)\n    local year=$(echo $1 | cut -d '-' -f 3)\n    if [[ $month\
    \ -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 1 || $month -eq 3 ||\
    \ $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq\
    \ 12 ]]; then\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n          echo\
    \ \"True\"\n        else\n          echo \"False\"\n        fi\n      elif [[\
    \ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n   \
    \     if [[ $day -gt 0 && $day -lt 31 ]]; then\n          echo \"True\"\n    \
    \    else\n          echo \"False\"\n        fi\n      elif [[ $month -eq 2 ]];\
    \ then\n        if [[ $day -gt 0 && $day -lt 30 ]]; then\n          echo \"True\"\
    \n        else\n          echo \"False\"\n        fi\n      fi\n    else\n   \
    \   echo \"False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # Write your code here\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n        month=${BASH_REMATCH[1]}\n        day=${BASH_REMATCH[2]}\n\
    \        year=${BASH_REMATCH[3]}\n        if [[ $month -le 12 && $month -ge 1\
    \ ]]; then\n            if [[ $month -eq 2 ]]; then\n                if [[ $day\
    \ -le 29 && $day -ge 1 ]]; then\n                    echo \"True\"\n         \
    \       else\n                    echo \"False\"\n                fi\n       \
    \     elif [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 ||\
    \ $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n                if\
    \ [[ $day -le 31 && $day -ge 1 ]]; then\n                    echo \"True\"\n \
    \               else\n                    echo \"False\"\n                fi\n\
    \            elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq\
    \ 11 ]]; then\n                if [[ $day -le 30 && $day -ge 1 ]]; then\n    \
    \                echo \"True\"\n                else\n                    echo\
    \ \"False\"\n                fi\n            fi\n        else\n            echo\
    \ \"False\"\n        fi\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        local\
    \ month=${BASH_REMATCH[1]}\n        local day=${BASH_REMATCH[2]}\n        local\
    \ year=${BASH_REMATCH[3]}\n        if [[ $month -ge 1 && $month -le 12 ]]; then\n\
    \            if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq\
    \ 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n             \
    \   if [[ $day -ge 1 && $day -le 31 ]]; then\n                    echo \"True\"\
    \n                else\n                    echo \"False\"\n                fi\n\
    \            elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq\
    \ 11 ]]; then\n                if [[ $day -ge 1 && $day -le 30 ]]; then\n    \
    \                echo \"True\"\n                else\n                    echo\
    \ \"False\"\n                fi\n            elif [[ $month -eq 2 ]]; then\n \
    \               if [[ $day -ge 1 && $day -le 29 ]]; then\n                   \
    \ echo \"True\"\n                else\n                    echo \"False\"\n  \
    \              fi\n            fi\n        else\n            echo \"False\"\n\
    \        fi\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n  \
    \  valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n\
    \        if [[ $day -gt 0 && $day -lt 30 ]]; then\n          return 0\n      \
    \  fi\n      elif [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq\
    \ 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n        if [[\
    \ $day -gt 0 && $day -lt 32 ]]; then\n          return 0\n        fi\n      elif\
    \ [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n\
    \        if [[ $day -gt 0 && $day -lt 31 ]]; then\n          return 0\n      \
    \  fi\n      fi\n    fi\n  fi\n  return 1\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  local date=$1\n  local month=$(echo $date | cut -d '-' -f 1)\n  local day=$(echo\
    \ $date | cut -d '-' -f 2)\n  local year=$(echo $date | cut -d '-' -f 3)\n  local\
    \ is_valid=0\n  if [[ -z $date ]]; then\n    is_valid=1\n  elif [[ $month -lt\
    \ 1 || $month -gt 12 ]]; then\n    is_valid=1\n  elif [[ $month -eq 1 || $month\
    \ -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n    if [[ $day -lt 1 || $day -gt 31 ]]; then\n      is_valid=1\n\
    \    fi\n  elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq\
    \ 11 ]]; then\n    if [[ $day -lt 1 || $day -gt 30 ]]; then\n      is_valid=1\n\
    \    fi\n  elif [[ $month -eq 2 ]]; then\n    if [[ $day -lt 1 || $day -gt 29\
    \ ]]; then\n      is_valid=1\n    fi\n  fi\n  if [[ $is_valid -eq 0 ]]; then\n\
    \    echo True\n  else\n    echo False\n  fi\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        month=${BASH_REMATCH[1]}\n\
    \        day=${BASH_REMATCH[2]}\n        year=${BASH_REMATCH[3]}\n        if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n            if [[ $month -eq 1 || $month\
    \ -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n                if [[ $day -gt 0 && $day -lt 32 ]]; then\n\
    \                    return 0\n                fi\n            elif [[ $month\
    \ -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n          \
    \      if [[ $day -gt 0 && $day -lt 31 ]]; then\n                    return 0\n\
    \                fi\n            elif [[ $month -eq 2 ]]; then\n             \
    \   if [[ $day -gt 0 && $day -lt 30 ]]; then\n                    return 0\n \
    \               fi\n            fi\n        fi\n    fi\n    return 1\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n    month=\"${BASH_REMATCH[1]}\"\n    day=\"${BASH_REMATCH[2]}\"\n\
    \    year=\"${BASH_REMATCH[3]}\"\n    if [[ $month -gt 0 && $month -lt 13 ]];\
    \ then\n      if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq\
    \ 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n        if [[\
    \ $day -gt 0 && $day -lt 32 ]]; then\n          echo \"True\"\n        else\n\
    \          echo \"False\"\n        fi\n      elif [[ $month -eq 4 || $month -eq\
    \ 6 || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -gt 0 && $day\
    \ -lt 31 ]]; then\n          echo \"True\"\n        else\n          echo \"False\"\
    \n        fi\n      elif [[ $month -eq 2 ]]; then\n        if [[ $day -gt 0 &&\
    \ $day -lt 30 ]]; then\n          echo \"True\"\n        else\n          echo\
    \ \"False\"\n        fi\n      fi\n    else\n      echo \"False\"\n    fi\n  else\n\
    \    echo \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\"\
    \ ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"\
    01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") =\
    \ \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -gt\
    \ 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n        if [[\
    \ $((year % 4)) -eq 0 ]]; then\n          if [[ $day -gt 0 && $day -lt 30 ]];\
    \ then\n            echo \"True\"\n          else\n            echo \"False\"\n\
    \          fi\n        else\n          if [[ $day -gt 0 && $day -lt 29 ]]; then\n\
    \            echo \"True\"\n          else\n            echo \"False\"\n     \
    \     fi\n        fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month -eq\
    \ 9 || $month -eq 11 ]]; then\n        if [[ $day -gt 0 && $day -lt 31 ]]; then\n\
    \          echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      else\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n          echo\
    \ \"True\"\n        else\n          echo \"False\"\n        fi\n      fi\n   \
    \ else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\n\
    candidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # your code here\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n        month=${BASH_REMATCH[1]}\n        day=${BASH_REMATCH[2]}\n\
    \        year=${BASH_REMATCH[3]}\n        if [[ $month -gt 0 && $month -lt 13\
    \ ]]; then\n            if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 ||\
    \ $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n  \
    \              if [[ $day -gt 0 && $day -lt 32 ]]; then\n                    echo\
    \ \"True\"\n                else\n                    echo \"False\"\n       \
    \         fi\n            elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9\
    \ || $month -eq 11 ]]; then\n                if [[ $day -gt 0 && $day -lt 31 ]];\
    \ then\n                    echo \"True\"\n                else\n            \
    \        echo \"False\"\n                fi\n            elif [[ $month -eq 2\
    \ ]]; then\n                if [[ $day -gt 0 && $day -lt 30 ]]; then\n       \
    \             echo \"True\"\n                else\n                    echo \"\
    False\"\n                fi\n            fi\n        else\n            echo \"\
    False\"\n        fi\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n\
    \        if [[ $((year % 4)) -eq 0 ]]; then\n          if [[ $day -gt 0 && $day\
    \ -lt 30 ]]; then\n            echo \"True\"\n          else\n            echo\
    \ \"False\"\n          fi\n        else\n          if [[ $day -gt 0 && $day -lt\
    \ 29 ]]; then\n            echo \"True\"\n          else\n            echo \"\
    False\"\n          fi\n        fi\n      elif [[ $month -eq 4 || $month -eq 6\
    \ || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -gt 0 && $day\
    \ -lt 31 ]]; then\n          echo \"True\"\n        else\n          echo \"False\"\
    \n        fi\n      else\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n \
    \         echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      fi\n    else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n\
    \  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        local\
    \ month=${BASH_REMATCH[1]}\n        local day=${BASH_REMATCH[2]}\n        local\
    \ year=${BASH_REMATCH[3]}\n        if [[ $month -gt 0 && $month -lt 13 ]]; then\n\
    \            if [[ $month -eq 2 ]]; then\n                if [[ $day -gt 0 &&\
    \ $day -lt 30 ]]; then\n                    return 0\n                fi\n   \
    \         elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11\
    \ ]]; then\n                if [[ $day -gt 0 && $day -lt 31 ]]; then\n       \
    \             return 0\n                fi\n            else\n               \
    \ if [[ $day -gt 0 && $day -lt 32 ]]; then\n                    return 0\n   \
    \             fi\n            fi\n        fi\n    fi\n    return 1\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  # you can use the following command to check\
    \ if the date is valid\n  # date -d \"$1\" > /dev/null 2>&1\n  # if the date is\
    \ valid, the command will return 0\n  # otherwise, it will return 1\n  # you can\
    \ use the following command to get the number of days in a month\n  # date -d\
    \ \"$1\" +%d\n  # you can use the following command to get the month number\n\
    \  # date -d \"$1\" +%m\n  # you can use the following command to get the year\n\
    \  # date -d \"$1\" +%Y\n  # you can use the following command to get the date\
    \ format\n  # date -d \"$1\" +%D\n  # you can use the following command to get\
    \ the month name\n  # date -d \"$1\" +%B\n  # you can use the following command\
    \ to get the day of the week\n  # date -d \"$1\" +%A\n  # you can use the following\
    \ command to get the day of the week number\n  # date -d \"$1\" +%u\n  # you can\
    \ use the following command to get the day of the year\n  # date -d \"$1\" +%j\n\
    \  # you can use the following command to get the week number of the year\n  #\
    \ date -d \"$1\" +%W\n  # you can use the following command to get the number\
    \ of seconds since the epoch\n  # date -d \"$1\" +%s\n  # you can use the following\
    \ command to get the number of minutes since the epoch\n  # date -d \"$1\" +%s\n\
    \  # you can use the following command to get the number of hours since the epoch\n\
    \  # date -d \"$1\" +%s\n  # you can use the following command to get the number\
    \ of days since the epoch\n  # date -d \"$1\" +%s\n  # you can use the following\
    \ command to get the number of weeks since the epoch\n  # date -d \"$1\" +%s\n\
    \  # you can use the following command to get the number of months since the epoch\n\
    \  # date -d \"$1\" +%s\n  # you can use the following command to get the number\
    \ of years since the epoch\n  #\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n   \
    \ [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1y60yj9e.sh: line 55: syntax error near unexpected token `}''

    /tmp/tmp1y60yj9e.sh: line 55: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$ ]]; then\n\
    \    local month=$(echo $1 | cut -d- -f1)\n    local day=$(echo $1 | cut -d- -f2)\n\
    \    local year=$(echo $1 | cut -d- -f3)\n    if [[ $month -eq 2 ]]; then\n  \
    \    if [[ $((year % 4)) -eq 0 ]]; then\n        if [[ $day -gt 29 ]]; then\n\
    \          return 1\n        fi\n      else\n        if [[ $day -gt 28 ]]; then\n\
    \          return 1\n        fi\n      fi\n    elif [[ $month -eq 4 || $month\
    \ -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n      if [[ $day -gt 30 ]];\
    \ then\n        return 1\n      fi\n    elif [[ $day -gt 31 ]]; then\n      return\
    \ 1\n    fi\n    return 0\n  fi\n  return 1\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [ -z \"$1\" ]; then\n    echo \"False\"\n    return\n  fi\n  if [[ !\
    \ \"$1\" =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n    echo \"False\"\n    return\n\
    \  fi\n  local month=\"$(echo \"$1\" | cut -d'-' -f1)\"\n  local day=\"$(echo\
    \ \"$1\" | cut -d'-' -f2)\"\n  local year=\"$(echo \"$1\" | cut -d'-' -f3)\"\n\
    \  if [ \"$month\" -lt 1 ] || [ \"$month\" -gt 12 ]; then\n    echo \"False\"\n\
    \    return\n  fi\n  if [ \"$month\" -eq 2 ]; then\n    if [ \"$day\" -lt 1 ]\
    \ || [ \"$day\" -gt 29 ]; then\n      echo \"False\"\n      return\n    fi\n \
    \ elif [ \"$month\" -eq 4 ] || [ \"$month\" -eq 6 ] || [ \"$month\" -eq 9 ] ||\
    \ [ \"$month\" -eq 11 ]; then\n    if [ \"$day\" -lt 1 ] || [ \"$day\" -gt 30\
    \ ]; then\n      echo \"False\"\n      return\n    fi\n  else\n    if [ \"$day\"\
    \ -lt 1 ] || [ \"$day\" -gt 31 ]; then\n      echo \"False\"\n      return\n \
    \   fi\n  fi\n  echo \"True\"\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[\
    \ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n\
    \        if [[ $((year % 4)) -eq 0 ]]; then\n          if [[ $day -gt 0 && $day\
    \ -lt 30 ]]; then\n            return 0\n          fi\n        else\n        \
    \  if [[ $day -gt 0 && $day -lt 29 ]]; then\n            return 0\n          fi\n\
    \        fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month\
    \ -eq 11 ]]; then\n        if [[ $day -gt 0 && $day -lt 31 ]]; then\n        \
    \  return 0\n        fi\n      else\n        if [[ $day -gt 0 && $day -lt 32 ]];\
    \ then\n          return 0\n        fi\n      fi\n    fi\n  fi\n  return 1\n}\n\
    \ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -le\
    \ 12 && $month -ge 1 ]]; then\n      if [[ $month == 2 ]]; then\n        if [[\
    \ $day -le 29 && $day -ge 1 ]]; then\n          echo \"True\"\n        else\n\
    \          echo \"False\"\n        fi\n      elif [[ $month == 1 || $month ==\
    \ 3 || $month == 5 || $month == 7 || $month == 8 || $month == 10 || $month ==\
    \ 12 ]]; then\n        if [[ $day -le 31 && $day -ge 1 ]]; then\n          echo\
    \ \"True\"\n        else\n          echo \"False\"\n        fi\n      elif [[\
    \ $month == 4 || $month == 6 || $month == 9 || $month == 11 ]]; then\n       \
    \ if [[ $day -le 30 && $day -ge 1 ]]; then\n          echo \"True\"\n        else\n\
    \          echo \"False\"\n        fi\n      fi\n    else\n      echo \"False\"\
    \n    fi\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # Write your code here\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n    if [[ ${BASH_REMATCH[1]} -gt 0 && ${BASH_REMATCH[1]} -lt 13 ]];\
    \ then\n      if [[ ${BASH_REMATCH[1]} -eq 1 || ${BASH_REMATCH[1]} -eq 3 || ${BASH_REMATCH[1]}\
    \ -eq 5 || ${BASH_REMATCH[1]} -eq 7 || ${BASH_REMATCH[1]} -eq 8 || ${BASH_REMATCH[1]}\
    \ -eq 10 || ${BASH_REMATCH[1]} -eq 12 ]]; then\n        if [[ ${BASH_REMATCH[2]}\
    \ -gt 0 && ${BASH_REMATCH[2]} -lt 32 ]]; then\n          echo \"True\"\n     \
    \   else\n          echo \"False\"\n        fi\n      elif [[ ${BASH_REMATCH[1]}\
    \ -eq 4 || ${BASH_REMATCH[1]} -eq 6 || ${BASH_REMATCH[1]} -eq 9 || ${BASH_REMATCH[1]}\
    \ -eq 11 ]]; then\n        if [[ ${BASH_REMATCH[2]} -gt 0 && ${BASH_REMATCH[2]}\
    \ -lt 31 ]]; then\n          echo \"True\"\n        else\n          echo \"False\"\
    \n        fi\n      elif [[ ${BASH_REMATCH[1]} -eq 2 ]]; then\n        if [[ ${BASH_REMATCH[2]}\
    \ -gt 0 && ${BASH_REMATCH[2]} -lt 30 ]]; then\n          echo \"True\"\n     \
    \   else\n          echo \"False\"\n        fi\n      fi\n    else\n      echo\
    \ \"False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n  \
    \  valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [ -z \"$1\" ]; then\n    echo \"False\"\n    return\n  fi\n  if [[ $1\
    \ =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [ $month -lt\
    \ 1 ] || [ $month -gt 12 ]; then\n      echo \"False\"\n      return\n    fi\n\
    \    if [ $month -eq 1 ] || [ $month -eq 3 ] || [ $month -eq 5 ] || [ $month -eq\
    \ 7 ] || [ $month -eq 8 ] || [ $month -eq 10 ] || [ $month -eq 12 ]; then\n  \
    \    if [ $day -lt 1 ] || [ $day -gt 31 ]; then\n        echo \"False\"\n    \
    \    return\n      fi\n    elif [ $month -eq 4 ] || [ $month -eq 6 ] || [ $month\
    \ -eq 9 ] || [ $month -eq 11 ]; then\n      if [ $day -lt 1 ] || [ $day -gt 30\
    \ ]; then\n        echo \"False\"\n        return\n      fi\n    elif [ $month\
    \ -eq 2 ]; then\n      if [ $day -lt 1 ] || [ $day -gt 29 ]; then\n        echo\
    \ \"False\"\n        return\n      fi\n    fi\n    echo \"True\"\n  else\n   \
    \ echo \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\"\
    \ ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"\
    01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") =\
    \ \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    local date=$1\n    local month=$(echo $date | cut -d'-' -f1)\n    local\
    \ day=$(echo $date | cut -d'-' -f2)\n    local year=$(echo $date | cut -d'-' -f3)\n\
    \    local max_day=31\n    if [[ $month == 2 ]]; then\n        max_day=29\n  \
    \  elif [[ $month == 4 || $month == 6 || $month == 9 || $month == 11 ]]; then\n\
    \        max_day=30\n    fi\n    if [[ $month -lt 1 || $month -gt 12 ]]; then\n\
    \        echo \"False\"\n    elif [[ $day -lt 1 || $day -gt $max_day ]]; then\n\
    \        echo \"False\"\n    elif [[ $year -lt 1 ]]; then\n        echo \"False\"\
    \n    else\n        echo \"True\"\n    fi\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n\
    \        if [[ $((year % 4)) -eq 0 ]]; then\n          if [[ $day -gt 0 && $day\
    \ -lt 30 ]]; then\n            return 0\n          fi\n        else\n        \
    \  if [[ $day -gt 0 && $day -lt 29 ]]; then\n            return 0\n          fi\n\
    \        fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month\
    \ -eq 11 ]]; then\n        if [[ $day -gt 0 && $day -lt 31 ]]; then\n        \
    \  return 0\n        fi\n      else\n        if [[ $day -gt 0 && $day -lt 32 ]];\
    \ then\n          return 0\n        fi\n      fi\n    fi\n  fi\n  return 1\n}\n\
    \ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # your code here\n    if [ -z \"$1\" ]; then\n        echo \"False\"\n\
    \        return\n    fi\n    if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n\
    \        month=$(echo $1 | cut -d'-' -f1)\n        day=$(echo $1 | cut -d'-' -f2)\n\
    \        year=$(echo $1 | cut -d'-' -f3)\n        if [[ $month -gt 12 || $month\
    \ -lt 1 ]]; then\n            echo \"False\"\n            return\n        fi\n\
    \        if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 ||\
    \ $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n            if [[ $day\
    \ -gt 31 || $day -lt 1 ]]; then\n                echo \"False\"\n            \
    \    return\n            fi\n        elif [[ $month -eq 4 || $month -eq 6 || $month\
    \ -eq 9 || $month -eq 11 ]]; then\n            if [[ $day -gt 30 || $day -lt 1\
    \ ]]; then\n                echo \"False\"\n                return\n         \
    \   fi\n        elif [[ $month -eq 2 ]]; then\n            if [[ $day -gt 29 ||\
    \ $day -lt 1 ]]; then\n                echo \"False\"\n                return\n\
    \            fi\n        fi\n        echo \"True\"\n    else\n        echo \"\
    False\"\n    fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # your code here\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]];\
    \ then\n    month=${BASH_REMATCH[1]}\n    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n\
    \    if [[ $month -le 12 && $month -ge 1 ]]; then\n      if [[ $month -eq 2 ]];\
    \ then\n        if [[ $day -le 29 && $day -ge 1 ]]; then\n          echo \"True\"\
    \n        else\n          echo \"False\"\n        fi\n      elif [[ $month -eq\
    \ 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day\
    \ -le 30 && $day -ge 1 ]]; then\n          echo \"True\"\n        else\n     \
    \     echo \"False\"\n        fi\n      else\n        if [[ $day -le 31 && $day\
    \ -ge 1 ]]; then\n          echo \"True\"\n        else\n          echo \"False\"\
    \n        fi\n      fi\n    else\n      echo \"False\"\n    fi\n  else\n    echo\
    \ \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        local\
    \ month=${BASH_REMATCH[1]}\n        local day=${BASH_REMATCH[2]}\n        local\
    \ year=${BASH_REMATCH[3]}\n        if [[ $month -gt 0 && $month -lt 13 ]]; then\n\
    \            if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq\
    \ 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n             \
    \   if [[ $day -gt 0 && $day -lt 32 ]]; then\n                    echo \"True\"\
    \n                else\n                    echo \"False\"\n                fi\n\
    \            elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq\
    \ 11 ]]; then\n                if [[ $day -gt 0 && $day -lt 31 ]]; then\n    \
    \                echo \"True\"\n                else\n                    echo\
    \ \"False\"\n                fi\n            elif [[ $month -eq 2 ]]; then\n \
    \               if [[ $day -gt 0 && $day -lt 30 ]]; then\n                   \
    \ echo \"True\"\n                else\n                    echo \"False\"\n  \
    \              fi\n            fi\n        else\n            echo \"False\"\n\
    \        fi\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n  \
    \  valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -gt\
    \ 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n        if [[\
    \ $((year % 4)) -eq 0 ]]; then\n          if [[ $day -gt 0 && $day -lt 30 ]];\
    \ then\n            echo \"True\"\n          else\n            echo \"False\"\n\
    \          fi\n        else\n          if [[ $day -gt 0 && $day -lt 29 ]]; then\n\
    \            echo \"True\"\n          else\n            echo \"False\"\n     \
    \     fi\n        fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month -eq\
    \ 9 || $month -eq 11 ]]; then\n        if [[ $day -gt 0 && $day -lt 31 ]]; then\n\
    \          echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      else\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n          echo\
    \ \"True\"\n        else\n          echo \"False\"\n        fi\n      fi\n   \
    \ else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\n\
    candidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -le\
    \ 12 && $month -ge 1 ]]; then\n      if [[ $month -eq 2 ]]; then\n        if [[\
    \ $day -le 29 && $day -ge 1 ]]; then\n          echo \"True\"\n        else\n\
    \          echo \"False\"\n        fi\n      elif [[ $month -eq 4 || $month -eq\
    \ 6 || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -le 30 && $day\
    \ -ge 1 ]]; then\n          echo \"True\"\n        else\n          echo \"False\"\
    \n        fi\n      else\n        if [[ $day -le 31 && $day -ge 1 ]]; then\n \
    \         echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      fi\n    else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n\
    \  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        local\
    \ month=${BASH_REMATCH[1]}\n        local day=${BASH_REMATCH[2]}\n        local\
    \ year=${BASH_REMATCH[3]}\n        if [[ $month -lt 1 || $month -gt 12 ]]; then\n\
    \            echo \"False\"\n            return\n        fi\n        if [[ $month\
    \ == 2 ]]; then\n            if [[ $day -lt 1 || $day -gt 29 ]]; then\n      \
    \          echo \"False\"\n                return\n            fi\n        elif\
    \ [[ $month == 4 || $month == 6 || $month == 9 || $month == 11 ]]; then\n    \
    \        if [[ $day -lt 1 || $day -gt 30 ]]; then\n                echo \"False\"\
    \n                return\n            fi\n        else\n            if [[ $day\
    \ -lt 1 || $day -gt 31 ]]; then\n                echo \"False\"\n            \
    \    return\n            fi\n        fi\n        echo \"True\"\n    else\n   \
    \     echo \"False\"\n    fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[\
    \ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n\
    \        if [[ $((year % 4)) -eq 0 ]]; then\n          if [[ $day -gt 0 && $day\
    \ -lt 30 ]]; then\n            echo \"True\"\n          else\n            echo\
    \ \"False\"\n          fi\n        else\n          if [[ $day -gt 0 && $day -lt\
    \ 29 ]]; then\n            echo \"True\"\n          else\n            echo \"\
    False\"\n          fi\n        fi\n      elif [[ $month -eq 4 || $month -eq 6\
    \ || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -gt 0 && $day\
    \ -lt 31 ]]; then\n          echo \"True\"\n        else\n          echo \"False\"\
    \n        fi\n      else\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n \
    \         echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      fi\n    else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n\
    \  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        local\
    \ month=${BASH_REMATCH[1]}\n        local day=${BASH_REMATCH[2]}\n        local\
    \ year=${BASH_REMATCH[3]}\n        if [[ $month -gt 0 && $month -lt 13 ]]; then\n\
    \            if [[ $month -eq 2 ]]; then\n                if [[ $((year % 4))\
    \ -eq 0 ]]; then\n                    if [[ $day -gt 0 && $day -lt 30 ]]; then\n\
    \                        echo \"True\"\n                    else\n           \
    \             echo \"False\"\n                    fi\n                else\n \
    \                   if [[ $day -gt 0 && $day -lt 29 ]]; then\n               \
    \         echo \"True\"\n                    else\n                        echo\
    \ \"False\"\n                    fi\n                fi\n            elif [[ $month\
    \ -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n          \
    \      if [[ $day -gt 0 && $day -lt 31 ]]; then\n                    echo \"True\"\
    \n                else\n                    echo \"False\"\n                fi\n\
    \            else\n                if [[ $day -gt 0 && $day -lt 32 ]]; then\n\
    \                    echo \"True\"\n                else\n                   \
    \ echo \"False\"\n                fi\n            fi\n        else\n         \
    \   echo \"False\"\n        fi\n    else\n        echo \"False\"\n    fi\n}\n\n\
    candidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n\
    \        if [[ $((year % 4)) -eq 0 ]]; then\n          if [[ $day -gt 0 && $day\
    \ -lt 30 ]]; then\n            echo \"True\"\n          else\n            echo\
    \ \"False\"\n          fi\n        else\n          if [[ $day -gt 0 && $day -lt\
    \ 29 ]]; then\n            echo \"True\"\n          else\n            echo \"\
    False\"\n          fi\n        fi\n      elif [[ $month -eq 4 || $month -eq 6\
    \ || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -gt 0 && $day\
    \ -lt 31 ]]; then\n          echo \"True\"\n        else\n          echo \"False\"\
    \n        fi\n      else\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n \
    \         echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      fi\n    else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n\
    \  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # your code here\n  if [ -z \"$1\" ]; then\n    echo \"False\"\n    return\n\
    \  fi\n  if [[ ! $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n    echo \"False\"\
    \n    return\n  fi\n  local month=$(echo $1 | cut -d '-' -f 1)\n  local day=$(echo\
    \ $1 | cut -d '-' -f 2)\n  local year=$(echo $1 | cut -d '-' -f 3)\n  if [ $month\
    \ -lt 1 ] || [ $month -gt 12 ]; then\n    echo \"False\"\n    return\n  fi\n \
    \ if [ $month -eq 1 ] || [ $month -eq 3 ] || [ $month -eq 5 ] || [ $month -eq\
    \ 7 ] || [ $month -eq 8 ] || [ $month -eq 10 ] || [ $month -eq 12 ]; then\n  \
    \  if [ $day -lt 1 ] || [ $day -gt 31 ]; then\n      echo \"False\"\n      return\n\
    \    fi\n  elif [ $month -eq 4 ] || [ $month -eq 6 ] || [ $month -eq 9 ] || [\
    \ $month -eq 11 ]; then\n    if [ $day -lt 1 ] || [ $day -gt 30 ]; then\n    \
    \  echo \"False\"\n      return\n    fi\n  elif [ $month -eq 2 ]; then\n    if\
    \ [ $day -lt 1 ] || [ $day -gt 29 ]; then\n      echo \"False\"\n      return\n\
    \    fi\n  fi\n  echo \"True\"\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n   \
    \ [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # your code here\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]];\
    \ then\n    month=${BASH_REMATCH[1]}\n    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n\
    \    if [[ $month -ge 1 && $month -le 12 ]]; then\n      if [[ $month -eq 1 ||\
    \ $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10\
    \ || $month -eq 12 ]]; then\n        if [[ $day -ge 1 && $day -le 31 ]]; then\n\
    \          echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]];\
    \ then\n        if [[ $day -ge 1 && $day -le 30 ]]; then\n          echo \"True\"\
    \n        else\n          echo \"False\"\n        fi\n      elif [[ $month -eq\
    \ 2 ]]; then\n        if [[ $day -ge 1 && $day -le 29 ]]; then\n          echo\
    \ \"True\"\n        else\n          echo \"False\"\n        fi\n      fi\n   \
    \ else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\n\
    candidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0-1])-([0-9]{4})$\
    \ ]]; then\n    month=${BASH_REMATCH[1]}\n    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n\
    \    if [[ $month == 02 ]]; then\n      if [[ $((year % 4)) -eq 0 ]]; then\n \
    \       if [[ $day -gt 29 ]]; then\n          echo False\n          return\n \
    \       fi\n      else\n        if [[ $day -gt 28 ]]; then\n          echo False\n\
    \          return\n        fi\n      fi\n    elif [[ $month == 01 || $month ==\
    \ 03 || $month == 05 || $month == 07 || $month == 08 || $month == 10 || $month\
    \ == 12 ]]; then\n      if [[ $day -gt 31 ]]; then\n        echo False\n     \
    \   return\n      fi\n    elif [[ $day -gt 30 ]]; then\n      echo False\n   \
    \   return\n    fi\n    echo True\n  else\n    echo False\n  fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8\
    \ || $month -eq 10 || $month -eq 12 ]]; then\n      if [[ $day -ge 1 && $day -le\
    \ 31 ]]; then\n        echo \"True\"\n      else\n        echo \"False\"\n   \
    \   fi\n    elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq\
    \ 11 ]]; then\n      if [[ $day -ge 1 && $day -le 30 ]]; then\n        echo \"\
    True\"\n      else\n        echo \"False\"\n      fi\n    elif [[ $month -eq 2\
    \ ]]; then\n      if [[ $day -ge 1 && $day -le 29 ]]; then\n        echo \"True\"\
    \n      else\n        echo \"False\"\n      fi\n    else\n      echo \"False\"\
    \n    fi\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        month=${BASH_REMATCH[1]}\n\
    \        day=${BASH_REMATCH[2]}\n        year=${BASH_REMATCH[3]}\n        if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n            if [[ $month -eq 1 || $month\
    \ -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n                if [[ $day -gt 0 && $day -lt 32 ]]; then\n\
    \                    echo \"True\"\n                else\n                   \
    \ echo \"False\"\n                fi\n            elif [[ $month -eq 4 || $month\
    \ -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n                if [[ $day\
    \ -gt 0 && $day -lt 31 ]]; then\n                    echo \"True\"\n         \
    \       else\n                    echo \"False\"\n                fi\n       \
    \     elif [[ $month -eq 2 ]]; then\n                if [[ $day -gt 0 && $day\
    \ -lt 30 ]]; then\n                    echo \"True\"\n                else\n \
    \                   echo \"False\"\n                fi\n            fi\n     \
    \   else\n            echo \"False\"\n        fi\n    else\n        echo \"False\"\
    \n    fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -ge\
    \ 1 && $month -le 12 ]]; then\n      if [[ $month -eq 2 ]]; then\n        if [[\
    \ $day -ge 1 && $day -le 29 ]]; then\n          echo \"True\"\n        else\n\
    \          echo \"False\"\n        fi\n      elif [[ $month -eq 4 || $month -eq\
    \ 6 || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -ge 1 && $day\
    \ -le 30 ]]; then\n          echo \"True\"\n        else\n          echo \"False\"\
    \n        fi\n      else\n        if [[ $day -ge 1 && $day -le 31 ]]; then\n \
    \         echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      fi\n    else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n\
    \  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # TODO: Write your code here\n    if [[ -z $1 ]]; then\n        echo\
    \ \"False\"\n        return\n    fi\n\n    IFS='-' read -ra ADDR <<< \"$1\"\n\
    \    if [[ ${#ADDR[@]} -ne 3 ]]; then\n        echo \"False\"\n        return\n\
    \    fi\n\n    month=${ADDR[0]}\n    day=${ADDR[1]}\n    year=${ADDR[2]}\n\n \
    \   if [[ $month -lt 1 || $month -gt 12 ]]; then\n        echo \"False\"\n   \
    \     return\n    fi\n\n    if [[ $month -eq 1 || $month -eq 3 || $month -eq 5\
    \ || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n\
    \        if [[ $day -lt 1 || $day -gt 31 ]]; then\n            echo \"False\"\n\
    \            return\n        fi\n    elif [[ $month -eq 4 || $month -eq 6 || $month\
    \ -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -lt 1 || $day -gt 30 ]];\
    \ then\n            echo \"False\"\n            return\n        fi\n    elif [[\
    \ $month -eq 2 ]]; then\n        if [[ $day -lt 1 || $day -gt 29 ]]; then\n  \
    \          echo \"False\"\n            return\n        fi\n    fi\n\n    echo\
    \ \"True\"\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n    local month=$(echo\
    \ $1 | cut -d- -f1)\n    local day=$(echo $1 | cut -d- -f2)\n    local year=$(echo\
    \ $1 | cut -d- -f3)\n    if [[ $month -ge 1 && $month -le 12 ]]; then\n      if\
    \ [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq\
    \ 8 || $month -eq 10 || $month -eq 12 ]]; then\n        if [[ $day -ge 1 && $day\
    \ -le 31 ]]; then\n          return 0\n        fi\n      elif [[ $month -eq 4\
    \ || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day\
    \ -ge 1 && $day -le 30 ]]; then\n          return 0\n        fi\n      elif [[\
    \ $month -eq 2 ]]; then\n        if [[ $day -ge 1 && $day -le 29 ]]; then\n  \
    \        return 0\n        fi\n      fi\n    fi\n  fi\n  return 1\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]];\
    \ then\n    month=$(echo $1 | cut -d- -f1)\n    day=$(echo $1 | cut -d- -f2)\n\
    \    year=$(echo $1 | cut -d- -f3)\n    if [[ $month -ge 1 && $month -le 12 ]];\
    \ then\n      if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq\
    \ 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n        if [[\
    \ $day -ge 1 && $day -le 31 ]]; then\n          echo \"True\"\n        else\n\
    \          echo \"False\"\n        fi\n      elif [[ $month -eq 4 || $month -eq\
    \ 6 || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -ge 1 && $day\
    \ -le 30 ]]; then\n          echo \"True\"\n        else\n          echo \"False\"\
    \n        fi\n      elif [[ $month -eq 2 ]]; then\n        if [[ $day -ge 1 &&\
    \ $day -le 29 ]]; then\n          echo \"True\"\n        else\n          echo\
    \ \"False\"\n        fi\n      fi\n    else\n      echo \"False\"\n    fi\n  else\n\
    \    echo \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\"\
    \ ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"\
    01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") =\
    \ \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[\
    \ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdfybbnj3.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpdfybbnj3.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # Write your code here\n    if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\
    \ ]]; then\n        month=$(echo $1 | cut -d'-' -f1)\n        day=$(echo $1 |\
    \ cut -d'-' -f2)\n        year=$(echo $1 | cut -d'-' -f3)\n        if [[ $month\
    \ -ge 1 && $month -le 12 ]]; then\n            if [[ $month -eq 1 || $month -eq\
    \ 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n                if [[ $day -ge 1 && $day -le 31 ]]; then\n\
    \                    if [[ $year -ge 1 ]]; then\n                        echo\
    \ True\n                    else\n                        echo False\n       \
    \             fi\n                else\n                    echo False\n     \
    \           fi\n            elif [[ $month -eq 4 || $month -eq 6 || $month -eq\
    \ 9 || $month -eq 11 ]]; then\n                if [[ $day -ge 1 && $day -le 30\
    \ ]]; then\n                    if [[ $year -ge 1 ]]; then\n                 \
    \       echo True\n                    else\n                        echo False\n\
    \                    fi\n                else\n                    echo False\n\
    \                fi\n            elif [[ $month -eq 2 ]]; then\n             \
    \   if [[ $day -ge 1 && $day -le 29 ]]; then\n                    if [[ $year\
    \ -ge 1 ]]; then\n                        echo True\n                    else\n\
    \                        echo False\n                    fi\n                else\n\
    \                    echo False\n                fi\n            fi\n        else\n\
    \            echo False\n        fi\n    else\n        echo False\n    fi\n}\n\
    \ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # your code here\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]];\
    \ then\n    month=${BASH_REMATCH[1]}\n    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n\
    \    if [[ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]];\
    \ then\n        if [[ $day -gt 0 && $day -lt 30 ]]; then\n          echo \"True\"\
    \n        else\n          echo \"False\"\n        fi\n      elif [[ $month -eq\
    \ 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month\
    \ -eq 10 || $month -eq 12 ]]; then\n        if [[ $day -gt 0 && $day -lt 32 ]];\
    \ then\n          echo \"True\"\n        else\n          echo \"False\"\n    \
    \    fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month\
    \ -eq 11 ]]; then\n        if [[ $day -gt 0 && $day -lt 31 ]]; then\n        \
    \  echo \"True\"\n        else\n          echo \"False\"\n        fi\n      fi\n\
    \    else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\
    \ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # Write your code here\n  # Use echo to print the result\n  # $1 is a string\n\
    \  # echo \"True\" or echo \"False\"\n  if [ -z \"$1\" ]; then\n    echo \"False\"\
    \n    return\n  fi\n  IFS='-' read -ra date <<< \"$1\"\n  if [ ${#date[@]} -ne\
    \ 3 ]; then\n    echo \"False\"\n    return\n  fi\n  if [ ${#date[0]} -ne 2 ]\
    \ || [ ${#date[1]} -ne 2 ] || [ ${#date[2]} -ne 4 ]; then\n    echo \"False\"\n\
    \    return\n  fi\n  if [[ ${date[0]} -lt 1 ]] || [[ ${date[0]} -gt 12 ]]; then\n\
    \    echo \"False\"\n    return\n  fi\n  if [[ ${date[0]} -eq 1 ]] || [[ ${date[0]}\
    \ -eq 3 ]] || [[ ${date[0]} -eq 5 ]] || [[ ${date[0]} -eq 7 ]] || [[ ${date[0]}\
    \ -eq 8 ]] || [[ ${date[0]} -eq 10 ]] || [[ ${date[0]} -eq 12 ]]; then\n    if\
    \ [[ ${date[1]} -lt 1 ]] || [[ ${date[1]} -gt 31 ]]; then\n      echo \"False\"\
    \n      return\n    fi\n  elif [[ ${date[0]} -eq 4 ]] || [[ ${date[0]} -eq 6 ]]\
    \ || [[ ${date[0]} -eq 9 ]] || [[ ${date[0]} -eq 11 ]]; then\n    if [[ ${date[1]}\
    \ -lt 1 ]] || [[ ${date[1]} -gt 30 ]]; then\n      echo \"False\"\n      return\n\
    \    fi\n  elif [[ ${date[0]} -eq 2 ]]; then\n    if [[ ${date[1]} -lt 1 ]] ||\
    \ [[ ${date[1]} -gt 29 ]]; then\n      echo \"False\"\n      return\n    fi\n\
    \  fi\n  echo \"True\"\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\"\
    \ ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"\
    01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") =\
    \ \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # Write your code here\n  if [ -z \"$1\" ]; then\n    echo \"False\"\n\
    \    return\n  fi\n  if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n    month=$(echo\
    \ $1 | cut -d '-' -f 1)\n    day=$(echo $1 | cut -d '-' -f 2)\n    year=$(echo\
    \ $1 | cut -d '-' -f 3)\n    if [ $month -gt 12 ] || [ $month -lt 1 ]; then\n\
    \      echo \"False\"\n      return\n    fi\n    if [ $month -eq 1 ] || [ $month\
    \ -eq 3 ] || [ $month -eq 5 ] || [ $month -eq 7 ] || [ $month -eq 8 ] || [ $month\
    \ -eq 10 ] || [ $month -eq 12 ]; then\n      if [ $day -gt 31 ] || [ $day -lt\
    \ 1 ]; then\n        echo \"False\"\n        return\n      fi\n    elif [ $month\
    \ -eq 4 ] || [ $month -eq 6 ] || [ $month -eq 9 ] || [ $month -eq 11 ]; then\n\
    \      if [ $day -gt 30 ] || [ $day -lt 1 ]; then\n        echo \"False\"\n  \
    \      return\n      fi\n    elif [ $month -eq 2 ]; then\n      if [ $day -gt\
    \ 29 ] || [ $day -lt 1 ]; then\n        echo \"False\"\n        return\n     \
    \ fi\n    fi\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  [[ $1 =~ ^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$ ]] && date\
    \ -d \"$1\" > /dev/null 2>&1\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[\
    \ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 1 || $month -eq\
    \ 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n        \
    \  echo \"True\"\n        else\n          echo \"False\"\n        fi\n      elif\
    \ [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n\
    \        if [[ $day -gt 0 && $day -lt 31 ]]; then\n          echo \"True\"\n \
    \       else\n          echo \"False\"\n        fi\n      elif [[ $month -eq 2\
    \ ]]; then\n        if [[ $day -gt 0 && $day -lt 30 ]]; then\n          echo \"\
    True\"\n        else\n          echo \"False\"\n        fi\n      fi\n    else\n\
    \      echo \"False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # write your code here\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n        month=${BASH_REMATCH[1]}\n        day=${BASH_REMATCH[2]}\n\
    \        year=${BASH_REMATCH[3]}\n        if [[ $month -gt 0 && $month -lt 13\
    \ ]]; then\n            if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 ||\
    \ $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n  \
    \              if [[ $day -gt 0 && $day -lt 32 ]]; then\n                    echo\
    \ \"True\"\n                else\n                    echo \"False\"\n       \
    \         fi\n            elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9\
    \ || $month -eq 11 ]]; then\n                if [[ $day -gt 0 && $day -lt 31 ]];\
    \ then\n                    echo \"True\"\n                else\n            \
    \        echo \"False\"\n                fi\n            elif [[ $month -eq 2\
    \ ]]; then\n                if [[ $day -gt 0 && $day -lt 30 ]]; then\n       \
    \             echo \"True\"\n                else\n                    echo \"\
    False\"\n                fi\n            fi\n        else\n            echo \"\
    False\"\n        fi\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -gt\
    \ 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n        if [[\
    \ $day -gt 0 && $day -lt 30 ]]; then\n          echo True\n        else\n    \
    \      echo False\n        fi\n      elif [[ $month -eq 1 || $month -eq 3 || $month\
    \ -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]];\
    \ then\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n          echo True\n\
    \        else\n          echo False\n        fi\n      elif [[ $month -eq 4 ||\
    \ $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -gt\
    \ 0 && $day -lt 31 ]]; then\n          echo True\n        else\n          echo\
    \ False\n        fi\n      fi\n    else\n      echo False\n    fi\n  else\n  \
    \  echo False\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\"\
    \ ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"\
    01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") =\
    \ \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # write your code here\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n        month=${BASH_REMATCH[1]}\n        day=${BASH_REMATCH[2]}\n\
    \        year=${BASH_REMATCH[3]}\n        if [[ $month -gt 0 && $month -lt 13\
    \ ]]; then\n            if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 ||\
    \ $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n  \
    \              if [[ $day -gt 0 && $day -lt 32 ]]; then\n                    echo\
    \ \"True\"\n                else\n                    echo \"False\"\n       \
    \         fi\n            elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9\
    \ || $month -eq 11 ]]; then\n                if [[ $day -gt 0 && $day -lt 31 ]];\
    \ then\n                    echo \"True\"\n                else\n            \
    \        echo \"False\"\n                fi\n            elif [[ $month -eq 2\
    \ ]]; then\n                if [[ $day -gt 0 && $day -lt 30 ]]; then\n       \
    \             echo \"True\"\n                else\n                    echo \"\
    False\"\n                fi\n            fi\n        else\n            echo \"\
    False\"\n        fi\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -eq 2 ]]; then\n      if [[ $((year % 4)) -eq 0 ]]; then\n        if\
    \ [[ $day -gt 29 ]]; then\n          return 1\n        fi\n      else\n      \
    \  if [[ $day -gt 28 ]]; then\n          return 1\n        fi\n      fi\n    elif\
    \ [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n\
    \      if [[ $day -gt 30 ]]; then\n        return 1\n      fi\n    elif [[ $month\
    \ -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month\
    \ -eq 10 || $month -eq 12 ]]; then\n      if [[ $day -gt 31 ]]; then\n       \
    \ return 1\n      fi\n    else\n      return 1\n    fi\n    return 0\n  else\n\
    \    return 1\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\"\
    \ ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"\
    01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") =\
    \ \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # write your code here\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n        month=${BASH_REMATCH[1]}\n        day=${BASH_REMATCH[2]}\n\
    \        year=${BASH_REMATCH[3]}\n        if [[ $month -gt 0 && $month -lt 13\
    \ ]]; then\n            if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 ||\
    \ $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n  \
    \              if [[ $day -gt 0 && $day -lt 32 ]]; then\n                    echo\
    \ \"True\"\n                else\n                    echo \"False\"\n       \
    \         fi\n            elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9\
    \ || $month -eq 11 ]]; then\n                if [[ $day -gt 0 && $day -lt 31 ]];\
    \ then\n                    echo \"True\"\n                else\n            \
    \        echo \"False\"\n                fi\n            elif [[ $month -eq 2\
    \ ]]; then\n                if [[ $day -gt 0 && $day -lt 30 ]]; then\n       \
    \             echo \"True\"\n                else\n                    echo \"\
    False\"\n                fi\n            fi\n        else\n            echo \"\
    False\"\n        fi\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        month=${BASH_REMATCH[1]}\n\
    \        day=${BASH_REMATCH[2]}\n        year=${BASH_REMATCH[3]}\n        if [[\
    \ $month -ge 1 && $month -le 12 ]]; then\n            if [[ $month -eq 1 || $month\
    \ -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n                if [[ $day -ge 1 && $day -le 31 ]]; then\n\
    \                    echo \"True\"\n                else\n                   \
    \ echo \"False\"\n                fi\n            elif [[ $month -eq 4 || $month\
    \ -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n                if [[ $day\
    \ -ge 1 && $day -le 30 ]]; then\n                    echo \"True\"\n         \
    \       else\n                    echo \"False\"\n                fi\n       \
    \     elif [[ $month -eq 2 ]]; then\n                if [[ $day -ge 1 && $day\
    \ -le 29 ]]; then\n                    echo \"True\"\n                else\n \
    \                   echo \"False\"\n                fi\n            fi\n     \
    \   else\n            echo \"False\"\n        fi\n    else\n        echo \"False\"\
    \n    fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # your code here\n  if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n\
    \    date_array=(${1//-/ })\n    month=${date_array[0]}\n    day=${date_array[1]}\n\
    \    year=${date_array[2]}\n    if [[ $month -ge 1 && $month -le 12 ]]; then\n\
    \      if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month\
    \ -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n        if [[ $day -ge 1 &&\
    \ $day -le 31 ]]; then\n          echo \"True\"\n        else\n          echo\
    \ \"False\"\n        fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month\
    \ -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -ge 1 && $day -le 30 ]];\
    \ then\n          echo \"True\"\n        else\n          echo \"False\"\n    \
    \    fi\n      elif [[ $month -eq 2 ]]; then\n        if [[ $day -ge 1 && $day\
    \ -le 29 ]]; then\n          echo \"True\"\n        else\n          echo \"False\"\
    \n        fi\n      fi\n    else\n      echo \"False\"\n    fi\n  else\n    echo\
    \ \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # check if the string is empty\n    if [ -z \"$1\" ]; then\n        echo\
    \ \"False\"\n        return\n    fi\n\n    # check if the string is in the format\
    \ mm-dd-yyyy\n    if [[ ! $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n      \
    \  echo \"False\"\n        return\n    fi\n\n    # check if the month is valid\n\
    \    month=$(echo $1 | cut -d '-' -f 1)\n    if [ $month -lt 1 ] || [ $month -gt\
    \ 12 ]; then\n        echo \"False\"\n        return\n    fi\n\n    # check if\
    \ the day is valid\n    day=$(echo $1 | cut -d '-' -f 2)\n    if [ $month -eq\
    \ 1 ] || [ $month -eq 3 ] || [ $month -eq 5 ] || [ $month -eq 7 ] || [ $month\
    \ -eq 8 ] || [ $month -eq 10 ] || [ $month -eq 12 ]; then\n        if [ $day -lt\
    \ 1 ] || [ $day -gt 31 ]; then\n            echo \"False\"\n            return\n\
    \        fi\n    elif [ $month -eq 4 ] || [ $month -eq 6 ] || [ $month -eq 9 ]\
    \ || [ $month -eq 11 ]; then\n        if [ $day -lt 1 ] || [ $day -gt 30 ]; then\n\
    \            echo \"False\"\n            return\n        fi\n    elif [ $month\
    \ -eq 2 ]; then\n        if [ $day -lt 1 ] || [ $day -gt 29 ]; then\n        \
    \    echo \"False\"\n            return\n        fi\n    fi\n\n    echo \"True\"\
    \n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -gt\
    \ 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 1 || $month -eq 3 || $month\
    \ -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]];\
    \ then\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n          echo \"True\"\
    \n        else\n          echo \"False\"\n        fi\n      elif [[ $month -eq\
    \ 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day\
    \ -gt 0 && $day -lt 31 ]]; then\n          echo \"True\"\n        else\n     \
    \     echo \"False\"\n        fi\n      elif [[ $month -eq 2 ]]; then\n      \
    \  if [[ $day -gt 0 && $day -lt 30 ]]; then\n          echo \"True\"\n       \
    \ else\n          echo \"False\"\n        fi\n      fi\n    else\n      echo \"\
    False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n    month=${BASH_REMATCH[1]}\n    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n\
    \    if [[ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]];\
    \ then\n        if [[ $((year % 4)) -eq 0 ]]; then\n          if [[ $day -gt 0\
    \ && $day -lt 30 ]]; then\n            echo \"True\"\n          else\n       \
    \     echo \"False\"\n          fi\n        else\n          if [[ $day -gt 0 &&\
    \ $day -lt 29 ]]; then\n            echo \"True\"\n          else\n          \
    \  echo \"False\"\n          fi\n        fi\n      elif [[ $month -eq 4 || $month\
    \ -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -gt 0 &&\
    \ $day -lt 31 ]]; then\n          echo \"True\"\n        else\n          echo\
    \ \"False\"\n        fi\n      else\n        if [[ $day -gt 0 && $day -lt 32 ]];\
    \ then\n          echo \"True\"\n        else\n          echo \"False\"\n    \
    \    fi\n      fi\n    else\n      echo \"False\"\n    fi\n  else\n    echo \"\
    False\"\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n\
    \        if [[ $((year % 4)) -eq 0 ]]; then\n          if [[ $day -gt 0 && $day\
    \ -lt 30 ]]; then\n            echo \"True\"\n          else\n            echo\
    \ \"False\"\n          fi\n        else\n          if [[ $day -gt 0 && $day -lt\
    \ 29 ]]; then\n            echo \"True\"\n          else\n            echo \"\
    False\"\n          fi\n        fi\n      elif [[ $month -eq 4 || $month -eq 6\
    \ || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -gt 0 && $day\
    \ -lt 31 ]]; then\n          echo \"True\"\n        else\n          echo \"False\"\
    \n        fi\n      else\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n \
    \         echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      fi\n    else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n\
    \  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 1 || $month -eq\
    \ 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n        \
    \  return 0\n        fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month\
    \ -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -gt 0 && $day -lt 31 ]];\
    \ then\n          return 0\n        fi\n      elif [[ $month -eq 2 ]]; then\n\
    \        if [[ $day -gt 0 && $day -lt 30 ]]; then\n          return 0\n      \
    \  fi\n      fi\n    fi\n  fi\n  return 1\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # check if the string is empty\n    if [ -z \"$1\" ]; then\n        echo\
    \ \"False\"\n        return\n    fi\n\n    # check if the string is in the format\
    \ mm-dd-yyyy\n    if [[ ! $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n      \
    \  echo \"False\"\n        return\n    fi\n\n    # check if the months is not\
    \ less than 1 or higher than 12\n    month=$(echo $1 | cut -d'-' -f1)\n    if\
    \ [ $month -lt 1 ] || [ $month -gt 12 ]; then\n        echo \"False\"\n      \
    \  return\n    fi\n\n    # check if the number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12\n    day=$(echo $1 | cut -d'-' -f2)\n\
    \    if [ $month -eq 1 ] || [ $month -eq 3 ] || [ $month -eq 5 ] || [ $month -eq\
    \ 7 ] || [ $month -eq 8 ] || [ $month -eq 10 ] || [ $month -eq 12 ]; then\n  \
    \      if [ $day -lt 1 ] || [ $day -gt 31 ]; then\n            echo \"False\"\n\
    \            return\n        fi\n    fi\n\n    # check if the number of days is\
    \ not less than 1 or higher than 30 days for months 4,6,9,11\n    if [ $month\
    \ -eq 4 ] || [ $month -eq 6 ] || [ $month -eq 9 ] || [ $month -eq 11 ]; then\n\
    \        if [ $day -lt 1 ] || [ $day -gt 30 ]; then\n            echo \"False\"\
    \n            return\n        fi\n    fi\n\n    # check if the number of days\
    \ is not less than 1 or higher than 29 for the month 2\n    if [ $month -eq 2\
    \ ]; then\n        if [ $day -lt 1 ] || [ $day -gt 29 ]; then\n            echo\
    \ \"False\"\n            return\n        fi\n    fi\n\n    echo \"True\"\n}\n\n\
    candidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 1 || $month -eq\
    \ 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n        \
    \  return 0\n        fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month\
    \ -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -gt 0 && $day -lt 31 ]];\
    \ then\n          return 0\n        fi\n      elif [[ $month -eq 2 ]]; then\n\
    \        if [[ $day -gt 0 && $day -lt 30 ]]; then\n          return 0\n      \
    \  fi\n      fi\n    fi\n  fi\n  return 1\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        month=\"\
    ${BASH_REMATCH[1]}\"\n        day=\"${BASH_REMATCH[2]}\"\n        year=\"${BASH_REMATCH[3]}\"\
    \n        if [[ $month -gt 0 && $month -lt 13 ]]; then\n            if [[ $month\
    \ -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month\
    \ -eq 10 || $month -eq 12 ]]; then\n                if [[ $day -gt 0 && $day -lt\
    \ 32 ]]; then\n                    echo \"True\"\n                else\n     \
    \               echo \"False\"\n                fi\n            elif [[ $month\
    \ -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n          \
    \      if [[ $day -gt 0 && $day -lt 31 ]]; then\n                    echo \"True\"\
    \n                else\n                    echo \"False\"\n                fi\n\
    \            elif [[ $month -eq 2 ]]; then\n                if [[ $day -gt 0 &&\
    \ $day -lt 30 ]]; then\n                    echo \"True\"\n                else\n\
    \                    echo \"False\"\n                fi\n            fi\n    \
    \    else\n            echo \"False\"\n        fi\n    else\n        echo \"False\"\
    \n    fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -eq\
    \ 2 ]]; then\n      if [[ $((year % 4)) -eq 0 ]]; then\n        if [[ $day -le\
    \ 29 ]]; then\n          echo \"True\"\n        else\n          echo \"False\"\
    \n        fi\n      else\n        if [[ $day -le 28 ]]; then\n          echo \"\
    True\"\n        else\n          echo \"False\"\n        fi\n      fi\n    elif\
    \ [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq\
    \ 8 || $month -eq 10 || $month -eq 12 ]]; then\n      if [[ $day -le 31 ]]; then\n\
    \        echo \"True\"\n      else\n        echo \"False\"\n      fi\n    elif\
    \ [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n\
    \      if [[ $day -le 30 ]]; then\n        echo \"True\"\n      else\n       \
    \ echo \"False\"\n      fi\n    else\n      echo \"False\"\n    fi\n  else\n \
    \   echo \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\"\
    \ ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"\
    01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") =\
    \ \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -eq\
    \ 2 ]]; then\n      if [[ $((year % 4)) -eq 0 ]]; then\n        if [[ $day -gt\
    \ 29 ]]; then\n          echo \"False\"\n          return\n        fi\n      else\n\
    \        if [[ $day -gt 28 ]]; then\n          echo \"False\"\n          return\n\
    \        fi\n      fi\n    elif [[ $month -eq 4 || $month -eq 6 || $month -eq\
    \ 9 || $month -eq 11 ]]; then\n      if [[ $day -gt 30 ]]; then\n        echo\
    \ \"False\"\n        return\n      fi\n    elif [[ $month -eq 1 || $month -eq\
    \ 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n      if [[ $day -gt 31 ]]; then\n        echo \"False\"\n\
    \        return\n      fi\n    else\n      echo \"False\"\n      return\n    fi\n\
    \    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n   \
    \ valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # check if the date is empty\n    if [ -z \"$1\" ]; then\n        return\
    \ 1\n    fi\n\n    # check if the date is in the format mm-dd-yyyy\n    if [[\
    \ ! \"$1\" =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n        return 1\n    fi\n\
    \n    # check if the month is valid\n    month=$(echo \"$1\" | cut -d '-' -f 1)\n\
    \    if [ \"$month\" -lt 1 ] || [ \"$month\" -gt 12 ]; then\n        return 1\n\
    \    fi\n\n    # check if the day is valid\n    day=$(echo \"$1\" | cut -d '-'\
    \ -f 2)\n    if [ \"$day\" -lt 1 ] || [ \"$day\" -gt 31 ]; then\n        return\
    \ 1\n    fi\n\n    # check if the year is valid\n    year=$(echo \"$1\" | cut\
    \ -d '-' -f 3)\n    if [ \"$year\" -lt 1 ]; then\n        return 1\n    fi\n\n\
    \    # check if the day is valid for the month\n    if [ \"$month\" -eq 2 ]; then\n\
    \        if [ \"$day\" -gt 29 ]; then\n            return 1\n        fi\n    elif\
    \ [ \"$month\" -eq 4 ] || [ \"$month\" -eq 6 ] || [ \"$month\" -eq 9 ] || [ \"\
    $month\" -eq 11 ]; then\n        if [ \"$day\" -gt 30 ]; then\n            return\
    \ 1\n        fi\n    fi\n\n    return 0\n}\n\ncandidate() {\n    valid_date \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n\
    \        if [[ $((year % 4)) -eq 0 ]]; then\n          if [[ $day -gt 0 && $day\
    \ -lt 30 ]]; then\n            return 0\n          fi\n        else\n        \
    \  if [[ $day -gt 0 && $day -lt 29 ]]; then\n            return 0\n          fi\n\
    \        fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month\
    \ -eq 11 ]]; then\n        if [[ $day -gt 0 && $day -lt 31 ]]; then\n        \
    \  return 0\n        fi\n      else\n        if [[ $day -gt 0 && $day -lt 32 ]];\
    \ then\n          return 0\n        fi\n      fi\n    fi\n  fi\n  return 1\n}\n\
    \ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # check if the string is empty\n    if [ -z \"$1\" ]; then\n        echo\
    \ \"False\"\n        return\n    fi\n\n    # check if the string is in the format:\
    \ mm-dd-yyyy\n    if [[ ! \"$1\" =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n  \
    \      echo \"False\"\n        return\n    fi\n\n    # extract the month, day,\
    \ and year from the string\n    month=$(echo \"$1\" | cut -d '-' -f 1)\n    day=$(echo\
    \ \"$1\" | cut -d '-' -f 2)\n    year=$(echo \"$1\" | cut -d '-' -f 3)\n\n   \
    \ # check if the month is less than 1 or higher than 12\n    if [ \"$month\" -lt\
    \ 1 ] || [ \"$month\" -gt 12 ]; then\n        echo \"False\"\n        return\n\
    \    fi\n\n    # check if the day is less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12\n    if [ \"$month\" -eq 1 ] || [ \"$month\" -eq 3 ] || [ \"\
    $month\" -eq 5 ] || [ \"$month\" -eq 7 ] || [ \"$month\" -eq 8 ] || [ \"$month\"\
    \ -eq 10 ] || [ \"$month\" -eq 12 ]; then\n        if [ \"$day\" -lt 1 ] || [\
    \ \"$day\" -gt 31 ]; then\n            echo \"False\"\n            return\n  \
    \      fi\n    fi\n\n    # check if the day is less than 1 or higher than 30 days\
    \ for months 4,6,9,11\n    if [ \"$month\" -eq 4 ] || [ \"$month\" -eq 6 ] ||\
    \ [ \"$month\" -eq 9 ] || [ \"$month\" -eq 11 ]; then\n        if [ \"$day\" -lt\
    \ 1 ] || [ \"$day\" -gt 30 ]; then\n            echo \"False\"\n            return\n\
    \        fi\n    fi\n\n    # check if the day is less than 1 or higher than 29\
    \ for the month 2\n    if [ \"$month\" -eq 2 ]; then\n        if [ \"$day\" -lt\
    \ 1 ] || [ \"$day\" -gt 29 ]; then\n            echo \"False\"\n\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_3jqkc97.sh: line 62: syntax error near unexpected token `}''

    /tmp/tmp_3jqkc97.sh: line 62: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    local date=$1\n    local month=${date:0:2}\n    local day=${date:3:2}\n\
    \    local year=${date:6:4}\n    local valid_month=0\n    local valid_day=0\n\
    \    local valid_year=0\n    local valid_format=0\n    local valid_date=0\n  \
    \  local valid_date_format=\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\n    if [[ $date =~\
    \ $valid_date_format ]]; then\n        valid_format=1\n    fi\n    if [[ $month\
    \ -ge 1 && $month -le 12 ]]; then\n        valid_month=1\n    fi\n    if [[ $year\
    \ -ge 1 ]]; then\n        valid_year=1\n    fi\n    if [[ $month -eq 1 || $month\
    \ -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n        if [[ $day -ge 1 && $day -le 31 ]]; then\n        \
    \    valid_day=1\n        fi\n    elif [[ $month -eq 4 || $month -eq 6 || $month\
    \ -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -ge 1 && $day -le 30 ]];\
    \ then\n            valid_day=1\n        fi\n    elif [[ $month -eq 2 ]]; then\n\
    \        if [[ $day -ge 1 && $day -le 29 ]]; then\n            valid_day=1\n \
    \       fi\n    fi\n    if [[ $valid_format -eq 1 && $valid_month -eq 1 && $valid_day\
    \ -eq 1 && $valid_year -eq 1 ]]; then\n        valid_date=1\n    fi\n    if [[\
    \ $valid_date -eq 1 ]]; then\n        echo \"True\"\n    else\n        echo \"\
    False\"\n    fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ -z $1 ]]; then\n    echo \"False\"\n    return\n  fi\n  if [[ $1\
    \ =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -gt\
    \ 12 || $month -lt 1 ]]; then\n      echo \"False\"\n      return\n    fi\n  \
    \  if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month\
    \ -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n      if [[ $day -gt 31 ||\
    \ $day -lt 1 ]]; then\n        echo \"False\"\n        return\n      fi\n    elif\
    \ [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n\
    \      if [[ $day -gt 30 || $day -lt 1 ]]; then\n        echo \"False\"\n    \
    \    return\n      fi\n    elif [[ $month -eq 2 ]]; then\n      if [[ $day -gt\
    \ 29 || $day -lt 1 ]]; then\n        echo \"False\"\n        return\n      fi\n\
    \    fi\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        month=${BASH_REMATCH[1]}\n\
    \        day=${BASH_REMATCH[2]}\n        year=${BASH_REMATCH[3]}\n        if [[\
    \ $month -ge 1 && $month -le 12 ]]; then\n            if [[ $month -eq 1 || $month\
    \ -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n                if [[ $day -ge 1 && $day -le 31 ]]; then\n\
    \                    echo \"True\"\n                else\n                   \
    \ echo \"False\"\n                fi\n            elif [[ $month -eq 4 || $month\
    \ -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n                if [[ $day\
    \ -ge 1 && $day -le 30 ]]; then\n                    echo \"True\"\n         \
    \       else\n                    echo \"False\"\n                fi\n       \
    \     elif [[ $month -eq 2 ]]; then\n                if [[ $day -ge 1 && $day\
    \ -le 29 ]]; then\n                    echo \"True\"\n                else\n \
    \                   echo \"False\"\n                fi\n            fi\n     \
    \   else\n            echo \"False\"\n        fi\n    else\n        echo \"False\"\
    \n    fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -gt\
    \ 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n        if [[\
    \ $((year % 4)) -eq 0 ]]; then\n          if [[ $day -gt 0 && $day -lt 30 ]];\
    \ then\n            echo \"True\"\n          else\n            echo \"False\"\n\
    \          fi\n        else\n          if [[ $day -gt 0 && $day -lt 29 ]]; then\n\
    \            echo \"True\"\n          else\n            echo \"False\"\n     \
    \     fi\n        fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month -eq\
    \ 9 || $month -eq 11 ]]; then\n        if [[ $day -gt 0 && $day -lt 31 ]]; then\n\
    \          echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      else\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n          echo\
    \ \"True\"\n        else\n          echo \"False\"\n        fi\n      fi\n   \
    \ else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\n\
    candidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -gt\
    \ 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n        if [[\
    \ $((year % 4)) -eq 0 ]]; then\n          if [[ $day -gt 0 && $day -lt 30 ]];\
    \ then\n            echo \"True\"\n          else\n            echo \"False\"\n\
    \          fi\n        else\n          if [[ $day -gt 0 && $day -lt 29 ]]; then\n\
    \            echo \"True\"\n          else\n            echo \"False\"\n     \
    \     fi\n        fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month -eq\
    \ 9 || $month -eq 11 ]]; then\n        if [[ $day -gt 0 && $day -lt 31 ]]; then\n\
    \          echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      else\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n          echo\
    \ \"True\"\n        else\n          echo \"False\"\n        fi\n      fi\n   \
    \ else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\n\
    candidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # Write your code here\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[\
    \ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbkq9qs47.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpbkq9qs47.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  # use the following command to debug your code\n\
    \  # echo \"date: $1\"\n  if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n\
    \    month=$(echo $1 | cut -d'-' -f1)\n    day=$(echo $1 | cut -d'-' -f2)\n  \
    \  year=$(echo $1 | cut -d'-' -f3)\n    if [[ $month -ge 1 && $month -le 12 ]];\
    \ then\n      if [[ $day -ge 1 && $day -le 31 ]]; then\n        if [[ $month -eq\
    \ 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month\
    \ -eq 10 || $month -eq 12 ]]; then\n          echo \"True\"\n        elif [[ $month\
    \ -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n          if\
    \ [[ $day -le 30 ]]; then\n            echo \"True\"\n          else\n       \
    \     echo \"False\"\n          fi\n        elif [[ $month -eq 2 ]]; then\n  \
    \        if [[ $day -le 29 ]]; then\n            echo \"True\"\n          else\n\
    \            echo \"False\"\n          fi\n        fi\n      else\n        echo\
    \ \"False\"\n      fi\n    else\n      echo \"False\"\n    fi\n  else\n    echo\
    \ \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        month=${BASH_REMATCH[1]}\n\
    \        day=${BASH_REMATCH[2]}\n        year=${BASH_REMATCH[3]}\n        if ((\
    \ $month < 1 || $month > 12 )); then\n            return 1\n        fi\n     \
    \   if (( $month == 2 )); then\n            if (( $day < 1 || $day > 29 )); then\n\
    \                return 1\n            fi\n        elif (( $month == 4 || $month\
    \ == 6 || $month == 9 || $month == 11 )); then\n            if (( $day < 1 ||\
    \ $day > 30 )); then\n                return 1\n            fi\n        else\n\
    \            if (( $day < 1 || $day > 31 )); then\n                return 1\n\
    \            fi\n        fi\n        return 0\n    fi\n    return 1\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # your code here\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]];\
    \ then\n    month=${BASH_REMATCH[1]}\n    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n\
    \    if [[ $month -lt 1 || $month -gt 12 ]]; then\n      echo \"False\"\n    elif\
    \ [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq\
    \ 8 || $month -eq 10 || $month -eq 12 ]]; then\n      if [[ $day -lt 1 || $day\
    \ -gt 31 ]]; then\n        echo \"False\"\n      else\n        echo \"True\"\n\
    \      fi\n    elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month\
    \ -eq 11 ]]; then\n      if [[ $day -lt 1 || $day -gt 30 ]]; then\n        echo\
    \ \"False\"\n      else\n        echo \"True\"\n      fi\n    elif [[ $month -eq\
    \ 2 ]]; then\n      if [[ $day -lt 1 || $day -gt 29 ]]; then\n        echo \"\
    False\"\n      else\n        echo \"True\"\n      fi\n    fi\n  else\n    echo\
    \ \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n\
    \        if [[ $((year % 4)) -eq 0 ]]; then\n          if [[ $day -gt 0 && $day\
    \ -lt 30 ]]; then\n            echo \"True\"\n          else\n            echo\
    \ \"False\"\n          fi\n        else\n          if [[ $day -gt 0 && $day -lt\
    \ 29 ]]; then\n            echo \"True\"\n          else\n            echo \"\
    False\"\n          fi\n        fi\n      elif [[ $month -eq 4 || $month -eq 6\
    \ || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -gt 0 && $day\
    \ -lt 31 ]]; then\n          echo \"True\"\n        else\n          echo \"False\"\
    \n        fi\n      else\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n \
    \         echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      fi\n    else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n\
    \  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -ge\
    \ 1 && $month -le 12 ]]; then\n      if [[ $month -eq 1 || $month -eq 3 || $month\
    \ -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]];\
    \ then\n        if [[ $day -ge 1 && $day -le 31 ]]; then\n          echo \"True\"\
    \n        else\n          echo \"False\"\n        fi\n      elif [[ $month -eq\
    \ 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day\
    \ -ge 1 && $day -le 30 ]]; then\n          echo \"True\"\n        else\n     \
    \     echo \"False\"\n        fi\n      elif [[ $month -eq 2 ]]; then\n      \
    \  if [[ $day -ge 1 && $day -le 29 ]]; then\n          echo \"True\"\n       \
    \ else\n          echo \"False\"\n        fi\n      fi\n    else\n      echo \"\
    False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -gt\
    \ 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n        if [[\
    \ $day -gt 0 && $day -lt 30 ]]; then\n          echo True\n        else\n    \
    \      echo False\n        fi\n      elif [[ $month -eq 1 || $month -eq 3 || $month\
    \ -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]];\
    \ then\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n          echo True\n\
    \        else\n          echo False\n        fi\n      elif [[ $month -eq 4 ||\
    \ $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -gt\
    \ 0 && $day -lt 31 ]]; then\n          echo True\n        else\n          echo\
    \ False\n        fi\n      fi\n    else\n      echo False\n    fi\n  else\n  \
    \  echo False\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\"\
    \ ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"\
    01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") =\
    \ \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # write your code here\n    if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\
    \ ]]; then\n        month=$(echo $1 | cut -d- -f1)\n        day=$(echo $1 | cut\
    \ -d- -f2)\n        year=$(echo $1 | cut -d- -f3)\n        if [[ $month -ge 1\
    \ && $month -le 12 ]]; then\n            if [[ $month -eq 1 || $month -eq 3 ||\
    \ $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq\
    \ 12 ]]; then\n                if [[ $day -ge 1 && $day -le 31 ]]; then\n    \
    \                return 0\n                fi\n            elif [[ $month -eq\
    \ 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n              \
    \  if [[ $day -ge 1 && $day -le 30 ]]; then\n                    return 0\n  \
    \              fi\n            elif [[ $month -eq 2 ]]; then\n               \
    \ if [[ $day -ge 1 && $day -le 29 ]]; then\n                    return 0\n   \
    \             fi\n            fi\n        fi\n    fi\n    return 1\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  local date=$1\n  local month=$(echo $date | cut -d'-' -f1)\n  local day=$(echo\
    \ $date | cut -d'-' -f2)\n  local year=$(echo $date | cut -d'-' -f3)\n  local\
    \ max_days=31\n  local valid_format=true\n  local valid_month=true\n  local valid_day=true\n\
    \  local valid_year=true\n\n  if [[ $date == *\"/\"* ]]; then\n    valid_format=false\n\
    \  fi\n\n  if [[ $month -lt 1 || $month -gt 12 ]]; then\n    valid_month=false\n\
    \  fi\n\n  if [[ $month == 2 ]]; then\n    max_days=29\n  elif [[ $month == 4\
    \ || $month == 6 || $month == 9 || $month == 11 ]]; then\n    max_days=30\n  fi\n\
    \n  if [[ $day -lt 1 || $day -gt $max_days ]]; then\n    valid_day=false\n  fi\n\
    \n  if [[ $year -lt 1 ]]; then\n    valid_year=false\n  fi\n\n  if [[ $valid_format\
    \ == true && $valid_month == true && $valid_day == true && $valid_year == true\
    \ ]]; then\n    echo True\n  else\n    echo False\n  fi\n}\n\ncandidate() {\n\
    \    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$ ]]; then\n\
    \    local month=$(echo $1 | cut -d'-' -f1)\n    local day=$(echo $1 | cut -d'-'\
    \ -f2)\n    local year=$(echo $1 | cut -d'-' -f3)\n    if [[ $month -eq 2 ]];\
    \ then\n      if [[ $((year % 4)) -eq 0 ]]; then\n        if [[ $day -gt 29 ]];\
    \ then\n          echo \"False\"\n          return\n        fi\n      else\n \
    \       if [[ $day -gt 28 ]]; then\n          echo \"False\"\n          return\n\
    \        fi\n      fi\n    elif [[ $month -eq 4 || $month -eq 6 || $month -eq\
    \ 9 || $month -eq 11 ]]; then\n      if [[ $day -gt 30 ]]; then\n        echo\
    \ \"False\"\n        return\n      fi\n    elif [[ $day -gt 31 ]]; then\n    \
    \  echo \"False\"\n      return\n    fi\n    echo \"True\"\n  else\n    echo \"\
    False\"\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 0
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  local date=$1\n  local month=$(echo $date | cut -d'-' -f1)\n  local day=$(echo\
    \ $date | cut -d'-' -f2)\n  local year=$(echo $date | cut -d'-' -f3)\n  local\
    \ max_day=31\n  local is_leap_year=false\n  local is_valid_date=false\n\n  if\
    \ [[ $month -eq 2 ]]; then\n    if [[ $((year % 4)) -eq 0 ]]; then\n      if [[\
    \ $((year % 100)) -eq 0 ]]; then\n        if [[ $((year % 400)) -eq 0 ]]; then\n\
    \          is_leap_year=true\n        fi\n      else\n        is_leap_year=true\n\
    \      fi\n    fi\n  fi\n\n  if [[ $month -eq 2 ]]; then\n    if [[ $is_leap_year\
    \ == true ]]; then\n      max_day=29\n    else\n      max_day=28\n    fi\n  elif\
    \ [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n\
    \    max_day=30\n  fi\n\n  if [[ $month -ge 1 && $month -le 12 ]]; then\n    if\
    \ [[ $day -ge 1 && $day -le $max_day ]]; then\n      is_valid_date=true\n    fi\n\
    \  fi\n\n  echo $is_valid_date\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n   \
    \ [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # your code here\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\"\
    \ ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"\
    01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") =\
    \ \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1m47k2ze.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmp1m47k2ze.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        month=${BASH_REMATCH[1]}\n\
    \        day=${BASH_REMATCH[2]}\n        year=${BASH_REMATCH[3]}\n        if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n            if [[ $month -eq 1 || $month\
    \ -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n                if [[ $day -gt 0 && $day -lt 32 ]]; then\n\
    \                    echo \"True\"\n                else\n                   \
    \ echo \"False\"\n                fi\n            elif [[ $month -eq 4 || $month\
    \ -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n                if [[ $day\
    \ -gt 0 && $day -lt 31 ]]; then\n                    echo \"True\"\n         \
    \       else\n                    echo \"False\"\n                fi\n       \
    \     elif [[ $month -eq 2 ]]; then\n                if [[ $day -gt 0 && $day\
    \ -lt 30 ]]; then\n                    echo \"True\"\n                else\n \
    \                   echo \"False\"\n                fi\n            fi\n     \
    \   else\n            echo \"False\"\n        fi\n    else\n        echo \"False\"\
    \n    fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n\
    \        if [[ $((year % 4)) -eq 0 ]]; then\n          if [[ $day -gt 0 && $day\
    \ -lt 30 ]]; then\n            echo \"True\"\n          else\n            echo\
    \ \"False\"\n          fi\n        else\n          if [[ $day -gt 0 && $day -lt\
    \ 29 ]]; then\n            echo \"True\"\n          else\n            echo \"\
    False\"\n          fi\n        fi\n      elif [[ $month -eq 4 || $month -eq 6\
    \ || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -gt 0 && $day\
    \ -lt 31 ]]; then\n          echo \"True\"\n        else\n          echo \"False\"\
    \n        fi\n      else\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n \
    \         echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      fi\n    else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n\
    \  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  if [ -z \"$1\" ]; then\n    echo False\n    return\n\
    \  fi\n  if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n    month=$(echo $1\
    \ | cut -d'-' -f1)\n    day=$(echo $1 | cut -d'-' -f2)\n    year=$(echo $1 | cut\
    \ -d'-' -f3)\n    if [ $month -eq 1 ] || [ $month -eq 3 ] || [ $month -eq 5 ]\
    \ || [ $month -eq 7 ] || [ $month -eq 8 ] || [ $month -eq 10 ] || [ $month -eq\
    \ 12 ]; then\n      if [ $day -ge 1 ] && [ $day -le 31 ]; then\n        echo True\n\
    \        return\n      fi\n    elif [ $month -eq 4 ] || [ $month -eq 6 ] || [\
    \ $month -eq 9 ] || [ $month -eq 11 ]; then\n      if [ $day -ge 1 ] && [ $day\
    \ -le 30 ]; then\n        echo True\n        return\n      fi\n    elif [ $month\
    \ -eq 2 ]; then\n      if [ $day -ge 1 ] && [ $day -le 29 ]; then\n        echo\
    \ True\n        return\n      fi\n    fi\n  fi\n  echo False\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  [[ $1 =~ ^([0-1][0-9]|2[0-9]|3[0-1])-([0-1][0-9]|2[0-9]|3[0-1])-([0-9]{4})$\
    \ ]] &&\n  [[ ${BASH_REMATCH[1]} -gt 0 ]] &&\n  [[ ${BASH_REMATCH[2]} -gt 0 ]]\
    \ &&\n  [[ ${BASH_REMATCH[3]} -gt 0 ]] &&\n  [[ ${BASH_REMATCH[1]} -le 31 ]] &&\n\
    \  [[ ${BASH_REMATCH[2]} -le 12 ]] &&\n  (( ${BASH_REMATCH[2]} == 1 || ${BASH_REMATCH[2]}\
    \ == 3 || ${BASH_REMATCH[2]} == 5 || ${BASH_REMATCH[2]} == 7 || ${BASH_REMATCH[2]}\
    \ == 8 || ${BASH_REMATCH[2]} == 10 || ${BASH_REMATCH[2]} == 12 )) &&\n  (( ${BASH_REMATCH[1]}\
    \ <= 31 )) &&\n  (( ${BASH_REMATCH[2]} == 4 || ${BASH_REMATCH[2]} == 6 || ${BASH_REMATCH[2]}\
    \ == 9 || ${BASH_REMATCH[2]} == 11 )) &&\n  (( ${BASH_REMATCH[1]} <= 30 )) &&\n\
    \  (( ${BASH_REMATCH[2]} == 2 )) &&\n  (( ${BASH_REMATCH[1]} <= 29 ))\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # Your code here\n    if [ -z \"$1\" ]; then\n        echo \"False\"\n\
    \        return\n    fi\n    if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n\
    \        IFS='-' read -ra ADDR <<< \"$1\"\n        if [ ${ADDR[0]} -gt 12 ]; then\n\
    \            echo \"False\"\n            return\n        fi\n        if [ ${ADDR[0]}\
    \ -eq 1 ] || [ ${ADDR[0]} -eq 3 ] || [ ${ADDR[0]} -eq 5 ] || [ ${ADDR[0]} -eq\
    \ 7 ] || [ ${ADDR[0]} -eq 8 ] || [ ${ADDR[0]} -eq 10 ] || [ ${ADDR[0]} -eq 12\
    \ ]; then\n            if [ ${ADDR[1]} -gt 31 ]; then\n                echo \"\
    False\"\n                return\n            fi\n        elif [ ${ADDR[0]} -eq\
    \ 4 ] || [ ${ADDR[0]} -eq 6 ] || [ ${ADDR[0]} -eq 9 ] || [ ${ADDR[0]} -eq 11 ];\
    \ then\n            if [ ${ADDR[1]} -gt 30 ]; then\n                echo \"False\"\
    \n                return\n            fi\n        elif [ ${ADDR[0]} -eq 2 ]; then\n\
    \            if [ ${ADDR[1]} -gt 29 ]; then\n                echo \"False\"\n\
    \                return\n            fi\n        fi\n        echo \"True\"\n \
    \   else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    valid_date \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  [[ $1 =~ ^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-([0-9]{4})$ ]] &&\n\
    \  [[ $1 != \"02-29-*\" ]] &&\n  [[ ! $1 =~ ^(04|06|09|11)-31- ]] &&\n  [[ ! $1\
    \ =~ ^02-30- ]] &&\n  [[ ! $1 =~ ^02-29-(([02468][048])|([13579][26]))$ ]]\n}\n\
    \ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n\
    \        if [[ $((year % 4)) -eq 0 ]]; then\n          if [[ $day -gt 0 && $day\
    \ -lt 30 ]]; then\n            echo \"True\"\n          else\n            echo\
    \ \"False\"\n          fi\n        else\n          if [[ $day -gt 0 && $day -lt\
    \ 29 ]]; then\n            echo \"True\"\n          else\n            echo \"\
    False\"\n          fi\n        fi\n      elif [[ $month -eq 4 || $month -eq 6\
    \ || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -gt 0 && $day\
    \ -lt 31 ]]; then\n          echo \"True\"\n        else\n          echo \"False\"\
    \n        fi\n      else\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n \
    \         echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      fi\n    else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n\
    \  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6sb_syqe.sh: line 188: syntax error near unexpected token `}''

    /tmp/tmp6sb_syqe.sh: line 188: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        month=${BASH_REMATCH[1]}\n\
    \        day=${BASH_REMATCH[2]}\n        year=${BASH_REMATCH[3]}\n        if ((\
    \ year > 0 )); then\n            if (( month >= 1 && month <= 12 )); then\n  \
    \              if (( day >= 1 && day <= 31 )); then\n                    if ((\
    \ month == 2 )); then\n                        if (( day <= 29 )); then\n    \
    \                        echo \"True\"\n                        else\n       \
    \                     echo \"False\"\n                        fi\n           \
    \         elif (( month == 4 || month == 6 || month == 9 || month == 11 )); then\n\
    \                        if (( day <= 30 )); then\n                          \
    \  echo \"True\"\n                        else\n                            echo\
    \ \"False\"\n                        fi\n                    else\n          \
    \              echo \"True\"\n                    fi\n                else\n \
    \                   echo \"False\"\n                fi\n            else\n   \
    \             echo \"False\"\n            fi\n        else\n            echo \"\
    False\"\n        fi\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n\
    \        if [[ $((year % 4)) -eq 0 ]]; then\n          if [[ $day -gt 0 && $day\
    \ -lt 30 ]]; then\n            echo \"True\"\n          else\n            echo\
    \ \"False\"\n          fi\n        else\n          if [[ $day -gt 0 && $day -lt\
    \ 29 ]]; then\n            echo \"True\"\n          else\n            echo \"\
    False\"\n          fi\n        fi\n      elif [[ $month -eq 4 || $month -eq 6\
    \ || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -gt 0 && $day\
    \ -lt 31 ]]; then\n          echo \"True\"\n        else\n          echo \"False\"\
    \n        fi\n      else\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n \
    \         echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      fi\n    else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n\
    \  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  # hint: you can use the following command to\
    \ check if a string is empty:\n  # [ -z \"$1\" ]\n  # hint: you can use the following\
    \ command to check if a string is in the format mm-dd-yyyy:\n  # [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\
    \ ]]\n  # hint: you can use the following command to check if a string is in the\
    \ format mm/dd/yyyy:\n  # [[ $1 =~ ^[0-9]{2}/[0-9]{2}/[0-9]{4}$ ]]\n  # hint:\
    \ you can use the following command to check if a string is in the format mm.dd.yyyy:\n\
    \  # [[ $1 =~ ^[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}$ ]]\n  # hint: you can use the following\
    \ command to check if a string is in the format mm dd yyyy:\n  # [[ $1 =~ ^[0-9]{2}\
    \ [0-9]{2} [0-9]{4}$ ]]\n  # hint: you can use the following command to check\
    \ if a string is in the format mm/dd/yy:\n  # [[ $1 =~ ^[0-9]{2}/[0-9]{2}/[0-9]{2}$\
    \ ]]\n  # hint: you can use the following command to check if a string is in the\
    \ format mm.dd.yy:\n  # [[ $1 =~ ^[0-9]{2}\\.[0-9]{2}\\.[0-9]{2}$ ]]\n  # hint:\
    \ you can use the following command to check if a string is in the format mm dd\
    \ yy:\n  # [[ $1 =~ ^[0-9]{2} [0-9]{2} [0-9]{2}$ ]]\n  # hint: you can use the\
    \ following command to check if a string is in the format m/d/yyyy:\n  # [[ $1\
    \ =~ ^\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph47g6jzz.sh: line 37: syntax error near unexpected token `}''

    /tmp/tmph47g6jzz.sh: line 37: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  local date=$1\n  local month=$(echo $date | cut -d- -f1)\n  local day=$(echo\
    \ $date | cut -d- -f2)\n  local year=$(echo $date | cut -d- -f3)\n  local leap_year=0\n\
    \  local valid_date=0\n  local valid_month=0\n  local valid_day=0\n  local valid_year=0\n\
    \  local valid_format=0\n\n  if [[ $month -ge 1 && $month -le 12 ]]; then\n  \
    \  valid_month=1\n  fi\n\n  if [[ $year -ge 1900 && $year -le 2100 ]]; then\n\
    \    valid_year=1\n  fi\n\n  if [[ $month -eq 2 ]]; then\n    if [[ $((year %\
    \ 4)) -eq 0 ]]; then\n      if [[ $((year % 100)) -eq 0 ]]; then\n        if [[\
    \ $((year % 400)) -eq 0 ]]; then\n          leap_year=1\n        fi\n      else\n\
    \        leap_year=1\n      fi\n    fi\n  fi\n\n  if [[ $month -eq 1 || $month\
    \ -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n    if [[ $day -ge 1 && $day -le 31 ]]; then\n      valid_day=1\n\
    \    fi\n  elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq\
    \ 11 ]]; then\n    if [[ $day -ge 1 && $day -le 30 ]]; then\n      valid_day=1\n\
    \    fi\n  elif [[ $month -eq 2 ]]; then\n    if [[ $leap_year -eq 1 ]]; then\n\
    \      if [[ $day -ge 1 && $day -le 29 ]]; then\n        valid_day=1\n      fi\n\
    \    else\n      if [[ $day -ge 1 && $day -le 28 ]]; then\n        valid_day=1\n\
    \      fi\n    fi\n  fi\n\n  if [[ $date =~ ^[0-9]{2}-[0-9]{2}-[0-9]{\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo1_thivd.sh: line 69: syntax error in conditional expression

    /tmp/tmpo1_thivd.sh: line 70: syntax error near `}''

    /tmp/tmpo1_thivd.sh: line 70: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # Write your code here\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n        month=${BASH_REMATCH[1]}\n        day=${BASH_REMATCH[2]}\n\
    \        year=${BASH_REMATCH[3]}\n        if [[ $month -gt 0 && $month -lt 13\
    \ ]]; then\n            if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 ||\
    \ $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n  \
    \              if [[ $day -gt 0 && $day -lt 32 ]]; then\n                    echo\
    \ \"True\"\n                else\n                    echo \"False\"\n       \
    \         fi\n            elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9\
    \ || $month -eq 11 ]]; then\n                if [[ $day -gt 0 && $day -lt 31 ]];\
    \ then\n                    echo \"True\"\n                else\n            \
    \        echo \"False\"\n                fi\n            elif [[ $month -eq 2\
    \ ]]; then\n                if [[ $day -gt 0 && $day -lt 30 ]]; then\n       \
    \             echo \"True\"\n                else\n                    echo \"\
    False\"\n                fi\n            fi\n        else\n            echo \"\
    False\"\n        fi\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        month=${BASH_REMATCH[1]}\n\
    \        day=${BASH_REMATCH[2]}\n        year=${BASH_REMATCH[3]}\n        if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n            if [[ $month -eq 1 || $month\
    \ -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n                if [[ $day -gt 0 && $day -lt 32 ]]; then\n\
    \                    echo \"True\"\n                else\n                   \
    \ echo \"False\"\n                fi\n            elif [[ $month -eq 4 || $month\
    \ -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n                if [[ $day\
    \ -gt 0 && $day -lt 31 ]]; then\n                    echo \"True\"\n         \
    \       else\n                    echo \"False\"\n                fi\n       \
    \     elif [[ $month -eq 2 ]]; then\n                if [[ $day -gt 0 && $day\
    \ -lt 30 ]]; then\n                    echo \"True\"\n                else\n \
    \                   echo \"False\"\n                fi\n            fi\n     \
    \   else\n            echo \"False\"\n        fi\n    else\n        echo \"False\"\
    \n    fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]];\
    \ then\n    month=${1:0:2}\n    day=${1:3:2}\n    year=${1:6:4}\n    if [[ $month\
    \ -gt 0 && $month -lt 13 ]]; then\n      if [[ $month == 1 || $month == 3 || $month\
    \ == 5 || $month == 7 || $month == 8 || $month == 10 || $month == 12 ]]; then\n\
    \        if [[ $day -gt 0 && $day -lt 32 ]]; then\n          echo \"True\"\n \
    \       else\n          echo \"False\"\n        fi\n      elif [[ $month == 4\
    \ || $month == 6 || $month == 9 || $month == 11 ]]; then\n        if [[ $day -gt\
    \ 0 && $day -lt 31 ]]; then\n          echo \"True\"\n        else\n         \
    \ echo \"False\"\n        fi\n      elif [[ $month == 2 ]]; then\n        if [[\
    \ $day -gt 0 && $day -lt 30 ]]; then\n          echo \"True\"\n        else\n\
    \          echo \"False\"\n        fi\n      fi\n    else\n      echo \"False\"\
    \n    fi\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # Write your code here\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n    month=${BASH_REMATCH[1]}\n    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n\
    \    if [[ $month -ge 1 && $month -le 12 ]]; then\n      if [[ $month -eq 1 ||\
    \ $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10\
    \ || $month -eq 12 ]]; then\n        if [[ $day -ge 1 && $day -le 31 ]]; then\n\
    \          echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]];\
    \ then\n        if [[ $day -ge 1 && $day -le 30 ]]; then\n          echo \"True\"\
    \n        else\n          echo \"False\"\n        fi\n      elif [[ $month -eq\
    \ 2 ]]; then\n        if [[ $day -ge 1 && $day -le 29 ]]; then\n          echo\
    \ \"True\"\n        else\n          echo \"False\"\n        fi\n      fi\n   \
    \ else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\n\
    candidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -le\
    \ 12 && $month -ge 1 ]]; then\n      if [[ $month -eq 1 || $month -eq 3 || $month\
    \ -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]];\
    \ then\n        if [[ $day -le 31 && $day -ge 1 ]]; then\n          echo \"True\"\
    \n        else\n          echo \"False\"\n        fi\n      elif [[ $month -eq\
    \ 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day\
    \ -le 30 && $day -ge 1 ]]; then\n          echo \"True\"\n        else\n     \
    \     echo \"False\"\n        fi\n      elif [[ $month -eq 2 ]]; then\n      \
    \  if [[ $day -le 29 && $day -ge 1 ]]; then\n          echo \"True\"\n       \
    \ else\n          echo \"False\"\n        fi\n      fi\n    else\n      echo \"\
    False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -gt\
    \ 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n        if [[\
    \ $((year % 4)) -eq 0 ]]; then\n          if [[ $day -gt 0 && $day -lt 30 ]];\
    \ then\n            echo \"True\"\n          else\n            echo \"False\"\n\
    \          fi\n        else\n          if [[ $day -gt 0 && $day -lt 29 ]]; then\n\
    \            echo \"True\"\n          else\n            echo \"False\"\n     \
    \     fi\n        fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month -eq\
    \ 9 || $month -eq 11 ]]; then\n        if [[ $day -gt 0 && $day -lt 31 ]]; then\n\
    \          echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      else\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n          echo\
    \ \"True\"\n        else\n          echo \"False\"\n        fi\n      fi\n   \
    \ else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\n\
    candidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  local date=$1\n  local month=$(echo $date | cut -d'-' -f1)\n  local day=$(echo\
    \ $date | cut -d'-' -f2)\n  local year=$(echo $date | cut -d'-' -f3)\n  local\
    \ max_days=31\n  if [ $month -eq 2 ]; then\n    max_days=29\n  elif [ $month -eq\
    \ 4 -o $month -eq 6 -o $month -eq 9 -o $month -eq 11 ]; then\n    max_days=30\n\
    \  fi\n  if [ -z $date ]; then\n    echo \"False\"\n  elif [ $day -lt 1 -o $day\
    \ -gt $max_days ]; then\n    echo \"False\"\n  elif [ $month -lt 1 -o $month -gt\
    \ 12 ]; then\n    echo \"False\"\n  elif [ ${#year} -ne 4 ]; then\n    echo \"\
    False\"\n  else\n    echo \"True\"\n  fi\n}\n\ncandidate() {\n    valid_date \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # Write your code here\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n    month=${BASH_REMATCH[1]}\n    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n\
    \    if [[ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 1 ||\
    \ $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10\
    \ || $month -eq 12 ]]; then\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n\
    \          echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]];\
    \ then\n        if [[ $day -gt 0 && $day -lt 31 ]]; then\n          echo \"True\"\
    \n        else\n          echo \"False\"\n        fi\n      elif [[ $month -eq\
    \ 2 ]]; then\n        if [[ $day -gt 0 && $day -lt 30 ]]; then\n          echo\
    \ \"True\"\n        else\n          echo \"False\"\n        fi\n      fi\n   \
    \ else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\n\
    candidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # your code here\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n        if [[ ${BASH_REMATCH[1]} -le 12 ]]; then\n            if [[\
    \ ${BASH_REMATCH[1]} -eq 1 || ${BASH_REMATCH[1]} -eq 3 || ${BASH_REMATCH[1]} -eq\
    \ 5 || ${BASH_REMATCH[1]} -eq 7 || ${BASH_REMATCH[1]} -eq 8 || ${BASH_REMATCH[1]}\
    \ -eq 10 || ${BASH_REMATCH[1]} -eq 12 ]]; then\n                if [[ ${BASH_REMATCH[2]}\
    \ -le 31 ]]; then\n                    echo \"True\"\n                else\n \
    \                   echo \"False\"\n                fi\n            elif [[ ${BASH_REMATCH[1]}\
    \ -eq 4 || ${BASH_REMATCH[1]} -eq 6 || ${BASH_REMATCH[1]} -eq 9 || ${BASH_REMATCH[1]}\
    \ -eq 11 ]]; then\n                if [[ ${BASH_REMATCH[2]} -le 30 ]]; then\n\
    \                    echo \"True\"\n                else\n                   \
    \ echo \"False\"\n                fi\n            elif [[ ${BASH_REMATCH[1]} -eq\
    \ 2 ]]; then\n                if [[ ${BASH_REMATCH[2]} -le 29 ]]; then\n     \
    \               echo \"True\"\n                else\n                    echo\
    \ \"False\"\n                fi\n            fi\n        else\n            echo\
    \ \"False\"\n        fi\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -ge\
    \ 1 && $month -le 12 ]]; then\n      if [[ $month -eq 1 || $month -eq 3 || $month\
    \ -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]];\
    \ then\n        if [[ $day -ge 1 && $day -le 31 ]]; then\n          echo \"True\"\
    \n        else\n          echo \"False\"\n        fi\n      elif [[ $month -eq\
    \ 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day\
    \ -ge 1 && $day -le 30 ]]; then\n          echo \"True\"\n        else\n     \
    \     echo \"False\"\n        fi\n      elif [[ $month -eq 2 ]]; then\n      \
    \  if [[ $day -ge 1 && $day -le 29 ]]; then\n          echo \"True\"\n       \
    \ else\n          echo \"False\"\n        fi\n      fi\n    else\n      echo \"\
    False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]];\
    \ then\n    month=$(echo $1 | cut -d '-' -f 1)\n    day=$(echo $1 | cut -d '-'\
    \ -f 2)\n    year=$(echo $1 | cut -d '-' -f 3)\n    if [[ $month -ge 1 && $month\
    \ -le 12 ]]; then\n      if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 ||\
    \ $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n  \
    \      if [[ $day -ge 1 && $day -le 31 ]]; then\n          echo True\n       \
    \ else\n          echo False\n        fi\n      elif [[ $month -eq 4 || $month\
    \ -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -ge 1 &&\
    \ $day -le 30 ]]; then\n          echo True\n        else\n          echo False\n\
    \        fi\n      elif [[ $month -eq 2 ]]; then\n        if [[ $day -ge 1 &&\
    \ $day -le 29 ]]; then\n          echo True\n        else\n          echo False\n\
    \        fi\n      fi\n    else\n      echo False\n    fi\n  else\n    echo False\n\
    \  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        local\
    \ month=${BASH_REMATCH[1]}\n        local day=${BASH_REMATCH[2]}\n        local\
    \ year=${BASH_REMATCH[3]}\n        if [[ $month -gt 0 && $month -lt 13 ]]; then\n\
    \            if [[ $month -eq 2 ]]; then\n                if [[ $day -gt 0 &&\
    \ $day -lt 30 ]]; then\n                    return 0\n                fi\n   \
    \         elif [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7\
    \ || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n               \
    \ if [[ $day -gt 0 && $day -lt 32 ]]; then\n                    return 0\n   \
    \             fi\n            elif [[ $month -eq 4 || $month -eq 6 || $month -eq\
    \ 9 || $month -eq 11 ]]; then\n                if [[ $day -gt 0 && $day -lt 31\
    \ ]]; then\n                    return 0\n                fi\n            fi\n\
    \        fi\n    fi\n    return 1\n}\n\ncandidate() {\n    valid_date \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n\
    \    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ -z $1 ]]; then\n    echo \"False\"\n    return\n  fi\n  if [[ $1\
    \ =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -lt 1 || $month -gt 12 ]]; then\n      echo \"False\"\n      return\n\
    \    fi\n    if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq\
    \ 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n      if [[ $day\
    \ -lt 1 || $day -gt 31 ]]; then\n        echo \"False\"\n        return\n    \
    \  fi\n    elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq\
    \ 11 ]]; then\n      if [[ $day -lt 1 || $day -gt 30 ]]; then\n        echo \"\
    False\"\n        return\n      fi\n    elif [[ $month -eq 2 ]]; then\n      if\
    \ [[ $day -lt 1 || $day -gt 29 ]]; then\n        echo \"False\"\n        return\n\
    \      fi\n    fi\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\n\
    candidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  # hint: use bash regular expression\n  # hint:\
    \ use bash arithmetic expression\n  # hint: use bash if-else statement\n  # hint:\
    \ use bash case statement\n  # hint: use bash string manipulation\n  # hint: use\
    \ bash array\n  # hint: use bash function\n  # hint: use bash built-in function\n\
    \  # hint: use bash regular expression\n  # hint: use bash arithmetic expression\n\
    \  # hint: use bash if-else statement\n  # hint: use bash case statement\n  #\
    \ hint: use bash string manipulation\n  # hint: use bash array\n  # hint: use\
    \ bash function\n  # hint: use bash built-in function\n  # hint: use bash regular\
    \ expression\n  # hint: use bash arithmetic expression\n  # hint: use bash if-else\
    \ statement\n  # hint: use bash case statement\n  # hint: use bash string manipulation\n\
    \  # hint: use bash array\n  # hint: use bash function\n  # hint: use bash built-in\
    \ function\n  # hint: use bash regular expression\n  # hint: use bash arithmetic\
    \ expression\n  # hint: use bash if-else statement\n  # hint: use bash case statement\n\
    \  # hint: use bash string manipulation\n  # hint: use bash array\n  # hint: use\
    \ bash function\n  # hint: use bash built-in function\n  # hint: use bash regular\
    \ expression\n  # hint: use bash arithmetic expression\n  # hint: use bash if-else\
    \ statement\n  # hint: use bash case statement\n  # hint: use bash string manipulation\n\
    \  # hint: use bash array\n  # hint: use bash function\n  # hint: use bash built-in\
    \ function\n  # hint: use bash regular expression\n  # hint: use bash arithmetic\
    \ expression\n  # hint: use bash if-else statement\n  # hint: use bash case statement\n\
    \  # hint: use bash string manipulation\n  # hint: use bash array\n  # hint: use\
    \ bash function\n  # hint: use bash built-in function\n  # hint: use bash regular\
    \ expression\n  # hint: use bash arithmetic expression\n  # hint: use bash if-else\
    \ statement\n  # hint: use bash case statement\n  # hint: use bash string manipulation\n\
    \  # hint: use bash array\n  # hint: use\n}\n\ncandidate() {\n    valid_date \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnuytdonl.sh: line 74: syntax error near unexpected token `}''

    /tmp/tmpnuytdonl.sh: line 74: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  echo \"Not implemented\"\n}\n\ncandidate() {\n\
    \    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        local\
    \ month=${BASH_REMATCH[1]}\n        local day=${BASH_REMATCH[2]}\n        local\
    \ year=${BASH_REMATCH[3]}\n        if [[ $month -gt 0 && $month -lt 13 ]]; then\n\
    \            if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq\
    \ 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n             \
    \   if [[ $day -gt 0 && $day -lt 32 ]]; then\n                    echo \"True\"\
    \n                else\n                    echo \"False\"\n                fi\n\
    \            elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq\
    \ 11 ]]; then\n                if [[ $day -gt 0 && $day -lt 31 ]]; then\n    \
    \                echo \"True\"\n                else\n                    echo\
    \ \"False\"\n                fi\n            elif [[ $month -eq 2 ]]; then\n \
    \               if [[ $day -gt 0 && $day -lt 30 ]]; then\n                   \
    \ echo \"True\"\n                else\n                    echo \"False\"\n  \
    \              fi\n            fi\n        else\n            echo \"False\"\n\
    \        fi\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n  \
    \  valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # your code here\n    if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n\
    \        month=$(echo $1 | cut -d'-' -f1)\n        day=$(echo $1 | cut -d'-' -f2)\n\
    \        year=$(echo $1 | cut -d'-' -f3)\n        if [[ $month -ge 1 && $month\
    \ -le 12 ]]; then\n            if [[ $month -eq 1 || $month -eq 3 || $month -eq\
    \ 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n\
    \                if [[ $day -ge 1 && $day -le 31 ]]; then\n                  \
    \  echo True\n                else\n                    echo False\n         \
    \       fi\n            elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 ||\
    \ $month -eq 11 ]]; then\n                if [[ $day -ge 1 && $day -le 30 ]];\
    \ then\n                    echo True\n                else\n                \
    \    echo False\n                fi\n            elif [[ $month -eq 2 ]]; then\n\
    \                if [[ $day -ge 1 && $day -le 29 ]]; then\n                  \
    \  echo True\n                else\n                    echo False\n         \
    \       fi\n            fi\n        else\n            echo False\n        fi\n\
    \    else\n        echo False\n    fi\n}\n\ncandidate() {\n    valid_date \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n\
    \    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    [[ $1 =~ ^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$ ]] &&\n\
    \    [[ $1 != *-00-* ]] &&\n    [[ $1 != *-0-* ]] &&\n    [[ $1 != *-32-* ]] &&\n\
    \    [[ $1 != *-31-* ]] &&\n    [[ $1 != *-30-* ]] &&\n    [[ $1 != *-29-* ]]\
    \ &&\n    [[ $1 != *-28-* ]] &&\n    [[ $1 != *-2-* ]] &&\n    [[ $1 != *-1-*\
    \ ]] &&\n    [[ $1 != *-13-* ]] &&\n    [[ $1 != *-14-* ]] &&\n    [[ $1 != *-15-*\
    \ ]] &&\n    [[ $1 != *-16-* ]] &&\n    [[ $1 != *-17-* ]] &&\n    [[ $1 != *-18-*\
    \ ]] &&\n    [[ $1 != *-19-* ]] &&\n    [[ $1 != *-20-* ]] &&\n    [[ $1 != *-21-*\
    \ ]] &&\n    [[ $1 != *-22-* ]] &&\n    [[ $1 != *-23-* ]] &&\n    [[ $1 != *-24-*\
    \ ]] &&\n    [[ $1 != *-25-* ]] &&\n    [[ $1 != *-26-* ]] &&\n    [[ $1 != *-27-*\
    \ ]] &&\n    [[ $1 != *-28-* ]] &&\n    [[ $1 != *-29-* ]] &&\n    [[ $1 != *-30-*\
    \ ]] &&\n    [[ $1 != *-31-* ]] &&\n    [[ $1 != *-32-* ]] &&\n    [[ $1 != *-33-*\
    \ ]] &&\n    [[ $1 != *-34-* ]] &&\n    [[ $1 != *-35-* ]] &&\n    [[ $1 != *-36-\n\
    }\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoy_iwc8w.sh: line 51: syntax error in conditional expression

    /tmp/tmpoy_iwc8w.sh: line 52: syntax error near `}''

    /tmp/tmpoy_iwc8w.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # write your code here\n    # hint: use regular expression\n    # hint:\
    \ use the following command to check if the date is valid:\n    # date -d \"$1\"\
    \ > /dev/null 2>&1\n    # hint: use the following command to check if the date\
    \ is in the format: mm-dd-yyyy\n    # [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]\n\
    \    # hint: use the following command to check if the number of days is not less\
    \ than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of\
    \ days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the\
    \ number of days is not less than 1 or higher than 29 for the month 2.\n    #\
    \ [[ $1 =~ ^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$ ]]\n    # hint:\
    \ use the following command to check if the months should not be less than 1 or\
    \ higher than 12.\n    # [[ $1 =~ ^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$\
    \ ]]\n    # hint: use the following command to check if the date is valid:\n \
    \   # date -d \"$1\" > /dev/null 2>&1\n    # hint: use the following command to\
    \ check if the date is in the format: mm-dd-yyyy\n    # [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\
    \ ]]\n    # hint: use the following command to check if the number of days is\
    \ not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number\
    \ of days is not less than 1 or higher than 30 days for months 4,6,9,11. And,\
    \ the number of days is not less than 1 or higher than 29 for the month\n}\n\n\
    candidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpylaev_cy.sh: line 33: syntax error near unexpected token `}''

    /tmp/tmpylaev_cy.sh: line 33: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        month=${BASH_REMATCH[1]}\n\
    \        day=${BASH_REMATCH[2]}\n        year=${BASH_REMATCH[3]}\n        if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n            if [[ $month -eq 1 || $month\
    \ -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n                if [[ $day -gt 0 && $day -lt 32 ]]; then\n\
    \                    echo \"True\"\n                else\n                   \
    \ echo \"False\"\n                fi\n            elif [[ $month -eq 4 || $month\
    \ -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n                if [[ $day\
    \ -gt 0 && $day -lt 31 ]]; then\n                    echo \"True\"\n         \
    \       else\n                    echo \"False\"\n                fi\n       \
    \     elif [[ $month -eq 2 ]]; then\n                if [[ $day -gt 0 && $day\
    \ -lt 30 ]]; then\n                    echo \"True\"\n                else\n \
    \                   echo \"False\"\n                fi\n            fi\n     \
    \   else\n            echo \"False\"\n        fi\n    else\n        echo \"False\"\
    \n    fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0-1])-([0-9]{4})$\
    \ ]]; then\n    month=${BASH_REMATCH[1]}\n    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n\
    \    if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month\
    \ -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n      if [[ $day -gt 31 ]];\
    \ then\n        return 1\n      fi\n    elif [[ $month -eq 4 || $month -eq 6 ||\
    \ $month -eq 9 || $month -eq 11 ]]; then\n      if [[ $day -gt 30 ]]; then\n \
    \       return 1\n      fi\n    elif [[ $month -eq 2 ]]; then\n      if [[ $day\
    \ -gt 29 ]]; then\n        return 1\n      fi\n    fi\n    return 0\n  fi\n  return\
    \ 1\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 1 || $month -eq\
    \ 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n        \
    \  return 0\n        fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month\
    \ -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -gt 0 && $day -lt 31 ]];\
    \ then\n          return 0\n        fi\n      elif [[ $month -eq 2 ]]; then\n\
    \        if [[ $day -gt 0 && $day -lt 30 ]]; then\n          return 0\n      \
    \  fi\n      fi\n    fi\n  fi\n  return 1\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    local date=$1\n    local month=$(echo $date | cut -d'-' -f1)\n    local\
    \ day=$(echo $date | cut -d'-' -f2)\n    local year=$(echo $date | cut -d'-' -f3)\n\
    \    local valid_month=0\n    local valid_day=0\n    local valid_year=0\n    local\
    \ valid_format=0\n    local valid_date=0\n\n    if [[ -z $date ]]; then\n    \
    \    echo \"False\"\n        return\n    fi\n\n    if [[ $month -ge 1 && $month\
    \ -le 12 ]]; then\n        valid_month=1\n    fi\n\n    if [[ $month -eq 1 ||\
    \ $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10\
    \ || $month -eq 12 ]]; then\n        if [[ $day -ge 1 && $day -le 31 ]]; then\n\
    \            valid_day=1\n        fi\n    elif [[ $month -eq 4 || $month -eq 6\
    \ || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -ge 1 && $day\
    \ -le 30 ]]; then\n            valid_day=1\n        fi\n    elif [[ $month -eq\
    \ 2 ]]; then\n        if [[ $day -ge 1 && $day -le 29 ]]; then\n            valid_day=1\n\
    \        fi\n    fi\n\n    if [[ $year -ge 1 ]]; then\n        valid_year=1\n\
    \    fi\n\n    if [[ $date =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n        valid_format=1\n\
    \    fi\n\n    if [[ $valid_month -eq 1 && $valid_day -eq 1 && $valid_year -eq\
    \ 1 && $valid_format -eq 1 ]]; then\n        valid_date=1\n    fi\n\n    if [[\
    \ $valid_date -eq 1 ]]; then\n        echo \"True\"\n    else\n        echo \"\
    False\"\n    fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n        local month=$(echo\
    \ $1 | cut -d- -f1)\n        local day=$(echo $1 | cut -d- -f2)\n        local\
    \ year=$(echo $1 | cut -d- -f3)\n        if [[ $month -gt 0 && $month -lt 13 ]];\
    \ then\n            if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month\
    \ -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n         \
    \       if [[ $day -gt 0 && $day -lt 32 ]]; then\n                    echo \"\
    True\"\n                else\n                    echo \"False\"\n           \
    \     fi\n            elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 ||\
    \ $month -eq 11 ]]; then\n                if [[ $day -gt 0 && $day -lt 31 ]];\
    \ then\n                    echo \"True\"\n                else\n            \
    \        echo \"False\"\n                fi\n            elif [[ $month -eq 2\
    \ ]]; then\n                if [[ $day -gt 0 && $day -lt 30 ]]; then\n       \
    \             echo \"True\"\n                else\n                    echo \"\
    False\"\n                fi\n            fi\n        else\n            echo \"\
    False\"\n        fi\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -ge\
    \ 1 && $month -le 12 ]]; then\n      if [[ $month -eq 2 ]]; then\n        if [[\
    \ $day -ge 1 && $day -le 29 ]]; then\n          echo \"True\"\n        else\n\
    \          echo \"False\"\n        fi\n      elif [[ $month -eq 4 || $month -eq\
    \ 6 || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -ge 1 && $day\
    \ -le 30 ]]; then\n          echo \"True\"\n        else\n          echo \"False\"\
    \n        fi\n      else\n        if [[ $day -ge 1 && $day -le 31 ]]; then\n \
    \         echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      fi\n    else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n\
    \  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n    month=${BASH_REMATCH[1]}\n    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n\
    \    if [[ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 1 ||\
    \ $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10\
    \ || $month -eq 12 ]]; then\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n\
    \          echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]];\
    \ then\n        if [[ $day -gt 0 && $day -lt 31 ]]; then\n          echo \"True\"\
    \n        else\n          echo \"False\"\n        fi\n      elif [[ $month -eq\
    \ 2 ]]; then\n        if [[ $day -gt 0 && $day -lt 30 ]]; then\n          echo\
    \ \"True\"\n        else\n          echo \"False\"\n        fi\n      fi\n   \
    \ else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\n\
    candidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n    month=${BASH_REMATCH[1]}\n    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n\
    \    if [[ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 1 ||\
    \ $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10\
    \ || $month -eq 12 ]]; then\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n\
    \          echo \"True\"\n        else\n          echo \"False\"\n        fi\n\
    \      elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]];\
    \ then\n        if [[ $day -gt 0 && $day -lt 31 ]]; then\n          echo \"True\"\
    \n        else\n          echo \"False\"\n        fi\n      elif [[ $month -eq\
    \ 2 ]]; then\n        if [[ $day -gt 0 && $day -lt 30 ]]; then\n          echo\
    \ \"True\"\n        else\n          echo \"False\"\n        fi\n      fi\n   \
    \ else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\n\
    candidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  local date=\"$1\"\n  local pattern=\"^([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0-1])-([0-9]{4})$\"\
    \n  if [[ $date =~ $pattern ]]; then\n    local month=\"${BASH_REMATCH[1]}\"\n\
    \    local day=\"${BASH_REMATCH[2]}\"\n    local year=\"${BASH_REMATCH[3]}\"\n\
    \    if (( year % 4 == 0 && year % 100 != 0 || year % 400 == 0 )); then\n    \
    \  if (( month == 2 && day >= 1 && day <= 29 )); then\n        echo \"True\"\n\
    \      elif (( month == 2 && day < 1 || day > 29 )); then\n        echo \"False\"\
    \n      elif (( month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12 )); then\n        if (( day >= 1 && day <=\
    \ 31 )); then\n          echo \"True\"\n        else\n          echo \"False\"\
    \n        fi\n      elif (( month == 4 || month == 6 || month == 9 || month ==\
    \ 11 )); then\n        if (( day >= 1 && day <= 30 )); then\n          echo \"\
    True\"\n        else\n          echo \"False\"\n        fi\n      fi\n    else\n\
    \      if (( month == 2 && day >= 1 && day <= 28 )); then\n        echo \"True\"\
    \n      elif (( month == 2 && day < 1 || day > 28 )); then\n        echo \"False\"\
    \n      elif (( month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12 )); then\n        if (( day >= 1 && day <=\
    \ 31 )); then\n          echo \"True\"\n        else\n          echo \"False\"\
    \n        fi\n      elif (( month == 4 || month == 6 || month == 9 || month ==\
    \ 11 )); then\n        if (( day >= 1 && day <= 30 )); then\n          echo \"\
    True\"\n        else\n          echo \"False\"\n        fi\n      fi\n    fi\n\
    \  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n\
    \    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        month=${BASH_REMATCH[1]}\n\
    \        day=${BASH_REMATCH[2]}\n        year=${BASH_REMATCH[3]}\n        if [[\
    \ $month -ge 1 && $month -le 12 ]]; then\n            if [[ $month -eq 1 || $month\
    \ -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n                if [[ $day -ge 1 && $day -le 31 ]]; then\n\
    \                    echo \"True\"\n                else\n                   \
    \ echo \"False\"\n                fi\n            elif [[ $month -eq 4 || $month\
    \ -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n                if [[ $day\
    \ -ge 1 && $day -le 30 ]]; then\n                    echo \"True\"\n         \
    \       else\n                    echo \"False\"\n                fi\n       \
    \     elif [[ $month -eq 2 ]]; then\n                if [[ $day -ge 1 && $day\
    \ -le 29 ]]; then\n                    echo \"True\"\n                else\n \
    \                   echo \"False\"\n                fi\n            fi\n     \
    \   else\n            echo \"False\"\n        fi\n    else\n        echo \"False\"\
    \n    fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$ ]]; then\n\
    \    local month=$(echo $1 | cut -d- -f1)\n    local day=$(echo $1 | cut -d- -f2)\n\
    \    local year=$(echo $1 | cut -d- -f3)\n    if [[ $month -eq 1 || $month -eq\
    \ 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n      if [[ $day -lt 1 || $day -gt 31 ]]; then\n        echo\
    \ False\n        return\n      fi\n    elif [[ $month -eq 4 || $month -eq 6 ||\
    \ $month -eq 9 || $month -eq 11 ]]; then\n      if [[ $day -lt 1 || $day -gt 30\
    \ ]]; then\n        echo False\n        return\n      fi\n    elif [[ $month -eq\
    \ 2 ]]; then\n      if [[ $day -lt 1 || $day -gt 29 ]]; then\n        echo False\n\
    \        return\n      fi\n    fi\n    echo True\n  else\n    echo False\n  fi\n\
    }\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        local\
    \ month=${BASH_REMATCH[1]}\n        local day=${BASH_REMATCH[2]}\n        local\
    \ year=${BASH_REMATCH[3]}\n        if [[ $month -lt 1 || $month -gt 12 ]]; then\n\
    \            echo \"False\"\n            return\n        fi\n        if [[ $month\
    \ == 1 || $month == 3 || $month == 5 || $month == 7 || $month == 8 || $month ==\
    \ 10 || $month == 12 ]]; then\n            if [[ $day -lt 1 || $day -gt 31 ]];\
    \ then\n                echo \"False\"\n                return\n            fi\n\
    \        elif [[ $month == 4 || $month == 6 || $month == 9 || $month == 11 ]];\
    \ then\n            if [[ $day -lt 1 || $day -gt 30 ]]; then\n               \
    \ echo \"False\"\n                return\n            fi\n        elif [[ $month\
    \ == 2 ]]; then\n            if [[ $day -lt 1 || $day -gt 29 ]]; then\n      \
    \          echo \"False\"\n                return\n            fi\n        fi\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  if [ -z \"$1\" ]; then\n    echo \"False\"\n\
    \    return\n  fi\n  IFS='-' read -r -a array <<< \"$1\"\n  if [ ${#array[@]}\
    \ -ne 3 ]; then\n    echo \"False\"\n    return\n  fi\n  if [[ ${array[0]} -gt\
    \ 12 || ${array[0]} -lt 1 ]]; then\n    echo \"False\"\n    return\n  fi\n  if\
    \ [[ ${array[0]} -eq 1 || ${array[0]} -eq 3 || ${array[0]} -eq 5 || ${array[0]}\
    \ -eq 7 || ${array[0]} -eq 8 || ${array[0]} -eq 10 || ${array[0]} -eq 12 ]]; then\n\
    \    if [[ ${array[1]} -gt 31 || ${array[1]} -lt 1 ]]; then\n      echo \"False\"\
    \n      return\n    fi\n  elif [[ ${array[0]} -eq 4 || ${array[0]} -eq 6 || ${array[0]}\
    \ -eq 9 || ${array[0]} -eq 11 ]]; then\n    if [[ ${array[1]} -gt 30 || ${array[1]}\
    \ -lt 1 ]]; then\n      echo \"False\"\n      return\n    fi\n  elif [[ ${array[0]}\
    \ -eq 2 ]]; then\n    if [[ ${array[1]} -gt 29 || ${array[1]} -lt 1 ]]; then\n\
    \      echo \"False\"\n      return\n    fi\n  fi\n  if [[ ${array[2]} -lt 1 ]];\
    \ then\n    echo \"False\"\n    return\n  fi\n  echo \"True\"\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # your code here\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]];\
    \ then\n    month=${BASH_REMATCH[1]}\n    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n\
    \    if [[ $month -lt 1 || $month -gt 12 ]]; then\n      echo \"False\"\n    elif\
    \ [[ $month -eq 2 ]]; then\n      if [[ $((year % 4)) -eq 0 ]]; then\n       \
    \ if [[ $day -lt 1 || $day -gt 29 ]]; then\n          echo \"False\"\n       \
    \ else\n          echo \"True\"\n        fi\n      else\n        if [[ $day -lt\
    \ 1 || $day -gt 28 ]]; then\n          echo \"False\"\n        else\n        \
    \  echo \"True\"\n        fi\n      fi\n    elif [[ $month -eq 4 || $month -eq\
    \ 6 || $month -eq 9 || $month -eq 11 ]]; then\n      if [[ $day -lt 1 || $day\
    \ -gt 30 ]]; then\n        echo \"False\"\n      else\n        echo \"True\"\n\
    \      fi\n    else\n      if [[ $day -lt 1 || $day -gt 31 ]]; then\n        echo\
    \ \"False\"\n      else\n        echo \"True\"\n      fi\n    fi\n  else\n   \
    \ echo \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\"\
    \ ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"\
    01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") =\
    \ \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if ((\
    \ year > 0 && year < 10000 )); then\n      if (( month > 0 && month < 13 )); then\n\
    \        if (( month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12 )); then\n          if (( day > 0 && day < 32\
    \ )); then\n            echo \"True\"\n            return\n          fi\n    \
    \    elif (( month == 4 || month == 6 || month == 9 || month == 11 )); then\n\
    \          if (( day > 0 && day < 31 )); then\n            echo \"True\"\n   \
    \         return\n          fi\n        elif (( month == 2 )); then\n        \
    \  if (( day > 0 && day < 30 )); then\n            echo \"True\"\n           \
    \ return\n          fi\n        fi\n      fi\n    fi\n  fi\n  echo \"False\"\n\
    }\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # write your code here\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n        month=${BASH_REMATCH[1]}\n        day=${BASH_REMATCH[2]}\n\
    \        year=${BASH_REMATCH[3]}\n        if [[ $month -ge 1 && $month -le 12\
    \ ]]; then\n            if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 ||\
    \ $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n  \
    \              if [[ $day -ge 1 && $day -le 31 ]]; then\n                    echo\
    \ \"True\"\n                else\n                    echo \"False\"\n       \
    \         fi\n            elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9\
    \ || $month -eq 11 ]]; then\n                if [[ $day -ge 1 && $day -le 30 ]];\
    \ then\n                    echo \"True\"\n                else\n            \
    \        echo \"False\"\n                fi\n            elif [[ $month -eq 2\
    \ ]]; then\n                if [[ $day -ge 1 && $day -le 29 ]]; then\n       \
    \             echo \"True\"\n                else\n                    echo \"\
    False\"\n                fi\n            fi\n        else\n            echo \"\
    False\"\n        fi\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n    month=${BASH_REMATCH[1]}\n    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n\
    \    if [[ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]];\
    \ then\n        if [[ $day -gt 0 && $day -lt 30 ]]; then\n          echo \"True\"\
    \n        else\n          echo \"False\"\n        fi\n      elif [[ $month -eq\
    \ 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month\
    \ -eq 10 || $month -eq 12 ]]; then\n        if [[ $day -gt 0 && $day -lt 32 ]];\
    \ then\n          echo \"True\"\n        else\n          echo \"False\"\n    \
    \    fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month\
    \ -eq 11 ]]; then\n        if [[ $day -gt 0 && $day -lt 31 ]]; then\n        \
    \  echo \"True\"\n        else\n          echo \"False\"\n        fi\n      fi\n\
    \    else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\
    \ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # Write your code here\n    if [[ $1 =~ ^([0-2][0-9]|(3)[0-1])(-)(((0)[0-9])|((1)[0-2]))(-)([0-9][0-9][0-9][0-9])$\
    \ ]]; then\n        if [[ $1 =~ ^(0[1-9]|1[0-2])(-)(0[1-9]|[1-2][0-9]|3[0-1])(-)([0-9][0-9][0-9][0-9])$\
    \ ]]; then\n            echo \"True\"\n        else\n            echo \"False\"\
    \n        fi\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n \
    \   valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -ge 1 && $month -le 12 ]]; then\n      if [[ $month -eq 2 ]]; then\n\
    \        if [[ $((year % 4)) -eq 0 && $((year % 100)) -ne 0 || $((year % 400))\
    \ -eq 0 ]]; then\n          if [[ $day -ge 1 && $day -le 29 ]]; then\n       \
    \     echo \"True\"\n          else\n            echo \"False\"\n          fi\n\
    \        else\n          if [[ $day -ge 1 && $day -le 28 ]]; then\n          \
    \  echo \"True\"\n          else\n            echo \"False\"\n          fi\n \
    \       fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month\
    \ -eq 11 ]]; then\n        if [[ $day -ge 1 && $day -le 30 ]]; then\n        \
    \  echo \"True\"\n        else\n          echo \"False\"\n        fi\n      else\n\
    \        if [[ $day -ge 1 && $day -le 31 ]]; then\n          echo \"True\"\n \
    \       else\n          echo \"False\"\n        fi\n      fi\n    else\n     \
    \ echo \"False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n\
    \    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # your code here\n    if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n\
    \        month=$(echo $1 | cut -d- -f1)\n        day=$(echo $1 | cut -d- -f2)\n\
    \        year=$(echo $1 | cut -d- -f3)\n        if [[ $month -gt 0 && $month -lt\
    \ 13 ]]; then\n            if [[ $month -eq 2 ]]; then\n                if [[\
    \ $((year % 4)) -eq 0 ]]; then\n                    if [[ $day -gt 0 && $day -lt\
    \ 30 ]]; then\n                        echo \"True\"\n                    else\n\
    \                        echo \"False\"\n                    fi\n            \
    \    else\n                    if [[ $day -gt 0 && $day -lt 29 ]]; then\n    \
    \                    echo \"True\"\n                    else\n               \
    \         echo \"False\"\n                    fi\n                fi\n       \
    \     elif [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 ||\
    \ $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n                if\
    \ [[ $day -gt 0 && $day -lt 32 ]]; then\n                    echo \"True\"\n \
    \               else\n                    echo \"False\"\n                fi\n\
    \            else\n                if [[ $day -gt 0 && $day -lt 31 ]]; then\n\
    \                    echo \"True\"\n                else\n                   \
    \ echo \"False\"\n                fi\n            fi\n        else\n         \
    \   echo \"False\"\n        fi\n    else\n        echo \"False\"\n    fi\n}\n\n\
    candidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -eq 2 ]]; then\n      if [[ $((year % 4)) -eq 0 ]]; then\n        if\
    \ [[ $day -gt 29 ]]; then\n          echo \"False\"\n          return\n      \
    \  fi\n      else\n        if [[ $day -gt 28 ]]; then\n          echo \"False\"\
    \n          return\n        fi\n      fi\n    elif [[ $month -eq 4 || $month -eq\
    \ 6 || $month -eq 9 || $month -eq 11 ]]; then\n      if [[ $day -gt 30 ]]; then\n\
    \        echo \"False\"\n        return\n      fi\n    elif [[ $month -eq 1 ||\
    \ $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10\
    \ || $month -eq 12 ]]; then\n      if [[ $day -gt 31 ]]; then\n        echo \"\
    False\"\n        return\n      fi\n    else\n      echo \"False\"\n      return\n\
    \    fi\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # Your code here\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\"\
    \ ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"\
    01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") =\
    \ \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2lfarj06.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmp2lfarj06.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # your code here\n  if [[ $1 =~ ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\
    \ ]]; then\n    month=$(echo $1 | cut -d- -f1)\n    day=$(echo $1 | cut -d- -f2)\n\
    \    year=$(echo $1 | cut -d- -f3)\n    if [[ $month -eq 1 || $month -eq 3 ||\
    \ $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq\
    \ 12 ]]; then\n      if [[ $day -gt 31 ]]; then\n        echo False\n      else\n\
    \        echo True\n      fi\n    elif [[ $month -eq 4 || $month -eq 6 || $month\
    \ -eq 9 || $month -eq 11 ]]; then\n      if [[ $day -gt 30 ]]; then\n        echo\
    \ False\n      else\n        echo True\n      fi\n    elif [[ $month -eq 2 ]];\
    \ then\n      if [[ $day -gt 29 ]]; then\n        echo False\n      else\n   \
    \     echo True\n      fi\n    fi\n  else\n    echo False\n  fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -gt\
    \ 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 1 || $month -eq 3 || $month\
    \ -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]];\
    \ then\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n          echo \"True\"\
    \n        else\n          echo \"False\"\n        fi\n      elif [[ $month -eq\
    \ 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day\
    \ -gt 0 && $day -lt 31 ]]; then\n          echo \"True\"\n        else\n     \
    \     echo \"False\"\n        fi\n      elif [[ $month -eq 2 ]]; then\n      \
    \  if [[ $day -gt 0 && $day -lt 30 ]]; then\n          echo \"True\"\n       \
    \ else\n          echo \"False\"\n        fi\n      fi\n    else\n      echo \"\
    False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n\
    \        if [[ $((year % 4)) -eq 0 ]]; then\n          if [[ $day -gt 0 && $day\
    \ -lt 30 ]]; then\n            return 0\n          fi\n        else\n        \
    \  if [[ $day -gt 0 && $day -lt 29 ]]; then\n            return 0\n          fi\n\
    \        fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month\
    \ -eq 11 ]]; then\n        if [[ $day -gt 0 && $day -lt 31 ]]; then\n        \
    \  return 0\n        fi\n      else\n        if [[ $day -gt 0 && $day -lt 32 ]];\
    \ then\n          return 0\n        fi\n      fi\n    fi\n  fi\n  return 1\n}\n\
    \ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -ge 1 && $month -le 12 ]]; then\n      if [[ $month -eq 1 || $month -eq\
    \ 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n        if [[ $day -ge 1 && $day -le 31 ]]; then\n        \
    \  return 0\n        fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month\
    \ -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -ge 1 && $day -le 30 ]];\
    \ then\n          return 0\n        fi\n      elif [[ $month -eq 2 ]]; then\n\
    \        if [[ $day -ge 1 && $day -le 29 ]]; then\n          return 0\n      \
    \  fi\n      fi\n    fi\n  fi\n  return 1\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6sb_syqe.sh: line 188: syntax error near unexpected token `}''

    /tmp/tmp6sb_syqe.sh: line 188: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if ((\
    \ year > 0 )); then\n      if (( month >= 1 && month <= 12 )); then\n        if\
    \ (( month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12 )); then\n          if (( day >= 1 && day <= 31 )); then\n\
    \            return 0\n          fi\n        elif (( month == 4 || month == 6\
    \ || month == 9 || month == 11 )); then\n          if (( day >= 1 && day <= 30\
    \ )); then\n            return 0\n          fi\n        elif (( month == 2 ));\
    \ then\n          if (( year % 4 == 0 && year % 100 != 0 || year % 400 == 0 ));\
    \ then\n            if (( day >= 1 && day <= 29 )); then\n              return\
    \ 0\n            fi\n          else\n            if (( day >= 1 && day <= 28 ));\
    \ then\n              return 0\n            fi\n          fi\n        fi\n   \
    \   fi\n    fi\n  fi\n  return 1\n}\n\ncandidate() {\n    valid_date \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n\
    \    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n\
    \        if [[ $day -gt 0 && $day -lt 30 ]]; then\n          return 0\n      \
    \  fi\n      elif [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq\
    \ 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n        if [[\
    \ $day -gt 0 && $day -lt 32 ]]; then\n          return 0\n        fi\n      elif\
    \ [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n\
    \        if [[ $day -gt 0 && $day -lt 31 ]]; then\n          return 0\n      \
    \  fi\n      fi\n    fi\n  fi\n  return 1\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$ ]]; then\n\
    \        local month=$(echo $1 | cut -d'-' -f1)\n        local day=$(echo $1 |\
    \ cut -d'-' -f2)\n        local year=$(echo $1 | cut -d'-' -f3)\n        if ((\
    \ year % 4 == 0 && year % 100 != 0 || year % 400 == 0 )); then\n            if\
    \ (( month == 2 && day <= 29 )); then\n                echo \"True\"\n       \
    \     elif (( month == 2 && day > 29 )); then\n                echo \"False\"\n\
    \            elif (( month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12 )); then\n                if (( day <= 31\
    \ )); then\n                    echo \"True\"\n                else\n        \
    \            echo \"False\"\n                fi\n            elif (( month ==\
    \ 4 || month == 6 || month == 9 || month == 11 )); then\n                if ((\
    \ day <= 30 )); then\n                    echo \"True\"\n                else\n\
    \                    echo \"False\"\n                fi\n            fi\n    \
    \    else\n            if (( month == 2 && day <= 28 )); then\n              \
    \  echo \"True\"\n            elif (( month == 2 && day > 28 )); then\n      \
    \          echo \"False\"\n            elif (( month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12 )); then\n  \
    \              if (( day <= 31 )); then\n                    echo \"True\"\n \
    \               else\n                    echo \"False\"\n                fi\n\
    \            elif (( month == 4 || month == 6 || month == 9 || month == 11 ));\
    \ then\n                if (( day <= 30 )); then\n                    echo \"\
    True\"\n                else\n                    echo \"False\"\n           \
    \     fi\n            fi\n        fi\n    else\n        echo \"False\"\n    fi\n\
    }\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # Write your code here\n  # You can use the following command to get the\
    \ number of days in a month\n  # $ days_in_month $month $year\n  # for example:\n\
    \  # $ days_in_month 2 2020\n  # 29\n  # $ days_in_month 2 2019\n  # 28\n  # $\
    \ days_in_month 2 2100\n  # 28\n  # $ days_in_month 2 2400\n  # 29\n  # $ days_in_month\
    \ 2 2000\n  # 29\n  # $ days_in_month 2 1900\n  # 28\n  # $ days_in_month 2 1800\n\
    \  # 28\n  # $ days_in_month 2 1700\n  # 28\n  # $ days_in_month 2 1600\n  # 29\n\
    \  # $ days_in_month 2 1500\n  # 28\n  # $ days_in_month 2 1400\n  # 28\n  # $\
    \ days_in_month 2 1300\n  # 28\n  # $ days_in_month 2 1200\n  # 29\n  # $ days_in_month\
    \ 2 1100\n  # 28\n  # $ days_in_month 2 1000\n  # 28\n  # $ days_in_month 2 900\n\
    \  # 28\n  # $ days_in_month 2 800\n  # 29\n  # $ days_in_month 2 700\n  # 28\n\
    \  # $ days_in_month 2 600\n  # 28\n  # $ days_in_month 2 500\n  # 28\n  # $ days_in_month\
    \ 2 400\n  # 29\n  # $ days_in_month 2 300\n  # 28\n  # $ days_in_month 2 200\n\
    \  # 28\n  # $ days_in_month 2 100\n  # 28\n  # $ days_in_month 2 0\n  # 29\n\
    \  # $ days_in_month 2 -100\n  # 28\n  # $ days_in_month 2 -200\n  # 28\n  # $\
    \ days_in_month 2 -300\n  # 28\n  # $ days_in_month 2 -400\n  # 29\n  # $ days_in_month\
    \ 2 -500\n  # 28\n  # $ days_in_month 2 -600\n\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0x2c9jw3.sh: line 84: syntax error near unexpected token `}''

    /tmp/tmp0x2c9jw3.sh: line 84: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [ -z \"$1\" ]; then\n    return 1\n  fi\n  if [[ ! \"$1\" =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\
    \ ]]; then\n    return 1\n  fi\n  local month=$(echo \"$1\" | cut -d- -f1)\n \
    \ local day=$(echo \"$1\" | cut -d- -f2)\n  local year=$(echo \"$1\" | cut -d-\
    \ -f3)\n  if [ \"$month\" -lt 1 ] || [ \"$month\" -gt 12 ]; then\n    return 1\n\
    \  fi\n  if [ \"$month\" -eq 1 ] || [ \"$month\" -eq 3 ] || [ \"$month\" -eq 5\
    \ ] || [ \"$month\" -eq 7 ] || [ \"$month\" -eq 8 ] || [ \"$month\" -eq 10 ] ||\
    \ [ \"$month\" -eq 12 ]; then\n    if [ \"$day\" -lt 1 ] || [ \"$day\" -gt 31\
    \ ]; then\n      return 1\n    fi\n  elif [ \"$month\" -eq 4 ] || [ \"$month\"\
    \ -eq 6 ] || [ \"$month\" -eq 9 ] || [ \"$month\" -eq 11 ]; then\n    if [ \"\
    $day\" -lt 1 ] || [ \"$day\" -gt 30 ]; then\n      return 1\n    fi\n  elif [\
    \ \"$month\" -eq 2 ]; then\n    if [ \"$day\" -lt 1 ] || [ \"$day\" -gt 29 ];\
    \ then\n      return 1\n    fi\n  fi\n  return 0\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [ -z \"$1\" ]; then\n        return 1\n    fi\n    if [[ \"$1\" =~\
    \ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n        local month=$(echo \"$1\" | cut\
    \ -d- -f1)\n        local day=$(echo \"$1\" | cut -d- -f2)\n        local year=$(echo\
    \ \"$1\" | cut -d- -f3)\n        if [ $month -lt 1 ] || [ $month -gt 12 ]; then\n\
    \            return 1\n        fi\n        if [ $month -eq 2 ]; then\n       \
    \     if [ $day -lt 1 ] || [ $day -gt 29 ]; then\n                return 1\n \
    \           fi\n        elif [ $month -eq 4 ] || [ $month -eq 6 ] || [ $month\
    \ -eq 9 ] || [ $month -eq 11 ]; then\n            if [ $day -lt 1 ] || [ $day\
    \ -gt 30 ]; then\n                return 1\n            fi\n        else\n   \
    \         if [ $day -lt 1 ] || [ $day -gt 31 ]; then\n                return 1\n\
    \            fi\n        fi\n        if [ $year -lt 1 ]; then\n            return\
    \ 1\n        fi\n        return 0\n    fi\n    return 1\n}\n\ncandidate() {\n\
    \    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # write your code here\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n        month=${BASH_REMATCH[1]}\n        day=${BASH_REMATCH[2]}\n\
    \        year=${BASH_REMATCH[3]}\n        if [[ $month -ge 1 && $month -le 12\
    \ ]]; then\n            if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 ||\
    \ $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n  \
    \              if [[ $day -ge 1 && $day -le 31 ]]; then\n                    echo\
    \ \"True\"\n                else\n                    echo \"False\"\n       \
    \         fi\n            elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9\
    \ || $month -eq 11 ]]; then\n                if [[ $day -ge 1 && $day -le 30 ]];\
    \ then\n                    echo \"True\"\n                else\n            \
    \        echo \"False\"\n                fi\n            elif [[ $month -eq 2\
    \ ]]; then\n                if [[ $day -ge 1 && $day -le 29 ]]; then\n       \
    \             echo \"True\"\n                else\n                    echo \"\
    False\"\n                fi\n            fi\n        else\n            echo \"\
    False\"\n        fi\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]]; then\n\
    \        if [[ $day -gt 0 && $day -lt 30 ]]; then\n          return 0\n      \
    \  fi\n      elif [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq\
    \ 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n        if [[\
    \ $day -gt 0 && $day -lt 32 ]]; then\n          return 0\n        fi\n      elif\
    \ [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n\
    \        if [[ $day -gt 0 && $day -lt 31 ]]; then\n          return 0\n      \
    \  fi\n      fi\n    fi\n  fi\n  return 1\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n    local month=$(echo\
    \ $1 | cut -d'-' -f1)\n    local day=$(echo $1 | cut -d'-' -f2)\n    local year=$(echo\
    \ $1 | cut -d'-' -f3)\n    if [[ $month -gt 0 && $month -lt 13 ]]; then\n    \
    \  if [[ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month\
    \ -eq 8 || $month -eq 10 || $month -eq 12 ]]; then\n        if [[ $day -gt 0 &&\
    \ $day -lt 32 ]]; then\n          return 0\n        fi\n      elif [[ $month -eq\
    \ 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n        if [[ $day\
    \ -gt 0 && $day -lt 31 ]]; then\n          return 0\n        fi\n      elif [[\
    \ $month -eq 2 ]]; then\n        if [[ $day -gt 0 && $day -lt 30 ]]; then\n  \
    \        return 0\n        fi\n      fi\n    fi\n  fi\n  return 1\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 1 || $month -eq\
    \ 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n        \
    \  return 0\n        fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month\
    \ -eq 9 || $month -eq 11 ]]; then\n        if [[ $day -gt 0 && $day -lt 31 ]];\
    \ then\n          return 0\n        fi\n      elif [[ $month -eq 2 ]]; then\n\
    \        if [[ $day -gt 0 && $day -lt 30 ]]; then\n          return 0\n      \
    \  fi\n      fi\n    fi\n  fi\n  return 1\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # check if the string is empty\n    if [ -z \"$1\" ]; then\n        echo\
    \ \"False\"\n        return\n    fi\n\n    # check if the string is in the format\
    \ mm-dd-yyyy\n    if [[ ! $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n      \
    \  echo \"False\"\n        return\n    fi\n\n    # check if the months are not\
    \ less than 1 or higher than 12\n    month=${1:0:2}\n    if [ $month -lt 1 ] ||\
    \ [ $month -gt 12 ]; then\n        echo \"False\"\n        return\n    fi\n\n\
    \    # check if the number of days is not less than 1 or higher than 31 days for\
    \ months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    day=${1:3:2}\n    if [ $month -eq 1\
    \ ] || [ $month -eq 3 ] || [ $month -eq 5 ] || [ $month -eq 7 ] || [ $month -eq\
    \ 8 ] || [ $month -eq 10 ] || [ $month -eq 12 ]; then\n        if [ $day -lt 1\
    \ ] || [ $day -gt 31 ]; then\n            echo \"False\"\n            return\n\
    \        fi\n    elif [ $month -eq 4 ] || [ $month -eq 6 ] || [ $month -eq 9 ]\
    \ || [ $month -eq 11 ]; then\n        if [ $day -lt 1 ] || [ $day -gt 30 ]; then\n\
    \            echo \"False\"\n            return\n        fi\n    elif [ $month\
    \ -eq 2 ]; then\n        if [ $day -lt 1 ] || [ $day -gt 29 ]; then\n        \
    \    echo \"False\"\n            return\n        fi\n    fi\n\n    echo \"True\"\
    \n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    # check if the date is empty\n    if [ -z \"$1\" ]; then\n        echo\
    \ \"False\"\n        return\n    fi\n\n    # check if the date is in the format\
    \ mm-dd-yyyy\n    if [[ ! \"$1\" =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n  \
    \      echo \"False\"\n        return\n    fi\n\n    # check if the month is valid\n\
    \    month=$(echo \"$1\" | cut -d'-' -f1)\n    if [ \"$month\" -lt 1 ] || [ \"\
    $month\" -gt 12 ]; then\n        echo \"False\"\n        return\n    fi\n\n  \
    \  # check if the day is valid\n    day=$(echo \"$1\" | cut -d'-' -f2)\n    if\
    \ [ \"$month\" -eq 1 ] || [ \"$month\" -eq 3 ] || [ \"$month\" -eq 5 ] || [ \"\
    $month\" -eq 7 ] || [ \"$month\" -eq 8 ] || [ \"$month\" -eq 10 ] || [ \"$month\"\
    \ -eq 12 ]; then\n        if [ \"$day\" -lt 1 ] || [ \"$day\" -gt 31 ]; then\n\
    \            echo \"False\"\n            return\n        fi\n    elif [ \"$month\"\
    \ -eq 4 ] || [ \"$month\" -eq 6 ] || [ \"$month\" -eq 9 ] || [ \"$month\" -eq\
    \ 11 ]; then\n        if [ \"$day\" -lt 1 ] || [ \"$day\" -gt 30 ]; then\n   \
    \         echo \"False\"\n            return\n        fi\n    elif [ \"$month\"\
    \ -eq 2 ]; then\n        if [ \"$day\" -lt 1 ] || [ \"$day\" -gt 29 ]; then\n\
    \            echo \"False\"\n            return\n        fi\n    fi\n\n    echo\
    \ \"True\"\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        month=${BASH_REMATCH[1]}\n\
    \        day=${BASH_REMATCH[2]}\n        year=${BASH_REMATCH[3]}\n        if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n            if [[ $month -eq 1 || $month\
    \ -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n                if [[ $day -gt 0 && $day -lt 32 ]]; then\n\
    \                    echo \"True\"\n                else\n                   \
    \ echo \"False\"\n                fi\n            elif [[ $month -eq 4 || $month\
    \ -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n                if [[ $day\
    \ -gt 0 && $day -lt 31 ]]; then\n                    echo \"True\"\n         \
    \       else\n                    echo \"False\"\n                fi\n       \
    \     elif [[ $month -eq 2 ]]; then\n                if [[ $day -gt 0 && $day\
    \ -lt 30 ]]; then\n                    echo \"True\"\n                else\n \
    \                   echo \"False\"\n                fi\n            fi\n     \
    \   else\n            echo \"False\"\n        fi\n    else\n        echo \"False\"\
    \n    fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  local date=$1\n  local month=$(echo $date | cut -d '-' -f 1)\n  local day=$(echo\
    \ $date | cut -d '-' -f 2)\n  local year=$(echo $date | cut -d '-' -f 3)\n  local\
    \ month_days=0\n  local valid_date=0\n  local valid_month=0\n  local valid_year=0\n\
    \  local valid_day=0\n  local valid_format=0\n\n  if [[ $date =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\
    \ ]]; then\n    valid_format=1\n  fi\n\n  if [[ $month -ge 1 && $month -le 12\
    \ ]]; then\n    valid_month=1\n  fi\n\n  if [[ $year -ge 1 && $year -le 9999 ]];\
    \ then\n    valid_year=1\n  fi\n\n  if [[ $month -eq 1 || $month -eq 3 || $month\
    \ -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month -eq 12 ]];\
    \ then\n    month_days=31\n  elif [[ $month -eq 4 || $month -eq 6 || $month -eq\
    \ 9 || $month -eq 11 ]]; then\n    month_days=30\n  elif [[ $month -eq 2 ]]; then\n\
    \    if [[ $(($year % 4)) -eq 0 ]]; then\n      month_days=29\n    else\n    \
    \  month_days=28\n    fi\n  fi\n\n  if [[ $day -ge 1 && $day -le $month_days ]];\
    \ then\n    valid_day=1\n  fi\n\n  if [[ $valid_format -eq 1 && $valid_month -eq\
    \ 1 && $valid_year -eq 1 && $valid_day -eq 1 ]]; then\n    valid_date=1\n  fi\n\
    \n  if [[ $valid_date -eq 1 ]]; then\n    echo \"True\"\n  else\n    echo \"False\"\
    \n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    local date=\"$1\"\n    local month=\"$(echo \"$date\" | cut -d'-' -f1)\"\
    \n    local day=\"$(echo \"$date\" | cut -d'-' -f2)\"\n    local year=\"$(echo\
    \ \"$date\" | cut -d'-' -f3)\"\n    local max_days=31\n    local is_leap_year=0\n\
    \    local is_valid=0\n\n    if [[ -z \"$date\" ]]; then\n        is_valid=0\n\
    \    elif [[ \"$month\" -lt 1 || \"$month\" -gt 12 ]]; then\n        is_valid=0\n\
    \    elif [[ \"$day\" -lt 1 ]]; then\n        is_valid=0\n    elif [[ \"$year\"\
    \ -lt 1 ]]; then\n        is_valid=0\n    elif [[ \"$month\" -eq 2 ]]; then\n\
    \        if [[ \"$((year % 4))\" -eq 0 ]]; then\n            if [[ \"$((year %\
    \ 100))\" -eq 0 ]]; then\n                if [[ \"$((year % 400))\" -eq 0 ]];\
    \ then\n                    is_leap_year=1\n                fi\n            else\n\
    \                is_leap_year=1\n            fi\n        fi\n        if [[ \"\
    $is_leap_year\" -eq 1 ]]; then\n            max_days=29\n        else\n      \
    \      max_days=28\n        fi\n    elif [[ \"$month\" -eq 4 || \"$month\" -eq\
    \ 6 || \"$month\" -eq 9 || \"$month\" -eq 11 ]]; then\n        max_days=30\n \
    \   fi\n    if [[ \"$day\" -gt \"$max_days\" ]]; then\n        is_valid=0\n  \
    \  else\n        is_valid=1\n    fi\n    echo \"$is_valid\"\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # your code here\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\"\
    \ ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"\
    01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") =\
    \ \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1m47k2ze.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmp1m47k2ze.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        month=${BASH_REMATCH[1]}\n\
    \        day=${BASH_REMATCH[2]}\n        year=${BASH_REMATCH[3]}\n        if [[\
    \ $month -gt 0 && $month -lt 13 ]]; then\n            if [[ $month -eq 1 || $month\
    \ -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10 || $month\
    \ -eq 12 ]]; then\n                if [[ $day -gt 0 && $day -lt 32 ]]; then\n\
    \                    return 0\n                fi\n            elif [[ $month\
    \ -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n          \
    \      if [[ $day -gt 0 && $day -lt 31 ]]; then\n                    return 0\n\
    \                fi\n            elif [[ $month -eq 2 ]]; then\n             \
    \   if [[ $day -gt 0 && $day -lt 30 ]]; then\n                    return 0\n \
    \               fi\n            fi\n        fi\n    fi\n    return 1\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        local\
    \ month=${BASH_REMATCH[1]}\n        local day=${BASH_REMATCH[2]}\n        local\
    \ year=${BASH_REMATCH[3]}\n        if [[ $month -gt 0 && $month -lt 13 ]]; then\n\
    \            if [[ $month -eq 2 ]]; then\n                if [[ $((year % 4))\
    \ -eq 0 ]]; then\n                    if [[ $day -gt 0 && $day -lt 30 ]]; then\n\
    \                        echo \"True\"\n                    else\n           \
    \             echo \"False\"\n                    fi\n                else\n \
    \                   if [[ $day -gt 0 && $day -lt 29 ]]; then\n               \
    \         echo \"True\"\n                    else\n                        echo\
    \ \"False\"\n                    fi\n                fi\n            elif [[ $month\
    \ -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n          \
    \      if [[ $day -gt 0 && $day -lt 31 ]]; then\n                    echo \"True\"\
    \n                else\n                    echo \"False\"\n                fi\n\
    \            else\n                if [[ $day -gt 0 && $day -lt 32 ]]; then\n\
    \                    echo \"True\"\n                else\n                   \
    \ echo \"False\"\n                fi\n            fi\n        else\n         \
    \   echo \"False\"\n        fi\n    else\n        echo \"False\"\n    fi\n}\n\n\
    candidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  # hint: you can use the following command to\
    \ check if the date is valid:\n  # date -d \"$1\" > /dev/null 2>&1\n  # if the\
    \ date is valid, the command will return 0, otherwise 1\n  # you can use the following\
    \ command to check if the date is in the format mm-dd-yyyy\n  # echo \"$1\" |\
    \ grep -E '^[0-9]{2}-[0-9]{2}-[0-9]{4}$' > /dev/null 2>&1\n  # if the date is\
    \ in the format, the command will return 0, otherwise 1\n  # you can use the following\
    \ command to check if the number of days is valid\n  # echo \"$1\" | grep -E '^(0[1-9]|1[0-9]|2[0-9]|3[0-1])-(0[1-9]|1[0-2])-[0-9]{4}$'\
    \ > /dev/null 2>&1\n  # if the number of days is valid, the command will return\
    \ 0, otherwise 1\n  # you can use the following command to check if the number\
    \ of days is valid for the month 2\n  # echo \"$1\" | grep -E '^(0[1-9]|1[0-9]|2[0-9])-02-[0-9]{4}$'\
    \ > /dev/null 2>&1\n  # if the number of days is valid, the command will return\
    \ 0, otherwise 1\n  # you can use the following command to check if the number\
    \ of days is valid for the months 1,3,5,7,8,10,12\n  # echo \"$1\" | grep -E '^(0[1-9]|1[0-9]|2[0-9]|3[0-1])-(0[13578]|1[02])-[0-9]{4}$'\
    \ > /dev/null 2>&1\n  # if the number of days is valid, the command will return\
    \ 0, otherwise 1\n  # you can use the following command to check if the number\
    \ of days is valid for the months 4,6,9,11\n\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmu6jiaxw.sh: line 36: syntax error near unexpected token `}''

    /tmp/tmpmu6jiaxw.sh: line 36: `}''

    '
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]]; then\n    month=${BASH_REMATCH[1]}\n    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n\
    \    if [[ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 1 ||\
    \ $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month -eq 10\
    \ || $month -eq 12 ]]; then\n        if [[ $day -gt 0 && $day -lt 32 ]]; then\n\
    \          echo True\n        else\n          echo False\n        fi\n      elif\
    \ [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n\
    \        if [[ $day -gt 0 && $day -lt 31 ]]; then\n          echo True\n     \
    \   else\n          echo False\n        fi\n      elif [[ $month -eq 2 ]]; then\n\
    \        if [[ $day -gt 0 && $day -lt 30 ]]; then\n          echo True\n     \
    \   else\n          echo False\n        fi\n      fi\n    else\n      echo False\n\
    \    fi\n  else\n    echo False\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n\
    \    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ -z $1 ]]; then\n    echo \"False\"\n    return\n  fi\n  if [[ $1\
    \ =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    local month=${BASH_REMATCH[1]}\n\
    \    local day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[\
    \ $month -gt 12 || $month -lt 1 ]]; then\n      echo \"False\"\n      return\n\
    \    fi\n    if [[ $month -eq 2 ]]; then\n      if [[ $day -gt 29 || $day -lt\
    \ 1 ]]; then\n        echo \"False\"\n        return\n      fi\n    elif [[ $month\
    \ -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n      if [[\
    \ $day -gt 30 || $day -lt 1 ]]; then\n        echo \"False\"\n        return\n\
    \      fi\n    else\n      if [[ $day -gt 31 || $day -lt 1 ]]; then\n        echo\
    \ \"False\"\n        return\n      fi\n    fi\n    echo \"True\"\n  else\n   \
    \ echo \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\"\
    \ ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"\
    01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") =\
    \ \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # Write your code here\n  # check if the date is empty\n  if [ -z \"$1\"\
    \ ]; then\n    echo \"False\"\n    return\n  fi\n  # check if the date is in the\
    \ format mm-dd-yyyy\n  if [[ ! \"$1\" =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n\
    \    echo \"False\"\n    return\n  fi\n  # check if the months is not less than\
    \ 1 or higher than 12\n  month=$(echo \"$1\" | cut -d '-' -f 1)\n  if [ \"$month\"\
    \ -lt 1 ] || [ \"$month\" -gt 12 ]; then\n    echo \"False\"\n    return\n  fi\n\
    \  # check if the number of days is not less than 1 or higher than 31 days for\
    \ months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n  day=$(echo \"$1\" | cut -d '-' -f 2)\n\
    \  if [ \"$month\" -eq 1 ] || [ \"$month\" -eq 3 ] || [ \"$month\" -eq 5 ] ||\
    \ [ \"$month\" -eq 7 ] || [ \"$month\" -eq 8 ] || [ \"$month\" -eq 10 ] || [ \"\
    $month\" -eq 12 ]; then\n    if [ \"$day\" -lt 1 ] || [ \"$day\" -gt 31 ]; then\n\
    \      echo \"False\"\n      return\n    fi\n  elif [ \"$month\" -eq 4 ] || [\
    \ \"$month\" -eq 6 ] || [ \"$month\" -eq 9 ] || [ \"$month\" -eq 11 ]; then\n\
    \    if [ \"$day\" -lt 1 ] || [ \"$day\" -gt 30 ]; then\n      echo \"False\"\n\
    \      return\n    fi\n  elif [ \"$month\" -eq 2 ]; then\n    if [ \"$day\" -lt\
    \ 1 ] || [ \"$day\" -gt 29 ]; then\n      echo \"False\"\n      return\n    fi\n\
    \  fi\n  echo \"True\"\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\"\
    \ ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"\
    01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") =\
    \ \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # write your code here\n  if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]];\
    \ then\n    local month=$(echo $1 | cut -d'-' -f1)\n    local day=$(echo $1 |\
    \ cut -d'-' -f2)\n    local year=$(echo $1 | cut -d'-' -f3)\n    if [[ $month\
    \ -lt 1 || $month -gt 12 ]]; then\n      echo \"False\"\n    elif [[ $month -eq\
    \ 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month\
    \ -eq 10 || $month -eq 12 ]]; then\n      if [[ $day -lt 1 || $day -gt 31 ]];\
    \ then\n        echo \"False\"\n      else\n        echo \"True\"\n      fi\n\
    \    elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]];\
    \ then\n      if [[ $day -lt 1 || $day -gt 30 ]]; then\n        echo \"False\"\
    \n      else\n        echo \"True\"\n      fi\n    elif [[ $month -eq 2 ]]; then\n\
    \      if [[ $day -lt 1 || $day -gt 29 ]]; then\n        echo \"False\"\n    \
    \  else\n        echo \"True\"\n      fi\n    fi\n  else\n    echo \"False\"\n\
    \  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        local\
    \ month=${BASH_REMATCH[1]}\n        local day=${BASH_REMATCH[2]}\n        local\
    \ year=${BASH_REMATCH[3]}\n        if [[ $month -gt 0 && $month -lt 13 ]]; then\n\
    \            if [[ $month -eq 2 ]]; then\n                if [[ $((year % 4))\
    \ -eq 0 ]]; then\n                    if [[ $day -gt 0 && $day -lt 30 ]]; then\n\
    \                        echo \"True\"\n                    else\n           \
    \             echo \"False\"\n                    fi\n                else\n \
    \                   if [[ $day -gt 0 && $day -lt 29 ]]; then\n               \
    \         echo \"True\"\n                    else\n                        echo\
    \ \"False\"\n                    fi\n                fi\n            elif [[ $month\
    \ -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n          \
    \      if [[ $day -gt 0 && $day -lt 31 ]]; then\n                    echo \"True\"\
    \n                else\n                    echo \"False\"\n                fi\n\
    \            else\n                if [[ $day -gt 0 && $day -lt 32 ]]; then\n\
    \                    echo \"True\"\n                else\n                   \
    \ echo \"False\"\n                fi\n            fi\n        else\n         \
    \   echo \"False\"\n        fi\n    else\n        echo \"False\"\n    fi\n}\n\n\
    candidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  local date=$1\n  local pattern=\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\n\
    \  if [[ $date =~ $pattern ]]; then\n    local month=${BASH_REMATCH[1]}\n    local\
    \ day=${BASH_REMATCH[2]}\n    local year=${BASH_REMATCH[3]}\n    if [[ $month\
    \ -le 12 && $month -ge 1 ]]; then\n      if [[ $month -eq 2 ]]; then\n       \
    \ if [[ $day -le 29 && $day -ge 1 ]]; then\n          return 0\n        fi\n \
    \     elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]];\
    \ then\n        if [[ $day -le 30 && $day -ge 1 ]]; then\n          return 0\n\
    \        fi\n      elif [[ $day -le 31 && $day -ge 1 ]]; then\n        return\
    \ 0\n      fi\n    fi\n  fi\n  return 1\n}\n\ncandidate() {\n    valid_date \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  # your code here\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]];\
    \ then\n    month=${BASH_REMATCH[1]}\n    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n\
    \    if [[ $month -gt 0 && $month -lt 13 ]]; then\n      if [[ $month -eq 2 ]];\
    \ then\n        if [[ $day -gt 0 && $day -lt 30 ]]; then\n          echo \"True\"\
    \n        else\n          echo \"False\"\n        fi\n      elif [[ $month -eq\
    \ 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8 || $month\
    \ -eq 10 || $month -eq 12 ]]; then\n        if [[ $day -gt 0 && $day -lt 32 ]];\
    \ then\n          echo \"True\"\n        else\n          echo \"False\"\n    \
    \    fi\n      elif [[ $month -eq 4 || $month -eq 6 || $month -eq 9 || $month\
    \ -eq 11 ]]; then\n        if [[ $day -gt 0 && $day -lt 31 ]]; then\n        \
    \  echo \"True\"\n        else\n          echo \"False\"\n        fi\n      fi\n\
    \    else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\
    \ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"\
    06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
    \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
    \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"\
    04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n    month=${BASH_REMATCH[1]}\n\
    \    day=${BASH_REMATCH[2]}\n    year=${BASH_REMATCH[3]}\n    if [[ $month -eq\
    \ 2 ]]; then\n      if [[ $((year % 4)) -eq 0 ]]; then\n        if [[ $day -gt\
    \ 29 ]]; then\n          echo \"False\"\n          return\n        fi\n      else\n\
    \        if [[ $day -gt 28 ]]; then\n          echo \"False\"\n          return\n\
    \        fi\n      fi\n    elif [[ $month -eq 4 || $month -eq 6 || $month -eq\
    \ 9 || $month -eq 11 ]]; then\n      if [[ $day -gt 30 ]]; then\n        echo\
    \ \"False\"\n        return\n      fi\n    elif [[ $month -gt 12 ]]; then\n  \
    \    echo \"False\"\n      return\n    fi\n    echo \"True\"\n  else\n    echo\
    \ \"False\"\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659998260
