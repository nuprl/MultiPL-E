language: sh
name: HumanEval_86_anti_shuffle
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local len2=0\n\
    \    local len3=0\n    local len4=0\n    local len5=0\n    local len6=0\n    local\
    \ len7=0\n    local len8=0\n    local len9=0\n    local len10=0\n    local len11=0\n\
    \    local len12=0\n    local len13=0\n    local len14=0\n    local len15=0\n\
    \    local len16=0\n    local len17=0\n    local len18=0\n    local len19=0\n\
    \    local len20=0\n    local len21=0\n    local len22=0\n    local len23=0\n\
    \    local len24=0\n    local len25=0\n    local len26=0\n    local len27=0\n\
    \    local len28=0\n    local len29=0\n    local len30=0\n    local len31=0\n\
    \    local len32=0\n    local len33=0\n    local len34=0\n    local len35=0\n\
    \    local len36=0\n    local len37=0\n    local len38=0\n    local len39=0\n\
    \    local len40=0\n    local len41=0\n    local len42=0\n    local len43=0\n\
    \    local len44=0\n    local len45=0\n    local len46=0\n    local len47=0\n\
    \    local len48=0\n    local len49=0\n    local len50=0\n    local len51=0\n\
    \    local len52=0\n    local len53=0\n    local len54=0\n    local len55=0\n\
    \    local len56=0\n    local len57=0\n    local len58=0\n    local len59=0\n\
    \    local len60=0\n    local len61=0\n    local len62=0\n    local len63=0\n\
    \    local len64=0\n    local len65=0\n    local len66=0\n    local len67=0\n\
    \    local\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=\"$1\"\n    local word\n    local result=\"\"\n    local i\n  \
    \  local j\n    local k\n    local len\n    local char\n    local char_arr\n \
    \   local char_arr_len\n    local char_arr_index\n    local char_arr_index_len\n\
    \    local char_arr_index_len_len\n    local char_arr_index_len_len_len\n    local\
    \ char_arr_index_len_len_len_len\n    local char_arr_index_len_len_len_len_len\n\
    \    local char_arr_index_len_len_len_len_len_len\n    local char_arr_index_len_len_len_len_len_len_len\n\
    \    local char_arr_index_len_len_len_len_len_len_len_len\n    local char_arr_index_len_len_len_len_len_len_len_len_len\n\
    \    local char_arr_index_len_len_len_len_len_len_len_len_len_len\n    local char_arr_index_len_len_len_len_len_len_len_len_len_len_len\n\
    \    local char_arr_index_len_len_len_len_len_len_len_len_len_len_len_len\n  \
    \  local char_arr_index_len_len_len_len_len_len_len_len_len_len_len_len_len\n\
    \    local char_arr_index_len_len_len_len_len_len_len_len_len_len_len_len_len_len\n\
    \    local char_arr_index_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\n\
    \    local char_arr_index_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\n\
    \    local char_arr_index_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\n\
    \    local char_arr_index_len_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    echo \"$1\" | tr ' ' '\\n' | while read word; do\n        echo \"$word\"\
    \ | grep -o . | sort | tr -d '\\n'\n        echo -n ' '\n    done\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    # Write your code here\n    echo $1\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local word\n    local new_string=\"\"\n    for word\
    \ in $string; do\n        new_string=\"$new_string $(echo -n $word | grep -o .\
    \ | sort | tr -d '\\n')\"\n    done\n    echo $new_string\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    # Write your code here\n    #\n    # Hint:\n    # Use the following command\
    \ to sort the characters in a string:\n    # echo 'hello' | grep -o . | sort |\
    \ tr -d '\\n'\n    #\n    # Hint:\n    # Use the following command to split a\
    \ string into words:\n    # echo 'hello world' | tr ' ' '\\n'\n    #\n    # Hint:\n\
    \    # Use the following command to join words into a string:\n    # echo -e 'hello\\\
    nworld' | tr '\\n' ' '\n    #\n    # Hint:\n    # Use the following command to\
    \ remove the last character from a string:\n    # echo 'hello' | rev | cut -c\
    \ 2- | rev\n    #\n    # Hint:\n    # Use the following command to remove the\
    \ first character from a string:\n    # echo 'hello' | cut -c 2-\n    #\n    #\
    \ Hint:\n    # Use the following command to remove the first and last characters\
    \ from a string:\n    # echo 'hello' | cut -c 2- | rev | cut -c 2- | rev\n   \
    \ #\n    # Hint:\n    # Use the following command to remove the last character\
    \ from a string:\n    # echo 'hello' | rev | cut -c 2- | rev\n    #\n    # Hint:\n\
    \    # Use the following command to remove the first character from a string:\n\
    \    # echo 'hello' | cut -c 2-\n    #\n    # Hint:\n    # Use the following command\
    \ to remove the first and last characters from a string:\n    # echo 'hello' |\
    \ cut -c 2- | rev | cut -c 2- | rev\n    #\n    # Hint:\n    # Use the following\
    \ command to remove the last character from a string:\n    # echo 'hello' | rev\
    \ | cut -c 2- | rev\n    #\n    # Hint:\n    # Use the following command to remove\
    \ the first character from a string:\n    # echo 'hello' | cut -c 2-\n    #\n\
    \    # Hint:\n    # Use the following command to remove the first and last characters\
    \ from a string:\n    # echo 'hello' | cut -\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdx1fb0e0.sh: line 63: syntax error near unexpected token `}''

    /tmp/tmpdx1fb0e0.sh: line 63: `}''

    '
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local -a arr=()\n  local -a arr2=()\n  local -a arr3=()\n  local -a arr4=()\n\
    \  local -a arr5=()\n  local -a arr6=()\n  local -a arr7=()\n  local -a arr8=()\n\
    \  local -a arr9=()\n  local -a arr10=()\n  local -a arr11=()\n  local -a arr12=()\n\
    \  local -a arr13=()\n  local -a arr14=()\n  local -a arr15=()\n  local -a arr16=()\n\
    \  local -a arr17=()\n  local -a arr18=()\n  local -a arr19=()\n  local -a arr20=()\n\
    \  local -a arr21=()\n  local -a arr22=()\n  local -a arr23=()\n  local -a arr24=()\n\
    \  local -a arr25=()\n  local -a arr26=()\n  local -a arr27=()\n  local -a arr28=()\n\
    \  local -a arr29=()\n  local -a arr30=()\n  local -a arr31=()\n  local -a arr32=()\n\
    \  local -a arr33=()\n  local -a arr34=()\n  local -a arr35=()\n  local -a arr36=()\n\
    \  local -a arr37=()\n  local -a arr38=()\n  local -a arr39=()\n  local -a arr40=()\n\
    \  local -a arr41=()\n  local -a arr42=()\n  local -a arr43=()\n  local -a arr44=()\n\
    \  local -a arr45=()\n  local -a arr46=()\n  local -a arr47=()\n  local -a arr48=()\n\
    \  local -a arr49=()\n  local -a arr50=()\n  local -a arr51=()\n  local -a arr52=()\n\
    \  local -a arr53=()\n  local -a arr54=()\n  local -a arr55=()\n  local -a arr56=()\n\
    \  local -a arr57=()\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=\"$1\"\n  local new_str=\"\"\n  local word=\"\"\n  local char=\"\"\
    \n  local i=0\n  local j=0\n  local k=0\n  local len=0\n  local len_str=0\n  local\
    \ len_word=0\n  local len_char=0\n  local ascii_char=0\n  local ascii_char_min=0\n\
    \  local ascii_char_min_index=0\n  local ascii_char_min_index_prev=0\n  local\
    \ ascii_char_min_index_prev_prev=0\n  local ascii_char_min_index_prev_prev_prev=0\n\
    \  local ascii_char_min_index_prev_prev_prev_prev=0\n  local ascii_char_min_index_prev_prev_prev_prev_prev=0\n\
    \  local ascii_char_min_index_prev_prev_prev_prev_prev_prev=0\n  local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local\
    \ ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local\
    \ ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n \
    \ local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local\
    \ char=\"\"\n    for char in $(echo \"$string\" | fold -w1); do\n        if [[\
    \ \"$char\" == \" \" ]]; then\n            result=\"$result $word\"\n        \
    \    word=\"\"\n        else\n            word=\"$word$char\"\n        fi\n  \
    \  done\n    result=\"$result $word\"\n    echo \"$result\" | sed 's/ /\\n/g'\
    \ | sort | tr -d '\\n'\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a sorted_words\n    local word\n    local sorted_word\n\
    \    local i\n    local j\n    local k\n    local result\n\n    words=($(echo\
    \ \"$1\" | tr ' ' '\\n'))\n    for ((i = 0; i < ${#words[@]}; i++)); do\n    \
    \    word=${words[$i]}\n        sorted_word=\"\"\n        for ((j = 0; j < ${#word};\
    \ j++)); do\n            sorted_word=\"$sorted_word${word:$j:1}\"\n          \
    \  for ((k = 0; k < j; k++)); do\n                if [[ \"${word:$j:1}\" < \"\
    ${sorted_word:$k:1}\" ]]; then\n                    sorted_word=\"${sorted_word:0:$k}${word:$j:1}${sorted_word:$k}\"\
    \n                    sorted_word=\"${sorted_word:0:$((j + 1))}${sorted_word:$((j\
    \ + 2))}\"\n                    break\n                fi\n            done\n\
    \        done\n        sorted_words[$i]=\"$sorted_word\"\n    done\n    result=\"\
    \"\n    for ((i = 0; i < ${#words[@]}; i++)); do\n        result=\"$result${sorted_words[$i]}\
    \ \"\n    done\n    echo \"${result:0:$((${#result} - 1))}\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a sorted_words\n    local -a result\n    local\
    \ -i i\n    local -i j\n    local -i k\n    local -i len\n    local -i len_word\n\
    \    local -i len_result\n    local -i len_sorted_words\n    local -i len_words\n\
    \    local -i len_result\n    local -i len_sorted_words\n    local -i len_words\n\
    \    local -i len_result\n    local -i len_sorted_words\n    local -i len_words\n\
    \    local -i len_result\n    local -i len_sorted_words\n    local -i len_words\n\
    \    local -i len_result\n    local -i len_sorted_words\n    local -i len_words\n\
    \    local -i len_result\n    local -i len_sorted_words\n    local -i len_words\n\
    \    local -i len_result\n    local -i len_sorted_words\n    local -i len_words\n\
    \    local -i len_result\n    local -i len_sorted_words\n    local -i len_words\n\
    \    local -i len_result\n    local -i len_sorted_words\n    local -i len_words\n\
    \    local -i len_result\n    local -i len_sorted_words\n    local -i len_words\n\
    \    local -i len_result\n    local -i len_sorted_words\n    local -i len_words\n\
    \    local -i len_result\n    local -i len_sorted_words\n    local -i len_words\n\
    \    local -i len_result\n    local -i len_sorted_words\n    local -i len_words\n\
    \    local -i len_result\n    local -i len_sorted_words\n    local -i len_words\n\
    \    local -i len_result\n    local -i len_sorted_words\n    local -i len_words\n\
    \    local -i len_result\n    local -i len_sorted_words\n    local -i len_words\n\
    \    local -i len_result\n    local -i len_sorted_words\n    local -i len_words\n\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local -a words\n  local -a sorted_words\n  local -a result\n  local i\n  local\
    \ j\n  local word\n  local sorted_word\n  local result_str\n\n  # Split the string\
    \ into words\n  IFS=' ' read -r -a words <<< \"$1\"\n\n  # Sort each word\n  for\
    \ word in \"${words[@]}\"; do\n    sorted_word=\"\"\n    for ((i=0; i<${#word};\
    \ i++)); do\n      sorted_word+=\"${word:$i:1}\"\n    done\n    sorted_words+=(\"\
    $(echo \"$sorted_word\" | grep -o . | sort | tr -d '\\n')\")\n  done\n\n  # Create\
    \ the result string\n  for ((i=0; i<${#words[@]}; i++)); do\n    word=\"${words[$i]}\"\
    \n    sorted_word=\"${sorted_words[$i]}\"\n    result_str=\"\"\n    for ((j=0;\
    \ j<${#word}; j++)); do\n      result_str+=\"${sorted_word:$j:1}\"\n    done\n\
    \    result+=(\"$result_str\")\n  done\n\n  echo \"${result[*]}\" | tr ' ' '\\\
    n' | tr -d '\\n'\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=$1\n  local new_str=\"\"\n  local word=\"\"\n  local char=\"\"\n\
    \  local i=0\n  local j=0\n  for ((i=0; i<${#str}; i++)); do\n    char=${str:$i:1}\n\
    \    if [[ $char == \" \" ]]; then\n      new_str+=\"$word \"\n      word=\"\"\
    \n    else\n      word+=$(echo $char | sort)\n    fi\n  done\n  new_str+=\"$word\"\
    \n  echo $new_str\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    echo \"$1\" | tr ' ' '\\n' | while read word; do\n        echo \"$word\"\
    \ | grep -o . | sort | tr -d '\\n'\n        echo -n ' '\n    done\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local result=\"\"\n    local word=\"\"\n    for (( i=0; i<${#1}; i++ ));\
    \ do\n        if [[ ${1:$i:1} == \" \" ]]; then\n            result+=\"$word \"\
    \n            word=\"\"\n        else\n            word+=\"$(echo \"${1:$i:1}\"\
    \ | sort -u)\"\n        fi\n    done\n    result+=\"$word\"\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local input=\"$1\"\n    local output=\"\"\n    local word=\"\"\n    local\
    \ char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n  \
    \  local len_input=0\n    local len_word=0\n    local len_char=0\n    local char_arr=()\n\
    \    local word_arr=()\n    local input_arr=()\n    local output_arr=()\n    local\
    \ char_arr_sorted=()\n    local word_arr_sorted=()\n    local input_arr_sorted=()\n\
    \    local output_arr_sorted=()\n    local char_arr_sorted_str=\"\"\n    local\
    \ word_arr_sorted_str=\"\"\n    local input_arr_sorted_str=\"\"\n    local output_arr_sorted_str=\"\
    \"\n\n    # split input string into array of words\n    IFS=' ' read -ra input_arr\
    \ <<< \"$input\"\n    len_input=${#input_arr[@]}\n\n    # loop through each word\
    \ in input array\n    for ((i=0; i<len_input; i++)); do\n        word=${input_arr[$i]}\n\
    \        len_word=${#word}\n\n        # split word into array of characters\n\
    \        for ((j=0; j<len_word; j++)); do\n            char=${word:$j:1}\n   \
    \         char_arr[$j]=$char\n        done\n\n        # sort characters in word\n\
    \        len=${#char_arr[@]}\n        char_arr_sorted=($(printf '%s\\n' \"${char_arr[@]}\"\
    \ | sort))\n\n        # join sorted characters into word\n        char_arr_sorted_str=$(printf\
    \ \"%s\" \"${char_arr_sorted[@]}\")\n        word_arr_sorted[$i]=$char_arr_sorted_str\n\
    \    done\n\n    # join sorted words into input\n    word_arr_sorted_str=$(printf\
    \ \"%s \" \"${word_arr_sorted[@]}\")\n    input_arr_sorted[0]=$word_arr_sorted_str\n\
    \    input_arr_sorted\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcs5k8uxn.sh: line 65: input_arr_sorted: command not found

    '
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local\
    \ char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n  \
    \  local len_str=0\n    local len_word=0\n    local len_char=0\n    local ascii_char=0\n\
    \    local ascii_char_min=0\n    local ascii_char_min_index=0\n    local ascii_char_min_index_temp=0\n\
    \    local ascii_char_min_temp=0\n    local ascii_char_min_temp_index=0\n    local\
    \ ascii_char_min_temp_index_temp=0\n    local ascii_char_temp=0\n    local ascii_char_temp_index=0\n\
    \    local ascii_char_temp_index_temp=0\n    local ascii_char_temp_min=0\n   \
    \ local ascii_char_temp_min_index=0\n    local ascii_char_temp_min_index_temp=0\n\
    \    local ascii_char_temp_min_temp=0\n    local ascii_char_temp_min_temp_index=0\n\
    \    local ascii_char_temp_min_temp_index_temp=0\n    local ascii_char_temp_min_temp_temp=0\n\
    \    local ascii_char_temp_min_temp_temp_index=0\n    local ascii_char_temp_min_temp_temp_index_temp=0\n\
    \    local ascii_char_temp_temp=0\n    local ascii_char_temp_temp_index=0\n  \
    \  local ascii_char_temp_temp_index_temp=0\n    local ascii_char_temp_temp_min=0\n\
    \    local ascii_char_temp_temp_min_index=0\n    local ascii_char_temp_temp_min_index_temp=0\n\
    \    local ascii_char_temp_temp_min_temp=0\n    local ascii_char_temp_temp_min_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  # TODO: Write your code here\n  # Use echo to print result\n  echo \"\"\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local result=\"\"\n    local word=\"\"\n    for word in $1; do\n        result=\"\
    $result $(echo $word | grep -o . | sort | tr -d '\\n')\"\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    # TODO: Write your code here\n    echo \"$1\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local sorted_word=\"\"\n    local sorted_char=\"\"\n    local i=0\n  \
    \  local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n   \
    \ local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local\
    \ t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n\
    \    local z=0\n    local space=0\n    local exclamation=0\n    local question=0\n\
    \    local period=0\n    local comma=0\n    local colon=0\n    local semicolon=0\n\
    \    local apostrophe=0\n    local quote=0\n    local dash=0\n    local underscore=0\n\
    \    local plus=0\n    local equal=0\n    local left_paren=0\n    local right_paren=0\n\
    \    local left_bracket=0\n    local right_bracket=0\n    local left_brace=0\n\
    \    local right_brace=0\n    local left_angle=0\n    local right_angle=0\n  \
    \  local at=0\n    local pound=0\n    local dollar=0\n    local percent=0\n  \
    \  local caret=0\n    local ampersand=0\n    local asterisk=0\n    local backslash=0\n\
    \    local forward_slash=0\n    local pipe=0\n    local tilde=0\n    local backtick=0\n\
    \    local less_than=0\n    local greater_than=0\n    local number=0\n    local\
    \ other=0\n    local new_word=\"\"\n    local new_char=\"\"\n    local new_sorted_word=\"\
    \"\n    local new_sorted_char=\"\"\n    local new_i=0\n    local new_j=0\n   \
    \ local new_k=0\n    local new_l=0\n    local new_m=0\n    local new_n=0\n   \
    \ local new_o=0\n    local new_p=0\n    local new_q=0\n   \n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  # Your code here\n  # You can use the following function to get the ascii value\
    \ of a character\n  # echo -e \"a\\nA\" | awk '{print $1, $2}' | od -An -tdC\n\
    \  # echo -e \"a\\nA\" | awk '{print $1, $2}' | od -An -tdC | awk '{print $2,\
    \ $3}'\n  # echo -e \"a\\nA\" | awk '{print $1, $2}' | od -An -tdC | awk '{print\
    \ $2, $3}' | sort -k2n\n  # echo -e \"a\\nA\" | awk '{print $1, $2}' | od -An\
    \ -tdC | awk '{print $2, $3}' | sort -k2n | awk '{print $1}'\n  # echo -e \"a\\\
    nA\" | awk '{print $1, $2}' | od -An -tdC | awk '{print $2, $3}' | sort -k2n |\
    \ awk '{print $1}' | tr -d '\\n'\n  # echo -e \"a\\nA\" | awk '{print $1, $2}'\
    \ | od -An -tdC | awk '{print $2, $3}' | sort -k2n | awk '{print $1}' | tr -d\
    \ '\\n' | sed 's/ //g'\n  # echo -e \"a\\nA\" | awk '{print $1, $2}' | od -An\
    \ -tdC | awk '{print $2, $3}' | sort -k2n | awk '{print $1}' | tr -d '\\n' | sed\
    \ 's/ //g' | sed 's/\\n//g'\n  # echo -e \"a\\nA\" | awk '{print $1, $2}' | od\
    \ -An -tdC | awk '{print $2, $3}' | sort -k2n | awk '{print $1}' | tr -d\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr7yx9zdl.sh: line 24: syntax error near unexpected token `}''

    /tmp/tmpr7yx9zdl.sh: line 24: `}''

    '
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local result=\"\"\n    local word=\"\"\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i len=0\n    local -i word_len=0\n\
    \    local -i word_start=0\n    local -i word_end=0\n    local -i space_start=0\n\
    \    local -i space_end=0\n    local -i space_len=0\n    local -i space_count=0\n\
    \    local -i space_index=0\n    local -i space_index_prev=0\n    local -i space_index_next=0\n\
    \    local -i space_index_next_next=0\n    local -i space_index_next_next_next=0\n\
    \    local -i space_index_next_next_next_next=0\n    local -i space_index_next_next_next_next_next=0\n\
    \    local -i space_index_next_next_next_next_next_next=0\n    local -i space_index_next_next_next_next_next_next_next=0\n\
    \    local -i space_index_next_next_next_next_next_next_next_next=0\n    local\
    \ -i space_index_next_next_next_next_next_next_next_next_next=0\n    local -i\
    \ space_index_next_next_next_next_next_next_next_next_next_next=0\n    local -i\
    \ space_index_next_next_next_next_next_next_next_next_next_next_next=0\n    local\
    \ -i space_index_next_next_next_next_next_next_next_next_next_next_next_next=0\n\
    \    local -i space_index_next_next_next_next_next_next_next_next_next_next_next_next_next=0\n\
    \    local -i space_index_next_next_next_next_next_next_next_next_next_next_next_next_next_next=0\n\
    \    local -i space_index_next_next_next_next_next_next_next\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    local\
    \ len_word=0\n    local len_char=0\n    local ascii_char=0\n    local ascii_char_min=0\n\
    \    local ascii_char_min_index=0\n    local ascii_char_min_index_tmp=0\n    local\
    \ ascii_char_tmp=0\n    local ascii_char_tmp_min=0\n    local ascii_char_tmp_min_index=0\n\
    \    local ascii_char_tmp_min_index_tmp=0\n    local ascii_char_tmp_tmp=0\n  \
    \  local ascii_char_tmp_tmp_min=0\n    local ascii_char_tmp_tmp_min_index=0\n\
    \    local ascii_char_tmp_tmp_min_index_tmp=0\n    local ascii_char_tmp_tmp_tmp=0\n\
    \    local ascii_char_tmp_tmp_tmp_min=0\n    local ascii_char_tmp_tmp_tmp_min_index=0\n\
    \    local ascii_char_tmp_tmp_tmp_min_index_tmp=0\n    local ascii_char_tmp_tmp_tmp_tmp=0\n\
    \    local ascii_char_tmp_tmp_tmp_tmp_min=0\n    local ascii_char_tmp_tmp_tmp_tmp_min_index=0\n\
    \    local ascii_char_tmp_tmp_tmp_tmp_min_index_tmp=0\n    local ascii_char_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local ascii_char_tmp_tmp_tmp_tmp_tmp_min=0\n    local ascii_char_tmp_tmp_tmp_tmp_tmp_min_index=0\n\
    \    local ascii_char_tmp_tmp_tmp_tmp_tmp_min_index_tmp=0\n    local ascii_char_tmp_tmp_tmp_tmp\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local new_string=\"\"\n    local word=\"\"\n    local\
    \ char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n  \
    \  local len_word=0\n    local len_string=${#string}\n    local char_array=()\n\
    \    local word_array=()\n    local string_array=()\n    local char_ascii=0\n\
    \    local char_ascii_min=0\n    local char_ascii_min_index=0\n    local char_ascii_min_index_prev=0\n\
    \    local char_ascii_min_index_prev_prev=0\n    local char_ascii_min_index_prev_prev_prev=0\n\
    \    local char_ascii_min_index_prev_prev_prev_prev=0\n    local char_ascii_min_index_prev_prev_prev_prev_prev=0\n\
    \    local char_ascii_min_index_prev_prev_prev_prev_prev_prev=0\n    local char_ascii_min_index_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local char_ascii_min_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n  \
    \  local char_ascii_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local char_ascii_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local char_ascii_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local char_ascii_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local char_ascii_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local char_ascii_min_index_prev_prev_prev_prev_prev\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local word\n    local result=\"\"\n    for word in $string;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort | tr -d '\\n')\"\
    \n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local result=\"\"\n    for word in $string; do\n   \
    \     local sorted_word=$(echo $word | grep -o . | sort | tr -d '\\n')\n     \
    \   result=\"$result$sorted_word \"\n    done\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a result\n    local -i i\n    local -i j\n   \
    \ local -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n\
    \    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i\
    \ t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local\
    \ -i y\n    local -i z\n    local -i A\n    local -i B\n    local -i C\n    local\
    \ -i D\n    local -i E\n    local -i F\n    local -i G\n    local -i H\n    local\
    \ -i I\n    local -i J\n    local -i K\n    local -i L\n    local -i M\n    local\
    \ -i N\n    local -i O\n    local -i P\n    local -i Q\n    local -i R\n    local\
    \ -i S\n    local -i T\n    local -i U\n    local -i V\n    local -i W\n    local\
    \ -i X\n    local -i Y\n    local -i Z\n    local -i space\n    local -i excl\n\
    \    local -i dot\n    local -i comma\n    local -i qmark\n    local -i colon\n\
    \    local -i semi\n    local -i lparen\n    local -i rparen\n    local -i lbrack\n\
    \    local -i rbrack\n    local -i lbrace\n    local -i rbrace\n    local -i langle\n\
    \    local -i rangle\n    local -i lslash\n    local -i rslash\n    local -i lquote\n\
    \    local -i rquote\n    local -i backslash\n    local -i dash\n    local -i\
    \ plus\n    local -i equal\n    local -i tilde\n    local -i at\n    local -i\
    \ pound\n    local -i dollar\n    local -i percent\n    local -i caret\n    local\
    \ -i ampersand\n    local -i asterisk\n    local -i pipe\n    local -i underscore\n\
    \    local -i backtick\n    local -i num\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=$1\n  local word\n  local result\n  for word in $str; do\n    result=\"\
    $result $(echo $word | grep -o . | sort -n | tr -d '\\n')\"\n  done\n  echo $result\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local -a words\n  local -a sorted_words\n  local -i i=0\n  local -i j=0\n \
    \ local -i k=0\n  local -i len=0\n  local -i len_sorted=0\n  local -i len_words=0\n\
    \  local -i len_sorted_words=0\n  local -i len_word=0\n  local -i len_sorted_word=0\n\
    \  local -i len_diff=0\n  local -i len_sorted_diff=0\n  local -i len_diff_word=0\n\
    \  local -i len_sorted_diff_word=0\n  local -i len_diff_sorted_word=0\n  local\
    \ -i len_sorted_diff_sorted_word=0\n  local -i len_diff_sorted_diff_word=0\n \
    \ local -i len_sorted_diff_sorted_diff_word=0\n  local -i len_diff_sorted_diff_sorted_word=0\n\
    \  local -i len_sorted_diff_sorted_diff_sorted_word=0\n  local -i len_diff_sorted_diff_sorted_diff_word=0\n\
    \  local -i len_sorted_diff_sorted_diff_sorted_diff_word=0\n  local -i len_diff_sorted_diff_sorted_diff_sorted_word=0\n\
    \  local -i len_sorted_diff_sorted_diff_sorted_diff_sorted_word=0\n  local -i\
    \ len_diff_sorted_diff_sorted_diff_sorted_diff_word=0\n  local -i len_sorted_diff_sorted_diff_sorted_diff_sorted_diff_word=0\n\
    \  local -i len_diff_sorted_diff_sorted_diff_sorted_diff_sorted_word=0\n  local\
    \ -i len_sorted_diff_sorted_diff_sorted_diff_sorted_diff_sorted_word=0\n  local\
    \ -i len_diff_sorted_diff_sorted_diff_sorted_diff_sorted\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    echo \"$1\" | tr ' ' '\\n' | while read word; do\n        echo -n \"$(echo\
    \ \"$word\" | fold -w1 | sort | tr -d '\\n') \"\n    done\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local -a words\n  local -a chars\n  local -a sorted\n  local -a result\n  local\
    \ i\n  local j\n  local k\n  local word\n  local char\n  local sorted_word\n \
    \ local result_word\n\n  IFS=' ' read -a words <<< \"$1\"\n  for ((i=0; i<${#words[@]};\
    \ i++)); do\n    word=${words[$i]}\n    IFS='' read -a chars <<< \"$word\"\n \
    \   for ((j=0; j<${#chars[@]}; j++)); do\n      char=${chars[$j]}\n      sorted[$j]=$char\n\
    \    done\n    sorted_word=$(printf '%s' \"${sorted[@]}\")\n    sorted_word=$(echo\
    \ \"$sorted_word\" | tr -d ' ')\n    sorted_word=$(echo \"$sorted_word\" | sort)\n\
    \    result[$i]=$sorted_word\n  done\n  result_word=$(printf '%s ' \"${result[@]}\"\
    )\n  result_word=$(echo \"$result_word\" | tr -d ' ')\n  echo \"$result_word\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n\
    \    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n \
    \   local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n  \
    \  local x=0\n    local y=0\n    local z=0\n    local space=\" \"\n    local ascii=\"\
    \"\n    local ascii_arr=()\n    local ascii_arr_len=0\n    local ascii_arr_index=0\n\
    \    local ascii_arr_index_len=0\n    local ascii_arr_index_len_str=\"\"\n   \
    \ local ascii_arr_index_len_str_len=0\n    local ascii_arr_index_len_str_len_str=\"\
    \"\n    local ascii_arr_index_len_str_len_str_len=0\n    local ascii_arr_index_len_str_len_str_len_str=\"\
    \"\n    local ascii_arr_index_len_str_len_str_len_str_len=0\n    local ascii_arr_index_len_str_len_str_len_str_len_str=\"\
    \"\n    local ascii_arr_index_len_str_len_str_len_str_len_str_len=0\n    local\
    \ ascii_arr_index_len_str_len_str_len_str_len_str_len_str=\"\"\n    local ascii_arr_index_len_str_len_str_len_str_len_str_len_str_len=0\n\
    \    local ascii_arr_index_len_str_len_str_len_str_len_str_len_str_len_str=\"\"\
    \n    local ascii_arr_index_len_str_len_str_len_str_len_str_len_str_len_str_len=0\n\
    \   \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=\"$1\"\n    local words=($string)\n    local new_string=\"\"\
    \n    for word in \"${words[@]}\"; do\n        local new_word=\"\"\n        for\
    \ (( i=0; i<${#word}; i++ )); do\n            new_word+=\"${word:$i:1}\"\n   \
    \     done\n        new_word=$(echo \"$new_word\" | grep -o . | sort | tr -d '\\\
    n')\n        new_string+=\"$new_word \"\n    done\n    echo \"$new_string\"\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local string=$1\n  local new_string=\"\"\n  local word=\"\"\n  local char=\"\
    \"\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local A=0\n  local B=0\n  local C=0\n  local D=0\n  local E=0\n  local F=0\n\
    \  local G=0\n  local H=0\n  local I=0\n  local J=0\n  local K=0\n  local L=0\n\
    \  local M=0\n  local N=0\n  local O=0\n  local P=0\n  local Q=0\n  local R=0\n\
    \  local S=0\n  local T=0\n  local U=0\n  local V=0\n  local W=0\n  local X=0\n\
    \  local Y=0\n  local Z=0\n  local space=0\n  local exclamation=0\n  local question=0\n\
    \  local period=0\n  local comma=0\n  local colon=0\n  local semicolon=0\n  local\
    \ apostrophe=0\n  local dash=0\n  local underscore=0\n  local plus=0\n  local\
    \ equal=0\n  local left_parenthesis=0\n  local right_parenthesis=0\n  local left_bracket=0\n\
    \  local right_bracket=0\n  local left_brace=0\n  local right_brace=0\n  local\
    \ less_than=0\n  local greater_than=0\n  local ampersand=0\n  local at=0\n  local\
    \ backslash=0\n  local dollar=0\n  local percent=0\n  local caret=0\n  local tilde=0\n\
    \  local single_quote=0\n  local double_quote=0\n  local pound=0\n  local number=0\n\
    \  local other=\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=$1\n  local word\n  local result=\"\"\n  for word in $str; do\n \
    \   result=\"$result $(echo $word | grep -o . | sort | tr -d '\\n')\"\n  done\n\
    \  echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local -a words\n  local -a sorted_words\n  local -a result\n  local word\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local space\n  local char\n  local\
    \ sorted_char\n  local sorted_word\n  local sorted_string\n  local string\n  string=\"\
    $1\"\n  space=' '\n  words=($(echo \"$string\" | tr ' ' '\\n'))\n  for word in\
    \ \"${words[@]}\"; do\n    sorted_word=\"\"\n    for char in $(echo \"$word\"\
    \ | grep -o .); do\n      sorted_char=$(echo \"$char\" | sort)\n      sorted_word=\"\
    $sorted_word$sorted_char\"\n    done\n    sorted_words+=(\"$sorted_word\")\n \
    \ done\n  for ((i=0; i<${#words[@]}; i++)); do\n    for ((j=0; j<${#words[@]};\
    \ j++)); do\n      for ((k=0; k<${#words[@]}; k++)); do\n        for ((l=0; l<${#words[@]};\
    \ l++)); do\n          for ((m=0; m<${#words[@]}; m++)); do\n            for ((n=0;\
    \ n<${#words[@]}; n++)); do\n              for ((o=0; o<${#words[@]}; o++)); do\n\
    \                for ((p=0; p<${#words[@]}; p++)); do\n                  for ((q=0;\
    \ q<${#words[@]}; q++)); do\n                    for ((r=0; r<${#words[@]}; r++));\
    \ do\n                      for ((s=0; s<${#words[@]}; s++)); do\n           \
    \             for ((t=0; t<${#words[@]}; t++)); do\n                         \
    \ for ((u=0; u<${#words[@]\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcal1sxqq.sh: line 65: unexpected EOF while looking for matching
    `)''

    /tmp/tmpcal1sxqq.sh: line 84: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  # TODO: Write your code here\n  echo \"$1\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a sorted_words\n    local -a sorted_string\n \
    \   local i=0\n    local j=0\n    local k=0\n    local word\n    local sorted_word\n\
    \    local string\n    local sorted_string\n    local char\n    local sorted_char\n\
    \    local -i char_ascii\n    local -i sorted_char_ascii\n    local -i char_count\n\
    \    local -i sorted_char_count\n    local -i char_index\n    local -i sorted_char_index\n\
    \    local -i word_count\n    local -i word_index\n    local -i word_length\n\
    \    local -i sorted_word_length\n    local -i word_start\n    local -i word_end\n\
    \    local -i sorted_word_start\n    local -i sorted_word_end\n    local -i string_length\n\
    \    local -i sorted_string_length\n    local -i string_index\n    local -i sorted_string_index\n\
    \    local -i space_count\n    local -i space_index\n    local -i space_start\n\
    \    local -i space_end\n    local -i sorted_space_start\n    local -i sorted_space_end\n\
    \    local -i sorted_space_count\n    local -i sorted_space_index\n    local -i\
    \ sorted_char_count\n    local -i sorted_char_index\n    local -i sorted_char_ascii\n\
    \    local -i sorted_char_count\n    local -i sorted_char_index\n    local -i\
    \ sorted_char_ascii\n    local -i sorted_char_count\n    local -i sorted_char_index\n\
    \    local -i sorted_char_ascii\n    local -i sorted_char_count\n    local -i\
    \ sorted_char_index\n    local -i sorted_char_ascii\n    local -i sorted_char_count\n\
    \    local -i sorted_char_index\n    local -i sorted_char_ascii\n    local -i\
    \ sorted_char_count\n    local -i sorted_char_index\n    local -i sorted_char_ascii\n\
    \    local -i sorted_char_count\n    local -\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  # Write your code here\n  # You can use the following command to sort a string:\n\
    \  # echo \"hello\" | fold -w1 | sort | tr -d '\\n'\n  # This will sort the string\
    \ \"hello\" and remove the newline character\n  #\n  # You can use the following\
    \ command to get the length of a string:\n  # echo \"hello\" | wc -c\n  # This\
    \ will return the length of the string \"hello\" + 1 (for the newline)\n  #\n\
    \  # You can use the following command to get a substring:\n  # echo \"hello\"\
    \ | cut -c1-3\n  # This will return the substring \"hel\"\n  #\n  # You can use\
    \ the following command to get the ascii value of a character:\n  # echo \"a\"\
    \ | od -An -tuC\n  # This will return the ascii value of the character \"a\"\n\
    \  #\n  # You can use the following command to get the character from an ascii\
    \ value:\n  # printf \\\\$(printf '%03o' 97)\n  # This will return the character\
    \ \"a\"\n  #\n  # You can use the following command to get the first character\
    \ of a string:\n  # echo \"hello\" | head -c1\n  # This will return the character\
    \ \"h\"\n  #\n  # You can use the following command to get the last character\
    \ of a string:\n  # echo \"hello\" | tail -c1\n  # This will return the character\
    \ \"o\"\n  #\n  # You can use the following command to get the first word of a\
    \ string:\n  # echo \"hello world\" | cut -d' ' -f1\n  # This will return the\
    \ word \"hello\"\n  #\n  # You can use the following command to get the last word\
    \ of a string:\n  # echo \"hello world\" | cut -d' ' -f2\n  # This will return\
    \ the word \"world\"\n  #\n  # You can use the following command to get the first\
    \ n characters of a string:\n  # echo \"hello\" | head -c3\n  # This will return\
    \ the string \"hel\"\n  #\n  # You can use the following command to get the last\
    \ n characters of a\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvonq12qc.sh: line 56: syntax error near unexpected token `}''

    /tmp/tmpvonq12qc.sh: line 56: `}''

    '
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local result=\"\"\n    for word in $1; do\n        local sorted_word=\"\"\
    \n        for (( i=0; i<${#word}; i++ )); do\n            sorted_word+=\"${word:$i:1}\"\
    \n        done\n        sorted_word=$(echo -e \"$sorted_word\" | sort -n)\n  \
    \      result+=\"$sorted_word\"\n        result+=\" \"\n    done\n    echo \"\
    $result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=$1\n  local word\n  local result=\"\"\n  for word in $str; do\n \
    \   result=\"$result $(echo $word | grep -o . | sort | tr -d '\\n')\"\n  done\n\
    \  echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a sorted_words\n    local -i i=0\n    local -i\
    \ j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n\
    \    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local\
    \ -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n\
    \    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i space=0\n\
    \    local -i length=0\n    local -i word_length=0\n    local -i word_index=0\n\
    \    local -i char_index=0\n    local -i char_ascii=0\n    local -i char_ascii_index=0\n\
    \    local -i char_ascii_index_prev=0\n    local -i char_ascii_index_next=0\n\
    \    local -i char_ascii_index_temp=0\n    local -i char_ascii_index_temp_prev=0\n\
    \    local -i char_ascii_index_temp_next=0\n    local -i char_ascii_index_temp_prev_prev=0\n\
    \    local -i char_ascii_index_temp_next_next=0\n    local -i char_ascii_index_temp_prev_prev_prev=0\n\
    \    local -i char_ascii_index_temp_next_next_next=0\n    local -i char_ascii_index_temp_prev_prev_prev_prev=0\n\
    \    local -i char_ascii_index_temp_next_next_next_next=0\n    local -i char_ascii_index_temp_prev_prev_prev_prev_prev=0\n\
    \    local -i char_ascii_index_temp_next_next_next_next_next=0\n    local -i char_ascii_index_temp\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local -a words\n  local -a sorted_words\n  local -i i=0\n  local -i j=0\n \
    \ local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n\
    \  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n\
    \  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n\
    \  local -i z=0\n  local -i space=0\n  local -i other=0\n  local -i index=0\n\
    \  local -i word_length=0\n  local -i word_count=0\n  local -i sorted_word_length=0\n\
    \  local -i sorted_word_count=0\n  local -i word_index=0\n  local -i sorted_word_index=0\n\
    \  local -i word_start=0\n  local -i word_end=0\n  local -i sorted_word_start=0\n\
    \  local -i sorted_word_end=0\n  local -i word_start_index=0\n  local -i word_end_index=0\n\
    \  local -i sorted_word_start_index=0\n  local -i sorted_word_end_index=0\n  local\
    \ -i word_start_index_found=0\n  local -i word_end_index_found=0\n  local -i sorted_word_start_index_found=0\n\
    \  local -i sorted_word_end_index_found=0\n  local -i word_start_index_found_count=0\n\
    \  local -i word_end_index_found_count=0\n  local -i sorted_word_start_index_found_count=0\n\
    \  local -i sorted_word_end_index_found_count=0\n  local -i word_start_index_found_index=0\n\
    \  local -i word_end_index_found_index=0\n  local -i sorted_word\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local string=$1\n  local -a words\n  local -a sorted_words\n  local -a result\n\
    \  local i\n  local j\n  local k\n  local word\n  local sorted_word\n  local result_string\n\
    \n  # Split string into words\n  IFS=' ' read -r -a words <<< \"$string\"\n\n\
    \  # Sort each word\n  for i in \"${!words[@]}\"; do\n    word=\"${words[$i]}\"\
    \n    sorted_word=\"\"\n    for ((j=0; j<${#word}; j++)); do\n      sorted_word+=\"\
    ${word:$j:1}\"\n    done\n    sorted_word=$(echo \"$sorted_word\" | grep -o .\
    \ | sort | tr -d '\\n')\n    sorted_words[$i]=\"$sorted_word\"\n  done\n\n  #\
    \ Build result string\n  for ((i=0; i<${#words[@]}; i++)); do\n    word=\"${words[$i]}\"\
    \n    sorted_word=\"${sorted_words[$i]}\"\n    for ((j=0; j<${#word}; j++)); do\n\
    \      for ((k=0; k<${#sorted_word}; k++)); do\n        if [[ \"${word:$j:1}\"\
    \ == \"${sorted_word:$k:1}\" ]]; then\n          result[$i]+=\"${sorted_word:$k:1}\"\
    \n          sorted_word=\"${sorted_word:0:$k}${sorted_word:$((k+1)):${#sorted_word}}\"\
    \n          break\n        fi\n      done\n    done\n  done\n\n  # Join result\n\
    \  result_string=\"\"\n  for ((i=0; i<${#result[@]}; i++)); do\n    result_string+=\"\
    ${result[$i]}\"\n    if [[ $i -lt $(( ${#result[@]} - 1 )) ]]; then\n      result_string+=\"\
    \ \"\n    fi\n  done\n\n  echo \"$result_string\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local word\n    local new_word\n    local new_str=\"\"\n\
    \    for word in $str; do\n        new_word=$(echo $word | grep -o . | sort |\
    \ tr -d '\\n')\n        new_str=\"$new_str $new_word\"\n    done\n    echo $new_str\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    # TODO: Write your code here\n    # Hint: You can use 'echo' and 'tr' to\
    \ convert a string to lowercase\n    #       and to remove all spaces.\n    #\
    \       For example:\n    #       echo \"Hello World\" | tr '[:upper:]' '[:lower:]'\
    \ | tr -d ' '\n    #       returns 'helloworld'\n    # Hint: You can use 'echo'\
    \ and 'tr' to sort characters in a string.\n    #       For example:\n    #  \
    \     echo \"hello\" | tr -d ' ' | tr -d '[:punct:]' | tr -d '[:digit:]' | tr\
    \ -d '[:space:]' | fold -w1 | sort | tr -d '\\n'\n    #       returns 'ehllo'\n\
    \    # Hint: You can use 'echo' and 'tr' to convert a string to uppercase.\n \
    \   #       For example:\n    #       echo \"hello\" | tr '[:lower:]' '[:upper:]'\n\
    \    #       returns 'HELLO'\n    # Hint: You can use 'echo' and 'tr' to convert\
    \ a string to lowercase.\n    #       For example:\n    #       echo \"HELLO\"\
    \ | tr '[:upper:]' '[:lower:]'\n    #       returns 'hello'\n    # Hint: You can\
    \ use 'echo' and 'tr' to convert a string to uppercase.\n    #       For example:\n\
    \    #       echo \"hello\" | tr '[:lower:]' '[:upper:]'\n    #       returns\
    \ 'HELLO'\n    # Hint: You can use 'echo' and 'tr' to convert a string to lowercase.\n\
    \    #       For example:\n    #       echo \"HELLO\" | tr '[:upper:]' '[:lower:]'\n\
    \    #       returns 'hello'\n    # Hint: You can use 'echo' and 'tr' to convert\
    \ a string to uppercase.\n    #       For example:\n    #       echo \"hello\"\
    \ | tr '[:lower:]' '[:upper:]'\n    #       returns 'HELLO'\n    # Hint: You can\
    \ use 'echo' and 'tr' to convert a string to\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmafhmk2r.sh: line 45: syntax error near unexpected token `}''

    /tmp/tmpmafhmk2r.sh: line 45: `}''

    '
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort | tr -d '\\n')\"\
    \n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local -a words\n  local -a sorted_words\n  local -i i=0\n  local -i j=0\n \
    \ local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n\
    \  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n\
    \  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n\
    \  local -i z=0\n  local -i space=0\n  local -i length=0\n  local -i word_length=0\n\
    \  local -i word_count=0\n  local -i sorted_word_length=0\n  local -i sorted_word_count=0\n\
    \  local -i sorted_word_index=0\n  local -i sorted_word_index_length=0\n  local\
    \ -i sorted_word_index_count=0\n  local -i sorted_word_index_index=0\n  local\
    \ -i sorted_word_index_index_length=0\n  local -i sorted_word_index_index_count=0\n\
    \  local -i sorted_word_index_index_index=0\n  local -i sorted_word_index_index_index_length=0\n\
    \  local -i sorted_word_index_index_index_count=0\n  local -i sorted_word_index_index_index_index=0\n\
    \  local -i sorted_word_index_index_index_index_length=0\n  local -i sorted_word_index_index_index_index_count=0\n\
    \  local -i sorted_word_index_index_index_index_index=0\n  local -i sorted_word_index_index_index_index_index_length=0\n\
    \  local -i sorted_word_index_index_index_index_index_count=0\n  local -i sorted_word_index_index_index_index_index_index=0\n\
    \  local -i sorted_word_index_index\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words=($(echo $1 | tr ' ' '\\n'))\n    local -a sorted_words=()\n\
    \    for word in \"${words[@]}\"; do\n        sorted_words+=(\"$(echo $word |\
    \ grep -o . | sort | tr -d '\\n')\")\n    done\n    echo \"${sorted_words[@]}\"\
    \ | tr ' ' '\\n' | tr '\\n' ' '\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  echo \"$1\" | tr ' ' '\\n' | while read -r word; do\n    echo -n \"$(echo \"\
    $word\" | fold -w1 | sort | tr -d '\\n') \"\n  done\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local word\n    local result\n    for word in $string;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort -u | tr -d '\\\
    n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local string=$1\n  local words=($string)\n  local result=\"\"\n  for word in\
    \ \"${words[@]}\"; do\n    local chars=($(echo $word | grep -o .))\n    local\
    \ sorted=($(echo ${chars[@]} | tr ' ' '\\n' | sort | tr '\\n' ' '))\n    result=\"\
    $result${sorted[@]}\"\n  done\n  echo $result\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=\"$1\"\n  local result=\"\"\n  local word=\"\"\n  local char=\"\"\
    \n  local i=0\n  local j=0\n  local k=0\n  local len=0\n  local len2=0\n  local\
    \ len3=0\n  local char_array=()\n  local word_array=()\n  local str_array=()\n\
    \  local word_array_sorted=()\n  local str_array_sorted=()\n  local char_array_sorted=()\n\
    \  local char_array_sorted_str=\"\"\n  local word_array_sorted_str=\"\"\n  local\
    \ str_array_sorted_str=\"\"\n  local char_array_sorted_str_array=()\n  local word_array_sorted_str_array=()\n\
    \  local str_array_sorted_str_array=()\n  local char_array_sorted_str_array_len=0\n\
    \  local word_array_sorted_str_array_len=0\n  local str_array_sorted_str_array_len=0\n\
    \  local char_array_sorted_str_array_len2=0\n  local word_array_sorted_str_array_len2=0\n\
    \  local str_array_sorted_str_array_len2=0\n  local char_array_sorted_str_array_len3=0\n\
    \  local word_array_sorted_str_array_len3=0\n  local str_array_sorted_str_array_len3=0\n\
    \  local char_array_sorted_str_array_len4=0\n  local word_array_sorted_str_array_len4=0\n\
    \  local str_array_sorted_str_array_len4=0\n  local char_array_sorted_str_array_len5=0\n\
    \  local word_array_sorted_str_array_len5=0\n  local str_array_sorted_str_array_len5=0\n\
    \  local char_array_sorted_str_array_len6=0\n  local word_array_sorted_str_array_len6=0\n\
    \  local str_array_sorted_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    echo \"$1\" | tr ' ' '\\n' | while read word; do\n        echo \"$word\"\
    \ | grep -o . | sort | tr -d '\\n'\n        echo -n ' '\n    done\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=\"$1\"\n    local new_string=\"\"\n    local word=\"\"\n   \
    \ local char=\"\"\n    local -a chars\n    local -a words\n\n    for word in $string;\
    \ do\n        chars=()\n        for char in $(echo \"$word\" | fold -w1); do\n\
    \            chars+=(\"$char\")\n        done\n        chars=($(echo \"${chars[@]}\"\
    \ | tr ' ' '\\n' | sort | tr '\\n' ' '))\n        word=\"\"\n        for char\
    \ in \"${chars[@]}\"; do\n            word=\"$word$char\"\n        done\n    \
    \    words+=(\"$word\")\n    done\n    new_string=\"\"\n    for word in \"${words[@]}\"\
    ; do\n        new_string=\"$new_string $word\"\n    done\n    echo \"$new_string\"\
    \ | sed 's/^ *//'\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=\"$1\"\n  local word\n  local result=\"\"\n  for word in $str; do\n\
    \    result=\"$result $(echo $word | grep -o . | sort | tr -d '\\n')\"\n  done\n\
    \  echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=\"$1\"\n  local new_str=\"\"\n  local word=\"\"\n  local char=\"\"\
    \n  local ascii_val=\"\"\n  local ascii_vals=\"\"\n  local sorted_ascii_vals=\"\
    \"\n  local sorted_chars=\"\"\n  local sorted_word=\"\"\n  local sorted_str=\"\
    \"\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local space=0\n  local exclamation=0\n  local question=0\n  local period=0\n\
    \  local comma=0\n  local colon=0\n  local semicolon=0\n  local apostrophe=0\n\
    \  local dash=0\n  local underscore=0\n  local at=0\n  local hash=0\n  local dollar=0\n\
    \  local percent=0\n  local caret=0\n  local ampersand=0\n  local asterisk=0\n\
    \  local open_paren=0\n  local close_paren=0\n  local open_bracket=0\n  local\
    \ close_bracket=0\n  local open_brace=0\n  local close_brace=0\n  local less_than=0\n\
    \  local greater_than=0\n  local equal=0\n  local plus=0\n  local backslash=0\n\
    \  local pipe=0\n  local tilde=0\n  local quote=0\n  local backtick=0\n  local\
    \ newline=0\n  local tab=0\n  local backspace=0\n  local formfeed=0\n  local carriage_return=0\n\
    \  local vertical_tab=0\n  local null=0\n  local other=0\n  local other_chars=\"\
    \"\n  local other_ascii_vals=\"\"\n  local other_sorted_ascii_vals=\"\"\n  local\
    \ other_sorted_chars=\"\"\n  local other_sorted\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    # TODO: Write your code here\n    # Hint: You can use the following command\
    \ to sort a string:\n    # echo \"hello\" | fold -w1 | sort | tr -d '\\n'\n  \
    \  # This will output 'ehllo'\n    #\n    # Hint: You can use the following command\
    \ to split a string into words:\n    # echo \"hello world\" | tr ' ' '\\n'\n \
    \   # This will output:\n    # hello\n    # world\n    #\n    # Hint: You can\
    \ use the following command to join lines with a character:\n    # echo -e \"\
    hello\\nworld\" | tr '\\n' ' '\n    # This will output:\n    # hello world\n \
    \   #\n    # Hint: You can use the following command to remove all newline characters:\n\
    \    # echo -e \"hello\\nworld\" | tr -d '\\n'\n    # This will output:\n    #\
    \ helloworld\n    #\n    # Hint: You can use the following command to remove all\
    \ spaces:\n    # echo \"hello world\" | tr -d ' '\n    # This will output:\n \
    \   # helloworld\n    #\n    # Hint: You can use the following command to remove\
    \ all spaces and newline characters:\n    # echo -e \"hello\\nworld\" | tr -d\
    \ ' \\n'\n    # This will output:\n    # helloworld\n    #\n    # Hint: You can\
    \ use the following command to remove all characters except spaces:\n    # echo\
    \ \"hello world\" | tr -d -c ' '\n    # This will output:\n    # ' '\n    #\n\
    \    # Hint: You can use the following command to remove all characters except\
    \ newline characters:\n    # echo -e \"hello\\nworld\" | tr -d -c '\\n'\n    #\
    \ This will output:\n    # '\\n'\n    #\n    # Hint: You can use the following\
    \ command to remove all characters except spaces and newline characters:\n   \
    \ # echo -e \"hello\\nworld\" | tr -d -c ' \\n'\n    # This will output:\n   \
    \ # ' \\n'\n    #\n    # Hint: You can use the following command\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5cygn5d_.sh: line 61: syntax error near unexpected token `}''

    /tmp/tmp5cygn5d_.sh: line 61: `}''

    '
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    # write your code here\n    echo $1\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  # Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgipznj7t.sh: line 184: syntax error near unexpected token `}''

    /tmp/tmpgipznj7t.sh: line 184: `}''

    '
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local result=\"\"\n    for word in $1; do\n        local sorted_word=\"\"\
    \n        for ((i=0; i<${#word}; i++)); do\n            sorted_word+=\"${word:$i:1}\"\
    \n        done\n        sorted_word=$(echo -e \"$sorted_word\" | sort -n)\n  \
    \      result+=\"$sorted_word \"\n    done\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  # TODO: Write your code here\n  # Use echo to print result\n  echo \"\"\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=\"$1\"\n  local word\n  local result=\"\"\n  local IFS=\" \"\n  for\
    \ word in $str; do\n    result=\"$result $(echo $word | grep -o . | sort -n |\
    \ tr -d '\\n')\"\n  done\n  echo $result\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  # TODO: Write your code here\n  echo \"$1\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  # Write your code here\n  # You can use the following command to sort a string:\n\
    \  # echo \"hello\" | grep -o . | sort | tr -d '\\n'\n  #\n  # You can use the\
    \ following command to sort a string in reverse order:\n  # echo \"hello\" | grep\
    \ -o . | sort -r | tr -d '\\n'\n  #\n  # You can use the following command to\
    \ replace a word in a string:\n  # echo \"hello world\" | sed -e \"s/hello/hi/\"\
    \n  #\n  # You can use the following command to get the length of a string:\n\
    \  # echo \"hello\" | wc -c\n  #\n  # You can use the following command to get\
    \ the length of a string:\n  # echo \"hello\" | wc -c\n  #\n  # You can use the\
    \ following command to get the length of a string:\n  # echo \"hello\" | wc -c\n\
    \  #\n  # You can use the following command to get the length of a string:\n \
    \ # echo \"hello\" | wc -c\n  #\n  # You can use the following command to get\
    \ the length of a string:\n  # echo \"hello\" | wc -c\n  #\n  # You can use the\
    \ following command to get the length of a string:\n  # echo \"hello\" | wc -c\n\
    \  #\n  # You can use the following command to get the length of a string:\n \
    \ # echo \"hello\" | wc -c\n  #\n  # You can use the following command to get\
    \ the length of a string:\n  # echo \"hello\" | wc -c\n  #\n  # You can use the\
    \ following command to get the length of a string:\n  # echo \"hello\" | wc -c\n\
    \  #\n  # You can use the following command to get the length of a string:\n \
    \ # echo \"hello\" | wc -c\n  #\n  # You can use the following command to get\
    \ the length of a string:\n  # echo \"hello\" | wc -c\n  #\n  # You can use the\
    \ following command to get the length of a string:\n  # echo \"hello\" | wc -c\n\
    \ \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnz6tf0ac.sh: line 60: syntax error near unexpected token `}''

    /tmp/tmpnz6tf0ac.sh: line 60: `}''

    '
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local word\n    local result=''\n    for word in $string;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort | tr -d '\\n')\"\
    \n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    echo \"$1\" | tr ' ' '\\n' | while read word; do\n        echo -n \"$(echo\
    \ \"$word\" | grep -o . | sort | tr -d '\\n')\"\n    done\n    echo\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a sorted_words\n    local -i i\n    local -i j\n\
    \    local -i k\n    local -i len\n    local -i len_sorted\n    local -i len_word\n\
    \    local -i len_sorted_word\n    local -i len_spaces\n    local -i len_sorted_spaces\n\
    \    local -i len_word_sorted\n    local -i len_spaces_sorted\n    local -i len_word_sorted_spaces\n\
    \    local -i len_spaces_sorted_word\n    local -i len_word_sorted_spaces_sorted\n\
    \    local -i len_spaces_sorted_word_sorted\n    local -i len_word_sorted_spaces_sorted_spaces\n\
    \    local -i len_spaces_sorted_word_sorted_spaces\n    local -i len_word_sorted_spaces_sorted_spaces_sorted\n\
    \    local -i len_spaces_sorted_word_sorted_spaces_sorted\n    local -i len_word_sorted_spaces_sorted_spaces_sorted_spaces\n\
    \    local -i len_spaces_sorted_word_sorted_spaces_sorted_spaces\n    local -i\
    \ len_word_sorted_spaces_sorted_spaces_sorted_spaces_sorted\n    local -i len_spaces_sorted_word_sorted_spaces_sorted_spaces_sorted\n\
    \    local -i len_word_sorted_spaces_sorted_spaces_sorted_spaces_sorted_spaces\n\
    \    local -i len_spaces_sorted_word_sorted_spaces_sorted_spaces_sorted_spaces\n\
    \    local -i len_word_sorted_spaces_sorted_spaces_sorted_spaces_sorted_spaces_sorted\n\
    \    local -i len_spaces_sorted_word_sorted_spaces_sorted_spaces_sorted_spaces_sorted\n\
    \    local -i len_word_s\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local string=$1\n  local word\n  local result=\"\"\n  for word in $string;\
    \ do\n    result+=\"$(echo $word | grep -o . | sort -u | tr -d '\\n')\"\n  done\n\
    \  echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local new_string=\"\"\n    for word in $string; do\n\
    \        new_string+=\"$(echo $word | grep -o . | sort -n | tr -d '\\n') \"\n\
    \    done\n    echo \"$new_string\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local -a words\n  local -a new_words\n  local -a new_sentence\n  local -i i=0\n\
    \  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n\
    \  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n\
    \  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n\
    \  local -i y=0\n  local -i z=0\n  local -i space=0\n  local -i length=0\n  local\
    \ -i word_length=0\n  local -i new_word_length=0\n  local -i new_sentence_length=0\n\
    \  local -i new_sentence_index=0\n  local -i word_index=0\n  local -i new_word_index=0\n\
    \  local -i word_index_end=0\n  local -i word_index_start=0\n  local -i word_index_start_prev=0\n\
    \  local -i word_index_end_prev=0\n  local -i word_index_start_next=0\n  local\
    \ -i word_index_end_next=0\n  local -i word_index_start_next_next=0\n  local -i\
    \ word_index_end_next_next=0\n  local -i word_index_start_next_next_next=0\n \
    \ local -i word_index_end_next_next_next=0\n  local -i word_index_start_next_next_next_next=0\n\
    \  local -i word_index_end_next_next_next_next=0\n  local -i word_index_start_next_next_next_next_next=0\n\
    \  local -i word_index_end_next_next_next_next_next=0\n  local -i word_index_start_next_next_next_next_next_next=0\n\
    \  local\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local word\n    local sorted_word\n    local result=\"\
    \"\n    for word in $string; do\n        sorted_word=$(echo $word | grep -o .\
    \ | sort | tr -d '\\n')\n        result=\"$result $sorted_word\"\n    done\n \
    \   echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=\"$1\"\n  local result=\"\"\n  local word=\"\"\n  local char=\"\"\
    \n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local A=0\n  local B=0\n  local C=0\n  local D=0\n  local E=0\n  local F=0\n\
    \  local G=0\n  local H=0\n  local I=0\n  local J=0\n  local K=0\n  local L=0\n\
    \  local M=0\n  local N=0\n  local O=0\n  local P=0\n  local Q=0\n  local R=0\n\
    \  local S=0\n  local T=0\n  local U=0\n  local V=0\n  local W=0\n  local X=0\n\
    \  local Y=0\n  local Z=0\n  local space=0\n  local exclamation=0\n  local question=0\n\
    \  local period=0\n  local comma=0\n  local colon=0\n  local semicolon=0\n  local\
    \ apostrophe=0\n  local hyphen=0\n  local dash=0\n  local underscore=0\n  local\
    \ plus=0\n  local equal=0\n  local left_parenthesis=0\n  local right_parenthesis=0\n\
    \  local left_bracket=0\n  local right_bracket=0\n  local left_brace=0\n  local\
    \ right_brace=0\n  local left_angle=0\n  local right_angle=0\n  local ampersand=0\n\
    \  local at=0\n  local backslash=0\n  local bar=0\n  local caret=0\n  local dollar=0\n\
    \  local percent=0\n  local pound=0\n  local tilde=0\n  local asterisk=0\n  local\
    \ backtick=0\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  # Write your code here\n  # You can use anti_shuffle_word function\n  # You\
    \ can use anti_shuffle_word function\n  # You can use anti_shuffle_word function\n\
    \  # You can use anti_shuffle_word function\n  # You can use anti_shuffle_word\
    \ function\n  # You can use anti_shuffle_word function\n  # You can use anti_shuffle_word\
    \ function\n  # You can use anti_shuffle_word function\n  # You can use anti_shuffle_word\
    \ function\n  # You can use anti_shuffle_word function\n  # You can use anti_shuffle_word\
    \ function\n  # You can use anti_shuffle_word function\n  # You can use anti_shuffle_word\
    \ function\n  # You can use anti_shuffle_word function\n  # You can use anti_shuffle_word\
    \ function\n  # You can use anti_shuffle_word function\n  # You can use anti_shuffle_word\
    \ function\n  # You can use anti_shuffle_word function\n  # You can use anti_shuffle_word\
    \ function\n  # You can use anti_shuffle_word function\n  # You can use anti_shuffle_word\
    \ function\n  # You can use anti_shuffle_word function\n  # You can use anti_shuffle_word\
    \ function\n  # You can use anti_shuffle_word function\n  # You can use anti_shuffle_word\
    \ function\n  # You can use anti_shuffle_word function\n  # You can use anti_shuffle_word\
    \ function\n  # You can use anti_shuffle_word function\n  # You can use anti_shuffle_word\
    \ function\n  # You can use anti_shuffle_word function\n  # You can use anti_shuffle_word\
    \ function\n  # You can use anti_shuffle_word function\n  # You can use anti_shuffle_word\
    \ function\n  # You can use anti_shuffle_word function\n  # You can use anti_shuffle_word\
    \ function\n  # You can use anti_shuffle_word function\n  # You can use anti_shuffle_word\
    \ function\n  # You can use anti_shuffle_word function\n  # You can use anti_shuffle_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbepimwi2.sh: line 54: syntax error near unexpected token `}''

    /tmp/tmpbepimwi2.sh: line 54: `}''

    '
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=\"$1\"\n  local word\n  local result=\"\"\n  for word in $str; do\n\
    \    result=\"$result $(echo \"$word\" | grep -o . | sort -u | tr -d '\\n')\"\n\
    \  done\n  echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local new_string=\"\"\n    local word=\"\"\n    local\
    \ char=\"\"\n    local -a char_array\n    local -a word_array\n    local -a new_word_array\n\
    \    local -a new_string_array\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n\
    \    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local\
    \ -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n\
    \    local -i y=0\n    local -i z=0\n    local -i length=0\n    local -i length_new_string=0\n\
    \    local -i length_word=0\n    local -i length_char_array=0\n    local -i length_word_array=0\n\
    \    local -i length_new_word_array=0\n    local -i length_new_string_array=0\n\
    \    local -i ascii_value=0\n    local -i ascii_value_char=0\n    local -i ascii_value_char_array=0\n\
    \    local -i ascii_value_word_array=0\n    local -i ascii_value_new_word_array=0\n\
    \    local -i ascii_value_new_string_array=0\n    local -i ascii_value_new_string=0\n\
    \    local -i ascii_value_word=0\n    local -i ascii_value_char_array_length=0\n\
    \    local -i ascii_value_word_array_length=0\n    local -i ascii_value_new_word_array_length=0\n\
    \    local -i ascii_value_new_string_array_length=0\n    local -i ascii_value_new_string_length=0\n\
    \    local -i ascii_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    echo \"$1\" | tr ' ' '\\n' | while read word; do\n        echo -n \"$(echo\
    \ \"$word\" | grep -o . | sort | tr -d '\\n')\"\n    done\n    echo\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local\
    \ char=\"\"\n    local char_ascii=\"\"\n    local char_ascii_list=\"\"\n    local\
    \ char_list=\"\"\n    local char_list_sorted=\"\"\n    local char_list_sorted_joined=\"\
    \"\n    local char_list_sorted_joined_escaped=\"\"\n    local char_list_sorted_joined_escaped_replaced=\"\
    \"\n    local char_list_sorted_joined_escaped_replaced_replaced=\"\"\n    local\
    \ char_list_sorted_joined_escaped_replaced_replaced_replaced=\"\"\n    local char_list_sorted_joined_escaped_replaced_replaced_replaced_replaced=\"\
    \"\n    local char_list_sorted_joined_escaped_replaced_replaced_replaced_replaced_replaced=\"\
    \"\n    local char_list_sorted_joined_escaped_replaced_replaced_replaced_replaced_replaced_replaced=\"\
    \"\n    local char_list_sorted_joined_escaped_replaced_replaced_replaced_replaced_replaced_replaced_replaced=\"\
    \"\n    local char_list_sorted_joined_escaped_replaced_replaced_replaced_replaced_replaced_replaced_replaced_replaced=\"\
    \"\n    local char_list_sorted_joined_escaped_replaced_replaced_replaced_replaced_replaced_replaced_replaced_replaced_replaced=\"\
    \"\n    local char_list_sorted_joined_escaped_replaced_replaced_replaced_replaced_replaced_replaced_replaced_replaced_replaced_replaced=\"\
    \"\n    local char_list_sorted_joined_escaped_replaced_replaced_replaced_replaced_replaced_replaced_replaced_replaced_replaced_replaced_replaced=\"\
    \"\n    local char_list_sorted_joined_escaped_replaced_replaced_replaced_replaced_replaced_replaced_replaced_replaced_replaced_replaced_replaced_replaced=\"\
    \"\n    local char_list_sorted_joined\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    echo \"$1\" | tr ' ' '\\n' | while read word; do\n        echo -n \"$(echo\
    \ \"$word\" | grep -o . | sort -u | tr -d '\\n')\"\n    done\n    echo\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local new_string=\"\"\n    local word=\"\"\n    local\
    \ sorted_word=\"\"\n    local char=\"\"\n    local sorted_char=\"\"\n    local\
    \ char_ascii=\"\"\n    local sorted_char_ascii=\"\"\n    local sorted_char_ascii_array=()\n\
    \    local sorted_char_array=()\n    local sorted_word_array=()\n    local sorted_string=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n\
    \    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n \
    \   local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n  \
    \  local x=0\n    local y=0\n    local z=0\n    local space=\" \"\n    local space_ascii=\"\
    32\"\n    local space_ascii_array=()\n    local space_array=()\n    local space_index_array=()\n\
    \    local space_index=0\n    local space_index_array_length=0\n    local space_array_length=0\n\
    \    local sorted_string_length=0\n    local sorted_string_index=0\n    local\
    \ sorted_string_index_array=()\n    local sorted_string_index_array_length=0\n\
    \    local sorted_string_index_array_index=0\n    local sorted_string_index_array_index_length=0\n\
    \    local sorted_string_index_array_index_length_array=()\n    local sorted_string_index_array_index_length_array_length=0\n\
    \    local sorted_string_index_array_index_length_array_index=0\n    local sorted_string_index_array_index_length_array_index_length=0\n\
    \    local sorted_string_index_array_index_length_array_index_length_array=()\n\
    \    local sorted_string_index_array_index_length_array_index_length_array_length=0\n\
    \    local sorted_string_index_array_index_length_array_index_length_array_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  # TODO: Write your code here\n  # Example:\n  # echo $1\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfwc7wfc4.sh: line 17: syntax error near unexpected token `}''

    /tmp/tmpfwc7wfc4.sh: line 17: `}''

    '
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a result\n    local -a chars\n    local word\n\
    \    local char\n    local i\n    local j\n    local k\n    local l\n    local\
    \ result_str\n\n    # split the string into words\n    IFS=' ' read -r -a words\
    \ <<< \"$1\"\n\n    # for each word\n    for ((i=0; i<${#words[@]}; i++)); do\n\
    \        word=${words[$i]}\n        # split the word into characters\n       \
    \ IFS= read -r -a chars <<< \"$word\"\n        # sort the characters\n       \
    \ for ((j=0; j<${#chars[@]}; j++)); do\n            for ((k=j+1; k<${#chars[@]};\
    \ k++)); do\n                if [[ \"${chars[$j]}\" > \"${chars[$k]}\" ]]; then\n\
    \                    char=${chars[$j]}\n                    chars[$j]=${chars[$k]}\n\
    \                    chars[$k]=$char\n                fi\n            done\n \
    \       done\n        # join the characters\n        word=''\n        for ((j=0;\
    \ j<${#chars[@]}; j++)); do\n            word+=\"${chars[$j]}\"\n        done\n\
    \        # add the word to the result\n        result[$i]=$word\n    done\n\n\
    \    # join the words\n    result_str=''\n    for ((i=0; i<${#result[@]}; i++));\
    \ do\n        result_str+=\"${result[$i]}\"\n        if [[ $i -lt $((${#result[@]}\
    \ - 1)) ]]; then\n            result_str+=' '\n        fi\n    done\n\n    echo\
    \ \"$result_str\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=\"$1\"\n    local word\n    local result\n    for word in $str;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort | tr -d '\\n')\"\
    \n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local -a words\n    local -a new_words\n    local -a new_str\n\
    \    local i=0\n    local j=0\n    local k=0\n    local word\n    local new_word\n\
    \    local char\n    local -i ascii_val\n    local -i ascii_val_min\n    local\
    \ -i ascii_val_max\n    local -i ascii_val_min_index\n    local -i ascii_val_max_index\n\
    \    local -i str_len\n    local -i word_len\n    local -i new_word_len\n    local\
    \ -i new_str_len\n    local -i new_str_index\n    local -i new_str_index_max\n\
    \    local -i new_str_index_min\n    local -i new_str_index_min_index\n    local\
    \ -i new_str_index_max_index\n    local -i new_str_index_min_index_prev\n    local\
    \ -i new_str_index_max_index_prev\n    local -i new_str_index_min_index_next\n\
    \    local -i new_str_index_max_index_next\n    local -i new_str_index_min_index_prev_prev\n\
    \    local -i new_str_index_max_index_prev_prev\n    local -i new_str_index_min_index_next_next\n\
    \    local -i new_str_index_max_index_next_next\n    local -i new_str_index_min_index_prev_prev_prev\n\
    \    local -i new_str_index_max_index_prev_prev_prev\n    local -i new_str_index_min_index_next_next_next\n\
    \    local -i new_str_index_max_index_next_next_next\n    local -i new_str_index_min_index_prev_prev_prev_prev\n\
    \    local -i new_str_index_max_index_prev_prev_prev_prev\n    local -i new_str_index_min_index_next_next_next_next\n\
    \    local -i new_str_index\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=\"$1\"\n  local result=\"\"\n  local word=\"\"\n  local char=\"\"\
    \n  local char_ascii=\"\"\n  local char_ascii_min=\"\"\n  local char_min=\"\"\n\
    \  local char_min_index=\"\"\n  local char_min_index_prev=\"\"\n  local char_min_index_prev_prev=\"\
    \"\n  local char_min_index_prev_prev_prev=\"\"\n  local char_min_index_prev_prev_prev_prev=\"\
    \"\n  local char_min_index_prev_prev_prev_prev_prev=\"\"\n  local char_min_index_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local char_min_index_prev_prev_prev_prev_prev_prev_prev=\"\"\n  local char_min_index_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\n\
    \  local char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\
    \n  local char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local word\n    local result=\"\"\n    for word in $string;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort -n | tr -d '\\\
    n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local string=$1\n  local word\n  local result=\"\"\n  for word in $string;\
    \ do\n    result=\"$result $(echo $word | grep -o . | sort -n | tr -d '\\n')\"\
    \n  done\n  echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  # TODO: Write your code here\n  # Use echo to print result\n  echo \"\"\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local\
    \ char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n  \
    \  local len2=0\n    local len3=0\n    local space_count=0\n    local space_index=0\n\
    \    local space_index_array=()\n    local space_index_array_len=0\n    local\
    \ space_index_array_index=0\n    local space_index_array_index2=0\n    local space_index_array_index3=0\n\
    \    local space_index_array_index4=0\n    local space_index_array_index5=0\n\
    \    local space_index_array_index6=0\n    local space_index_array_index7=0\n\
    \    local space_index_array_index8=0\n    local space_index_array_index9=0\n\
    \    local space_index_array_index10=0\n    local space_index_array_index11=0\n\
    \    local space_index_array_index12=0\n    local space_index_array_index13=0\n\
    \    local space_index_array_index14=0\n    local space_index_array_index15=0\n\
    \    local space_index_array_index16=0\n    local space_index_array_index17=0\n\
    \    local space_index_array_index18=0\n    local space_index_array_index19=0\n\
    \    local space_index_array_index20=0\n    local space_index_array_index21=0\n\
    \    local space_index_array_index22=0\n    local space_index_array_index23=0\n\
    \    local space_index_array_index24=0\n    local space_index_array_index25=0\n\
    \    local space_index_array_index26=0\n    local space_index_array_index27=0\n\
    \    local space_index_array_index28=0\n    local space_index_array_index29=0\n\
    \    local space_index_array_index30=0\n    local space_index_array_index31=0\n\
    \    local space_index_array_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=\"$1\"\n    local word\n    local new_word\n    local new_str\n\
    \    for word in $str; do\n        new_word=$(echo \"$word\" | grep -o . | sort\
    \ | tr -d '\\n')\n        new_str=\"$new_str $new_word\"\n    done\n    echo \"\
    $new_str\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=\"$1\"\n  local word\n  local result=\"\"\n  local i=0\n  local j=0\n\
    \  local len=${#str}\n  local len_word=0\n  local char\n  local char_arr\n  local\
    \ char_arr_len=0\n  local char_arr_index=0\n  local char_arr_index_2=0\n  local\
    \ char_arr_index_3=0\n  local char_arr_index_4=0\n  local char_arr_index_5=0\n\
    \  local char_arr_index_6=0\n  local char_arr_index_7=0\n  local char_arr_index_8=0\n\
    \  local char_arr_index_9=0\n  local char_arr_index_10=0\n  local char_arr_index_11=0\n\
    \  local char_arr_index_12=0\n  local char_arr_index_13=0\n  local char_arr_index_14=0\n\
    \  local char_arr_index_15=0\n  local char_arr_index_16=0\n  local char_arr_index_17=0\n\
    \  local char_arr_index_18=0\n  local char_arr_index_19=0\n  local char_arr_index_20=0\n\
    \  local char_arr_index_21=0\n  local char_arr_index_22=0\n  local char_arr_index_23=0\n\
    \  local char_arr_index_24=0\n  local char_arr_index_25=0\n  local char_arr_index_26=0\n\
    \  local char_arr_index_27=0\n  local char_arr_index_28=0\n  local char_arr_index_29=0\n\
    \  local char_arr_index_30=0\n  local char_arr_index_31=0\n  local char_arr_index_32=0\n\
    \  local char_arr_index_33=0\n  local char_arr_index_34=0\n  local char_arr_index_35=0\n\
    \  local char_arr_index_36=0\n  local char_arr_index_37=0\n  local char\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a sorted_words\n    local -i i=0\n    local -i\
    \ j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n\
    \    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local\
    \ -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n\
    \    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i space=0\n\
    \    local -i exclamation=0\n    local -i question=0\n    local -i comma=0\n \
    \   local -i period=0\n    local -i colon=0\n    local -i semicolon=0\n    local\
    \ -i dash=0\n    local -i apostrophe=0\n    local -i quote=0\n    local -i left_paren=0\n\
    \    local -i right_paren=0\n    local -i left_bracket=0\n    local -i right_bracket=0\n\
    \    local -i left_brace=0\n    local -i right_brace=0\n    local -i at=0\n  \
    \  local -i hash=0\n    local -i dollar=0\n    local -i percent=0\n    local -i\
    \ caret=0\n    local -i ampersand=0\n    local -i asterisk=0\n    local -i plus=0\n\
    \    local -i equal=0\n    local -i underscore=0\n    local -i backslash=0\n \
    \   local -i pipe=0\n    local -i tilde=0\n    local -i less_than=0\n    local\
    \ -i greater_than=0\n    local -i backtick=0\n    local -i single_quote=0\n  \
    \  local -i double_quote=0\n    local -i backspace=0\n    local -i tab=0\n   \
    \ local -i newline=0\n    local -i return=0\n    local -i space_count=0\n    local\
    \ -\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  # Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgipznj7t.sh: line 184: syntax error near unexpected token `}''

    /tmp/tmpgipznj7t.sh: line 184: `}''

    '
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a sorted_words\n    local -a sorted_string\n \
    \   local -i i=0\n\n    words=($(echo $1 | tr ' ' '\\n'))\n    for word in \"\
    ${words[@]}\"; do\n        sorted_words[$i]=$(echo $word | grep -o . | sort |\
    \ tr -d '\\n')\n        ((i++))\n    done\n    sorted_string=($(echo ${words[@]}\
    \ | tr ' ' '\\n'))\n    for ((i=0; i<${#sorted_string[@]}; i++)); do\n       \
    \ if [[ ${sorted_string[$i]} == ${words[$i]} ]]; then\n            sorted_string[$i]=${sorted_words[$i]}\n\
    \        fi\n    done\n    echo ${sorted_string[@]}\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local word\n    local result=''\n    for word in $string;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort | tr -d '\\n')\"\
    \n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    echo \"$1\" | tr ' ' '\\n' | while read word; do\n        echo -n \"$(echo\
    \ \"$word\" | grep -o . | sort | tr -d '\\n')\"\n    done\n    echo\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local words=($string)\n    local result=\"\"\n    for\
    \ word in \"${words[@]}\"; do\n        local chars=($(echo $word | grep -o .))\n\
    \        local sorted=($(printf \"%s\\n\" \"${chars[@]}\" | sort))\n        local\
    \ sorted_word=$(printf \"%s\" \"${sorted[@]}\")\n        result+=$sorted_word\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local result=\"\"\n    for word in $string; do\n   \
    \     local sorted_word=$(echo $word | grep -o . | sort | tr -d '\\n')\n     \
    \   result=\"$result$sorted_word \"\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    # TODO: Write your code here\n    # Hint: You can use the following command\
    \ to sort a string:\n    # sorted_string=$(echo \"$1\" | grep -o . | sort | tr\
    \ -d '\\n')\n    # Hint: You can use the following command to replace a word with\
    \ another word:\n    # echo \"Hello World\" | sed -e 's/World/Universe/'\n   \
    \ # Hint: You can use the following command to replace a word with another word:\n\
    \    # echo \"Hello World\" | sed -e 's/World/Universe/'\n    # Hint: You can\
    \ use the following command to replace a word with another word:\n    # echo \"\
    Hello World\" | sed -e 's/World/Universe/'\n    # Hint: You can use the following\
    \ command to replace a word with another word:\n    # echo \"Hello World\" | sed\
    \ -e 's/World/Universe/'\n    # Hint: You can use the following command to replace\
    \ a word with another word:\n    # echo \"Hello World\" | sed -e 's/World/Universe/'\n\
    \    # Hint: You can use the following command to replace a word with another\
    \ word:\n    # echo \"Hello World\" | sed -e 's/World/Universe/'\n    # Hint:\
    \ You can use the following command to replace a word with another word:\n   \
    \ # echo \"Hello World\" | sed -e 's/World/Universe/'\n    # Hint: You can use\
    \ the following command to replace a word with another word:\n    # echo \"Hello\
    \ World\" | sed -e 's/World/Universe/'\n    # Hint: You can use the following\
    \ command to replace a word with another word:\n    # echo \"Hello World\" | sed\
    \ -e 's/World/Universe/'\n    # Hint: You can use the following command to replace\
    \ a word with another word:\n    # echo \"Hello World\" | sed -e 's/World/Universe/'\n\
    \    # Hint: You can use the following command to replace a word with another\
    \ word:\n    # echo \"Hello World\" | sed -e 's/World/Universe/'\n    # Hint:\
    \ You\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpofqf38vy.sh: line 40: syntax error near unexpected token `}''

    /tmp/tmpofqf38vy.sh: line 40: `}''

    '
  stdout: ''
  timestamp: 1659992746
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    # Write your code here\n    # You can use the following command to sort the\
    \ characters in a string\n    # echo $1 | grep -o . | sort | tr -d '\\n'\n   \
    \ #\n    # You can use the following command to get the length of a string\n \
    \   # length=$(echo $1 | wc -c)\n    #\n    # You can use the following command\
    \ to get a substring of a string\n    # echo $1 | cut -c 1-$length\n    #\n  \
    \  # You can use the following command to concatenate two strings\n    # echo\
    \ $1$2\n    #\n    # You can use the following command to remove the last character\
    \ of a string\n    # echo $1 | rev | cut -c 2- | rev\n    #\n    # You can use\
    \ the following command to remove the first character of a string\n    # echo\
    \ $1 | cut -c 2-\n    #\n    # You can use the following command to get the first\
    \ character of a string\n    # echo $1 | cut -c 1\n    #\n    # You can use the\
    \ following command to get the last character of a string\n    # echo $1 | rev\
    \ | cut -c 1 | rev\n    #\n    # You can use the following command to get the\
    \ ascii value of a character\n    # echo $1 | grep -o . | od -An -tuC\n    #\n\
    \    # You can use the following command to get the character from an ascii value\n\
    \    # echo $1 | grep -o . | tr $(echo $1 | grep -o . | od -An -tuC | tr '\\n'\
    \ ' ') $(echo $1 | grep -o . | sort | tr -d '\\n')\n    #\n    # You can use the\
    \ following command to check if a string is empty\n    # [ -z $1 ] && echo \"\
    empty\" || echo \"not empty\"\n    #\n    # You can use the following command\
    \ to check if a string is not empty\n    # [ -z $1 ] || echo \"not empty\"\n \
    \   #\n    # You can use the following command to check if a string contains a\
    \ substring\n    # echo $1 | grep -q $2 && echo \"contains\" || echo \"does not\
    \ contain\"\n   \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpztrhqmlw.sh: line 54: syntax error near unexpected token `}''

    /tmp/tmpztrhqmlw.sh: line 54: `}''

    '
  stdout: ''
  timestamp: 1659992746
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local -a words\n  local -a chars\n  local -a result\n  local word\n  local\
    \ char\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local A\n  local B\n  local\
    \ C\n  local D\n  local E\n  local F\n  local G\n  local H\n  local I\n  local\
    \ J\n  local K\n  local L\n  local M\n  local N\n  local O\n  local P\n  local\
    \ Q\n  local R\n  local S\n  local T\n  local U\n  local V\n  local W\n  local\
    \ X\n  local Y\n  local Z\n  local space\n  local exclamation\n  local question\n\
    \  local period\n  local comma\n  local colon\n  local semicolon\n  local dash\n\
    \  local underscore\n  local apostrophe\n  local quote\n  local left_paren\n \
    \ local right_paren\n  local left_bracket\n  local right_bracket\n  local left_brace\n\
    \  local right_brace\n  local less_than\n  local greater_than\n  local plus\n\
    \  local equal\n  local slash\n  local backslash\n  local ampersand\n  local pipe\n\
    \  local at\n  local dollar\n  local percent\n  local caret\n  local tilde\n \
    \ local backtick\n  local asterisk\n  local number\n  local other\n  local result_string\n\
    \n  words=($(echo \"$1\" | tr ' ' '\\n'))\n  for word in \"${words[@]}\"; do\n\
    \    chars=($(echo \"$word\" | tr -d '\\n' | grep -o .))\n    for char in \"${chars[@]}\"\
    ; do\n      case \"$char\" in\n        a)\n          a+=(\"$char\")\n        \
    \  ;;\n        b)\n          b+=(\"$char\")\n          ;;\n        c)\n      \
    \    c+=(\"$char\")\n          ;;\n        d)\n          d+=(\"$char\")\n    \
    \      ;;\n\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4kdqynw9.sh: line 117: syntax error near unexpected token `}''

    /tmp/tmp4kdqynw9.sh: line 117: `}''

    '
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=\"$1\"\n    local -a words\n    local -a sorted_words\n    local\
    \ -a result\n    local i=0\n    local j=0\n    local k=0\n    local word\n   \
    \ local sorted_word\n    local result_str\n\n    words=($(echo \"$str\" | tr '\
    \ ' '\\n'))\n    for word in \"${words[@]}\"; do\n        sorted_words[$i]=$(echo\
    \ \"$word\" | grep -o . | sort | tr -d '\\n')\n        ((i++))\n    done\n\n \
    \   for word in \"${words[@]}\"; do\n        sorted_word=\"${sorted_words[$j]}\"\
    \n        result[$k]=\"$word\"\n        for ((i=0; i<${#word}; i++)); do\n   \
    \         if [[ \"${word:$i:1}\" == \"${sorted_word:0:1}\" ]]; then\n        \
    \        result[$k]=\"${result[$k]:0:$i}${sorted_word:0:1}${result[$k]:$i+1}\"\
    \n                sorted_word=\"${sorted_word:1}\"\n            fi\n        done\n\
    \        ((j++))\n        ((k++))\n    done\n\n    result_str=\"${result[0]}\"\
    \n    for ((i=1; i<${#result[@]}; i++)); do\n        result_str=\"$result_str\
    \ ${result[$i]}\"\n    done\n\n    echo \"$result_str\"\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    echo $1 | tr ' ' '\\n' | awk '{print $1 | \"sort\"}' | tr '\\n' ' '\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  # TODO: Write your code here\n  # Use echo to print result\n  echo \"Not Implemented\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    # Write your code here\n    # You can use the following command to sort the\
    \ characters in a string:\n    # echo \"$1\" | grep -o . | sort | tr -d '\\n'\n\
    \    #\n    # You can use the following command to replace a word in a string:\n\
    \    # echo \"$1\" | sed \"s/hello/hi/\"\n    #\n    # You can use the following\
    \ command to replace a word in a string:\n    # echo \"$1\" | sed \"s/hello/hi/\"\
    \n    #\n    # You can use the following command to replace a word in a string:\n\
    \    # echo \"$1\" | sed \"s/hello/hi/\"\n    #\n    # You can use the following\
    \ command to replace a word in a string:\n    # echo \"$1\" | sed \"s/hello/hi/\"\
    \n    #\n    # You can use the following command to replace a word in a string:\n\
    \    # echo \"$1\" | sed \"s/hello/hi/\"\n    #\n    # You can use the following\
    \ command to replace a word in a string:\n    # echo \"$1\" | sed \"s/hello/hi/\"\
    \n    #\n    # You can use the following command to replace a word in a string:\n\
    \    # echo \"$1\" | sed \"s/hello/hi/\"\n    #\n    # You can use the following\
    \ command to replace a word in a string:\n    # echo \"$1\" | sed \"s/hello/hi/\"\
    \n    #\n    # You can use the following command to replace a word in a string:\n\
    \    # echo \"$1\" | sed \"s/hello/hi/\"\n    #\n    # You can use the following\
    \ command to replace a word in a string:\n    # echo \"$1\" | sed \"s/hello/hi/\"\
    \n    #\n    # You can use the following command to replace a word in a string:\n\
    \    # echo \"$1\" | sed \"s/hello/hi/\"\n    #\n    # You can use the following\
    \ command to replace a word in a string:\n    # echo \"$1\" | sed \"s/hello/hi/\"\
    \n    #\n    # You can use the following command to replace a word in a string:\n\
    \    # echo \"$1\" | sed \"s/hello/\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9y554wyg.sh: line 56: syntax error near unexpected token `}''

    /tmp/tmp9y554wyg.sh: line 56: `}''

    '
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=$1\n  local new_str=\"\"\n  local word=\"\"\n  local char=\"\"\n\
    \  local i=0\n  local j=0\n  local k=0\n  local len=0\n  local len_str=${#str}\n\
    \  local len_word=0\n  local len_char=0\n  local char_arr=()\n  local word_arr=()\n\
    \  local str_arr=()\n  local char_arr_len=0\n  local word_arr_len=0\n  local str_arr_len=0\n\
    \  local char_arr_index=0\n  local word_arr_index=0\n  local str_arr_index=0\n\
    \  local char_arr_index_len=0\n  local word_arr_index_len=0\n  local str_arr_index_len=0\n\
    \  local char_arr_index_len_index=0\n  local word_arr_index_len_index=0\n  local\
    \ str_arr_index_len_index=0\n  local char_arr_index_len_index_len=0\n  local word_arr_index_len_index_len=0\n\
    \  local str_arr_index_len_index_len=0\n  local char_arr_index_len_index_len_index=0\n\
    \  local word_arr_index_len_index_len_index=0\n  local str_arr_index_len_index_len_index=0\n\
    \  local char_arr_index_len_index_len_index_len=0\n  local word_arr_index_len_index_len_index_len=0\n\
    \  local str_arr_index_len_index_len_index_len=0\n  local char_arr_index_len_index_len_index_len_index=0\n\
    \  local word_arr_index_len_index_len_index_len_index=0\n  local str_arr_index_len_index_len_index_len_index=0\n\
    \  local char_arr_index_len_index_len_index_len_index_len=0\n  local word_arr_index_len_index_len_index_len_index_len=0\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    # TODO: Write your code here\n    echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local new_string=\"\"\n    local word=\"\"\n    local\
    \ char=\"\"\n    local char_ascii=0\n    local char_ascii_prev=0\n    local char_ascii_next=0\n\
    \    local char_ascii_min=0\n    local char_ascii_min_index=0\n    local char_ascii_min_index_prev=0\n\
    \    local char_ascii_min_index_next=0\n    local char_ascii_min_index_next_prev=0\n\
    \    local char_ascii_min_index_next_next=0\n    local char_ascii_min_index_next_next_prev=0\n\
    \    local char_ascii_min_index_next_next_next=0\n    local char_ascii_min_index_next_next_next_prev=0\n\
    \    local char_ascii_min_index_next_next_next_next=0\n    local char_ascii_min_index_next_next_next_next_prev=0\n\
    \    local char_ascii_min_index_next_next_next_next_next=0\n    local char_ascii_min_index_next_next_next_next_next_prev=0\n\
    \    local char_ascii_min_index_next_next_next_next_next_next=0\n    local char_ascii_min_index_next_next_next_next_next_next_prev=0\n\
    \    local char_ascii_min_index_next_next_next_next_next_next_next=0\n    local\
    \ char_ascii_min_index_next_next_next_next_next_next_next_prev=0\n    local char_ascii_min_index_next_next_next_next_next_next_next_next=0\n\
    \    local char_ascii_min_index_next_next_next_next_next_next_next_next_prev=0\n\
    \    local char_ascii_min_index_next_next_next_next_next_next_next_next_\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a sorted_words\n    local -a sorted_string\n \
    \   local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n\
    \    local -i n\n    local -i p\n    local -i q\n    local -i r\n    local -i\
    \ s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local\
    \ -i x\n    local -i y\n    local -i z\n    local -i space\n    local -i space_count\n\
    \    local -i word_count\n    local -i char_count\n    local -i char_index\n \
    \   local -i word_index\n    local -i char_ascii\n    local -i char_ascii_prev\n\
    \    local -i char_ascii_next\n    local -i char_ascii_tmp\n    local -i char_ascii_tmp_prev\n\
    \    local -i char_ascii_tmp_next\n    local -i char_ascii_tmp_prev_prev\n   \
    \ local -i char_ascii_tmp_next_next\n    local -i char_ascii_tmp_prev_prev_prev\n\
    \    local -i char_ascii_tmp_next_next_next\n    local -i char_ascii_tmp_prev_prev_prev_prev\n\
    \    local -i char_ascii_tmp_next_next_next_next\n    local -i char_ascii_tmp_prev_prev_prev_prev_prev\n\
    \    local -i char_ascii_tmp_next_next_next_next_next\n    local -i char_ascii_tmp_prev_prev_prev_prev_prev_prev\n\
    \    local -i char_ascii_tmp_next_next_next_next_next_next\n    local -i char_ascii_tmp_prev_prev_prev_prev_prev_prev_prev\n\
    \    local -i char_ascii_tmp_next_next_next_next_next_next_next\n    local -i\
    \ char_ascii_tmp_prev_prev\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local new_str=\"\"\n    for word in $str; do\n        local\
    \ new_word=\"\"\n        for (( i=0; i<${#word}; i++ )); do\n            new_word+=$(echo\
    \ \"$word\" | grep -o . | sort -n | tr -d '\\n')\n        done\n        new_str+=\"\
    $new_word \"\n    done\n    echo \"$new_str\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a sorted_words\n    local -a result\n    local\
    \ word\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=\"$1\"\n  local word\n  local -a words\n  local -a sorted_words\n\
    \  local i\n  local j\n  local sorted_str\n  local -i word_count\n  local -i char_count\n\
    \  local -i char_ascii\n  local -i char_ascii_min\n  local -i char_ascii_min_index\n\
    \  local -i char_ascii_min_index_tmp\n  local -i char_ascii_min_tmp\n  local -i\
    \ char_ascii_tmp\n  local -i char_ascii_tmp_index\n  local -i char_ascii_tmp_index_tmp\n\
    \  local -i char_ascii_tmp_tmp\n  local -i char_ascii_tmp_tmp_index\n  local -i\
    \ char_ascii_tmp_tmp_index_tmp\n  local -i char_ascii_tmp_tmp_tmp\n  local -i\
    \ char_ascii_tmp_tmp_tmp_index\n  local -i char_ascii_tmp_tmp_tmp_index_tmp\n\
    \  local -i char_ascii_tmp_tmp_tmp_tmp\n  local -i char_ascii_tmp_tmp_tmp_tmp_index\n\
    \  local -i char_ascii_tmp_tmp_tmp_tmp_index_tmp\n  local -i char_ascii_tmp_tmp_tmp_tmp_tmp\n\
    \  local -i char_ascii_tmp_tmp_tmp_tmp_tmp_index\n  local -i char_ascii_tmp_tmp_tmp_tmp_tmp_index_tmp\n\
    \  local -i char_ascii_tmp_tmp_tmp_tmp_tmp_tmp\n  local -i char_ascii_tmp_tmp_tmp_tmp_tmp_tmp_index\n\
    \  local -i char_ascii_tmp_tmp_tmp_tmp_tmp_tmp_index_tmp\n  local -i char_ascii_tmp_tmp_tmp_tmp_tmp_tmp_tmp\n\
    \  local -i char_ascii_tmp_tmp_tmp_tmp_tmp_tmp_tmp\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local result=\"\"\n    local word=\"\"\n    local char=\"\"\n    local -a\
    \ chars=()\n    for word in $1; do\n        chars=()\n        for ((i=0; i<${#word};\
    \ i++)); do\n            chars[i]=${word:$i:1}\n        done\n        chars=($(printf\
    \ \"%s\\n\" \"${chars[@]}\" | sort))\n        for char in \"${chars[@]}\"; do\n\
    \            result=\"$result$char\"\n        done\n        result=\"$result \"\
    \n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=\"$1\"\n    local -a words\n    local -a sorted_words\n    local\
    \ -a result\n    local i\n    local j\n    local k\n    local word\n    local\
    \ sorted_word\n    local result_str\n\n    IFS=' ' read -r -a words <<< \"$str\"\
    \n    for ((i = 0; i < ${#words[@]}; i++)); do\n        word=\"${words[$i]}\"\n\
    \        sorted_word=\"$(echo \"$word\" | grep -o . | sort | tr -d '\\n')\"\n\
    \        sorted_words[$i]=\"$sorted_word\"\n    done\n\n    for ((i = 0; i < ${#words[@]};\
    \ i++)); do\n        word=\"${words[$i]}\"\n        sorted_word=\"${sorted_words[$i]}\"\
    \n        for ((j = 0; j < ${#word}; j++)); do\n            for ((k = 0; k < ${#sorted_word};\
    \ k++)); do\n                if [[ \"${word:$j:1}\" == \"${sorted_word:$k:1}\"\
    \ ]]; then\n                    result[$i]=\"${result[$i]}${word:$j:1}\"\n   \
    \                 sorted_word=\"${sorted_word:0:$k}${sorted_word:$((k + 1)):${#sorted_word}}\"\
    \n                    break\n                fi\n            done\n        done\n\
    \    done\n\n    result_str=\"${result[0]}\"\n    for ((i = 1; i < ${#result[@]};\
    \ i++)); do\n        result_str=\"$result_str ${result[$i]}\"\n    done\n\n  \
    \  echo \"$result_str\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a new_words\n    local -a new_sentence\n    local\
    \ word\n    local new_word\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local space\n    local new_space\n    local new_sentence\n\
    \    local new_word\n    local word\n    local words\n    local x\n    local y\n\
    \    local z\n    local space\n    local new_space\n    local new_sentence\n \
    \   local new_word\n    local word\n    local words\n    local x\n    local y\n\
    \    local z\n    local space\n    local new_space\n    local new_sentence\n \
    \   local new_word\n    local word\n    local words\n    local x\n    local y\n\
    \    local z\n    local space\n    local new_space\n    local new_sentence\n \
    \   local new_word\n    local word\n    local words\n    local x\n    local y\n\
    \    local z\n    local space\n    local new_space\n    local new_sentence\n \
    \   local new_word\n    local word\n    local words\n    local x\n    local y\n\
    \    local z\n    local space\n    local new_space\n    local new_sentence\n \
    \   local new_word\n    local word\n    local words\n    local x\n    local y\n\
    \    local z\n    local space\n    local new_space\n    local new_sentence\n \
    \   local new_word\n    local word\n    local words\n    local x\n    local y\n\
    \    local z\n    local space\n    local new_space\n    local new_sentence\n \
    \   local new_word\n    local word\n    local words\n    local x\n    local y\n\
    \    local z\n    local space\n    local new_space\n    local new_sentence\n \
    \   local new_word\n    local word\n    local words\n    local x\n    local y\n\
    \    local z\n    local space\n    local new_space\n    local new_sentence\n \
    \   local\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=$1\n  local result=\"\"\n  local word=\"\"\n  local i=0\n  local\
    \ j=0\n  local len=${#str}\n  while [ $i -lt $len ]; do\n    if [ \"${str:$i:1}\"\
    \ != \" \" ]; then\n      word=\"$word${str:$i:1}\"\n    else\n      result=\"\
    $result $(echo $word | sort -n)\"\n      word=\"\"\n    fi\n    i=$((i+1))\n \
    \ done\n  result=\"$result $(echo $word | sort -n)\"\n  echo $result\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local word\n    local result=\"\"\n    for word in $string;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort | tr -d '\\n')\"\
    \n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  echo \"$1\" | tr ' ' '\\n' | while read word; do\n    echo -n \"$(echo \"$word\"\
    \ | grep -o . | sort -n | tr -d '\\n') \"\n  done\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local\
    \ char=\"\"\n    local char_ascii=\"\"\n    local char_ascii_list=\"\"\n    local\
    \ char_list=\"\"\n    local char_list_len=\"\"\n    local i=\"\"\n    local j=\"\
    \"\n    local k=\"\"\n    local l=\"\"\n    local m=\"\"\n    local n=\"\"\n \
    \   local o=\"\"\n    local p=\"\"\n    local q=\"\"\n    local r=\"\"\n    local\
    \ s=\"\"\n    local t=\"\"\n    local u=\"\"\n    local v=\"\"\n    local w=\"\
    \"\n    local x=\"\"\n    local y=\"\"\n    local z=\"\"\n    local space=\"\"\
    \n    local space_list=\"\"\n    local space_list_len=\"\"\n    local space_list_len_minus_one=\"\
    \"\n    local space_list_len_minus_two=\"\"\n    local space_list_len_minus_three=\"\
    \"\n    local space_list_len_minus_four=\"\"\n    local space_list_len_minus_five=\"\
    \"\n    local space_list_len_minus_six=\"\"\n    local space_list_len_minus_seven=\"\
    \"\n    local space_list_len_minus_eight=\"\"\n    local space_list_len_minus_nine=\"\
    \"\n    local space_list_len_minus_ten=\"\"\n    local space_list_len_minus_eleven=\"\
    \"\n    local space_list_len_minus_twelve=\"\"\n    local space_list_len_minus_thirteen=\"\
    \"\n    local space_list_len_minus_fourteen=\"\"\n    local space_list_len_minus_fifteen=\"\
    \"\n    local space_list_len_minus_sixteen=\"\"\n    local space_list_len_minus_seventeen=\"\
    \"\n    local space_list_len_minus_eighteen=\"\"\n    local space_list_len_minus_nineteen=\"\
    \"\n    local space_list_len_minus_twenty=\"\"\n    local space_list_len_minus_twenty_one=\"\
    \"\n    local space_list_len_minus_twenty_two=\"\"\n    local space_list_len_minus_twenty_three=\"\
    \"\n    local space_list_len_minus_twenty_four=\"\"\n    local space_\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqbfx2oif.sh: line 184: syntax error near unexpected token `}''

    /tmp/tmpqbfx2oif.sh: line 184: `}''

    '
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local words=()\n    local word\n    local sorted_word\n\
    \    local result=\"\"\n    IFS=' ' read -ra words <<< \"$string\"\n    for word\
    \ in \"${words[@]}\"; do\n        sorted_word=$(echo \"$word\" | grep -o . | sort\
    \ | tr -d '\\n')\n        result=\"$result $sorted_word\"\n    done\n    echo\
    \ \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  # TODO: Write your code here\n  echo $1 | tr ' ' '\\n' | while read word; do\n\
    \    echo -n \"$(echo $word | fold -w1 | sort | tr -d '\\n') \"\n  done\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=\"$1\"\n  local -a words\n  local -a sorted_words\n  local -a result\n\
    \  local word\n  local sorted_word\n  local i\n  local j\n  local k\n  local n\n\
    \  local m\n  local c\n\n  # Split string into words\n  IFS=' ' read -r -a words\
    \ <<< \"$str\"\n\n  # Sort each word\n  for word in \"${words[@]}\"; do\n    sorted_word=\"\
    \"\n    for ((i=0; i<${#word}; i++)); do\n      c=\"${word:$i:1}\"\n      for\
    \ ((j=0; j<${#sorted_word}; j++)); do\n        if [[ \"$c\" < \"${sorted_word:$j:1}\"\
    \ ]]; then\n          sorted_word=\"${sorted_word:0:$j}$c${sorted_word:$j}\"\n\
    \          break\n        fi\n      done\n      if [[ $j -eq ${#sorted_word} ]];\
    \ then\n        sorted_word=\"$sorted_word$c\"\n      fi\n    done\n    sorted_words+=(\"\
    $sorted_word\")\n  done\n\n  # Rebuild string\n  n=${#words[@]}\n  m=${#sorted_words[@]}\n\
    \  for ((i=0; i<n; i++)); do\n    word=\"${words[$i]}\"\n    for ((j=0; j<m; j++));\
    \ do\n      sorted_word=\"${sorted_words[$j]}\"\n      if [[ \"$word\" == \"$sorted_word\"\
    \ ]]; then\n        result+=(\"$sorted_word\")\n        sorted_words[$j]=\"\"\n\
    \        break\n      fi\n    done\n  done\n\n  # Print result\n  printf '%s'\
    \ \"${result[0]}\"\n  for ((i=1; i<n; i++)); do\n    printf ' %s' \"${result[$i]}\"\
    \n  done\n  printf '\\n'\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local ascii=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n\
    \    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n \
    \   local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n  \
    \  local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n   \
    \ local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n\
    \    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n \
    \   local w=0\n    local x=0\n    local y=0\n    local z=0\n    local A=0\n  \
    \  local B=0\n    local C=0\n    local D=0\n    local E=0\n    local F=0\n   \
    \ local G=0\n    local H=0\n    local I=0\n    local J=0\n    local K=0\n    local\
    \ L=0\n    local M=0\n    local N=0\n    local O=0\n    local P=0\n    local Q=0\n\
    \    local R=0\n    local S=0\n    local T=0\n    local U=0\n    local V=0\n \
    \   local W=0\n    local X=0\n    local Y=0\n    local Z=0\n    local space=0\n\
    \    local exclamation=0\n    local question=0\n    local dot=0\n    local comma=0\n\
    \    local colon=0\n    local semicolon=0\n    local dash=0\n    local underscore=0\n\
    \    local equal=0\n\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=\"$1\"\n  local words=($(echo \"$str\" | tr ' ' '\\n'))\n  local\
    \ result=\"\"\n  for word in \"${words[@]}\"; do\n    local chars=($(echo \"$word\"\
    \ | tr -d '\\n' | fold -w1))\n    local sorted=($(printf \"%s\\n\" \"${chars[@]}\"\
    \ | sort -n))\n    result=\"$result${sorted[*]}\"\n  done\n  echo \"$result\"\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=\"$1\"\n    local word\n    local result=\"\"\n    local IFS=$'\\\
    n'\n    for word in $string; do\n        result+=\"$(echo -n \"$word\" | grep\
    \ -o . | sort -n | tr -d '\\n')\"\n    done\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=\"$1\"\n    local word\n    local result=\"\"\n    for word in\
    \ $str; do\n        result=\"$result $(echo $word | grep -o . | sort | tr -d '\\\
    n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local string=\"$1\"\n  local words=()\n  local word=\"\"\n  local i=0\n  local\
    \ j=0\n  local c=\"\"\n  local chars=()\n  local char=\"\"\n  local result=\"\"\
    \n\n  while read -n 1 c; do\n    if [[ \"$c\" == \" \" ]]; then\n      words+=(\"\
    $word\")\n      word=\"\"\n    else\n      word+=\"$c\"\n    fi\n  done <<< \"\
    $string\"\n\n  words+=(\"$word\")\n\n  for (( i=0; i<${#words[@]}; i++ )); do\n\
    \    word=\"${words[$i]}\"\n    chars=()\n    for (( j=0; j<${#word}; j++ ));\
    \ do\n      chars+=(\"${word:$j:1}\")\n    done\n    chars=($(printf \"%s\\n\"\
    \ \"${chars[@]}\" | sort))\n    for (( j=0; j<${#chars[@]}; j++ )); do\n     \
    \ result+=\"${chars[$j]}\"\n    done\n    result+=\" \"\n  done\n\n  echo \"$result\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  # Write your code here\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk0_tkvbu.sh: line 15: syntax error near unexpected token `}''

    /tmp/tmpk0_tkvbu.sh: line 15: `}''

    '
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a sorted_words\n    local -i i\n    local -i j\n\
    \    local -i k\n    local -i l\n    local -i len\n    local -i len_words\n  \
    \  local -i len_sorted_words\n    local -i len_word\n    local -i len_sorted_word\n\
    \    local -i len_spaces\n    local -i len_sorted_spaces\n    local -i len_sorted_word_plus_spaces\n\
    \    local -i len_sorted_word_plus_spaces_plus_spaces\n    local -i len_sorted_word_plus_spaces_plus_spaces_plus_sorted_word\n\
    \    local -i len_sorted_word_plus_spaces_plus_spaces_plus_sorted_word_plus_spaces\n\
    \    local -i len_sorted_word_plus_spaces_plus_spaces_plus_sorted_word_plus_spaces_plus_sorted_word\n\
    \    local -i len_sorted_word_plus_spaces_plus_spaces_plus_sorted_word_plus_spaces_plus_sorted_word_plus_spaces\n\
    \    local -i len_sorted_word_plus_spaces_plus_spaces_plus_sorted_word_plus_spaces_plus_sorted_word_plus_spaces_plus_sorted_word\n\
    \    local -i len_sorted_word_plus_spaces_plus_spaces_plus_sorted_word_plus_spaces_plus_sorted_word_plus_spaces_plus_sorted_word_plus_spaces\n\
    \    local -i len_sorted_word_plus_spaces_plus_spaces_plus_sorted_word_plus_spaces_plus_sorted_word_plus_spaces_plus_sorted_word_plus_spaces_plus_sorted_word\n\
    \    local -i len_sorted_word_plus_spaces_plus_spaces_plus_sorted_word_plus_spaces_plus_sorted_word_plus_spaces_plus_sorted_word_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  echo \"$1\" | tr ' ' '\\n' | while read word; do\n    echo -n \"$(echo \"$word\"\
    \ | grep -o . | sort -n | tr -d '\\n') \"\n  done\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    echo \"$1\" | tr ' ' '\\n' | while read word; do\n        echo -n \"$(echo\
    \ \"$word\" | grep -o . | sort | tr -d '\\n')\"\n    done\n    echo\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i len=0\n\
    \    local -i len_str=${#str}\n    local -i len_word=0\n    local -i len_result=0\n\
    \    local -i space_count=0\n    local -i space_index=0\n    local -i space_index_prev=0\n\
    \    local -i space_index_next=0\n    local -i space_index_next_next=0\n    local\
    \ -i space_index_next_next_next=0\n    local -i space_index_next_next_next_next=0\n\
    \    local -i space_index_next_next_next_next_next=0\n    local -i space_index_next_next_next_next_next_next=0\n\
    \    local -i space_index_next_next_next_next_next_next_next=0\n    local -i space_index_next_next_next_next_next_next_next_next=0\n\
    \    local -i space_index_next_next_next_next_next_next_next_next_next=0\n   \
    \ local -i space_index_next_next_next_next_next_next_next_next_next_next=0\n \
    \   local -i space_index_next_next_next_next_next_next_next_next_next_next_next=0\n\
    \    local -i space_index_next_next_next_next_next_next_next_next_next_next_next_next=0\n\
    \    local -i space_index_next_next_next_next_next_next_next_next_next_next_next_next_next=0\n\
    \    local -i space_index_next_next_next_next_next_next_next_next_next_next_next_next_next_next=0\n\
    \    local -i space_index_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next=0\n\
    \    local -\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local -a words\n  local -a chars\n  local -a result\n  local word\n  local\
    \ char\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local A\n  local B\n  local C\n  local D\n  local\
    \ E\n  local F\n  local G\n  local H\n  local I\n  local J\n  local K\n  local\
    \ L\n  local M\n  local N\n  local O\n  local P\n  local Q\n  local R\n  local\
    \ S\n  local T\n  local U\n  local V\n  local W\n  local X\n  local Y\n  local\
    \ Z\n  local space\n  local special\n  local new_word\n  local new_char\n  local\
    \ new_string\n  local string=\"$1\"\n  words=($string)\n  for word in \"${words[@]}\"\
    ; do\n    chars=($word)\n    for char in \"${chars[@]}\"; do\n      case \"$char\"\
    \ in\n        a) a=\"$a$char\" ;;\n        b) b=\"$b$char\" ;;\n        c) c=\"\
    $c$char\" ;;\n        d) d=\"$d$char\" ;;\n        e) e=\"$e$char\" ;;\n     \
    \   f) f=\"$f$char\" ;;\n        g) g=\"$g$char\" ;;\n        h) h=\"$h$char\"\
    \ ;;\n        i) i=\"$i$char\" ;;\n        j) j=\"$j$char\" ;;\n        k)\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz_vt6vda.sh: line 111: syntax error near unexpected token `}''

    /tmp/tmpz_vt6vda.sh: line 111: `}''

    '
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=\"$1\"\n  local word\n  local result=\"\"\n  for word in $str; do\n\
    \    result=\"$result $(echo $word | grep -o . | sort | tr -d '\\n')\"\n  done\n\
    \  echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local str_len=${#str}\n    local i=0\n    local word=\"\
    \"\n    local result=\"\"\n    local char=\"\"\n    local char_ascii=0\n    local\
    \ char_ascii_list=()\n    local char_list=()\n    local char_list_len=0\n    local\
    \ char_list_index=0\n    local char_list_index_min=0\n    local char_list_index_min_ascii=0\n\
    \    local char_list_index_min_ascii_prev=0\n    local char_list_index_min_ascii_prev_index=0\n\
    \    local char_list_index_min_ascii_prev_index_list=()\n    local char_list_index_min_ascii_prev_index_list_len=0\n\
    \    local char_list_index_min_ascii_prev_index_list_index=0\n    local char_list_index_min_ascii_prev_index_list_index_min=0\n\
    \    local char_list_index_min_ascii_prev_index_list_index_min_ascii=0\n    local\
    \ char_list_index_min_ascii_prev_index_list_index_min_ascii_prev=0\n    local\
    \ char_list_index_min_ascii_prev_index_list_index_min_ascii_prev_index=0\n   \
    \ local char_list_index_min_ascii_prev_index_list_index_min_ascii_prev_index_list=()\n\
    \    local char_list_index_min_ascii_prev_index_list_index_min_ascii_prev_index_list_len=0\n\
    \    local char_list_index_min_ascii_prev_index_list_index_min_ascii_prev_index_list_index=0\n\
    \    local char_list_index_min_ascii_prev_index_list_index_min_ascii_prev_index_list_index_min=0\n\
    \    local char_list_index_min_ascii\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqbfx2oif.sh: line 184: syntax error near unexpected token `}''

    /tmp/tmpqbfx2oif.sh: line 184: `}''

    '
  stdout: ''
  timestamp: 1659992746
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    # TODO: Write your code here\n    # Hint: You can use a for loop to iterate\
    \ over the string.\n    # Hint: You can use the sort command to sort the characters\
    \ in a string.\n    # Hint: You can use the tr command to replace characters in\
    \ a string.\n    # Hint: You can use the echo command to print a string.\n   \
    \ # Hint: You can use the read command to read a string.\n    # Hint: You can\
    \ use the echo -n command to print a string without a newline.\n    # Hint: You\
    \ can use the echo -e command to print a string with escape characters.\n    #\
    \ Hint: You can use the printf command to print a string with a specific format.\n\
    \    # Hint: You can use the printf command to print a string with a specific\
    \ format.\n    # Hint: You can use the printf command to print a string with a\
    \ specific format.\n    # Hint: You can use the printf command to print a string\
    \ with a specific format.\n    # Hint: You can use the printf command to print\
    \ a string with a specific format.\n    # Hint: You can use the printf command\
    \ to print a string with a specific format.\n    # Hint: You can use the printf\
    \ command to print a string with a specific format.\n    # Hint: You can use the\
    \ printf command to print a string with a specific format.\n    # Hint: You can\
    \ use the printf command to print a string with a specific format.\n    # Hint:\
    \ You can use the printf command to print a string with a specific format.\n \
    \   # Hint: You can use the printf command to print a string with a specific format.\n\
    \    # Hint: You can use the printf command to print a string with a specific\
    \ format.\n    # Hint: You can use the printf command to print a string with a\
    \ specific format.\n    # Hint: You can use the printf command to print a string\
    \ with a specific format.\n    # Hint: You can use the printf command to print\
    \ a string with a specific format.\n    # Hint: You can use the printf command\
    \ to print a string with a specific format.\n    # Hint: You can use the printf\
    \ command to print a string with a specific format.\n    # Hint: You can\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9lbnq7wg.sh: line 40: syntax error near unexpected token `}''

    /tmp/tmp9lbnq7wg.sh: line 40: `}''

    '
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words=($(echo $1 | tr ' ' '\\n'))\n    local -a new_words=()\n \
    \   for word in \"${words[@]}\"; do\n        new_words+=(\"$(echo $word | fold\
    \ -w1 | sort | tr -d '\\n')\")\n    done\n    echo \"${new_words[@]}\" | tr '\
    \ ' '\\n' | tr '\\n' ' '\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  # TODO: Write your code here\n  echo $1 | tr ' ' '\\n' | sort -f | tr '\\n'\
    \ ' '\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort | tr -d '\\n')\"\
    \n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  # your code here\n  echo $1 | tr ' ' '\\n' | while read word; do\n    echo\
    \ -n $word | fold -w1 | sort | tr -d '\\n'\n    echo -n ' '\n  done\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=$1\n  local str_arr=($str)\n  local new_str=\"\"\n  for word in ${str_arr[@]};\
    \ do\n    new_str+=$(echo -n $word | grep -o . | sort | tr -d '\\n')\n  done\n\
    \  echo $new_str\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a word\n    local -a result\n    local -i i\n\
    \    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i\
    \ n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local\
    \ -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local\
    \ -i x\n    local -i y\n    local -i z\n    local -i a\n    local -i b\n    local\
    \ -i c\n    local -i d\n    local -i e\n    local -i f\n    local -i g\n    local\
    \ -i h\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local\
    \ -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local\
    \ -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local\
    \ -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i A\n    local\
    \ -i B\n    local -i C\n    local -i D\n    local -i E\n    local -i F\n    local\
    \ -i G\n    local -i H\n    local -i I\n    local -i J\n    local -i K\n    local\
    \ -i L\n    local -i M\n    local -i N\n    local -i O\n    local -i P\n    local\
    \ -i Q\n    local -i R\n    local -i S\n    local -i T\n    local -i U\n    local\
    \ -i V\n    local -i W\n    local -i X\n    local -i Y\n    local -i Z\n    local\
    \ -i space\n    local -i excl\n    local -i qmark\n    local -i dot\n    local\
    \ -i comma\n    local -i dash\n    local -i colon\n    local -i semi\n    local\
    \ -i lparen\n    local -i rparen\n    local -i lbrack\n   \n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    # Write your code here\n    echo \"$1\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    # Write your code here\n    #\n    # Hint:\n    # You can use the following\
    \ command to sort a string:\n    # echo \"hello\" | fold -w1 | sort | tr -d '\\\
    n'\n    #\n    # You can use the following command to split a string into words:\n\
    \    # echo \"hello world\" | tr ' ' '\\n'\n    #\n    # You can use the following\
    \ command to join a list of strings:\n    # echo \"hello world\" | tr ' ' '\\\
    n' | paste -sd ' '\n    #\n    # You can use the following command to remove the\
    \ last character of a string:\n    # echo \"hello\" | rev | cut -c 2- | rev\n\
    \    #\n    # You can use the following command to remove the first character\
    \ of a string:\n    # echo \"hello\" | cut -c 2-\n    #\n    # You can use the\
    \ following command to remove the last word of a string:\n    # echo \"hello world\"\
    \ | rev | cut -d ' ' -f 2- | rev\n    #\n    # You can use the following command\
    \ to remove the first word of a string:\n    # echo \"hello world\" | cut -d '\
    \ ' -f 2-\n    #\n    # You can use the following command to remove the last character\
    \ of a string:\n    # echo \"hello\" | rev | cut -c 2- | rev\n    #\n    # You\
    \ can use the following command to remove the first character of a string:\n \
    \   # echo \"hello\" | cut -c 2-\n    #\n    # You can use the following command\
    \ to remove the last word of a string:\n    # echo \"hello world\" | rev | cut\
    \ -d ' ' -f 2- | rev\n    #\n    # You can use the following command to remove\
    \ the first word of a string:\n    # echo \"hello world\" | cut -d ' ' -f 2-\n\
    \    #\n    # You can use the following command to remove the last character of\
    \ a string:\n    # echo \"hello\" | rev | cut -c 2- | rev\n    #\n    # You can\
    \ use the following command to remove the first character of a string:\n    #\
    \ echo \"hello\" | cut -c 2-\n    #\n\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7vawokqv.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmp7vawokqv.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local result=\"\"\n    local word=\"\"\n    local sorted_word=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    local\
    \ len_word=0\n    local len_result=0\n    local char=\"\"\n    local char_ascii=0\n\
    \    local char_ascii_min=0\n    local char_ascii_min_index=0\n    local char_ascii_min_index_tmp=0\n\
    \    local char_ascii_tmp=0\n    local char_tmp=\"\"\n    local char_tmp_ascii=0\n\
    \    local char_tmp_ascii_min=0\n    local char_tmp_ascii_min_index=0\n    local\
    \ char_tmp_ascii_min_index_tmp=0\n    local char_tmp_ascii_tmp=0\n    local char_tmp_tmp=\"\
    \"\n    local char_tmp_tmp_ascii=0\n    local char_tmp_tmp_ascii_min=0\n    local\
    \ char_tmp_tmp_ascii_min_index=0\n    local char_tmp_tmp_ascii_min_index_tmp=0\n\
    \    local char_tmp_tmp_ascii_tmp=0\n    local char_tmp_tmp_tmp=\"\"\n    local\
    \ char_tmp_tmp_tmp_ascii=0\n    local char_tmp_tmp_tmp_ascii_min=0\n    local\
    \ char_tmp_tmp_tmp_ascii_min_index=0\n    local char_tmp_tmp_tmp_ascii_min_index_tmp=0\n\
    \    local char_tmp_tmp_tmp_ascii_tmp=0\n    local char_tmp_tmp_tmp_tmp=\"\"\n\
    \    local char_tmp_tmp_tmp_tmp_ascii=0\n    local char_tmp_tmp_tmp_tmp_ascii_min=0\n\
    \    local char_tmp_tmp_tmp_tmp_ascii_min_index=0\n    local char_tmp_tmp_tmp_tmp_ascii_min_index_tmp=0\n\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=$1\n  local result=\"\"\n  local word=\"\"\n  local char=\"\"\n \
    \ local -a chars=()\n  local -a words=()\n  local -a sorted_chars=()\n  local\
    \ -a sorted_words=()\n  local -a sorted_str=()\n  local -i i=0\n  local -i j=0\n\
    \  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n\
    \  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n\
    \  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n\
    \  local -i z=0\n  local -i length=0\n  local -i length_of_words=0\n  local -i\
    \ length_of_sorted_chars=0\n  local -i length_of_sorted_words=0\n  local -i length_of_sorted_str=0\n\
    \  local -i length_of_result=0\n  local -i length_of_word=0\n  local -i length_of_char=0\n\
    \  local -i length_of_chars=0\n  local -i length_of_words=0\n  local -i length_of_sorted_chars=0\n\
    \  local -i length_of_sorted_words=0\n  local -i length_of_sorted_str=0\n  local\
    \ -i length_of_result=0\n  local -i length_of_word=0\n  local -i length_of_char=0\n\
    \  local -i length_of_chars=0\n  local -i length_of_words=0\n  local -i length_of_sorted_chars=0\n\
    \  local -i length_of_sorted_words=0\n  local -i length_of_sorted_str=0\n  local\
    \ -i length_of_result=0\n  local -i length_of\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  echo $1 | tr ' ' '\\n' | awk '{print $1 | \"sort\"}' | tr '\\n' ' '\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=\"$1\"\n    local -a words\n    local -a ordered_words\n    local\
    \ -a ordered_str\n    local i=0\n    local j=0\n    local k=0\n    local word\n\
    \    local ordered_word\n    local ordered_char\n    local char\n    local space_count=0\n\
    \    local space_index\n    local space_index_array\n    local space_index_array_len\n\
    \    local space_index_array_len_minus_one\n    local space_index_array_len_minus_one_minus_i\n\
    \    local space_index_array_len_minus_one_minus_i_minus_j\n    local space_index_array_len_minus_one_minus_i_minus_j_minus_k\n\
    \    local space_index_array_len_minus_one_minus_i_minus_j_minus_k_minus_l\n \
    \   local space_index_array_len_minus_one_minus_i_minus_j_minus_k_minus_l_minus_m\n\
    \    local space_index_array_len_minus_one_minus_i_minus_j_minus_k_minus_l_minus_m_minus_n\n\
    \    local space_index_array_len_minus_one_minus_i_minus_j_minus_k_minus_l_minus_m_minus_n_minus_o\n\
    \    local space_index_array_len_minus_one_minus_i_minus_j_minus_k_minus_l_minus_m_minus_n_minus_o_minus_p\n\
    \    local space_index_array_len_minus_one_minus_i_minus_j_minus_k_minus_l_minus_m_minus_n_minus_o_minus_p_minus_q\n\
    \    local space_index_array_len_minus_one_minus_i_minus_j_minus_k_minus_l_minus_m_minus_n_minus_o_minus_p_minus_q_minus_r\n\
    \    local space_index_array_len_minus_one_minus_i_minus_j_minus_k_minus_l_minus_m_minus_n\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local word\n    local result=\"\"\n    for word in $str;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort -n | tr -d '\\\
    n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local string=$1\n  local result=\"\"\n  local word=\"\"\n  local char=\"\"\n\
    \  for word in $string; do\n    for char in $(echo $word | grep -o .); do\n  \
    \    result+=$(echo $char | sort -u)\n    done\n    result+=\" \"\n  done\n  echo\
    \ $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local len2=0\n\
    \    local len3=0\n    local len4=0\n    local len5=0\n    local len6=0\n    local\
    \ len7=0\n    local len8=0\n    local len9=0\n    local len10=0\n    local len11=0\n\
    \    local len12=0\n    local len13=0\n    local len14=0\n    local len15=0\n\
    \    local len16=0\n    local len17=0\n    local len18=0\n    local len19=0\n\
    \    local len20=0\n    local len21=0\n    local len22=0\n    local len23=0\n\
    \    local len24=0\n    local len25=0\n    local len26=0\n    local len27=0\n\
    \    local len28=0\n    local len29=0\n    local len30=0\n    local len31=0\n\
    \    local len32=0\n    local len33=0\n    local len34=0\n    local len35=0\n\
    \    local len36=0\n    local len37=0\n    local len38=0\n    local len39=0\n\
    \    local len40=0\n    local len41=0\n    local len42=0\n    local len43=0\n\
    \    local len44=0\n    local len45=0\n    local len46=0\n    local len47=0\n\
    \    local len48=0\n    local len49=0\n    local len50=0\n    local len51=0\n\
    \    local len52=0\n    local len53=0\n    local len54=0\n    local len55=0\n\
    \    local len56=0\n    local len57=0\n    local len58=0\n    local len59=0\n\
    \    local len60=0\n    local len61=0\n    local len62=0\n    local len63=0\n\
    \    local len64=0\n    local len65=0\n    local len66=0\n    local len67=0\n\
    \    local\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a chars\n    local -a sorted\n    local -a result\n\
    \    local word\n    local char\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local new_str=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local len_word=0\n\
    \    local len_str=${#str}\n    local char_arr=()\n    local word_arr=()\n   \
    \ local str_arr=()\n    local char_arr_len=0\n    local word_arr_len=0\n    local\
    \ str_arr_len=0\n    local char_arr_index=0\n    local word_arr_index=0\n    local\
    \ str_arr_index=0\n    local char_arr_index_len=0\n    local word_arr_index_len=0\n\
    \    local str_arr_index_len=0\n    local char_arr_index_len_i=0\n    local word_arr_index_len_i=0\n\
    \    local str_arr_index_len_i=0\n    local char_arr_index_len_i_j=0\n    local\
    \ word_arr_index_len_i_j=0\n    local str_arr_index_len_i_j=0\n    local char_arr_index_len_i_j_k=0\n\
    \    local word_arr_index_len_i_j_k=0\n    local str_arr_index_len_i_j_k=0\n \
    \   local char_arr_index_len_i_j_k_len=0\n    local word_arr_index_len_i_j_k_len=0\n\
    \    local str_arr_index_len_i_j_k_len=0\n    local char_arr_index_len_i_j_k_len_char=0\n\
    \    local word_arr_index_len_i_j_k_len_char=0\n    local str_arr_index_len_i_j_k_len_char=0\n\
    \    local char_arr_index_len_i_j_k_len_char_word=0\n    local word_arr_index_len_i_j_k_len_char_word=0\n\
    \    local str_arr_index\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local -a words\n    local -a new_words\n    local -a new_str\n\
    \    local i=0\n\n    # Split the string into words\n    IFS=' ' read -ra words\
    \ <<< \"$str\"\n\n    # For each word, sort the characters and add it to new_words\n\
    \    for word in \"${words[@]}\"; do\n        new_words[$i]=$(echo \"$word\" |\
    \ grep -o . | sort | tr -d '\\n')\n        i=$((i+1))\n    done\n\n    # Join\
    \ the new_words array with space\n    new_str=$(printf \" %s\" \"${new_words[@]}\"\
    )\n    new_str=${new_str:1}\n\n    echo \"$new_str\"\n}\n\ncandidate() {\n   \
    \ anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") =\
    \ \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a result\n    local word\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local A\n    local B\n    local C\n    local D\n    local E\n    local\
    \ F\n    local G\n    local H\n    local I\n    local J\n    local K\n    local\
    \ L\n    local M\n    local N\n    local O\n    local P\n    local Q\n    local\
    \ R\n    local S\n    local T\n    local U\n    local V\n    local W\n    local\
    \ X\n    local Y\n    local Z\n    local space\n    local exclamation\n    local\
    \ question\n    local period\n    local comma\n    local colon\n    local semicolon\n\
    \    local apostrophe\n    local dash\n    local underscore\n    local at\n  \
    \  local pound\n    local dollar\n    local percent\n    local caret\n    local\
    \ ampersand\n    local asterisk\n    local open_paren\n    local close_paren\n\
    \    local open_bracket\n    local close_bracket\n    local open_brace\n    local\
    \ close_brace\n    local plus\n    local equal\n    local less_than\n    local\
    \ greater_than\n    local backslash\n    local pipe\n    local tilde\n    local\
    \ backtick\n    local single_quote\n    local double_quote\n    local slash\n\
    \    local backspace\n    local tab\n    local newline\n    local formfeed\n \
    \   local carriage_return\n    local vertical_tab\n    local null\n    local bell\n\
    \    local escape\n    local\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local result=\"\"\n    local word=\"\"\n    local i=0\n\
    \    local j=0\n    local k=0\n    local len=${#str}\n    local char=\"\"\n  \
    \  local char_arr=()\n    local char_arr_len=0\n    local char_arr_index=0\n \
    \   local char_arr_index_min=0\n    local char_arr_index_min_value=0\n    local\
    \ char_arr_index_min_value_ascii=0\n    local char_arr_index_min_value_ascii_min=0\n\
    \    local char_arr_index_min_value_ascii_min_index=0\n    local char_arr_index_min_value_ascii_min_index_value=0\n\
    \    local char_arr_index_min_value_ascii_min_index_value_ascii=0\n    local char_arr_index_min_value_ascii_min_index_value_ascii_min=0\n\
    \    local char_arr_index_min_value_ascii_min_index_value_ascii_min_index=0\n\
    \    local char_arr_index_min_value_ascii_min_index_value_ascii_min_index_value=0\n\
    \    local char_arr_index_min_value_ascii_min_index_value_ascii_min_index_value_ascii=0\n\
    \    local char_arr_index_min_value_ascii_min_index_value_ascii_min_index_value_ascii_min=0\n\
    \    local char_arr_index_min_value_ascii_min_index_value_ascii_min_index_value_ascii_min_index=0\n\
    \    local char_arr_index_min_value_ascii_min_index_value_ascii_min_index_value_ascii_min_index_value=0\n\
    \    local char_arr_index_min_value_ascii_min_index_value_ascii_min_index_value_ascii_min\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a sorted_words\n    local -a result\n    local\
    \ word\n    local sorted_word\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local space\n    local result\n    local -a\
    \ chars\n    local char\n    local -a sorted_chars\n    local sorted_char\n  \
    \  local -a sorted_words\n    local sorted_word\n    local -a result\n    local\
    \ word\n    local sorted_word\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local space\n    local result\n    local -a\
    \ chars\n    local char\n    local -a sorted_chars\n    local sorted_char\n  \
    \  local -a sorted_words\n    local sorted_word\n    local -a result\n    local\
    \ word\n    local sorted_word\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local space\n    local result\n    local -a\
    \ chars\n    local char\n    local -a sorted_chars\n    local sorted_char\n  \
    \  local -a sorted_words\n    local sorted_word\n    local -a result\n    local\
    \ word\n    local sorted_word\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local space\n\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local word\n    local result\n    for word in $str; do\n\
    \        result=\"$result $(echo $word | grep -o . | sort -u | tr -d '\\n')\"\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local new_string=\"\"\n    local word=\"\"\n    local\
    \ char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n  \
    \  local len_string=${#string}\n    while [ $i -lt $len_string ]; do\n       \
    \ if [ \"${string:$i:1}\" == \" \" ]; then\n            new_string+=\" \"\n  \
    \          i=$((i+1))\n        else\n            j=$i\n            while [ $j\
    \ -lt $len_string ] && [ \"${string:$j:1}\" != \" \" ]; do\n                word+=\"\
    ${string:$j:1}\"\n                j=$((j+1))\n            done\n            len=${#word}\n\
    \            for (( k=0; k<len; k++ )); do\n                for (( l=k+1; l<len;\
    \ l++ )); do\n                    if [ \"${word:$k:1}\" \\> \"${word:$l:1}\" ];\
    \ then\n                        char=\"${word:$k:1}\"\n                      \
    \  word=\"${word:0:$k}${word:$l:1}${word:$((k+1)):$((l-k-1))}${char}${word:$((l+1))}\"\
    \n                    fi\n                done\n            done\n           \
    \ new_string+=\"$word\"\n            word=\"\"\n            i=$j\n        fi\n\
    \    done\n    echo \"$new_string\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a sorted_words\n    local -a result\n    local\
    \ i\n    local j\n    local k\n    local word\n    local sorted_word\n    local\
    \ result_string\n\n    # Split the string into words\n    IFS=' ' read -a words\
    \ <<< \"$1\"\n\n    # Sort each word\n    for i in \"${!words[@]}\"; do\n    \
    \    word=\"${words[$i]}\"\n        sorted_word=\"\"\n        for ((j=0; j<${#word};\
    \ j++)); do\n            sorted_word+=\"${word:$j:1}\"\n        done\n       \
    \ sorted_words[$i]=\"$(echo \"$sorted_word\" | sort)\"\n    done\n\n    # Rebuild\
    \ the string\n    for i in \"${!words[@]}\"; do\n        word=\"${words[$i]}\"\
    \n        sorted_word=\"${sorted_words[$i]}\"\n        result_string=\"\"\n  \
    \      for ((j=0; j<${#word}; j++)); do\n            for ((k=0; k<${#sorted_word};\
    \ k++)); do\n                if [[ \"${word:$j:1}\" == \"${sorted_word:$k:1}\"\
    \ ]]; then\n                    result_string+=\"${sorted_word:$k:1}\"\n     \
    \               sorted_word=\"${sorted_word:0:$k}${sorted_word:$((k+1)):${#sorted_word}}\"\
    \n                    break\n                fi\n            done\n        done\n\
    \        result[$i]=\"$result_string\"\n    done\n\n    # Print the result\n \
    \   echo \"${result[*]}\" | tr ' ' '\\n' | tr '\\n' ' ' | sed 's/ $//'\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a chars\n    local -a new_words\n    local -a\
    \ new_chars\n    local word\n    local char\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local space\n    local new_word\n\
    \    local new_string\n    local string=\"$1\"\n    IFS=' ' read -r -a words <<<\
    \ \"$string\"\n    for ((i=0; i<${#words[@]}; i++)); do\n        word=\"${words[$i]}\"\
    \n        chars=()\n        for ((j=0; j<${#word}; j++)); do\n            char=\"\
    ${word:$j:1}\"\n            chars+=(\"$char\")\n        done\n        new_chars=()\n\
    \        for ((k=0; k<${#chars[@]}; k++)); do\n            char=\"${chars[$k]}\"\
    \n            if [[ \"$char\" == 'a' ]]; then\n                new_chars+=(\"\
    $char\")\n            fi\n        done\n        for ((l=0; l<${#chars[@]}; l++));\
    \ do\n            char=\"${chars[$l]}\"\n            if [[ \"$char\" == 'b' ]];\
    \ then\n                new_chars+=(\"$char\")\n            fi\n        done\n\
    \        for ((m=0; m<${#chars[@]}; m++)); do\n            char=\"${chars[$m]}\"\
    \n            if [[ \"$char\" == 'c' ]]; then\n                new_chars+=(\"\
    $char\")\n            fi\n        done\n        for ((n=0; n<${#chars[@]}; n++));\
    \ do\n            char=\"${chars[$n]}\"\n            if [[ \"$char\" == 'd' ]];\
    \ then\n                new_chars+=(\"$char\")\n            fi\n        done\n\
    \        for ((o=0; o<${#chars[@\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdvwrhnwy.sh: line 75: unexpected EOF while looking for matching
    `)''

    /tmp/tmpdvwrhnwy.sh: line 94: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local words=()\n    local sorted_words=()\n    local\
    \ sorted_string=\"\"\n    local word=\"\"\n    local sorted_word=\"\"\n    local\
    \ char=\"\"\n    local sorted_chars=()\n    local sorted_char=\"\"\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local space=\" \"\n    local char_ascii=0\n \
    \   local sorted_char_ascii=0\n    local ascii_array=()\n    local sorted_ascii_array=()\n\
    \    local ascii_array_length=0\n    local sorted_ascii_array_length=0\n    local\
    \ ascii_array_index=0\n    local sorted_ascii_array_index=0\n    local ascii_array_element=0\n\
    \    local sorted_ascii_array_element=0\n    local ascii_array_element_index=0\n\
    \    local sorted_ascii_array_element_index=0\n    local ascii_array_element_length=0\n\
    \    local sorted_ascii_array_element_length=0\n    local ascii_array_element_char=\"\
    \"\n    local sorted_ascii_array_element_char=\"\"\n    local ascii_array_element_char_ascii=0\n\
    \    local sorted_ascii_array_element_char_ascii=0\n    local ascii_array_element_char_ascii_index=0\n\
    \    local sorted_ascii_array_element_char_ascii_index=0\n    local ascii_array_element_char_ascii_length=0\n\
    \    local sorted_ascii_array_element_char_ascii_length=0\n    local ascii\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local -a words\n  local -a new_words\n  local word\n  local new_word\n  local\
    \ i\n  local j\n  local k\n  local l\n  local char\n  local new_char\n  local\
    \ new_string\n  local -i len\n  local -i len_new_string\n  local -i len_word\n\
    \  local -i len_new_word\n  local -i len_char\n  local -i len_new_char\n  local\
    \ -i len_new_words\n  local -i len_words\n  local -i len_new_string\n  local -i\
    \ len_new_word\n  local -i len_word\n  local -i len_char\n  local -i len_new_char\n\
    \  local -i len_new_words\n  local -i len_words\n  local -i len_new_string\n \
    \ local -i len_new_word\n  local -i len_word\n  local -i len_char\n  local -i\
    \ len_new_char\n  local -i len_new_words\n  local -i len_words\n  local -i len_new_string\n\
    \  local -i len_new_word\n  local -i len_word\n  local -i len_char\n  local -i\
    \ len_new_char\n  local -i len_new_words\n  local -i len_words\n  local -i len_new_string\n\
    \  local -i len_new_word\n  local -i len_word\n  local -i len_char\n  local -i\
    \ len_new_char\n  local -i len_new_words\n  local -i len_words\n  local -i len_new_string\n\
    \  local -i len_new_word\n  local -i len_word\n  local -i len_char\n  local -i\
    \ len_new_char\n  local -i len_new_words\n  local -i len_words\n  local -i len_new_string\n\
    \  local -i len_new_word\n  local -i len_word\n  local -i len_char\n  local -i\
    \ len_new_char\n  local -i len_new_words\n  local -i len_words\n \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=\"$1\"\n  local result=\"\"\n  local word=\"\"\n  local char=\"\"\
    \n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i len=0\n  local -i\
    \ len2=0\n  local -i len3=0\n  local -i len4=0\n  local -i len5=0\n  local -i\
    \ len6=0\n  local -i len7=0\n  local -i len8=0\n  local -i len9=0\n  local -i\
    \ len10=0\n  local -i len11=0\n  local -i len12=0\n  local -i len13=0\n  local\
    \ -i len14=0\n  local -i len15=0\n  local -i len16=0\n  local -i len17=0\n  local\
    \ -i len18=0\n  local -i len19=0\n  local -i len20=0\n  local -i len21=0\n  local\
    \ -i len22=0\n  local -i len23=0\n  local -i len24=0\n  local -i len25=0\n  local\
    \ -i len26=0\n  local -i len27=0\n  local -i len28=0\n  local -i len29=0\n  local\
    \ -i len30=0\n  local -i len31=0\n  local -i len32=0\n  local -i len33=0\n  local\
    \ -i len34=0\n  local -i len35=0\n  local -i len36=0\n  local -i len37=0\n  local\
    \ -i len38=0\n  local -i len39=0\n  local -i len40=0\n  local -i len41=0\n  local\
    \ -i len42=0\n  local -i len43=0\n  local -i len44=0\n  local -i len45=0\n  local\
    \ -i len46=0\n  local -i len47=0\n  local -i len48=0\n  local -i len49=0\n  local\
    \ -i len50=0\n  local -i len51=0\n  local -i len52\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=\"$1\"\n  local word\n  local result=\"\"\n  local -a words\n  local\
    \ -a sorted_words\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i\
    \ len=0\n  local -i len_str=0\n  local -i len_word=0\n  local -i len_result=0\n\
    \  local -i len_sorted_word=0\n  local -i len_words=0\n  local -i len_sorted_words=0\n\
    \  local -i len_diff=0\n  local -i len_diff_result=0\n  local -i len_diff_sorted_word=0\n\
    \  local -i len_diff_sorted_words=0\n  local -i len_diff_words=0\n  local -i len_diff_result_words=0\n\
    \  local -i len_diff_result_sorted_words=0\n  local -i len_diff_result_sorted_word=0\n\
    \  local -i len_diff_result_word=0\n  local -i len_diff_result_sorted_word_words=0\n\
    \  local -i len_diff_result_sorted_word_sorted_words=0\n  local -i len_diff_result_word_words=0\n\
    \  local -i len_diff_result_word_sorted_words=0\n  local -i len_diff_result_sorted_word_words_sorted_words=0\n\
    \  local -i len_diff_result_word_words_sorted_words=0\n  local -i len_diff_result_word_sorted_words_sorted_words=0\n\
    \  local -i len_diff_result_word_sorted_words_words=0\n  local -i len_diff_result_sorted_word_sorted_words_words=0\n\
    \  local -i len_diff_result_sorted_word_sorted_words_sorted_words=0\n  local -i\
    \ len_diff_result_sorted_word_words_words=0\n  local -i len_diff_result_word_words_words=0\n\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a sorted_words\n    local -a result\n    local\
    \ word\n    local sorted_word\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local space\n    local new_word\n    local\
    \ new_space\n    local new_string\n    words=($(echo $1 | tr ' ' '\\n'))\n   \
    \ for word in \"${words[@]}\"; do\n        sorted_word=$(echo $word | grep -o\
    \ . | sort | tr -d '\\n')\n        sorted_words+=($sorted_word)\n    done\n  \
    \  for ((i=0; i<${#words[@]}; i++)); do\n        for ((j=0; j<${#words[@]}; j++));\
    \ do\n            if [[ ${words[$i]} == ${sorted_words[$j]} ]]; then\n       \
    \         result[$i]=${words[$j]}\n            fi\n        done\n    done\n  \
    \  new_string=\"\"\n    for ((k=0; k<${#words[@]}; k++)); do\n        new_word=${result[$k]}\n\
    \        new_space=${words[$k]}\n        if [[ $new_space == $new_word ]]; then\n\
    \            new_string+=$new_word\n        else\n            new_string+=\"$new_word\
    \ \"\n        fi\n    done\n    echo $new_string\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local word\n    local new_string=\"\"\n    for word\
    \ in $string; do\n        new_string+=\"$(echo $word | grep -o . | sort -n | tr\
    \ -d \"\\n\")\"\n        new_string+=\" \"\n    done\n    echo $new_string\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    for char in $(echo $string | fold -w1); do\n        if [[ $char =~ [a-zA-Z]\
    \ ]]; then\n            word=\"$word$char\"\n        else\n            if [[ -n\
    \ $word ]]; then\n                result=\"$result$(echo $word | fold -w1 | sort\
    \ | tr -d '\\n')\"\n                word=\"\"\n            fi\n            result=\"\
    $result$char\"\n        fi\n    done\n    if [[ -n $word ]]; then\n        result=\"\
    $result$(echo $word | fold -w1 | sort | tr -d '\\n')\"\n    fi\n    echo $result\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    echo $1 | tr ' ' '\\n' | while read word; do\n        echo -n \"$(echo $word\
    \ | grep -o . | sort | tr -d '\\n') \"\n    done\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=\"$1\"\n  local word\n  local result=\"\"\n  for word in $str; do\n\
    \    result=\"$result $(echo \"$word\" | grep -o . | sort -n | tr -d '\\n')\"\n\
    \  done\n  echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  # your code here\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdhzu6cud.sh: line 15: syntax error near unexpected token `}''

    /tmp/tmpdhzu6cud.sh: line 15: `}''

    '
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    # TODO: Write your code here\n    # Use echo to print result\n    echo \"\
    \"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local string=$1\n  local result=\"\"\n  local word=\"\"\n  local char=\"\"\n\
    \  local char_ascii=\"\"\n  local char_ascii_array=()\n  local char_array=()\n\
    \  local char_array_length=0\n  local char_ascii_array_length=0\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n\
    \  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n\
    \  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n\
    \  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n\
    \  local z=0\n  local A=0\n  local B=0\n  local C=0\n  local D=0\n  local E=0\n\
    \  local F=0\n  local G=0\n  local H=0\n  local I=0\n  local J=0\n  local K=0\n\
    \  local L=0\n  local M=0\n  local N=0\n  local O=0\n  local P=0\n  local Q=0\n\
    \  local R=0\n  local S=0\n  local T=0\n  local U=0\n  local V=0\n  local W=0\n\
    \  local X=0\n  local Y=0\n  local Z=0\n  local space=0\n  local exclamation=0\n\
    \  local question=\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    for word in $str; do\n        for char in $(echo $word | grep -o .); do\n\
    \            result+=$(echo $char | sort -u)\n        done\n        result+=\"\
    \ \"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    # Your code here\n    echo $1\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a sorted_words\n    local word\n    local sorted_word\n\
    \    local i\n    local j\n    local new_string\n\n    # Split string into words\n\
    \    IFS=' ' read -a words <<< \"$1\"\n\n    # Sort each word\n    for ((i = 0;\
    \ i < ${#words[@]}; i++)); do\n        word=\"${words[$i]}\"\n        sorted_word=\"\
    \"\n        for ((j = 0; j < ${#word}; j++)); do\n            sorted_word+=\"\
    $(printf \"%s\" \"${word:$j:1}\" | sort -n)\"\n        done\n        sorted_words[$i]=\"\
    $sorted_word\"\n    done\n\n    # Join words\n    new_string=\"${sorted_words[0]}\"\
    \n    for ((i = 1; i < ${#sorted_words[@]}; i++)); do\n        new_string+=\"\
    \ ${sorted_words[$i]}\"\n    done\n\n    echo \"$new_string\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  # Write your code here\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk0_tkvbu.sh: line 15: syntax error near unexpected token `}''

    /tmp/tmpk0_tkvbu.sh: line 15: `}''

    '
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local len2=0\n\
    \    local len3=0\n    local len4=0\n    local len5=0\n    local len6=0\n    local\
    \ len7=0\n    local len8=0\n    local len9=0\n    local len10=0\n    local len11=0\n\
    \    local len12=0\n    local len13=0\n    local len14=0\n    local len15=0\n\
    \    local len16=0\n    local len17=0\n    local len18=0\n    local len19=0\n\
    \    local len20=0\n    local len21=0\n    local len22=0\n    local len23=0\n\
    \    local len24=0\n    local len25=0\n    local len26=0\n    local len27=0\n\
    \    local len28=0\n    local len29=0\n    local len30=0\n    local len31=0\n\
    \    local len32=0\n    local len33=0\n    local len34=0\n    local len35=0\n\
    \    local len36=0\n    local len37=0\n    local len38=0\n    local len39=0\n\
    \    local len40=0\n    local len41=0\n    local len42=0\n    local len43=0\n\
    \    local len44=0\n    local len45=0\n    local len46=0\n    local len47=0\n\
    \    local len48=0\n    local len49=0\n    local len50=0\n    local len51=0\n\
    \    local len52=0\n    local len53=0\n    local len54=0\n    local len55=0\n\
    \    local len56=0\n    local len57=0\n    local len58=0\n    local len59=0\n\
    \    local len60=0\n    local len61=0\n    local len62=0\n    local len63=0\n\
    \    local len64=0\n    local len65=0\n    local len66=0\n    local len67=0\n\
    \    local\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    local\
    \ len_word=0\n    local len_char=0\n    local char_ascii=0\n    local char_ascii_min=0\n\
    \    local char_ascii_min_index=0\n    local char_ascii_min_index_tmp=0\n    local\
    \ char_ascii_tmp=0\n    local char_tmp=\"\"\n    local char_tmp_index=0\n    local\
    \ char_tmp_index_tmp=0\n    local char_tmp_ascii=0\n    local char_tmp_ascii_min=0\n\
    \    local char_tmp_ascii_min_index=0\n    local char_tmp_ascii_min_index_tmp=0\n\
    \    local char_tmp_ascii_tmp=0\n    local char_tmp_tmp=\"\"\n    local char_tmp_tmp_index=0\n\
    \    local char_tmp_tmp_index_tmp=0\n    local char_tmp_tmp_ascii=0\n    local\
    \ char_tmp_tmp_ascii_min=0\n    local char_tmp_tmp_ascii_min_index=0\n    local\
    \ char_tmp_tmp_ascii_min_index_tmp=0\n    local char_tmp_tmp_ascii_tmp=0\n   \
    \ local char_tmp_tmp_tmp=\"\"\n    local char_tmp_tmp_tmp_index=0\n    local char_tmp_tmp_tmp_index_tmp=0\n\
    \    local char_tmp_tmp_tmp_ascii=0\n    local char_tmp_tmp_tmp_ascii_min=0\n\
    \    local char_tmp_tmp_tmp_ascii_min_index=0\n    local char_tmp_tmp_tmp_ascii_min_index_tmp=0\n\
    \    local char_tmp_tmp_tmp_ascii_tmp=0\n    local char_tmp_tmp_tmp_tmp=\"\"\n\
    \    local char_tmp_tmp_tmp_tmp_index\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    # TODO: Write your code here\n    echo \"$1\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local\
    \ char=\"\"\n    local ascii=\"\"\n    local -A ascii_map\n    local -A word_map\n\
    \    local -A word_order\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n\
    \    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n \
    \   local w=0\n    local x=0\n    local y=0\n    local z=0\n    local space=0\n\
    \    local exclamation=0\n    local question=0\n    local period=0\n    local\
    \ comma=0\n    local colon=0\n    local semicolon=0\n    local apostrophe=0\n\
    \    local dash=0\n    local underscore=0\n    local left_paren=0\n    local right_paren=0\n\
    \    local left_bracket=0\n    local right_bracket=0\n    local left_brace=0\n\
    \    local right_brace=0\n    local left_angle=0\n    local right_angle=0\n  \
    \  local at=0\n    local hash=0\n    local dollar=0\n    local percent=0\n   \
    \ local caret=0\n    local ampersand=0\n    local asterisk=0\n    local plus=0\n\
    \    local equals=0\n    local backslash=0\n    local pipe=0\n    local tilde=0\n\
    \    local less_than=0\n    local greater_than=0\n    local single_quote=0\n \
    \   local double_quote=0\n    local backtick=0\n    local tab=0\n    local newline=0\n\
    \    local carriage_return=0\n    local form_feed=0\n    local vertical_tab=0\n\
    \    local null=0\n    local other=0\n    local -i len=${#str}\n    local -i num_words=0\n\
    \    local -i num_chars=0\n    local -i num_ascii=0\n    local -i\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local str=\"$1\"\n  local result=\"\"\n  local word=\"\"\n  local char=\"\"\
    \n  local char_ascii=\"\"\n  local char_ascii_list=\"\"\n  local char_list=\"\"\
    \n  local char_list_sorted=\"\"\n  local char_list_sorted_len=\"\"\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local space=\"\
    \ \"\n  local space_ascii=\"32\"\n  local space_ascii_list=\"\"\n  local space_list=\"\
    \"\n  local space_list_sorted=\"\"\n  local space_list_sorted_len=\"\"\n  local\
    \ space_list_sorted_len_minus_one=\"\"\n  local space_list_sorted_len_minus_two=\"\
    \"\n  local space_list_sorted_len_minus_three=\"\"\n  local space_list_sorted_len_minus_four=\"\
    \"\n  local space_list_sorted_len_minus_five=\"\"\n  local space_list_sorted_len_minus_six=\"\
    \"\n  local space_list_sorted_len_minus_seven=\"\"\n  local space_list_sorted_len_minus_eight=\"\
    \"\n  local space_list_sorted_len_minus_nine=\"\"\n  local space_list_sorted_len_minus_ten=\"\
    \"\n  local space_list_sorted_len_minus_eleven=\"\"\n  local space_list_sorted_len_minus_twelve=\"\
    \"\n  local space_list_sorted_len_minus_thirteen=\"\"\n  local space_list_sorted_len_minus_fourteen=\"\
    \"\n  local space_list_sorted_len_minus_fifteen=\"\"\n  local space_list_sorted_len_minus_sixteen=\"\
    \"\n  local space_list_sorted_len_minus\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  # TODO: Write your code here\n  echo \"$1\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992745
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local res=\"\"\n    local word=\"\"\n    for (( i=0; i<${#str};\
    \ i++ )); do\n        if [[ ${str:$i:1} == \" \" ]]; then\n            res+=\"\
    $word \"\n            word=\"\"\n        else\n            word+=\"$(echo -n \"\
    ${str:$i:1}\" | sort)\"\n        fi\n    done\n    res+=\"$word\"\n    echo \"\
    $res\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=\"$1\"\n    local -a words\n    local -a sorted\n    local i=0\n\
    \    local j=0\n    local k=0\n    local -a chars\n    local -a sorted_chars\n\
    \    local tmp\n    local result\n\n    # Split the string into words\n    IFS='\
    \ ' read -r -a words <<< \"$str\"\n\n    # For each word, sort the characters\
    \ and store the result\n    for word in \"${words[@]}\"; do\n        # Split the\
    \ word into characters\n        IFS= read -r -a chars <<< \"$word\"\n\n      \
    \  # Sort the characters\n        for ((i=0; i<${#chars[@]}; i++)); do\n     \
    \       for ((j=i+1; j<${#chars[@]}; j++)); do\n                if [[ \"${chars[i]}\"\
    \ > \"${chars[j]}\" ]]; then\n                    tmp=\"${chars[i]}\"\n      \
    \              chars[i]=\"${chars[j]}\"\n                    chars[j]=\"$tmp\"\
    \n                fi\n            done\n        done\n\n        # Store the sorted\
    \ word\n        sorted[k]=\"${chars[*]}\"\n        ((k++))\n    done\n\n    #\
    \ Join the sorted words with spaces\n    result=\"${sorted[*]}\"\n\n    echo \"\
    $result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a sorted_words\n    local -i i=0\n    local word\n\
    \    local sorted_word\n    local result\n\n    # Split string into words\n  \
    \  IFS=' ' read -r -a words <<< \"$1\"\n\n    # Sort each word\n    for word in\
    \ \"${words[@]}\"; do\n        sorted_word=$(echo \"$word\" | grep -o . | sort\
    \ | tr -d '\\n')\n        sorted_words[$i]=\"$sorted_word\"\n        ((i++))\n\
    \    done\n\n    # Join sorted words\n    result=$(printf '%s ' \"${sorted_words[@]}\"\
    )\n\n    # Remove trailing space\n    result=${result% }\n\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local word\n    local result=''\n    for word in $str;\
    \ do\n        result=\"$result $(echo $word | grep -o . | sort | tr -d '\\n')\"\
    \n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local result=\"\"\n    for word in $1; do\n        local sorted_word=\"\"\
    \n        for (( i=0; i<${#word}; i++ )); do\n            sorted_word+=\"${word:$i:1}\"\
    \n        done\n        sorted_word=$(echo \"$sorted_word\" | grep -o . | sort\
    \ | tr -d '\\n')\n        result+=\"$sorted_word \"\n    done\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local -a words\n  local -a sorted_words\n  local -a result\n  local -i i=0\n\
    \  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n\
    \  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n\
    \  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n\
    \  local -i y=0\n  local -i z=0\n  local -i space=0\n  local -i exclamation=0\n\
    \  local -i question=0\n  local -i period=0\n  local -i comma=0\n  local -i colon=0\n\
    \  local -i semicolon=0\n  local -i apostrophe=0\n  local -i dash=0\n  local -i\
    \ underscore=0\n  local -i at=0\n  local -i hash=0\n  local -i dollar=0\n  local\
    \ -i percent=0\n  local -i caret=0\n  local -i ampersand=0\n  local -i asterisk=0\n\
    \  local -i left_paren=0\n  local -i right_paren=0\n  local -i left_bracket=0\n\
    \  local -i right_bracket=0\n  local -i left_brace=0\n  local -i right_brace=0\n\
    \  local -i less_than=0\n  local -i greater_than=0\n  local -i equal=0\n  local\
    \ -i plus=0\n  local -i backslash=0\n  local -i pipe=0\n  local -i tilde=0\n \
    \ local -i single_quote=0\n  local -i double_quote=0\n  local -i backtick=0\n\
    \  local -i backspace=0\n  local -i tab=0\n  local -i newline=0\n  local -i carriage_return=0\n\
    \  local -i form_feed=0\n  local -\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a new_words\n    local -i i\n    local -i j\n\
    \    local -i k\n    local -i len\n    local -i len_new\n    local -i len_word\n\
    \    local -i len_new_word\n    local -i len_space\n    local -i len_new_space\n\
    \    local -i len_space_new\n    local -i len_space_word\n    local -i len_new_space_word\n\
    \    local -i len_new_space_new\n    local -i len_space_new_word\n    local -i\
    \ len_new_space_new_word\n    local -i len_new_space_new_space\n    local -i len_space_new_space_word\n\
    \    local -i len_new_space_new_space_word\n    local -i len_new_space_new_space_new\n\
    \    local -i len_space_new_space_new_word\n    local -i len_new_space_new_space_new_word\n\
    \    local -i len_new_space_new_space_new_space\n    local -i len_space_new_space_new_space_word\n\
    \    local -i len_new_space_new_space_new_space_word\n    local -i len_new_space_new_space_new_space_new\n\
    \    local -i len_space_new_space_new_space_new_word\n    local -i len_new_space_new_space_new_space_new_word\n\
    \    local -i len_new_space_new_space_new_space_new_space\n    local -i len_space_new_space_new_space_new_space_word\n\
    \    local -i len_new_space_new_space_new_space_new_space_word\n    local -i len_new_space_new_space_new_space_new_space_new\n\
    \    local -i len_space_new_space_new_space_new_space_new_word\n    local -i len_new_space_new_space_new_space_new_space_new_word\n\
    \    local -i len\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\"\n    local\
    \ char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n  \
    \  local len_str=0\n    local len_word=0\n    local len_char=0\n    local len_new_str=0\n\
    \    local char_arr=()\n    local word_arr=()\n    local str_arr=()\n    local\
    \ new_str_arr=()\n    local char_arr_len=0\n    local word_arr_len=0\n    local\
    \ str_arr_len=0\n    local new_str_arr_len=0\n    local char_arr_index=0\n   \
    \ local word_arr_index=0\n    local str_arr_index=0\n    local new_str_arr_index=0\n\
    \    local char_arr_index_max=0\n    local word_arr_index_max=0\n    local str_arr_index_max=0\n\
    \    local new_str_arr_index_max=0\n    local char_arr_index_min=0\n    local\
    \ word_arr_index_min=0\n    local str_arr_index_min=0\n    local new_str_arr_index_min=0\n\
    \    local char_arr_index_min_char=\"\"\n    local word_arr_index_min_char=\"\"\
    \n    local str_arr_index_min_char=\"\"\n    local new_str_arr_index_min_char=\"\
    \"\n    local char_arr_index_min_char_ascii=0\n    local word_arr_index_min_char_ascii=0\n\
    \    local str_arr_index_min_char_ascii=0\n    local new_str_arr_index_min_char_ascii=0\n\
    \    local char_arr_index_min_char_ascii_min=0\n    local word_arr_index_min_char_ascii_min=0\n\
    \    local str_arr_index_min_char_ascii_min=0\n    local new_str_arr_index_min_char_ascii_min=0\n\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local str=$1\n    local result=\"\"\n    local word=\"\"\n    local char=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    for\
    \ ((i=0; i<len; i++)); do\n        char=${str:$i:1}\n        if [[ $char == \"\
    \ \" ]]; then\n            result+=\"$word \"\n            word=\"\"\n       \
    \ else\n            word+=$char\n        fi\n    done\n    result+=\"$word\"\n\
    \    len=${#result}\n    for ((i=0; i<len; i++)); do\n        char=${result:$i:1}\n\
    \        if [[ $char == \" \" ]]; then\n            result+=\" \"\n        else\n\
    \            word=${result:$i}\n            len=${#word}\n            for ((j=0;\
    \ j<len; j++)); do\n                char=${word:$j:1}\n                if [[ $char\
    \ == \" \" ]]; then\n                    break\n                fi\n         \
    \       for ((k=j+1; k<len; k++)); do\n                    if [[ ${word:$k:1}\
    \ < $char ]]; then\n                        char=${word:$k:1}\n              \
    \          word=${word:0:$k}${word:$j:1}${word:$k+1}\n                    fi\n\
    \                done\n                result=${result:0:$i}$char${result:$i+1}\n\
    \            done\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local string=\"$1\"\n  local word\n  local result=\"\"\n  for word in $string;\
    \ do\n    result=\"$result $(echo $word | grep -o . | sort -u | tr -d '\\n')\"\
    \n  done\n  echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a ordered_words\n    local -i i=0\n    local -i\
    \ j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n\
    \    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local\
    \ -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n\
    \    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i space=0\n\
    \    local -i length=0\n    local -i word_length=0\n    local -i word_count=0\n\
    \    local -i char_count=0\n    local -i char_index=0\n    local -i char_ascii=0\n\
    \    local -i char_ascii_min=0\n    local -i char_ascii_max=0\n    local -i char_ascii_min_index=0\n\
    \    local -i char_ascii_max_index=0\n    local -i char_ascii_min_index_tmp=0\n\
    \    local -i char_ascii_max_index_tmp=0\n    local -i char_ascii_min_tmp=0\n\
    \    local -i char_ascii_max_tmp=0\n    local -i char_ascii_tmp=0\n    local -i\
    \ char_ascii_tmp_index=0\n    local -i char_ascii_tmp_index_min=0\n    local -i\
    \ char_ascii_tmp_index_max=0\n    local -i char_ascii_tmp_min=0\n    local -i\
    \ char_ascii_tmp_max=0\n    local -i char_ascii_tmp_min_index=0\n    local -i\
    \ char_ascii_tmp_max_index=0\n    local -i char_ascii_tmp_min_index_tmp=0\n  \
    \  local -\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \  local string=$1\n  local word\n  local result=\"\"\n  for word in $string;\
    \ do\n    local sorted_word=$(echo $word | grep -o . | sort | tr -d '\\n')\n \
    \   result=\"$result $sorted_word\"\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local -a words\n    local -a chars\n    local -a sorted\n    local -a result\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n\
    \    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local\
    \ -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i space=0\n    local -i len=0\n    local -i len_words=0\n    local\
    \ -i len_chars=0\n    local -i len_sorted=0\n    local -i len_result=0\n    local\
    \ -i len_word=0\n    local -i len_char=0\n    local -i len_sorted_word=0\n   \
    \ local -i len_result_word=0\n    local -i len_result_char=0\n    local -i len_result_sorted_word=0\n\
    \    local -i len_result_sorted_char=0\n    local -i len_result_sorted_char_word=0\n\
    \    local -i len_result_sorted_char_word_result=0\n    local -i len_result_sorted_char_word_result_sorted=0\n\
    \    local -i len_result_sorted_char_word_result_sorted_result=0\n    local -i\
    \ len_result_sorted_char_word_result_sorted_result_sorted=0\n    local -i len_result_sorted_char_word_result_sorted_result_sorted_result=0\n\
    \    local -i len_result_sorted_char_word_result_sorted_result_sorted_result_sorted=0\n\
    \    local -i len_result_sorted_char_word_result_sorted_result_sorted_result_s\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# anti_shuffle('Hi')\
    \ returns 'Hi'\n# anti_shuffle('hello') returns 'ehllo'\n# anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n#\n# $1 is a string\nanti_shuffle() {\n\
    \    local string=$1\n    local word\n    local result=''\n    for word in $string;\
    \ do\n        result+=\"$(echo $word | grep -o . | sort -n | tr -d '\\n') \"\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659992746
