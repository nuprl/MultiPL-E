completions:
- "  local -a nodes=($1)\n  local -i i\n  local -i min_even_value=1000000000\n  local\
  \ -i min_even_index=1000000000\n  local -i min_even_count=0\n  local -i value\n\
  \  local -i index\n  local -i count\n  for ((i=0; i<${#nodes[@]}; i++)); do\n  \
  \  value=${nodes[$i]}\n    if ((value % 2 == 0)); then\n      if ((value < min_even_value));\
  \ then\n        min_even_value=$value\n        min_even_index=$i\n        min_even_count=1\n\
  \      elif ((value == min_even_value)); then\n        ((min_even_count++))\n  \
  \    fi\n    fi\n  done\n  if ((min_even_count > 0)); then\n    echo \"[$min_even_value,\
  \ $min_even_index]\"\n  else\n    echo \"[]\"\n  fi"
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n \
  \ local -i len=${#nodes[@]}\n  local -i found=0\n  local -i value=0\n  for ((i=0;\
  \ i<len; i++)); do\n    value=${nodes[i]}\n    if ((value % 2 == 0)); then\n   \
  \   if ((found == 0)); then\n        min=value\n        min_i=i\n        found=1\n\
  \      elif ((value < min)); then\n        min=value\n        min_i=i\n      fi\n\
  \    fi\n  done\n  if ((found == 0)); then\n    echo \"[]\"\n  else\n    echo \"\
  [$min, $min_i]\"\n  fi"
- "  local -a nodes=( $1 )\n  local -a evens\n  local -a evens_index\n  local -a evens_index_sorted\n\
  \  local -a evens_sorted\n  local -a evens_sorted_index\n  local -a result\n  local\
  \ i\n  local j\n  local k\n  local n\n  local m\n  local p\n  local q\n  local r\n\
  \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n \
  \ local z\n  local aa\n  local bb\n  local cc\n  local dd\n  local ee\n  local ff\n\
  \  local gg\n  local hh\n  local ii\n  local jj\n  local kk\n  local ll\n  local\
  \ mm\n  local nn\n  local oo\n  local pp\n  local qq\n  local rr\n  local ss\n \
  \ local tt\n  local uu\n  local vv\n  local ww\n  local xx\n  local yy\n  local\
  \ zz\n  local aaa\n  local bbb\n  local ccc\n  local ddd\n  local eee\n  local fff\n\
  \  local ggg\n  local hhh\n  local iii\n  local jjj\n  local kkk\n  local lll\n\
  \  local mmm\n  local nnn\n  local ooo\n  local ppp\n  local qqq\n  local rrr\n\
  \  local sss\n  local ttt\n  local uuu\n  local vvv\n  local www\n  local xxx\n\
  \  local yyy\n  local zzz\n  local aaaa\n  local bbbb\n  local cccc\n  local dddd\n\
  \  local eeee\n  local ffff\n  local gggg\n  local hhhh\n  local iiii\n  local jjjj\n\
  \  local kkkk\n  local llll\n  local mmmm\n  local nnnn\n  local oooo\n  local pppp\n\
  \  local qqqq\n  local rrrr\n  local ssss\n  local tttt\n  local uuuu\n  local vvvv\n\
  \  local wwww\n  local"
- "  local -a a=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
  \ -i n=${#a[@]}\n  local -i even=0\n  local -i first_even=0\n  local -i first_even_i=0\n\
  \  local -i first_zero=0\n  local -i first_zero_i=0\n  local -i zero=0\n  local\
  \ -i zero_i=0\n  local -i zeros=0\n  local -i zeros_i=0\n  local -i zeros_n=0\n\
  \  local -i zeros_n_i=0\n  local -i zeros_n_n=0\n  local -i zeros_n_n_i=0\n  local\
  \ -i zeros_n_n_n=0\n  local -i zeros_n_n_n_i=0\n  local -i zeros_n_n_n_n=0\n  local\
  \ -i zeros_n_n_n_n_i=0\n  local -i zeros_n_n_n_n_n=0\n  local -i zeros_n_n_n_n_n_i=0\n\
  \  local -i zeros_n_n_n_n_n_n=0\n  local -i zeros_n_n_n_n_n_n_i=0\n  local -i zeros_n_n_n_n_n_n_n=0\n\
  \  local -i zeros_n_n_n_n_n_n_n_i=0\n  local -i zeros_n_n_n_n_n_n_n_n=0\n  local\
  \ -i zeros_n_n_n_n_n_n_n_n_i=0\n  local -i zeros_n_n_n_n_n_n_n_n_n=0\n  local -i\
  \ zeros_n_n_n_n_n_n_n_n_n_i=0\n  local -i zeros_n_n_n"
- "    local -a a=($1)\n    local -a b=()\n    local -i i=0\n    local -i j=0\n  \
  \  local -i k=0\n    local -i n=${#a[@]}\n    local -i m=0\n    local -i p=0\n \
  \   local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local\
  \ -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n\
  \    local -i z=0\n    local -i A=0\n    local -i B=0\n    local -i C=0\n    local\
  \ -i D=0\n    local -i E=0\n    local -i F=0\n    local -i G=0\n    local -i H=0\n\
  \    local -i I=0\n    local -i J=0\n    local -i K=0\n    local -i L=0\n    local\
  \ -i M=0\n    local -i N=0\n    local -i O=0\n    local -i P=0\n    local -i Q=0\n\
  \    local -i R=0\n    local -i S=0\n    local -i T=0\n    local -i U=0\n    local\
  \ -i V=0\n    local -i W=0\n    local -i X=0\n    local -i Y=0\n    local -i Z=0\n\
  \    local -i aa=0\n    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n  \
  \  local -i ae=0\n    local -i af=0\n    local -i ag=0\n    local -i ah=0\n    local\
  \ -i ai=0\n    local -i aj=0\n    local -i ak=0\n    local -i al=0\n    local -i\
  \ am=0\n    local -i an=0\n    local -i ao=0\n    local -i ap=0\n    local -i aq=0\n\
  \    local -i ar=0\n    local"
- "  local -a arr=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
  \ -i len=${#arr[@]}\n  local -i found=0\n  local -i val=0\n  for ((i=0; i<len; i++));\
  \ do\n    val=${arr[i]}\n    if ((val % 2 == 0)); then\n      if ((found == 0));\
  \ then\n        min=val\n        min_i=i\n        found=1\n      elif ((val < min));\
  \ then\n        min=val\n        min_i=i\n      fi\n    fi\n  done\n  if ((found\
  \ == 0)); then\n    echo \"[]\"\n  else\n    echo \"[$min, $min_i]\"\n  fi"
- "    local -a nodes=($1)\n    local -i min_even_value=1000000\n    local -i min_even_index=1000000\n\
  \    local -i i=0\n    local -i n=${#nodes[@]}\n    local -i node_value\n    local\
  \ -i node_index\n    for ((i=0; i<n; i++)); do\n        node_value=${nodes[$i]}\n\
  \        if ((node_value % 2 == 0)); then\n            if ((node_value < min_even_value));\
  \ then\n                min_even_value=$node_value\n                min_even_index=$i\n\
  \            fi\n        fi\n    done\n    if ((min_even_value < 1000000)); then\n\
  \        echo \"[$min_even_value, $min_even_index]\"\n    else\n        echo \"\
  []\"\n    fi"
- "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n  local -i min_even_index=1000000000\n\
  \  local -i i=0\n  local -i n=${#nodes[@]}\n  for ((i=0; i<n; i++)); do\n    if\
  \ (( nodes[i] % 2 == 0 )); then\n      if (( nodes[i] < min_even_value )); then\n\
  \        min_even_value=nodes[i]\n        min_even_index=i\n      elif (( nodes[i]\
  \ == min_even_value )); then\n        if (( i < min_even_index )); then\n      \
  \    min_even_index=i\n        fi\n      fi\n    fi\n  done\n  if (( min_even_value\
  \ < 1000000000 )); then\n    echo \"[$min_even_value, $min_even_index]\"\n  else\n\
  \    echo \"[]\"\n  fi"
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local -a\
  \ result=()\n  local i=0\n  for n in \"${nodes[@]}\"; do\n    if [[ $((n % 2)) -eq\
  \ 0 ]]; then\n      evens+=($n)\n      evens_idx+=($i)\n    fi\n    ((i++))\n  done\n\
  \  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local min_even=${evens[0]}\n\
  \    local min_even_idx=${evens_idx[0]}\n    for ((i=1; i<${#evens[@]}; i++)); do\n\
  \      if [[ ${evens[$i]} -lt $min_even ]]; then\n        min_even=${evens[$i]}\n\
  \        min_even_idx=${evens_idx[$i]}\n      fi\n    done\n    echo \"[$min_even,\
  \ $min_even_idx]\"\n  fi"
- "  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n  local\
  \ index=0\n  for node in $nodes; do\n    if [ $((node % 2)) -eq 0 ]; then\n    \
  \  if [ -z \"$min_even_value\" ] || [ $node -lt $min_even_value ]; then\n      \
  \  min_even_value=$node\n        min_even_index=$index\n      fi\n    fi\n    index=$((index\
  \ + 1))\n  done\n  if [ -z \"$min_even_value\" ]; then\n    echo \"[]\"\n  else\n\
  \    echo \"[$min_even_value, $min_even_index]\"\n  fi"
- "    local -a nodes=($1)\n    local -a evens=()\n    for node in \"${nodes[@]}\"\
  ; do\n        if [[ $((node % 2)) -eq 0 ]]; then\n            evens+=($node)\n \
  \       fi\n    done\n    if [[ ${#evens[@]} -eq 0 ]]; then\n        echo \"[]\"\
  \n    else\n        local min=${evens[0]}\n        local min_index=0\n        for\
  \ ((i=1; i<${#evens[@]}; i++)); do\n            if [[ ${evens[i]} -lt $min ]]; then\n\
  \                min=${evens[i]}\n                min_index=$i\n            fi\n\
  \        done\n        echo \"[$min, $min_index]\"\n    fi"
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min=100000000\n  local -i min_i=0\n\
  \  local -i len=${#nodes[@]}\n  for ((i=0; i<len; i++)); do\n    if [[ ${nodes[$i]}\
  \ -eq 0 ]]; then\n      echo \"[0, $i]\"\n      return\n    fi\n    if [[ ${nodes[$i]}\
  \ -lt $min && $((nodes[$i] % 2)) -eq 0 ]]; then\n      min=${nodes[$i]}\n      min_i=$i\n\
  \    fi\n  done\n  if [[ $min -eq 100000000 ]]; then\n    echo \"[]\"\n  else\n\
  \    echo \"[$min, $min_i]\"\n  fi"
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n  local\
  \ -a result=()\n  local i=0\n  for n in \"${nodes[@]}\"; do\n    if [[ $((n % 2))\
  \ -eq 0 ]]; then\n      evens+=($n)\n      evens_index+=($i)\n    fi\n    ((i++))\n\
  \  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local\
  \ min=${evens[0]}\n    local min_index=0\n    for ((i=1; i<${#evens[@]}; i++));\
  \ do\n      if [[ ${evens[$i]} -lt $min ]]; then\n        min=${evens[$i]}\n   \
  \     min_index=$i\n      fi\n    done\n    echo \"[$min, ${evens_index[$min_index]}]\"\
  \n  fi"
- "  local -a nodes=($1)\n  local -i min_even_value=10000000000\n  local -i min_even_index=10000000000\n\
  \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i node\n  for ((i=0; i<n; i++));\
  \ do\n    node=${nodes[$i]}\n    if ((node % 2 == 0)); then\n      if ((node < min_even_value));\
  \ then\n        min_even_value=$node\n        min_even_index=$i\n      elif ((node\
  \ == min_even_value)); then\n        if ((i < min_even_index)); then\n         \
  \ min_even_index=$i\n        fi\n      fi\n    fi\n  done\n  if ((min_even_value\
  \ == 10000000000)); then\n    echo \"[]\"\n  else\n    echo \"[$min_even_value,\
  \ $min_even_index]\"\n  fi"
- "  local nodes=$1\n  local smallest_value=\n  local smallest_index=\n  local i=1\n\
  \  for node in $nodes; do\n    if [[ $node -eq 0 ]]; then\n      smallest_value=0\n\
  \      smallest_index=$i\n      break\n    elif [[ $node -gt 0 && $node%2 -eq 0\
  \ ]]; then\n      if [[ -z $smallest_value || $node -lt $smallest_value ]]; then\n\
  \        smallest_value=$node\n        smallest_index=$i\n      fi\n    fi\n   \
  \ ((i++))\n  done\n  if [[ -z $smallest_value ]]; then\n    echo \"[]\"\n  else\n\
  \    echo \"[ $smallest_value, $smallest_index ]\"\n  fi"
- "  local nodes=\"$1\"\n  local min=\n  local min_index=\n  local i=0\n  for node\
  \ in $nodes; do\n    if (( node % 2 == 0 )); then\n      if [[ -z $min ]]; then\n\
  \        min=$node\n        min_index=$i\n      elif (( node < min )); then\n  \
  \      min=$node\n        min_index=$i\n      fi\n    fi\n    (( i++ ))\n  done\n\
  \  if [[ -z $min ]]; then\n    echo \"[]\"\n  else\n    echo \"[$min, $min_index]\"\
  \n  fi"
- "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n  local -i min_even_index=1000000000\n\
  \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i value\n  local -i index\n\
  \  for ((i=0; i<n; i++)); do\n    value=${nodes[$i]}\n    if ((value % 2 == 0 &&\
  \ value < min_even_value)); then\n      min_even_value=$value\n      min_even_index=$i\n\
  \    fi\n  done\n  if ((min_even_value < 1000000000)); then\n    echo \"[$min_even_value,\
  \ $min_even_index]\"\n  else\n    echo \"[]\"\n  fi"
- "    local -a nodes=($1)\n    local -i i=0\n    local -i min_idx=-1\n    local -i\
  \ min_val=0\n    local -i len=${#nodes[@]}\n    local -i val=0\n    for ((i=0; i<len;\
  \ i++)); do\n        val=${nodes[i]}\n        if ((val % 2 == 0)); then\n      \
  \      if ((min_idx == -1)); then\n                min_idx=$i\n                min_val=$val\n\
  \            elif ((val < min_val)); then\n                min_idx=$i\n        \
  \        min_val=$val\n            fi\n        fi\n    done\n    if ((min_idx ==\
  \ -1)); then\n        echo \"[]\"\n    else\n        echo \"[$min_val, $min_idx]\"\
  \n    fi"
- "  local -a arr=( $1 )\n  local -i min_even_val=999999\n  local -i min_even_idx=999999\n\
  \  local -i i=0\n  local -i len=${#arr[@]}\n  local -i val\n  local -i idx\n  for\
  \ (( i=0; i<len; i++ )); do\n    val=${arr[$i]}\n    if (( val % 2 == 0 )); then\n\
  \      if (( val < min_even_val )); then\n        min_even_val=$val\n        min_even_idx=$i\n\
  \      fi\n    fi\n  done\n  if (( min_even_val == 999999 )); then\n    echo \"\
  []\"\n  else\n    echo \"[ $min_even_val, $min_even_idx ]\"\n  fi"
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n  local -i min_value=0\n\
  \  local -i is_first=1\n  local -i is_even=0\n  local -i is_smaller=0\n  for i in\
  \ \"${!nodes[@]}\"; do\n    is_even=$((nodes[i] % 2))\n    if [[ $is_even -eq 0\
  \ ]]; then\n      if [[ $is_first -eq 1 ]]; then\n        min_value=${nodes[i]}\n\
  \        min_index=$i\n        is_first=0\n      else\n        is_smaller=$((min_value\
  \ > nodes[i]))\n        if [[ $is_smaller -eq 1 ]]; then\n          min_value=${nodes[i]}\n\
  \          min_index=$i\n        fi\n      fi\n    fi\n  done\n  if [[ $is_first\
  \ -eq 0 ]]; then\n    echo \"[$min_value, $min_index]\"\n  else\n    echo \"[]\"\
  \n  fi"
- "  local -a a=()\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
  \ -i n=0\n  local -i v=0\n  for v in $1; do\n    if (( v % 2 == 0 )); then\n   \
  \   a[i]=$v\n      (( i++ ))\n    fi\n  done\n  if (( ${#a[@]} == 0 )); then\n \
  \   echo \"[]\"\n    return\n  fi\n  min=${a[0]}\n  min_i=0\n  for (( i=1; i<${#a[@]};\
  \ i++ )); do\n    if (( a[i] < min )); then\n      min=${a[i]}\n      min_i=$i\n\
  \    fi\n  done\n  echo \"[ $min, $min_i ]\""
- "  local -a a=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
  \ -i n=${#a[@]}\n  local -i found=0\n  for ((i=0; i<n; i++)); do\n    if ((a[i]\
  \ % 2 == 0)); then\n      if ((found == 0)); then\n        min=a[i]\n        min_i=i\n\
  \        found=1\n      elif ((a[i] < min)); then\n        min=a[i]\n        min_i=i\n\
  \      fi\n    fi\n  done\n  if ((found == 0)); then\n    echo \"[]\"\n  else\n\
  \    echo \"[$min, $min_i]\"\n  fi"
- "  local -a a=($1)\n  local -i i j\n  local -i min=999999999\n  local -i min_i=-1\n\
  \  for ((i=0; i<${#a[@]}; i++)); do\n    if ((a[i] % 2 == 0 && a[i] < min)); then\n\
  \      min=a[i]\n      min_i=i\n    fi\n  done\n  if ((min_i >= 0)); then\n    echo\
  \ \"[${min}, ${min_i}]\"\n  else\n    echo \"[]\"\n  fi"
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=-1\n  local -i min_value=-1\n\
  \  for node in \"${nodes[@]}\"; do\n    if (( node % 2 == 0 )); then\n      if ((\
  \ min_value == -1 || node < min_value )); then\n        min_value=$node\n      \
  \  min_index=$i\n      fi\n    fi\n    (( i++ ))\n  done\n  if (( min_index == -1\
  \ )); then\n    echo \"[]\"\n  else\n    echo \"[$min_value, $min_index]\"\n  fi"
- "  local -a arr=()\n  local -i i=0\n  local -i min_index=-1\n  local -i min_value=0\n\
  \  local -i value=0\n  local -i len=0\n  local -i min_even=0\n  local -i min_even_index=-1\n\
  \  local -i even=0\n  local -i odd=0\n  local -i even_count=0\n  local -i odd_count=0\n\
  \  local -i zero_count=0\n  local -i zero_index=-1\n  local -i zero_value=0\n  local\
  \ -i zero_count_index=-1\n  local -i zero_count_value=0\n  local -i zero_count_index_value=0\n\
  \  local -i zero_count_index_index=0\n  local -i zero_count_index_count=0\n  local\
  \ -i zero_count_index_index_count=0\n  local -i zero_count_index_index_value=0\n\
  \  local -i zero_count_index_index_index=0\n  local -i zero_count_index_index_count_value=0\n\
  \  local -i zero_count_index_index_count_index=0\n  local -i zero_count_index_index_count_count=0\n\
  \  local -i zero_count_index_index_count_index_value=0\n  local -i zero_count_index_index_count_index_index=0\n\
  \  local -i zero_count_index_index_count_index_count=0\n  local -i zero_count_index_index_count_index_index_value=0\n\
  \  local -i zero_count_index_index_count_index_index_index=0\n  local -i zero_count_index_index_count_index_index_count=0\n\
  \  local -i zero_count_index_index_count_index_index_index_value=0\n  local -i zero_count_index_index_count_index_index_index_index=0\n\
  \  local -i zero_count_index_index_count_index_index_index_count=0\n  local -i zero"
- "  local -a a=($1)\n  local -a b=()\n  local i\n  for ((i=0; i<${#a[@]}; i++));\
  \ do\n    if ((a[i]%2==0)); then\n      b+=(${a[i]} $i)\n    fi\n  done\n  if ((${#b[@]}==0));\
  \ then\n    echo \"[]\"\n  else\n    local -a c=($(echo \"${b[@]}\" | tr ' ' '\\\
  n' | sort -n | head -n1))\n    echo \"[${c[0]}, ${c[1]}]\"\n  fi"
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
  \  local i=0\n  local j=0\n  local k=0\n  local n=${#nodes[@]}\n  for ((i=0; i<n;\
  \ i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      evens[$j]=$i\n      ((j++))\n\
  \    elif [[ $(( ${nodes[$i]} % 2 )) -eq 0 ]]; then\n      evens[$j]=$i\n      ((j++))\n\
  \    else\n      odds[$k]=$i\n      ((k++))\n    fi\n  done\n  if [[ ${#evens[@]}\
  \ -eq 0 ]]; then\n    echo \"[]\"\n  else\n    result[0]=${nodes[${evens[0]}]}\n\
  \    result[1]=${evens[0]}\n    for ((i=1; i<${#evens[@]}; i++)); do\n      if [[\
  \ ${nodes[${evens[$i]}]} -lt ${result[0]} ]]; then\n        result[0]=${nodes[${evens[$i]}]}\n\
  \        result[1]=${evens[$i]}\n      fi\n    done\n    echo \"[${result[0]}, ${result[1]}]\"\
  \n  fi"
- "\tlocal -a a=($1)\n\tlocal -i i=0\n\tlocal -i min=0\n\tlocal -i min_i=0\n\tlocal\
  \ -i n=${#a[@]}\n\tlocal -i found=0\n\tfor ((i=0; i<n; i++)); do\n\t\tif ((a[i]\
  \ % 2 == 0)); then\n\t\t\tif ((found == 0)); then\n\t\t\t\tmin=a[i]\n\t\t\t\tmin_i=i\n\
  \t\t\t\tfound=1\n\t\t\telif ((a[i] < min)); then\n\t\t\t\tmin=a[i]\n\t\t\t\tmin_i=i\n\
  \t\t\tfi\n\t\tfi\n\tdone\n\tif ((found == 0)); then\n\t\techo \"[]\"\n\telse\n\t\
  \techo \"[${min}, ${min_i}]\"\n\tfi"
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n  local -i min_value=0\n\
  \  local -i n_nodes=${#nodes[@]}\n  local -i n_evens=0\n  local -i value=0\n  for\
  \ ((i=0; i<n_nodes; i++)); do\n    value=${nodes[i]}\n    if ((value % 2 == 0));\
  \ then\n      n_evens=$((n_evens + 1))\n      if ((n_evens == 1)); then\n      \
  \  min_value=$value\n        min_index=$i\n      else\n        if ((value < min_value));\
  \ then\n          min_value=$value\n          min_index=$i\n        fi\n      fi\n\
  \    fi\n  done\n  if ((n_evens > 0)); then\n    echo \"[$min_value, $min_index]\"\
  \n  else\n    echo \"[]\"\n  fi"
- "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n  local -i min_even_index=1000000000\n\
  \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i value\n  local -i index\n\
  \  for ((i=0; i<n; i++)); do\n    value=${nodes[$i]}\n    if ((value % 2 == 0 &&\
  \ value < min_even_value)); then\n      min_even_value=$value\n      min_even_index=$i\n\
  \    fi\n  done\n  if ((min_even_value == 1000000000)); then\n    echo \"[]\"\n\
  \  else\n    echo \"[$min_even_value, $min_even_index]\"\n  fi"
- "  local -a array\n  local -i i\n  local -i min_even_value\n  local -i min_even_index\n\
  \  local -i value\n  local -i index\n  IFS=' ' read -r -a array <<< \"$1\"\n  min_even_value=100000000\n\
  \  min_even_index=0\n  index=0\n  for i in \"${array[@]}\"; do\n    ((++index))\n\
  \    ((value=i))\n    if ((value%2==0)); then\n      if ((value<min_even_value));\
  \ then\n        min_even_value=$value\n        min_even_index=$index\n      fi\n\
  \    fi\n  done\n  if ((min_even_value==100000000)); then\n    echo \"[]\"\n  else\n\
  \    echo \"[$min_even_value, $min_even_index]\"\n  fi"
- "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n  local -i min_even_index=1000000000\n\
  \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if (( node % 2 == 0 && node\
  \ < min_even_value )); then\n      min_even_value=$node\n      min_even_index=$i\n\
  \    fi\n    (( i++ ))\n  done\n  if (( min_even_value == 1000000000 )); then\n\
  \    echo \"[]\"\n  else\n    echo \"[$min_even_value, $min_even_index]\"\n  fi"
- "    local -a nodes=($1)\n    local -i min_index=0\n    local -i min_value=0\n \
  \   local -i i=0\n    local -i n=${#nodes[@]}\n    local -i found=0\n    local -i\
  \ value=0\n    for ((i=0; i<n; i++)); do\n        value=${nodes[i]}\n        if\
  \ ((value % 2 == 0)); then\n            if ((found == 0)); then\n              \
  \  min_value=$value\n                min_index=$i\n                found=1\n   \
  \         elif ((value < min_value)); then\n                min_value=$value\n \
  \               min_index=$i\n            fi\n        fi\n    done\n    if ((found\
  \ == 0)); then\n        echo \"[]\"\n    else\n        echo \"[$min_value, $min_index]\"\
  \n    fi"
- "  local -a arr=()\n  local -i i=0\n  local -i j=0\n  local -i min=0\n  local -i\
  \ min_i=0\n  local -i min_j=0\n  local -i n=0\n  local -i n_even=0\n  local -i n_odd=0\n\
  \  local -i sum=0\n  local -i sum_even=0\n  local -i sum_odd=0\n  local -i val=0\n\
  \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i z_i=0\n  local -i z_j=0\n\
  \  local -i z_k=0\n  local -i z_l=0\n  local -i z_m=0\n  local -i z_n=0\n  local\
  \ -i z_o=0\n  local -i z_p=0\n  local -i z_q=0\n  local -i z_r=0\n  local -i z_s=0\n\
  \  local -i z_t=0\n  local -i z_u=0\n  local -i z_v=0\n  local -i z_w=0\n  local\
  \ -i z_x=0\n  local -i z_y=0\n  local -i z_z=0\n  local -i z_aa=0\n  local -i z_ab=0\n\
  \  local -i z_ac=0\n  local -i z_ad=0\n  local -i z_ae=0\n  local -i z_af=0\n  local\
  \ -i z_ag=0\n  local -i z_ah=0\n  local -i z_ai=0\n  local -i z_aj=0\n  local -i\
  \ z_ak=0\n  local -i z_al=0\n  local -i z_am=0\n  local -i z_an=0\n  local -i z_ao=0\n\
  \  local -i z_ap=0\n  local -i z_aq=0\n  local -i z_ar=0\n  local -i z_as=0\n "
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n  local -i min_value=0\n\
  \  local -i min_even_index=0\n  local -i min_even_value=0\n  local -i found_even=0\n\
  \  for i in \"${!nodes[@]}\"; do\n    if (( nodes[i] % 2 == 0 )); then\n      if\
  \ (( found_even == 0 )); then\n        min_even_index=$i\n        min_even_value=${nodes[i]}\n\
  \        found_even=1\n      elif (( nodes[i] < min_even_value )); then\n      \
  \  min_even_index=$i\n        min_even_value=${nodes[i]}\n      fi\n    fi\n  done\n\
  \  if (( found_even == 0 )); then\n    echo \"[]\"\n  else\n    echo \"[${min_even_value},\
  \ ${min_even_index}]\"\n  fi"
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n  local -i\
  \ min_even_index=0\n  local -i min_even_count=0\n  local -i min_even_first_index=0\n\
  \  local -i min_even_last_index=0\n  local -i n=${#nodes[@]}\n  local -i value=0\n\
  \  local -i count=0\n  local -i first_index=0\n  local -i last_index=0\n  local\
  \ -i is_even=0\n  local -i is_first=0\n  local -i is_last=0\n  local -i is_min_even=0\n\
  \  local -i is_min_even_first=0\n  local -i is_min_even_last=0\n  local -i is_min_even_count=0\n\
  \  local -i is_min_even_first_index=0\n  local -i is_min_even_last_index=0\n  local\
  \ -i is_min_even_index=0\n  local -i is_min_even_first_index_last=0\n  local -i\
  \ is_min_even_first_index_first=0\n  local -i is_min_even_last_index_last=0\n  local\
  \ -i is_min_even_last_index_first=0\n  local -i is_min_even_index_last=0\n  local\
  \ -i is_min_even_index_first=0\n  local -i is_min_even_count_last=0\n  local -i\
  \ is_min_even_count_first=0\n  local -i is_min_even_first_last=0\n  local -i is_min_even_first_first=0\n\
  \  local -i is_min_even_last_last=0\n  local -i is_min_even_last_first=0\n  local\
  \ -i is_min_even_first_index_last_last=0\n  local -i is_min_even_first_index_last_first=0\n\
  \  local -i is_min_even"
- "    local -a arr=($1)\n    local -i i=0\n    local -i min=0\n    local -i min_i=0\n\
  \    local -i len=${#arr[@]}\n    local -i found=0\n    for ((i=0; i<len; i++));\
  \ do\n        if [[ ${arr[i]} -eq 0 ]]; then\n            if [[ $found -eq 0 ]];\
  \ then\n                min=0\n                min_i=$i\n                found=1\n\
  \            fi\n        elif [[ $(( ${arr[i]} % 2 )) -eq 0 ]]; then\n         \
  \   if [[ $found -eq 0 ]]; then\n                min=${arr[i]}\n               \
  \ min_i=$i\n                found=1\n            elif [[ ${arr[i]} -lt $min ]];\
  \ then\n                min=${arr[i]}\n                min_i=$i\n            fi\n\
  \        fi\n    done\n    if [[ $found -eq 1 ]]; then\n        echo \"[$min, $min_i]\"\
  \n    else\n        echo \"[]\"\n    fi"
- "  local -a arr=()\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
  \ -i min_found=0\n  local -i len=0\n  local -i val=0\n  local -i first=0\n  local\
  \ -i first_i=0\n  local -i first_found=0\n  local -i even=0\n  local -i even_found=0\n\
  \  local -i even_i=0\n  local -i even_val=0\n  local -i even_first=0\n  local -i\
  \ even_first_i=0\n  local -i even_first_found=0\n  local -i even_min=0\n  local\
  \ -i even_min_i=0\n  local -i even_min_found=0\n  local -i even_min_first=0\n  local\
  \ -i even_min_first_i=0\n  local -i even_min_first_found=0\n  local -i even_min_first_val=0\n\
  \  local -i even_min_first_val_i=0\n  local -i even_min_first_val_found=0\n  local\
  \ -i even_min_first_val_first=0\n  local -i even_min_first_val_first_i=0\n  local\
  \ -i even_min_first_val_first_found=0\n  local -i even_min_first_val_first_val=0\n\
  \  local -i even_min_first_val_first_val_i=0\n  local -i even_min_first_val_first_val_found=0\n\
  \  local -i even_min_first_val_first_val_first=0\n  local -i even_min_first_val_first_val_first_i=0\n\
  \  local -i even_min_first_val_first_val_first_found=0\n  local -i even_min_first_val_first_val_first_val=0\n\
  \  local -i even_min_first_val_first_val_first_val_i=0\n  local -i even_min_first_val"
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min_i=0\n  local -i min_value=0\n\
  \  local -i value=0\n  local -i found=0\n  for value in \"${nodes[@]}\"; do\n  \
  \  if (( value % 2 == 0 )); then\n      if (( found == 0 )); then\n        min_value=$value\n\
  \        min_i=$i\n        found=1\n      elif (( value < min_value )); then\n \
  \       min_value=$value\n        min_i=$i\n      fi\n    fi\n    (( i++ ))\n  done\n\
  \  if (( found == 0 )); then\n    echo \"[]\"\n  else\n    echo \"[$min_value, $min_i]\"\
  \n  fi"
- "  local -a arr=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local -a result=()\n\
  \  local i=0\n  for n in \"${arr[@]}\"; do\n    if [[ $((n % 2)) -eq 0 ]]; then\n\
  \      evens+=($n)\n      evens_idx+=($i)\n    fi\n    i=$((i + 1))\n  done\n  if\
  \ [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local min_even=${evens[0]}\n\
  \    local min_even_idx=${evens_idx[0]}\n    for i in \"${!evens[@]}\"; do\n   \
  \   if [[ ${evens[$i]} -lt $min_even ]]; then\n        min_even=${evens[$i]}\n \
  \       min_even_idx=${evens_idx[$i]}\n      fi\n    done\n    echo \"[$min_even,\
  \ $min_even_idx]\"\n  fi"
- "  local -a nodes=($1)\n  local -a evens\n  local -a odds\n  for node in \"${nodes[@]}\"\
  ; do\n    if (( node % 2 == 0 )); then\n      evens+=($node)\n    else\n      odds+=($node)\n\
  \    fi\n  done\n  if (( ${#evens[@]} == 0 )); then\n    echo \"[]\"\n  else\n \
  \   local min_even=${evens[0]}\n    local min_even_idx=0\n    for (( i=1; i<${#evens[@]};\
  \ i++ )); do\n      if (( evens[i] < min_even )); then\n        min_even=${evens[i]}\n\
  \        min_even_idx=$i\n      fi\n    done\n    echo \"[$min_even, $min_even_idx]\"\
  \n  fi"
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n  local -i\
  \ min_even_index=0\n  local -i min_even_count=0\n  local -i min_even_first_index=0\n\
  \  local -i min_even_last_index=0\n  local -i min_even_first_value=0\n  local -i\
  \ min_even_last_value=0\n  local -i even_count=0\n  local -i even_first_index=0\n\
  \  local -i even_last_index=0\n  local -i even_first_value=0\n  local -i even_last_value=0\n\
  \  local -i even_value=0\n  local -i node_count=${#nodes[@]}\n  local -i node_value=0\n\
  \  local -i node_index=0\n  local -i node_first_index=0\n  local -i node_last_index=0\n\
  \  local -i node_first_value=0\n  local -i node_last_value=0\n  local -i node_count=${#nodes[@]}\n\
  \  local -i node_value=0\n  local -i node_index=0\n  local -i node_first_index=0\n\
  \  local -i node_last_index=0\n  local -i node_first_value=0\n  local -i node_last_value=0\n\
  \  local -i node_count=${#nodes[@]}\n  local -i node_value=0\n  local -i node_index=0\n\
  \  local -i node_first_index=0\n  local -i node_last_index=0\n  local -i node_first_value=0\n\
  \  local -i node_last_value=0\n  local -i node_count=${#nodes[@]}\n  local -i node_value=0\n\
  \  local -i node_index=0\n  local -i node_first_index=0\n  local -i node_last_index=0\n\
  \  local -i node_first_value=0\n  local -i node_last_value"
- "    local -a a=($1)\n    local -i i=0\n    local -i min_i=0\n    local -i min_v=0\n\
  \    local -i v=0\n    for ((i=0; i<${#a[@]}; i++)); do\n        v=${a[$i]}\n  \
  \      if ((v % 2 == 0)); then\n            if ((v < min_v)); then\n           \
  \     min_v=$v\n                min_i=$i\n            fi\n        fi\n    done\n\
  \    if ((min_v == 0)); then\n        echo \"[]\"\n    else\n        echo \"[$min_v,\
  \ $min_i]\"\n    fi"
- "  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n  local\
  \ i=0\n  for node in $nodes; do\n    if [[ $((node%2)) -eq 0 ]]; then\n      if\
  \ [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
  \        min_even_index=$i\n      fi\n    fi\n    i=$((i+1))\n  done\n  if [[ -z\
  \ $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[$min_even_value,\
  \ $min_even_index]\"\n  fi"
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local -a\
  \ result=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=${#nodes[@]}\n\
  \  local -i m=0\n  local -i min_idx=0\n  local -i min_val=0\n  local -i val=0\n\
  \  for ((i=0; i<n; i++)); do\n    val=${nodes[i]}\n    if ((val % 2 == 0)); then\n\
  \      evens[j]=$val\n      evens_idx[j]=$i\n      ((j++))\n    fi\n  done\n  m=${#evens[@]}\n\
  \  if ((m == 0)); then\n    echo \"[]\"\n    return\n  fi\n  min_val=${evens[0]}\n\
  \  min_idx=${evens_idx[0]}\n  for ((k=1; k<m; k++)); do\n    val=${evens[k]}\n \
  \   if ((val < min_val)); then\n      min_val=$val\n      min_idx=${evens_idx[k]}\n\
  \    fi\n  done\n  result[0]=$min_val\n  result[1]=$min_idx\n  echo \"[${result[@]}]\""
- "  local -a a=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
  \ -i min_cnt=0\n  local -i cnt=0\n  local -i len=${#a[@]}\n  local -i v\n  local\
  \ -i v_i\n  local -i v_cnt\n  for ((i=0; i<len; i++)); do\n    v=${a[i]}\n    if\
  \ ((v % 2 == 0)); then\n      v_i=$i\n      v_cnt=1\n      for ((j=i+1; j<len; j++));\
  \ do\n        if ((a[j] == v)); then\n          ((v_cnt++))\n        fi\n      done\n\
  \      if ((v_cnt > min_cnt)); then\n        min=$v\n        min_i=$v_i\n      \
  \  min_cnt=$v_cnt\n      elif ((v_cnt == min_cnt)); then\n        if ((v_i < min_i));\
  \ then\n          min=$v\n          min_i=$v_i\n          min_cnt=$v_cnt\n     \
  \   fi\n      fi\n    fi\n  done\n  if ((min_cnt > 0)); then\n    echo \"[$min,\
  \ $min_i]\"\n  else\n    echo \"[]\"\n  fi"
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=-1\n  local -i min_value=-1\n\
  \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if ((nodes[i] % 2 == 0)); then\n  \
  \    if ((min_value == -1 || nodes[i] < min_value)); then\n        min_value=nodes[i]\n\
  \        min_index=i\n      fi\n    fi\n  done\n  if ((min_index == -1)); then\n\
  \    echo \"[]\"\n  else\n    echo \"[${min_value}, ${min_index}]\"\n  fi"
- "    local -a nodes=()\n    local -i i=0\n    local -i min=0\n    local -i min_idx=0\n\
  \    local -i n=0\n    local -i n_even=0\n    local -i n_odd=0\n    local -i n_zero=0\n\
  \    local -i n_nonzero=0\n    local -i n_nonzero_even=0\n    local -i n_nonzero_odd=0\n\
  \    local -i n_nonzero_zero=0\n    local -i n_nonzero_nonzero=0\n    local -i n_nonzero_nonzero_even=0\n\
  \    local -i n_nonzero_nonzero_odd=0\n    local -i n_nonzero_nonzero_zero=0\n \
  \   local -i n_nonzero_nonzero_nonzero=0\n    local -i n_nonzero_nonzero_nonzero_even=0\n\
  \    local -i n_nonzero_nonzero_nonzero_odd=0\n    local -i n_nonzero_nonzero_nonzero_zero=0\n\
  \    local -i n_nonzero_nonzero_nonzero_nonzero=0\n    local -i n_nonzero_nonzero_nonzero_nonzero_even=0\n\
  \    local -i n_nonzero_nonzero_nonzero_nonzero_odd=0\n    local -i n_nonzero_nonzero_nonzero_nonzero_zero=0\n\
  \    local -i n_nonzero_nonzero_nonzero_nonzero_nonzero=0\n    local -i n_nonzero_nonzero_nonzero_nonzero_nonzero_even=0\n\
  \    local -i n_nonzero_nonzero_nonzero_nonzero_nonzero_odd=0\n    local -i n_nonzero_nonzero_nonzero_nonzero_nonzero_zero=0\n\
  \    local -i n_nonzero_nonzero_nonzero_nonzero_nonzero_nonzero=0\n    local -i\
  \ n_nonzero_nonzero_nonzero_nonzero_nonzero_nonzero_even=0\n    local -i n_nonzero_nonzero_nonzero"
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
  \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
  \      evens+=($i)\n    elif [[ ${nodes[$i]} -eq 1 ]]; then\n      odds+=($i)\n\
  \    elif [[ $((${nodes[$i]} % 2)) -eq 0 ]]; then\n      evens+=($i)\n    else\n\
  \      odds+=($i)\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    result=()\n\
  \  elif [[ ${#evens[@]} -eq 1 ]]; then\n    result=(${nodes[${evens[0]}]} ${evens[0]})\n\
  \  else\n    local -i min=${nodes[${evens[0]}]}\n    local -i min_index=${evens[0]}\n\
  \    for ((i=1; i<${#evens[@]}; i++)); do\n      if [[ ${nodes[${evens[$i]}]} -lt\
  \ $min ]]; then\n        min=${nodes[${evens[$i]}]}\n        min_index=${evens[$i]}\n\
  \      fi\n    done\n    result=($min $min_index)\n  fi\n  echo ${result[@]}"
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
  \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n\
  \  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n\
  \  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n\
  \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n\
  \  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
  \ gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local\
  \ -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n\
  \  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i\
  \ uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local\
  \ -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n\
  \  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local\
  \ -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n"
- "  local -a a=($1)\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n\
  \  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n\
  \  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n\
  \  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n\
  \  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i\
  \ ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local\
  \ -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n\
  \  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i\
  \ tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local\
  \ -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n\
  \  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local\
  \ -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n\
  \  local -i mmm=0\n  local -i nnn=0\n  local -i ooo="
- "  local -a a=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
  \ -i len=${#a[@]}\n  local -i found=0\n  for (( i=0; i<len; i++ )); do\n    if ((\
  \ a[i] % 2 == 0 )); then\n      if (( found == 0 )); then\n        min=a[i]\n  \
  \      min_i=i\n        found=1\n      elif (( a[i] < min )); then\n        min=a[i]\n\
  \        min_i=i\n      fi\n    fi\n  done\n  if (( found == 0 )); then\n    echo\
  \ \"[]\"\n  else\n    echo \"[$min, $min_i]\"\n  fi"
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
  \  local i=0\n  local j=0\n  local k=0\n  local n=${#nodes[@]}\n  local m=0\n  local\
  \ min=0\n  local min_index=0\n  for ((i=0; i<n; i++)); do\n    if ((nodes[i] % 2\
  \ == 0)); then\n      evens[j]=${nodes[i]}\n      j=$((j+1))\n    else\n      odds[k]=${nodes[i]}\n\
  \      k=$((k+1))\n    fi\n  done\n  m=${#evens[@]}\n  if ((m == 0)); then\n   \
  \ result=()\n  else\n    min=${evens[0]}\n    min_index=0\n    for ((i=1; i<m; i++));\
  \ do\n      if ((evens[i] < min)); then\n        min=${evens[i]}\n        min_index=$i\n\
  \      fi\n    done\n    result=($min $min_index)\n  fi\n  echo ${result[@]}"
- "  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n  local\
  \ index=0\n  for node in $nodes; do\n    if [ $((node % 2)) -eq 0 ]; then\n    \
  \  if [ -z \"$min_even_value\" ] || [ $node -lt $min_even_value ]; then\n      \
  \  min_even_value=$node\n        min_even_index=$index\n      fi\n    fi\n    index=$((index\
  \ + 1))\n  done\n  if [ -z \"$min_even_value\" ]; then\n    echo \"[]\"\n  else\n\
  \    echo \"[$min_even_value, $min_even_index]\"\n  fi"
- "  local -a arr=()\n  local -i i=0\n  local -i min=0\n  local -i min_idx=0\n  local\
  \ -i idx=0\n  local -i val=0\n  local -i len=0\n  local -i is_even=0\n  local -i\
  \ is_first=1\n  local -i is_found=0\n  local -i is_empty=1\n  local -i is_first_even=1\n\
  \  local -i is_first_odd=1\n  local -i is_first_zero=1\n  local -i is_first_nonzero=1\n\
  \  local -i is_first_nonzero_even=1\n  local -i is_first_nonzero_odd=1\n  local\
  \ -i is_first_nonzero_even_idx=0\n  local -i is_first_nonzero_odd_idx=0\n  local\
  \ -i is_first_nonzero_even_val=0\n  local -i is_first_nonzero_odd_val=0\n  local\
  \ -i is_first_zero_idx=0\n  local -i is_first_zero_val=0\n  local -i is_first_even_idx=0\n\
  \  local -i is_first_even_val=0\n  local -i is_first_odd_idx=0\n  local -i is_first_odd_val=0\n\
  \  local -i is_first_nonzero_idx=0\n  local -i is_first_nonzero_val=0\n  local -i\
  \ is_first_nonzero_even_idx=0\n  local -i is_first_nonzero_even_val=0\n  local -i\
  \ is_first_nonzero_odd_idx=0\n  local -i is_first_nonzero_odd_val=0\n  local -i\
  \ is_first_zero_idx=0\n  local -i is_first_zero_val=0\n  local -i is_first_even_idx=0\n\
  \  local -i is_first_even_val=0\n  local -i is_first_odd_idx=0\n "
- "  local -a arr=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local -a result=()\n\
  \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i min=0\n  local -i min_idx=0\n\
  \  local -i len=${#arr[@]}\n  local -i num=0\n  local -i idx=0\n  local -i cnt=0\n\
  \  local -i cnt_evens=0\n  local -i cnt_evens_idx=0\n  local -i cnt_result=0\n \
  \ local -i cnt_result_idx=0\n  local -i cnt_result_num=0\n  local -i cnt_result_idx_num=0\n\
  \  local -i cnt_result_num_idx=0\n  local -i cnt_result_idx_num_idx=0\n  local -i\
  \ cnt_result_num_idx_idx=0\n  local -i cnt_result_idx_num_idx_idx=0\n  local -i\
  \ cnt_result_num_idx_idx_idx=0\n  local -i cnt_result_idx_num_idx_idx_idx=0\n  local\
  \ -i cnt_result_num_idx_idx_idx_idx=0\n  local -i cnt_result_idx_num_idx_idx_idx_idx=0\n\
  \  local -i cnt_result_num_idx_idx_idx_idx_idx=0\n  local -i cnt_result_idx_num_idx_idx_idx_idx_idx=0\n\
  \  local -i cnt_result_num_idx_idx_idx_idx_idx_idx=0\n  local -i cnt_result_idx_num_idx_idx_idx_idx_idx_idx=0\n\
  \  local -i cnt_result_"
- "  local -a a=($1)\n  local i=0\n  local min=0\n  local min_i=0\n  local min_found=false\n\
  \  for i in \"${!a[@]}\"; do\n    if (( a[i] % 2 == 0 )); then\n      if ! $min_found\
  \ || a[i] < min; then\n        min=${a[i]}\n        min_i=$i\n        min_found=true\n\
  \      fi\n    fi\n  done\n  if $min_found; then\n    echo \"[$min, $min_i]\"\n\
  \  else\n    echo \"[]\"\n  fi"
- "    local -a a=($1)\n    local min=\n    local min_idx=\n    local i=\n    for\
  \ ((i=0; i<${#a[@]}; i++)); do\n        if [[ ${a[$i]} -eq 0 ]]; then\n        \
  \    min=0\n            min_idx=$i\n            break\n        elif [[ ${a[$i]}\
  \ -gt 0 ]] && [[ ${a[$i]}%2 -eq 0 ]]; then\n            if [[ -z $min ]] || [[ ${a[$i]}\
  \ -lt $min ]]; then\n                min=${a[$i]}\n                min_idx=$i\n\
  \            fi\n        fi\n    done\n    if [[ -z $min ]]; then\n        echo\
  \ \"[]\"\n    else\n        echo \"[$min, $min_idx]\"\n    fi"
- "  local -a a=($1)\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n\
  \  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n\
  \  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n\
  \  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n\
  \  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i\
  \ ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local\
  \ -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n\
  \  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i\
  \ tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local\
  \ -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n\
  \  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local\
  \ -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n\
  \  local -i mmm=0\n  local -i nnn=0\n  local -i ooo="
- "  local -a nodes=($1)\n  local -i min_even_value=100000000\n  local -i min_even_index=100000000\n\
  \  local -i i=0\n  local -i len=${#nodes[@]}\n  local -i node_value\n  local -i\
  \ node_index\n  for node_value in ${nodes[@]}; do\n    if [[ $((node_value % 2))\
  \ -eq 0 ]]; then\n      if [[ $node_value -lt $min_even_value ]]; then\n       \
  \ min_even_value=$node_value\n        min_even_index=$i\n      fi\n    fi\n    ((i++))\n\
  \  done\n  if [[ $min_even_index -lt $len ]]; then\n    echo \"[$min_even_value,\
  \ $min_even_index]\"\n  else\n    echo \"[]\"\n  fi"
- "    local -a nodes=($1)\n    local -i i=0\n    local -i min_even_value=1000000000\n\
  \    local -i min_even_index=1000000000\n    local -i found_even=0\n    for i in\
  \ \"${!nodes[@]}\"; do\n        if (( nodes[i] % 2 == 0 )); then\n            if\
  \ (( nodes[i] < min_even_value )); then\n                min_even_value=nodes[i]\n\
  \                min_even_index=i\n                found_even=1\n            fi\n\
  \        fi\n    done\n    if (( found_even )); then\n        echo \"[$min_even_value,\
  \ $min_even_index]\"\n    else\n        echo \"[]\"\n    fi"
- "  local -a array=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_index=0\n\
  \  local -i len=${#array[@]}\n  local -i value=0\n  local -i found=0\n  for ((i=0;\
  \ i<len; i++)); do\n    value=${array[i]}\n    if ((value % 2 == 0)); then\n   \
  \   if ((found == 0)); then\n        min=value\n        min_index=i\n        found=1\n\
  \      elif ((value < min)); then\n        min=value\n        min_index=i\n    \
  \  fi\n    fi\n  done\n  if ((found == 0)); then\n    echo \"[]\"\n  else\n    echo\
  \ \"[$min, $min_index]\"\n  fi"
- "    local -a array=()\n    local -i i=0\n    local -i min=0\n    local -i min_i=0\n\
  \    local -i min_found=0\n    local -i len=0\n    local -i len_i=0\n    local -i\
  \ len_found=0\n    local -i len_min=0\n    local -i len_min_i=0\n    local -i len_min_found=0\n\
  \    local -i len_min_len=0\n    local -i len_min_len_i=0\n    local -i len_min_len_found=0\n\
  \    local -i len_min_len_min=0\n    local -i len_min_len_min_i=0\n    local -i\
  \ len_min_len_min_found=0\n    local -i len_min_len_min_len=0\n    local -i len_min_len_min_len_i=0\n\
  \    local -i len_min_len_min_len_found=0\n    local -i len_min_len_min_len_min=0\n\
  \    local -i len_min_len_min_len_min_i=0\n    local -i len_min_len_min_len_min_found=0\n\
  \    local -i len_min_len_min_len_min_len=0\n    local -i len_min_len_min_len_min_len_i=0\n\
  \    local -i len_min_len_min_len_min_len_found=0\n    local -i len_min_len_min_len_min_len_min=0\n\
  \    local -i len_min_len_min_len_min_len_min_i=0\n    local -i len_min_len_min_len_min_len_min_found=0\n\
  \    local -i len_min_len_min_len_min_len_min_len=0\n    local -i len_min_len_min_len_min_len_min_len_i=0\n\
  \    local -i len_min_len_min_len_min_len_min_len_found=0"
- "  local -a a\n  IFS=' ' read -r -a a <<< \"$1\"\n  local i=0\n  local min=999999\n\
  \  local min_i=0\n  for n in \"${a[@]}\"; do\n    if [[ $((n % 2)) -eq 0 ]] && [[\
  \ $n -lt $min ]]; then\n      min=$n\n      min_i=$i\n    fi\n    ((i++))\n  done\n\
  \  if [[ $min -eq 999999 ]]; then\n    echo \"[]\"\n  else\n    echo \"[$min, $min_i]\"\
  \n  fi"
- "  local -a arr\n  local -i i\n  local -i min_even\n  local -i min_even_idx\n  local\
  \ -i min_idx\n  local -i idx\n  local -i val\n  local -i len\n  local -i is_even\n\
  \  local -i is_first_even\n  local -i is_first_even_idx\n  local -i is_first_idx\n\
  \  local -i is_first_val\n  local -i is_first_len\n  local -i is_first_is_even\n\
  \  local -i is_first_is_first_even\n  local -i is_first_is_first_even_idx\n  local\
  \ -i is_first_is_first_idx\n  local -i is_first_is_first_val\n  local -i is_first_is_first_len\n\
  \  local -i is_first_is_first_is_even\n  local -i is_first_is_first_is_first_even\n\
  \  local -i is_first_is_first_is_first_even_idx\n  local -i is_first_is_first_is_first_idx\n\
  \  local -i is_first_is_first_is_first_val\n  local -i is_first_is_first_is_first_len\n\
  \  local -i is_first_is_first_is_first_is_even\n  local -i is_first_is_first_is_first_is_first_even\n\
  \  local -i is_first_is_first_is_first_is_first_even_idx\n  local -i is_first_is_first_is_first_is_first_idx\n\
  \  local -i is_first_is_first_is_first_is_first_val\n  local -i is_first_is_first_is_first_is_first_len\n\
  \  local -i is_first_is_first_is_first_is_first_is_even\n  local -i is_first_is_first_is_first_is_first_is_first_even\n\
  \  local -i is_first_is_"
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n \
  \ local -i n=${#nodes[@]}\n  local -i found=0\n  while (( i < n )); do\n    if ((\
  \ nodes[i] % 2 == 0 )); then\n      if (( found == 0 )); then\n        min=nodes[i]\n\
  \        min_i=i\n        found=1\n      elif (( nodes[i] < min )); then\n     \
  \   min=nodes[i]\n        min_i=i\n      fi\n    fi\n    (( i++ ))\n  done\n  if\
  \ (( found == 0 )); then\n    echo \"[]\"\n  else\n    echo \"[${min}, ${min_i}]\"\
  \n  fi"
- "  local -a a=($1)\n  local -i i=0\n  local -i j=0\n  local -i n=${#a[@]}\n  local\
  \ -i m=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i min=0\n  local\
  \ -i min_i=0\n  local -i min_j=0\n  local -i min_k=0\n  local -i min_x=0\n  local\
  \ -i min_y=0\n  local -i min_z=0\n  local -i min_n=0\n  local -i min_m=0\n  local\
  \ -i min_i_j=0\n  local -i min_i_k=0\n  local -i min_j_k=0\n  local -i min_i_j_k=0\n\
  \  local -i min_i_x=0\n  local -i min_i_y=0\n  local -i min_i_z=0\n  local -i min_i_x_y=0\n\
  \  local -i min_i_x_z=0\n  local -i min_i_y_z=0\n  local -i min_i_x_y_z=0\n  local\
  \ -i min_i_n=0\n  local -i min_i_m=0\n  local -i min_i_n_m=0\n  local -i min_i_x_n=0\n\
  \  local -i min_i_x_m=0\n  local -i min_i_y_n=0\n  local -i min_i_y_m=0\n  local\
  \ -i min_i_z_n=0\n  local -i min_i_z_m=0\n  local -i min_i_x_y_n=0\n  local -i min_i_x_y_m=0\n\
  \  local -i min_i_x_z_n=0\n  local -i min_i_x_z_m=0\n  local -i min_i_y_z_n=0\n\
  \  local -i min_"
- "    local -a nodes=($1)\n    local -i min_even_value=0\n    local -i min_even_index=0\n\
  \    local -i i=0\n    local -i n=${#nodes[@]}\n    local -i value=0\n    local\
  \ -i is_even=0\n    local -i is_first_even=1\n    for ((i=0; i<n; i++)); do\n  \
  \      value=${nodes[i]}\n        is_even=$((value % 2))\n        if [[ $is_even\
  \ -eq 0 ]]; then\n            if [[ $is_first_even -eq 1 ]]; then\n            \
  \    min_even_value=$value\n                min_even_index=$i\n                is_first_even=0\n\
  \            elif [[ $value -lt $min_even_value ]]; then\n                min_even_value=$value\n\
  \                min_even_index=$i\n            fi\n        fi\n    done\n    if\
  \ [[ $is_first_even -eq 0 ]]; then\n        echo \"[$min_even_value, $min_even_index]\"\
  \n    else\n        echo \"[]\"\n    fi"
- "  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n  local\
  \ index=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n  \
  \    if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n    \
  \    min_even_value=$node\n        min_even_index=$index\n      fi\n    fi\n   \
  \ index=$((index + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"\
  []\"\n  else\n    echo \"[ $min_even_value, $min_even_index ]\"\n  fi"
- "  local -a arr=()\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
  \ -i n=0\n  local -i n_i=0\n  local -i n_min=0\n  local -i n_min_i=0\n  local -i\
  \ n_min_i_min=0\n  local -i n_min_i_min_i=0\n  local -i n_min_i_min_i_min=0\n  local\
  \ -i n_min_i_min_i_min_i=0\n  local -i n_min_i_min_i_min_i_min=0\n  local -i n_min_i_min_i_min_i_min_i=0\n\
  \  local -i n_min_i_min_i_min_i_min_i_min=0\n  local -i n_min_i_min_i_min_i_min_i_min_i=0\n\
  \  local -i n_min_i_min_i_min_i_min_i_min_i_min=0\n  local -i n_min_i_min_i_min_i_min_i_min_i_min_i=0\n\
  \  local -i n_min_i_min_i_min_i_min_i_min_i_min_i_min=0\n  local -i n_min_i_min_i_min_i_min_i_min_i_min_i_min_i=0\n\
  \  local -i n_min_i_min_i_min_i_min_i_min_i_min_i_min_i_min=0\n  local -i n_min_i_min_i_min_i_min_i_min_i_min_i_min_i_min_i=0\n\
  \  local -i n_min_i_min_i_min_i_min_i_min_i_min_i_min_i_min_i_min=0\n  local -i\
  \ n_min_i_min_i_min_i"
- "    local -a a=($1)\n    local -i i=0\n    local -i min=0\n    local -i min_i=0\n\
  \    local -i len=${#a[@]}\n    local -i found=0\n    for ((i=0; i<len; i++)); do\n\
  \        if ((a[i] % 2 == 0)); then\n            if ((found == 0)); then\n     \
  \           min=a[i]\n                min_i=i\n                found=1\n       \
  \     elif ((a[i] < min)); then\n                min=a[i]\n                min_i=i\n\
  \            fi\n        fi\n    done\n    if ((found == 0)); then\n        echo\
  \ \"[]\"\n    else\n        echo \"[$min, $min_i]\"\n    fi"
- "  local -a a=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n\
  \  local -i m=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n\
  \  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n\
  \  local -i y=0\n  local -i z=0\n  local -i A=0\n  local -i B=0\n  local -i C=0\n\
  \  local -i D=0\n  local -i E=0\n  local -i F=0\n  local -i G=0\n  local -i H=0\n\
  \  local -i I=0\n  local -i J=0\n  local -i K=0\n  local -i L=0\n  local -i M=0\n\
  \  local -i N=0\n  local -i O=0\n  local -i P=0\n  local -i Q=0\n  local -i R=0\n\
  \  local -i S=0\n  local -i T=0\n  local -i U=0\n  local -i V=0\n  local -i W=0\n\
  \  local -i X=0\n  local -i Y=0\n  local -i Z=0\n  local -i aa=0\n  local -i ab=0\n\
  \  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i\
  \ ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local\
  \ -i al=0\n  local -i am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n\
  \  local -i aq=0\n  local -i ar=0\n  local -i as=0\n  local -i at=0\n "
- "  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_value_index=\n\
  \  local i=0\n  for node in $nodes; do\n    if [ $((node % 2)) -eq 0 ]; then\n \
  \     if [ -z \"$min_even_value\" ] || [ $node -lt $min_even_value ]; then\n   \
  \     min_even_value=$node\n        min_even_value_index=$i\n      fi\n    fi\n\
  \    i=$((i + 1))\n  done\n  if [ -z \"$min_even_value\" ]; then\n    echo \"[]\"\
  \n  else\n    echo \"[$min_even_value, $min_even_value_index]\"\n  fi"
- "    local -a array=()\n    local -i i=0\n    local -i min=0\n    local -i min_index=0\n\
  \    local -i value=0\n    local -i count=0\n    local -i first_even=0\n    local\
  \ -i first_even_index=0\n    local -i first_zero=0\n    local -i first_zero_index=0\n\
  \    local -i first_zero_even=0\n    local -i first_zero_even_index=0\n    local\
  \ -i first_zero_even_value=0\n    local -i first_zero_value=0\n    local -i first_zero_even_index=0\n\
  \    local -i first_zero_index=0\n    local -i first_zero_even_index=0\n    local\
  \ -i first_zero_even_value=0\n    local -i first_zero_value=0\n    local -i first_zero_even_index=0\n\
  \    local -i first_zero_index=0\n    local -i first_zero_even_index=0\n    local\
  \ -i first_zero_even_value=0\n    local -i first_zero_value=0\n    local -i first_zero_even_index=0\n\
  \    local -i first_zero_index=0\n    local -i first_zero_even_index=0\n    local\
  \ -i first_zero_even_value=0\n    local -i first_zero_value=0\n    local -i first_zero_even_index=0\n\
  \    local -i first_zero_index=0\n    local -i first_zero_even_index=0\n    local\
  \ -i first_zero_even_value=0\n    local -i first_zero_value=0\n    local -i first_zero_even_index=0\n\
  \    local -i first_zero_index=0\n    local -i first_zero_even_index=0\n    local\
  \ -i first_zero_even_value=0\n    local -i first_zero_value=0\n    local -i first_zero_even_index=0\n\
  \    local -i first_zero_index=0\n    local -i first_zero_even"
- "  local -a arr=()\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
  \ -i min_found=0\n  local -i len=0\n  local -i val=0\n  local -i is_even=0\n  local\
  \ -i is_first=0\n  local -i is_smaller=0\n  local -i is_smaller_i=0\n  local -i\
  \ is_smaller_found=0\n  local -i is_smaller_val=0\n  local -i is_smaller_even=0\n\
  \  local -i is_smaller_first=0\n  local -i is_smaller_smaller=0\n  local -i is_smaller_smaller_i=0\n\
  \  local -i is_smaller_smaller_found=0\n  local -i is_smaller_smaller_val=0\n  local\
  \ -i is_smaller_smaller_even=0\n  local -i is_smaller_smaller_first=0\n  local -i\
  \ is_smaller_smaller_smaller=0\n  local -i is_smaller_smaller_smaller_i=0\n  local\
  \ -i is_smaller_smaller_smaller_found=0\n  local -i is_smaller_smaller_smaller_val=0\n\
  \  local -i is_smaller_smaller_smaller_even=0\n  local -i is_smaller_smaller_smaller_first=0\n\
  \  local -i is_smaller_smaller_smaller_smaller=0\n  local -i is_smaller_smaller_smaller_smaller_i=0\n\
  \  local -i is_smaller_smaller_smaller_smaller_found=0\n  local -i is_smaller_smaller_smaller_smaller_val=0\n\
  \  local -i is_smaller_smaller_smaller_smaller_even=0\n  local -i is_smaller_smaller_smaller_smaller_first=0\n\
  \  local -i is_smaller_smaller_smaller_smaller_small"
- "    local -a a=($1)\n    local -i i=0\n    local -i min=0\n    local -i min_i=0\n\
  \    local -i n=${#a[@]}\n    local -i found=0\n    for ((i=0; i<n; i++)); do\n\
  \        if (( a[i] % 2 == 0 )); then\n            if (( found == 0 )); then\n \
  \               min=a[i]\n                min_i=i\n                found=1\n   \
  \         else\n                if (( a[i] < min )); then\n                    min=a[i]\n\
  \                    min_i=i\n                fi\n            fi\n        fi\n \
  \   done\n    if (( found == 0 )); then\n        echo \"[]\"\n    else\n       \
  \ echo \"[$min, $min_i]\"\n    fi"
- "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n  local -i min_even_index=1000000000\n\
  \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i node_value\n  local -i node_index\n\
  \  while (( i < n )); do\n    node_value=${nodes[$i]}\n    if (( (node_value % 2)\
  \ == 0 )); then\n      if (( node_value < min_even_value )); then\n        min_even_value=$node_value\n\
  \        min_even_index=$i\n      fi\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
  \ == 1000000000 )); then\n    echo \"[]\"\n  else\n    echo \"[$min_even_value,\
  \ $min_even_index]\"\n  fi"
- "  local -a nodes=()\n  local -i i=0\n  local -i min_index=0\n  local -i min_value=0\n\
  \  local -i value=0\n  local -i is_first=1\n  local -i is_even=0\n  local -i is_smaller=0\n\
  \  local -i is_smaller_index=0\n  local -i is_smaller_value=0\n  local -i is_smaller_even=0\n\
  \  local -i is_smaller_index_even=0\n  local -i is_smaller_value_even=0\n  local\
  \ -i is_smaller_index_value_even=0\n  local -i is_smaller_index_value_even_first=0\n\
  \  local -i is_smaller_index_value_even_first_first=0\n  local -i is_smaller_index_value_even_first_first_first=0\n\
  \  local -i is_smaller_index_value_even_first_first_first_first=0\n  local -i is_smaller_index_value_even_first_first_first_first_first=0\n\
  \  local -i is_smaller_index_value_even_first_first_first_first_first_first=0\n\
  \  local -i is_smaller_index_value_even_first_first_first_first_first_first_first=0\n\
  \  local -i is_smaller_index_value_even_first_first_first_first_first_first_first_first=0\n\
  \  local -i is_smaller_index_value_even_first_first_first_first_first_first_first_first_first=0\n\
  \  local -i is_smaller_index_value_even_first_first_first_first_first_first_first_first_first_first=0\n\
  \  local -i is_smaller_index_value_even_first_first_first_first_first_first_first_first_first_first_first=0\n\
  \  local -i is_smaller_index_value_even_first_first_first_first_first_first_first_first_"
- "  local -a a=($1)\n  local -a b=()\n  local -i i=0\n  local -i j=0\n  local -i\
  \ k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i\
  \ p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i\
  \ u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i\
  \ z=0\n  local -i A=0\n  local -i B=0\n  local -i C=0\n  local -i D=0\n  local -i\
  \ E=0\n  local -i F=0\n  local -i G=0\n  local -i H=0\n  local -i I=0\n  local -i\
  \ J=0\n  local -i K=0\n  local -i L=0\n  local -i M=0\n  local -i N=0\n  local -i\
  \ O=0\n  local -i P=0\n  local -i Q=0\n  local -i R=0\n  local -i S=0\n  local -i\
  \ T=0\n  local -i U=0\n  local -i V=0\n  local -i W=0\n  local -i X=0\n  local -i\
  \ Y=0\n  local -i Z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local\
  \ -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n\
  \  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i\
  \ am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0"
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=999999\n  local\
  \ -i min_even_index=999999\n  local -i n=${#nodes[@]}\n  for ((i=0; i<n; i++));\
  \ do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      min_even_value=0\n      min_even_index=$i\n\
  \      break\n    elif [[ ${nodes[$i]} -gt 0 && ${nodes[$i]} -lt $min_even_value\
  \ && $(( ${nodes[$i]} % 2 )) -eq 0 ]]; then\n      min_even_value=${nodes[$i]}\n\
  \      min_even_index=$i\n    fi\n  done\n  echo \"[$min_even_value, $min_even_index]\""
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local -a\
  \ result=()\n  local i=0\n  local min_even=0\n  local min_even_idx=0\n  for node\
  \ in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n\
  \      evens_idx+=($i)\n    fi\n    ((i++))\n  done\n  if [[ ${#evens[@]} -eq 0\
  \ ]]; then\n    echo \"[]\"\n    return\n  fi\n  min_even=${evens[0]}\n  min_even_idx=0\n\
  \  for i in \"${!evens[@]}\"; do\n    if [[ ${evens[$i]} -lt $min_even ]]; then\n\
  \      min_even=${evens[$i]}\n      min_even_idx=$i\n    fi\n  done\n  result=($min_even\
  \ ${evens_idx[$min_even_idx]})\n  echo \"[${result[@]}]\""
- "    local -a nodes=($1)\n    local -i min_even_value=1000000000\n    local -i min_even_index=1000000000\n\
  \    local -i i=0\n    local -i n=${#nodes[@]}\n    local -i node\n    for ((i=0;\
  \ i<n; i++)); do\n        node=${nodes[$i]}\n        if ((node % 2 == 0)); then\n\
  \            if ((node < min_even_value)); then\n                min_even_value=$node\n\
  \                min_even_index=$i\n            elif ((node == min_even_value));\
  \ then\n                if ((i < min_even_index)); then\n                    min_even_index=$i\n\
  \                fi\n            fi\n        fi\n    done\n    if ((min_even_value\
  \ < 1000000000)); then\n        echo \"[$min_even_value, $min_even_index]\"\n  \
  \  else\n        echo \"[]\"\n    fi"
- "    local -a nodes=($1)\n    local -i i=0\n    local -i min_index=-1\n    local\
  \ -i min_value=0\n    local -i min_even_index=-1\n    local -i min_even_value=0\n\
  \    local -i value=0\n    local -i is_even=0\n    for i in \"${!nodes[@]}\"; do\n\
  \        value=${nodes[$i]}\n        is_even=$((value % 2))\n        if [[ $is_even\
  \ -eq 0 ]]; then\n            if [[ $min_even_index -eq -1 ]]; then\n          \
  \      min_even_index=$i\n                min_even_value=$value\n            elif\
  \ [[ $value -lt $min_even_value ]]; then\n                min_even_index=$i\n  \
  \              min_even_value=$value\n            fi\n        fi\n        if [[\
  \ $min_index -eq -1 ]]; then\n            min_index=$i\n            min_value=$value\n\
  \        elif [[ $value -lt $min_value ]]; then\n            min_index=$i\n    \
  \        min_value=$value\n        fi\n    done\n    if [[ $min_even_index -eq -1\
  \ ]]; then\n        echo \"[]\"\n    else\n        echo \"[$min_even_value, $min_even_index]\"\
  \n    fi"
- "  local -a nodes=($1)\n  local -i min_even_value=9999999999\n  local -i min_even_index=9999999999\n\
  \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i node_value\n  local -i node_index\n\
  \  for ((i=0; i<n; i++)); do\n    node_value=${nodes[$i]}\n    if ((node_value %\
  \ 2 == 0)); then\n      if ((node_value < min_even_value)); then\n        min_even_value=$node_value\n\
  \        min_even_index=$i\n      elif ((node_value == min_even_value)); then\n\
  \        if ((i < min_even_index)); then\n          min_even_index=$i\n        fi\n\
  \      fi\n    fi\n  done\n  if ((min_even_value == 9999999999)); then\n    echo\
  \ \"[]\"\n  else\n    echo \"[$min_even_value, $min_even_index]\"\n  fi"
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n  local -i min_value=0\n\
  \  local -i count=0\n  local -i len=${#nodes[@]}\n  local -i value=0\n  local -i\
  \ is_even=0\n  local -i is_first=1\n  for ((i=0; i<len; i++)); do\n    value=${nodes[i]}\n\
  \    is_even=$((value % 2))\n    if [[ $is_even -eq 0 ]]; then\n      count=$((count\
  \ + 1))\n      if [[ $is_first -eq 1 ]]; then\n        min_value=$value\n      \
  \  min_index=$i\n        is_first=0\n      elif [[ $value -lt $min_value ]]; then\n\
  \        min_value=$value\n        min_index=$i\n      fi\n    fi\n  done\n  if\
  \ [[ $count -eq 0 ]]; then\n    echo \"[]\"\n  else\n    echo \"[$min_value, $min_index]\"\
  \n  fi"
- "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n  local -i min_even_index=1000000000\n\
  \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i value\n  local -i index\n\
  \  for ((i=0; i<n; i++)); do\n    value=${nodes[$i]}\n    if [[ $((value % 2)) -eq\
  \ 0 ]]; then\n      if [[ $value -lt $min_even_value ]]; then\n        min_even_value=$value\n\
  \        min_even_index=$i\n      elif [[ $value -eq $min_even_value ]]; then\n\
  \        if [[ $i -lt $min_even_index ]]; then\n          min_even_index=$i\n  \
  \      fi\n      fi\n    fi\n  done\n  if [[ $min_even_value -eq 1000000000 ]];\
  \ then\n    echo \"[]\"\n  else\n    echo \"[$min_even_value, $min_even_index]\"\
  \n  fi"
- "  local -a nodes=($1)\n  local -i min=999999\n  local -i min_index=0\n  local -i\
  \ i=0\n  local -i n=${#nodes[@]}\n  for ((i=0; i<n; i++)); do\n    if [[ ${nodes[$i]}\
  \ -eq 0 ]]; then\n      echo \"[0, $i]\"\n      return\n    fi\n    if [[ ${nodes[$i]}\
  \ -lt $min && $((nodes[$i] % 2)) -eq 0 ]]; then\n      min=${nodes[$i]}\n      min_index=$i\n\
  \    fi\n  done\n  if [[ $min -eq 999999 ]]; then\n    echo \"[]\"\n  else\n   \
  \ echo \"[$min, $min_index]\"\n  fi"
- "    local -a arr=($1)\n    local -a evens=()\n    local -a evens_idx=()\n    local\
  \ -a result=()\n    local i=0\n    local min=0\n    local min_idx=0\n    for n in\
  \ \"${arr[@]}\"; do\n        if [[ $((n % 2)) -eq 0 ]]; then\n            evens+=($n)\n\
  \            evens_idx+=($i)\n        fi\n        ((i++))\n    done\n    if [[ ${#evens[@]}\
  \ -eq 0 ]]; then\n        echo \"[]\"\n        return\n    fi\n    min=${evens[0]}\n\
  \    min_idx=0\n    for ((i=1; i<${#evens[@]}; i++)); do\n        if [[ ${evens[$i]}\
  \ -lt $min ]]; then\n            min=${evens[$i]}\n            min_idx=$i\n    \
  \    fi\n    done\n    result=($min ${evens_idx[$min_idx]})\n    echo \"[${result[@]}]\""
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
  \  local i=0\n  local min_even=0\n  local min_odd=0\n  local min_even_index=0\n\
  \  local min_odd_index=0\n  local min_index=0\n  local min_value=0\n  local value=0\n\
  \  local num_evens=0\n  local num_odds=0\n  local num_nodes=${#nodes[@]}\n  if [\
  \ $num_nodes -eq 0 ]; then\n    echo \"[]\"\n    return\n  fi\n  for i in $(seq\
  \ 0 $((num_nodes-1))); do\n    value=${nodes[$i]}\n    if [ $((value%2)) -eq 0 ];\
  \ then\n      evens+=($value)\n    else\n      odds+=($value)\n    fi\n  done\n\
  \  num_evens=${#evens[@]}\n  num_odds=${#odds[@]}\n  if [ $num_evens -eq 0 ]; then\n\
  \    echo \"[]\"\n    return\n  fi\n  min_even=${evens[0]}\n  min_even_index=0\n\
  \  for i in $(seq 1 $((num_evens-1))); do\n    value=${evens[$i]}\n    if [ $value\
  \ -lt $min_even ]; then\n      min_even=$value\n      min_even_index=$i\n    fi\n\
  \  done\n  if [ $num_odds -eq 0 ]; then\n    min_index=$min_even_index\n    min_value=$min_even\n\
  \  else\n    min_odd=${odds[0]}\n    min_odd_index=0\n    for i in $(seq 1 $((num_odds-1)));\
  \ do\n      value=${odds[$i]}\n      if [ $value -lt $min_odd ]; then\n        min_odd=$value\n\
  \        min_odd_index=$i\n      fi\n    done\n    if [ $min_even -lt $min_odd ];\
  \ then\n      min_"
- "  local -a a\n  local i\n  local min\n  local min_i\n  local n\n  IFS=' ' read\
  \ -ra a <<< \"$1\"\n  for ((i=0; i<${#a[@]}; i++)); do\n    n=${a[i]}\n    if ((n\
  \ % 2 == 0)); then\n      if [[ -z $min || $n -lt $min ]]; then\n        min=$n\n\
  \        min_i=$i\n      fi\n    fi\n  done\n  if [[ -z $min ]]; then\n    echo\
  \ \"[]\"\n  else\n    echo \"[$min, $min_i]\"\n  fi"
- "  local -a arr=($1)\n  local -i min_even_val=1000000\n  local -i min_even_idx=0\n\
  \  local -i i=0\n  local -i len=${#arr[@]}\n  local -i cur_val=0\n  for ((i=0; i<len;\
  \ i++)); do\n    cur_val=${arr[$i]}\n    if ((cur_val % 2 == 0 && cur_val < min_even_val));\
  \ then\n      min_even_val=$cur_val\n      min_even_idx=$i\n    fi\n  done\n  if\
  \ ((min_even_val == 1000000)); then\n    echo \"[]\"\n  else\n    echo \"[$min_even_val,\
  \ $min_even_idx]\"\n  fi"
- "  local -a a=($1)\n  local -a b=()\n  local -i i=0\n  local -i j=0\n  local -i\
  \ k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i\
  \ p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i\
  \ u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i\
  \ z=0\n  local -i A=0\n  local -i B=0\n  local -i C=0\n  local -i D=0\n  local -i\
  \ E=0\n  local -i F=0\n  local -i G=0\n  local -i H=0\n  local -i I=0\n  local -i\
  \ J=0\n  local -i K=0\n  local -i L=0\n  local -i M=0\n  local -i N=0\n  local -i\
  \ O=0\n  local -i P=0\n  local -i Q=0\n  local -i R=0\n  local -i S=0\n  local -i\
  \ T=0\n  local -i U=0\n  local -i V=0\n  local -i W=0\n  local -i X=0\n  local -i\
  \ Y=0\n  local -i Z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local\
  \ -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n\
  \  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i\
  \ am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0"
- "    local -a arr=($1)\n    local -a evens\n    local -a odds\n    local -a result\n\
  \    local i\n    local j\n    local min\n    local min_index\n    local min_even\n\
  \    local min_even_index\n    local min_odd\n    local min_odd_index\n    local\
  \ len=${#arr[@]}\n    if [ $len -eq 0 ]; then\n        echo \"[]\"\n        return\n\
  \    fi\n    for ((i=0; i<len; i++)); do\n        if [ $((arr[i] % 2)) -eq 0 ];\
  \ then\n            evens+=(${arr[i]})\n        else\n            odds+=(${arr[i]})\n\
  \        fi\n    done\n    if [ ${#evens[@]} -eq 0 ]; then\n        echo \"[]\"\n\
  \        return\n    fi\n    min_even=${evens[0]}\n    min_even_index=0\n    for\
  \ ((i=1; i<${#evens[@]}; i++)); do\n        if [ ${evens[i]} -lt $min_even ]; then\n\
  \            min_even=${evens[i]}\n            min_even_index=$i\n        fi\n \
  \   done\n    min_odd=${odds[0]}\n    min_odd_index=0\n    for ((i=1; i<${#odds[@]};\
  \ i++)); do\n        if [ ${odds[i]} -lt $min_odd ]; then\n            min_odd=${odds[i]}\n\
  \            min_odd_index=$i\n        fi\n    done\n    if [ $min_even -lt $min_odd\
  \ ]; then\n        echo \"[$min_even, $min_even_index]\"\n    else\n        echo\
  \ \"[$min_odd, $min_odd_index]\"\n    fi"
- "  local -a arr=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
  \ -i len=${#arr[@]}\n  local -i found=0\n  for ((i=0; i<len; i++)); do\n    if ((arr[i]\
  \ % 2 == 0)); then\n      if ((found == 0)); then\n        min=arr[i]\n        min_i=i\n\
  \        found=1\n      elif ((arr[i] < min)); then\n        min=arr[i]\n      \
  \  min_i=i\n      fi\n    fi\n  done\n  if ((found == 0)); then\n    echo \"[]\"\
  \n  else\n    echo \"[$min, $min_i]\"\n  fi"
- "  local -a nodes=($1)\n  local -i min_even_value=100000000\n  local -i min_even_index=0\n\
  \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if (( node % 2 == 0 && node\
  \ < min_even_value )); then\n      min_even_value=$node\n      min_even_index=$i\n\
  \    fi\n    (( i++ ))\n  done\n  if (( min_even_value == 100000000 )); then\n \
  \   echo \"[]\"\n  else\n    echo \"[$min_even_value, $min_even_index]\"\n  fi"
- "    local -a arr=()\n    local -i i=0\n    local -i min=0\n    local -i min_i=0\n\
  \    local -i is_first=1\n    local -i is_empty=1\n    local -i is_even=0\n    local\
  \ -i is_smaller=0\n    local -i is_smaller_i=0\n    local -i is_smaller_i_is_first=1\n\
  \    local -i is_smaller_i_is_empty=1\n    local -i is_smaller_i_is_even=0\n   \
  \ local -i is_smaller_i_is_smaller=0\n    local -i is_smaller_i_is_smaller_i=0\n\
  \    local -i is_smaller_i_is_smaller_i_is_first=1\n    local -i is_smaller_i_is_smaller_i_is_empty=1\n\
  \    local -i is_smaller_i_is_smaller_i_is_even=0\n    local -i is_smaller_i_is_smaller_i_is_smaller=0\n\
  \    local -i is_smaller_i_is_smaller_i_is_smaller_i=0\n    local -i is_smaller_i_is_smaller_i_is_smaller_i_is_first=1\n\
  \    local -i is_smaller_i_is_smaller_i_is_smaller_i_is_empty=1\n    local -i is_smaller_i_is_smaller_i_is_smaller_i_is_even=0\n\
  \    local -i is_smaller_i_is_smaller_i_is_smaller_i_is_smaller=0\n    local -i\
  \ is_smaller_i_is_smaller_i_is_smaller_i_is_smaller_i=0\n    local -i is_smaller_i_is_smaller_i_is_smaller_i_is_smaller_i_is_first=1\n\
  \    local -i is_smaller_i_is_"
- "  local -a nodes=($1)\n  local -i min_even_value=99999999\n  local -i min_even_index=99999999\n\
  \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i value\n  local -i index\n\
  \  local -i found_even=0\n  for ((i=0; i<n; i++)); do\n    value=${nodes[$i]}\n\
  \    if ((value % 2 == 0)); then\n      found_even=1\n      if ((value < min_even_value));\
  \ then\n        min_even_value=$value\n        min_even_index=$i\n      fi\n   \
  \ fi\n  done\n  if ((found_even == 0)); then\n    echo \"[]\"\n  else\n    echo\
  \ \"[$min_even_value, $min_even_index]\"\n  fi"
- "  local -a a=($1)\n  local i=0\n  local min=999999\n  local min_i=0\n  for i in\
  \ \"${!a[@]}\"; do\n    if [[ ${a[$i]} -lt $min && $(( ${a[$i]} % 2 )) -eq 0 ]];\
  \ then\n      min=${a[$i]}\n      min_i=$i\n    fi\n  done\n  if [[ $min -eq 999999\
  \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[$min, $min_i]\"\n  fi"
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=10000\n  local\
  \ -i min_even_index=0\n  local -i min_even_count=0\n  local -i min_even_first_index=0\n\
  \  local -i node_value=0\n  local -i node_count=${#nodes[@]}\n  for ((i=0; i<node_count;\
  \ i++)); do\n    node_value=${nodes[$i]}\n    if ((node_value % 2 == 0)); then\n\
  \      if ((node_value < min_even_value)); then\n        min_even_value=$node_value\n\
  \        min_even_index=$i\n        min_even_count=1\n        min_even_first_index=$i\n\
  \      elif ((node_value == min_even_value)); then\n        ((min_even_count++))\n\
  \      fi\n    fi\n  done\n  if ((min_even_count > 0)); then\n    echo \"$min_even_value\
  \ $min_even_first_index\"\n  else\n    echo \"\"\n  fi"
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n  local -i\
  \ min_even_index=0\n  local -i min_even_count=0\n  local -i node_count=${#nodes[@]}\n\
  \  local -i node_value=0\n  local -i node_index=0\n  local -i node_is_even=0\n \
  \ local -i node_is_min_even=0\n  local -i node_is_first_min_even=0\n  local -i node_is_min_even_index=0\n\
  \  local -i node_is_min_even_count=0\n  local -i node_is_first_min_even_index=0\n\
  \  local -i node_is_first_min_even_count=0\n  local -i node_is_min_even_index_count=0\n\
  \  local -i node_is_first_min_even_index_count=0\n  local -i node_is_min_even_index_count_count=0\n\
  \  local -i node_is_first_min_even_index_count_count=0\n  local -i node_is_min_even_index_count_count_count=0\n\
  \  local -i node_is_first_min_even_index_count_count_count=0\n  local -i node_is_min_even_index_count_count_count_count=0\n\
  \  local -i node_is_first_min_even_index_count_count_count_count=0\n  local -i node_is_min_even_index_count_count_count_count_count=0\n\
  \  local -i node_is_first_min_even_index_count_count_count_count_count=0\n  local\
  \ -i node_is_min_even_index_count_count_count_count_count_count=0\n  local -i node_is_first_min_even_index_count_count_count_count_count_count=0\n\
  \  local -i node_is_min_even_index_count_count_count_count_count"
- "  local -a nodes=($1)\n  local -i min_even_value=100000000\n  local -i min_even_index=0\n\
  \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if (( node % 2 == 0 && node\
  \ < min_even_value )); then\n      min_even_value=$node\n      min_even_index=$i\n\
  \    fi\n    (( i++ ))\n  done\n  if (( min_even_value == 100000000 )); then\n \
  \   echo \"[]\"\n  else\n    echo \"[$min_even_value, $min_even_index]\"\n  fi"
- "  local -a arr\n  local i\n  local min\n  local min_i\n  local -i even\n  local\
  \ -i odd\n  local -i len\n  local -i i\n  arr=($1)\n  len=${#arr[@]}\n  if (( len\
  \ == 0 )); then\n    echo \"[]\"\n    return\n  fi\n  min=${arr[0]}\n  min_i=0\n\
  \  even=0\n  odd=0\n  for (( i=0; i<len; i++ )); do\n    if (( arr[i] % 2 == 0 ));\
  \ then\n      even=1\n      if (( arr[i] < min )); then\n        min=${arr[i]}\n\
  \        min_i=$i\n      fi\n    else\n      odd=1\n    fi\n  done\n  if (( even\
  \ == 0 )); then\n    echo \"[]\"\n  else\n    echo \"[$min, $min_i]\"\n  fi"
- "    local -a a=($1)\n    local -a b=()\n    local -i i=0\n    local -i j=0\n  \
  \  local -i n=${#a[@]}\n    local -i m=0\n    local -i x=0\n    local -i y=0\n \
  \   local -i z=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local\
  \ -i u=0\n    local -i v=0\n    local -i w=0\n    local -i p=0\n    local -i q=0\n\
  \    local -i o=0\n    local -i k=0\n    local -i l=0\n    local -i h=0\n    local\
  \ -i g=0\n    local -i f=0\n    local -i e=0\n    local -i d=0\n    local -i c=0\n\
  \    local -i b=0\n    local -i a=0\n    for ((i=0; i<n; i++)); do\n        if ((a[i]%2==0));\
  \ then\n            b[j]=a[i]\n            ((j++))\n        fi\n    done\n    if\
  \ ((j==0)); then\n        echo \"[]\"\n        return\n    fi\n    m=${#b[@]}\n\
  \    x=b[0]\n    y=0\n    for ((i=1; i<m; i++)); do\n        if ((b[i]<x)); then\n\
  \            x=b[i]\n            y=i\n        fi\n    done\n    z=0\n    for ((i=0;\
  \ i<n; i++)); do\n        if ((a[i]==x)); then\n            z=i\n            break\n\
  \        fi\n    done\n    echo \"[$x, $z]\""
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min_i=0\n  local -i min_v=0\n\
  \  local -i v=0\n  local -i n=${#nodes[@]}\n  while (( i < n )); do\n    v=${nodes[i]}\n\
  \    if (( v % 2 == 0 )); then\n      if (( min_v == 0 || v < min_v )); then\n \
  \       min_v=$v\n        min_i=$i\n      fi\n    fi\n    (( i++ ))\n  done\n  if\
  \ (( min_v > 0 )); then\n    echo \"[$min_v, $min_i]\"\n  else\n    echo \"[]\"\n\
  \  fi"
- "  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n  local\
  \ i=0\n  for node in $nodes; do\n    if [ $((node % 2)) -eq 0 ]; then\n      if\
  \ [ -z \"$min_even_value\" ] || [ $node -lt $min_even_value ]; then\n        min_even_value=$node\n\
  \        min_even_index=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n  if [ -z\
  \ \"$min_even_value\" ]; then\n    echo \"[]\"\n  else\n    echo \"[ $min_even_value,\
  \ $min_even_index ]\"\n  fi"
- "  local -a a=($1)\n  local -i i\n  local -i min=999999\n  local -i min_i=999999\n\
  \  for ((i=0; i<${#a[@]}; i++)); do\n    if ((a[i] % 2 == 0 && a[i] < min)); then\n\
  \      min=a[i]\n      min_i=i\n    fi\n  done\n  if ((min < 999999)); then\n  \
  \  echo \"[$min, $min_i]\"\n  else\n    echo \"[]\"\n  fi"
- "  local -a a\n  local i\n  local min\n  local min_i\n  local n\n  IFS=' ' read\
  \ -r -a a <<< \"$1\"\n  min=\n  min_i=\n  for ((i=0; i<${#a[@]}; i++)); do\n   \
  \ n=${a[i]}\n    if ((n % 2 == 0)); then\n      if [[ -z $min ]]; then\n       \
  \ min=$n\n        min_i=$i\n      elif ((n < min)); then\n        min=$n\n     \
  \   min_i=$i\n      fi\n    fi\n  done\n  if [[ -z $min ]]; then\n    echo \"[]\"\
  \n  else\n    echo \"[$min, $min_i]\"\n  fi"
- "    local -a arr=($1)\n    local -i i=0\n    local -i min=0\n    local -i min_idx=0\n\
  \    local -i len=${#arr[@]}\n    local -i found=0\n    for ((i=0; i<len; i++));\
  \ do\n        if ((arr[i] % 2 == 0)); then\n            if ((found == 0)); then\n\
  \                min=arr[i]\n                min_idx=i\n                found=1\n\
  \            else\n                if ((arr[i] < min)); then\n                 \
  \   min=arr[i]\n                    min_idx=i\n                fi\n            fi\n\
  \        fi\n    done\n    if ((found == 0)); then\n        echo \"[]\"\n    else\n\
  \        echo \"[$min, $min_idx]\"\n    fi"
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n  local -i min_value=0\n\
  \  local -i min_even_index=0\n  local -i min_even_value=0\n  local -i is_even=0\n\
  \  local -i is_first_even=0\n  local -i is_first_value=0\n  local -i is_first_index=0\n\
  \  local -i is_first_node=0\n  local -i is_first_even_node=0\n  local -i is_first_even_value=0\n\
  \  local -i is_first_even_index=0\n  local -i is_first_even_node=0\n  local -i is_first_even_value=0\n\
  \  local -i is_first_even_index=0\n  local -i is_first_even_node=0\n  local -i is_first_even_value=0\n\
  \  local -i is_first_even_index=0\n  local -i is_first_even_node=0\n  local -i is_first_even_value=0\n\
  \  local -i is_first_even_index=0\n  local -i is_first_even_node=0\n  local -i is_first_even_value=0\n\
  \  local -i is_first_even_index=0\n  local -i is_first_even_node=0\n  local -i is_first_even_value=0\n\
  \  local -i is_first_even_index=0\n  local -i is_first_even_node=0\n  local -i is_first_even_value=0\n\
  \  local -i is_first_even_index=0\n  local -i is_first_even_node=0\n  local -i is_first_even_value=0\n\
  \  local -i is_first_even_index=0\n  local -i is_first_even_node=0\n  local -i is_first_even_value=0\n\
  \  local -i is_first_even_index=0\n  local -i is_first_even_node=0"
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
  \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n\
  \  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n\
  \  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n\
  \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n\
  \  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
  \ gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local\
  \ -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n\
  \  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i\
  \ uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local\
  \ -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n\
  \  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local\
  \ -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n"
- "    local -a a=($1)\n    local -i i=0\n    local -i min=0\n    local -i min_i=0\n\
  \    local -i len=${#a[@]}\n    local -i found=0\n    while (( i < len )); do\n\
  \        if (( a[i] % 2 == 0 )); then\n            if (( found == 0 )); then\n \
  \               min=a[i]\n                min_i=i\n                found=1\n   \
  \         elif (( a[i] < min )); then\n                min=a[i]\n              \
  \  min_i=i\n            fi\n        fi\n        (( i++ ))\n    done\n    if (( found\
  \ == 0 )); then\n        echo \"[]\"\n    else\n        echo \"[$min, $min_i]\"\n\
  \    fi"
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n  local\
  \ -a result=()\n  local i=0\n  local j=0\n  local k=0\n  local n=${#nodes[@]}\n\
  \  local min_even=0\n  local min_even_index=0\n  for ((i=0; i<n; i++)); do\n   \
  \ if [[ $((nodes[i] % 2)) -eq 0 ]]; then\n      evens[j]=${nodes[i]}\n      evens_index[j]=$i\n\
  \      ((j++))\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"\
  []\"\n    return\n  fi\n  min_even=${evens[0]}\n  min_even_index=${evens_index[0]}\n\
  \  for ((k=1; k<${#evens[@]}; k++)); do\n    if [[ ${evens[k]} -lt $min_even ]];\
  \ then\n      min_even=${evens[k]}\n      min_even_index=${evens_index[k]}\n   \
  \ fi\n  done\n  result[0]=$min_even\n  result[1]=$min_even_index\n  echo \"[${result[0]},\
  \ ${result[1]}]\""
- "  local -a arr=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local -a result=()\n\
  \  local i=0\n  local min_even=0\n  local min_even_idx=0\n  local min_even_idx_idx=0\n\
  \  local min_even_idx_idx_idx=0\n  local -i arr_len=${#arr[@]}\n  if [ $arr_len\
  \ -eq 0 ]; then\n    echo \"[]\"\n    return\n  fi\n  for i in ${arr[@]}; do\n \
  \   if [ $((i % 2)) -eq 0 ]; then\n      evens+=($i)\n      evens_idx+=($((i - 1)))\n\
  \    fi\n  done\n  if [ ${#evens[@]} -eq 0 ]; then\n    echo \"[]\"\n    return\n\
  \  fi\n  min_even=${evens[0]}\n  min_even_idx=${evens_idx[0]}\n  min_even_idx_idx=0\n\
  \  for i in ${evens[@]}; do\n    if [ $i -lt $min_even ]; then\n      min_even=$i\n\
  \      min_even_idx_idx=$((i - 1))\n    fi\n  done\n  min_even_idx_idx_idx=0\n \
  \ for i in ${evens_idx[@]}; do\n    if [ $i -lt $min_even_idx ]; then\n      min_even_idx=$i\n\
  \      min_even_idx_idx_idx=$((i - 1))\n    fi\n  done\n  result+=($min_even)\n\
  \  result+=($((min_even_idx_idx_idx + 1)))\n  echo \"[${result[@]}]\""
- "  local -a a=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
  \ -i n=${#a[@]}\n  local -i found=0\n  for ((i=0; i<n; i++)); do\n    if ((a[i]\
  \ % 2 == 0)); then\n      if ((found == 0)); then\n        min=a[i]\n        min_i=i\n\
  \        found=1\n      elif ((a[i] < min)); then\n        min=a[i]\n        min_i=i\n\
  \      fi\n    fi\n  done\n  if ((found == 0)); then\n    echo \"[]\"\n  else\n\
  \    echo \"[$min, $min_i]\"\n  fi"
- "    local -a arr=($1)\n    local -a evens=()\n    local -a odds=()\n    local -a\
  \ result=()\n    local i=0\n    local j=0\n    local k=0\n    local n=${#arr[@]}\n\
  \    local min=0\n    local min_i=0\n    local min_j=0\n    local min_k=0\n    local\
  \ min_n=0\n    local min_value=0\n    local value=0\n    local is_even=0\n    local\
  \ is_odd=0\n    local is_empty=0\n    local is_all_odd=0\n    local is_all_even=0\n\
  \    local is_all_zero=0\n    local is_all_non_zero=0\n    local is_all_same=0\n\
  \    local is_all_same_even=0\n    local is_all_same_odd=0\n    local is_all_same_zero=0\n\
  \    local is_all_same_non_zero=0\n    local is_all_same_even_non_zero=0\n    local\
  \ is_all_same_odd_non_zero=0\n    local is_all_same_even_zero=0\n    local is_all_same_odd_zero=0\n\
  \    local is_all_same_even_non_zero_non_zero=0\n    local is_all_same_odd_non_zero_non_zero=0\n\
  \    local is_all_same_even_zero_non_zero=0\n    local is_all_same_odd_zero_non_zero=0\n\
  \    local is_all_same_even_non_zero_zero=0\n    local is_all_same_odd_non_zero_zero=0\n\
  \    local is_all_same_even_zero_zero=0\n    local is_all_same_odd_zero_zero=0\n\
  \    local is_all_same_even_non_zero_non_zero_non_zero=0\n    local is_all_same_odd_non_zero_non_zero_non_zero=0\n\
  \    local is_all_same_even_zero_non_zero_non"
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n  local -i\
  \ min_even_index=0\n  local -i min_even_count=0\n  local -i node_count=${#nodes[@]}\n\
  \  local -i node_value=0\n  local -i even_count=0\n  local -i even_value=0\n  local\
  \ -i even_index=0\n  local -i even_count=0\n  local -i even_value=0\n  local -i\
  \ even_index=0\n  local -i even_count=0\n  local -i even_value=0\n  local -i even_index=0\n\
  \  local -i even_count=0\n  local -i even_value=0\n  local -i even_index=0\n  local\
  \ -i even_count=0\n  local -i even_value=0\n  local -i even_index=0\n  local -i\
  \ even_count=0\n  local -i even_value=0\n  local -i even_index=0\n  local -i even_count=0\n\
  \  local -i even_value=0\n  local -i even_index=0\n  local -i even_count=0\n  local\
  \ -i even_value=0\n  local -i even_index=0\n  local -i even_count=0\n  local -i\
  \ even_value=0\n  local -i even_index=0\n  local -i even_count=0\n  local -i even_value=0\n\
  \  local -i even_index=0\n  local -i even_count=0\n  local -i even_value=0\n  local\
  \ -i even_index=0\n  local -i even_count=0\n  local -i even_value=0\n  local -i\
  \ even_index=0\n  local -i even_count=0\n  local -i even_value=0\n  local -i even_index=0\n\
  \  local -i even_count=0\n  local -i even_value=0\n  local -i even_index=0\n  local\
  \ -i even_count=0\n "
- "\tlocal -a a=($1)\n\tlocal -i i=0\n\tlocal -i min=-1\n\tlocal -i min_i=-1\n\tfor\
  \ i in ${!a[@]}; do\n\t\tif (( a[i] % 2 == 0 )); then\n\t\t\tif (( min == -1 ||\
  \ a[i] < min )); then\n\t\t\t\tmin=${a[i]}\n\t\t\t\tmin_i=$i\n\t\t\tfi\n\t\tfi\n\
  \tdone\n\tif (( min == -1 )); then\n\t\techo \"[]\"\n\telse\n\t\techo \"[$min, $min_i]\"\
  \n\tfi"
- "    local -a nodes=($1)\n    local -i i=0\n    local -i min_even_value=0\n    local\
  \ -i min_even_index=0\n    local -i min_even_count=0\n    local -i min_even_first_index=0\n\
  \    local -i min_even_last_index=0\n    local -i node_value=0\n    local -i node_count=${#nodes[@]}\n\
  \    local -i node_index=0\n    local -i node_first_index=0\n    local -i node_last_index=0\n\
  \    local -i even_count=0\n    local -i even_first_index=0\n    local -i even_last_index=0\n\
  \    local -i even_index=0\n    local -i even_value=0\n    local -i even_count=0\n\
  \    local -i even_first_index=0\n    local -i even_last_index=0\n    local -i even_index=0\n\
  \    local -i even_value=0\n    local -i even_count=0\n    local -i even_first_index=0\n\
  \    local -i even_last_index=0\n    local -i even_index=0\n    local -i even_value=0\n\
  \    local -i even_count=0\n    local -i even_first_index=0\n    local -i even_last_index=0\n\
  \    local -i even_index=0\n    local -i even_value=0\n    local -i even_count=0\n\
  \    local -i even_first_index=0\n    local -i even_last_index=0\n    local -i even_index=0\n\
  \    local -i even_value=0\n    local -i even_count=0\n    local -i even_first_index=0\n\
  \    local -i even_last_index=0\n    local -i even_index=0\n    local -i even_value=0\n\
  \    local -i even_count=0\n    local -i even_first_index=0\n    local -i even_last_index=0\n\
  \    local -i even_index=0\n   "
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
  \  local i=0\n  for n in \"${nodes[@]}\"; do\n    if (( n % 2 == 0 )); then\n  \
  \    evens+=($n)\n    else\n      odds+=($n)\n    fi\n  done\n  if (( ${#evens[@]}\
  \ > 0 )); then\n    result=($(printf \"%s\\n\" \"${evens[@]}\" | sort -n | head\
  \ -n 1))\n    for n in \"${nodes[@]}\"; do\n      if (( n == result )); then\n \
  \       result+=($i)\n        break\n      fi\n      ((i++))\n    done\n  fi\n \
  \ echo \"${result[@]}\""
- "  local -a arr=()\n  local -i i=0\n  local -i min=0\n  local -i min_idx=0\n  local\
  \ -i idx=0\n  local -i len=0\n  local -i val=0\n  local -i found=0\n  local -i first=0\n\
  \  local -i first_idx=0\n  local -i first_val=0\n  local -i first_found=0\n  local\
  \ -i first_found_idx=0\n  local -i first_found_val=0\n  local -i first_found_idx_val=0\n\
  \  local -i first_found_idx_val_idx=0\n  local -i first_found_idx_val_idx_val=0\n\
  \  local -i first_found_idx_val_idx_val_idx=0\n  local -i first_found_idx_val_idx_val_idx_val=0\n\
  \  local -i first_found_idx_val_idx_val_idx_val_idx=0\n  local -i first_found_idx_val_idx_val_idx_val_idx_val=0\n\
  \  local -i first_found_idx_val_idx_val_idx_val_idx_val_idx=0\n  local -i first_found_idx_val_idx_val_idx_val_idx_val_idx_val=0\n\
  \  local -i first_found_idx_val_idx_val_idx_val_idx_val_idx_val_idx=0\n  local -i\
  \ first_found_idx_val_idx_val_idx_val_idx_val_idx_val_idx_val=0\n  local -i first_found_idx_val_idx_val_idx_val_idx_val_idx_val_idx_val_idx=0\n\
  \  local -i first_found_idx_val_idx_val_idx_val_idx_val_idx_"
- "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n  local -i min_even_index=1000000000\n\
  \  local -i i=0\n  for n in \"${nodes[@]}\"; do\n    if [[ $((n % 2)) -eq 0 ]];\
  \ then\n      if [[ $n -lt $min_even_value ]]; then\n        min_even_value=$n\n\
  \        min_even_index=$i\n      fi\n    fi\n    ((i++))\n  done\n  if [[ $min_even_value\
  \ -eq 1000000000 ]]; then\n    echo \"[]\"\n  else\n    echo \"[$min_even_value,\
  \ $min_even_index]\"\n  fi"
- "  local -a arr=()\n  local -i i=0\n  local -i min_even=0\n  local -i min_even_idx=0\n\
  \  local -i num_even=0\n  local -i num_nodes=0\n  local -i val=0\n  local -i x=0\n\
  \  local -i y=0\n  local -i z=0\n  local -i zero_idx=0\n  local -i zero_idx_min=0\n\
  \  local -i zero_idx_min_even=0\n  local -i zero_idx_min_even_idx=0\n  local -i\
  \ zero_idx_min_even_val=0\n  local -i zero_idx_min_val=0\n  local -i zero_idx_val=0\n\
  \  local -i zero_idx_val_even=0\n  local -i zero_idx_val_even_idx=0\n  local -i\
  \ zero_idx_val_even_val=0\n  local -i zero_idx_val_min=0\n  local -i zero_idx_val_min_even=0\n\
  \  local -i zero_idx_val_min_even_idx=0\n  local -i zero_idx_val_min_even_val=0\n\
  \  local -i zero_idx_val_min_val=0\n  local -i zero_idx_val_val=0\n  local -i zero_val=0\n\
  \  local -i zero_val_even=0\n  local -i zero_val_even_idx=0\n  local -i zero_val_even_val=0\n\
  \  local -i zero_val_min=0\n  local -i zero_val_min_even=0\n  local -i zero_val_min_even_idx=0\n\
  \  local -i zero_val_min_even_val=0\n  local -i zero_val_min_val=0\n  local -i zero_val_val=0\n\
  \  local -i zero_val_val_even=0\n  local -i zero_val_val_even_idx"
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n  local\
  \ -a result=()\n  local i=0\n  local min_even=0\n  local min_even_index=0\n  local\
  \ min_even_index_in_evens=0\n  local -i evens_count=0\n  local -i nodes_count=${#nodes[@]}\n\
  \  local -i evens_index_count=0\n  for ((i=0; i<nodes_count; i++)); do\n    if [[\
  \ ${nodes[$i]} -eq 0 ]]; then\n      evens+=(\"${nodes[$i]}\")\n      evens_index+=(\"\
  $i\")\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[ $(( ${nodes[$i]} % 2 )) -eq 0 ]];\
  \ then\n      evens+=(\"${nodes[$i]}\")\n      evens_index+=(\"$i\")\n    fi\n \
  \ done\n  evens_count=${#evens[@]}\n  evens_index_count=${#evens_index[@]}\n  if\
  \ [[ $evens_count -eq 0 ]] || [[ $evens_index_count -eq 0 ]]; then\n    result=()\n\
  \  else\n    min_even=${evens[0]}\n    min_even_index=${evens_index[0]}\n    for\
  \ ((i=1; i<evens_count; i++)); do\n      if [[ ${evens[$i]} -lt $min_even ]]; then\n\
  \        min_even=${evens[$i]}\n        min_even_index=${evens_index[$i]}\n    \
  \  fi\n    done\n    for ((i=0; i<evens_count; i++)); do\n      if [[ ${evens[$i]}\
  \ -eq $min_even ]]; then\n        min_even_index_in_evens=$i\n        break\n  \
  \    fi\n    done\n    result=($min_even ${evens_index[$min_even_index_in_evens]})\n\
  \  fi\n "
- "    local -a arr\n    local -i i\n    local -i min\n    local -i min_i\n    local\
  \ -i even\n    local -i even_i\n    local -i n\n    local -i n_i\n    local -i n_even\n\
  \    local -i n_even_i\n    local -i n_min\n    local -i n_min_i\n    local -i n_even_min\n\
  \    local -i n_even_min_i\n    local -i n_even_min_i\n    local -i n_even_min_i\n\
  \    local -i n_even_min_i\n    local -i n_even_min_i\n    local -i n_even_min_i\n\
  \    local -i n_even_min_i\n    local -i n_even_min_i\n    local -i n_even_min_i\n\
  \    local -i n_even_min_i\n    local -i n_even_min_i\n    local -i n_even_min_i\n\
  \    local -i n_even_min_i\n    local -i n_even_min_i\n    local -i n_even_min_i\n\
  \    local -i n_even_min_i\n    local -i n_even_min_i\n    local -i n_even_min_i\n\
  \    local -i n_even_min_i\n    local -i n_even_min_i\n    local -i n_even_min_i\n\
  \    local -i n_even_min_i\n    local -i n_even_min_i\n    local -i n_even_min_i\n\
  \    local -i n_even_min_i\n    local -i n_even_min_i\n    local -i n_even_min_i\n\
  \    local -i n_even_min_i\n    local -i n_even_min_i\n    local -i n_even_min_i\n\
  \    local -i n_even_min_i\n    local -i n_even_min_i\n    local -i n_even_min_i\n\
  \    local -i n_even_min_i\n    local -"
- "  local -a nodes=($1)\n  local -a evens\n  local -a result\n  local i\n  local\
  \ min_even\n  local min_even_index\n  local min_even_index_in_nodes\n  local node\n\
  \  local node_index\n  local node_index_in_nodes\n  local node_index_in_evens\n\
  \  local even_index\n  local even\n  local even_index_in_nodes\n  local even_index_in_evens\n\
  \  for ((i=0; i<${#nodes[@]}; i++)); do\n    node=${nodes[$i]}\n    if ((node %\
  \ 2 == 0)); then\n      evens+=($node)\n    fi\n  done\n  if ((${#evens[@]} == 0));\
  \ then\n    echo \"[]\"\n    return\n  fi\n  min_even=${evens[0]}\n  min_even_index=0\n\
  \  min_even_index_in_nodes=0\n  for ((i=0; i<${#evens[@]}; i++)); do\n    even=${evens[$i]}\n\
  \    if ((even < min_even)); then\n      min_even=$even\n      min_even_index=$i\n\
  \    fi\n  done\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    node=${nodes[$i]}\n\
  \    if ((node == min_even)); then\n      min_even_index_in_nodes=$i\n      break\n\
  \    fi\n  done\n  echo \"[$min_even, $min_even_index_in_nodes]\""
- "  local -a arr=($1)\n  local -i min=999999\n  local -i min_index=0\n  local -i\
  \ i=0\n  for n in \"${arr[@]}\"; do\n    if (( n % 2 == 0 && n < min )); then\n\
  \      min=$n\n      min_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min ==\
  \ 999999 )); then\n    echo \"[]\"\n  else\n    echo \"[$min, $min_index]\"\n  fi"
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n  local -i\
  \ min_even_index=0\n  local -i min_even_count=0\n  local -i min_even_first_index=0\n\
  \  local -i min_even_last_index=0\n  local -i len=${#nodes[@]}\n  local -i value=0\n\
  \  local -i is_even=0\n  local -i is_first=0\n  local -i is_last=0\n  local -i is_min_even=0\n\
  \  local -i is_min_even_first=0\n  local -i is_min_even_last=0\n  local -i is_min_even_count=0\n\
  \  local -i is_min_even_first_count=0\n  local -i is_min_even_last_count=0\n  local\
  \ -i is_min_even_first_last_count=0\n  local -i is_min_even_first_last_index=0\n\
  \  local -i is_min_even_first_last_value=0\n  local -i is_min_even_first_last_first_index=0\n\
  \  local -i is_min_even_first_last_last_index=0\n  local -i is_min_even_first_last_first_last_index=0\n\
  \  local -i is_min_even_first_last_first_last_count=0\n  local -i is_min_even_first_last_first_last_value=0\n\
  \  local -i is_min_even_first_last_first_last_first_index=0\n  local -i is_min_even_first_last_first_last_last_index=0\n\
  \  local -i is_min_even_first_last_first_last_first_last_index=0\n  local -i is_min_even_first_last_first_last_first_last_count=0\n\
  \  local -i is_min_even_first_last_first_last_first_last_value=0\n  local -i is"
- "    local -a a=($1)\n    local -i i=0\n    local -i min=999999\n    local -i min_i=0\n\
  \    local -i len=${#a[@]}\n    local -i even=0\n    local -i v=0\n    for ((i=0;\
  \ i<len; i++)); do\n        v=${a[i]}\n        if ((v % 2 == 0)); then\n       \
  \     if ((v < min)); then\n                min=v\n                min_i=i\n   \
  \             even=1\n            fi\n        fi\n    done\n    if ((even == 1));\
  \ then\n        echo \"[$min, $min_i]\"\n    else\n        echo \"[]\"\n    fi"
- "  local -a arr=()\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
  \ -i n=0\n  local -i n_even=0\n  local -i n_odd=0\n  local -i sum=0\n  local -i\
  \ sum_even=0\n  local -i sum_odd=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\
  \  local -i z_i=0\n  local -i z_min=0\n  local -i z_min_i=0\n  local -i z_min_i_min=0\n\
  \  local -i z_min_i_min_i=0\n  local -i z_min_i_min_i_min=0\n  local -i z_min_i_min_i_min_i=0\n\
  \  local -i z_min_i_min_i_min_i_min=0\n  local -i z_min_i_min_i_min_i_min_i=0\n\
  \  local -i z_min_i_min_i_min_i_min_i_min=0\n  local -i z_min_i_min_i_min_i_min_i_min_i=0\n\
  \  local -i z_min_i_min_i_min_i_min_i_min_i_min=0\n  local -i z_min_i_min_i_min_i_min_i_min_i_min_i=0\n\
  \  local -i z_min_i_min_i_min_i_min_i_min_i_min_i_min=0\n  local -i z_min_i_min_i_min_i_min_i_min_i_min_i_min_i=0\n\
  \  local -i z_min_i_min_i_min_i_min_i_min_i_min_i_min_i_min=0\n  local -i z_min_i_min_i_min_i_min_i_min_i_min"
- "  local -a a=($1)\n  local -i i=0\n  local -i min=999999999\n  local -i min_i=0\n\
  \  local -i n=${#a[@]}\n  while (( i < n )); do\n    if (( a[i] < min && a[i] %\
  \ 2 == 0 )); then\n      min=${a[i]}\n      min_i=$i\n    fi\n    (( i++ ))\n  done\n\
  \  if (( min < 999999 )); then\n    echo \"[$min, $min_i]\"\n  else\n    echo \"\
  []\"\n  fi"
- "  local -a nodes=($1)\n  local -i min_even_value=100000000\n  local -i min_even_index=0\n\
  \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if (( node % 2 == 0 && node\
  \ < min_even_value )); then\n      min_even_value=$node\n      min_even_index=$i\n\
  \    fi\n    (( i++ ))\n  done\n  if (( min_even_value == 100000000 )); then\n \
  \   echo \"[]\"\n  else\n    echo \"[$min_even_value, $min_even_index]\"\n  fi"
- "    local -a arr=()\n    local -i i=0\n    local -i min=0\n    local -i min_i=0\n\
  \    local -i len=0\n    local -i even=0\n    local -i val=0\n    local -i first_even=0\n\
  \    local -i first_even_i=0\n    local -i first_even_val=0\n    local -i first_even_found=0\n\
  \    local -i first_even_set=0\n    local -i first_even_set_i=0\n    local -i first_even_set_val=0\n\
  \    local -i first_even_set_found=0\n    local -i first_even_set_set=0\n    local\
  \ -i first_even_set_set_i=0\n    local -i first_even_set_set_val=0\n    local -i\
  \ first_even_set_set_found=0\n    local -i first_even_set_set_set=0\n    local -i\
  \ first_even_set_set_set_i=0\n    local -i first_even_set_set_set_val=0\n    local\
  \ -i first_even_set_set_set_found=0\n    local -i first_even_set_set_set_set=0\n\
  \    local -i first_even_set_set_set_set_i=0\n    local -i first_even_set_set_set_set_val=0\n\
  \    local -i first_even_set_set_set_set_found=0\n    local -i first_even_set_set_set_set_set=0\n\
  \    local -i first_even_set_set_set_set_set_i=0\n    local -i first_even_set_set_set_set_set_val=0\n\
  \    local -i first_even_set_set_set_set_set_found=0\n    local -i first_even_set_set_set_set_set_set=0\n\
  \    local -i first_even_set_set_set_set_set_set_i=0\n    local -i first_even_set_set"
- "  local nodes=\"$1\"\n  local min_value=\n  local min_index=\n  local index=0\n\
  \  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z\
  \ $min_value ]] || [[ $node -lt $min_value ]]; then\n        min_value=$node\n \
  \       min_index=$index\n      fi\n    fi\n    index=$((index + 1))\n  done\n \
  \ if [[ -z $min_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[$min_value,\
  \ $min_index]\"\n  fi"
- "  local -a nodes=($1)\n  local -i even_min=999999\n  local -i even_min_idx=-1\n\
  \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if (( node % 2 == 0 ));\
  \ then\n      if (( node < even_min )); then\n        even_min=node\n        even_min_idx=i\n\
  \      fi\n    fi\n    (( i++ ))\n  done\n  if (( even_min_idx >= 0 )); then\n \
  \   echo \"[$even_min, $even_min_idx]\"\n  else\n    echo \"[]\"\n  fi"
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local -a\
  \ result=()\n  local i=0\n  for n in \"${nodes[@]}\"; do\n    if [[ $((n % 2)) -eq\
  \ 0 ]]; then\n      evens+=($n)\n      evens_idx+=($i)\n    fi\n    i=$((i + 1))\n\
  \  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    result=()\n  else\n    local min=${evens[0]}\n\
  \    local min_idx=0\n    i=0\n    for n in \"${evens[@]}\"; do\n      if [[ $n\
  \ -lt $min ]]; then\n        min=$n\n        min_idx=${evens_idx[$i]}\n      fi\n\
  \      i=$((i + 1))\n    done\n    result=($min $min_idx)\n  fi\n  echo \"${result[@]}\""
- "  local -a a=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
  \ -i found=0\n  for i in \"${a[@]}\"; do\n    if (( i % 2 == 0 )); then\n      if\
  \ (( found == 0 )); then\n        min=$i\n        min_i=$i\n        found=1\n  \
  \    elif (( i < min )); then\n        min=$i\n        min_i=$i\n      fi\n    fi\n\
  \  done\n  if (( found == 0 )); then\n    echo \"[]\"\n  else\n    echo \"[$min,\
  \ $min_i]\"\n  fi"
- "    local -a arr=($1)\n    local -i min=${arr[0]}\n    local -i min_idx=0\n   \
  \ local -i idx=0\n    local -i len=${#arr[@]}\n    local -i i=0\n    for ((i=0;\
  \ i<len; i++)); do\n        if (( arr[i] % 2 == 0 )); then\n            if (( arr[i]\
  \ < min )); then\n                min=${arr[i]}\n                min_idx=$i\n  \
  \          fi\n        fi\n    done\n    echo \"[$min, $min_idx]\""
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=100000000\n  local\
  \ -i min_even_index=0\n  local -i min_even_count=0\n  local -i min_even_first_index=0\n\
  \  local -i min_even_last_index=0\n  local -i min_even_first_index_found=0\n  local\
  \ -i min_even_last_index_found=0\n  local -i min_even_first_index_found_count=0\n\
  \  local -i min_even_last_index_found_count=0\n  local -i min_even_first_index_found_count_max=0\n\
  \  local -i min_even_last_index_found_count_max=0\n  local -i min_even_first_index_found_count_max_index=0\n\
  \  local -i min_even_last_index_found_count_max_index=0\n  local -i min_even_first_index_found_count_max_index_value=0\n\
  \  local -i min_even_last_index_found_count_max_index_value=0\n  local -i min_even_first_index_found_count_max_index_value_count=0\n\
  \  local -i min_even_last_index_found_count_max_index_value_count=0\n  local -i\
  \ min_even_first_index_found_count_max_index_value_count_max=0\n  local -i min_even_last_index_found_count_max_index_value_count_max=0\n\
  \  local -i min_even_first_index_found_count_max_index_value_count_max_index=0\n\
  \  local -i min_even_last_index_found_count_max_index_value_count_max_index=0\n\
  \  local -i min_even_first_index_found_count_max_index_value_count_max_index_value=0\n\
  \  local -i min_even_last_index_found_count_max_index_value_count_max_index_"
- "\tlocal -a a\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i l=0\n\t\
  local -i m=0\n\tlocal -i n=0\n\tlocal -i o=0\n\tlocal -i p=0\n\tlocal -i q=0\n\t\
  local -i r=0\n\tlocal -i s=0\n\tlocal -i t=0\n\tlocal -i u=0\n\tlocal -i v=0\n\t\
  local -i w=0\n\tlocal -i x=0\n\tlocal -i y=0\n\tlocal -i z=0\n\tlocal -i A=0\n\t\
  local -i B=0\n\tlocal -i C=0\n\tlocal -i D=0\n\tlocal -i E=0\n\tlocal -i F=0\n\t\
  local -i G=0\n\tlocal -i H=0\n\tlocal -i I=0\n\tlocal -i J=0\n\tlocal -i K=0\n\t\
  local -i L=0\n\tlocal -i M=0\n\tlocal -i N=0\n\tlocal -i O=0\n\tlocal -i P=0\n\t\
  local -i Q=0\n\tlocal -i R=0\n\tlocal -i S=0\n\tlocal -i T=0\n\tlocal -i U=0\n\t\
  local -i V=0\n\tlocal -i W=0\n\tlocal -i X=0\n\tlocal -i Y=0\n\tlocal -i Z=0\n\t\
  local -i aa=0\n\tlocal -i ab=0\n\tlocal -i ac=0\n\tlocal -i ad=0\n\tlocal -i ae=0\n\
  \tlocal -i af=0\n\tlocal -i ag=0\n\tlocal -i ah=0\n\tlocal -i ai=0\n\tlocal -i aj=0\n\
  \tlocal -i ak=0\n\tlocal -i al=0\n\tlocal -i am=0\n\tlocal -i an=0\n\tlocal -i ao=0\n\
  \tlocal -i ap=0\n\tlocal -i aq=0\n\tlocal -i ar=0\n\tlocal -"
- "    local -a arr=($1)\n    local -i i=0\n    local -i min=0\n    local -i min_i=0\n\
  \    local -i len=${#arr[@]}\n    local -i found=0\n    for ((i=0; i<len; i++));\
  \ do\n        if (( arr[i] % 2 == 0 )); then\n            if (( found == 0 )); then\n\
  \                min=arr[i]\n                min_i=i\n                found=1\n\
  \            else\n                if (( arr[i] < min )); then\n               \
  \     min=arr[i]\n                    min_i=i\n                fi\n            fi\n\
  \        fi\n    done\n    if (( found == 0 )); then\n        echo \"[]\"\n    else\n\
  \        echo \"[$min, $min_i]\"\n    fi"
- "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n  local -i min_even_index=1000000000\n\
  \  local -i i=0\n  local -i n=${#nodes[@]}\n  for ((i=0; i<n; i++)); do\n    if\
  \ (( nodes[i] % 2 == 0 && nodes[i] < min_even_value )); then\n      min_even_value=${nodes[i]}\n\
  \      min_even_index=$i\n    fi\n  done\n  if (( min_even_value < 1000000000 ));\
  \ then\n    echo \"[$min_even_value, $min_even_index]\"\n  else\n    echo \"[]\"\
  \n  fi"
- "  local -a nodes=($1)\n  local -a evens\n  local -a odds\n  local -i i\n  local\
  \ -i j\n  local -i k\n  local -i min_even\n  local -i min_odd\n  local -i min_even_index\n\
  \  local -i min_odd_index\n  local -i num_evens\n  local -i num_odds\n  local -i\
  \ num_nodes\n  local -i node_value\n  local -i node_index\n  local -i node_value_index\n\
  \  local -i node_value_index_value\n  local -i node_value_index_index\n  local -i\
  \ node_value_index_value_index\n  local -i node_value_index_value_index_value\n\
  \  local -i node_value_index_value_index_index\n  local -i node_value_index_value_index_value_index\n\
  \  local -i node_value_index_value_index_value_index_value\n  local -i node_value_index_value_index_value_index_index\n\
  \  local -i node_value_index_value_index_value_index_value_index\n  local -i node_value_index_value_index_value_index_value_index_value\n\
  \  local -i node_value_index_value_index_value_index_value_index_index\n  local\
  \ -i node_value_index_value_index_value_index_value_index_value_index\n  local -i\
  \ node_value_index_value_index_value_index_value_index_value_index_value\n  local\
  \ -i node_value_index_value_index_value_index_value_index_value_index_index\n  local\
  \ -i node_value_index_value_index_value_index_value_index_value_index_value_index\n\
  \  local -i node_value_index_value_index_value_index_value_index_value_index_value_index_value\n\
  \  local -i node_value_index_value_index_value_index_value_index_value_index_value_index_index\n\
  \  local -i node_value"
- "  local -a arr=()\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
  \ -i min_found=0\n  local -i tmp=0\n  local -i tmp_i=0\n  local -i tmp_found=0\n\
  \  local -i len=0\n  local -i len_i=0\n  local -i len_found=0\n  local -i len_min=0\n\
  \  local -i len_min_i=0\n  local -i len_min_found=0\n  local -i len_tmp=0\n  local\
  \ -i len_tmp_i=0\n  local -i len_tmp_found=0\n  local -i len_tmp_min=0\n  local\
  \ -i len_tmp_min_i=0\n  local -i len_tmp_min_found=0\n  local -i len_tmp_min_len=0\n\
  \  local -i len_tmp_min_len_i=0\n  local -i len_tmp_min_len_found=0\n  local -i\
  \ len_tmp_min_len_min=0\n  local -i len_tmp_min_len_min_i=0\n  local -i len_tmp_min_len_min_found=0\n\
  \  local -i len_tmp_min_len_min_tmp=0\n  local -i len_tmp_min_len_min_tmp_i=0\n\
  \  local -i len_tmp_min_len_min_tmp_found=0\n  local -i len_tmp_min_len_min_tmp_min=0\n\
  \  local -i len_tmp_min_len_min_tmp_min_i=0\n  local -i len_tmp_min_len_min_tmp_min_found=0\n\
  \  local -i len_tmp_min_len_min_tmp_min_len=0\n  local -i len_tmp_min_len_min_tmp_min_len_i=0\n\
  \  local -i len_tmp_min_len_min_tmp_min_len_found=0\n  local -i len_tmp_min_len_min"
- "  local -a a=($1)\n  local -i n=${#a[@]}\n  local -i i=0\n  local -i min_i=0\n\
  \  local -i min_v=0\n  local -i v=0\n  local -i found=0\n  for ((i=0; i<n; i++));\
  \ do\n    v=${a[i]}\n    if ((v % 2 == 0)); then\n      if ((found == 0)); then\n\
  \        min_v=$v\n        min_i=$i\n        found=1\n      else\n        if ((v\
  \ < min_v)); then\n          min_v=$v\n          min_i=$i\n        fi\n      fi\n\
  \    fi\n  done\n  if ((found == 0)); then\n    echo \"[]\"\n  else\n    echo \"\
  [$min_v, $min_i]\"\n  fi"
- "  local -a a=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
  \ -i len=${#a[@]}\n  local -i found=0\n  for ((i=0; i<len; i++)); do\n    if ((a[i]\
  \ % 2 == 0)); then\n      if ((found == 0)); then\n        min=a[i]\n        min_i=i\n\
  \        found=1\n      elif ((a[i] < min)); then\n        min=a[i]\n        min_i=i\n\
  \      fi\n    fi\n  done\n  if ((found == 0)); then\n    echo \"[]\"\n  else\n\
  \    echo \"[$min, $min_i]\"\n  fi"
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
  \  local i=0\n  local j=0\n  local k=0\n  local n=${#nodes[@]}\n  for ((i=0; i<n;\
  \ i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      evens[$j]=$i\n      ((j++))\n\
  \    elif [[ $(( ${nodes[$i]} % 2 )) -eq 0 ]]; then\n      evens[$j]=$i\n      ((j++))\n\
  \    else\n      odds[$k]=$i\n      ((k++))\n    fi\n  done\n  if [[ ${#evens[@]}\
  \ -eq 0 ]]; then\n    result=(0 0)\n  elif [[ ${#evens[@]} -eq 1 ]]; then\n    result=(${nodes[${evens[0]}]}\
  \ ${evens[0]})\n  else\n    local min=${nodes[${evens[0]}]}\n    local min_index=${evens[0]}\n\
  \    for ((i=1; i<${#evens[@]}; i++)); do\n      if [[ ${nodes[${evens[$i]}]} -lt\
  \ $min ]]; then\n        min=${nodes[${evens[$i]}]}\n        min_index=${evens[$i]}\n\
  \      fi\n    done\n    result=($min $min_index)\n  fi\n  echo ${result[@]}"
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n  local\
  \ -a result=()\n  local i=0\n  for n in \"${nodes[@]}\"; do\n    if (( n % 2 ==\
  \ 0 )); then\n      evens+=($n)\n      evens_index+=($i)\n    fi\n    ((i++))\n\
  \  done\n  if (( ${#evens[@]} > 0 )); then\n    local min_even=${evens[0]}\n   \
  \ local min_even_index=${evens_index[0]}\n    for ((i=1; i<${#evens[@]}; i++));\
  \ do\n      if (( ${evens[i]} < $min_even )); then\n        min_even=${evens[i]}\n\
  \        min_even_index=${evens_index[i]}\n      fi\n    done\n    result=($min_even\
  \ $min_even_index)\n  fi\n  echo \"${result[@]}\""
- "    local -a a=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#a[@]}\n\
  \    local -i m=0\n    local -i k=0\n    local -i l=0\n    local -i p=0\n    local\
  \ -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n\
  \    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local\
  \ -i z=0\n    local -i A=0\n    local -i B=0\n    local -i C=0\n    local -i D=0\n\
  \    local -i E=0\n    local -i F=0\n    local -i G=0\n    local -i H=0\n    local\
  \ -i I=0\n    local -i J=0\n    local -i K=0\n    local -i L=0\n    local -i M=0\n\
  \    local -i N=0\n    local -i O=0\n    local -i P=0\n    local -i Q=0\n    local\
  \ -i R=0\n    local -i S=0\n    local -i T=0\n    local -i U=0\n    local -i V=0\n\
  \    local -i W=0\n    local -i X=0\n    local -i Y=0\n    local -i Z=0\n    local\
  \ -i aa=0\n    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n    local -i\
  \ ae=0\n    local -i af=0\n    local -i ag=0\n    local -i ah=0\n    local -i ai=0\n\
  \    local -i aj=0\n    local -i ak=0\n    local -i al=0\n    local -i am=0\n  \
  \  local -i an=0\n    local -i ao=0\n    local -i ap=0\n    local -i aq=0\n    local\
  \ -i ar=0\n    local"
- "  local nodes=($1)\n  local min_even=\n  local min_even_idx=\n  for ((i=0; i<${#nodes[@]};\
  \ i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      min_even=0\n      min_even_idx=$i\n\
  \      break\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n\
  \      if [[ -z $min_even ]] || [[ ${nodes[$i]} -lt $min_even ]]; then\n       \
  \ min_even=${nodes[$i]}\n        min_even_idx=$i\n      fi\n    fi\n  done\n  if\
  \ [[ -z $min_even ]]; then\n    echo \"[]\"\n  else\n    echo \"[$min_even, $min_even_idx]\"\
  \n  fi"
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local -a\
  \ result=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i min_idx=0\n\
  \  local -i min_val=0\n  local -i len=${#nodes[@]}\n  if [[ $len -eq 0 ]]; then\n\
  \    echo \"[]\"\n    return\n  fi\n  for ((i=0; i<len; i++)); do\n    if [[ $((nodes[i]\
  \ % 2)) -eq 0 ]]; then\n      evens[j]=${nodes[i]}\n      evens_idx[j]=$i\n    \
  \  ((j++))\n    fi\n  done\n  if [[ $j -eq 0 ]]; then\n    echo \"[]\"\n    return\n\
  \  fi\n  min_val=${evens[0]}\n  min_idx=${evens_idx[0]}\n  for ((k=1; k<j; k++));\
  \ do\n    if [[ ${evens[k]} -lt $min_val ]]; then\n      min_val=${evens[k]}\n \
  \     min_idx=${evens_idx[k]}\n    fi\n  done\n  result[0]=$min_val\n  result[1]=$min_idx\n\
  \  echo \"[${result[0]}, ${result[1]}]\""
- "  local -a nodes=()\n  local -i i=0\n  local -i min=0\n  local -i min_idx=0\n \
  \ local -i n=0\n  local -i n_idx=0\n  local -i n_even=0\n  local -i n_even_idx=0\n\
  \  local -i n_odd=0\n  local -i n_odd_idx=0\n  local -i n_zero=0\n  local -i n_zero_idx=0\n\
  \  local -i n_zero_even=0\n  local -i n_zero_even_idx=0\n  local -i n_zero_odd=0\n\
  \  local -i n_zero_odd_idx=0\n  local -i n_zero_even_min=0\n  local -i n_zero_even_min_idx=0\n\
  \  local -i n_zero_odd_min=0\n  local -i n_zero_odd_min_idx=0\n  local -i n_even_min=0\n\
  \  local -i n_even_min_idx=0\n  local -i n_odd_min=0\n  local -i n_odd_min_idx=0\n\
  \  local -i n_min=0\n  local -i n_min_idx=0\n  local -i n_min_even=0\n  local -i\
  \ n_min_even_idx=0\n  local -i n_min_odd=0\n  local -i n_min_odd_idx=0\n  local\
  \ -i n_min_zero=0\n  local -i n_min_zero_idx=0\n  local -i n_min_zero_even=0\n \
  \ local -i n_min_zero_even_idx=0\n  local -i n_min_zero_odd=0\n  local -i n_min_zero_odd_idx=0\n\
  \  local -i n_min_zero_even_min=0\n  local -i n_min_zero_even_min_idx=0\n  local\
  \ -i n_min_zero_odd_min=0\n "
- "    local -a nodes=($1)\n    local -a evens\n    local -a odds\n    local -a result\n\
  \    local i\n    local j\n    local min_even\n    local min_odd\n    local min_even_index\n\
  \    local min_odd_index\n    local min_index\n    local min_value\n    local min_value_index\n\
  \    local min_value_index_even\n    local min_value_index_odd\n    local min_value_index_even_index\n\
  \    local min_value_index_odd_index\n    local min_value_index_index\n    local\
  \ min_value_index_value\n    local min_value_index_value_index\n    local min_value_index_value_index_even\n\
  \    local min_value_index_value_index_odd\n    local min_value_index_value_index_even_index\n\
  \    local min_value_index_value_index_odd_index\n    local min_value_index_value_index_index\n\
  \    local min_value_index_value_index_value\n    local min_value_index_value_index_value_index\n\
  \    local min_value_index_value_index_value_index_even\n    local min_value_index_value_index_value_index_odd\n\
  \    local min_value_index_value_index_value_index_even_index\n    local min_value_index_value_index_value_index_odd_index\n\
  \    local min_value_index_value_index_value_index_index\n    local min_value_index_value_index_value_index_value\n\
  \    local min_value_index_value_index_value_index_value_index\n    local min_value_index_value_index_value_index_value_index_even\n\
  \    local min_value_index_value_index_value_index_value_index_odd\n    local min_value_index_value_index_value_index_value_index_even_index\n\
  \    local min_value_index_value_index_value_index_value_index_odd_index\n    local\
  \ min_value_index_value_index_value_index_value_index_index\n"
- "  local -a arr=()\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
  \ -i min_even=0\n  local -i min_even_i=0\n  local -i val=0\n  local -i even=0\n\
  \  local -i first_even=0\n  local -i first_even_i=0\n  local -i first_zero=0\n \
  \ local -i first_zero_i=0\n  local -i first_zero_even=0\n  local -i first_zero_even_i=0\n\
  \  local -i first_zero_even_found=0\n  local -i first_zero_found=0\n  local -i first_even_found=0\n\
  \  local -i first_found=0\n  local -i first_i=0\n  local -i first=0\n  local -i\
  \ first_even_zero=0\n  local -i first_even_zero_i=0\n  local -i first_even_zero_found=0\n\
  \  local -i first_zero_even_zero=0\n  local -i first_zero_even_zero_i=0\n  local\
  \ -i first_zero_even_zero_found=0\n  local -i first_zero_zero=0\n  local -i first_zero_zero_i=0\n\
  \  local -i first_zero_zero_found=0\n  local -i first_zero_zero_even=0\n  local\
  \ -i first_zero_zero_even_i=0\n  local -i first_zero_zero_even_found=0\n  local\
  \ -i first_zero_even_zero_zero=0\n  local -i first_zero_even_zero_zero_i=0\n  local\
  \ -i first_zero_even_zero_zero_found=0\n  local -i first_zero_zero_zero=0\n  local\
  \ -i first_zero_zero_zero_i=0\n  local -i first_zero_zero_zero_found=0\n  local\
  \ -i first_zero_zero_zero_even=0\n  local -i first_zero_zero_zero_even_i=0"
- "  local -a arr=()\n  local -i i=0\n  local -i min_index=0\n  local -i min_value=0\n\
  \  local -i value=0\n  local -i is_first=1\n  local -i is_even=0\n  for value in\
  \ $1; do\n    arr[$i]=$value\n    ((i++))\n  done\n  for ((i=0; i<${#arr[@]}; i++));\
  \ do\n    value=${arr[$i]}\n    ((is_even=value%2))\n    if ((is_even==0)); then\n\
  \      if ((is_first==1)); then\n        min_value=$value\n        min_index=$i\n\
  \        is_first=0\n      elif ((value<min_value)); then\n        min_value=$value\n\
  \        min_index=$i\n      fi\n    fi\n  done\n  if ((is_first==1)); then\n  \
  \  echo \"[]\"\n  else\n    echo \"[$min_value, $min_index]\"\n  fi"
- "  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n  local\
  \ i=0\n  for node in $nodes; do\n    if [ $((node % 2)) -eq 0 ]; then\n      if\
  \ [ -z \"$min_even_value\" ] || [ $node -lt $min_even_value ]; then\n        min_even_value=$node\n\
  \        min_even_index=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n  if [ -z\
  \ \"$min_even_value\" ]; then\n    echo \"[]\"\n  else\n    echo \"[$min_even_value,\
  \ $min_even_index]\"\n  fi"
- "  local -a a=($1)\n  local -i i=0\n  local -i min=999999\n  local -i min_i=0\n\
  \  for i in \"${!a[@]}\"; do\n    if [[ ${a[$i]} -eq 0 ]]; then\n      echo \"[0,\
  \ $i]\"\n      return\n    fi\n    if [[ ${a[$i]} -lt $min && $(( ${a[$i]} % 2 ))\
  \ -eq 0 ]]; then\n      min=${a[$i]}\n      min_i=$i\n    fi\n  done\n  if [[ $min\
  \ -eq 999999 ]]; then\n    echo \"[]\"\n  else\n    echo \"[$min, $min_i]\"\n  fi"
- "    local -a nodes=($1)\n    local -a evens=()\n    local -a evens_idx=()\n   \
  \ local -a result=()\n    local i=0\n    local j=0\n    local k=0\n    local n=${#nodes[@]}\n\
  \    local m=0\n    local min=0\n    local min_idx=0\n    local min_idx_idx=0\n\
  \    for ((i=0; i<n; i++)); do\n        if ((nodes[i] % 2 == 0)); then\n       \
  \     evens[j]=${nodes[i]}\n            evens_idx[j]=$i\n            ((j++))\n \
  \       fi\n    done\n    m=${#evens[@]}\n    if ((m == 0)); then\n        echo\
  \ \"[]\"\n        return\n    fi\n    min=${evens[0]}\n    min_idx=${evens_idx[0]}\n\
  \    for ((k=1; k<m; k++)); do\n        if ((evens[k] < min)); then\n          \
  \  min=${evens[k]}\n            min_idx=${evens_idx[k]}\n        fi\n    done\n\
  \    result[0]=$min\n    result[1]=$min_idx\n    echo \"[${result[0]}, ${result[1]}]\""
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
  \  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
  \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
  \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
  \  for i in \"${nodes[@]}\"; do\n    if [[ $((i % 2)) -eq 0 ]]; then\n      evens+=($i)\n\
  \    else\n      odds+=($i)\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n\
  \    result=(0 0)\n  else\n    for j in \"${evens[@]}\"; do\n      if [[ $j -lt\
  \ ${result[0]} ]]; then\n        result=($j $k)\n      fi\n      k=$((k + 1))\n\
  \    done\n  fi\n  echo \"${result[@]}\""
- "  local -a arr=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local -a result=()\n\
  \  local i=0\n  for n in \"${arr[@]}\"; do\n    if (( n % 2 == 0 )); then\n    \
  \  evens+=($n)\n      evens_idx+=($i)\n    fi\n    ((i++))\n  done\n  if (( ${#evens[@]}\
  \ > 0 )); then\n    local min=${evens[0]}\n    local min_idx=0\n    i=0\n    for\
  \ n in \"${evens[@]}\"; do\n      if (( n < min )); then\n        min=$n\n     \
  \   min_idx=$i\n      fi\n      ((i++))\n    done\n    result=($min ${evens_idx[$min_idx]})\n\
  \  fi\n  echo \"${result[@]}\""
- "  local -a nodes=($1)\n  local min=${nodes[0]}\n  local min_index=0\n  local i=0\n\
  \  local value=0\n  for value in ${nodes[@]}; do\n    if [[ $((value % 2)) -eq 0\
  \ ]]; then\n      if [[ $value -lt $min ]]; then\n        min=$value\n        min_index=$i\n\
  \      fi\n    fi\n    ((i++))\n  done\n  if [[ $min -eq ${nodes[0]} ]]; then\n\
  \    echo \"[]\"\n  else\n    echo \"[$min, $min_index]\"\n  fi"
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a even_indices=()\n  local\
  \ -a result=()\n  local i=0\n  local j=0\n  local k=0\n  local min=0\n  local min_index=0\n\
  \  local min_index_index=0\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ $((nodes[i]\
  \ % 2)) -eq 0 ]]; then\n      evens[j]=${nodes[i]}\n      even_indices[j]=$i\n \
  \     ((j++))\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"\
  []\"\n    return\n  fi\n  min=${evens[0]}\n  min_index=${even_indices[0]}\n  for\
  \ ((k=1; k<${#evens[@]}; k++)); do\n    if [[ ${evens[k]} -lt $min ]]; then\n  \
  \    min=${evens[k]}\n      min_index=${even_indices[k]}\n    fi\n  done\n  result[0]=$min\n\
  \  result[1]=$min_index\n  echo \"[${result[@]}]\""
- "  local -a arr=($1)\n  local -a evens\n  local -a odds\n  local -a result\n  local\
  \ i\n  local j\n  local k\n  local len\n  local min\n  local min_index\n  local\
  \ min_value\n  local value\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    value=${arr[$i]}\n\
  \    if [[ $((value % 2)) -eq 0 ]]; then\n      evens+=($value)\n    else\n    \
  \  odds+=($value)\n    fi\n  done\n\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    result=()\n\
  \  else\n    min_value=${evens[0]}\n    min_index=0\n    for ((i=1; i<${#evens[@]};\
  \ i++)); do\n      if [[ ${evens[$i]} -lt $min_value ]]; then\n        min_value=${evens[$i]}\n\
  \        min_index=$i\n      fi\n    done\n    result=($min_value $min_index)\n\
  \  fi\n\n  echo \"${result[@]}\""
- "    local -a nodes=($1)\n    local -i min_even_value=10000\n    local -i min_even_index=10000\n\
  \    local -i i=0\n    local -i n=${#nodes[@]}\n    local -i node_value\n    local\
  \ -i node_index\n    for ((i=0; i<n; i++)); do\n        node_value=${nodes[$i]}\n\
  \        if ((node_value % 2 == 0)); then\n            if ((node_value < min_even_value));\
  \ then\n                min_even_value=$node_value\n                min_even_index=$i\n\
  \            fi\n        fi\n    done\n    if ((min_even_value < 10000)); then\n\
  \        echo \"[$min_even_value, $min_even_index]\"\n    else\n        echo \"\
  []\"\n    fi"
- "    local -a a=($1)\n    local -a b=()\n    local -i i=0\n    local -i j=0\n  \
  \  local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local\
  \ -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n\
  \    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local\
  \ -i x=0\n    local -i y=0\n    local -i z=0\n    local -i A=0\n    local -i B=0\n\
  \    local -i C=0\n    local -i D=0\n    local -i E=0\n    local -i F=0\n    local\
  \ -i G=0\n    local -i H=0\n    local -i I=0\n    local -i J=0\n    local -i K=0\n\
  \    local -i L=0\n    local -i M=0\n    local -i N=0\n    local -i O=0\n    local\
  \ -i P=0\n    local -i Q=0\n    local -i R=0\n    local -i S=0\n    local -i T=0\n\
  \    local -i U=0\n    local -i V=0\n    local -i W=0\n    local -i X=0\n    local\
  \ -i Y=0\n    local -i Z=0\n    local -i aa=0\n    local -i ab=0\n    local -i ac=0\n\
  \    local -i ad=0\n    local -i ae=0\n    local -i af=0\n    local -i ag=0\n  \
  \  local -i ah=0\n    local -i ai=0\n    local -i aj=0\n    local -i ak=0\n    local\
  \ -i al=0\n    local -i am=0\n    local -i an=0\n    local -i ao=0\n    local -i\
  \ ap=0\n    local -i aq=0"
- "  local -a nodes=($1)\n  local -i min_even_value=100000000\n  local -i min_even_index=0\n\
  \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i value=0\n  for ((i=0; i<n;\
  \ i++)); do\n    value=${nodes[$i]}\n    if ((value % 2 == 0 && value < min_even_value));\
  \ then\n      min_even_value=$value\n      min_even_index=$i\n    fi\n  done\n \
  \ if ((min_even_value < 100000000)); then\n    echo \"[$min_even_value, $min_even_index]\"\
  \n  else\n    echo \"[]\"\n  fi"
- "  local -a nodes=()\n  local -i i=0\n  local -i min_index=0\n  local -i min_value=0\n\
  \  local -i value=0\n  local -i is_first=1\n  for value in $1; do\n    if (( value\
  \ % 2 == 0 )); then\n      if (( is_first == 1 )); then\n        min_value=$value\n\
  \        min_index=$i\n        is_first=0\n      elif (( value < min_value )); then\n\
  \        min_value=$value\n        min_index=$i\n      fi\n    fi\n    (( i++ ))\n\
  \  done\n  if (( is_first == 0 )); then\n    echo \"[$min_value, $min_index]\"\n\
  \  else\n    echo \"[]\"\n  fi"
- "    local -a nodes=($1)\n    local -i min_even_value=1000000000\n    local -i min_even_index=1000000000\n\
  \    local -i min_even_found=0\n    for ((i=0; i<${#nodes[@]}; i++)); do\n     \
  \   if [[ ${nodes[$i]} -eq 0 ]]; then\n            min_even_value=0\n          \
  \  min_even_index=$i\n            min_even_found=1\n            break\n        elif\
  \ [[ ${nodes[$i]} -gt 0 && ${nodes[$i]} -lt $min_even_value && $(( ${nodes[$i]}\
  \ % 2 )) -eq 0 ]]; then\n            min_even_value=${nodes[$i]}\n            min_even_index=$i\n\
  \            min_even_found=1\n        fi\n    done\n    if [[ $min_even_found -eq\
  \ 1 ]]; then\n        echo \"[$min_even_value, $min_even_index]\"\n    else\n  \
  \      echo \"[]\"\n    fi"
- "  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n  local\
  \ index=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n  \
  \    if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n    \
  \    min_even_value=$node\n        min_even_index=$index\n      fi\n    fi\n   \
  \ index=$((index + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"\
  []\"\n  else\n    echo \"[ $min_even_value, $min_even_index ]\"\n  fi"
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a indices=()\n  local -a result=()\n\
  \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]];\
  \ then\n      evens+=($node)\n      indices+=($i)\n    fi\n    ((i++))\n  done\n\
  \  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local min=${evens[0]}\n\
  \    local min_index=0\n    for ((i=1; i<${#evens[@]}; i++)); do\n      if [[ ${evens[$i]}\
  \ -lt $min ]]; then\n        min=${evens[$i]}\n        min_index=$i\n      fi\n\
  \    done\n    echo \"[$min, ${indices[$min_index]}]\"\n  fi"
- "    local -a nodes=($1)\n    local -i min_even=999999\n    local -i min_even_idx=-1\n\
  \    local -i i=0\n    for node in ${nodes[@]}; do\n        if (( node % 2 == 0\
  \ )); then\n            if (( node < min_even )); then\n                min_even=$node\n\
  \                min_even_idx=$i\n            fi\n        fi\n        (( i++ ))\n\
  \    done\n    if (( min_even_idx == -1 )); then\n        echo \"[]\"\n    else\n\
  \        echo \"[$min_even, $min_even_idx]\"\n    fi"
- "  local -a nodes=( $1 )\n  local -a evens\n  local -a odds\n  local -i i\n  local\
  \ -i j\n  local -i k\n  local -i n\n  local -i m\n  local -i min_even\n  local -i\
  \ min_odd\n  local -i min_even_index\n  local -i min_odd_index\n  local -i min_index\n\
  \  local -i min_value\n  local -i min_value_index\n  local -i min_index_value\n\
  \  local -i min_index_index\n  local -i min_index_value_index\n  local -i min_value_index_value\n\
  \  local -i min_value_index_index\n  local -i min_index_value_index_value\n  local\
  \ -i min_index_value_index_index\n  local -i min_value_index_value_index\n  local\
  \ -i min_value_index_index_value\n  local -i min_index_value_index_value_index\n\
  \  local -i min_index_value_index_index_value\n  local -i min_value_index_value_index_value\n\
  \  local -i min_value_index_value_index_index\n  local -i min_value_index_index_value_index\n\
  \  local -i min_value_index_index_index_value\n  local -i min_index_value_index_value_index_value\n\
  \  local -i min_index_value_index_value_index_index\n  local -i min_index_value_index_index_value_index\n\
  \  local -i min_index_value_index_index_index_value\n  local -i min_value_index_value_index_value_index\n\
  \  local -i min_value_index_value_index_index_value\n  local -i min_value_index_index_value_index_value\n\
  \  local -i min_value_index_index_value_index_index\n  local -i min_value_index_index_index_value_index\n\
  \  local -i min_value_index_index_index_index_value\n  local -i min_index_"
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n \
  \ local -i n=${#nodes[@]}\n  local -i found=0\n  for ((i=0; i<n; i++)); do\n   \
  \ if [[ ${nodes[i]} -eq 0 ]]; then\n      if [[ found -eq 0 ]]; then\n        min=0\n\
  \        min_i=$i\n        found=1\n      fi\n    elif [[ ${nodes[i]} -gt 0 ]] &&\
  \ [[ ${nodes[i]}%2 -eq 0 ]]; then\n      if [[ found -eq 0 ]]; then\n        min=${nodes[i]}\n\
  \        min_i=$i\n        found=1\n      elif [[ ${nodes[i]} -lt $min ]]; then\n\
  \        min=${nodes[i]}\n        min_i=$i\n      fi\n    fi\n  done\n  if [[ found\
  \ -eq 1 ]]; then\n    echo \"[$min, $min_i]\"\n  else\n    echo \"[]\"\n  fi"
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local -a\
  \ result=()\n  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node %\
  \ 2)) -eq 0 ]]; then\n      evens+=($node)\n      evens_idx+=($i)\n    fi\n    ((i++))\n\
  \  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local\
  \ min_even=${evens[0]}\n    local min_even_idx=${evens_idx[0]}\n    i=0\n    for\
  \ even in \"${evens[@]}\"; do\n      if [[ $even -lt $min_even ]]; then\n      \
  \  min_even=$even\n        min_even_idx=${evens_idx[$i]}\n      fi\n      ((i++))\n\
  \    done\n    result=($min_even $min_even_idx)\n    echo \"[${result[0]}, ${result[1]}]\"\
  \n  fi"
- "    local -a arr=($1)\n    local -a evens=()\n    local -a evens_idx=()\n    local\
  \ -a result=()\n    local i=0\n    local j=0\n    local min=0\n    local min_idx=0\n\
  \    for i in ${arr[@]}; do\n        if [ $((i % 2)) -eq 0 ]; then\n           \
  \ evens[$j]=$i\n            evens_idx[$j]=$((j + 1))\n            j=$((j + 1))\n\
  \        fi\n    done\n    if [ ${#evens[@]} -eq 0 ]; then\n        echo \"[]\"\n\
  \    else\n        min=${evens[0]}\n        min_idx=${evens_idx[0]}\n        for\
  \ i in ${evens[@]}; do\n            if [ $i -lt $min ]; then\n                min=$i\n\
  \                min_idx=${evens_idx[$j]}\n            fi\n            j=$((j +\
  \ 1))\n        done\n        result[0]=$min\n        result[1]=$min_idx\n      \
  \  echo \"[${result[@]}]\"\n    fi"
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
  \  local i=0\n  local min=0\n  local index=0\n  local value=0\n  for i in \"${!nodes[@]}\"\
  ; do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      evens+=(\"$i\")\n    elif [[\
  \ ${nodes[$i]} -eq 1 ]]; then\n      odds+=(\"$i\")\n    elif [[ ${nodes[$i]} -eq\
  \ 2 ]]; then\n      evens+=(\"$i\")\n    elif [[ $((${nodes[$i]} % 2)) -eq 0 ]];\
  \ then\n      evens+=(\"$i\")\n    else\n      odds+=(\"$i\")\n    fi\n  done\n\
  \  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n    return\n  fi\n  min=${nodes[${evens[0]}]}\n\
  \  index=${evens[0]}\n  for i in \"${evens[@]}\"; do\n    if [[ ${nodes[$i]} -lt\
  \ $min ]]; then\n      min=${nodes[$i]}\n      index=$i\n    fi\n  done\n  echo\
  \ \"[$min, $index]\""
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
  \  local i=0\n  local node=0\n  local min=0\n  local index=0\n  local len=${#nodes[@]}\n\
  \  if [ $len -eq 0 ]; then\n    result=(0 0)\n  else\n    for ((i=0; i<len; i++));\
  \ do\n      node=${nodes[$i]}\n      if [ $((node % 2)) -eq 0 ]; then\n        evens+=($node)\n\
  \      else\n        odds+=($node)\n      fi\n    done\n    if [ ${#evens[@]} -eq\
  \ 0 ]; then\n      result=(0 0)\n    else\n      min=${evens[0]}\n      index=0\n\
  \      for ((i=1; i<${#evens[@]}; i++)); do\n        if [ ${evens[$i]} -lt $min\
  \ ]; then\n          min=${evens[$i]}\n          index=$i\n        fi\n      done\n\
  \      result=($min $index)\n    fi\n  fi\n  echo ${result[@]}"
- "    local -a arr=($1)\n    local -i i=0\n    local -i min=0\n    local -i min_i=0\n\
  \    local -i len=${#arr[@]}\n    local -i found=0\n    for ((i=0; i<len; i++));\
  \ do\n        if [[ ${arr[i]} -eq 0 ]]; then\n            if [[ found -eq 0 ]];\
  \ then\n                min=0\n                min_i=$i\n                found=1\n\
  \            fi\n        elif [[ ${arr[i]} -gt 0 ]] && [[ $((arr[i]%2)) -eq 0 ]];\
  \ then\n            if [[ found -eq 0 ]]; then\n                min=${arr[i]}\n\
  \                min_i=$i\n                found=1\n            elif [[ ${arr[i]}\
  \ -lt $min ]]; then\n                min=${arr[i]}\n                min_i=$i\n \
  \           fi\n        fi\n    done\n    if [[ found -eq 1 ]]; then\n        echo\
  \ \"[$min, $min_i]\"\n    else\n        echo \"[]\"\n    fi"
- "    local -a a=($1)\n    local -i i=0\n    local -i min=0\n    local -i min_i=0\n\
  \    local -i len=${#a[@]}\n    local -i even=1\n    for ((i=0; i<len; i++)); do\n\
  \        if (( a[i] % 2 == 0 )); then\n            even=0\n            if (( min\
  \ == 0 || a[i] < min )); then\n                min=a[i]\n                min_i=i\n\
  \            fi\n        fi\n    done\n    if (( even )); then\n        echo \"\
  []\"\n    else\n        echo \"[$min, $min_i]\"\n    fi"
- "  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n  local\
  \ i=1\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if\
  \ [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
  \        min_even_index=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[\
  \ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[$min_even_value,\
  \ $min_even_index]\"\n  fi"
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min_i=0\n  local -i min_val=0\n\
  \  local -i val=0\n  local -i found=0\n  for i in \"${!nodes[@]}\"; do\n    val=${nodes[$i]}\n\
  \    if (( val % 2 == 0 )); then\n      if (( found == 0 )); then\n        min_val=$val\n\
  \        min_i=$i\n        found=1\n      elif (( val < min_val )); then\n     \
  \   min_val=$val\n        min_i=$i\n      fi\n    fi\n  done\n  if (( found == 0\
  \ )); then\n    echo \"[]\"\n  else\n    echo \"[$min_val, $min_i]\"\n  fi"
- "  local -a arr=()\n  local -i i=0\n  local -i min_i=0\n  local -i min_v=0\n  local\
  \ -i v=0\n  local -i len=0\n  local -i is_first=1\n  local -i is_even=0\n  local\
  \ -i is_smaller=0\n  local -i is_smaller_i=0\n  local -i is_smaller_v=0\n  IFS='\
  \ ' read -r -a arr <<< \"$1\"\n  len=${#arr[@]}\n  if [ $len -eq 0 ]; then\n   \
  \ echo \"[]\"\n    return\n  fi\n  for ((i=0; i<len; i++)); do\n    v=${arr[$i]}\n\
  \    is_even=$((v % 2))\n    if [ $is_even -eq 0 ]; then\n      if [ $is_first -eq\
  \ 1 ]; then\n        min_i=$i\n        min_v=$v\n        is_first=0\n      else\n\
  \        is_smaller_i=$((min_i > i))\n        is_smaller_v=$((min_v > v))\n    \
  \    if [ $is_smaller_i -eq 1 ] || [ $is_smaller_v -eq 1 ]; then\n          min_i=$i\n\
  \          min_v=$v\n        fi\n      fi\n    fi\n  done\n  if [ $is_first -eq\
  \ 1 ]; then\n    echo \"[]\"\n  else\n    echo \"[$min_v, $min_i]\"\n  fi"
- "  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n  local\
  \ i=0\n  for node in $nodes; do\n    if [ $((node % 2)) -eq 0 ]; then\n      if\
  \ [ -z \"$min_even_value\" ] || [ $node -lt $min_even_value ]; then\n        min_even_value=$node\n\
  \        min_even_index=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n  if [ -z\
  \ \"$min_even_value\" ]; then\n    echo \"[]\"\n  else\n    echo \"[$min_even_value,\
  \ $min_even_index]\"\n  fi"
- "    local -a nodes=($1)\n    local -i min_even_value=1000000000\n    local -i min_even_index=1000000000\n\
  \    local -i i=0\n    for node in \"${nodes[@]}\"; do\n        if (( node % 2 ==\
  \ 0 && node < min_even_value )); then\n            min_even_value=$node\n      \
  \      min_even_index=$i\n        fi\n        (( i++ ))\n    done\n    if (( min_even_value\
  \ < 1000000000 )); then\n        echo \"[$min_even_value, $min_even_index]\"\n \
  \   else\n        echo \"[]\"\n    fi"
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
  \  local i=0\n  local min_even=0\n  local min_odd=0\n  local min_even_index=0\n\
  \  local min_odd_index=0\n  local min_index=0\n  local min_value=0\n  local even_count=0\n\
  \  local odd_count=0\n  local node_count=${#nodes[@]}\n  if [[ $node_count -eq 0\
  \ ]]; then\n    echo \"[]\"\n    return\n  fi\n  for ((i=0; i<node_count; i++));\
  \ do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      evens+=(0)\n      even_count=$((even_count+1))\n\
  \    elif [[ $((nodes[$i]%2)) -eq 0 ]]; then\n      evens+=(${nodes[$i]})\n    \
  \  even_count=$((even_count+1))\n    else\n      odds+=(${nodes[$i]})\n      odd_count=$((odd_count+1))\n\
  \    fi\n  done\n  if [[ $even_count -eq 0 ]]; then\n    echo \"[]\"\n    return\n\
  \  fi\n  min_even=${evens[0]}\n  min_even_index=0\n  for ((i=1; i<even_count; i++));\
  \ do\n    if [[ ${evens[$i]} -lt $min_even ]]; then\n      min_even=${evens[$i]}\n\
  \      min_even_index=$i\n    fi\n  done\n  if [[ $odd_count -eq 0 ]]; then\n  \
  \  result=($min_even $min_even_index)\n    echo \"[${result[@]}]\"\n    return\n\
  \  fi\n  min_odd=${odds[0]}\n  min_odd_index=0\n  for ((i=1; i<odd_count; i++));\
  \ do\n    if [[ ${odds[$i]} -lt $min_odd ]]; then\n      min_odd=${odd"
- "  local -a arr=()\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
  \ -i min_found=0\n  local -i n=0\n  local -i v=0\n  for i in $1; do\n    arr[$n]=$i\n\
  \    ((n++))\n  done\n  for ((i=0; i<n; i++)); do\n    v=${arr[$i]}\n    if ((v\
  \ % 2 == 0)); then\n      if ((min_found == 0)); then\n        min=$v\n        min_i=$i\n\
  \        min_found=1\n      elif ((v < min)); then\n        min=$v\n        min_i=$i\n\
  \      fi\n    fi\n  done\n  if ((min_found == 0)); then\n    echo \"[]\"\n  else\n\
  \    echo \"[$min, $min_i]\"\n  fi"
- "  local -a arr=()\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
  \  local i\n  local j\n  local k\n  local smallest_even\n  local smallest_odd\n\
  \  local smallest_even_index\n  local smallest_odd_index\n  local smallest_index\n\
  \  local smallest_value\n  local -i even_count=0\n  local -i odd_count=0\n  local\
  \ -i count=0\n  local -i arr_count=0\n  local -i evens_count=0\n  local -i odds_count=0\n\
  \  local -i result_count=0\n  local -i smallest_even_count=0\n  local -i smallest_odd_count=0\n\
  \  local -i smallest_index_count=0\n  local -i smallest_value_count=0\n  local -i\
  \ smallest_index_count=0\n  local -i smallest_value_count=0\n  local -i smallest_index_count=0\n\
  \  local -i smallest_value_count=0\n  local -i smallest_index_count=0\n  local -i\
  \ smallest_value_count=0\n  local -i smallest_index_count=0\n  local -i smallest_value_count=0\n\
  \  local -i smallest_index_count=0\n  local -i smallest_value_count=0\n  local -i\
  \ smallest_index_count=0\n  local -i smallest_value_count=0\n  local -i smallest_index_count=0\n\
  \  local -i smallest_value_count=0\n  local -i smallest_index_count=0\n  local -i\
  \ smallest_value_count=0\n  local -i smallest_index_count=0\n  local -i smallest_value_count=0\n\
  \  local -i smallest_index_count=0\n  local -i smallest_value_count=0\n  local -i\
  \ smallest_index_count=0\n  local -i smallest_value_count=0\n  local -i smallest_index_count=0\n\
  \  local -i smallest_value_count=0\n  local -i smallest_index_count=0\n  local -i\
  \ smallest_value_count"
- "    local -a nodes=($1)\n    local -a evens=()\n    local -a odds=()\n    local\
  \ -a result=()\n    local i=0\n    for n in \"${nodes[@]}\"; do\n        if (( n\
  \ % 2 == 0 )); then\n            evens+=($n)\n        else\n            odds+=($n)\n\
  \        fi\n    done\n    if (( ${#evens[@]} > 0 )); then\n        result=($(printf\
  \ \"%s\\n\" \"${evens[@]}\" | sort -n | head -n 1))\n        result+=($(printf \"\
  %s\\n\" \"${!nodes[@]}\" | grep -w \"${result[0]}\" | head -n 1))\n    fi\n    echo\
  \ \"${result[@]}\""
- "  local -a arr=()\n  local -i i=0\n  local -i min=0\n  local -i min_idx=0\n  local\
  \ -i idx=0\n  local -i len=0\n  local -i val=0\n  local -i found=0\n  local -i is_even=0\n\
  \  local -i is_first=0\n  local -i is_smaller=0\n  local -i is_smaller_idx=0\n \
  \ local -i is_smaller_idx_first=0\n  local -i is_smaller_idx_first_even=0\n  local\
  \ -i is_smaller_idx_first_even_found=0\n  local -i is_smaller_idx_first_even_found_min=0\n\
  \  local -i is_smaller_idx_first_even_found_min_idx=0\n  local -i is_smaller_idx_first_even_found_min_idx_val=0\n\
  \  local -i is_smaller_idx_first_even_found_min_idx_val_len=0\n  local -i is_smaller_idx_first_even_found_min_idx_val_len_arr=0\n\
  \  local -i is_smaller_idx_first_even_found_min_idx_val_len_arr_i=0\n  local -i\
  \ is_smaller_idx_first_even_found_min_idx_val_len_arr_i_is_even=0\n  local -i is_smaller_idx_first_even_found_min_idx_val_len_arr_i_is_even_is_smaller=0\n\
  \  local -i is_smaller_idx_first_even_found_min_idx_val_len_arr_i_is_even_is_smaller_is_smaller_idx=0\n\
  \  local -i is_smaller_idx_first_even_found_min_idx_val_len_arr_i_is_even_is_smaller_is_smaller_idx_"
- "  local -a a=($1)\n  local -a b=()\n  local -i i=0\n  local -i j=0\n  local -i\
  \ k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i\
  \ p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i\
  \ u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i\
  \ z=0\n  local -i A=0\n  local -i B=0\n  local -i C=0\n  local -i D=0\n  local -i\
  \ E=0\n  local -i F=0\n  local -i G=0\n  local -i H=0\n  local -i I=0\n  local -i\
  \ J=0\n  local -i K=0\n  local -i L=0\n  local -i M=0\n  local -i N=0\n  local -i\
  \ O=0\n  local -i P=0\n  local -i Q=0\n  local -i R=0\n  local -i S=0\n  local -i\
  \ T=0\n  local -i U=0\n  local -i V=0\n  local -i W=0\n  local -i X=0\n  local -i\
  \ Y=0\n  local -i Z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local\
  \ -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n\
  \  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i\
  \ am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0"
- "  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
  \  local i=0\n  local j=0\n  local k=0\n  local n=${#nodes[@]}\n  for ((i=0; i<n;\
  \ i++)); do\n    if [[ $((${nodes[$i]} % 2)) -eq 0 ]]; then\n      evens[$j]=${nodes[$i]}\n\
  \      j=$((j+1))\n    else\n      odds[$k]=${nodes[$i]}\n      k=$((k+1))\n   \
  \ fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    result=([0]=\"[]\")\n  else\n\
  \    local min=${evens[0]}\n    local min_index=0\n    for ((i=1; i<${#evens[@]};\
  \ i++)); do\n      if [[ ${evens[$i]} -lt $min ]]; then\n        min=${evens[$i]}\n\
  \        min_index=$i\n      fi\n    done\n    result=([0]=$min [1]=$min_index)\n\
  \  fi\n  echo ${result[@]}"
- "    local -a arr=()\n    local -i i=0\n    local -i min=0\n    local -i min_idx=0\n\
  \    local -i len=0\n    local -i val=0\n    local -i idx=0\n    local -i even=0\n\
  \    local -i first_even=0\n    local -i first_even_idx=0\n    local -i first_even_found=0\n\
  \    local -i first_even_idx_found=0\n    local -i first_even_idx_found=0\n    local\
  \ -i first_even_idx_found=0\n    local -i first_even_idx_found=0\n    local -i first_even_idx_found=0\n\
  \    local -i first_even_idx_found=0\n    local -i first_even_idx_found=0\n    local\
  \ -i first_even_idx_found=0\n    local -i first_even_idx_found=0\n    local -i first_even_idx_found=0\n\
  \    local -i first_even_idx_found=0\n    local -i first_even_idx_found=0\n    local\
  \ -i first_even_idx_found=0\n    local -i first_even_idx_found=0\n    local -i first_even_idx_found=0\n\
  \    local -i first_even_idx_found=0\n    local -i first_even_idx_found=0\n    local\
  \ -i first_even_idx_found=0\n    local -i first_even_idx_found=0\n    local -i first_even_idx_found=0\n\
  \    local -i first_even_idx_found=0\n    local -i first_even_idx_found=0\n    local\
  \ -i first_even_idx_found=0\n    local -i first_even_idx_found=0\n    local -i first_even_idx_found=0\n\
  \    local -i first_even_idx_found=0\n    local -i first_even_idx_found=0\n    local\
  \ -"
- "  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=-1\n  local -i min_value=-1\n\
  \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -gt 0 && ${nodes[$i]}\
  \ -eq $(( ${nodes[$i]} / 2 * 2 )) ]]; then\n      if [[ $min_value -eq -1 || ${nodes[$i]}\
  \ -lt $min_value ]]; then\n        min_value=${nodes[$i]}\n        min_index=$i\n\
  \      fi\n    fi\n  done\n  if [[ $min_index -eq -1 ]]; then\n    echo \"[]\"\n\
  \  else\n    echo \"[$min_value, $min_index]\"\n  fi"
- "  local -a a=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
  \ -i n=${#a[@]}\n  local -i v=0\n  for ((i=0; i<n; i++)); do\n    v=${a[i]}\n  \
  \  if ((v % 2 == 0)); then\n      if ((min == 0 || v < min)); then\n        min=v\n\
  \        min_i=i\n      fi\n    fi\n  done\n  if ((min == 0)); then\n    echo []\n\
  \  else\n    echo [$min, $min_i]\n  fi"
- "    local -a nodes=($1)\n    local -i i=0\n    local -i min_even_value=0\n    local\
  \ -i min_even_index=0\n    local -i min_even_count=0\n    local -i node_count=${#nodes[@]}\n\
  \    local -i node_value=0\n    local -i node_index=0\n    local -i node_count=0\n\
  \    local -i even_count=0\n    local -i even_value=0\n    local -i even_index=0\n\
  \    local -i even_count=0\n    local -i even_value=0\n    local -i even_index=0\n\
  \    local -i even_count=0\n    local -i even_value=0\n    local -i even_index=0\n\
  \    local -i even_count=0\n    local -i even_value=0\n    local -i even_index=0\n\
  \    local -i even_count=0\n    local -i even_value=0\n    local -i even_index=0\n\
  \    local -i even_count=0\n    local -i even_value=0\n    local -i even_index=0\n\
  \    local -i even_count=0\n    local -i even_value=0\n    local -i even_index=0\n\
  \    local -i even_count=0\n    local -i even_value=0\n    local -i even_index=0\n\
  \    local -i even_count=0\n    local -i even_value=0\n    local -i even_index=0\n\
  \    local -i even_count=0\n    local -i even_value=0\n    local -i even_index=0\n\
  \    local -i even_count=0\n    local -i even_value=0\n    local -i even_index=0\n\
  \    local -i even_count=0\n    local -i even_value=0\n    local -i even_index=0\n\
  \    local -i even_count=0\n    local -i even_value=0\n    local -i even_index=0\n\
  \    local -i even_count=0\n    local -i even_value=0\n   "
- "  local -a a=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
  \ -i n=${#a[@]}\n  local -i found=0\n  while (( i < n )); do\n    if (( a[i] % 2\
  \ == 0 )); then\n      if (( found == 0 )); then\n        min=a[i]\n        min_i=i\n\
  \        found=1\n      elif (( a[i] < min )); then\n        min=a[i]\n        min_i=i\n\
  \      fi\n    fi\n    (( i++ ))\n  done\n  if (( found == 0 )); then\n    echo\
  \ \"[]\"\n  else\n    echo \"[$min, $min_i]\"\n  fi"
- "  local -a a=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n\
  \  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n\
  \  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n\
  \  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i A=0\n\
  \  local -i B=0\n  local -i C=0\n  local -i D=0\n  local -i E=0\n  local -i F=0\n\
  \  local -i G=0\n  local -i H=0\n  local -i I=0\n  local -i J=0\n  local -i K=0\n\
  \  local -i L=0\n  local -i M=0\n  local -i N=0\n  local -i O=0\n  local -i P=0\n\
  \  local -i Q=0\n  local -i R=0\n  local -i S=0\n  local -i T=0\n  local -i U=0\n\
  \  local -i V=0\n  local -i W=0\n  local -i X=0\n  local -i Y=0\n  local -i Z=0\n\
  \  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i\
  \ ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local\
  \ -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n\
  \  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i r"
- "    local -a nodes=($1)\n    local -a evens=()\n    local -a odds=()\n    local\
  \ -a result=()\n    for ((i=0; i<${#nodes[@]}; i++)); do\n        if ((nodes[i]\
  \ % 2 == 0)); then\n            evens+=(${nodes[i]})\n        else\n           \
  \ odds+=(${nodes[i]})\n        fi\n    done\n    if ((${#evens[@]} == 0)); then\n\
  \        result=([0]=\"[]\")\n    else\n        local min=${evens[0]}\n        local\
  \ min_index=0\n        for ((i=1; i<${#evens[@]}; i++)); do\n            if ((evens[i]\
  \ < min)); then\n                min=${evens[i]}\n                min_index=i\n\
  \            fi\n        done\n        result=([0]=$min [1]=$min_index)\n    fi\n\
  \    echo ${result[@]}"
- "    local -a nodes=($1)\n    local -a evens=()\n    local -a evens_idx=()\n   \
  \ local -a result=()\n    local i=0\n    for n in \"${nodes[@]}\"; do\n        if\
  \ [[ $((n % 2)) -eq 0 ]]; then\n            evens+=($n)\n            evens_idx+=($i)\n\
  \        fi\n        i=$((i + 1))\n    done\n    if [[ ${#evens[@]} -eq 0 ]]; then\n\
  \        echo \"[]\"\n    else\n        local min_idx=$(echo \"${evens[@]}\" | tr\
  \ ' ' '\\n' | sort -n | head -n 1)\n        local min_idx_idx=$(echo \"${evens[@]}\"\
  \ | tr ' ' '\\n' | sort -n | grep -n $min_idx | cut -d: -f1)\n        echo \"[${evens[$((min_idx_idx\
  \ - 1))]}, ${evens_idx[$((min_idx_idx - 1))]}]\"\n    fi"
- "    local -a nodes=($1)\n    local -i min_even_value=100000000\n    local -i min_even_index=100000000\n\
  \    local -i i=0\n    local -i n=${#nodes[@]}\n    local -i node_value\n    local\
  \ -i node_index\n    local -i found_even=0\n    for ((i=0; i<n; i++)); do\n    \
  \    node_value=${nodes[$i]}\n        if ((node_value % 2 == 0)); then\n       \
  \     found_even=1\n            if ((node_value < min_even_value)); then\n     \
  \           min_even_value=$node_value\n                min_even_index=$i\n    \
  \        fi\n        fi\n    done\n    if ((found_even == 0)); then\n        echo\
  \ \"[]\"\n    else\n        echo \"[$min_even_value, $min_even_index]\"\n    fi"
- "  local -a a=($1)\n  local i=0\n  local min=999999\n  local min_i=0\n  for ((i=0;\
  \ i<${#a[@]}; i++)); do\n    if [[ ${a[$i]} -eq 0 ]]; then\n      echo \"[0, $i]\"\
  \n      return\n    fi\n    if [[ ${a[$i]} -lt $min && $(( ${a[$i]} % 2 )) -eq 0\
  \ ]]; then\n      min=${a[$i]}\n      min_i=$i\n    fi\n  done\n  if [[ $min -eq\
  \ 999999 ]]; then\n    echo \"[]\"\n  else\n    echo \"[$min, $min_i]\"\n  fi"
language: sh
name: HumanEval_68_pluck
prompt: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
  \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
  \ it.\n# The plucked node should be the node with the smallest even value.\n# If\
  \ multiple nodes with the same smallest even value are found return the node that\
  \ has smallest index.\n# The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n# If there are no even values or the given array is empty, return\
  \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the\
  \ smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input: [1,2,3]\n\
  # Output: [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index. \n# Example 3:\n# Input: []\n# Output: []\n# Example 4:\n# Input: [5, 0,\
  \ 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest value, but  there\
  \ are two zeros,\n# so we will choose the first zero, which has the smallest index.\n\
  # Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is\
  \ a space-separated list\npluck() {\n"
stop_tokens:
- '

  }'
tests: "}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
  \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
  \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
  \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") =\
  \ \"\" ]]\n}\n\nrun_test"
