name: HumanEval_68_pluck
language: humaneval_to_bash.py
prompt: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
  \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
  \ it.\n# The plucked node should be the node with the smallest even value.\n# If\
  \ multiple nodes with the same smallest even value are found return the node that\
  \ has smallest index.\n# The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n# If there are no even values or the given array is empty, return\
  \ [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the\
  \ smallest even value, and 2 has the smallest index.\n# Example 2:\n# Input: [1,2,3]\n\
  # Output: [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index. \n# Example 3:\n# Input: []\n# Output: []\n# Example 4:\n# Input: [5, 0,\
  \ 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest value, but  there\
  \ are two zeros,\n# so we will choose the first zero, which has the smallest index.\n\
  # Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is\
  \ a space-separated list\npluck() {\n"
tests: "}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
  \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
  \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
  \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") =\
  \ \"\" ]]\n}\n\nrun_test"
completions: ["  local -a nodes=($1)\n  local -i i\n  local -i min_even_value=1000000000\n\
    \  local -i min_even_index=1000000000\n  local -i min_even_count=0\n  local -i\
    \ value\n  local -i index\n  local -i count\n  for ((i=0; i<${#nodes[@]}; i++));\
    \ do\n    value=${nodes[$i]}\n    if ((value % 2 == 0)); then\n      if ((value\
    \ < min_even_value)); then\n        min_even_value=$value\n        min_even_index=$i\n\
    \        min_even_count=1\n      elif ((value == min_even_value)); then\n    \
    \    ((min_even_count++))\n      fi\n    fi\n  done\n  if ((min_even_count > 0));\
    \ then\n    echo \"[$min_even_value, $min_even_index]\"\n  else\n    echo \"[]\"\
    \n  fi", "  local -a nodes=($1)\n  local -i i=0\n  local -i min=0\n  local -i\
    \ min_i=0\n  local -i len=${#nodes[@]}\n  local -i found=0\n  local -i value=0\n\
    \  for ((i=0; i<len; i++)); do\n    value=${nodes[i]}\n    if ((value % 2 == 0));\
    \ then\n      if ((found == 0)); then\n        min=value\n        min_i=i\n  \
    \      found=1\n      elif ((value < min)); then\n        min=value\n        min_i=i\n\
    \      fi\n    fi\n  done\n  if ((found == 0)); then\n    echo \"[]\"\n  else\n\
    \    echo \"[$min, $min_i]\"\n  fi", "  local -a nodes=( $1 )\n  local -a evens\n\
    \  local -a evens_index\n  local -a evens_index_sorted\n  local -a evens_sorted\n\
    \  local -a evens_sorted_index\n  local -a result\n  local i\n  local j\n  local\
    \ k\n  local n\n  local m\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ aa\n  local bb\n  local cc\n  local dd\n  local ee\n  local ff\n  local gg\n\
    \  local hh\n  local ii\n  local jj\n  local kk\n  local ll\n  local mm\n  local\
    \ nn\n  local oo\n  local pp\n  local qq\n  local rr\n  local ss\n  local tt\n\
    \  local uu\n  local vv\n  local ww\n  local xx\n  local yy\n  local zz\n  local\
    \ aaa\n  local bbb\n  local ccc\n  local ddd\n  local eee\n  local fff\n  local\
    \ ggg\n  local hhh\n  local iii\n  local jjj\n  local kkk\n  local lll\n  local\
    \ mmm\n  local nnn\n  local ooo\n  local ppp\n  local qqq\n  local rrr\n  local\
    \ sss\n  local ttt\n  local uuu\n  local vvv\n  local www\n  local xxx\n  local\
    \ yyy\n  local zzz\n  local aaaa\n  local bbbb\n  local cccc\n  local dddd\n \
    \ local eeee\n  local ffff\n  local gggg\n  local hhhh\n  local iiii\n  local\
    \ jjjj\n  local kkkk\n  local llll\n  local mmmm\n  local nnnn\n  local oooo\n\
    \  local pppp\n  local qqqq\n  local rrrr\n  local ssss\n  local tttt\n  local\
    \ uuuu\n  local vvvv\n  local wwww\n  local", "  local -a a=($1)\n  local -i i=0\n\
    \  local -i min=0\n  local -i min_i=0\n  local -i n=${#a[@]}\n  local -i even=0\n\
    \  local -i first_even=0\n  local -i first_even_i=0\n  local -i first_zero=0\n\
    \  local -i first_zero_i=0\n  local -i zero=0\n  local -i zero_i=0\n  local -i\
    \ zeros=0\n  local -i zeros_i=0\n  local -i zeros_n=0\n  local -i zeros_n_i=0\n\
    \  local -i zeros_n_n=0\n  local -i zeros_n_n_i=0\n  local -i zeros_n_n_n=0\n\
    \  local -i zeros_n_n_n_i=0\n  local -i zeros_n_n_n_n=0\n  local -i zeros_n_n_n_n_i=0\n\
    \  local -i zeros_n_n_n_n_n=0\n  local -i zeros_n_n_n_n_n_i=0\n  local -i zeros_n_n_n_n_n_n=0\n\
    \  local -i zeros_n_n_n_n_n_n_i=0\n  local -i zeros_n_n_n_n_n_n_n=0\n  local -i\
    \ zeros_n_n_n_n_n_n_n_i=0\n  local -i zeros_n_n_n_n_n_n_n_n=0\n  local -i zeros_n_n_n_n_n_n_n_n_i=0\n\
    \  local -i zeros_n_n_n_n_n_n_n_n_n=0\n  local -i zeros_n_n_n_n_n_n_n_n_n_i=0\n\
    \  local -i zeros_n_n_n", "    local -a a=($1)\n    local -a b=()\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i n=${#a[@]}\n    local\
    \ -i m=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n\
    \    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local\
    \ -i x=0\n    local -i y=0\n    local -i z=0\n    local -i A=0\n    local -i B=0\n\
    \    local -i C=0\n    local -i D=0\n    local -i E=0\n    local -i F=0\n    local\
    \ -i G=0\n    local -i H=0\n    local -i I=0\n    local -i J=0\n    local -i K=0\n\
    \    local -i L=0\n    local -i M=0\n    local -i N=0\n    local -i O=0\n    local\
    \ -i P=0\n    local -i Q=0\n    local -i R=0\n    local -i S=0\n    local -i T=0\n\
    \    local -i U=0\n    local -i V=0\n    local -i W=0\n    local -i X=0\n    local\
    \ -i Y=0\n    local -i Z=0\n    local -i aa=0\n    local -i ab=0\n    local -i\
    \ ac=0\n    local -i ad=0\n    local -i ae=0\n    local -i af=0\n    local -i\
    \ ag=0\n    local -i ah=0\n    local -i ai=0\n    local -i aj=0\n    local -i\
    \ ak=0\n    local -i al=0\n    local -i am=0\n    local -i an=0\n    local -i\
    \ ao=0\n    local -i ap=0\n    local -i aq=0\n    local -i ar=0\n    local", " \
    \ local -a arr=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
    \ -i len=${#arr[@]}\n  local -i found=0\n  local -i val=0\n  for ((i=0; i<len;\
    \ i++)); do\n    val=${arr[i]}\n    if ((val % 2 == 0)); then\n      if ((found\
    \ == 0)); then\n        min=val\n        min_i=i\n        found=1\n      elif\
    \ ((val < min)); then\n        min=val\n        min_i=i\n      fi\n    fi\n  done\n\
    \  if ((found == 0)); then\n    echo \"[]\"\n  else\n    echo \"[$min, $min_i]\"\
    \n  fi", "    local -a nodes=($1)\n    local -i min_even_value=1000000\n    local\
    \ -i min_even_index=1000000\n    local -i i=0\n    local -i n=${#nodes[@]}\n \
    \   local -i node_value\n    local -i node_index\n    for ((i=0; i<n; i++)); do\n\
    \        node_value=${nodes[$i]}\n        if ((node_value % 2 == 0)); then\n \
    \           if ((node_value < min_even_value)); then\n                min_even_value=$node_value\n\
    \                min_even_index=$i\n            fi\n        fi\n    done\n   \
    \ if ((min_even_value < 1000000)); then\n        echo \"[$min_even_value, $min_even_index]\"\
    \n    else\n        echo \"[]\"\n    fi", "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n\
    \  local -i min_even_index=1000000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  for ((i=0; i<n; i++)); do\n    if (( nodes[i] % 2 == 0 )); then\n      if ((\
    \ nodes[i] < min_even_value )); then\n        min_even_value=nodes[i]\n      \
    \  min_even_index=i\n      elif (( nodes[i] == min_even_value )); then\n     \
    \   if (( i < min_even_index )); then\n          min_even_index=i\n        fi\n\
    \      fi\n    fi\n  done\n  if (( min_even_value < 1000000000 )); then\n    echo\
    \ \"[$min_even_value, $min_even_index]\"\n  else\n    echo \"[]\"\n  fi", "  local\
    \ -a nodes=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local -a result=()\n\
    \  local i=0\n  for n in \"${nodes[@]}\"; do\n    if [[ $((n % 2)) -eq 0 ]]; then\n\
    \      evens+=($n)\n      evens_idx+=($i)\n    fi\n    ((i++))\n  done\n  if [[\
    \ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local min_even=${evens[0]}\n\
    \    local min_even_idx=${evens_idx[0]}\n    for ((i=1; i<${#evens[@]}; i++));\
    \ do\n      if [[ ${evens[$i]} -lt $min_even ]]; then\n        min_even=${evens[$i]}\n\
    \        min_even_idx=${evens_idx[$i]}\n      fi\n    done\n    echo \"[$min_even,\
    \ $min_even_idx]\"\n  fi", "  local nodes=\"$1\"\n  local min_even_value=\n  local\
    \ min_even_index=\n  local index=0\n  for node in $nodes; do\n    if [ $((node\
    \ % 2)) -eq 0 ]; then\n      if [ -z \"$min_even_value\" ] || [ $node -lt $min_even_value\
    \ ]; then\n        min_even_value=$node\n        min_even_index=$index\n     \
    \ fi\n    fi\n    index=$((index + 1))\n  done\n  if [ -z \"$min_even_value\"\
    \ ]; then\n    echo \"[]\"\n  else\n    echo \"[$min_even_value, $min_even_index]\"\
    \n  fi", "    local -a nodes=($1)\n    local -a evens=()\n    for node in \"${nodes[@]}\"\
    ; do\n        if [[ $((node % 2)) -eq 0 ]]; then\n            evens+=($node)\n\
    \        fi\n    done\n    if [[ ${#evens[@]} -eq 0 ]]; then\n        echo \"\
    []\"\n    else\n        local min=${evens[0]}\n        local min_index=0\n   \
    \     for ((i=1; i<${#evens[@]}; i++)); do\n            if [[ ${evens[i]} -lt\
    \ $min ]]; then\n                min=${evens[i]}\n                min_index=$i\n\
    \            fi\n        done\n        echo \"[$min, $min_index]\"\n    fi", " \
    \ local -a nodes=($1)\n  local -i i=0\n  local -i min=100000000\n  local -i min_i=0\n\
    \  local -i len=${#nodes[@]}\n  for ((i=0; i<len; i++)); do\n    if [[ ${nodes[$i]}\
    \ -eq 0 ]]; then\n      echo \"[0, $i]\"\n      return\n    fi\n    if [[ ${nodes[$i]}\
    \ -lt $min && $((nodes[$i] % 2)) -eq 0 ]]; then\n      min=${nodes[$i]}\n    \
    \  min_i=$i\n    fi\n  done\n  if [[ $min -eq 100000000 ]]; then\n    echo \"\
    []\"\n  else\n    echo \"[$min, $min_i]\"\n  fi", "  local -a nodes=($1)\n  local\
    \ -a evens=()\n  local -a evens_index=()\n  local -a result=()\n  local i=0\n\
    \  for n in \"${nodes[@]}\"; do\n    if [[ $((n % 2)) -eq 0 ]]; then\n      evens+=($n)\n\
    \      evens_index+=($i)\n    fi\n    ((i++))\n  done\n  if [[ ${#evens[@]} -eq\
    \ 0 ]]; then\n    echo \"[]\"\n  else\n    local min=${evens[0]}\n    local min_index=0\n\
    \    for ((i=1; i<${#evens[@]}; i++)); do\n      if [[ ${evens[$i]} -lt $min ]];\
    \ then\n        min=${evens[$i]}\n        min_index=$i\n      fi\n    done\n \
    \   echo \"[$min, ${evens_index[$min_index]}]\"\n  fi", "  local -a nodes=($1)\n\
    \  local -i min_even_value=10000000000\n  local -i min_even_index=10000000000\n\
    \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i node\n  for ((i=0; i<n;\
    \ i++)); do\n    node=${nodes[$i]}\n    if ((node % 2 == 0)); then\n      if ((node\
    \ < min_even_value)); then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      elif ((node == min_even_value)); then\n        if ((i < min_even_index));\
    \ then\n          min_even_index=$i\n        fi\n      fi\n    fi\n  done\n  if\
    \ ((min_even_value == 10000000000)); then\n    echo \"[]\"\n  else\n    echo \"\
    [$min_even_value, $min_even_index]\"\n  fi", "  local nodes=$1\n  local smallest_value=\n\
    \  local smallest_index=\n  local i=1\n  for node in $nodes; do\n    if [[ $node\
    \ -eq 0 ]]; then\n      smallest_value=0\n      smallest_index=$i\n      break\n\
    \    elif [[ $node -gt 0 && $node%2 -eq 0 ]]; then\n      if [[ -z $smallest_value\
    \ || $node -lt $smallest_value ]]; then\n        smallest_value=$node\n      \
    \  smallest_index=$i\n      fi\n    fi\n    ((i++))\n  done\n  if [[ -z $smallest_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[ $smallest_value, $smallest_index\
    \ ]\"\n  fi", "  local nodes=\"$1\"\n  local min=\n  local min_index=\n  local\
    \ i=0\n  for node in $nodes; do\n    if (( node % 2 == 0 )); then\n      if [[\
    \ -z $min ]]; then\n        min=$node\n        min_index=$i\n      elif (( node\
    \ < min )); then\n        min=$node\n        min_index=$i\n      fi\n    fi\n\
    \    (( i++ ))\n  done\n  if [[ -z $min ]]; then\n    echo \"[]\"\n  else\n  \
    \  echo \"[$min, $min_index]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n\
    \  local -i min_even_index=1000000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  local -i value\n  local -i index\n  for ((i=0; i<n; i++)); do\n    value=${nodes[$i]}\n\
    \    if ((value % 2 == 0 && value < min_even_value)); then\n      min_even_value=$value\n\
    \      min_even_index=$i\n    fi\n  done\n  if ((min_even_value < 1000000000));\
    \ then\n    echo \"[$min_even_value, $min_even_index]\"\n  else\n    echo \"[]\"\
    \n  fi", "    local -a nodes=($1)\n    local -i i=0\n    local -i min_idx=-1\n\
    \    local -i min_val=0\n    local -i len=${#nodes[@]}\n    local -i val=0\n \
    \   for ((i=0; i<len; i++)); do\n        val=${nodes[i]}\n        if ((val % 2\
    \ == 0)); then\n            if ((min_idx == -1)); then\n                min_idx=$i\n\
    \                min_val=$val\n            elif ((val < min_val)); then\n    \
    \            min_idx=$i\n                min_val=$val\n            fi\n      \
    \  fi\n    done\n    if ((min_idx == -1)); then\n        echo \"[]\"\n    else\n\
    \        echo \"[$min_val, $min_idx]\"\n    fi", "  local -a arr=( $1 )\n  local\
    \ -i min_even_val=999999\n  local -i min_even_idx=999999\n  local -i i=0\n  local\
    \ -i len=${#arr[@]}\n  local -i val\n  local -i idx\n  for (( i=0; i<len; i++\
    \ )); do\n    val=${arr[$i]}\n    if (( val % 2 == 0 )); then\n      if (( val\
    \ < min_even_val )); then\n        min_even_val=$val\n        min_even_idx=$i\n\
    \      fi\n    fi\n  done\n  if (( min_even_val == 999999 )); then\n    echo \"\
    []\"\n  else\n    echo \"[ $min_even_val, $min_even_idx ]\"\n  fi", "  local -a\
    \ nodes=($1)\n  local -i i=0\n  local -i min_index=0\n  local -i min_value=0\n\
    \  local -i is_first=1\n  local -i is_even=0\n  local -i is_smaller=0\n  for i\
    \ in \"${!nodes[@]}\"; do\n    is_even=$((nodes[i] % 2))\n    if [[ $is_even -eq\
    \ 0 ]]; then\n      if [[ $is_first -eq 1 ]]; then\n        min_value=${nodes[i]}\n\
    \        min_index=$i\n        is_first=0\n      else\n        is_smaller=$((min_value\
    \ > nodes[i]))\n        if [[ $is_smaller -eq 1 ]]; then\n          min_value=${nodes[i]}\n\
    \          min_index=$i\n        fi\n      fi\n    fi\n  done\n  if [[ $is_first\
    \ -eq 0 ]]; then\n    echo \"[$min_value, $min_index]\"\n  else\n    echo \"[]\"\
    \n  fi"]
stop_tokens:
- "\n}"
