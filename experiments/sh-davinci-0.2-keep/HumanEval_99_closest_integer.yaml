name: HumanEval_99_closest_integer
language: humaneval_to_bash.py
prompt: "#!/bin/bash\n# Create a function that takes a value (string) representing\
  \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
  # from two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
  10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
  \ zero means that if the given number is equidistant\n# from two integers, the one\
  \ you should return is the one that is the\n# farthest from zero. For example closest_integer(\"\
  14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n\
  #\n# $1 is a string\nclosest_integer() {\n"
tests: "}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
  \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\"\
  \ ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
completions: ["  # Write your code here\n  echo $1 | awk '{printf \"%.0f\\n\", $1}'",
  '  printf "%.0f\n" "$1"', "  # Write your code here\n  # Use echo to print to stdout\n\
    \  echo $1", "    echo $1 | awk '{printf \"%d\\n\", $1}'", "    # Write your code\
    \ here\n    echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n\
    \  # Use echo to print to stdout\n  echo $1", "    # Write your code here\n  \
    \  # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo \"Hello world!\"", "    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write\
    \ your code here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write your\
    \ code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n",
  "  echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write your code here\n  #\n  #\
    \ Hint:\n  # Use the bash built-in command `bc` to perform floating point\n  #\
    \ arithmetic.\n  #\n  # Hint:\n  # Use the bash built-in command `printf` to format\
    \ the output.\n  #\n  # Hint:\n  # Use the bash built-in command `echo` to print\
    \ the output.\n  #\n  # Hint:\n  # Use the bash built-in command `exit` to exit\
    \ the program.\n  #\n  # Hint:\n  # Use the bash built-in command `test` to test\
    \ the conditions.\n  #\n  # Hint:\n  # Use the bash built-in command `expr` to\
    \ perform arithmetic\n  # operations.\n  #\n  # Hint:\n  # Use the bash built-in\
    \ command `read` to read the input.\n  #\n  # Hint:\n  # Use the bash built-in\
    \ command `echo` to print the output.\n  #\n  # Hint:\n  # Use the bash built-in\
    \ command `exit` to exit the program.\n  #\n  # Hint:\n  # Use the bash built-in\
    \ command `test` to test the conditions.\n  #\n  # Hint:\n  # Use the bash built-in\
    \ command `expr` to perform arithmetic\n  # operations.\n  #\n  # Hint:\n  # Use\
    \ the bash built-in command `read` to read the input.\n  #\n  # Hint:\n  # Use\
    \ the bash built-in command `echo` to print the output.\n  #\n  # Hint:\n  # Use\
    \ the bash built-in command `exit` to exit the program.\n  #\n  # Hint:\n  # Use\
    \ the bash built-in command `test` to test the conditions.\n  #\n  # Hint:\n \
    \ # Use the bash built-in command `expr` to perform arithmetic\n  # operations.\n\
    \  #\n  # Hint:\n  # Use the bash built-in command `read` to read the input.\n\
    \  #\n  # Hint:\n  # Use the bash built-in command `echo` to print the output.\n\
    \  #\n  #", "  # Write your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'",
  "    # Your code here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  echo \"\
    $1\" | awk '{printf(\"%d\\n\", $1 + 0.5 * ($1 < 0 ? -1 : 1))}'", "    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'",
  "  # Write your code here\n  # Use echo to print to stdout\n  echo $1", "    echo\
    \ $1 | awk '{printf \"%d\\n\", $1}'", "    # Write your code here\n    # To print\
    \ results to the standard output you can use echo\n    # Example: echo \"Hello\
    \ world!\"\n    echo $1", "  # your code here\n  echo $1 | awk '{printf \"%d\\\
    n\", $1}'"]
stop_tokens:
- "\n}"
