name: HumanEval_99_closest_integer
language: humaneval_to_bash.py
prompt: "#!/bin/bash\n# Create a function that takes a value (string) representing\
  \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
  # from two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
  10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
  \ zero means that if the given number is equidistant\n# from two integers, the one\
  \ you should return is the one that is the\n# farthest from zero. For example closest_integer(\"\
  14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n\
  #\n# $1 is a string\nclosest_integer() {\n"
tests: "}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
  \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\"\
  \ ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
completions: ["  # Write your code here\n  echo $1 | awk '{printf \"%.0f\\n\", $1}'",
  '  printf "%.0f\n" "$1"', "  # Write your code here\n  # Use echo to print to stdout\n\
    \  echo $1", "    echo $1 | awk '{printf \"%d\\n\", $1}'", "    # Write your code\
    \ here\n    echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n\
    \  # Use echo to print to stdout\n  echo $1", "    # Write your code here\n  \
    \  # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo \"Hello world!\"", "    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write\
    \ your code here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write your\
    \ code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n",
  "  echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write your code here\n  #\n  #\
    \ Hint:\n  # Use the bash built-in command `bc` to perform floating point\n  #\
    \ arithmetic.\n  #\n  # Hint:\n  # Use the bash built-in command `printf` to format\
    \ the output.\n  #\n  # Hint:\n  # Use the bash built-in command `echo` to print\
    \ the output.\n  #\n  # Hint:\n  # Use the bash built-in command `exit` to exit\
    \ the program.\n  #\n  # Hint:\n  # Use the bash built-in command `test` to test\
    \ the conditions.\n  #\n  # Hint:\n  # Use the bash built-in command `expr` to\
    \ perform arithmetic\n  # operations.\n  #\n  # Hint:\n  # Use the bash built-in\
    \ command `read` to read the input.\n  #\n  # Hint:\n  # Use the bash built-in\
    \ command `echo` to print the output.\n  #\n  # Hint:\n  # Use the bash built-in\
    \ command `exit` to exit the program.\n  #\n  # Hint:\n  # Use the bash built-in\
    \ command `test` to test the conditions.\n  #\n  # Hint:\n  # Use the bash built-in\
    \ command `expr` to perform arithmetic\n  # operations.\n  #\n  # Hint:\n  # Use\
    \ the bash built-in command `read` to read the input.\n  #\n  # Hint:\n  # Use\
    \ the bash built-in command `echo` to print the output.\n  #\n  # Hint:\n  # Use\
    \ the bash built-in command `exit` to exit the program.\n  #\n  # Hint:\n  # Use\
    \ the bash built-in command `test` to test the conditions.\n  #\n  # Hint:\n \
    \ # Use the bash built-in command `expr` to perform arithmetic\n  # operations.\n\
    \  #\n  # Hint:\n  # Use the bash built-in command `read` to read the input.\n\
    \  #\n  # Hint:\n  # Use the bash built-in command `echo` to print the output.\n\
    \  #\n  #", "  # Write your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'",
  "    # Your code here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  echo \"\
    $1\" | awk '{printf(\"%d\\n\", $1 + 0.5 * ($1 < 0 ? -1 : 1))}'", "    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'",
  "  # Write your code here\n  # Use echo to print to stdout\n  echo $1", "    echo\
    \ $1 | awk '{printf \"%d\\n\", $1}'", "    # Write your code here\n    # To print\
    \ results to the standard output you can use echo\n    # Example: echo \"Hello\
    \ world!\"\n    echo $1", "  # your code here\n  echo $1 | awk '{printf \"%d\\\
    n\", $1}'", "  local number=$1\n  local integer=$(echo \"$number\" | cut -d. -f1)\n\
    \  local decimal=$(echo \"$number\" | cut -d. -f2)\n  local result=0\n  if [ -z\
    \ \"$decimal\" ]; then\n    result=$integer\n  elif [ \"$decimal\" -ge 5 ]; then\n\
    \    result=$((integer + 1))\n  else\n    result=$integer\n  fi\n  echo \"$result\"",
  "  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  # Use echo\
    \ to print to stdout\n  echo $1", "  # Write your code here\n  echo \"$1\" | awk\
    \ '{printf(\"%d\\n\", $1)}'", "  # Write your code here\n  # Use echo to print\
    \ to stdout\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  local num=$1\n  local\
    \ int=$(printf \"%.0f\" \"$num\")\n  local dec=$(printf \"%.3f\" \"$num\" | cut\
    \ -d. -f2)\n  if [ \"$dec\" -gt 499 ]; then\n    int=$((int + 1))\n  elif [ \"\
    $dec\" -lt 499 ]; then\n    int=$((int - 1))\n  fi\n  echo \"$int\"", "  # Write\
    \ your code here\n  # Use echo to print to stdout\n  echo \"Not implemented\"",
  "  # Write your code here\n  # Use echo to print to stdout\n  echo $1", "  # Write\
    \ your code here\n  echo $1 | awk '{printf \"%.0f\\n\", $1}'", "  local num=$1\n\
    \  local int_part=${num%.*}\n  local dec_part=${num#*.}\n  if [ $dec_part -lt\
    \ 5 ]; then\n    echo $int_part\n  else\n    echo $((int_part + 1))\n  fi", " \
    \ # Write your code here\n  # Use echo to print to stdout\n  echo \"closest_integer\"",
  "    # Write your code here\n    # To print results to the standard output you can\
    \ use echo\n    # Example: echo \"Hello world!\"\n    echo $1", "  # Write your\
    \ code here\n  echo $1 | awk '{printf(\"%d\\n\", $1 + 0.5 * ($1 < 0 ? -1 : 1))}'",
  "  echo \"$1\" | awk '{printf \"%d\\n\", $1}'", "    # your code here\n    echo\
    \ $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  echo \"$1\"\
    \ | awk '{printf(\"%d\\n\", $1)}'", "    # Your code here\n    echo $1 | awk '{printf\
    \ \"%d\\n\", $1}'", "  # your code here\n  echo $1 | awk '{printf(\"%d\\n\", $1+0.5*($1<0?-1:1))}'",
  "  # Write your code here\n  # Use echo to print to stdout\n  echo $1", "  # Write\
    \ your code here\n  echo $1 | awk '{printf \"%.0f\\n\", $1}'", "    echo \"$1\"\
    \ | awk '{printf \"%d\\n\", $1}'", "    # Write your code here\n    # To print\
    \ results to the standard output you can use echo\n    # Example: echo \"Hello\
    \ world!\"\n    echo $1", "  # Write your code here\n  # Use echo to print to\
    \ stdout\n  echo \"closest_integer($1)\"", "  # Write your code here\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n", "  # Write your code\
    \ here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n", "  # Write\
    \ your code here\n  # Use echo to print to stdout\n  echo $1 | awk '{printf(\"\
    %d\\n\", $1)}'", "  # Write your code here\n  echo $1 | awk '{print int($1+0.5)}'",
  "  # Write your code here\n  # Use echo to print to stdout\n  echo $1", "  # Write\
    \ your code here\n  # Use echo to print to stdout\n  echo $1 | awk '{printf(\"\
    %d\\n\", $1)}'", "  # Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n", "  # Write your code here\n  # Use echo to print\
    \ to stdout\n  echo $1", "    # Write your code here\n    # To print results to\
    \ the standard output you can use echo\n    # Example: echo \"Hello world!\"\n\
    \    echo $1 | awk '{printf(\"%d\\n\", $1)}'", "    # TODO: Implement this function\n\
    \    # Hint: use the built-in bash function `bc`\n    #       and the `-l` flag\
    \ to load the math library\n    #       and the `-q` flag to suppress output\n\
    \    #       and the `-e` flag to specify the expression\n    #       to evaluate\n\
    \    # Hint: use the built-in bash function `printf`\n    #       and the `%f`\
    \ format to convert a string to a float\n    # Hint: use the built-in bash function\
    \ `printf`\n    #       and the `%d` format to convert a float to an integer\n\
    \    # Hint: use the built-in bash function `echo`\n    #       and the `-e` flag\
    \ to enable interpretation of backslash escapes\n    # Hint: use the built-in\
    \ bash function `echo`\n    #       and the `-n` flag to suppress output of a\
    \ trailing newline\n    # Hint: use the built-in bash function `echo`\n    # \
    \      and the `-e` flag to enable interpretation of backslash escapes\n    #\
    \ Hint: use the built-in bash function `echo`\n    #       and the `-n` flag to\
    \ suppress output of a trailing newline\n    # Hint: use the built-in bash function\
    \ `echo`\n    #       and the `-e` flag to enable interpretation of backslash\
    \ escapes\n    # Hint: use the built-in bash function `echo`\n    #       and\
    \ the `-n` flag to suppress output of a trailing newline\n    # Hint: use the\
    \ built-in bash function `echo`\n    #       and the `-e` flag to enable interpretation\
    \ of backslash escapes\n    # Hint: use the built-in bash function `echo`\n  \
    \  #       and the `-n` flag to suppress output of a trailing newline\n    # Hint:\
    \ use the built-in bash function `echo`\n    #       and the `-e` flag to enable\
    \ interpretation of backslash escapes\n    # Hint: use the built-in bash function\
    \ `echo`\n    #       and the `-n` flag to suppress output of a trailing newline\n\
    \    # Hint: use the built-in bash function `echo`\n   ", "    # TODO: implement\
    \ this function\n    # Hint: use the bash builtin command `bc`\n    # Hint: use\
    \ the bash builtin command `awk`\n    # Hint: use the bash builtin command `printf`\n\
    \    # Hint: use the bash builtin command `echo`\n    # Hint: use the bash builtin\
    \ command `test`\n    # Hint: use the bash builtin command `expr`\n    # Hint:\
    \ use the bash builtin command `cut`\n    # Hint: use the bash builtin command\
    \ `grep`\n    # Hint: use the bash builtin command `sed`\n    # Hint: use the\
    \ bash builtin command `tr`\n    # Hint: use the bash builtin command `sort`\n\
    \    # Hint: use the bash builtin command `uniq`\n    # Hint: use the bash builtin\
    \ command `wc`\n    # Hint: use the bash builtin command `head`\n    # Hint: use\
    \ the bash builtin command `tail`\n    # Hint: use the bash builtin command `cat`\n\
    \    # Hint: use the bash builtin command `tee`\n    # Hint: use the bash builtin\
    \ command `xargs`\n    # Hint: use the bash builtin command `seq`\n    # Hint:\
    \ use the bash builtin command `yes`\n    # Hint: use the bash builtin command\
    \ `date`\n    # Hint: use the bash builtin command `time`\n    # Hint: use the\
    \ bash builtin command `read`\n    # Hint: use the bash builtin command `echo`\n\
    \    # Hint: use the bash builtin command `printf`\n    # Hint: use the bash builtin\
    \ command `expr`\n    # Hint: use the bash builtin command `bc`\n    # Hint: use\
    \ the bash builtin command `awk`\n    # Hint: use the bash builtin command `test`\n\
    \    # Hint: use the bash builtin command `cut`\n    # Hint: use the bash builtin\
    \ command `grep`\n    # Hint: use the bash builtin command `sed`\n    # Hint:\
    \ use the bash builtin command `tr`\n   ", "    # Write your code here\n    #\
    \ To print results to the standard output you can use echo\n    # Example: echo\
    \ \"Hello world!\"\n    echo \"Hello world!\"", "  # Write your code here\n  echo\
    \ $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  echo $1 | awk\
    \ '{printf \"%d\\n\", $1}'", "  # Write your code here\n  echo $1 | awk '{printf(\"\
    %d\\n\", $1)}'", "  # Write your code here\n  # Use echo to print to stdout\n\
    \  echo $1", "  # your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", " \
    \ echo \"$1\" | awk '{printf \"%d\\n\", $1}'", "  # your code here\n  echo $1\
    \ | awk '{printf \"%.0f\\n\", $1}'", "  # your code here\n  echo $1 | awk '{printf(\"\
    %d\\n\", $1)}'", "    # Write your code here\n    # To print results to the standard\
    \ output you can use echo\n    # Example: echo \"Hello world!\"\n    echo $1",
  "    # If the number is equidistant from two integers, round it away from zero.\n\
    \    # If the number is negative, round it away from zero.\n    # If the number\
    \ is positive, round it away from zero.\n    # If the number is zero, return zero.\n\
    \    if [[ $1 =~ ^-?[0-9]+\\.[5]$ ]]; then\n        if [[ $1 =~ ^- ]]; then\n\
    \            echo $(( $1 - 1 ))\n        else\n            echo $(( $1 + 1 ))\n\
    \        fi\n    else\n        echo $(( $1 ))\n    fi", "  # Write your code here\n\
    \  # Use echo to print to stdout\n  echo \"Not implemented\"", "  # Write your\
    \ code here\n  # Use echo to print to stdout\n  echo $1 | awk '{printf(\"%d\\\
    n\", $1)}'", "    # your code here\n    echo $1 | awk '{printf \"%.0f\\n\", $1}'",
  "    # your code here\n    echo $1 | awk '{printf \"%d\\n\", $1}'", "    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'",
  "  # Write your code here\n  # Use echo to print to stdout\n  # Use $1 to get the\
    \ first argument\n  echo $1", "  # Write your code here\n  # Use echo to print\
    \ to stdout\n  echo \"Not implemented\"", "    # Write your code here\n    # To\
    \ print results to the standard output you can use echo\n    # Example: echo \"\
    Hello world!\"\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write your\
    \ code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n",
  "  # Write your code here\n  # Use echo to print to stdout\n  # Use $1 to access\
    \ the first argument to the function\n  echo $1", "  # TODO: Implement this function\n\
    \  # Hint: Use the bash builtin `bc` command to do floating point\n  # arithmetic.\n\
    \  # Hint: Use the bash builtin `printf` command to format the output.\n  # Hint:\
    \ Use the bash builtin `awk` command to round the number.\n  # Hint: Use the bash\
    \ builtin `echo` command to print the result.\n  # Hint: Use the bash builtin\
    \ `test` command to test the result.\n  # Hint: Use the bash builtin `exit` command\
    \ to exit with the correct\n  # exit code.\n  # Hint: Use the bash builtin `seq`\
    \ command to generate a sequence of\n  # numbers.\n  # Hint: Use the bash builtin\
    \ `sort` command to sort a list of numbers.\n  # Hint: Use the bash builtin `head`\
    \ command to get the first element\n  # of a list.\n  # Hint: Use the bash builtin\
    \ `tail` command to get all but the first\n  # element of a list.\n  # Hint: Use\
    \ the bash builtin `wc` command to count the number of\n  # elements in a list.\n\
    \  # Hint: Use the bash builtin `tr` command to remove the newline\n  # character\
    \ from the end of a string.\n  # Hint: Use the bash builtin `read` command to\
    \ read a string from\n  # standard input.\n  # Hint: Use the bash builtin `read`\
    \ command to read a string from\n  # standard input.\n  # Hint: Use the bash builtin\
    \ `read` command to read a string from\n  # standard input.\n  # Hint: Use the\
    \ bash builtin `read` command to read a string from\n  # standard input.\n  #\
    \ Hint: Use the bash builtin `read` command to read a string from\n  # standard\
    \ input.\n  # Hint: Use the bash builtin `read` command to read a string from\n\
    \  # standard input.\n  # Hint: Use the bash builtin `read` command to read a\
    \ string from\n  # standard input.\n  # Hint: Use the bash builtin `read` command\
    \ to read a string from\n  # standard input.\n ", "    # your code here\n    echo\
    \ $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write your code here\n  # Use echo\
    \ to print to stdout\n  echo \"Not implemented\"", "    # your code here\n   \
    \ echo $1 | awk '{printf \"%d\\n\", $1}'", "    # Write your code here\n    #\
    \ To print results to the standard output you can use echo\n    # Example: echo\
    \ \"Hello world!\"\n    echo $1", "    # Write your code here\n    # To print\
    \ results to the standard output you can use echo\n    # Example: echo \"Hello\
    \ world!\"\n    echo \"Hello world!\"", "  # Write your code here\n  # Use echo\
    \ to print to stdout\n  # Use $1 to access the first argument to the function\n\
    \  echo $1", "    echo \"$1\" | awk '{printf \"%.0f\", $1}'", "  echo \"$1\" |\
    \ awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  echo $1 | awk '{printf(\"\
    %d\\n\", $1 + 0.5 * sign($1))}'", "  # Write your code here\n  # Use echo to print\
    \ to stdout\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write your code\
    \ here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'", "    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo \"Hello world!\"", "  # Your code here\n  #\
    \ Hint: use the bash builtin command `bc` to perform floating point\n  # arithmetic.\n\
    \  # Hint: use the bash builtin command `printf` to format the output.\n  # Hint:\
    \ use the bash builtin command `echo` to print the output.\n  # Hint: use the\
    \ bash builtin command `test` to check if a string is\n  # empty.\n  # Hint: use\
    \ the bash builtin command `test` to check if a string\n  # contains a substring.\n\
    \  # Hint: use the bash builtin command `test` to check if a string\n  # contains\
    \ a character.\n  # Hint: use the bash builtin command `expr` to perform arithmetic\n\
    \  # operations.\n  # Hint: use the bash builtin command `expr` to perform string\n\
    \  # operations.\n  # Hint: use the bash builtin command `expr` to perform regular\n\
    \  # expression matching.\n  # Hint: use the bash builtin command `expr` to perform\
    \ regular\n  # expression substitution.\n  # Hint: use the bash builtin command\
    \ `expr` to perform regular\n  # expression matching.\n  # Hint: use the bash\
    \ builtin command `expr` to perform regular\n  # expression substitution.\n  #\
    \ Hint: use the bash builtin command `expr` to perform regular\n  # expression\
    \ matching.\n  # Hint: use the bash builtin command `expr` to perform regular\n\
    \  # expression substitution.\n  # Hint: use the bash builtin command `expr` to\
    \ perform regular\n  # expression matching.\n  # Hint: use the bash builtin command\
    \ `expr` to perform regular\n  # expression substitution.\n  # Hint: use the bash\
    \ builtin command `expr` to perform regular\n  # expression matching.\n  # Hint:\
    \ use the bash builtin command `expr` to perform regular\n  # expression substitution.\n\
    \  # Hint: use the bash builtin command `expr` to perform regular\n  # expression\
    \ matching.\n  # Hint: use the bash builtin command `expr` to perform regular\n\
    \  # expression substitution.\n  # Hint: use the bash builtin command `expr` to\
    \ perform regular\n  # expression matching.\n  #", "    # your code here\n   \
    \ echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write your code here\n  # Use\
    \ echo to print to stdout\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'", "    #\
    \ your code here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'", "    echo \"$1\"\
    \ | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  echo $1 | awk\
    \ '{printf \"%d\\n\", $1}'", '    printf "%.0f\n" "$1"', '    printf "%.0f\n"
    "$1"', "  # your code here\n  echo $1 | awk '{ printf \"%d\\n\", $1 }'", "  #\
    \ Write your code here\n  # Use echo to print to stdout\n  echo $1 | awk '{printf(\"\
    %d\\n\", $1)}'", "  # Write your code here\n  echo $1 | awk '{printf \"%d\\n\"\
    , $1}'", "  # Write your code here\n  # Use echo to print to stdout\n  echo \"\
    closest_integer\"", "  # Write your code here\n  # Use echo to print to stdout\n\
    \  echo $1", "    echo \"$1\" | awk '{printf \"%d\\n\", $1}'", "  # Your code\
    \ here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo $1", "  # Write your code here\n  echo $1 |\
    \ awk '{printf \"%.0f\\n\", $1}'", "  # your code here\n  echo $1 | awk '{printf(\"\
    %d\\n\", $1)}'", "  # Your code here\n  local number=$1\n  local integer=$(echo\
    \ \"$number\" | cut -d. -f1)\n  local decimal=$(echo \"$number\" | cut -d. -f2)\n\
    \  if [ -z \"$decimal\" ]; then\n    echo \"$integer\"\n  else\n    local decimal_length=${#decimal}\n\
    \    local decimal_first_digit=$(echo \"$decimal\" | cut -c1)\n    local decimal_first_digit_plus_one=$((decimal_first_digit\
    \ + 1))\n    local decimal_first_digit_plus_one_length=$((decimal_length - 1))\n\
    \    local decimal_first_digit_plus_one_string=$(printf \"%0${decimal_first_digit_plus_one_length}d\"\
    \ \"$decimal_first_digit_plus_one\")\n    local decimal_first_digit_plus_one_string_length=${#decimal_first_digit_plus_one_string}\n\
    \    local decimal_first_digit_plus_one_string_first_digit=$(echo \"$decimal_first_digit_plus_one_string\"\
    \ | cut -c1)\n    local decimal_first_digit_plus_one_string_first_digit_plus_one=$((decimal_first_digit_plus_one_string_first_digit\
    \ + 1))\n    local decimal_first_digit_plus_one_string_first_digit_plus_one_length=$((decimal_first_digit_plus_one_string_length\
    \ - 1))\n    local decimal_first_digit_plus_one_string_first_digit_plus_one_string=$(printf\
    \ \"%0${decimal_first_digit_plus_one_string_first_digit_plus_one_length}d\" \"\
    $decimal_first_digit_plus_one_string_first_digit_plus_one\")\n    local decimal_first_digit_plus_one_string_first_digit_plus_one_string_length=${#decimal_first_digit_plus_one_string_first_digit_plus_one_string}\n\
    \    local decimal_first_digit_plus_one_string_first_digit_plus_one_string_first_",
  "  # Write your code here\n  # Use echo to print to stdout\n  echo \"Not implemented\"",
  "  # Write your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo $1 | awk '{printf \"%d\\n\", $1}'",
  "  # Write your code here\n  # Use echo to print to stdout\n  echo $1", "  local\
    \ number=$1\n  local integer=$(echo \"$number\" | sed 's/\\..*//')\n  local decimal=$(echo\
    \ \"$number\" | sed 's/[0-9]*\\.//')\n  if [ \"$decimal\" -gt \"5\" ]; then\n\
    \    echo $((integer + 1))\n  else\n    echo $integer\n  fi", "  # Write your\
    \ code here\n  echo \"$1\" | awk '{printf \"%d\\n\", $1}'", "  # Write your code\
    \ here\n  # Use echo to print to stdout\n  # Use $1 to access the first argument\
    \ to the function\n  # Use $# to access the number of arguments to the function\n\
    \  # Use $@ to access all arguments to the function\n  # Use $? to access the\
    \ exit status of the last command\n  # Use $$ to access the process ID of the\
    \ script\n  # Use $USER to access the username of the user running the script\n\
    \  # Use $HOSTNAME to access the hostname of the machine the script is running\
    \ on\n  # Use $SECONDS to access the number of seconds since the script was started\n\
    \  # Use $RANDOM to generate a random number\n  # Use $LINENO to access the current\
    \ line number in the script\n  # Use $FUNCNAME to access the name of the current\
    \ function\n  # Use $0 to access the name of the current script\n  # Use $DIRSTACK\
    \ to access the list of directories remembered by the pushd and popd builtins\n\
    \  # Use $PIPESTATUS to access the exit status of the last command in a pipeline\n\
    \  # Use $BASH_VERSION to access the version of bash you're using\n  # Use $BASH_VERSINFO\
    \ to access a version information array\n  # Use $BASH_SOURCE to access the name\
    \ of the file containing the source of the current script\n  # Use $BASH_LINENO\
    \ to access the line number in the script or shell function currently executing\n\
    \  # Use $BASH_EXECUTION_STRING to access the original command argument(s) passed\
    \ to the script\n  # Use $BASH_SUBSHELL to access the current subshell level\n\
    \  # Use $BASH_SOURCE_FILE to access the name of the file containing the source\
    \ of the current script\n  # Use $BASH_SOURCE_LINENO to access the line number\
    \ in the script or shell function currently executing\n  # Use $BASH_REMATCH to\
    \ access the portion of the string matching the most recent regular expression\
    \ match\n  # Use $BASH_SUBSHELL to access the current subshell level\n  # Use\
    \ $BASH_SUBSHELL to access the current subshell level\n  # Use $BASH_SUBSHELL\
    \ to access the current subshell level\n  # Use", "  # Write your code here\n\
    \  # Use echo to print to stdout\n  echo $1", "  # TODO: Implement this function\n\
    \  # Hint: You can use the following command to round a number:\n  # round_number=$(printf\
    \ \"%.0f\" $number)\n  #\n  # Hint: You can use the following command to get the\
    \ absolute value\n  # of a number:\n  # abs_number=$(echo \"$number\" | sed 's/-//')\n\
    \  #\n  # Hint: You can use the following command to get the integer part\n  #\
    \ of a number:\n  # int_number=$(echo \"$number\" | cut -d. -f1)\n  #\n  # Hint:\
    \ You can use the following command to get the decimal part\n  # of a number:\n\
    \  # dec_number=$(echo \"$number\" | cut -d. -f2)\n  #\n  # Hint: You can use\
    \ the following command to get the length of a\n  # string:\n  # str_length=$(echo\
    \ \"$string\" | wc -c)\n  #\n  # Hint: You can use the following command to get\
    \ the first character\n  # of a string:\n  # first_char=$(echo \"$string\" | cut\
    \ -c1)\n  #\n  # Hint: You can use the following command to get the last character\n\
    \  # of a string:\n  # last_char=$(echo \"$string\" | cut -c$str_length)\n  #\n\
    \  # Hint: You can use the following command to get the first n characters\n \
    \ # of a string:\n  # first_n_chars=$(echo \"$string\" | cut -c1-$n)\n  #\n  #\
    \ Hint: You can use the following command to get the last n characters\n  # of\
    \ a string:\n  # last_n_chars=$(echo \"$string\" | cut -c$(($str_length-$n+1))-$str_length)\n\
    \  #\n  # Hint: You can use the following command to get the characters between\n\
    \  # the nth and mth characters of a string:\n  # n_to_m_chars=$(echo \"$string\"\
    \ | cut -c$n-$m)\n  #\n  # Hint: You can use the following command to", "  # Write\
    \ your code here\n  # Use echo to print to stdout\n  # Use printf to print to\
    \ stderr\n  printf \"Not implemented yet\" 1>&2", "  # Write your code here\n\
    \  # Use echo to print to stdout\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'",
  "  # Write your code here\n  echo \"$1\" | awk '{printf \"%d\\n\", $1}'", "    #\
    \ Write your code here\n    # To print results to the standard output you can\
    \ use echo\n    # Example: echo \"Hello world!\"\n    echo $1 | awk '{printf(\"\
    %d\\n\", $1)}'", "    echo \"$1\" | awk '{printf \"%d\\n\", ($1>=0) ? $1+0.5 :\
    \ $1-0.5}'", "  # your code here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'",
  "    # Write your code here\n    # To print results to the standard output you can\
    \ use print\n    # Example: print \"Hello world!\"\n    printf \"%d\" $1", " \
    \ # Write your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo $1 | awk '{printf \"%d\\n\", $1}'",
  "    # your code here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  echo \"\
    $1\" | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  # Use echo\
    \ to print to stdout\n  # Use printf to print to stderr\n  printf \"Not implemented\
    \ yet\" 1>&2", "    local num=$1\n    local int=${num%.*}\n    local dec=${num#*.}\n\
    \    if [[ $dec -ge 5 ]]; then\n        ((int++))\n    fi\n    echo $int", " \
    \   # Write your code here\n    # To print results to the standard output you\
    \ can use echo\n    # Example: echo \"Hello world!\"\n    echo $1", "  # Write\
    \ your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your code\
    \ here\n  # Use echo to print to stdout\n  echo $1", "  # Write your code here\n\
    \  echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write your code here\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n", "    # your code\
    \ here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write your code here\n\
    \  # To print results to the standard output you can use echo\n  # Example: echo\
    \ \"Hello world!\"\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your\
    \ code here\n  # Use echo to print to stdout\n  # Use printf to print to stderr\n\
    \  echo \"Not implemented\" 1>&2", "  # Write your code here\n  # Use echo to\
    \ print to stdout\n  # Use $1 to get the first argument passed to the function\n\
    \  echo -n \"closest_integer($1) => \"\n  if [ $(echo \"$1 < 0\" | bc) -eq 1 ];\
    \ then\n    echo $(echo \"$1 - 0.5\" | bc | cut -d. -f1)\n  else\n    echo $(echo\
    \ \"$1 + 0.5\" | bc | cut -d. -f1)\n  fi", "  # Write your code here\n  # Use\
    \ echo to print to stdout\n  echo \"Not implemented\"", "  # Write your code here\n\
    \  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  # Use\
    \ echo to print to stdout\n  echo \"Not yet implemented\"", "  # Write your code\
    \ here\n  # Use echo to print to stdout\n  # Use $1 to get the first argument\
    \ to the function\n  echo $1", "  # Write your code here\n  echo $1 | awk '{printf(\"\
    %d\\n\", $1)}'", "    # your code here\n    echo $1 | awk '{printf \"%.0f\\n\"\
    , $1}'", "    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world!\"\n    echo $1 | awk '{printf(\"\
    %d\\n\", $1)}'", "  # Write your code here\n  echo \"$1\" | awk '{printf \"%d\\\
    n\", $1}'", "    # $1 is a string\n    # convert the string to a float\n    #\
    \ convert the float to an integer\n    # convert the integer to a string\n   \
    \ # return the string\n    printf \"%s\\n\" \"$1\" | awk '{printf \"%d\\n\", $1}'",
  '  printf "%.0f\n" "$1"', "    # Your code here\n    echo $1 | awk '{printf \"%d\\\
    n\", $1}'", "  # Write your code here\n  # Use echo to print to stdout\n  echo\
    \ $1", "  # Write your code here\n  #\n  # Hint: Use the following command to\
    \ round a number to the nearest\n  # integer:\n  #\n  #     printf \"%.0f\" $1\n\
    \  #\n  # To round away from zero, use the following command:\n  #\n  #     printf\
    \ \"%.0f\" $1\n  #\n  # To round away from zero, use the following command:\n\
    \  #\n  #     printf \"%.0f\" $1\n  #\n  # To round away from zero, use the following\
    \ command:\n  #\n  #     printf \"%.0f\" $1\n  #\n  # To round away from zero,\
    \ use the following command:\n  #\n  #     printf \"%.0f\" $1\n  #\n  # To round\
    \ away from zero, use the following command:\n  #\n  #     printf \"%.0f\" $1\n\
    \  #\n  # To round away from zero, use the following command:\n  #\n  #     printf\
    \ \"%.0f\" $1\n  #\n  # To round away from zero, use the following command:\n\
    \  #\n  #     printf \"%.0f\" $1\n  #\n  # To round away from zero, use the following\
    \ command:\n  #\n  #     printf \"%.0f\" $1\n  #\n  # To round away from zero,\
    \ use the following command:\n  #\n  #     printf \"%.0f\" $1\n  #\n  # To round\
    \ away from zero, use the following command:\n  #\n  #     printf \"%.0f\" $1\n\
    \  #\n  # To round away from zero, use the following command:\n  #\n  #     printf\
    \ \"%.0f\" $1\n  #\n  # To round away from zero, use the following command:\n\
    \  #\n  #     printf \"%.0f\" $1\n  #\n  # To round away from zero, use the following\
    \ command:\n  #\n  #     printf \"%.0f\" $1\n  #\n  # To round away from zero,\
    \ use the following command:\n  #\n  #     printf \"%.0f\" $1\n  #\n  # To round\
    \ away from zero, use the following command:", "    # Your code here\n    echo\
    \ $1 | awk '{printf(\"%d\\n\", $1)}'", "  echo \"$1\" | awk '{printf \"%d\\n\"\
    , $1}'", "  # Write your code here\n  # Use echo to print to stdout\n  echo $1",
  "    # Write your code here\n    # To print results to the standard output you can\
    \ use echo\n    # Example: echo \"Hello world!\"\n    echo $1 | awk '{printf \"\
    %d\\n\", $1}'", "    # Write your code here\n    # To print results to the standard\
    \ output you can use echo\n    # Example: echo \"Hello world!\"\n    echo $1 |\
    \ awk '{printf \"%.0f\\n\", $1}'", "  # Write your code here\n  echo $1 | awk\
    \ '{printf(\"%d\\n\", $1)}'", "  # your code here\n  echo $1 | awk '{printf(\"\
    %d\\n\", $1)}'", "    # Your code here\n    echo $1 | awk '{printf(\"%d\\n\",\
    \ $1)}'", "    # Write your code here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'",
  "  # Write your code here\n  # Use echo to print to stdout\n  echo $1 | awk '{printf(\"\
    %d\\n\", $1)}'", "    # your code here\n    echo $1 | awk '{printf \"%d\\n\",\
    \ $1}'", "  # Write your code here\n  # Use echo to print to stdout\n  echo $1",
  "    # Write your code here\n    # To print results to the standard output you can\
    \ use echo\n    # Example: echo \"Hello world!\"\n    echo $1", "    # TODO: Write\
    \ your code here\n    echo $1 | awk '{printf \"%.0f\\n\", $1}'", "    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"", "  # Write\
    \ your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your code\
    \ here\n  # Use echo to print to stdout\n  echo $1", "  # Write your code here\n\
    \  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  # Use\
    \ echo to print to stdout\n  # Use printf to print to stderr\n  # Use return to\
    \ return a value\n  # Use exit to exit the program\n  printf \"Not implemented\
    \ yet\" >&2\n  exit 1", "  # your code here\n  echo $1 | awk '{print int($1+0.5)}'",
  "  # Write your code here\n  # Use echo to print to stdout\n  echo $1 | awk '{printf\
    \ \"%d\\n\", $1}'", "  # Write your code here\n  echo $1 | awk '{printf \"%d\\\
    n\", ($1>=0) ? $1+0.5 : $1-0.5}'", "    # Write your code here\n    # To print\
    \ results to the standard output you can use echo\n    # Example: echo \"Hello\
    \ world!\"\n    echo $1", "  # Write your code here\n  # Use echo to print to\
    \ stdout\n  echo $1 | awk '{printf(\"%d\\n\",$1)}'", "  # Write your code here\n\
    \  # Use echo to print to stdout\n  echo $1", "    # Write your code here\n  \
    \  # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world!\"\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write\
    \ your code here\n  # Use echo to print to stdout\n  # Use $1 to access the first\
    \ argument to this function\n  echo $1", "  # Write your code here\n  # You can\
    \ use the following command to round a number:\n  # echo \"$1\" | awk '{printf\
    \ \"%.0f\\n\", $1}'\n  # For example, the following command will round -14.5 to\
    \ -15:\n  # echo \"-14.5\" | awk '{printf \"%.0f\\n\", $1}'\n  echo \"$1\" | awk\
    \ '{printf \"%.0f\\n\", $1}'", "  # Write your code here\n  #\n  # Hint: Use the\
    \ bash built-in command `bc` to do floating point\n  # arithmetic.\n  #\n  # Hint:\
    \ Use the bash built-in command `printf` to format the output.\n  #\n  # Hint:\
    \ Use the bash built-in command `echo` to print the output.\n  #\n  # Hint: Use\
    \ the bash built-in command `test` to test if a number is\n  # positive or negative.\n\
    \  #\n  # Hint: Use the bash built-in command `expr` to do integer arithmetic.\n\
    \  #\n  # Hint: Use the bash built-in command `awk` to do floating point\n  #\
    \ arithmetic.\n  #\n  # Hint: Use the bash built-in command `sed` to do string\
    \ manipulation.\n  #\n  # Hint: Use the bash built-in command `grep` to do string\
    \ matching.\n  #\n  # Hint: Use the bash built-in command `wc` to count the number\
    \ of\n  # lines in a file.\n  #\n  # Hint: Use the bash built-in command `sort`\
    \ to sort the lines in a\n  # file.\n  #\n  # Hint: Use the bash built-in command\
    \ `uniq` to remove duplicated\n  # lines in a file.\n  #\n  # Hint: Use the bash\
    \ built-in command `head` to get the first line in\n  # a file.\n  #\n  # Hint:\
    \ Use the bash built-in command `tail` to get the last line in\n  # a file.\n\
    \  #\n  # Hint: Use the bash built-in command `cat` to concatenate files.\n  #\n\
    \  # Hint: Use the bash built-in command `tee` to write to a file and\n  # also\
    \ print to the standard output.\n  #\n  # Hint: Use the bash built-in command\
    \ `tr` to do string translation.\n  #\n  # Hint: Use the bash built-in command\
    \ `rev` to reverse a string.\n  #\n  # Hint: Use the bash built-in command `cut`\
    \ to extract a substring.\n  #\n ", "    # If the number is equidistant from two\
    \ integers, round it away from zero.\n    # Rounding away from zero means that\
    \ if the given number is equidistant\n    # from two integers, the one you should\
    \ return is the one that is the\n    # farthest from zero. For example closest_integer(\"\
    14.5\") should\n    # return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    #\n    # $1 is a string\n    #\n    # Example:\n    # >>> closest_integer\
    \ \"14.5\"\n    # 15\n    # >>> closest_integer \"-14.5\"\n    # -15\n    # >>>\
    \ closest_integer \"14.4\"\n    # 14\n    # >>> closest_integer \"-14.4\"\n  \
    \  # -14\n    # >>> closest_integer \"14.6\"\n    # 15\n    # >>> closest_integer\
    \ \"-14.6\"\n    # -15\n    # >>> closest_integer \"14.5\"\n    # 15\n    # >>>\
    \ closest_integer \"-14.5\"\n    # -15\n    # >>> closest_integer \"14.4\"\n \
    \   # 14\n    # >>> closest_integer \"-14.4\"\n    # -14\n    # >>> closest_integer\
    \ \"14.6\"\n    # 15\n    # >>> closest_integer \"-14.6\"\n    # -15\n    # >>>\
    \ closest_integer \"14.5\"\n    # 15\n    # >>> closest_integer \"-14.5\"\n  \
    \  # -15\n    # >>> closest_integer \"14.4\"\n    # 14\n    # >>> closest_integer\
    \ \"-14.4\"\n    # -14\n    # >>> closest_integer \"14.6\"\n    # 15\n    # >>>\
    \ closest_integer \"-14.6\"\n    # -15\n    # >>> closest_integer \"14.5\"\n \
    \   # 15\n    # >>> closest_integer \"-14.5\"\n    # -15\n    # >>> closest_integer\
    \ \"14.4\"\n    # 14\n    # >>> closest_integer \"-14.4\"\n    # -14\n    # >>>\
    \ closest_integer \"14.6\"\n    # 15\n    # >>> closest_integer \"-14.6\"\n  \
    \  # -15\n   ", "  # your code here\n  printf \"%.0f\" \"$1\"", "    # your code\
    \ here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write your code here\n\
    \  echo $1 | awk '{printf \"%.0f\\n\", $1}'", "  # Write your code here\n  # Use\
    \ echo to print to stdout\n  # Use $1 to access the first argument to the function\n\
    \  # Use $2 to access the second argument to the function\n  # Use $# to access\
    \ the number of arguments to the function\n  # Use $@ to access all arguments\
    \ to the function\n  # Use $? to access the exit status of the last command\n\
    \  # Use $$ to access the process ID of the current shell\n  # Use $USER to access\
    \ the username of the current user\n  # Use $HOSTNAME to access the hostname of\
    \ the machine\n  # Use $SECONDS to access the number of seconds since the shell\
    \ was started\n  # Use $RANDOM to generate random integers\n  # Use $LINENO to\
    \ access the current line number in the script\n  # Use && to execute multiple\
    \ commands on a single line\n  # Use || to execute a command if the previous command\
    \ fails\n  # Use > to redirect stdout to a file\n  # Use < to redirect stdin from\
    \ a file\n  # Use >> to append stdout to a file\n  # Use | to pipe stdout to another\
    \ command\n  # Use ; to execute multiple commands on a single line\n  # Use $(command)\
    \ to replace with output of command\n  # Use `command` to replace with output\
    \ of command\n  # Use $((expression)) to replace with result of arithmetic expression\n\
    \  # Use ${var} to access the value of a variable\n  # Use ${var:-word} to access\
    \ the value of a variable or word if the variable is null or unset\n  # Use ${var:=word}\
    \ to access the value of a variable or set it to word if the variable is null\
    \ or unset\n  # Use ${var:?message} to print an error message if the variable\
    \ is null or unset\n  # Use ${var:+word} to access the value of a variable or\
    \ word if the variable is set\n  # Use ${#var} to access the length of a variable\n\
    \  # Use ${var#pattern} to remove matching prefix pattern\n  # Use ${var##pattern}\
    \ to remove matching prefix pattern\n  # Use ${var%pattern} to remove matching\
    \ suffix pattern\n  # Use ${var%%pattern} to remove matching suffix pattern\n\
    \  # Use ${var/pattern/string} to replace first matching", "  # Write your code\
    \ here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n",
  "  # your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your\
    \ code here\n  # Use echo to print to stdout\n  echo $1", "    # TODO: implement\
    \ this function\n    # Hint: use the built-in command `bc` to perform floating\
    \ point\n    # arithmetic.\n    # Hint: use the built-in command `printf` to format\
    \ the output.\n    # Hint: use the built-in command `echo` to print the output.\n\
    \    # Hint: use the built-in command `test` to check if a number is\n    # negative.\n\
    \    # Hint: use the built-in command `expr` to perform arithmetic\n    # operations.\n\
    \    # Hint: use the built-in command `cut` to extract a substring.\n    # Hint:\
    \ use the built-in command `seq` to generate a sequence of\n    # numbers.\n \
    \   # Hint: use the built-in command `sort` to sort a list of numbers.\n    #\
    \ Hint: use the built-in command `head` to get the first element\n    # of a list.\n\
    \    # Hint: use the built-in command `tail` to get all but the first\n    # element\
    \ of a list.\n    # Hint: use the built-in command `wc` to count the number of\n\
    \    # elements in a list.\n    # Hint: use the built-in command `xargs` to convert\
    \ a list of\n    # strings into a list of numbers.\n    # Hint: use the built-in\
    \ command `tr` to convert a list of\n    # numbers into a list of strings.\n \
    \   # Hint: use the built-in command `paste` to combine two lists of\n    # strings\
    \ into a list of strings.\n    # Hint: use the built-in command `sed` to remove\
    \ the last\n    # character of a string.\n    # Hint: use the built-in command\
    \ `tr` to convert a list of\n    # strings into a list of numbers.\n    # Hint:\
    \ use the built-in command `paste` to combine two lists of\n    # strings into\
    \ a list of strings.\n    # Hint: use the built-in command `sed` to remove the\
    \ last\n    # character of a string.\n    # Hint: use the built-in command `tr`\
    \ to convert a list of\n    # strings into a list of numbers.\n   ", "  # your\
    \ code here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write your code\
    \ here\n  # Use echo to print to stdout\n  # Use printf to print to stderr\n \
    \ printf \"Not implemented\"", "  # your code here\n  echo $1 | awk '{printf \"\
    %d\\n\", $1}'", "    # your code here\n    echo $1 | awk '{printf \"%d\\n\", $1}'",
  "  # Write your code here\n  # Use echo to print to stdout\n  echo $1", "    # Your\
    \ code here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'", "    # Write your code\
    \ here\n    # To print results to the standard output you can use echo\n    #\
    \ Example: echo \"Hello world!\"\n    echo $1", "  # Write your code here\n  echo\
    \ $1 | awk '{printf \"%.0f\\n\", $1}'", "  local num=$1\n  local int=$(printf\
    \ \"%.0f\" \"$num\")\n  local diff=$(echo \"$num - $int\" | bc -l)\n  if (( $(echo\
    \ \"$diff > 0.5\" | bc -l) )); then\n    echo \"$((int + 1))\"\n  elif (( $(echo\
    \ \"$diff < -0.5\" | bc -l) )); then\n    echo \"$((int - 1))\"\n  else\n    echo\
    \ \"$int\"\n  fi", "  # your code here\n  echo $1 | awk '{printf \"%.0f\\n\",\
    \ $1}'"]
stop_tokens:
- "\n}"
