language: sh
name: HumanEval_147_get_max_triples
results:
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    count=$((count+1))\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    local max_triples=0\n    for ((i=1; i<=n;\
    \ i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++));\
    \ do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1; k<=n; k++));\
    \ do\n                sum=$((a[i]+a[j]+a[k]))\n                if ((sum%3==0));\
    \ then\n                    ((count++))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local i=1\n    local j=2\n    local k=3\n    local count=0\n\
    \    local sum=0\n    local a=()\n    while [ $i -le $n ]\n    do\n        a[$i]=$((\
    \ $i * $i - $i + 1 ))\n        i=$(( $i + 1 ))\n    done\n    while [ $j -le $n\
    \ ]\n    do\n        while [ $k -le $n ]\n        do\n            sum=$(( ${a[$i]}\
    \ + ${a[$j]} + ${a[$k]} ))\n            if [ $(( $sum % 3 )) -eq 0 ]\n       \
    \     then\n                count=$(( $count + 1 ))\n            fi\n        \
    \    k=$(( $k + 1 ))\n        done\n        j=$(( $j + 1 ))\n        k=$(( $j\
    \ + 1 ))\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993767
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local sum=0\n    local count=0\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local a=()\n    for ((i=1; i<=n; i++)); do\n       \
    \ a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1;\
    \ j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local sum=0\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993769
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local sum=0\n    local count=0\n    local i=0\n    local\
    \ j=0\n    local k=0\n    for ((i=1; i<$n; i++)); do\n        for ((j=$i+1; j<$n;\
    \ j++)); do\n            for ((k=$j+1; k<$n; k++)); do\n                sum=$((i*i-i+1+j*j-j+1+k*k-k+1))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993767
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [ $((a[i]+a[j]+a[k]))\
    \ -eq $(((a[i]+a[j]+a[k])/3*3)) ]; then\n                    ((count++))\n   \
    \             fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993769
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n\
    \    local a=()\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n\
    \    done\n    local count=0\n    for ((i=1; i<=n-2; i++)); do\n        for ((j=i+1;\
    \ j<=n-1; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n              \
    \  if (((a[i]+a[j]+a[k])%3==0)); then\n                    ((count++))\n     \
    \           fi\n            done\n        done\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [ $((a[i]+a[j]+a[k]))\
    \ -eq $(((a[i]+a[j]+a[k])/3*3)) ]; then\n                    count=$((count+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993769
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [ $((a[i]+a[j]+a[k]))\
    \ -eq 0 ]; then\n                    count=$((count+1))\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993767
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    count=$((count+1))\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local sum=0\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    count=$((count+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [ $((a[i]+a[j]+a[k]))\
    \ -eq 0 ]; then\n                    count=$((count+1))\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993767
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local i=1\n    local j=2\n    local k=3\n    local count=0\n\
    \    local sum=0\n    while [ $i -lt $n ]\n    do\n        j=$((i+1))\n      \
    \  while [ $j -lt $n ]\n        do\n            k=$((j+1))\n            while\
    \ [ $k -lt $n ]\n            do\n                sum=$((i*i-i+1+j*j-j+1+k*k-k+1))\n\
    \                if [ $((sum%3)) -eq 0 ]\n                then\n             \
    \       count=$((count+1))\n                fi\n                k=$((k+1))\n \
    \           done\n            j=$((j+1))\n        done\n        i=$((i+1))\n \
    \   done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993767
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local count=0\n    for ((i=1; i<=n; i++));\
    \ do\n        a[$i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n \
    \       for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n\
    \                if [[ $((a[$i]+a[$j]+a[$k]))%3 -eq 0 ]]; then\n             \
    \       ((count++))\n                fi\n            done\n        done\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    count=$((count+1))\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if ((sum%3==0)); then\n                    ((count++))\n    \
    \            fi\n            done\n        done\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local sum=0\n    local count=0\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local a=()\n    for ((i=1; i<=n; i++)); do\n       \
    \ a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1;\
    \ j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if ((sum%3==0)); then\n                    ((count++))\n    \
    \            fi\n            done\n        done\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local sum=0\n    local count=0\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local a=()\n    for ((i=1; i<=n; i++)); do\n       \
    \ a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1;\
    \ j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if ((sum%3==0)); then\n                    ((count++))\n    \
    \            fi\n            done\n        done\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local sum=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n                if\
    \ ((sum%3==0)); then\n                    ((count++))\n                fi\n  \
    \          done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    count=$((count+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local sum=0\n    local a=()\n    for ((i=1; i<=n; i++));\
    \ do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n  \
    \      for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n\
    \                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n                \
    \    ((sum++))\n                fi\n            done\n        done\n    done\n\
    \    echo $sum\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993769
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n\
    \    local sum=0\n    local a=()\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local sum=0\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993769
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local sum=0\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993769
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n\
    \    local a=()\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n \
    \   done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    count=$((count+1))\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993769
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local sum=0\n    local count=0\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local a=()\n    for ((i=1; i<=n; i++)); do\n       \
    \ a+=($((i*i-i+1)))\n    done\n    for ((i=0; i<n-2; i++)); do\n        for ((j=i+1;\
    \ j<n-1; j++)); do\n            for ((k=j+1; k<n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993769
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local sum=0\n    local a=()\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local count=0\n    for ((i=1; i<=n; i++)); do\n    \
    \    a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n        for\
    \ ((j=i+1; j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n       \
    \         sum=$((a[i]+a[j]+a[k]))\n                if [[ $((sum%3)) -eq 0 ]];\
    \ then\n                    ((count++))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993770
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local count=0\n    for ((i=1; i<=n; i++));\
    \ do\n        a[$i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n \
    \       for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n\
    \                if (((a[i]+a[j]+a[k])%3==0)); then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993769
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local sum=0\n    local count=0\n    local a=()\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n                if\
    \ ((sum%3==0)); then\n                    ((count++))\n                fi\n  \
    \          done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993769
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [ $((a[i]+a[j]+a[k]))\
    \ -eq 0 ]; then\n                    count=$((count+1))\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993767
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if ((sum%3==0)); then\n                    ((count++))\n    \
    \            fi\n            done\n        done\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n\
    \    local sum=0\n    local a=()\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if ((sum%3==0)); then\n                    ((count++))\n    \
    \            fi\n            done\n        done\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993770
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local sum=0\n    local count=0\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local a=()\n    for ((i=1; i<=n; i++)); do\n       \
    \ a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1;\
    \ j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    count=$((count+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993770
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a_len=$((n - 2))\n    local a_sum=0\n    local\
    \ a_sum_mod=0\n    local a_sum_mod_0=0\n    local a_sum_mod_1=0\n    local a_sum_mod_2=0\n\
    \    local a_sum_mod_0_1=0\n    local a_sum_mod_0_2=0\n    local a_sum_mod_1_2=0\n\
    \    local a_sum_mod_0_1_2=0\n    local a_sum_mod_0_1_2_3=0\n    local a_sum_mod_0_1_2_3_4=0\n\
    \    local a_sum_mod_0_1_2_3_4_5=0\n    local a_sum_mod_0_1_2_3_4_5_6=0\n    local\
    \ a_sum_mod_0_1_2_3_4_5_6_7=0\n    local a_sum_mod_0_1_2_3_4_5_6_7_8=0\n    local\
    \ a_sum_mod_0_1_2_3_4_5_6_7_8_9=0\n    local a_sum_mod_0_1_2_3_4_5_6_7_8_9_10=0\n\
    \    local a_sum_mod_0_1_2_3_4_5_6_7_8_9_10_11=0\n    local a_sum_mod_0_1_2_3_4_5_6_7_8_9_10_11_12=0\n\
    \    local a_sum_mod_0_1_2_3_4_5_6_7_8_9_10_11_12_13=0\n    local a_sum_mod_0_1_2_3_4_5_6_7_8_9_10_11_12_13_14=0\n\
    \    local a_sum_mod_0_1_2_3_4_5_6_7_8_9_10_11_12\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local sum=0\n    local count=0\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local a=()\n    for ((i=1; i<=n; i++)); do\n       \
    \ a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1;\
    \ j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local count=0\n    for ((i=1; i<=n; i++));\
    \ do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n  \
    \      for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n\
    \                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n                \
    \    ((count++))\n                fi\n            done\n        done\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993769
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local count=0\n    for ((i=1; i<=n; i++));\
    \ do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n  \
    \      for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n\
    \                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n                \
    \    ((count++))\n                fi\n            done\n        done\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993769
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=$n; i++)); do\n        a[$i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<$n-1; i++)); do\n        for ((j=$i+1; j<$n; j++));\
    \ do\n            for ((k=$j+1; k<=$n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993770
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    count=$((count+1))\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=$n; i++)); do\n        a[$i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=$n; i++)); do\n        for ((j=$((i+1)); j<=$n; j++));\
    \ do\n            for ((k=$((j+1)); k<=$n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3\
    \ -eq 0 ]]; then\n                    count=$((count+1))\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993770
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local sum=0\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if ((sum%3==0)); then\n                    ((count++))\n    \
    \            fi\n            done\n        done\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993771
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local sum=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n                if\
    \ [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n            \
    \    fi\n            done\n        done\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993770
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    count=$((count+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=$n; i++)); do\n       \
    \ a[$i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=$n; i++)); do\n        for ((j=$((i+1));\
    \ j<=$n; j++)); do\n            for ((k=$((j+1)); k<=$n; k++)); do\n         \
    \       sum=$((a[$i]+a[$j]+a[$k]))\n                if [[ $((sum%3)) -eq 0 ]];\
    \ then\n                    ((count++))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993770
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local sum=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n                if\
    \ ((sum%3==0)); then\n                    ((count++))\n                fi\n  \
    \          done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local sum=0\n  local count=0\n  local i=0\n  local j=0\n\
    \  local k=0\n  for ((i=1; i<n; i++)); do\n    for ((j=i+1; j<n; j++)); do\n \
    \     for ((k=j+1; k<n; k++)); do\n        sum=$((i*i-i+1+j*j-j+1+k*k-k+1))\n\
    \        if [[ $((sum%3)) -eq 0 ]]; then\n          ((count++))\n        fi\n\
    \      done\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local count=0\n    for ((i=1; i<=n; i++));\
    \ do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n  \
    \      for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n\
    \                if (((a[i]+a[j]+a[k])%3==0)); then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993770
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3\
    \ -eq 0 ]]; then\n                    count=$((count+1))\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993770
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local count=0\n    for ((i=1; i<=n; i++));\
    \ do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n  \
    \      for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n\
    \                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n                \
    \    ((count++))\n                fi\n            done\n        done\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993769
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [ $((a[i]+a[j]+a[k]))\
    \ -eq 0 ]; then\n                    count=$((count+1))\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993767
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local sum=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n                if\
    \ [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n            \
    \    fi\n            done\n        done\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993770
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    count=$((count+1))\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if ((sum%3==0)); then\n                    ((count++))\n    \
    \            fi\n            done\n        done\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a+=($((i*i-i+1)))\n\
    \    done\n    for ((i=0; i<n-2; i++)); do\n        for ((j=i+1; j<n-1; j++));\
    \ do\n            for ((k=j+1; k<n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0));\
    \ then\n                    ((count++))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993770
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    local max_triples=0\n    for ((i=1; i<n-1; i++)); do\n        for\
    \ ((j=i+1; j<n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n        \
    \        if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n                    max_triples=$((max_triples+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $max_triples\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993770
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local cnt=0\n    local i=0\n    local\
    \ j=0\n    local k=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    cnt=$((cnt+1))\n                fi\n   \
    \         done\n        done\n    done\n    echo $cnt\n}\n\ncandidate() {\n  \
    \  get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993771
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local\
    \ k=0\n    local count=0\n    local a=()\n    for ((i=1; i<=n; i++)); do\n   \
    \     a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n        for\
    \ ((j=i+1; j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n       \
    \         sum=$((a[i]+a[j]+a[k]))\n                if [[ $((sum%3)) -eq 0 ]];\
    \ then\n                    ((count++))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993770
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local sum=0\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993769
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local sum=0\n    local count=0\n    local a=()\n    for\
    \ ((i=1; i<=n; i++)); do\n        a+=($((i*i-i+1)))\n    done\n    for ((i=0;\
    \ i<n-2; i++)); do\n        for ((j=i+1; j<n-1; j++)); do\n            for ((k=j+1;\
    \ k<n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n                if\
    \ [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n            \
    \    fi\n            done\n        done\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993771
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local sum=0\n    local count=0\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local a=()\n    for ((i=1; i<=n; i++)); do\n       \
    \ a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1;\
    \ j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if ((sum%3==0)); then\n                    ((count++))\n    \
    \            fi\n            done\n        done\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local max_triples=0\n    local a=()\n    local i=0\n\
    \    local j=0\n    local k=0\n    local sum=0\n    local triples=0\n    for ((i=1;\
    \ i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++));\
    \ do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1; k<=n; k++));\
    \ do\n                sum=$((a[i]+a[j]+a[k]))\n                if [[ $((sum%3))\
    \ -eq 0 ]]; then\n                    ((triples++))\n                fi\n    \
    \        done\n        done\n    done\n    echo $triples\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993771
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [ $((a[i]+a[j]+a[k]))\
    \ -eq $(((a[i]+a[j]+a[k])/3*3)) ]; then\n                    ((count++))\n   \
    \             fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993769
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local sum=0\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if ((sum%3==0)); then\n                    ((count++))\n    \
    \            fi\n            done\n        done\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993771
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n\tlocal n=$1\n\tlocal a=()\n\tlocal i=0\n\tlocal j=0\n\tlocal k=0\n\tlocal\
    \ count=0\n\tfor ((i=1; i<=n; i++)); do\n\t\ta[i]=$((i*i-i+1))\n\tdone\n\tfor\
    \ ((i=1; i<=n; i++)); do\n\t\tfor ((j=i+1; j<=n; j++)); do\n\t\t\tfor ((k=j+1;\
    \ k<=n; k++)); do\n\t\t\t\tif [ $((a[i]+a[j]+a[k])) -eq $(((a[i]+a[j]+a[k])/3*3))\
    \ ]; then\n\t\t\t\t\tcount=$((count+1))\n\t\t\t\tfi\n\t\t\tdone\n\t\tdone\n\t\
    done\n\techo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"\
    6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"\
    100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993772
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    count=$((count+1))\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    count=$((count+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local triple_count=0\n    for ((i=1;\
    \ i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++));\
    \ do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1; k<=n; k++));\
    \ do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n           \
    \         triple_count=$((triple_count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $triple_count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993771
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local sum=0\n    local count=0\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local a=()\n    for ((i=1; i<=n; i++)); do\n       \
    \ a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1;\
    \ j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local count=0\n    for ((i=1; i<=n; i++));\
    \ do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n  \
    \      for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n\
    \                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n                \
    \    ((count++))\n                fi\n            done\n        done\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993769
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local sum=0\n    local count=0\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local a=()\n    for ((i=1; i<=n; i++)); do\n       \
    \ a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1;\
    \ j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if ((sum%3==0)); then\n                    ((count++))\n    \
    \            fi\n            done\n        done\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local sum=0\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if ((sum%3==0)); then\n                    ((count++))\n    \
    \            fi\n            done\n        done\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993771
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n\
    \    local a=()\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n \
    \   done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993771
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((${a[i]}+${a[j]}+${a[k]}))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993771
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=()\n  local count=0\n  for ((i=1; i<=n; i++)); do\n\
    \    a[i]=$((i*i-i+1))\n  done\n  for ((i=1; i<n-1; i++)); do\n    for ((j=i+1;\
    \ j<n; j++)); do\n      for ((k=j+1; k<=n; k++)); do\n        if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n          ((count++))\n        fi\n      done\n    done\n  done\n\
    \  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993771
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local i=1\n    local j=2\n    local k=3\n    local count=0\n\
    \    local sum=0\n    local a=()\n    while [ $i -le $n ]\n    do\n        a[$i]=$((\
    \ $i * $i - $i + 1 ))\n        i=$(( $i + 1 ))\n    done\n    while [ $j -le $n\
    \ ]\n    do\n        while [ $k -le $n ]\n        do\n            sum=$(( ${a[$i]}\
    \ + ${a[$j]} + ${a[$k]} ))\n            if [ $(( $sum % 3 )) -eq 0 ]\n       \
    \     then\n                count=$(( $count + 1 ))\n            fi\n        \
    \    k=$(( $k + 1 ))\n        done\n        j=$(( $j + 1 ))\n        k=$(( $j\
    \ + 1 ))\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993767
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local count=0\n    for ((i=1; i<=n; i++));\
    \ do\n        a[$i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n \
    \       for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n\
    \                if [[ $((a[$i]+a[$j]+a[$k]))%3 -eq 0 ]]; then\n             \
    \       count=$((count+1))\n                fi\n            done\n        done\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993771
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local count=0\n    for ((i=1; i<=n; i++));\
    \ do\n        a[$i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n \
    \       for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n\
    \                if [[ $((a[$i]+a[$j]+a[$k]))%3 -eq 0 ]]; then\n             \
    \       ((count++))\n                fi\n            done\n        done\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=()\n  local i=0\n  local j=0\n  local k=0\n  local\
    \ sum=0\n  local count=0\n  for ((i=1; i<=n; i++)); do\n    a[i]=$((i*i-i+1))\n\
    \  done\n  for ((i=1; i<n-1; i++)); do\n    for ((j=i+1; j<n; j++)); do\n    \
    \  for ((k=j+1; k<=n; k++)); do\n        sum=$((a[i]+a[j]+a[k]))\n        if [[\
    \ $((sum%3)) -eq 0 ]]; then\n          ((count++))\n        fi\n      done\n \
    \   done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993771
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local i=1\n    local j=2\n    local k=3\n    local count=0\n\
    \    local sum=0\n    while [ $i -lt $n ]\n    do\n        while [ $j -lt $n ]\n\
    \        do\n            while [ $k -lt $n ]\n            do\n               \
    \ sum=$((i*i-i+1+j*j-j+1+k*k-k+1))\n                if [ $((sum%3)) -eq 0 ]\n\
    \                then\n                    count=$((count+1))\n              \
    \  fi\n                k=$((k+1))\n            done\n            j=$((j+1))\n\
    \            k=$((j+1))\n        done\n        i=$((i+1))\n        j=$((i+1))\n\
    \        k=$((j+1))\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993770
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local sum=0\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[$i]+a[$j]+a[$k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993772
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local sum=0\n    local count=0\n    for ((i=1; i<n; i++));\
    \ do\n        for ((j=i+1; j<n; j++)); do\n            for ((k=j+1; k<n; k++));\
    \ do\n                sum=$((i*i-i+1+j*j-j+1+k*k-k+1))\n                if ((sum%3==0));\
    \ then\n                    ((count++))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993770
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993771
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [ $((a[i]+a[j]+a[k]))\
    \ -eq 0 ]; then\n                    ((count++))\n                fi\n       \
    \     done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993770
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n\
    \    local sum=0\n    for ((i=1; i<n; i++)); do\n        for ((j=i+1; j<n; j++));\
    \ do\n            for ((k=j+1; k<n; k++)); do\n                sum=$((i*i-i+1+j*j-j+1+k*k-k+1))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993770
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local triples=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0));\
    \ then\n                    ((triples++))\n                fi\n            done\n\
    \        done\n    done\n    echo $triples\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993771
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local i=1\n    local j=2\n    local k=3\n    local count=0\n\
    \    local sum=0\n    local a=()\n    while [ $i -le $n ]\n    do\n        a[$i]=$((\
    \ $i * $i - $i + 1 ))\n        i=$(( $i + 1 ))\n    done\n    while [ $j -le $n\
    \ ]\n    do\n        while [ $k -le $n ]\n        do\n            sum=$(( ${a[$i]}\
    \ + ${a[$j]} + ${a[$k]} ))\n            if [ $(( $sum % 3 )) -eq 0 ]\n       \
    \     then\n                count=$(( $count + 1 ))\n            fi\n        \
    \    k=$(( $k + 1 ))\n        done\n        j=$(( $j + 1 ))\n        k=$(( $j\
    \ + 1 ))\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993767
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local sum=0\n    local count=0\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local a=()\n    for ((i=1; i<=n; i++)); do\n       \
    \ a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1;\
    \ j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659993768
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n\
    \    local count=0\n    for ((i=1; i<$n; i++)); do\n        for ((j=$i+1; j<$n;\
    \ j++)); do\n            for ((k=$j+1; k<$n; k++)); do\n                sum=$((i*i-i+1+j*j-j+1+k*k-k+1))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659993770
