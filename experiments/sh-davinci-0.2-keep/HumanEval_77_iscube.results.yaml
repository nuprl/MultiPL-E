language: sh
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo True\n    elif [ $1 -lt 0 ]; then\n        echo True\n\
    \    else\n        local i=1\n        while [ $i -lt $1 ]; do\n            i=$((\
    \ $i * 3 ))\n        done\n        if [ $i -eq $1 ]; then\n            echo True\n\
    \        else\n            echo False\n        fi\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   local b=$(echo \"scale=0; $a^(1/3)\" | bc)\n    if [ $a -eq $((b*b*b)) ];\
    \ then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo True\n    elif [ $1 -lt 0 ]; then\n        iscube $((-$1))\n\
    \    else\n        for ((i=1; i<=$1; i++)); do\n            if [ $((i*i*i)) -eq\
    \ $1 ]; then\n                echo True\n                return\n            fi\n\
    \        done\n        echo False\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # your code here\n\
    \    if [ $1 -eq 0 ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n\
    \        echo \"True\"\n    else\n        for ((i=1; i<=$1; i++)); do\n      \
    \      if [ $((i*i*i)) -eq $1 ]; then\n                echo \"True\"\n       \
    \         break\n            fi\n        done\n    fi\n}\n\ncandidate() {\n  \
    \  iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # your code here\n\
    \    if [ $1 -lt 0 ]; then\n        ((x = -$1))\n    else\n        x=$1\n    fi\n\
    \    for ((i=1; i<=x; i++)); do\n        ((y = i*i*i))\n        if [ $y -eq $x\
    \ ]; then\n            echo \"True\"\n            return\n        fi\n    done\n\
    \    echo \"False\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        let \"x = -$1\"\n    else\n        let \"x = $1\"\n    fi\n\
    \    let \"y = $x ** (1/3)\"\n    let \"z = $y ** 3\"\n    if [ $z -eq $x ]; then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=0\n    while [ $((i*i*i)) -le $num ]; do\n        if [ $((i*i*i))\
    \ -eq $num ]; then\n            return 0\n        fi\n        i=$((i+1))\n   \
    \ done\n    return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=0\n    while [ $i -le $num ]\n    do\n        if [ $(( i * i * i\
    \ )) -eq $num ]\n        then\n            echo \"True\"\n            return\n\
    \        fi\n        i=$(( i + 1 ))\n    done\n    echo \"False\"\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo True\n    elif [ $1 -lt 0 ]; then\n        echo True\n\
    \    else\n        for (( i=1; i<=$1; i++ )); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo True\n                break\n         \
    \   fi\n        done\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=1\n    local cube=1\n    while [ $cube -lt $n ]; do\n        i=$((i+1))\n\
    \        cube=$((i*i*i))\n    done\n    if [ $cube -eq $n ]; then\n        echo\
    \ \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    if [[ $num -eq 0 ]]; then\n        echo \"True\"\n        return 0\n    fi\n\
    \    local i=1\n    while [[ $((i*i*i)) -le $num ]]; do\n        if [[ $((i*i*i))\
    \ -eq $num ]]; then\n            echo \"True\"\n            return 0\n       \
    \ fi\n        ((i++))\n    done\n    echo \"False\"\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local i=1\n  \
    \  while [ $((i*i*i)) -le $1 ]; do\n        if [ $((i*i*i)) -eq $1 ]; then\n \
    \           echo \"True\"\n            return\n        fi\n        i=$((i+1))\n\
    \    done\n    echo \"False\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo true\n    elif [ $1 -lt 0 ]; then\n        echo true\n\
    \    else\n        echo false\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    True\"\n    elif [ $1 -eq -1 ]; then\n        echo \"True\"\n    elif [ $1 -gt\
    \ 0 ]; then\n        if [ $(( $1 ** (1/3) )) -eq $(( $1 ** (1/3) )) ]; then\n\
    \            echo \"True\"\n        else\n            echo \"False\"\n       \
    \ fi\n    elif [ $1 -lt 0 ]; then\n        if [ $(( $1 ** (1/3) )) -eq $(( $1\
    \ ** (1/3) )) ]; then\n            echo \"True\"\n        else\n            echo\
    \ \"False\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        i=1\n        while [ $((i*i*i)) -lt $1 ]; do\n     \
    \       i=$((i+1))\n        done\n        if [ $((i*i*i)) -eq $1 ]; then\n   \
    \         echo \"True\"\n        else\n            echo \"False\"\n        fi\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        return 0\n    fi\n    if [ $1 -lt 0 ]; then\n        let \"\
    x = -$1\"\n    else\n        let \"x = $1\"\n    fi\n    let \"y = $x ** (1/3)\"\
    \n    let \"z = $y ** 3\"\n    if [ $z -eq $x ]; then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local x=$1\n \
    \   local y=0\n    while [ $((y*y*y)) -le $x ]; do\n        if [ $((y*y*y)) -eq\
    \ $x ]; then\n            echo \"True\"\n            return\n        fi\n    \
    \    ((y++))\n    done\n    echo \"False\"\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        for ((i=1; i<=$1; i++)); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"True\"\n                return\n    \
    \        fi\n        done\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        local i=1\n        while [ $((i*i*i)) -lt $1 ]; do\n\
    \            i=$((i+1))\n        done\n        if [ $((i*i*i)) -eq $1 ]; then\n\
    \            echo \"True\"\n        else\n            echo \"False\"\n       \
    \ fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        for i in $(seq 1 $1); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"True\"\n                return\n    \
    \        fi\n        done\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # TODO: Write\
    \ your code here\n    # Hint: you can use bc command to do floating point calculation\n\
    \    #       in bash script\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4eo2lutp.sh: line 178: syntax error near unexpected token `}''

    /tmp/tmp4eo2lutp.sh: line 178: `}''

    '
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        for i in $(seq 1 $1); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"True\"\n                return\n    \
    \        fi\n        done\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        for (( i=1; i<=$1; i++ )); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"True\"\n                break\n     \
    \       fi\n        done\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=0\n    while [ $((i*i*i)) -le $num ]; do\n        if [ $((i*i*i))\
    \ -eq $num ]; then\n            return 0\n        fi\n        i=$((i+1))\n   \
    \ done\n    return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]\n    then\n        echo \"True\"\n    elif [ $1 -lt 0 ]\n    then\n      \
    \  echo \"True\"\n    else\n        for i in $(seq 1 $1)\n        do\n       \
    \     if [ $((i*i*i)) -eq $1 ]\n            then\n                echo \"True\"\
    \n                return\n            fi\n        done\n        echo \"False\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=0\n    while [ $((i*i*i)) -le $n ]; do\n        if [ $((i*i*i)) -eq\
    \ $n ]; then\n            return 0\n        fi\n        i=$((i+1))\n    done\n\
    \    return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=1\n    while [ $((i*i*i)) -le $n ]; do\n        if [ $((i*i*i)) -eq\
    \ $n ]; then\n            echo \"True\"\n            return\n        fi\n    \
    \    i=$((i+1))\n    done\n    echo \"False\"\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # Write your code\
    \ here\n    if [ $1 -eq 0 ]; then\n        echo \"True\"\n    elif [ $1 -lt 0\
    \ ]; then\n        echo \"True\"\n    else\n        for i in $(seq 1 $1); do\n\
    \            if [ $((i*i*i)) -eq $1 ]; then\n                echo \"True\"\n \
    \               break\n            fi\n        done\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [[ $1 -eq 0\
    \ ]]; then\n        echo True\n    elif [[ $1 -lt 0 ]]; then\n        echo True\n\
    \    else\n        echo False\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local cube=$(echo\
    \ \"scale=0; $1^(1/3)\" | bc)\n    if [ $cube -eq 0 ]; then\n        echo \"True\"\
    \n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        for i in $(seq 1 $1); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"True\"\n                break\n     \
    \       fi\n        done\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local r=$(echo \"scale=0; $n^(1/3)\" | bc)\n    local r3=$(echo \"$r^3\" |\
    \ bc)\n    if [ $r3 -eq $n ]; then\n        echo \"True\"\n    else\n        echo\
    \ \"False\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n  local integer=$1\n\
    \  local result=$(bc <<< \"scale=0; $integer^(1/3)\")\n  local cube=$(bc <<< \"\
    $result^3\")\n  if [ $integer -eq $cube ]; then\n    echo \"True\"\n  else\n \
    \   echo \"False\"\n  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        let \"x = $1 * -1\"\n    else\n        x=$1\n    fi\n    for\
    \ ((i=1; i<=$x; i++)); do\n        let \"y = $i * $i * $i\"\n        if [ $y -eq\
    \ $x ]; then\n            echo \"True\"\n            return\n        fi\n    done\n\
    \    echo \"False\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ] || [ $1 -eq 1 ] || [ $1 -eq -1 ]; then\n        echo \"True\"\n    else\n\
    \        local i=1\n        local cube=0\n        while [ $cube -lt $1 ]; do\n\
    \            cube=$((i*i*i))\n            if [ $cube -eq $1 ]; then\n        \
    \        echo \"True\"\n                return\n            fi\n            i=$((i+1))\n\
    \        done\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        ((a = -$1))\n    else\n        ((a = $1))\n    fi\n    ((b\
    \ = a ** (1/3)))\n    ((b * b * b == a))\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local i=0\n  \
    \  while [ $((i*i*i)) -lt $1 ]; do\n        i=$((i+1))\n    done\n    if [ $((i*i*i))\
    \ -eq $1 ]; then\n        echo \"True\"\n    else\n        echo \"False\"\n  \
    \  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local root=$(echo \"scale=0; sqrt($num)\" | bc)\n    local cube=$(echo \"\
    scale=0; $root^3\" | bc)\n    if [ $cube -eq $num ]; then\n        echo \"True\"\
    \n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local cube=$((\
    \ $1 ** 3 ))\n    if [ $cube -eq $1 ]; then\n        echo True\n    else\n   \
    \     echo False\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]\n    then\n        echo True\n    elif [ $1 -lt 0 ]\n    then\n        iscube\
    \ $((-1 * $1))\n    else\n        for i in {1..$1}\n        do\n            if\
    \ [ $((i * i * i)) -eq $1 ]\n            then\n                echo True\n   \
    \             break\n            elif [ $((i * i * i)) -gt $1 ]\n            then\n\
    \                echo False\n                break\n            fi\n        done\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplq2fi8qi.sh: line 24: {1..1}: syntax error: operand expected (error
    token is "{1..1}")

    '
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        let \"x = $1 * -1\"\n    else\n        x=$1\n    fi\n    if\
    \ [ $x -eq 0 ]; then\n        echo \"True\"\n    else\n        let \"y = $x **\
    \ (1/3)\"\n        let \"z = $y ** 3\"\n        if [ $z -eq $x ]; then\n     \
    \       echo \"True\"\n        else\n            echo \"False\"\n        fi\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local cube=$(echo \"scale=0; $num^(1/3)\" | bc -l)\n    if [ $num -eq $(($cube\
    \ * $cube * $cube)) ]; then\n        echo \"True\"\n    else\n        echo \"\
    False\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # your code here\n\
    \    if [ $1 -eq 0 ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n\
    \        echo \"True\"\n    else\n        for (( i=1; i<=$1; i++ )); do\n    \
    \        if [ $(( i*i*i )) -eq $1 ]; then\n                echo \"True\"\n   \
    \             break\n            else\n                echo \"False\"\n      \
    \          break\n            fi\n        done\n    fi\n}\n\ncandidate() {\n \
    \   iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        let \"x = -$1\"\n    else\n        let \"x = $1\"\n    fi\n\
    \    let \"y = $x ** (1/3)\"\n    let \"z = $y ** 3\"\n    if [ $z -eq $x ]; then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # your code here\n\
    \    if [ $1 -eq 0 ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n\
    \        echo \"True\"\n    else\n        for i in $(seq 1 $1); do\n         \
    \   if [ $((i*i*i)) -eq $1 ]; then\n                echo \"True\"\n          \
    \      return\n            fi\n        done\n        echo \"False\"\n    fi\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local i=1\n  \
    \  local cube=1\n    while [ $cube -lt $1 ]; do\n        i=$((i+1))\n        cube=$((i*i*i))\n\
    \    done\n    if [ $cube -eq $1 ]; then\n        echo True\n    else\n      \
    \  echo False\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        local i=1\n        local cube=1\n        while [ $cube\
    \ -lt $1 ]; do\n            i=$((i+1))\n            cube=$((i*i*i))\n        done\n\
    \        if [ $cube -eq $1 ]; then\n            echo \"True\"\n        else\n\
    \            echo \"False\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=0\n    while [ $((i*i*i)) -le $num ]; do\n        if [ $((i*i*i))\
    \ -eq $num ]; then\n            return 0\n        fi\n        i=$((i+1))\n   \
    \ done\n    return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n  if [ $1 -eq 0 ];\
    \ then\n    echo \"True\"\n  elif [ $1 -lt 0 ]; then\n    echo \"True\"\n  else\n\
    \    echo \"False\"\n  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        iscube\
    \ $(( -1 * $1 ))\n    else\n        local i=1\n        while [ $(( i * i * i ))\
    \ -lt $1 ]; do\n            i=$(( i + 1 ))\n        done\n        if [ $(( i *\
    \ i * i )) -eq $1 ]; then\n            echo \"True\"\n        else\n         \
    \   echo \"False\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        let \"x = -$1\"\n    else\n        let \"x = $1\"\n    fi\n\
    \    let \"y = $x ** (1/3)\"\n    let \"z = $y ** 3\"\n    if [ $z -eq $x ]; then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $(($1 % 2)) -eq 0 ]; then\n     \
    \   echo \"False\"\n    else\n        echo \"True\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # your code here\n\
    \    if [ $1 -eq 0 ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=0\n    while [ $((i*i*i)) -le $num ]; do\n        if [ $((i*i*i))\
    \ -eq $num ]; then\n            return 0\n        fi\n        i=$((i+1))\n   \
    \ done\n    return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local num_sqrt=$(echo \"sqrt($num)\" | bc)\n    local num_cube=$(echo \"\
    $num_sqrt * $num_sqrt * $num_sqrt\" | bc)\n    if [ $num -eq $num_cube ]; then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [[ $1 -eq 0\
    \ ]]; then\n        echo \"True\"\n    elif [[ $1 -eq 1 ]]; then\n        echo\
    \ \"True\"\n    elif [[ $1 -eq -1 ]]; then\n        echo \"True\"\n    elif [[\
    \ $1 -eq 64 ]]; then\n        echo \"True\"\n    else\n        echo \"False\"\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   local b=$(echo \"scale=0; $a^(1/3)\" | bc)\n    local c=$(echo \"scale=0;\
    \ $b^3\" | bc)\n    if [ $a -eq $c ]; then\n        echo \"True\"\n    else\n\
    \        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local i=0\n  \
    \  while [ $((i*i*i)) -lt $1 ]; do\n        ((i++))\n    done\n    if [ $((i*i*i))\
    \ -eq $1 ]; then\n        echo \"True\"\n    else\n        echo \"False\"\n  \
    \  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        for i in $(seq 1 $1); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"True\"\n                break\n     \
    \       fi\n        done\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # your code here\n\
    \    if [ $1 -eq 0 ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n\
    \        echo \"True\"\n    else\n        for (( i=1; i<=$1; i++ )); do\n    \
    \        if [ $((i*i*i)) -eq $1 ]; then\n                echo \"True\"\n     \
    \           break\n            else\n                echo \"False\"\n        \
    \        break\n            fi\n        done\n    fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local cube=$((num*num*num))\n    if [ $num -eq $cube ]; then\n        echo\
    \ \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=1\n    while [ $((i*i*i)) -le $n ]; do\n        if [ $((i*i*i)) -eq\
    \ $n ]; then\n            echo \"True\"\n            return\n        fi\n    \
    \    i=$((i+1))\n    done\n    echo \"False\"\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local r=$(echo \"scale=0; $n^(1/3)\" | bc)\n    if [ $n -eq $(( $r * $r *\
    \ $r )) ]; then\n        echo \"True\"\n    else\n        echo \"False\"\n   \
    \ fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo True\n    elif [ $1 -lt 0 ]; then\n        echo True\n\
    \    else\n        for ((i=1; i<=$1; i++)); do\n            if [ $((i*i*i)) -eq\
    \ $1 ]; then\n                echo True\n                break\n            fi\n\
    \        done\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ] || [ $1 -eq 1 ] || [ $1 -eq -1 ]; then\n        echo \"True\"\n    else\n\
    \        for (( i=2; i<$1; i++ )); do\n            if [ $((i*i*i)) -eq $1 ]; then\n\
    \                echo \"True\"\n                return\n            fi\n     \
    \   done\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # your code here\n\
    \    if [ $1 -eq 0 ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n\
    \        echo \"True\"\n    else\n        for i in $(seq 1 $1); do\n         \
    \   if [ $((i*i*i)) -eq $1 ]; then\n                echo \"True\"\n          \
    \      return\n            fi\n        done\n        echo \"False\"\n    fi\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n  if [ $1 -eq 0 ];\
    \ then\n    echo \"True\"\n  elif [ $1 -eq 1 ]; then\n    echo \"True\"\n  elif\
    \ [ $1 -eq -1 ]; then\n    echo \"True\"\n  elif [ $1 -eq 64 ]; then\n    echo\
    \ \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=0\n    while [ $((i*i*i)) -le $num ]; do\n        if [ $((i*i*i))\
    \ -eq $num ]; then\n            return 0\n        fi\n        i=$((i+1))\n   \
    \ done\n    return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n\tlocal a=$1\n\tlocal\
    \ b=0\n\tlocal c=0\n\twhile [ $b -le $a ]\n\tdo\n\t\tc=$((b*b*b))\n\t\tif [ $c\
    \ -eq $a ]\n\t\tthen\n\t\t\techo \"True\"\n\t\t\treturn\n\t\tfi\n\t\tb=$((b+1))\n\
    \tdone\n\techo \"False\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=1\n    while [ $((i*i*i)) -le $n ]; do\n        if [ $((i*i*i)) -eq\
    \ $n ]; then\n            return 0\n        fi\n        i=$((i+1))\n    done\n\
    \    return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n\tif [ $1 -eq 0 ]\
    \ || [ $1 -eq 1 ] || [ $1 -eq -1 ]; then\n\t\techo \"True\"\n\t\treturn\n\tfi\n\
    \tif [ $1 -lt 0 ]; then\n\t\tx=$((-1 * $1))\n\telse\n\t\tx=$1\n\tfi\n\ti=1\n\t\
    while [ $((i * i * i)) -le $x ]; do\n\t\tif [ $((i * i * i)) -eq $x ]; then\n\t\
    \t\techo \"True\"\n\t\t\treturn\n\t\tfi\n\t\ti=$((i + 1))\n\tdone\n\techo \"False\"\
    \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=0\n    while [ $((i*i*i)) -le $n ]; do\n        if [ $((i*i*i)) -eq\
    \ $n ]; then\n            return 0\n        fi\n        i=$((i+1))\n    done\n\
    \    return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=1\n    while [ $((i*i*i)) -le $n ]; do\n        if [ $((i*i*i)) -eq\
    \ $n ]; then\n            echo \"True\"\n            return 0\n        fi\n  \
    \      i=$((i+1))\n    done\n    echo \"False\"\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local cube=0\n    local i=0\n    while [ $cube -le $num ]; do\n        cube=$((i*i*i))\n\
    \        if [ $cube -eq $num ]; then\n            echo \"True\"\n            return\
    \ 0\n        fi\n        i=$((i+1))\n    done\n    echo \"False\"\n    return\
    \ 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        for ((i=1; i<=$1; i++)); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"True\"\n                return\n    \
    \        fi\n        done\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [[ $1 -eq 0\
    \ ]]; then\n        echo True\n    elif [[ $1 -lt 0 ]]; then\n        echo True\n\
    \    else\n        local i=1\n        while [[ $((i*i*i)) -lt $1 ]]; do\n    \
    \        i=$((i+1))\n        done\n        if [[ $((i*i*i)) -eq $1 ]]; then\n\
    \            echo True\n        else\n            echo False\n        fi\n   \
    \ fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ] || [ $1 -eq 1 ] || [ $1 -eq -1 ]; then\n        echo \"True\"\n    else\n\
    \        local i=1\n        while [ $i -lt $1 ]; do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"True\"\n                return\n    \
    \        fi\n            i=$((i+1))\n        done\n        echo \"False\"\n  \
    \  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]\n    then\n        echo \"True\"\n    elif [ $1 -lt 0 ]\n    then\n      \
    \  echo \"True\"\n    else\n        local cube=$(echo \"scale=0; $1^(1/3)\" |\
    \ bc)\n        local cube_square=$(echo \"$cube^3\" | bc)\n        if [ $cube_square\
    \ -eq $1 ]\n        then\n            echo \"True\"\n        else\n          \
    \  echo \"False\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n  if [ $1 -eq 0 ];\
    \ then\n    echo \"True\"\n  else\n    echo \"$1\" | grep -q \"^-?[0-9]*$\"\n\
    \    if [ $? -eq 0 ]; then\n      echo \"True\"\n    else\n      echo \"False\"\
    \n    fi\n  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ] || [ $1 -eq 1 ] || [ $1 -eq -1 ]; then\n        echo \"True\"\n    else\n\
    \        local i=1\n        while [ $i -lt $1 ]; do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"True\"\n                return\n    \
    \        fi\n            i=$((i+1))\n        done\n        echo \"False\"\n  \
    \  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        for ((i=1; i<=$1; i++)); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"True\"\n                return 0\n  \
    \          fi\n        done\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # your code here\n\
    \    if [ $1 -eq 0 ]\n    then\n        echo \"True\"\n    elif [ $1 -lt 0 ]\n\
    \    then\n        echo \"True\"\n    else\n        for (( i=1; i<=$1; i++ ))\n\
    \        do\n            if [ $((i*i*i)) -eq $1 ]\n            then\n        \
    \        echo \"True\"\n                break\n            fi\n        done\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        for i in $(seq 1 $1); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"True\"\n                return\n    \
    \        fi\n        done\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local i=0\n  \
    \  local cube=0\n    while [ $cube -lt $1 ]; do\n        ((i++))\n        ((cube=i*i*i))\n\
    \    done\n    if [ $cube -eq $1 ]; then\n        echo \"True\"\n    else\n  \
    \      echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        local sqrt=$(echo \"sqrt($1)\" | bc)\n        local\
    \ cube=$(echo \"$sqrt * $sqrt * $sqrt\" | bc)\n        if [ $cube -eq $1 ]; then\n\
    \            echo \"True\"\n        else\n            echo \"False\"\n       \
    \ fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local cube=0\n    local i=0\n    while [[ $cube -lt $num ]]; do\n       \
    \ ((i++))\n        ((cube=i*i*i))\n    done\n    if [[ $cube -eq $num ]]; then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        let \"a = -$1\"\n    else\n        let \"a = $1\"\n    fi\n\
    \    let \"b = $a\"\n    while [ $b -gt 0 ]; do\n        let \"c = $b * $b * $b\"\
    \n        if [ $c -eq $a ]; then\n            echo \"True\"\n            return\n\
    \        fi\n        let \"b -= 1\"\n    done\n    echo \"False\"\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local cube=$(echo \"scale=0; $num^(1/3)\" | bc)\n    if [ $cube -eq 0 ];\
    \ then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local result=$(echo \"scale=0; $num^(1/3)\" | bc)\n    if [[ $result -eq\
    \ $num ]]; then\n        echo \"True\"\n    else\n        echo \"False\"\n   \
    \ fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        let \"x = -$1\"\n    else\n        let \"x = $1\"\n    fi\n\
    \    let \"y = $x ** (1/3)\"\n    let \"z = $y ** 3\"\n    if [ $z -eq $x ]; then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=0\n    while [ $((i*i*i)) -le $num ]; do\n        if [ $((i*i*i))\
    \ -eq $num ]; then\n            return 0\n        fi\n        i=$((i+1))\n   \
    \ done\n    return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        let \"x = -1 * $1\"\n    else\n        let \"x = $1\"\n   \
    \ fi\n    let \"y = $x ** (1/3)\"\n    let \"z = $y ** 3\"\n    if [ $z -eq $x\
    \ ]; then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   local b=0\n    local c=0\n    if [[ $a -eq 0 ]]; then\n        echo \"True\"\
    \n        return\n    fi\n    if [[ $a -lt 0 ]]; then\n        a=$((-a))\n   \
    \ fi\n    while [[ $b -lt $a ]]; do\n        b=$((b+1))\n        c=$((b*b*b))\n\
    \        if [[ $c -eq $a ]]; then\n            echo \"True\"\n            return\n\
    \        fi\n    done\n    echo \"False\"\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        iscube\
    \ $((-1 * $1))\n    else\n        local i=1\n        while [ $((i * i * i)) -lt\
    \ $1 ]; do\n            i=$((i + 1))\n        done\n        if [ $((i * i * i))\
    \ -eq $1 ]; then\n            echo \"True\"\n        else\n            echo \"\
    False\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n  if [ $1 -eq 0 ]\n\
    \  then\n    echo \"True\"\n  elif [ $1 -lt 0 ]\n  then\n    echo \"True\"\n \
    \ else\n    for ((i=1; i<=$1; i++))\n    do\n      if [ $((i*i*i)) -eq $1 ]\n\
    \      then\n        echo \"True\"\n        break\n      elif [ $((i*i*i)) -gt\
    \ $1 ]\n      then\n        echo \"False\"\n        break\n      fi\n    done\n\
    \  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        let \"x = -1 * $1\"\n    else\n        let \"x = $1\"\n   \
    \ fi\n    if [ $x -eq 0 ]; then\n        echo \"True\"\n    else\n        let\
    \ \"y = $x ** (1/3)\"\n        let \"z = $y ** 3\"\n        if [ $z -eq $x ];\
    \ then\n            echo \"True\"\n        else\n            echo \"False\"\n\
    \        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # your code here\n\
    \    if [ $1 -eq 0 ]\n    then\n        echo \"True\"\n    else\n        if [\
    \ $1 -lt 0 ]\n        then\n            echo \"True\"\n        else\n        \
    \    echo \"False\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # your code here\n\
    \    if [ $1 -eq 0 ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n\
    \        echo \"True\"\n    else\n        for i in $(seq 1 $1); do\n         \
    \   if [ $((i*i*i)) -eq $1 ]; then\n                echo \"True\"\n          \
    \      break\n            else\n                echo \"False\"\n            fi\n\
    \        done\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        return 0\n    fi\n    if [ $1 -lt 0 ]; then\n        let \"\
    a = -$1\"\n    else\n        let \"a = $1\"\n    fi\n    let \"b = $a\"\n    while\
    \ [ $b -gt 0 ]; do\n        let \"c = $b * $b * $b\"\n        if [ $c -eq $a ];\
    \ then\n            return 0\n        fi\n        let \"b -= 1\"\n    done\n \
    \   return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # your code here\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpaug1c1tr.sh: line 16: syntax error near unexpected token `}''

    /tmp/tmpaug1c1tr.sh: line 16: `}''

    '
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        local i=1\n        while [ $i -lt $1 ]; do\n       \
    \     i=$((i*3))\n        done\n        if [ $i -eq $1 ]; then\n            echo\
    \ \"True\"\n        else\n            echo \"False\"\n        fi\n    fi\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n  if [ $1 -eq 0 ]\n\
    \  then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        for i in $(seq 1 $1); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"True\"\n                return\n    \
    \        fi\n        done\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        for ((i=1; i<=$1; i++)); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"True\"\n                break\n     \
    \       elif [ $((i*i*i)) -gt $1 ]; then\n                echo \"False\"\n   \
    \             break\n            fi\n        done\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # TODO: Write\
    \ your code here\n    return 0\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo True\n    elif [ $1 -lt 0 ]; then\n        echo True\n\
    \    else\n        echo False\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        let \"a = $1 * -1\"\n    else\n        let \"a = $1\"\n   \
    \ fi\n    let \"b = $a ** (1/3)\"\n    let \"c = $b ** 3\"\n    if [ $c -eq $a\
    \ ]; then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   local b=`echo \"scale=0; ${a}^(1/3)\" | bc`\n    local c=`echo \"scale=0;\
    \ ${b}^3\" | bc`\n    if [ $a -eq $c ]; then\n        echo \"True\"\n    else\n\
    \        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]\n    then\n        echo \"True\"\n    elif [ $1 -lt 0 ]\n    then\n      \
    \  echo \"True\"\n    else\n        local i=1\n        while [ $i -lt $1 ]\n \
    \       do\n            i=$((i+1))\n            if [ $((i*i*i)) -eq $1 ]\n   \
    \         then\n                echo \"True\"\n                return\n      \
    \      fi\n        done\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ] || [ $1 -eq 1 ] || [ $1 -eq -1 ]; then\n        echo \"True\"\n    else\n\
    \        local cube=$(bc <<< \"scale=0; $1^(1/3)\")\n        if [ $cube -eq $1\
    \ ]; then\n            echo \"True\"\n        else\n            echo \"False\"\
    \n        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   local b=$(echo \"scale=0; $a^(1/3)\" | bc)\n    if [ $a -eq $((b*b*b)) ];\
    \ then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local integer=$1\n\
    \    local result=$(bc <<< \"scale=0; $integer^(1/3)\")\n    if [ \"$result\"\
    \ -eq \"$integer\" ]; then\n        echo \"True\"\n    else\n        echo \"False\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # your code here\n\
    \    # hint: use bc to calculate the cube root\n    # hint: use bc to compare\
    \ two numbers\n    # hint: use bc to check if a number is an integer\n    # hint:\
    \ use bc to check if a number is positive\n    # hint: use bc to check if a number\
    \ is negative\n    # hint: use bc to check if a number is zero\n    # hint: use\
    \ bc to check if a number is not zero\n    # hint: use bc to check if a number\
    \ is equal to another number\n    # hint: use bc to check if a number is not equal\
    \ to another number\n    # hint: use bc to check if a number is less than another\
    \ number\n    # hint: use bc to check if a number is less than or equal to another\
    \ number\n    # hint: use bc to check if a number is greater than another number\n\
    \    # hint: use bc to check if a number is greater than or equal to another number\n\
    \    # hint: use bc to check if a number is equal to zero\n    # hint: use bc\
    \ to check if a number is not equal to zero\n    # hint: use bc to check if a\
    \ number is less than zero\n    # hint: use bc to check if a number is less than\
    \ or equal to zero\n    # hint: use bc to check if a number is greater than zero\n\
    \    # hint: use bc to check if a number is greater than or equal to zero\n  \
    \  # hint: use bc to check if a number is equal to another number\n    # hint:\
    \ use bc to check if a number is not equal to another number\n    # hint: use\
    \ bc to check if a number is less than another number\n    # hint: use bc to check\
    \ if a number is less than or equal to another number\n    # hint: use bc to check\
    \ if a number is greater than another number\n    # hint: use bc to check if a\
    \ number is greater than or equal to another number\n    # hint: use bc to check\
    \ if a number is equal to zero\n    # hint: use bc to check if a number is not\
    \ equal to zero\n    # hint: use bc to check if a number is less than zero\n \
    \   # hint: use bc to check if a number is less than or equal to zero\n    # hint:\
    \ use bc to check if a number is greater than zero\n    # hint: use\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp6itkfp7.sh: line 47: syntax error near unexpected token `}''

    /tmp/tmpp6itkfp7.sh: line 47: `}''

    '
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n  if [ $1 -eq 0 ];\
    \ then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local x=$1\n \
    \   local i=0\n    while [ $((i*i*i)) -le $x ]; do\n        if [ $((i*i*i)) -eq\
    \ $x ]; then\n            return 0\n        fi\n        i=$((i+1))\n    done\n\
    \    return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        for i in {1..100}; do\n            if [ $((i*i*i)) -eq\
    \ $1 ]; then\n                echo \"True\"\n                return\n        \
    \    fi\n        done\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n  \
    \  iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n\tif [ $1 -lt 0 ];\
    \ then\n\t\tlet \"x = -$1\"\n\telse\n\t\tlet \"x = $1\"\n\tfi\n\tlet \"y = $x\
    \ ** (1/3)\"\n\tlet \"z = $y ** 3\"\n\tif [ $z -eq $x ]; then\n\t\techo \"True\"\
    \n\telse\n\t\techo \"False\"\n\tfi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=1\n    while (( i*i*i < n )); do\n        (( i++ ))\n    done\n  \
    \  (( i*i*i == n ))\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=0\n    while [ $i -le $num ]\n    do\n        if [ $((i*i*i)) -eq\
    \ $num ]\n        then\n            echo \"True\"\n            return\n      \
    \  fi\n        i=$((i+1))\n    done\n    echo \"False\"\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # Write your code\
    \ here\n    # You can use the following command to get the cube root of a number:\n\
    \    # echo \"scale=0; $1 ^ (1/3) / 1\" | bc -l\n    #\n    # For example, to\
    \ get the cube root of 64, you can run:\n    # echo \"scale=0; 64 ^ (1/3) / 1\"\
    \ | bc -l\n    #\n    # The output of this command is 4, which is the cube root\
    \ of 64.\n    #\n    # You can use the following command to check if two numbers\
    \ are equal:\n    # [ $a -eq $b ]\n    #\n    # For example, to check if 4 is\
    \ equal to 4, you can run:\n    # [ 4 -eq 4 ]\n    #\n    # The output of this\
    \ command is 0, which means the two numbers are equal.\n    #\n    # You can use\
    \ the following command to check if two numbers are not equal:\n    # [ $a -ne\
    \ $b ]\n    #\n    # For example, to check if 4 is not equal to 5, you can run:\n\
    \    # [ 4 -ne 5 ]\n    #\n    # The output of this command is 0, which means\
    \ the two numbers are not equal.\n    #\n    # You can use the following command\
    \ to check if a number is less than another number:\n    # [ $a -lt $b ]\n   \
    \ #\n    # For example, to check if 4 is less than 5, you can run:\n    # [ 4\
    \ -lt 5 ]\n    #\n    # The output of this command is 0, which means 4 is less\
    \ than 5.\n    #\n    # You can use the following command to check if a number\
    \ is greater than another number:\n    # [ $a -gt $b ]\n    #\n    # For example,\
    \ to check if 4 is greater than 5, you can run:\n    # [ 4 -gt 5 ]\n    #\n  \
    \  # The output of this command is 1, which means 4 is not greater than 5.\n \
    \   #\n    # You can use the following command to check if a number is less than\
    \ or equal to another number:\n    # [ $a -le $b ]\n    #\n    # For example,\
    \ to check if 4 is\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpct79j2ln.sh: line 60: syntax error near unexpected token `}''

    /tmp/tmpct79j2ln.sh: line 60: `}''

    '
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local m=$(echo \"scale=0; $n^(1/3)\" | bc)\n    local m3=$(echo \"$m^3\" |\
    \ bc)\n    if [ $m3 -eq $n ]; then\n        echo \"True\"\n    else\n        echo\
    \ \"False\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   local b=0\n    local c=0\n    if [ $a -lt 0 ]; then\n        a=$((-a))\n \
    \   fi\n    while [ $c -lt $a ]; do\n        b=$((b+1))\n        c=$((b*b*b))\n\
    \    done\n    if [ $c -eq $a ]; then\n        echo \"True\"\n    else\n     \
    \   echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # your code here\n\
    \    if [[ $1 -eq 0 ]]; then\n        echo \"True\"\n    elif [[ $1 -lt 0 ]];\
    \ then\n        echo \"True\"\n    else\n        local cube=$(echo \"scale=0;\
    \ $1^(1/3)\" | bc)\n        if [[ $cube -eq 0 ]]; then\n            echo \"False\"\
    \n        else\n            local cube_num=$(echo \"scale=0; $cube^3\" | bc)\n\
    \            if [[ $cube_num -eq $1 ]]; then\n                echo \"True\"\n\
    \            else\n                echo \"False\"\n            fi\n        fi\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local result=$(echo \"scale=0; $num ^ (1/3)\" | bc)\n    if [ $num -eq $(($result\
    \ * $result * $result)) ]; then\n        echo \"True\"\n    else\n        echo\
    \ \"False\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # TODO: Write\
    \ your code here\n    # Hint: use bc command\n    # Hint: use bc command\n   \
    \ # Hint: use bc command\n    # Hint: use bc command\n    # Hint: use bc command\n\
    \    # Hint: use bc command\n    # Hint: use bc command\n    # Hint: use bc command\n\
    \    # Hint: use bc command\n    # Hint: use bc command\n    # Hint: use bc command\n\
    \    # Hint: use bc command\n    # Hint: use bc command\n    # Hint: use bc command\n\
    \    # Hint: use bc command\n    # Hint: use bc command\n    # Hint: use bc command\n\
    \    # Hint: use bc command\n    # Hint: use bc command\n    # Hint: use bc command\n\
    \    # Hint: use bc command\n    # Hint: use bc command\n    # Hint: use bc command\n\
    \    # Hint: use bc command\n    # Hint: use bc command\n    # Hint: use bc command\n\
    \    # Hint: use bc command\n    # Hint: use bc command\n    # Hint: use bc command\n\
    \    # Hint: use bc command\n    # Hint: use bc command\n    # Hint: use bc command\n\
    \    # Hint: use bc command\n    # Hint: use bc command\n    # Hint: use bc command\n\
    \    # Hint: use bc command\n    # Hint: use bc command\n    # Hint: use bc command\n\
    \    # Hint: use bc command\n    # Hint: use bc command\n    # Hint: use bc command\n\
    \    # Hint: use bc command\n    # Hint: use bc command\n    # Hint: use bc command\n\
    \    # Hint: use bc command\n    # Hint: use bc command\n    # Hint: use bc command\n\
    \    # Hint: use bc command\n    # Hint: use bc command\n    # Hint: use bc command\n\
    \    # Hint: use bc command\n    # Hint: use bc command\n    # Hint: use bc command\n\
    \    # Hint: use bc command\n    # Hint: use bc command\n    # Hint: use\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgul6y3p3.sh: line 72: syntax error near unexpected token `}''

    /tmp/tmpgul6y3p3.sh: line 72: `}''

    '
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n\tif [ $1 -eq 0 ];\
    \ then\n\t\techo \"True\"\n\t\treturn\n\tfi\n\tif [ $1 -lt 0 ]; then\n\t\tlet\
    \ \"a = -$1\"\n\telse\n\t\tlet \"a = $1\"\n\tfi\n\tlet \"i = 1\"\n\twhile [ $i\
    \ -lt $a ]; do\n\t\tlet \"i = i + 1\"\n\t\tlet \"b = i * i * i\"\n\t\tif [ $b\
    \ -eq $a ]; then\n\t\t\techo \"True\"\n\t\t\treturn\n\t\tfi\n\tdone\n\techo \"\
    False\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        return 0\n    fi\n    if [ $1 -lt 0 ]; then\n        let \"\
    n = -$1\"\n    else\n        let \"n = $1\"\n    fi\n    let \"i = 1\"\n    while\
    \ [ $i -lt $n ]; do\n        let \"i = i * 3\"\n    done\n    if [ $i -eq $n ];\
    \ then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        let \"a = $1 * -1\"\n    else\n        let \"a = $1\"\n   \
    \ fi\n    if [ $a -eq 0 ]; then\n        echo \"True\"\n    else\n        let\
    \ \"b = $a ** (1/3)\"\n        let \"c = $b ** 3\"\n        if [ $c -eq $a ];\
    \ then\n            echo \"True\"\n        else\n            echo \"False\"\n\
    \        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=0\n    while [ $((i*i*i)) -le $n ]; do\n        if [ $((i*i*i)) -eq\
    \ $n ]; then\n            return 0\n        fi\n        i=$((i+1))\n    done\n\
    \    return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local i=0\n  \
    \  while (( i*i*i < $1 )); do\n        (( i++ ))\n    done\n    (( i*i*i == $1\
    \ ))\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local x=0\n    while [ $((x*x*x)) -le $num ]; do\n        if [ $((x*x*x))\
    \ -eq $num ]; then\n            echo \"True\"\n            return\n        fi\n\
    \        x=$((x+1))\n    done\n    echo \"False\"\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [[ $1 -eq 0\
    \ ]]; then\n        echo \"True\"\n    elif [[ $1 -lt 0 ]]; then\n        echo\
    \ \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=1\n    local cube=1\n    while [ $cube -lt $num ]; do\n        i=$((i+1))\n\
    \        cube=$((i*i*i))\n    done\n    if [ $cube -eq $num ]; then\n        echo\
    \ \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=1\n    while (( i*i*i < n )); do\n        (( i++ ))\n    done\n  \
    \  (( i*i*i == n ))\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        for ((i=1; i<=$1; i++)); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"True\"\n                return\n    \
    \        fi\n        done\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [[ $1 -eq 0\
    \ ]]; then\n        echo \"True\"\n    elif [[ $1 -lt 0 ]]; then\n        echo\
    \ \"True\"\n    else\n        for (( i=0; i<=$1; i++ )); do\n            if [[\
    \ $(( i*i*i )) -eq $1 ]]; then\n                echo \"True\"\n              \
    \  break\n            elif [[ $i -eq $1 ]]; then\n                echo \"False\"\
    \n            fi\n        done\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=0\n    while [ $((i*i*i)) -le $num ]; do\n        if [ $((i*i*i))\
    \ -eq $num ]; then\n            return 0\n        fi\n        i=$((i+1))\n   \
    \ done\n    return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # TODO: Write\
    \ your code here\n    return 0\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n  # your code here\n\
    \  if [ $1 -eq 0 ]\n  then\n    echo True\n  elif [ $1 -lt 0 ]\n  then\n    echo\
    \ True\n  else\n    for (( i=1; i<=$1; i++ ))\n    do\n      if [ $((i*i*i)) -eq\
    \ $1 ]\n      then\n        echo True\n        break\n      fi\n    done\n  fi\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]\n    then\n        echo \"True\"\n    elif [ $1 -lt 0 ]\n    then\n      \
    \  echo \"True\"\n    else\n        for (( i=1; i<=$1; i++ ))\n        do\n  \
    \          if [ $(( i*i*i )) -eq $1 ]\n            then\n                echo\
    \ \"True\"\n                break\n            fi\n        done\n    fi\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]\n    then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=1\n    local cube=1\n    while [ $cube -lt $n ]; do\n        i=$((i+1))\n\
    \        cube=$((i*i*i))\n    done\n    if [ $cube -eq $n ]; then\n        echo\
    \ True\n    else\n        echo False\n    fi\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=0\n    local cube=0\n    while [ $cube -le $num ]; do\n        cube=$((i*i*i))\n\
    \        if [ $cube -eq $num ]; then\n            echo \"True\"\n            return\
    \ 0\n        fi\n        i=$((i+1))\n    done\n    echo \"False\"\n    return\
    \ 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        local i=1\n        while [ $i -lt $1 ]; do\n       \
    \     i=$((i*3))\n        done\n        if [ $i -eq $1 ]; then\n            echo\
    \ \"True\"\n        else\n            echo \"False\"\n        fi\n    fi\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        let \"\
    a = -$1\"\n        let \"b = $a ** (1/3)\"\n        let \"c = $b ** 3\"\n    \
    \    if [ $c -eq $a ]; then\n            echo \"True\"\n        else\n       \
    \     echo \"False\"\n        fi\n    else\n        let \"b = $1 ** (1/3)\"\n\
    \        let \"c = $b ** 3\"\n        if [ $c -eq $1 ]; then\n            echo\
    \ \"True\"\n        else\n            echo \"False\"\n        fi\n    fi\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        let \"a = -$1\"\n    else\n        let \"a = $1\"\n    fi\n\
    \    if [ $a -eq 0 ]; then\n        echo \"True\"\n    else\n        let \"b =\
    \ $a ** (1/3)\"\n        let \"c = $b ** 3\"\n        if [ $c -eq $a ]; then\n\
    \            echo \"True\"\n        else\n            echo \"False\"\n       \
    \ fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"True\"\n    else\n       \
    \ local i=1\n        while [ $((i*i*i)) -lt $1 ]; do\n            i=$((i+1))\n\
    \        done\n        if [ $((i*i*i)) -eq $1 ]; then\n            echo \"True\"\
    \n        else\n            echo \"False\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [[ $1 -eq 0\
    \ ]]; then\n        echo True\n    elif [[ $1 -lt 0 ]]; then\n        echo True\n\
    \    else\n        echo False\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # your code here\n\
    \    local num=$1\n    local i=1\n    while [ $i -lt $num ]\n    do\n        if\
    \ [ $((i*i*i)) -eq $num ]\n        then\n            echo True\n            return\n\
    \        fi\n        i=$((i+1))\n    done\n    echo False\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        let \"x = $1 * -1\"\n    else\n        x=$1\n    fi\n    y=$(echo\
    \ \"scale=0; $x ^ (1/3)\" | bc)\n    if [ $x -eq $(($y * $y * $y)) ]; then\n \
    \       echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local x=$1\n \
    \   local y=$(echo \"scale=0; $x^(1/3)\" | bc)\n    if [ $x -eq $((y*y*y)) ];\
    \ then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=1\n    while [ $((i*i*i)) -le $n ]; do\n        if [ $((i*i*i)) -eq\
    \ $n ]; then\n            return 0\n        fi\n        i=$((i+1))\n    done\n\
    \    return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        for (( i=1; i<=$1; i++ )); do\n            if [ $((\
    \ i*i*i )) -eq $1 ]; then\n                echo \"True\"\n                break\n\
    \            fi\n        done\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        return 0\n    fi\n    if [ $1 -lt 0 ]; then\n        let \"\
    x = -1 * $1\"\n    else\n        let \"x = $1\"\n    fi\n    let \"y = x\"\n \
    \   while [ $y -gt 0 ]; do\n        let \"y = y - 1\"\n        let \"z = y * y\
    \ * y\"\n        if [ $z -eq $x ]; then\n            return 0\n        fi\n  \
    \  done\n    return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local cube=$(echo\
    \ \"scale=0; $1^(1/3)\" | bc)\n    if [ $cube -eq 0 ]; then\n        echo \"True\"\
    \n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        local i=1\n        while [ $i -lt $1 ]; do\n       \
    \     i=$((i*3))\n        done\n        if [ $i -eq $1 ]; then\n            echo\
    \ \"True\"\n        else\n            echo \"False\"\n        fi\n    fi\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n  local n=$1\n  local\
    \ i=0\n  while [ $((i*i*i)) -le $n ]; do\n    if [ $((i*i*i)) -eq $n ]; then\n\
    \      return 0\n    fi\n    i=$((i+1))\n  done\n  return 1\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]\n    then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        (( $1 *=\
    \ -1 ))\n    fi\n    for i in $(seq 1 $1); do\n        (( $i * $i * $i ))\n  \
    \      if [ $? -eq $1 ]; then\n            echo \"True\"\n            return\n\
    \        fi\n    done\n    echo \"False\"\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]\n    then\n        echo \"True\"\n    elif [ $1 -lt 0 ]\n    then\n      \
    \  echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        for ((i=1; i<=$1; i++)); do\n            if [ $((i**3))\
    \ -eq $1 ]; then\n                echo \"True\"\n                break\n     \
    \       fi\n        done\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"True\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=0\n    while [ $((i*i*i)) -le $num ]; do\n        if [ $((i*i*i))\
    \ -eq $num ]; then\n            return 0\n        fi\n        i=$((i+1))\n   \
    \ done\n    return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n  local num=$1\n \
    \ if [[ $num -eq 0 ]]; then\n    echo \"True\"\n  elif [[ $num -eq 1 ]]; then\n\
    \    echo \"True\"\n  elif [[ $num -eq -1 ]]; then\n    echo \"True\"\n  elif\
    \ [[ $num -gt 0 ]]; then\n    local i=1\n    local cube=1\n    while [[ $cube\
    \ -lt $num ]]; do\n      i=$((i+1))\n      cube=$((i*i*i))\n    done\n    if [[\
    \ $cube -eq $num ]]; then\n      echo \"True\"\n    else\n      echo \"False\"\
    \n    fi\n  else\n    local i=-1\n    local cube=-1\n    while [[ $cube -gt $num\
    \ ]]; do\n      i=$((i-1))\n      cube=$((i*i*i))\n    done\n    if [[ $cube -eq\
    \ $num ]]; then\n      echo \"True\"\n    else\n      echo \"False\"\n    fi\n\
    \  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995540
