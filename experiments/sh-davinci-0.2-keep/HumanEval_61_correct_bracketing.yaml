name: HumanEval_61_correct_bracketing
language: humaneval_to_bash.py
prompt: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True if\
  \ every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
  (\")\n# False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"\
  (()())\")\n# True\n# >>> correct_bracketing(\")(()\")\n# False\n#\n# $1 is a string\n\
  correct_bracketing() {\n"
tests: "}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") =\
  \ \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
  \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
  ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
  \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
  \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
  \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
  ) = \"false\" ]]\n}\n\nrun_test"
completions: ["  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"(\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \")\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      return 1\n    fi\n  done\n  if [[ $count\
    \ -eq 0 ]]; then\n    return 0\n  else\n    return 1\n  fi", "    local brackets=$1\n\
    \    local stack=()\n    for (( i=0; i<${#brackets}; i++ )); do\n        local\
    \ char=${brackets:$i:1}\n        if [[ $char == \"(\" ]]; then\n            stack+=($char)\n\
    \        elif [[ $char == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi", "    local brackets=$1\n    local stack=()\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} ==\
    \ \"(\" ]]; then\n            stack+=($i)\n        elif [[ ${brackets:$i:1} ==\
    \ \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n            \
    \    return 1\n            else\n                stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n            fi\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \        return 0\n    else\n        return 1\n    fi", "    local brackets=\"\
    $1\"\n    local count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if\
    \ [[ ${brackets:$i:1} == \"(\" ]]; then\n            count=$(( count + 1 ))\n\
    \        elif [[ ${brackets:$i:1} == \")\" ]]; then\n            count=$(( count\
    \ - 1 ))\n        fi\n        if [[ $count -lt 0 ]]; then\n            return\
    \ 1\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi", "    local brackets=\"$1\"\n    local count=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} ==\
    \ \"(\" ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            return 1\n        fi\n    done\n    if\
    \ [[ $count -gt 0 ]]; then\n        return 1\n    fi\n    return 0", "    local\
    \ bracketing=\"$1\"\n    local bracket_count=0\n    for ((i=0; i<${#bracketing};\
    \ i++)); do\n        local bracket=\"${bracketing:$i:1}\"\n        if [[ \"$bracket\"\
    \ == \"(\" ]]; then\n            ((bracket_count++))\n        elif [[ \"$bracket\"\
    \ == \")\" ]]; then\n            ((bracket_count--))\n        fi\n        if [[\
    \ $bracket_count -lt 0 ]]; then\n            return 1\n        fi\n    done\n\
    \    if [[ $bracket_count -eq 0 ]]; then\n        return 0\n    else\n       \
    \ return 1\n    fi", "    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \")\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if [[ $count -lt 0 ]]; then\n\
    \            return 1\n        fi\n    done\n    if [[ $count -gt 0 ]]; then\n\
    \        return 1\n    fi\n    return 0", "  local brackets=$1\n  local count=0\n\
    \  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n      (( count++ ))\n    elif [[ ${brackets:$i:1} == \")\" ]]; then\n\
    \      (( count-- ))\n    fi\n    if [[ $count -lt 0 ]]; then\n      return 1\n\
    \    fi\n  done\n  if [[ $count -gt 0 ]]; then\n    return 1\n  fi\n  return 0",
  "    local brackets=$1\n    local stack=()\n    for (( i=0; i<${#brackets}; i++\
    \ )); do\n        local bracket=${brackets:$i:1}\n        if [[ $bracket == \"\
    (\" ]]; then\n            stack+=(\"$bracket\")\n        elif [[ $bracket == \"\
    )\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                return\
    \ 1\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi", "    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            stack=(\"${stack[@]:0:${#stack[@]}-1}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi", "    local brackets=$1\n    local open_brackets=0\n\
    \    local close_brackets=0\n    for (( i=0; i<${#brackets}; i++ )); do\n    \
    \    if [[ ${brackets:$i:1} == \"(\" ]]; then\n            (( open_brackets++\
    \ ))\n        elif [[ ${brackets:$i:1} == \")\" ]]; then\n            (( close_brackets++\
    \ ))\n        fi\n    done\n    if [[ $open_brackets -eq $close_brackets ]]; then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi", "    local\
    \ brackets=$1\n    local bracket_stack=\"\"\n    local bracket_stack_size=0\n\
    \    local bracket_stack_top=\"\"\n    local bracket=\"\"\n    local i=0\n   \
    \ local length=${#brackets}\n    for ((i=0; i<length; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            bracket_stack=\"$bracket_stack$bracket\"\
    \n            ((bracket_stack_size++))\n        elif [[ $bracket == \")\" ]];\
    \ then\n            if [[ $bracket_stack_size -eq 0 ]]; then\n               \
    \ echo \"False\"\n                return\n            fi\n            bracket_stack_top=${bracket_stack:$((bracket_stack_size-1)):1}\n\
    \            if [[ $bracket_stack_top == \"(\" ]]; then\n                bracket_stack=${bracket_stack:0:$((bracket_stack_size-1))}\n\
    \                ((bracket_stack_size--))\n            else\n                echo\
    \ \"False\"\n                return\n            fi\n        fi\n    done\n  \
    \  if [[ $bracket_stack_size -eq 0 ]]; then\n        echo \"True\"\n    else\n\
    \        echo \"False\"\n    fi", "    local brackets=$1\n    local left_count=0\n\
    \    local right_count=0\n    for ((i=0; i<${#brackets}; i++)); do\n        if\
    \ [[ ${brackets:$i:1} == \"(\" ]]; then\n            ((left_count++))\n      \
    \  elif [[ ${brackets:$i:1} == \")\" ]]; then\n            ((right_count++))\n\
    \        fi\n    done\n    if [[ $left_count -eq $right_count ]]; then\n     \
    \   return 0\n    else\n        return 1\n    fi", "    local brackets=$1\n  \
    \  local open_brackets=0\n    local close_brackets=0\n    local i=0\n    local\
    \ length=${#brackets}\n    while [ $i -lt $length ]; do\n        if [ \"${brackets:$i:1}\"\
    \ == \"(\" ]; then\n            open_brackets=$((open_brackets + 1))\n       \
    \ elif [ \"${brackets:$i:1}\" == \")\" ]; then\n            close_brackets=$((close_brackets\
    \ + 1))\n        fi\n        i=$((i + 1))\n    done\n    if [ $open_brackets -eq\
    \ $close_brackets ]; then\n        return 0\n    else\n        return 1\n    fi",
  "    local brackets=$1\n    local stack=()\n    for (( i=0; i<${#brackets}; i++\
    \ )); do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n            stack+=($i)\n\
    \        elif [[ ${brackets:$i:1} == \")\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                return 1\n            else\n               \
    \ stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n            fi\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return\
    \ 1\n    fi", "    local brackets=$1\n    local count=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n            count=$((\
    \ count + 1 ))\n        elif [[ ${brackets:$i:1} == \")\" ]]; then\n         \
    \   count=$(( count - 1 ))\n        fi\n        if [[ $count -lt 0 ]]; then\n\
    \            return 1\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n\
    \        return 0\n    else\n        return 1\n    fi", "  local brackets=$1\n\
    \  local open_brackets=0\n  local close_brackets=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"(\" ]]; then\n      open_brackets=$((open_brackets+1))\n\
    \    elif [[ ${brackets:$i:1} == \")\" ]]; then\n      close_brackets=$((close_brackets+1))\n\
    \    fi\n  done\n  if [[ $open_brackets -eq $close_brackets ]]; then\n    echo\
    \ \"True\"\n  else\n    echo \"False\"\n  fi", "    local brackets=\"$1\"\n  \
    \  local count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            (( count-- ))\n        fi\n        if [[ $count\
    \ -lt 0 ]]; then\n            return 1\n        fi\n    done\n    if [[ $count\
    \ -eq 0 ]]; then\n        return 0\n    else\n        return 1\n    fi", "  local\
    \ brackets=$1\n  local len=${#brackets}\n  local i=0\n  local count=0\n  while\
    \ [ $i -lt $len ]; do\n    local char=${brackets:$i:1}\n    if [ \"$char\" ==\
    \ \"(\" ]; then\n      count=$((count+1))\n    elif [ \"$char\" == \")\" ]; then\n\
    \      count=$((count-1))\n    fi\n    if [ $count -lt 0 ]; then\n      return\
    \ 1\n    fi\n    i=$((i+1))\n  done\n  if [ $count -eq 0 ]; then\n    return 0\n\
    \  else\n    return 1\n  fi", "    local brackets=$1\n    local stack=()\n   \
    \ local top=0\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            stack[$top]=$i\n            top=$((top+1))\n\
    \        elif [[ ${brackets:$i:1} == \")\" ]]; then\n            if [[ $top -eq\
    \ 0 ]]; then\n                return 1\n            fi\n            top=$((top-1))\n\
    \        fi\n    done\n    if [[ $top -eq 0 ]]; then\n        return 0\n    else\n\
    \        return 1\n    fi"]
stop_tokens:
- "\n}"
