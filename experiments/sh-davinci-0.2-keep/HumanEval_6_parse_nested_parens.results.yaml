language: sh
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local -a result\n    local -a stack\n    local -i max_depth\n    local\
    \ -i depth\n    local -i i\n    local -i len\n    local -i c\n    local -i top\n\
    \n    len=${#1}\n    for ((i=0; i<len; i++)); do\n        c=${1:i:1}\n       \
    \ if [[ $c == '(' ]]; then\n            stack+=($c)\n            ((depth++))\n\
    \            ((max_depth<depth)) && max_depth=$depth\n        elif [[ $c == ')'\
    \ ]]; then\n            top=${#stack[@]}\n            unset stack[$((top-1))]\n\
    \            ((depth--))\n        fi\n    done\n    result+=($max_depth)\n   \
    \ echo ${result[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjknmyidg.sh: line 21: (: syntax error: operand expected (error
    token is "(")

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    echo $1 | tr ' ' '\\n' | sed 's/[()]//g' | awk '{print length}'\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local -a output\n    local -a groups\n    local -a stack\n    local -i\
    \ max_depth\n    local -i depth\n    local -i i\n    local -i j\n    local -i\
    \ k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local\
    \ -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local\
    \ -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local\
    \ -i z\n    local -i aa\n    local -i bb\n    local -i cc\n    local -i dd\n \
    \   local -i ee\n    local -i ff\n    local -i gg\n    local -i hh\n    local\
    \ -i ii\n    local -i jj\n    local -i kk\n    local -i ll\n    local -i mm\n\
    \    local -i nn\n    local -i oo\n    local -i pp\n    local -i qq\n    local\
    \ -i rr\n    local -i ss\n    local -i tt\n    local -i uu\n    local -i vv\n\
    \    local -i ww\n    local -i xx\n    local -i yy\n    local -i zz\n    local\
    \ -i aaa\n    local -i bbb\n    local -i ccc\n    local -i ddd\n    local -i eee\n\
    \    local -i fff\n    local -i ggg\n    local -i hhh\n    local -i iii\n    local\
    \ -i jjj\n    local -i kkk\n    local -i lll\n    local -i mmm\n    local -i nnn\n\
    \    local -i ooo\n    local -i ppp\n    local -i qqq\n    local -i rrr\n    local\
    \ -i sss\n    local -i ttt\n    local -i uuu\n    local -i vvv\n    local -i www\n\
    \    local -i xxx\n    local -i yyy\n    local -i zzz\n    local -i aaaa\n   \
    \ local -i bbbb\n    local -\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_depth=0\n  local depth=0\n\
    \  local i=0\n  local len=${#input}\n  while [ $i -lt $len ]; do\n    local char=${input:$i:1}\n\
    \    if [ \"$char\" == \"(\" ]; then\n      ((depth++))\n      if [ $depth -gt\
    \ $max_depth ]; then\n        max_depth=$depth\n      fi\n    elif [ \"$char\"\
    \ == \")\" ]; then\n      ((depth--))\n    elif [ \"$char\" == \" \" ]; then\n\
    \      output+=($max_depth)\n      max_depth=0\n      depth=0\n    fi\n    ((i++))\n\
    \  done\n  output+=($max_depth)\n  echo ${output[@]}\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_nesting=0\n  local current_nesting=0\n\
    \  local i=0\n  local c=''\n  local len=${#input}\n  while [ $i -lt $len ]; do\n\
    \    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ]; then\n      current_nesting=$((current_nesting\
    \ + 1))\n      if [ $current_nesting -gt $max_nesting ]; then\n        max_nesting=$current_nesting\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      current_nesting=$((current_nesting\
    \ - 1))\n    elif [ \"$c\" == \" \" ]; then\n      output+=($max_nesting)\n  \
    \    max_nesting=0\n      current_nesting=0\n    fi\n    i=$((i + 1))\n  done\n\
    \  output+=($max_nesting)\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # echo $1\n    # echo $1 | grep -o '(' |\
    \ wc -l\n    # echo $1 | grep -o ')' | wc -l\n    # echo $1 | grep -o '(' | wc\
    \ -l - $1 | grep -o ')' | wc -l\n    # echo $1 | grep -o '(' | wc -l - $1 | grep\
    \ -o ')' | wc -l\n    # echo $1 | grep -o '(' | wc -l - $1 | grep -o ')' | wc\
    \ -l\n    # echo $1 | grep -o '(' | wc -l - $1 | grep -o ')' | wc -l\n    # echo\
    \ $1 | grep -o '(' | wc -l - $1 | grep -o ')' | wc -l\n    # echo $1 | grep -o\
    \ '(' | wc -l - $1 | grep -o ')' | wc -l\n    # echo $1 | grep -o '(' | wc -l\
    \ - $1 | grep -o ')' | wc -l\n    # echo $1 | grep -o '(' | wc -l - $1 | grep\
    \ -o ')' | wc -l\n    # echo $1 | grep -o '(' | wc -l - $1 | grep -o ')' | wc\
    \ -l\n    # echo $1 | grep -o '(' | wc -l - $1 | grep -o ')' | wc -l\n    # echo\
    \ $1 | grep -o '(' | wc -l - $1 | grep -o ')' | wc -l\n    # echo $1 | grep -o\
    \ '(' | wc -l - $1 | grep -o ')' | wc -l\n    # echo $1 | grep -o '(' | wc -l\
    \ - $1 | grep -o ')' | wc -l\n    # echo $1 | grep -o '(' | wc -l - $1 | grep\
    \ -o ')' | wc -l\n    # echo $1 | grep -o '(' | wc -l - $1 | grep -o ')' | wc\
    \ -l\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpywrr5lk3.sh: line 29: syntax error near unexpected token `}''

    /tmp/tmpywrr5lk3.sh: line 29: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local max_level=0\n    local level=0\n    local result=()\n\
    \    for ((i=0; i<${#str}; i++)); do\n        local char=${str:$i:1}\n       \
    \ if [[ $char == '(' ]]; then\n            ((level++))\n            if ((level\
    \ > max_level)); then\n                max_level=$level\n            fi\n    \
    \    elif [[ $char == ')' ]]; then\n            ((level--))\n        elif [[ $char\
    \ == ' ' ]]; then\n            result+=($max_level)\n            max_level=0\n\
    \            level=0\n        fi\n    done\n    result+=($max_level)\n    echo\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use print_stdout()\n    # Example:\n    #   print_stdout \"test\"\n\
    \    #\n    # To debug your code you can use print_stderr()\n    # Example:\n\
    \    #   print_stderr \"Debug message\"\n    #\n    # To write results to a file\
    \ you can use write_result()\n    # Example:\n    #   write_result $1 \"test\"\
    \n    #\n    # To write debug messages to a file you can use write_debug()\n \
    \   # Example:\n    #   write_debug $1 \"Debug message\"\n    #\n    # To write\
    \ error messages to a file you can use write_error()\n    # Example:\n    #  \
    \ write_error $1 \"Error message\"\n    #\n    # To write results and debug messages\
    \ to a file you can use write_output()\n    # Example:\n    #   write_output $1\
    \ \"test\" \"Debug message\"\n    #\n    # To write results and error messages\
    \ to a file you can use write_error_output()\n    # Example:\n    #   write_error_output\
    \ $1 \"test\" \"Error message\"\n    #\n    # To write results, debug and error\
    \ messages to a file you can use write_all_output()\n    # Example:\n    #   write_all_output\
    \ $1 \"test\" \"Debug message\" \"Error message\"\n    #\n    # To write result\
    \ to a file you can use write_result()\n    # Example:\n    #   write_result $1\
    \ \"test\"\n    #\n    # To write debug message to a file you can use write_debug()\n\
    \    # Example:\n    #   write_debug $1 \"Debug message\"\n    #\n    # To write\
    \ error message to a file you can use write_error()\n    # Example:\n    #   write_error\
    \ $1 \"Error message\"\n    #\n    # To write result and debug message to a file\
    \ you can use write_output()\n    # Example:\n    #   write_output $1 \"test\"\
    \ \"Debug message\"\n    #\n    # To write result and error message to a file\
    \ you can use write_error_output()\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf1slu3jn.sh: line 60: syntax error near unexpected token `}''

    /tmp/tmpf1slu3jn.sh: line 60: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local input=$1\n    local result=()\n    local max_level=0\n    local\
    \ level=0\n    local i=0\n    local len=${#input}\n    while [ $i -lt $len ];\
    \ do\n        local c=${input:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n  \
    \          level=$((level+1))\n            if [ $level -gt $max_level ]; then\n\
    \                max_level=$level\n            fi\n        elif [ \"$c\" == \"\
    )\" ]; then\n            level=$((level-1))\n        elif [ \"$c\" == \" \" ];\
    \ then\n            result+=(\"$max_level\")\n            max_level=0\n      \
    \      level=0\n        fi\n        i=$((i+1))\n    done\n    result+=(\"$max_level\"\
    )\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local -a arr\n    local -a result\n    local -i i=0\n\
    \    local -i max_level=0\n    local -i level=0\n    local -i len=0\n    local\
    \ -i j=0\n\n    # Split the string into an array\n    IFS=' ' read -r -a arr <<<\
    \ \"$str\"\n\n    # Iterate through the array\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        # Reset the level and max_level\n        level=0\n        max_level=0\n\
    \n        # Get the length of the current string\n        len=${#arr[$i]}\n\n\
    \        # Iterate through the current string\n        for ((j=0; j<$len; j++));\
    \ do\n            # If the current character is '('\n            if [[ ${arr[$i]:$j:1}\
    \ == '(' ]]; then\n                # Increment the level\n                ((level++))\n\
    \n                # If the current level is greater than the max level\n     \
    \           if [[ $level -gt $max_level ]]; then\n                    # Set the\
    \ max level to the current level\n                    max_level=$level\n     \
    \           fi\n            # If the current character is ')'\n            elif\
    \ [[ ${arr[$i]:$j:1} == ')' ]]; then\n                # Decrement the level\n\
    \                ((level--))\n            fi\n        done\n\n        # Add the\
    \ max level to the result array\n        result+=(\"$max_level\")\n    done\n\n\
    \    # Print the result array\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local max_depth=0\n    local depth=0\n    local result=()\n\
    \    for ((i=0; i<${#str}; i++)); do\n        local char=${str:$i:1}\n       \
    \ if [[ $char == '(' ]]; then\n            ((depth++))\n            if ((depth\
    \ > max_depth)); then\n                max_depth=$depth\n            fi\n    \
    \    elif [[ $char == ')' ]]; then\n            ((depth--))\n        elif [[ $char\
    \ == ' ' ]]; then\n            result+=($max_depth)\n            max_depth=0\n\
    \            depth=0\n        fi\n    done\n    result+=($max_depth)\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local input=\"$1\"\n  local output=()\n  local max_depth=0\n  local depth=0\n\
    \  local char\n  for (( i=0; i<${#input}; i++ )); do\n    char=\"${input:$i:1}\"\
    \n    if [[ \"$char\" == \"(\" ]]; then\n      (( depth++ ))\n      if (( depth\
    \ > max_depth )); then\n        max_depth=$depth\n      fi\n    elif [[ \"$char\"\
    \ == \")\" ]]; then\n      (( depth-- ))\n    elif [[ \"$char\" == \" \" ]]; then\n\
    \      output+=(\"$max_depth\")\n      max_depth=0\n      depth=0\n    fi\n  done\n\
    \  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    Not implemented\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    local\
    \ input=$1\n    local output=()\n    local max_level=0\n    local level=0\n  \
    \  local i=0\n    local len=${#input}\n    while [ $i -lt $len ]; do\n       \
    \ local c=${input:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n            ((level++))\n\
    \            if [ $level -gt $max_level ]; then\n                max_level=$level\n\
    \            fi\n        elif [ \"$c\" == \")\" ]; then\n            ((level--))\n\
    \        elif [ \"$c\" == \" \" ]; then\n            output+=($max_level)\n  \
    \          max_level=0\n            level=0\n        fi\n        ((i++))\n   \
    \ done\n    output+=($max_level)\n    echo ${output[@]}\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=\"$1\"\n    local max_depth=0\n    local depth=0\n    local\
    \ result=()\n    for (( i=0; i<${#str}; i++ )); do\n        if [[ \"${str:$i:1}\"\
    \ == \"(\" ]]; then\n            (( depth++ ))\n            (( max_depth = depth\
    \ > max_depth ? depth : max_depth ))\n        elif [[ \"${str:$i:1}\" == \")\"\
    \ ]]; then\n            (( depth-- ))\n        elif [[ \"${str:$i:1}\" == \" \"\
    \ ]]; then\n            result+=($max_depth)\n            max_depth=0\n      \
    \  fi\n    done\n    result+=($max_depth)\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_depth=0\n    local\
    \ depth=0\n    local i=0\n    local c=''\n    local len=${#input}\n    while [\
    \ $i -lt $len ]; do\n        c=${input:$i:1}\n        if [ \"$c\" == \"(\" ];\
    \ then\n            ((depth++))\n            if [ $depth -gt $max_depth ]; then\n\
    \                max_depth=$depth\n            fi\n        elif [ \"$c\" == \"\
    )\" ]; then\n            ((depth--))\n        elif [ \"$c\" == \" \" ]; then\n\
    \            output+=($max_depth)\n            max_depth=0\n            depth=0\n\
    \        fi\n        ((i++))\n    done\n    output+=($max_depth)\n    echo ${output[@]}\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    Not implemented\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2465w0et.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmp2465w0et.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  # echo $1\n  # echo $1 | sed 's/\\(/\\n(\\n/g'\
    \ | sed 's/\\)/\\n)\\n/g' | sed 's/ /\\n/g'\n  # echo $1 | sed 's/\\(/\\n(\\n/g'\
    \ | sed 's/\\)/\\n)\\n/g' | sed 's/ /\\n/g' | sed 's/\\n\\n/\\n/g'\n  # echo $1\
    \ | sed 's/\\(/\\n(\\n/g' | sed 's/\\)/\\n)\\n/g' | sed 's/ /\\n/g' | sed 's/\\\
    n\\n/\\n/g' | sed 's/\\n\\n/\\n/g'\n  # echo $1 | sed 's/\\(/\\n(\\n/g' | sed\
    \ 's/\\)/\\n)\\n/g' | sed 's/ /\\n/g' | sed 's/\\n\\n/\\n/g' | sed 's/\\n\\n/\\\
    n/g' | sed 's/\\n\\n/\\n/g'\n  # echo $1 | sed 's/\\(/\\n(\\n/g' | sed 's/\\)/\\\
    n)\\n/g' | sed 's/ /\\n/g' | sed 's/\\n\\n/\\n/g' | sed 's/\\n\\n/\\n/g' | sed\
    \ 's/\\n\\n/\\n/g' | sed 's/\\n\\n/\\n/g'\n  # echo $1 | sed 's/\\(/\\n(\\n/g'\
    \ | sed 's/\\)/\\n)\\n/g' | sed 's/ /\\n/g' | sed 's/\\n\\n/\\n/g' | sed 's/\\\
    n\\n/\\n/g' | sed 's/\\n\\n/\\n/g' | sed 's/\\n\\n/\\n/g' | sed 's/\\n\\n/\\n/\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnm53f7vo.sh: line 18: syntax error near unexpected token `}''

    /tmp/tmpnm53f7vo.sh: line 18: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  # Use echo to output the result, e.g.\n  # echo\
    \ $result\n  #\n  # For example:\n  # echo $1\n  # echo $2\n  # echo $3\n  # ...\n\
    \  # echo $n\n  #\n  # To access the arguments, use\n  # $1, $2, $3, ..., $n\n\
    \  #\n  # To get the number of arguments, use $#\n  #\n  # To get the script name,\
    \ use $0\n  #\n  # Refer to:\n  # http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_07.html\n\
    \  # http://stackoverflow.com/questions/6482377/pass-a-bash-string-variable-into-a-function\n\
    \  # http://stackoverflow.com/questions/9057387/process-command-line-arguments-in-a-bash-script\n\
    \  # http://stackoverflow.com/questions/9057387/process-command-line-arguments-in-a-bash-script\n\
    \  # http://stackoverflow.com/questions/169511/how-do-i-iterate-over-a-range-of-numbers-defined-by-variables-in-bash\n\
    \  # http://stackoverflow.com/questions/918886/how-do-i-split-a-string-on-a-delimiter-in-bash\n\
    \  # http://stackoverflow.com/questions/918886/how-do-i-split-a-string-on-a-delimiter-in-bash\n\
    \  # http://stackoverflow.com/questions/918886/how-do-i-split-a-string-on-a-delimiter-in-bash\n\
    \  # http://stackoverflow.com/questions/918886/how-do-i-split-a-string-on-a-delimiter-in-bash\n\
    \  # http://stackoverflow.com/questions/918886/how-do-i-split-a-string-on-a-delim\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptairln26.sh: line 39: syntax error near unexpected token `}''

    /tmp/tmptairln26.sh: line 39: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    Not implemented\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local -a result\n    local -a stack\n    local -i max_depth\n    local\
    \ -i depth\n    local -i i\n    local -i len\n    local -i c\n    local -i top\n\
    \n    len=${#1}\n    for ((i=0; i<len; i++)); do\n        c=${1:i:1}\n       \
    \ if [[ \"$c\" == \"(\" ]]; then\n            stack+=($i)\n            ((depth++))\n\
    \            ((max_depth < depth)) && max_depth=$depth\n        elif [[ \"$c\"\
    \ == \")\" ]]; then\n            top=${stack[-1]}\n            unset stack[-1]\n\
    \            stack=(${stack[@]})\n            ((depth--))\n        fi\n    done\n\
    \    echo \"$max_depth\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplcju2zno.sh: line 21: (: syntax error: operand expected (error
    token is "(")

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local input=$1\n  local result=()\n  local max_level=0\n  local level=0\n\
    \  local i=0\n  local char=''\n  local len=${#input}\n\n  while [ $i -lt $len\
    \ ]; do\n    char=${input:$i:1}\n    if [ \"$char\" == \"(\" ]; then\n      ((level++))\n\
    \      if [ $level -gt $max_level ]; then\n        max_level=$level\n      fi\n\
    \    elif [ \"$char\" == \")\" ]; then\n      ((level--))\n    elif [ \"$char\"\
    \ == \" \" ]; then\n      result+=($max_level)\n      max_level=0\n      level=0\n\
    \    fi\n    ((i++))\n  done\n  result+=($max_level)\n  echo \"${result[@]}\"\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #echo $1\n    #echo ${#1}\n    #echo ${1:0:1}\n\
    \    #echo ${1:1:1}\n    #echo ${1:2:1}\n    #echo ${1:3:1}\n    #echo ${1:4:1}\n\
    \    #echo ${1:5:1}\n    #echo ${1:6:1}\n    #echo ${1:7:1}\n    #echo ${1:8:1}\n\
    \    #echo ${1:9:1}\n    #echo ${1:10:1}\n    #echo ${1:11:1}\n    #echo ${1:12:1}\n\
    \    #echo ${1:13:1}\n    #echo ${1:14:1}\n    #echo ${1:15:1}\n    #echo ${1:16:1}\n\
    \    #echo ${1:17:1}\n    #echo ${1:18:1}\n    #echo ${1:19:1}\n    #echo ${1:20:1}\n\
    \    #echo ${1:21:1}\n    #echo ${1:22:1}\n    #echo ${1:23:1}\n    #echo ${1:24:1}\n\
    \    #echo ${1:25:1}\n    #echo ${1:26:1}\n    #echo ${1:27:1}\n    #echo ${1:28:1}\n\
    \    #echo ${1:29:1}\n    #echo ${1:30:1}\n    #echo ${1:31:1}\n    #echo ${1:32:1}\n\
    \    #echo ${1:33:1}\n    #echo ${1:34:1}\n    #echo ${1:35:1}\n    #echo ${1:36:1}\n\
    \    #echo ${1:37:1}\n    #echo ${1:38:1}\n    #echo ${1:39:1}\n    #echo ${1:40:1}\n\
    \    #echo ${1:41:1}\n    #echo ${1:42:1}\n    #echo ${1:43:1}\n    #echo ${1:\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp35urylit.sh: line 58: syntax error near unexpected token `}''

    /tmp/tmp35urylit.sh: line 58: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  # Use echo to output the result, e.g.\n  # echo\
    \ $result\n  echo $1\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local input=$1\n    local result=()\n    local max_depth=0\n    local\
    \ depth=0\n    local char\n    for ((i=0; i<${#input}; i++)); do\n        char=${input:$i:1}\n\
    \        if [[ $char == '(' ]]; then\n            ((depth++))\n            if\
    \ ((depth > max_depth)); then\n                max_depth=$depth\n            fi\n\
    \        elif [[ $char == ')' ]]; then\n            ((depth--))\n        elif\
    \ [[ $char == ' ' ]]; then\n            result+=($max_depth)\n            max_depth=0\n\
    \            depth=0\n        fi\n    done\n    result+=($max_depth)\n    echo\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    echo $1 | tr ' ' '\\n' | awk '{\n       \
    \ max_level = 0\n        level = 0\n        for (i = 1; i <= length($0); i++)\
    \ {\n            if (substr($0, i, 1) == \"(\") {\n                level += 1\n\
    \            } else if (substr($0, i, 1) == \")\") {\n                level -=\
    \ 1\n            }\n            if (level > max_level) {\n                max_level\
    \ = level\n            }\n        }\n        print max_level\n    }'\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local str=$1\n  local max_depth=0\n  local depth=0\n  local result=()\n\
    \  for (( i=0; i<${#str}; i++ )); do\n    local char=${str:$i:1}\n    if [[ $char\
    \ == '(' ]]; then\n      ((depth++))\n      ((max_depth = depth > max_depth ?\
    \ depth : max_depth))\n    elif [[ $char == ')' ]]; then\n      ((depth--))\n\
    \    elif [[ $char == ' ' ]]; then\n      result+=($max_depth)\n      max_depth=0\n\
    \    fi\n  done\n  result+=($max_depth)\n  echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  # Use echo to output the result, e.g.\n  # echo\
    \ $result\n  #\n  # For example,\n  # echo '1 2 3'\n  # will output\n  # 1 2 3\n\
    \  #\n  # Hint: You can use the following to split a string into an array in bash\n\
    \  # arr=(${string// / })\n  #\n  # Hint: You can use the following to remove\
    \ the first and last character of a string in bash\n  # string=${string:1:-1}\n\
    \  #\n  # Hint: You can use the following to get the length of a string in bash\n\
    \  # ${#string}\n  #\n  # Hint: You can use the following to get the substring\
    \ of a string in bash\n  # ${string:start:length}\n  #\n  # Hint: You can use\
    \ the following to get the index of the first occurrence of a substring in a string\
    \ in bash\n  # expr index \"$string\" \"$substring\"\n  #\n  # Hint: You can use\
    \ the following to check if a string contains a substring in bash\n  # if [[ \"\
    $string\" == *\"$substring\"* ]]; then echo \"yes\"; fi\n  #\n  # Hint: You can\
    \ use the following to check if a string starts with a substring in bash\n  #\
    \ if [[ \"$string\" == \"$substring\"* ]]; then echo \"yes\"; fi\n  #\n  # Hint:\
    \ You can use the following to check if a string ends with a substring in bash\n\
    \  # if [[ \"$string\" == *\"$substring\" ]]; then echo \"yes\"; fi\n  #\n  #\
    \ Hint: You can use the following to check if a string is empty in bash\n  # if\
    \ [[ -z \"$string\" ]]; then echo \"yes\"; fi\n  #\n  # Hint: You can use the\
    \ following to check if a string is not empty in bash\n  # if [[ -n \"$string\"\
    \ ]]; then echo \"yes\"; fi\n  #\n  # Hint: You can use the following to check\
    \ if a string is a number in bash\n  # if [[ \"$string\" =~ ^[0-9]+$ ]]; then\
    \ echo \"yes\"; fi\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqv6vfre3.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmpqv6vfre3.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # echo $1\n    # echo \"---\"\n    # echo\
    \ $2\n    # echo \"---\"\n    # echo $3\n    # echo \"---\"\n    # echo $4\n \
    \   # echo \"---\"\n    # echo $5\n    # echo \"---\"\n    # echo $6\n    # echo\
    \ \"---\"\n    # echo $7\n    # echo \"---\"\n    # echo $8\n    # echo \"---\"\
    \n    # echo $9\n    # echo \"---\"\n    # echo ${10}\n    # echo \"---\"\n  \
    \  # echo ${11}\n    # echo \"---\"\n    # echo ${12}\n    # echo \"---\"\n  \
    \  # echo ${13}\n    # echo \"---\"\n    # echo ${14}\n    # echo \"---\"\n  \
    \  # echo ${15}\n    # echo \"---\"\n    # echo ${16}\n    # echo \"---\"\n  \
    \  # echo ${17}\n    # echo \"---\"\n    # echo ${18}\n    # echo \"---\"\n  \
    \  # echo ${19}\n    # echo \"---\"\n    # echo ${20}\n    # echo \"---\"\n  \
    \  # echo ${21}\n    # echo \"---\"\n    # echo ${22}\n    # echo \"---\"\n  \
    \  # echo ${23}\n    # echo \"---\"\n    # echo ${24}\n    # echo \"---\"\n  \
    \  # echo ${25}\n    # echo \"---\"\n    # echo ${26}\n    # echo \"---\"\n  \
    \  # echo ${27}\n    # echo \"---\"\n    # echo ${28}\n    # echo \"---\"\n  \
    \  # echo ${29}\n    # echo \"---\"\n    # echo ${30}\n    # echo \"---\"\n  \
    \  # echo ${31}\n    # echo \"---\"\n    # echo ${32}\n    # echo \"---\"\n  \
    \  # echo ${33}\n    # echo \"---\"\n    # echo ${34}\n    # echo \"---\"\n  \
    \  # echo ${35}\n    # echo \"---\"\n    # echo ${36}\n    # echo \"---\"\n  \
    \  # echo ${37}\n    #\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmj4pb1ai.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmpmj4pb1ai.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  echo $1\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp652i77ti.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmp652i77ti.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local max_depth=0\n    local cur_depth=0\n    local\
    \ max_depth_list=()\n    for (( i=0; i<${#str}; i++ )); do\n        if [[ ${str:$i:1}\
    \ == \"(\" ]]; then\n            (( cur_depth++ ))\n            if (( cur_depth\
    \ > max_depth )); then\n                max_depth=$cur_depth\n            fi\n\
    \        elif [[ ${str:$i:1} == \")\" ]]; then\n            (( cur_depth-- ))\n\
    \        elif [[ ${str:$i:1} == \" \" ]]; then\n            max_depth_list+=($max_depth)\n\
    \            max_depth=0\n            cur_depth=0\n        fi\n    done\n    max_depth_list+=($max_depth)\n\
    \    echo ${max_depth_list[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local input=$1\n    local -a result\n    local -a stack\n    local -i\
    \ i=0\n    local -i max_depth=0\n    local -i depth=0\n    local -i len=${#input}\n\
    \    local -i start_index=0\n    local -i end_index=0\n    local -i temp_index=0\n\
    \    local -i temp_depth=0\n    local -i temp_max_depth=0\n    local -i temp_start_index=0\n\
    \    local -i temp_end_index=0\n    local -i temp_len=0\n    local -i temp_i=0\n\
    \    local -i temp_j=0\n    local -i temp_k=0\n    local -i temp_l=0\n    local\
    \ -i temp_m=0\n    local -i temp_n=0\n    local -i temp_o=0\n    local -i temp_p=0\n\
    \    local -i temp_q=0\n    local -i temp_r=0\n    local -i temp_s=0\n    local\
    \ -i temp_t=0\n    local -i temp_u=0\n    local -i temp_v=0\n    local -i temp_w=0\n\
    \    local -i temp_x=0\n    local -i temp_y=0\n    local -i temp_z=0\n    local\
    \ -i temp_aa=0\n    local -i temp_ab=0\n    local -i temp_ac=0\n    local -i temp_ad=0\n\
    \    local -i temp_ae=0\n    local -i temp_af=0\n    local -i temp_ag=0\n    local\
    \ -i temp_ah=0\n    local -i temp_ai=0\n    local -i temp_aj=0\n    local -i temp_ak=0\n\
    \    local -i temp_al=0\n    local -i temp_am=0\n    local -i temp_an=0\n    local\
    \ -i temp_ao=0\n    local -i temp_ap=0\n    local -i temp_aq=0\n    local -i temp_ar=0\n\
    \    local -i temp_as=0\n\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # echo $1\n    # echo $1 | tr -d ' '\n  \
    \  # echo $1 | tr -d ' ' | sed 's/[^()]//g'\n    # echo $1 | tr -d ' ' | sed 's/[^()]//g'\
    \ | sed 's/()//g'\n    # echo $1 | tr -d ' ' | sed 's/[^()]//g' | sed 's/()//g'\
    \ | sed 's/()//g'\n    # echo $1 | tr -d ' ' | sed 's/[^()]//g' | sed 's/()//g'\
    \ | sed 's/()//g' | sed 's/()//g'\n    # echo $1 | tr -d ' ' | sed 's/[^()]//g'\
    \ | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g'\n    # echo\
    \ $1 | tr -d ' ' | sed 's/[^()]//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g'\
    \ | sed 's/()//g' | sed 's/()//g'\n    # echo $1 | tr -d ' ' | sed 's/[^()]//g'\
    \ | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g'\
    \ | sed 's/()//g'\n    # echo $1 | tr -d ' ' | sed 's/[^()]//g' | sed 's/()//g'\
    \ | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g'\
    \ | sed 's/()//g'\n    # echo $1 | tr -d ' ' | sed 's/[^()]//g' | sed 's/()//g'\
    \ | sed 's/()//g' |\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm8zohzcu.sh: line 22: syntax error near unexpected token `}''

    /tmp/tmpm8zohzcu.sh: line 22: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    #\n    # To access\
    \ arguments from the command line you can use variables $1, $2, etc.\n    # Example:\
    \ echo $1\n    #\n    # To parse arguments from the command line you can use the\
    \ following\n    # while getopts \":a:\" opt; do\n    #   case $opt in\n    #\
    \     a)\n    #       echo \"-a was triggered, Parameter: $OPTARG\" >&2\n    #\
    \       ;;\n    #     \\?)\n    #       echo \"Invalid option: -$OPTARG\" >&2\n\
    \    #       ;;\n    #   esac\n    # done\n    #\n    # To access the current\
    \ script arguments inside the script use the variable $@\n    # Example: for arg\
    \ in \"$@\"; do\n    #             echo $arg\n    #          done\n    #\n   \
    \ # To print the current script arguments inside the script use the variable $*\n\
    \    # Example: for arg in \"$*\"; do\n    #             echo $arg\n    #    \
    \      done\n    #\n    # To print the current script arguments inside the script\
    \ use the variable $#\n    # Example: echo $#\n    #\n    # To print the current\
    \ script name inside the script use the variable $0\n    # Example: echo $0\n\
    \    #\n    # To print the current script PID inside the script use the variable\
    \ $$\n    # Example: echo $$\n    #\n    # To print the current script exit status\
    \ inside the script use the variable $?\n    # Example: echo $?\n    #\n    #\
    \ To print the current script exit status inside the script use the variable $!\n\
    \    # Example: echo $!\n    #\n    # To print the current script exit status\
    \ inside the script use the variable $-\n    # Example: echo $-\n    #\n    #\
    \ To print the current script exit status inside the script use the variable $_\n\
    \    # Example: echo $_\n    #\n    # To print the current script exit status\
    \ inside the script use the variable $IFS\n    # Example: echo $IFS\n    #\n \
    \   # To print the current script exit status inside the script use the variable\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkxsepu5q.sh: line 64: syntax error near unexpected token `}''

    /tmp/tmpkxsepu5q.sh: line 64: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    #echo\
    \ \"Hello world!\"\n    #echo $1\n    #echo $1 | grep -o '(' | wc -l\n    #echo\
    \ $1 | grep -o ')' | wc -l\n    #echo $1 | grep -o '()' | wc -l\n    #echo $1\
    \ | grep -o '()' | wc -l\n    #echo $1 | grep -o '()' | wc -l\n    #echo $1 |\
    \ grep -o '()' | wc -l\n    #echo $1 | grep -o '()' | wc -l\n    #echo $1 | grep\
    \ -o '()' | wc -l\n    #echo $1 | grep -o '()' | wc -l\n    #echo $1 | grep -o\
    \ '()' | wc -l\n    #echo $1 | grep -o '()' | wc -l\n    #echo $1 | grep -o '()'\
    \ | wc -l\n    #echo $1 | grep -o '()' | wc -l\n    #echo $1 | grep -o '()' |\
    \ wc -l\n    #echo $1 | grep -o '()' | wc -l\n    #echo $1 | grep -o '()' | wc\
    \ -l\n    #echo $1 | grep -o '()' | wc -l\n    #echo $1 | grep -o '()' | wc -l\n\
    \    #echo $1 | grep -o '()' | wc -l\n    #echo $1 | grep -o '()' | wc -l\n  \
    \  #echo $1 | grep -o '()' | wc -l\n    #echo $1 | grep -o '()' | wc -l\n    #echo\
    \ $1 | grep -o '()' | wc -l\n    #echo $1 | grep -o '()' | wc -l\n    #echo $1\
    \ | grep -o '()' | wc -l\n    #echo $1 | grep -o '()' | w\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd5s3a9s6.sh: line 41: syntax error near unexpected token `}''

    /tmp/tmpd5s3a9s6.sh: line 41: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    Not implemented\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local input_str=$1\n    local output_str=\"\"\n    local max_nesting_level=0\n\
    \    local current_nesting_level=0\n    local i=0\n    local len=${#input_str}\n\
    \    local char=\"\"\n\n    while [ $i -lt $len ]; do\n        char=${input_str:$i:1}\n\
    \        if [ \"$char\" == \"(\" ]; then\n            current_nesting_level=$((current_nesting_level\
    \ + 1))\n            if [ $current_nesting_level -gt $max_nesting_level ]; then\n\
    \                max_nesting_level=$current_nesting_level\n            fi\n  \
    \      elif [ \"$char\" == \")\" ]; then\n            current_nesting_level=$((current_nesting_level\
    \ - 1))\n        elif [ \"$char\" == \" \" ]; then\n            output_str=\"\
    $output_str $max_nesting_level\"\n            max_nesting_level=0\n          \
    \  current_nesting_level=0\n        fi\n        i=$((i + 1))\n    done\n    output_str=\"\
    $output_str $max_nesting_level\"\n    echo $output_str\n}\n\ncandidate() {\n \
    \   parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_depth=0\n    local\
    \ depth=0\n    local i=0\n    local len=${#input}\n    while [ $i -lt $len ];\
    \ do\n        local char=${input:$i:1}\n        if [ \"$char\" == \"(\" ]; then\n\
    \            ((depth++))\n            ((max_depth = depth > max_depth ? depth\
    \ : max_depth))\n        elif [ \"$char\" == \")\" ]; then\n            ((depth--))\n\
    \        elif [ \"$char\" == \" \" ]; then\n            output+=($max_depth)\n\
    \            max_depth=0\n            depth=0\n        fi\n        ((i++))\n \
    \   done\n    output+=($max_depth)\n    echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_level=0\n    local\
    \ level=0\n    local i=0\n    local c=''\n    local len=${#input}\n    while [\
    \ $i -lt $len ]; do\n        c=${input:$i:1}\n        if [ \"$c\" == \"(\" ];\
    \ then\n            ((level++))\n            if [ $level -gt $max_level ]; then\n\
    \                max_level=$level\n            fi\n        elif [ \"$c\" == \"\
    )\" ]; then\n            ((level--))\n        elif [ \"$c\" == \" \" ]; then\n\
    \            output+=($max_level)\n            max_level=0\n            level=0\n\
    \        fi\n        ((i++))\n    done\n    output+=($max_level)\n    echo \"\
    ${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp652i77ti.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmp652i77ti.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local -a arr\n    local -a result\n    local -i i=0\n\
    \    local -i max=0\n    local -i count=0\n    local -i len=0\n\n    # Split the\
    \ string into an array\n    IFS=' ' read -r -a arr <<< \"$str\"\n\n    # Loop\
    \ through each element of the array\n    for i in \"${!arr[@]}\"; do\n       \
    \ # Get the length of the string\n        len=${#arr[$i]}\n        # Loop through\
    \ each character of the string\n        for (( j=0; j<len; j++ )); do\n      \
    \      # If the character is an opening parenthesis, increment the count\n   \
    \         if [[ ${arr[$i]:$j:1} == '(' ]]; then\n                ((count++))\n\
    \            # If the character is a closing parenthesis, decrement the count\n\
    \            elif [[ ${arr[$i]:$j:1} == ')' ]]; then\n                ((count--))\n\
    \            fi\n            # If the count is greater than the max, set the max\
    \ to the count\n            if [[ $count -gt $max ]]; then\n                max=$count\n\
    \            fi\n        done\n        # Add the max to the result array\n   \
    \     result[$i]=$max\n        # Reset the max and count\n        max=0\n    \
    \    count=0\n    done\n\n    # Print the result array\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # echo $1\n    # echo $2\n    # echo $3\n\
    \    # echo $4\n    # echo $5\n    # echo $6\n    # echo $7\n    # echo $8\n \
    \   # echo $9\n    # echo ${10}\n    # echo ${11}\n    # echo ${12}\n    # echo\
    \ ${13}\n    # echo ${14}\n    # echo ${15}\n    # echo ${16}\n    # echo ${17}\n\
    \    # echo ${18}\n    # echo ${19}\n    # echo ${20}\n    # echo ${21}\n    #\
    \ echo ${22}\n    # echo ${23}\n    # echo ${24}\n    # echo ${25}\n    # echo\
    \ ${26}\n    # echo ${27}\n    # echo ${28}\n    # echo ${29}\n    # echo ${30}\n\
    \    # echo ${31}\n    # echo ${32}\n    # echo ${33}\n    # echo ${34}\n    #\
    \ echo ${35}\n    # echo ${36}\n    # echo ${37}\n    # echo ${38}\n    # echo\
    \ ${39}\n    # echo ${40}\n    # echo ${41}\n    # echo ${42}\n    # echo ${43}\n\
    \    # echo ${44}\n    # echo ${45}\n    # echo ${46}\n    # echo ${47}\n    #\
    \ echo ${48}\n    # echo ${49}\n    # echo ${50}\n    # echo ${51}\n    # echo\
    \ ${52}\n    # echo ${53}\n    # echo ${54}\n    # echo ${55}\n    # echo ${56}\n\
    \    # echo ${57}\n    # echo ${58}\n    # echo ${59}\n    # echo ${60}\n    #\
    \ echo ${61}\n    # echo ${62}\n    # echo ${63}\n    # echo ${64}\n    # echo\
    \ ${65}\n    # echo ${66}\n    # echo ${67}\n    # echo ${68}\n    # echo ${69}\n\
    \    # echo ${70}\n    # echo ${71}\n    # echo ${72}\n    # echo ${73}\n    #\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4lg_d3qx.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmp4lg_d3qx.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  # Use echo to output the result, e.g.\n  # echo\
    \ $result\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpilar9mau.sh: line 175: syntax error near unexpected token `}''

    /tmp/tmpilar9mau.sh: line 175: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # You can add more functions as you see fit\n\
    \    # You can add more functions as you see fit\n    # You can add more functions\
    \ as you see fit\n    # You can add more functions as you see fit\n    # You can\
    \ add more functions as you see fit\n    # You can add more functions as you see\
    \ fit\n    # You can add more functions as you see fit\n    # You can add more\
    \ functions as you see fit\n    # You can add more functions as you see fit\n\
    \    # You can add more functions as you see fit\n    # You can add more functions\
    \ as you see fit\n    # You can add more functions as you see fit\n    # You can\
    \ add more functions as you see fit\n    # You can add more functions as you see\
    \ fit\n    # You can add more functions as you see fit\n    # You can add more\
    \ functions as you see fit\n    # You can add more functions as you see fit\n\
    \    # You can add more functions as you see fit\n    # You can add more functions\
    \ as you see fit\n    # You can add more functions as you see fit\n    # You can\
    \ add more functions as you see fit\n    # You can add more functions as you see\
    \ fit\n    # You can add more functions as you see fit\n    # You can add more\
    \ functions as you see fit\n    # You can add more functions as you see fit\n\
    \    # You can add more functions as you see fit\n    # You can add more functions\
    \ as you see fit\n    # You can add more functions as you see fit\n    # You can\
    \ add more functions as you see fit\n    # You can add more functions as you see\
    \ fit\n    # You can add more functions as you see fit\n    # You can add more\
    \ functions as you see fit\n    # You can add more functions as you see fit\n\
    \    # You can add more functions as you see fit\n    # You can add more functions\
    \ as you see fit\n    # You can add more functions as you see fit\n    # You can\
    \ add more functions as you see fit\n    # You can add more functions as you see\
    \ fit\n    # You can add more functions as you see fit\n    # You can add more\
    \ functions as you see fit\n    # You can add more functions as you see fit\n\
    \    # You can add more functions as you see fit\n\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplwsg743n.sh: line 54: syntax error near unexpected token `}''

    /tmp/tmplwsg743n.sh: line 54: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_depth=0\n  local depth=0\n\
    \  local i=0\n  local len=${#input}\n  local c=''\n\n  while [[ $i -lt $len ]];\
    \ do\n    c=${input:$i:1}\n    if [[ $c == '(' ]]; then\n      ((depth++))\n \
    \     if [[ $depth -gt $max_depth ]]; then\n        max_depth=$depth\n      fi\n\
    \    elif [[ $c == ')' ]]; then\n      ((depth--))\n    elif [[ $c == ' ' ]];\
    \ then\n      output+=($max_depth)\n      max_depth=0\n      depth=0\n    fi\n\
    \    ((i++))\n  done\n  output+=($max_depth)\n  echo ${output[@]}\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  echo $1 | sed -e 's/[^()]//g' | sed -e 's/[()]/\\\
    n/g' | sed -e '/^$/d' | sed -e 's/)/ /g' | awk '{print length($0)}'\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  # Use echo to output the result, e.g.\n  # echo\
    \ $result\n  #\n  # For example:\n  # echo $1\n  # echo $2\n  # echo $3\n  # ...\n\
    \  # echo $n\n  #\n  # To get the arguments into an array:\n  # args=(\"$@\")\n\
    \  # echo ${args[0]} ${args[1]} ... ${args[n]}\n  #\n  # To get the number of\
    \ arguments:\n  # echo $#\n  #\n  # To get the script name:\n  # echo $0\n  #\n\
    \  # To get the arguments separated by a space:\n  # echo $@\n  #\n  # To get\
    \ the arguments separated by a newline:\n  # echo $*\n  #\n  # To get the exit\
    \ status of the last command:\n  # echo $?\n  #\n  # To get the process ID of\
    \ the current shell:\n  # echo $$\n  #\n  # To get the process ID of the last\
    \ background command:\n  # echo $!\n  #\n  # To get the options passed to the\
    \ current script:\n  # echo $-\n  #\n  # To get the name of the shell or shell\
    \ script:\n  # echo $0\n  #\n  # To get the number of positional parameters passed\
    \ to the current script:\n  # echo $#\n  #\n  # To get the current line number\
    \ in the Bash script:\n  # echo $LINENO\n  #\n  # To get the current Bash version:\n\
    \  # echo $BASH_VERSION\n  #\n  # To get the current Bash release:\n  # echo $BASH_VERSINFO[0]\n\
    \  #\n  # To get the current Bash patch level:\n  # echo $BASH_VERSINFO[1]\n \
    \ #\n  # To get the current Bash minor version:\n  # echo $BASH_VERSINFO[2]\n\
    \  #\n  # To get the current Bash build version:\n  # echo $BASH_VERSINFO[3]\n\
    \  #\n  # To get the current Bash release status:\n  # echo $BASH_VERSINFO[4]\n\
    \  #\n  # To get\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpox39wkp6.sh: line 77: syntax error near unexpected token `}''

    /tmp/tmpox39wkp6.sh: line 77: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local str=$1\n  local result=()\n  local max_level=0\n  local level=0\n\
    \  local i=0\n  local char=''\n  local len=${#str}\n\n  while [ $i -lt $len ];\
    \ do\n    char=${str:$i:1}\n    if [ \"$char\" == \"(\" ]; then\n      ((level++))\n\
    \      if [ $level -gt $max_level ]; then\n        max_level=$level\n      fi\n\
    \    elif [ \"$char\" == \")\" ]; then\n      ((level--))\n    elif [ \"$char\"\
    \ == \" \" ]; then\n      result+=($max_level)\n      max_level=0\n      level=0\n\
    \    fi\n    ((i++))\n  done\n  result+=($max_level)\n  echo ${result[@]}\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  echo $1\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local input=$1\n  local result=()\n  local max_level=0\n  local current_level=0\n\
    \  local i=0\n  local c=''\n  local len=${#input}\n  while [ $i -lt $len ]; do\n\
    \    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ]; then\n      current_level=$((current_level\
    \ + 1))\n      if [ $current_level -gt $max_level ]; then\n        max_level=$current_level\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      current_level=$((current_level\
    \ - 1))\n    elif [ \"$c\" == \" \" ]; then\n      result+=($max_level)\n    \
    \  max_level=0\n      current_level=0\n    fi\n    i=$((i + 1))\n  done\n  result+=($max_level)\n\
    \  echo ${result[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local -a result\n    local -a groups\n    local -i max_depth\n    local\
    \ -i depth\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n \
    \   local -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n\
    \    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i\
    \ v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local\
    \ -i aa\n    local -i bb\n    local -i cc\n    local -i dd\n    local -i ee\n\
    \    local -i ff\n    local -i gg\n    local -i hh\n    local -i ii\n    local\
    \ -i jj\n    local -i kk\n    local -i ll\n    local -i mm\n    local -i nn\n\
    \    local -i oo\n    local -i pp\n    local -i qq\n    local -i rr\n    local\
    \ -i ss\n    local -i tt\n    local -i uu\n    local -i vv\n    local -i ww\n\
    \    local -i xx\n    local -i yy\n    local -i zz\n    local -i aaa\n    local\
    \ -i bbb\n    local -i ccc\n    local -i ddd\n    local -i eee\n    local -i fff\n\
    \    local -i ggg\n    local -i hhh\n    local -i iii\n    local -i jjj\n    local\
    \ -i kkk\n    local -i lll\n    local -i mmm\n    local -i nnn\n    local -i ooo\n\
    \    local -i ppp\n    local -i qqq\n    local -i rrr\n    local -i sss\n    local\
    \ -i ttt\n    local -i uuu\n    local -i vvv\n    local -i www\n    local -i xxx\n\
    \    local -i yyy\n    local -i zzz\n    local -i aaaa\n    local -i bbbb\n  \
    \  local -i cccc\n   \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local count=0\n  local max=0\n  for\
    \ (( i=0; i<${#input}; i++ )); do\n    if [[ ${input:$i:1} == \"(\" ]]; then\n\
    \      (( count++ ))\n      (( max = count > max ? count : max ))\n    elif [[\
    \ ${input:$i:1} == \")\" ]]; then\n      (( count-- ))\n    elif [[ ${input:$i:1}\
    \ == \" \" ]]; then\n      output+=($max)\n      max=0\n      count=0\n    fi\n\
    \  done\n  output+=($max)\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local input=$1\n    local result=()\n    local max_level=0\n    local\
    \ level=0\n    local i=0\n    local c=''\n    local len=${#input}\n    while [\
    \ $i -lt $len ]; do\n        c=${input:$i:1}\n        if [ \"$c\" == \"(\" ];\
    \ then\n            ((level++))\n            if [ $level -gt $max_level ]; then\n\
    \                max_level=$level\n            fi\n        elif [ \"$c\" == \"\
    )\" ]; then\n            ((level--))\n        elif [ \"$c\" == \" \" ]; then\n\
    \            result+=($max_level)\n            max_level=0\n            level=0\n\
    \        fi\n        ((i++))\n    done\n    result+=($max_level)\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  # Use echo to output the result, e.g.\n  # echo\
    \ $result\n  echo \"Not implemented\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  echo \"Not implemented\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=\"$1\"\n    local max_depth=0\n    local current_depth=0\n\
    \    local result=\"\"\n    for (( i=0; i<${#str}; i++ )); do\n        if [[ \"\
    ${str:$i:1}\" == \"(\" ]]; then\n            ((current_depth++))\n           \
    \ if ((current_depth > max_depth)); then\n                max_depth=$current_depth\n\
    \            fi\n        elif [[ \"${str:$i:1}\" == \")\" ]]; then\n         \
    \   ((current_depth--))\n        fi\n        if [[ \"${str:$i:1}\" == \" \" ]];\
    \ then\n            result+=\"$max_depth \"\n            max_depth=0\n       \
    \     current_depth=0\n        fi\n    done\n    result+=\"$max_depth\"\n    echo\
    \ \"$result\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    local str=$1\n    local max_depth=0\n   \
    \ local depth=0\n    local result=()\n    for ((i=0; i<${#str}; i++)); do\n  \
    \      local char=${str:$i:1}\n        if [[ $char == \"(\" ]]; then\n       \
    \     ((depth++))\n            if ((depth > max_depth)); then\n              \
    \  max_depth=$depth\n            fi\n        elif [[ $char == \")\" ]]; then\n\
    \            ((depth--))\n        elif [[ $char == \" \" ]]; then\n          \
    \  result+=($max_depth)\n            max_depth=0\n            depth=0\n      \
    \  fi\n    done\n    result+=($max_depth)\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local max_depth=0\n    local cur_depth=0\n    local\
    \ result=()\n    for ((i=0; i<${#str}; i++)); do\n        if [[ ${str:$i:1} ==\
    \ '(' ]]; then\n            ((cur_depth++))\n            if ((cur_depth > max_depth));\
    \ then\n                max_depth=$cur_depth\n            fi\n        elif [[\
    \ ${str:$i:1} == ')' ]]; then\n            ((cur_depth--))\n        elif [[ ${str:$i:1}\
    \ == ' ' ]]; then\n            result+=($max_depth)\n            max_depth=0\n\
    \            cur_depth=0\n        fi\n    done\n    result+=($max_depth)\n   \
    \ echo ${result[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local parens_str=\"$1\"\n    local parens_arr=()\n    local max_nesting=0\n\
    \    local curr_nesting=0\n    local parens_str_len=${#parens_str}\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n\
    \    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n\
    \    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n\
    \    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n\
    \    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n\
    \    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n\
    \    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local\
    \ ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n\
    \    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local\
    \ ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n\
    \    local uuu=0\n    local vvv=0\n    local www=0\n    local xxx=0\n    local\
    \ yyy=\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local str=$1\n  local result=()\n  local max_level=0\n  local level=0\n\
    \  local i=0\n  local len=${#str}\n  local c=''\n  local c_prev=''\n  local c_next=''\n\
    \  while [ $i -lt $len ]; do\n    c=${str:$i:1}\n    c_prev=${str:$((i-1)):1}\n\
    \    c_next=${str:$((i+1)):1}\n    if [ \"$c\" == \"(\" ]; then\n      ((level++))\n\
    \      if [ $level -gt $max_level ]; then\n        max_level=$level\n      fi\n\
    \    elif [ \"$c\" == \")\" ]; then\n      ((level--))\n    fi\n    if [ \"$c\"\
    \ == \" \" ] && [ \"$c_prev\" != \" \" ] && [ \"$c_next\" != \" \" ]; then\n \
    \     result+=($max_level)\n      max_level=0\n    fi\n    ((i++))\n  done\n \
    \ result+=($max_level)\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  # echo $1\n  # echo \"$1\"\n  # echo \"${1}\"\
    \n  # echo \"${1// /}\"\n  # echo \"${1// /}\" | grep -o '(' | wc -l\n  # echo\
    \ \"${1// /}\" | grep -o ')' | wc -l\n  # echo \"${1// /}\" | grep -o '(' | wc\
    \ -l | grep -o ')' | wc -l\n  # echo \"${1// /}\" | grep -o '(' | wc -l | grep\
    \ -o ')' | wc -l | wc -l\n  # echo \"${1// /}\" | grep -o '(' | wc -l | grep -o\
    \ ')' | wc -l | wc -l | wc -l\n  # echo \"${1// /}\" | grep -o '(' | wc -l | grep\
    \ -o ')' | wc -l | wc -l | wc -l | wc -l\n  # echo \"${1// /}\" | grep -o '('\
    \ | wc -l | grep -o ')' | wc -l | wc -l | wc -l | wc -l | wc -l\n  # echo \"${1//\
    \ /}\" | grep -o '(' | wc -l | grep -o ')' | wc -l | wc -l | wc -l | wc -l | wc\
    \ -l | wc -l\n  # echo \"${1// /}\" | grep -o '(' | wc -l | grep -o ')' | wc -l\
    \ | wc -l | wc -l | wc -l | wc -l | wc -l | wc -l\n  # echo \"${1// /}\" | grep\
    \ -o '(' | wc -l | grep -o ')' | wc -l | wc -l | wc -l | wc -l | wc -l | wc -l\
    \ | wc -l | wc -l\n  # echo \"${1// /}\" | grep -o '(' | wc -l | grep -o ')' |\
    \ wc -l | wc -\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpil8z5nxv.sh: line 26: syntax error near unexpected token `}''

    /tmp/tmpil8z5nxv.sh: line 26: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp652i77ti.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmp652i77ti.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local result=()\n    local max_depth=0\n    local depth=0\n\
    \    local char\n\n    for (( i=0; i<${#str}; i++ )); do\n        char=${str:$i:1}\n\
    \        if [[ $char == '(' ]]; then\n            (( depth++ ))\n            ((\
    \ max_depth = depth > max_depth ? depth : max_depth ))\n        elif [[ $char\
    \ == ')' ]]; then\n            (( depth-- ))\n        elif [[ $char == ' ' ]];\
    \ then\n            result+=($max_depth)\n            max_depth=0\n        fi\n\
    \    done\n    result+=($max_depth)\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # echo $1\n    # echo $1 | sed 's/\\(/\\\
    n/g' | sed 's/\\)/\\n/g' | grep -v '^$' | wc -l\n    # echo $1 | sed 's/\\(/\\\
    n/g' | sed 's/\\)/\\n/g' | grep -v '^$' | wc -l\n    # echo $1 | sed 's/\\(/\\\
    n/g' | sed 's/\\)/\\n/g' | grep -v '^$' | wc -l\n    # echo $1 | sed 's/\\(/\\\
    n/g' | sed 's/\\)/\\n/g' | grep -v '^$' | wc -l\n    # echo $1 | sed 's/\\(/\\\
    n/g' | sed 's/\\)/\\n/g' | grep -v '^$' | wc -l\n    # echo $1 | sed 's/\\(/\\\
    n/g' | sed 's/\\)/\\n/g' | grep -v '^$' | wc -l\n    # echo $1 | sed 's/\\(/\\\
    n/g' | sed 's/\\)/\\n/g' | grep -v '^$' | wc -l\n    # echo $1 | sed 's/\\(/\\\
    n/g' | sed 's/\\)/\\n/g' | grep -v '^$' | wc -l\n    # echo $1 | sed 's/\\(/\\\
    n/g' | sed 's/\\)/\\n/g' | grep -v '^$' | wc -l\n    # echo $1 | sed 's/\\(/\\\
    n/g' | sed 's/\\)/\\n/g' | grep -v '^$' | wc -l\n    # echo $1 | sed 's/\\(/\\\
    n/g' | sed 's/\\)/\\n/g' | grep -v '^$' | wc -l\n    # echo $1 | sed 's/\\(/\\\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpczjdgqf7.sh: line 24: syntax error near unexpected token `}''

    /tmp/tmpczjdgqf7.sh: line 24: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  # echo $1\n  # echo $1 | grep -o '(' | wc -l\n\
    \  # echo $1 | grep -o ')' | wc -l\n  # echo $1 | grep -o '(' | wc -l | grep -o\
    \ ')' | wc -l\n  # echo $1 | grep -o '(' | wc -l | grep -o ')' | wc -l\n  # echo\
    \ $1 | grep -o '(' | wc -l | grep -o ')' | wc -l\n  # echo $1 | grep -o '(' |\
    \ wc -l | grep -o ')' | wc -l\n  # echo $1 | grep -o '(' | wc -l | grep -o ')'\
    \ | wc -l\n  # echo $1 | grep -o '(' | wc -l | grep -o ')' | wc -l\n  # echo $1\
    \ | grep -o '(' | wc -l | grep -o ')' | wc -l\n  # echo $1 | grep -o '(' | wc\
    \ -l | grep -o ')' | wc -l\n  # echo $1 | grep -o '(' | wc -l | grep -o ')' |\
    \ wc -l\n  # echo $1 | grep -o '(' | wc -l | grep -o ')' | wc -l\n  # echo $1\
    \ | grep -o '(' | wc -l | grep -o ')' | wc -l\n  # echo $1 | grep -o '(' | wc\
    \ -l | grep -o ')' | wc -l\n  # echo $1 | grep -o '(' | wc -l | grep -o ')' |\
    \ wc -l\n  # echo $1 | grep -o '(' | wc -l | grep -o ')' | wc -l\n  # echo $1\
    \ | grep -o '(' | wc -l | grep -o ')' | wc -l\n  # echo $1 | grep -o '(' | wc\
    \ -l | grep -o ')' | wc -l\n  # echo $1 | grep -o '(' | wc -l\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph7grfd8q.sh: line 31: syntax error near unexpected token `}''

    /tmp/tmph7grfd8q.sh: line 31: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local max_depth=0\n    local cur_depth=0\n    local\
    \ max_depth_arr=()\n    for (( i=0; i<${#str}; i++ )); do\n        local char=${str:$i:1}\n\
    \        if [[ $char == \"(\" ]]; then\n            ((cur_depth++))\n        \
    \    if ((cur_depth > max_depth)); then\n                max_depth=$cur_depth\n\
    \            fi\n        elif [[ $char == \")\" ]]; then\n            ((cur_depth--))\n\
    \            if ((cur_depth == 0)); then\n                max_depth_arr+=($max_depth)\n\
    \                max_depth=0\n            fi\n        fi\n    done\n    echo ${max_depth_arr[@]}\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local input=$1\n    local max_depth=0\n    local current_depth=0\n  \
    \  local max_depth_list=()\n    local current_char=''\n    local i=0\n    local\
    \ len=${#input}\n    while [ $i -lt $len ]; do\n        current_char=${input:$i:1}\n\
    \        if [ \"$current_char\" == \"(\" ]; then\n            current_depth=$((current_depth+1))\n\
    \            if [ $current_depth -gt $max_depth ]; then\n                max_depth=$current_depth\n\
    \            fi\n        elif [ \"$current_char\" == \")\" ]; then\n         \
    \   current_depth=$((current_depth-1))\n        elif [ \"$current_char\" == \"\
    \ \" ]; then\n            max_depth_list+=($max_depth)\n            max_depth=0\n\
    \            current_depth=0\n        fi\n        i=$((i+1))\n    done\n    max_depth_list+=($max_depth)\n\
    \    echo ${max_depth_list[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_depth=0\n    local\
    \ depth=0\n    local i=0\n    local len=${#input}\n    while [ $i -lt $len ];\
    \ do\n        local char=${input:$i:1}\n        if [ \"$char\" == \"(\" ]; then\n\
    \            ((depth++))\n            ((max_depth = depth > max_depth ? depth\
    \ : max_depth))\n        elif [ \"$char\" == \")\" ]; then\n            ((depth--))\n\
    \        elif [ \"$char\" == \" \" ]; then\n            output+=($max_depth)\n\
    \            max_depth=0\n            depth=0\n        fi\n        ((i++))\n \
    \   done\n    output+=($max_depth)\n    echo ${output[@]}\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # This function is optional and can be deleted\
    \ if not needed.\n    # You can add more functions as well.\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n   \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3q_4uhlj.sh: line 173: syntax error near unexpected token `}''

    /tmp/tmp3q_4uhlj.sh: line 173: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_depth=0\n    local\
    \ depth=0\n    local i=0\n    local c=''\n    local len=${#input}\n    while [\
    \ $i -lt $len ]; do\n        c=${input:$i:1}\n        if [ \"$c\" == \"(\" ];\
    \ then\n            ((depth++))\n            ((max_depth=depth>max_depth?depth:max_depth))\n\
    \        elif [ \"$c\" == \")\" ]; then\n            ((depth--))\n        fi\n\
    \        ((i++))\n    done\n    echo $max_depth\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local max_level=0\n    local level=0\n    local result=()\n\
    \    for ((i=0; i<${#str}; i++)); do\n        if [[ ${str:$i:1} == '(' ]]; then\n\
    \            ((level++))\n            if ((level > max_level)); then\n       \
    \         max_level=$level\n            fi\n        elif [[ ${str:$i:1} == ')'\
    \ ]]; then\n            ((level--))\n        elif [[ ${str:$i:1} == ' ' ]]; then\n\
    \            result+=($max_level)\n            max_level=0\n            level=0\n\
    \        fi\n    done\n    result+=($max_level)\n    echo ${result[@]}\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"\"\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    local input=$1\n    local max_depth=0\n \
    \   local current_depth=0\n    local output=()\n    for ((i=0; i<${#input}; i++));\
    \ do\n        local char=${input:$i:1}\n        if [[ $char == \"(\" ]]; then\n\
    \            ((current_depth++))\n            if ((current_depth > max_depth));\
    \ then\n                max_depth=$current_depth\n            fi\n        elif\
    \ [[ $char == \")\" ]]; then\n            ((current_depth--))\n        elif [[\
    \ $char == \" \" ]]; then\n            output+=($max_depth)\n            max_depth=0\n\
    \            current_depth=0\n        fi\n    done\n    output+=($max_depth)\n\
    \    echo ${output[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use print\n    # Example: print \"Hello world!\"\n    echo $1\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local max_depth=0\n    local depth=0\n    local result=()\n\
    \    for ((i=0; i<${#str}; i++)); do\n        if [[ ${str:$i:1} == '(' ]]; then\n\
    \            ((depth++))\n            if ((depth > max_depth)); then\n       \
    \         max_depth=$depth\n            fi\n        elif [[ ${str:$i:1} == ')'\
    \ ]]; then\n            ((depth--))\n        elif [[ ${str:$i:1} == ' ' ]]; then\n\
    \            result+=($max_depth)\n            max_depth=0\n            depth=0\n\
    \        fi\n    done\n    result+=($max_depth)\n    echo ${result[@]}\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local max_level=0\n    local level=0\n    local result=()\n\
    \    for ((i=0; i<${#str}; i++)); do\n        if [[ ${str:$i:1} == '(' ]]; then\n\
    \            ((level++))\n            if ((level > max_level)); then\n       \
    \         max_level=$level\n            fi\n        elif [[ ${str:$i:1} == ')'\
    \ ]]; then\n            ((level--))\n        elif [[ ${str:$i:1} == ' ' ]]; then\n\
    \            result+=($max_level)\n            max_level=0\n            level=0\n\
    \        fi\n    done\n    result+=($max_level)\n    echo \"${result[@]}\"\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    echo $1 | tr -d ' ' | tr -d '(' | tr -d ')'\
    \ | wc -c\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_depth=0\n    local\
    \ current_depth=0\n    local i=0\n    local length=${#input}\n    local char=''\n\
    \    local char_ascii=0\n\n    while [ $i -lt $length ]; do\n        char=${input:$i:1}\n\
    \        char_ascii=$(printf '%d' \"'$char\")\n        if [ $char_ascii -eq 40\
    \ ]; then\n            ((current_depth++))\n            if [ $current_depth -gt\
    \ $max_depth ]; then\n                max_depth=$current_depth\n            fi\n\
    \        elif [ $char_ascii -eq 41 ]; then\n            ((current_depth--))\n\
    \        elif [ $char_ascii -eq 32 ]; then\n            output+=($max_depth)\n\
    \            max_depth=0\n            current_depth=0\n        fi\n        ((i++))\n\
    \    done\n    output+=($max_depth)\n    echo ${output[@]}\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local parens=$1\n  local result=()\n  local max_depth=0\n  local depth=0\n\
    \  local i=0\n  local c=''\n  local len=${#parens}\n  while [ $i -lt $len ]; do\n\
    \    c=${parens:$i:1}\n    if [ \"$c\" == \"(\" ]; then\n      ((depth++))\n \
    \     if [ $depth -gt $max_depth ]; then\n        max_depth=$depth\n      fi\n\
    \    elif [ \"$c\" == \")\" ]; then\n      ((depth--))\n    elif [ \"$c\" == \"\
    \ \" ]; then\n      result+=($max_depth)\n      max_depth=0\n      depth=0\n \
    \   fi\n    ((i++))\n  done\n  result+=($max_depth)\n  echo ${result[@]}\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local max_depth=0\n    local cur_depth=0\n    local\
    \ max_depth_arr=()\n    for ((i=0; i<${#str}; i++)); do\n        if [[ ${str:$i:1}\
    \ == \"(\" ]]; then\n            ((cur_depth++))\n            if ((cur_depth >\
    \ max_depth)); then\n                max_depth=$cur_depth\n            fi\n  \
    \      elif [[ ${str:$i:1} == \")\" ]]; then\n            ((cur_depth--))\n  \
    \          if ((cur_depth == 0)); then\n                max_depth_arr+=($max_depth)\n\
    \                max_depth=0\n            fi\n        fi\n    done\n    echo \"\
    ${max_depth_arr[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local input=$1\n  local max_depth=0\n  local current_depth=0\n  local result=()\n\
    \  for ((i=0; i<${#input}; i++)); do\n    if [[ ${input:$i:1} == '(' ]]; then\n\
    \      ((current_depth++))\n      ((max_depth = current_depth > max_depth ? current_depth\
    \ : max_depth))\n    elif [[ ${input:$i:1} == ')' ]]; then\n      ((current_depth--))\n\
    \    elif [[ ${input:$i:1} == ' ' ]]; then\n      result+=($max_depth)\n     \
    \ max_depth=0\n      current_depth=0\n    fi\n  done\n  result+=($max_depth)\n\
    \  echo ${result[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    local str=$1\n    local arr=()\n    local\
    \ count=0\n    local max=0\n    for ((i=0; i<${#str}; i++)); do\n        if [[\
    \ ${str:$i:1} == \"(\" ]]; then\n            count=$((count+1))\n            if\
    \ [[ $count -gt $max ]]; then\n                max=$count\n            fi\n  \
    \      elif [[ ${str:$i:1} == \")\" ]]; then\n            count=$((count-1))\n\
    \        elif [[ ${str:$i:1} == \" \" ]]; then\n            arr+=($max)\n    \
    \        max=0\n            count=0\n        fi\n    done\n    arr+=($max)\n \
    \   echo ${arr[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  # Use echo to output the result, e.g.\n  # echo\
    \ $result\n  #\n  # For example,\n  # echo 'Hello world'\n  #\n  # You can use\
    \ echo to output multiple values, e.g.\n  # echo $result1 $result2 ...\n  #\n\
    \  # If your output has multiple lines, please note that:\n  # 1) The output should\
    \ start from the first line.\n  # 2) There should be no extra empty lines at the\
    \ end of your output.\n  # 3) The last line of output should end with the newline\
    \ character '\\n'.\n  # 4) Please make sure that you have no extra spaces at the\
    \ end of each line.\n  # 5) Please make sure that there are no extra empty lines\
    \ in your output.\n  #\n  # Hint: You can use 'echo -n' to remove the newline\
    \ character at the end of output.\n  #\n  # For example,\n  # echo -n 'Hello world'\n\
    \  #\n  # If your output is binary data instead of text, please note that:\n \
    \ # 1) Your output should start from the first byte.\n  # 2) There should be no\
    \ extra empty bytes at the end of your output.\n  # 3) Please make sure that you\
    \ have no extra spaces at the end of your output.\n  # 4) Please make sure that\
    \ there are no extra empty bytes in your output.\n  #\n  # Hint: You can use 'od\
    \ -t x1' to print binary data in hexadecimal format.\n  #\n  # For example,\n\
    \  # echo -n -e '\\x41\\x42\\x43' | od -t x1\n  # 0000000 41 42 43 0a\n  # 0000004\n\
    \  #\n  # If your output is a binary file, please note that:\n  # 1) Your output\
    \ should start from the first byte of the file.\n  # 2) There should be no extra\
    \ empty bytes at the end of your output file.\n  # 3) Please make sure that you\
    \ have no extra spaces at the end of your output file.\n  # 4) Please make sure\
    \ that there are no extra empty bytes in your output file.\n  #\n  # Hint: You\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjpqix7al.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmpjpqix7al.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    Not implemented\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local arr=($str)\n    local max_depth=0\n    local\
    \ curr_depth=0\n    local result=()\n    for i in \"${arr[@]}\"; do\n        for\
    \ (( j=0; j<${#i}; j++ )); do\n            if [[ ${i:$j:1} == \"(\" ]]; then\n\
    \                ((curr_depth++))\n                if ((curr_depth > max_depth));\
    \ then\n                    max_depth=$curr_depth\n                fi\n      \
    \      elif [[ ${i:$j:1} == \")\" ]]; then\n                ((curr_depth--))\n\
    \            fi\n        done\n        result+=($max_depth)\n        max_depth=0\n\
    \        curr_depth=0\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n\tlocal str=\"$1\"\n\tlocal max_depth=0\n\tlocal depth=0\n\tlocal result=\"\
    \"\n\tfor (( i=0; i<${#str}; i++ )); do\n\t\tif [[ \"${str:$i:1}\" == \"(\" ]];\
    \ then\n\t\t\t(( depth++ ))\n\t\t\tif (( depth > max_depth )); then\n\t\t\t\t\
    max_depth=$depth\n\t\t\tfi\n\t\telif [[ \"${str:$i:1}\" == \")\" ]]; then\n\t\t\
    \t(( depth-- ))\n\t\tfi\n\t\tif [[ \"${str:$i:1}\" == \" \" ]]; then\n\t\t\tresult=\"\
    $result $max_depth\"\n\t\t\tmax_depth=0\n\t\tfi\n\tdone\n\tresult=\"$result $max_depth\"\
    \n\techo \"$result\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local arr=()\n    local max=0\n    local count=0\n\
    \    for (( i=0; i<${#str}; i++ )); do\n        if [[ ${str:$i:1} == \"(\" ]];\
    \ then\n            (( count++ ))\n            if (( count > max )); then\n  \
    \              max=$count\n            fi\n        elif [[ ${str:$i:1} == \")\"\
    \ ]]; then\n            (( count-- ))\n        elif [[ ${str:$i:1} == \" \" ]];\
    \ then\n            arr+=($max)\n            max=0\n            count=0\n    \
    \    fi\n    done\n    arr+=($max)\n    echo ${arr[@]}\n}\n\ncandidate() {\n \
    \   parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  echo $1 | sed -e 's/[()]/ /g' | awk '{print NF}'\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  # Use echo to output the result, e.g.\n  # echo\
    \ \"hello world\"\n  #\n  # To debug:\n  # echo \"Debug messages...\" >&2\n  #\n\
    \  # To write to a file:\n  # echo \"hello world\" > output.txt\n  #\n  # To exit\
    \ with an error:\n  # >&2 echo \"Error message...\"\n  # exit 1\n  #\n  # To exit\
    \ with no error:\n  # exit 0\n  #\n  # To read from a file:\n  # read line < input.txt\n\
    \  #\n  # To read from stdin:\n  # while read line; do\n  #   echo $line\n  #\
    \ done\n  #\n  # To pass all arguments to a function:\n  # my_function \"$@\"\n\
    \  #\n  # To get the number of arguments passed to a function:\n  # $#\n  #\n\
    \  # To get the Nth argument passed to a function:\n  # $N\n  #\n  # To get the\
    \ arguments passed to a function as an array:\n  # $@\n  #\n  # To get the arguments\
    \ passed to a function as a string:\n  # $*\n  #\n  # To get the exit code of\
    \ the last command:\n  # $?\n  #\n  # To get the process ID of the current shell:\n\
    \  # $$\n  #\n  # To get the process ID of the last background command:\n  # $!\n\
    \  #\n  # To get the number of positional parameters:\n  # $#\n  #\n  # To get\
    \ the Nth positional parameter:\n  # $N\n  #\n  # To get the positional parameters\
    \ as an array:\n  # $@\n  #\n  # To get the positional parameters as a string:\n\
    \  # $*\n  #\n  # To get the exit code of the last command:\n  # $?\n  #\n  #\
    \ To get the process ID of the current shell:\n  # $$\n  #\n  # To get the process\
    \ ID of the last background command:\n  # $!\n  #\n  # To get the number of positional\
    \ parameters:\n  # $#\n  #\n  #\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjuax_ro9.sh: line 84: syntax error near unexpected token `}''

    /tmp/tmpjuax_ro9.sh: line 84: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # echo $1\n    # echo $1 | sed -e 's/ /\\\
    n/g'\n    # echo $1 | sed -e 's/ /\\n/g' | sed -e 's/\\(/\\n/g' | sed -e 's/\\\
    )/\\n/g'\n    # echo $1 | sed -e 's/ /\\n/g' | sed -e 's/\\(/\\n/g' | sed -e 's/\\\
    )/\\n/g' | sed -e 's/\\n\\n/\\n/g'\n    # echo $1 | sed -e 's/ /\\n/g' | sed -e\
    \ 's/\\(/\\n/g' | sed -e 's/\\)/\\n/g' | sed -e 's/\\n\\n/\\n/g' | sed -e 's/\\\
    n\\n/\\n/g'\n    # echo $1 | sed -e 's/ /\\n/g' | sed -e 's/\\(/\\n/g' | sed -e\
    \ 's/\\)/\\n/g' | sed -e 's/\\n\\n/\\n/g' | sed -e 's/\\n\\n/\\n/g' | sed -e 's/\\\
    n\\n/\\n/g'\n    # echo $1 | sed -e 's/ /\\n/g' | sed -e 's/\\(/\\n/g' | sed -e\
    \ 's/\\)/\\n/g' | sed -e 's/\\n\\n/\\n/g' | sed -e 's/\\n\\n/\\n/g' | sed -e 's/\\\
    n\\n/\\n/g' | sed -e 's/\\n\\n/\\n/g'\n    # echo $1 | sed -e 's/ /\\n/g' | sed\
    \ -e 's/\\(/\\n/g' | sed -e 's/\\)/\\n/g' | sed -e 's/\\n\\n/\\n/g' | sed -e '\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5o9ci8m8.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmp5o9ci8m8.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local str=\"$1\"\n  local max_depth=0\n  local depth=0\n  local result=()\n\
    \  for (( i=0; i<${#str}; i++ )); do\n    if [[ \"${str:$i:1}\" == \"(\" ]]; then\n\
    \      ((depth++))\n      if ((depth > max_depth)); then\n        max_depth=$depth\n\
    \      fi\n    elif [[ \"${str:$i:1}\" == \")\" ]]; then\n      ((depth--))\n\
    \    elif [[ \"${str:$i:1}\" == \" \" ]]; then\n      result+=($max_depth)\n \
    \     max_depth=0\n    fi\n  done\n  result+=($max_depth)\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_nesting=0\n    local\
    \ current_nesting=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n  \
    \  local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n\
    \    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n\
    \    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n\
    \    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n\
    \    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n\
    \    local aaa=0\n    local bbb=0\n    local ccc=0\n    local ddd=0\n    local\
    \ eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n\
    \    local jjj=0\n    local kkk=0\n    local lll=0\n    local mmm=0\n    local\
    \ nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n\
    \    local sss=0\n    local ttt=0\n    local uuu=0\n    local vvv=0\n    local\
    \ www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa=0\n\
    \    local bbbb=0\n    local cccc\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    echo $1 | tr -d ' ' | sed 's/[^()]//g' |\
    \ sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g'\
    \ | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g'\
    \ | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g'\
    \ | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g'\
    \ | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g'\
    \ | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g'\
    \ | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g'\
    \ | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g'\
    \ | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g'\
    \ | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/()//g'\
    \ | sed 's/()//g' | sed 's/()//g' | sed 's/()//g' | sed 's/\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmvsrw6h1.sh: line 11: unexpected EOF while looking for matching
    `''''

    /tmp/tmpmvsrw6h1.sh: line 26: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    Not implemented\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    Not implemented\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  echo $1\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local str=$1\n  local result=()\n  local max_level=0\n  local level=0\n\
    \  for ((i=0; i<${#str}; i++)); do\n    local char=${str:$i:1}\n    if [[ $char\
    \ == '(' ]]; then\n      ((level++))\n      if ((level > max_level)); then\n \
    \       max_level=$level\n      fi\n    elif [[ $char == ')' ]]; then\n      ((level--))\n\
    \    elif [[ $char == ' ' ]]; then\n      result+=($max_level)\n      max_level=0\n\
    \      level=0\n    fi\n  done\n  result+=($max_level)\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local parens_str\n    local max_depth\n    local i\n\
    \    local j\n    local depth\n    local parens_arr\n    local parens_arr_len\n\
    \    local result_arr\n    local result_arr_len\n    local result\n\n    # Split\
    \ the string into groups of parentheses\n    parens_str=$(echo \"$str\" | sed\
    \ -e 's/ /\\n/g')\n\n    # For each group, find the deepest level of nesting\n\
    \    while read -r parens; do\n        # Initialize the max depth to 0\n     \
    \   max_depth=0\n\n        # Initialize the depth to 0\n        depth=0\n\n  \
    \      # Convert the string to an array\n        parens_arr=($(echo \"$parens\"\
    \ | sed -e 's/./& /g'))\n\n        # Get the length of the array\n        parens_arr_len=${#parens_arr[@]}\n\
    \n        # Iterate through the array\n        for ((i=0; i<parens_arr_len; i++));\
    \ do\n            # If the character is an opening parenthesis, increment the\
    \ depth\n            if [[ ${parens_arr[$i]} == '(' ]]; then\n               \
    \ ((depth++))\n            # If the character is a closing parenthesis, decrement\
    \ the depth\n            elif [[ ${parens_arr[$i]} == ')' ]]; then\n         \
    \       ((depth--))\n            fi\n\n            # If the depth is greater than\
    \ the max depth, set the max depth to the depth\n            if [[ $depth -gt\
    \ $max_depth ]]; then\n                max_depth=$depth\n            fi\n    \
    \    done\n\n        # Add the max depth to the result array\n        result_arr[${#result_arr[@]}]=$max_depth\n\
    \    done <<< \"$parens_str\"\n\n    # Get the length of the result array\n  \
    \  result_arr_len=${#result_arr[@]}\n\n    # Initialize the result to an empty\
    \ string\n    result=''\n\n    # Iterate through the result array\n    for ((i=0;\
    \ i<result_arr_len; i++)); do\n        # Add the current element to the result\n\
    \        result=\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyncwzn84.sh: line 79: unexpected EOF while looking for matching
    `"''

    /tmp/tmpyncwzn84.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n  local max_nesting=0\n\
    \  local nesting=0\n  local max_nesting_arr=()\n  for parens in \"${parens_arr[@]}\"\
    ; do\n    for ((i=0; i<${#parens}; i++)); do\n      if [[ \"${parens:$i:1}\" ==\
    \ \"(\" ]]; then\n        ((nesting++))\n      elif [[ \"${parens:$i:1}\" == \"\
    )\" ]]; then\n        ((nesting--))\n      fi\n      if [[ $nesting -gt $max_nesting\
    \ ]]; then\n        max_nesting=$nesting\n      fi\n    done\n    max_nesting_arr+=($max_nesting)\n\
    \    max_nesting=0\n    nesting=0\n  done\n  echo \"${max_nesting_arr[@]}\"\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local str=$1\n  local max_depth=0\n  local curr_depth=0\n  local result=()\n\
    \  for (( i=0; i<${#str}; i++ )); do\n    local c=${str:$i:1}\n    if [[ \"$c\"\
    \ == \"(\" ]]; then\n      (( curr_depth++ ))\n      if (( curr_depth > max_depth\
    \ )); then\n        max_depth=$curr_depth\n      fi\n    elif [[ \"$c\" == \"\
    )\" ]]; then\n      (( curr_depth-- ))\n    elif [[ \"$c\" == \" \" ]]; then\n\
    \      result+=($max_depth)\n      max_depth=0\n      curr_depth=0\n    fi\n \
    \ done\n  result+=($max_depth)\n  echo ${result[@]}\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_level=0\n    local\
    \ level=0\n    local i=0\n    local c=''\n    local start_idx=0\n    local end_idx=0\n\
    \    local len=${#input}\n\n    while [ $i -lt $len ]; do\n        c=${input:$i:1}\n\
    \        if [ \"$c\" == \"(\" ]; then\n            if [ $level -eq 0 ]; then\n\
    \                start_idx=$i\n            fi\n            level=$((level+1))\n\
    \            if [ $level -gt $max_level ]; then\n                max_level=$level\n\
    \            fi\n        elif [ \"$c\" == \")\" ]; then\n            level=$((level-1))\n\
    \            if [ $level -eq 0 ]; then\n                end_idx=$i\n         \
    \       output+=($max_level)\n                max_level=0\n            fi\n  \
    \      fi\n        i=$((i+1))\n    done\n\n    echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # TODO: Write your code here\n    # Hint: You may use the following functions:\n\
    \    #       'echo' to print to stdout\n    #       'read' to read from stdin\n\
    \    #       'expr' to evaluate arithmetic expressions\n    #       'bc' to evaluate\
    \ arithmetic expressions\n    #       'tr' to translate characters\n    #    \
    \   'sed' to perform text transformations\n    #       'awk' to perform text transformations\n\
    \    #       'grep' to find text patterns\n    #       'sort' to sort lines\n\
    \    #       'uniq' to remove duplicate lines\n    #       'wc' to count lines,\
    \ words, and characters\n    #       'cut' to select fields from lines\n    #\
    \       'head' to select lines from the beginning of files\n    #       'tail'\
    \ to select lines from the end of files\n    #       'cat' to concatenate files\n\
    \    #       'tr' to translate characters\n    #       'rev' to reverse lines\n\
    \    #       'paste' to merge lines\n    #       'join' to join lines on a common\
    \ field\n    #       'comm' to compare sorted files line by line\n    #      \
    \ 'diff' to compare files line by line\n    #       'gzip' to compress files\n\
    \    #       'gunzip' to uncompress files\n    #       'tar' to create archives\n\
    \    #       'file' to determine file type\n    #       'sed' to perform text\
    \ transformations\n    #       'awk' to perform text transformations\n    #  \
    \     'grep' to find text patterns\n    #       'sort' to sort lines\n    #  \
    \     'uniq' to remove duplicate lines\n    #       'wc' to count lines, words,\
    \ and characters\n    #       'cut' to select fields from lines\n    #       'head'\
    \ to select lines from the beginning of files\n    #       'tail' to select lines\
    \ from the end of files\n    #       'cat' to concatenate files\n    #       'tr'\
    \ to translate characters\n    #       'rev' to reverse lines\n    #       'paste'\
    \ to merge lines\n    #       'join' to join lines on a common field\n    #  \
    \     'comm' to compare sorted files line by line\n    #       'diff' to\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprinbmmpd.sh: line 53: syntax error near unexpected token `}''

    /tmp/tmprinbmmpd.sh: line 53: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local input=\"$1\"\n  local result=()\n  local max_level=0\n  local level=0\n\
    \  local i=0\n  local c=''\n  local len=${#input}\n  while [ $i -lt $len ]; do\n\
    \    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ]; then\n      level=$((level+1))\n\
    \      if [ $level -gt $max_level ]; then\n        max_level=$level\n      fi\n\
    \    elif [ \"$c\" == \")\" ]; then\n      level=$((level-1))\n    elif [ \"$c\"\
    \ == \" \" ]; then\n      result+=($max_level)\n      max_level=0\n      level=0\n\
    \    fi\n    i=$((i+1))\n  done\n  result+=($max_level)\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # TODO: implement this function\n    # Hint: use a stack to keep track\
    \ of the current level of nesting\n    # Hint: use a variable to keep track of\
    \ the maximum level of nesting\n    # Hint: use a variable to keep track of the\
    \ current level of nesting\n    # Hint: use a variable to keep track of the current\
    \ group\n    # Hint: use a variable to keep track of the current character\n \
    \   # Hint: use a variable to keep track of the current index\n    # Hint: use\
    \ a variable to keep track of the current length\n    # Hint: use a variable to\
    \ keep track of the current output\n    # Hint: use a variable to keep track of\
    \ the current string\n    # Hint: use a variable to keep track of the current\
    \ substring\n    # Hint: use a variable to keep track of the current substring\
    \ length\n    # Hint: use a variable to keep track of the current substring index\n\
    \    # Hint: use a variable to keep track of the current substring output\n  \
    \  # Hint: use a variable to keep track of the current substring string\n    #\
    \ Hint: use a variable to keep track of the current substring substring\n    #\
    \ Hint: use a variable to keep track of the current substring substring length\n\
    \    # Hint: use a variable to keep track of the current substring substring index\n\
    \    # Hint: use a variable to keep track of the current substring substring output\n\
    \    # Hint: use a variable to keep track of the current substring substring string\n\
    \    # Hint: use a variable to keep track of the current substring substring substring\n\
    \    # Hint: use a variable to keep track of the current substring substring substring\
    \ length\n    # Hint: use a variable to keep track of the current substring substring\
    \ substring index\n    # Hint: use a variable to keep track of the current substring\
    \ substring substring output\n    # Hint: use a variable to keep track of the\
    \ current substring substring substring string\n    # Hint: use a variable to\
    \ keep track of the current substring substring substring substring\n    # Hint:\
    \ use a variable to keep track of the current substring substring substring substring\
    \ length\n    # Hint: use a variable\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp257i4q7d.sh: line 38: syntax error near unexpected token `}''

    /tmp/tmp257i4q7d.sh: line 38: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  echo $1 | tr -d ' ' | sed 's/[^()]//g' | sed\
    \ 's/()//g' | awk '{print length}'\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp652i77ti.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmp652i77ti.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_depth=0\n    local\
    \ depth=0\n    local char=''\n    local i=0\n    local len=${#input}\n\n    while\
    \ [ $i -lt $len ]; do\n        char=${input:$i:1}\n        if [ \"$char\" == \"\
    (\" ]; then\n            ((depth++))\n            if [ $depth -gt $max_depth ];\
    \ then\n                max_depth=$depth\n            fi\n        elif [ \"$char\"\
    \ == \")\" ]; then\n            ((depth--))\n        elif [ \"$char\" == \" \"\
    \ ]; then\n            output+=(\"$max_depth\")\n            max_depth=0\n   \
    \         depth=0\n        fi\n        ((i++))\n    done\n    output+=(\"$max_depth\"\
    )\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    Not implemented\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  #echo \"Input: $1\"\n  #echo \"Output: \"\n \
    \ #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo\
    \ \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \"\
    \ \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\
    \n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n\
    \  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n \
    \ #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo\
    \ \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \"\
    \ \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\
    \n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n\
    \  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n \
    \ #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo\
    \ \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \"\
    \ \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\
    \n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n\
    \  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n  #echo \" \"\n \
    \ #echo \" \"\n  #echo \" \"\n  #echo \" \"\n\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc9zus4m7.sh: line 95: syntax error near unexpected token `}''

    /tmp/tmpc9zus4m7.sh: line 95: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  echo $1\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #echo $1\n    #echo \" \"\n    #echo $2\n\
    \    #echo \" \"\n    #echo $3\n    #echo \" \"\n    #echo $4\n    #echo \" \"\
    \n    #echo $5\n    #echo \" \"\n    #echo $6\n    #echo \" \"\n    #echo $7\n\
    \    #echo \" \"\n    #echo $8\n    #echo \" \"\n    #echo $9\n    #echo \" \"\
    \n    #echo $10\n    #echo \" \"\n    #echo $11\n    #echo \" \"\n    #echo $12\n\
    \    #echo \" \"\n    #echo $13\n    #echo \" \"\n    #echo $14\n    #echo \"\
    \ \"\n    #echo $15\n    #echo \" \"\n    #echo $16\n    #echo \" \"\n    #echo\
    \ $17\n    #echo \" \"\n    #echo $18\n    #echo \" \"\n    #echo $19\n    #echo\
    \ \" \"\n    #echo $20\n    #echo \" \"\n    #echo $21\n    #echo \" \"\n    #echo\
    \ $22\n    #echo \" \"\n    #echo $23\n    #echo \" \"\n    #echo $24\n    #echo\
    \ \" \"\n    #echo $25\n    #echo \" \"\n    #echo $26\n    #echo \" \"\n    #echo\
    \ $27\n    #echo \" \"\n    #echo $28\n    #echo \" \"\n    #echo $29\n    #echo\
    \ \" \"\n    #echo $30\n    #echo \" \"\n    #echo $31\n    #echo \" \"\n    #echo\
    \ $32\n    #echo \" \"\n    #echo $33\n    #echo \" \"\n    #echo $34\n    #echo\
    \ \" \"\n    #echo $35\n    #echo \" \"\n    #echo $36\n    #echo \" \"\n    #echo\
    \ $37\n    #echo \" \"\n    #echo $38\n    #echo \" \"\n    #echo $39\n    #echo\
    \ \" \"\n    #echo $40\n    #echo \" \"\n    #echo $41\n    #echo \" \"\n    #echo\
    \ $42\n    #echo \" \"\n\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmmq2lzop.sh: line 96: syntax error near unexpected token `}''

    /tmp/tmpmmq2lzop.sh: line 96: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local str=$1\n  local result=()\n  local max_depth=0\n  local depth=0\n\
    \  local i=0\n  local c=''\n  local len=${#str}\n  while [ $i -lt $len ]; do\n\
    \    c=${str:$i:1}\n    if [ \"$c\" == \"(\" ]; then\n      ((depth++))\n    \
    \  ((max_depth=depth>max_depth?depth:max_depth))\n    elif [ \"$c\" == \")\" ];\
    \ then\n      ((depth--))\n    elif [ \"$c\" == \" \" ]; then\n      result+=($max_depth)\n\
    \      max_depth=0\n    fi\n    ((i++))\n  done\n  result+=($max_depth)\n  echo\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local max_depth=0\n    local depth=0\n    local result=()\n\
    \    for ((i=0; i<${#str}; i++)); do\n        local char=${str:$i:1}\n       \
    \ if [[ $char == '(' ]]; then\n            ((depth++))\n            if ((depth\
    \ > max_depth)); then\n                max_depth=$depth\n            fi\n    \
    \    elif [[ $char == ')' ]]; then\n            ((depth--))\n        elif [[ $char\
    \ == ' ' ]]; then\n            result+=($max_depth)\n            max_depth=0\n\
    \            depth=0\n        fi\n    done\n    result+=($max_depth)\n    echo\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_depth=0\n    local\
    \ depth=0\n    local i=0\n    local c=''\n    local len=${#input}\n    while [\
    \ $i -lt $len ]; do\n        c=${input:$i:1}\n        if [ \"$c\" == \"(\" ];\
    \ then\n            ((depth++))\n            if [ $depth -gt $max_depth ]; then\n\
    \                max_depth=$depth\n            fi\n        elif [ \"$c\" == \"\
    )\" ]; then\n            ((depth--))\n        elif [ \"$c\" == \" \" ]; then\n\
    \            output+=($max_depth)\n            max_depth=0\n            depth=0\n\
    \        fi\n        ((i++))\n    done\n    output+=($max_depth)\n    echo ${output[@]}\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local str=$1\n  local arr=($str)\n  local max_depth=0\n  local curr_depth=0\n\
    \  local result=()\n  for i in \"${arr[@]}\"; do\n    max_depth=0\n    curr_depth=0\n\
    \    for (( j=0; j<${#i}; j++ )); do\n      if [[ ${i:$j:1} == \"(\" ]]; then\n\
    \        ((curr_depth++))\n        if ((curr_depth > max_depth)); then\n     \
    \     max_depth=$curr_depth\n        fi\n      elif [[ ${i:$j:1} == \")\" ]];\
    \ then\n        ((curr_depth--))\n      fi\n    done\n    result+=($max_depth)\n\
    \  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local max_level=0\n    local level=0\n    local result=()\n\
    \    for ((i=0; i<${#str}; i++)); do\n        if [[ ${str:$i:1} == '(' ]]; then\n\
    \            ((level++))\n            if ((level > max_level)); then\n       \
    \         max_level=$level\n            fi\n        elif [[ ${str:$i:1} == ')'\
    \ ]]; then\n            ((level--))\n        elif [[ ${str:$i:1} == ' ' ]]; then\n\
    \            result+=($max_level)\n            max_level=0\n            level=0\n\
    \        fi\n    done\n    result+=($max_level)\n    echo ${result[@]}\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local str=$1\n  local max_depth=0\n  local depth=0\n  local result=()\n\
    \  for (( i=0; i<${#str}; i++ )); do\n    if [[ ${str:$i:1} == '(' ]]; then\n\
    \      (( depth++ ))\n      if (( depth > max_depth )); then\n        max_depth=$depth\n\
    \      fi\n    elif [[ ${str:$i:1} == ')' ]]; then\n      (( depth-- ))\n    elif\
    \ [[ ${str:$i:1} == ' ' ]]; then\n      result+=($max_depth)\n      max_depth=0\n\
    \    fi\n  done\n  result+=($max_depth)\n  echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_depth=0\n  local depth=0\n\
    \  local i\n  local c\n  for ((i=0; i<${#input}; i++)); do\n    c=${input:$i:1}\n\
    \    if [[ $c == '(' ]]; then\n      ((depth++))\n      ((max_depth = depth >\
    \ max_depth ? depth : max_depth))\n    elif [[ $c == ')' ]]; then\n      ((depth--))\n\
    \    elif [[ $c == ' ' ]]; then\n      output+=($max_depth)\n      max_depth=0\n\
    \    fi\n  done\n  output+=($max_depth)\n  echo ${output[@]}\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    Not implemented\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=$1\n    local max_depth=0\n    local cur_depth=0\n    local\
    \ max_depth_arr=()\n    local i=0\n    local len=${#str}\n    while [ $i -lt $len\
    \ ]; do\n        local char=${str:$i:1}\n        if [ \"$char\" == \"(\" ]; then\n\
    \            cur_depth=$((cur_depth+1))\n            if [ $cur_depth -gt $max_depth\
    \ ]; then\n                max_depth=$cur_depth\n            fi\n        elif\
    \ [ \"$char\" == \")\" ]; then\n            max_depth_arr+=($max_depth)\n    \
    \        max_depth=0\n            cur_depth=0\n        fi\n        i=$((i+1))\n\
    \    done\n    echo ${max_depth_arr[@]}\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_depth=0\n    local\
    \ depth=0\n    local i=0\n    local c=''\n    local len=${#input}\n    while [\
    \ $i -lt $len ]; do\n        c=${input:$i:1}\n        if [ \"$c\" == \"(\" ];\
    \ then\n            ((depth++))\n            if [ $depth -gt $max_depth ]; then\n\
    \                max_depth=$depth\n            fi\n        elif [ \"$c\" == \"\
    )\" ]; then\n            ((depth--))\n        elif [ \"$c\" == \" \" ]; then\n\
    \            output+=($max_depth)\n            max_depth=0\n            depth=0\n\
    \        fi\n        ((i++))\n    done\n    output+=($max_depth)\n    echo \"\
    ${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp652i77ti.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmp652i77ti.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    echo $1\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_depth=0\n  local depth=0\n\
    \  local char\n  local i\n\n  for ((i=0; i<${#input}; i++)); do\n    char=${input:$i:1}\n\
    \    if [[ $char == '(' ]]; then\n      ((depth++))\n      if ((depth > max_depth));\
    \ then\n        max_depth=$depth\n      fi\n    elif [[ $char == ')' ]]; then\n\
    \      ((depth--))\n    elif [[ $char == ' ' ]]; then\n      output+=($max_depth)\n\
    \      max_depth=0\n      depth=0\n    fi\n  done\n  output+=($max_depth)\n  echo\
    \ \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxs9txj_c.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmpxs9txj_c.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local str=$1\n  local max_level=0\n  local level=0\n  local result=()\n\
    \  for ((i=0; i<${#str}; i++)); do\n    if [[ ${str:$i:1} == '(' ]]; then\n  \
    \    ((level++))\n      if ((level > max_level)); then\n        max_level=$level\n\
    \      fi\n    elif [[ ${str:$i:1} == ')' ]]; then\n      ((level--))\n    elif\
    \ [[ ${str:$i:1} == ' ' ]]; then\n      result+=($max_level)\n      max_level=0\n\
    \      level=0\n    fi\n  done\n  result+=($max_level)\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # echo $1\n    # echo $2\n    # echo $3\n\
    \    # echo $4\n    # echo $5\n    # echo $6\n    # echo $7\n    # echo $8\n \
    \   # echo $9\n    # echo ${10}\n    # echo ${11}\n    # echo ${12}\n    # echo\
    \ ${13}\n    # echo ${14}\n    # echo ${15}\n    # echo ${16}\n    # echo ${17}\n\
    \    # echo ${18}\n    # echo ${19}\n    # echo ${20}\n    # echo ${21}\n    #\
    \ echo ${22}\n    # echo ${23}\n    # echo ${24}\n    # echo ${25}\n    # echo\
    \ ${26}\n    # echo ${27}\n    # echo ${28}\n    # echo ${29}\n    # echo ${30}\n\
    \    # echo ${31}\n    # echo ${32}\n    # echo ${33}\n    # echo ${34}\n    #\
    \ echo ${35}\n    # echo ${36}\n    # echo ${37}\n    # echo ${38}\n    # echo\
    \ ${39}\n    # echo ${40}\n    # echo ${41}\n    # echo ${42}\n    # echo ${43}\n\
    \    # echo ${44}\n    # echo ${45}\n    # echo ${46}\n    # echo ${47}\n    #\
    \ echo ${48}\n    # echo ${49}\n    # echo ${50}\n    # echo ${51}\n    # echo\
    \ ${52}\n    # echo ${53}\n    # echo ${54}\n    # echo ${55}\n    # echo ${56}\n\
    \    # echo ${57}\n    # echo ${58}\n    # echo ${59}\n    # echo ${60}\n    #\
    \ echo ${61}\n    # echo ${62}\n    # echo ${63}\n    # echo ${64}\n    # echo\
    \ ${65}\n    # echo ${66}\n    # echo ${67}\n    # echo ${68}\n    # echo ${69}\n\
    \    # echo ${70}\n    # echo ${71}\n    # echo ${72}\n    # echo ${73}\n    #\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4lg_d3qx.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmp4lg_d3qx.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local input=$1\n  local output=()\n  local max_level=0\n  local level=0\n\
    \  local i=0\n  local c=''\n  local len=${#input}\n  while [ $i -lt $len ]; do\n\
    \    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ]; then\n      level=$((level +\
    \ 1))\n      if [ $level -gt $max_level ]; then\n        max_level=$level\n  \
    \    fi\n    elif [ \"$c\" == \")\" ]; then\n      level=$((level - 1))\n    elif\
    \ [ \"$c\" == \" \" ]; then\n      output+=($max_level)\n      max_level=0\n \
    \     level=0\n    fi\n    i=$((i + 1))\n  done\n  output+=($max_level)\n  echo\
    \ ${output[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_depth=0\n    local\
    \ depth=0\n    local i=0\n    local c=''\n    for ((i=0; i<${#input}; i++)); do\n\
    \        c=${input:$i:1}\n        if [[ $c == '(' ]]; then\n            ((depth++))\n\
    \            if ((depth > max_depth)); then\n                max_depth=$depth\n\
    \            fi\n        elif [[ $c == ')' ]]; then\n            ((depth--))\n\
    \        elif [[ $c == ' ' ]]; then\n            output+=($max_depth)\n      \
    \      max_depth=0\n            depth=0\n        fi\n    done\n    output+=($max_depth)\n\
    \    echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_nesting=0\n    local\
    \ nesting=0\n    local char\n    for (( i=0; i<${#input}; i++ )); do\n       \
    \ char=${input:$i:1}\n        if [[ $char == '(' ]]; then\n            (( nesting++\
    \ ))\n            (( max_nesting = max_nesting > nesting ? max_nesting : nesting\
    \ ))\n        elif [[ $char == ')' ]]; then\n            (( nesting-- ))\n   \
    \     elif [[ $char == ' ' ]]; then\n            output+=($max_nesting)\n    \
    \        max_nesting=0\n            nesting=0\n        fi\n    done\n    output+=($max_nesting)\n\
    \    echo ${output[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local str=$1\n  local max_level=0\n  local level=0\n  local result=()\n\
    \  for ((i=0; i<${#str}; i++)); do\n    if [[ ${str:$i:1} == '(' ]]; then\n  \
    \    ((level++))\n      if ((level > max_level)); then\n        max_level=$level\n\
    \      fi\n    elif [[ ${str:$i:1} == ')' ]]; then\n      ((level--))\n    elif\
    \ [[ ${str:$i:1} == ' ' ]]; then\n      result+=($max_level)\n      max_level=0\n\
    \      level=0\n    fi\n  done\n  result+=($max_level)\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp652i77ti.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmp652i77ti.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    Not implemented\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local input=$1\n    local output=()\n    local max_depth=0\n    local\
    \ depth=0\n    local i=0\n    local c\n    local len=${#input}\n    while [ $i\
    \ -lt $len ]; do\n        c=${input:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n\
    \            ((depth++))\n            if [ $depth -gt $max_depth ]; then\n   \
    \             max_depth=$depth\n            fi\n        elif [ \"$c\" == \")\"\
    \ ]; then\n            ((depth--))\n        elif [ \"$c\" == \" \" ]; then\n \
    \           output+=($max_depth)\n            max_depth=0\n        fi\n      \
    \  ((i++))\n    done\n    output+=($max_depth)\n    echo ${output[@]}\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    Not implemented\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local input=\"$1\"\n  local max_depth=0\n  local depth=0\n  local result=()\n\
    \  for ((i=0; i<${#input}; i++)); do\n    if [[ \"${input:$i:1}\" == \"(\" ]];\
    \ then\n      ((depth++))\n      if ((depth > max_depth)); then\n        max_depth=$depth\n\
    \      fi\n    elif [[ \"${input:$i:1}\" == \")\" ]]; then\n      ((depth--))\n\
    \    elif [[ \"${input:$i:1}\" == \" \" ]]; then\n      result+=(\"$max_depth\"\
    )\n      max_depth=0\n    fi\n  done\n  result+=(\"$max_depth\")\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    Not implemented\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp652i77ti.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmp652i77ti.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659995478
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n    local str=\"$1\"\n    local result=()\n    local max_level=0\n    local\
    \ level=0\n    local i=0\n    local c=''\n    local len=${#str}\n    while [ $i\
    \ -lt $len ]; do\n        c=${str:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n\
    \            ((level++))\n            if [ $level -gt $max_level ]; then\n   \
    \             max_level=$level\n            fi\n        elif [ \"$c\" == \")\"\
    \ ]; then\n            ((level--))\n        elif [ \"$c\" == \" \" ]; then\n \
    \           result+=($max_level)\n            max_level=0\n            level=0\n\
    \        fi\n        ((i++))\n    done\n    result+=($max_level)\n    echo \"\
    ${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  local str=\"$1\"\n  local max_depth=0\n  local depth=0\n  local result=()\n\
    \  for (( i=0; i<${#str}; i++ )); do\n    if [[ \"${str:$i:1}\" == \"(\" ]]; then\n\
    \      (( depth++ ))\n      (( max_depth = depth > max_depth ? depth : max_depth\
    \ ))\n    elif [[ \"${str:$i:1}\" == \")\" ]]; then\n      (( depth-- ))\n   \
    \ elif [[ \"${str:$i:1}\" == \" \" ]]; then\n      result+=($max_depth)\n    \
    \  max_depth=0\n    fi\n  done\n  result+=($max_depth)\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659995478
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n# [2, 3, 1, 3]\n#\n# $1 is a string\nparse_nested_parens()\
    \ {\n  # Write your code here\n  # Use echo to output the result, e.g.\n  # echo\
    \ $result\n  #\n  # For example:\n  # echo $1\n  # echo $2\n  # echo $3\n  # ...\n\
    \  # echo $n\n  #\n  # To get the arguments into an array, use\n  # args=(\"$@\"\
    )\n  #\n  # For example:\n  # args=(\"$@\")\n  # echo ${args[0]} ${args[1]} ...\
    \ ${args[n]}\n  #\n  # For more details, check the following link:\n  # http://stackoverflow.com/questions/16461656/how-to-pass-arguments-to-bash-functions\n\
    \  #\n  # To print out the result, use\n  # echo $result\n  #\n  # For example:\n\
    \  # echo $result\n  #\n  # To debug, you can use\n  # echo \"DEBUG: ...\"\n \
    \ #\n  # For example:\n  # echo \"DEBUG: the value of args[0] is ${args[0]}\"\n\
    \  #\n  # To get the number of elements in an array, use\n  # ${#array[@]}\n \
    \ #\n  # For example:\n  # echo \"DEBUG: the number of elements in args is ${#args[@]}\"\
    \n  #\n  # To get the length of a string, use\n  # ${#string}\n  #\n  # For example:\n\
    \  # echo \"DEBUG: the length of args[0] is ${#args[0]}\"\n  #\n  # To get the\
    \ substring of a string, use\n  # ${string:start:length}\n  #\n  # For example:\n\
    \  # echo \"DEBUG: the substring of args[0] from 0 to 3 is ${args[0]:0:3}\"\n\
    \  #\n  # To get the index of the first match of a substring in a string, use\n\
    \  # expr index \"$string\" \"$substring\"\n  #\n  # For example:\n  # echo \"\
    DEBUG: the index of the first match of 'ab' in 'abcd' is $(expr index \"${args[0]}\"\
    \ \"ab\")\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9mm_fevr.sh: line 66: syntax error near unexpected token `}''

    /tmp/tmp9mm_fevr.sh: line 66: `}''

    '
  stdout: ''
  timestamp: 1659995478
