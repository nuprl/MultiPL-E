language: sh
name: HumanEval_9_rolling_max
results:
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local -a\
    \ result=()\n    result+=(\"$max\")\n    for i in \"${arr[@]:1}\"; do\n      \
    \  if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        result+=(\"\
    $max\")\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    echo $max\n\
    \    for ((i=1; i<${#arr[@]}; i++)); do\n        if ((${arr[$i]} > $max)); then\n\
    \            max=${arr[$i]}\n        fi\n        echo $max\n    done\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local -a\
    \ result=()\n    result+=($max)\n    for ((i=1; i<${#arr[@]}; i++)); do\n    \
    \    if [[ ${arr[$i]} -gt $max ]]; then\n            max=${arr[$i]}\n        fi\n\
    \        result+=($max)\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=()\n    local max=0\n    for i in $1; do\n \
    \       if (( i > max )); then\n            max=$i\n        fi\n        arr+=($max)\n\
    \    done\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local -a result=()\n\
    \  for i in ${arr[@]}; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n\
    \    result+=($max)\n  done\n  echo ${result[@]}\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n  local max=0\n  for i in $1; do\n    if [ $i -gt $max ]; then\n\
    \      max=$i\n    fi\n    echo $max\n  done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a a=($1)\n    local max=${a[0]}\n    echo $max\n \
    \   for ((i=1; i<${#a[@]}; i++)); do\n        if (( ${a[$i]} > $max )); then\n\
    \            max=${a[$i]}\n        fi\n        echo $max\n    done\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo -n \"$max \"\n    done\n\
    \    echo\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local -a res=()\n    local max=${arr[0]}\n\
    \    res+=($max)\n    for i in \"${arr[@]:1}\"; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        res+=($max)\n    done\n  \
    \  echo \"${res[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n    IFS='\
    \ ' read -r -a arr <<< \"$1\"\n    max=${arr[0]}\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        if (( arr[i] > max )); then\n            max=${arr[i]}\n\
    \        fi\n        echo -n \"$max \"\n    done\n    echo\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a array=($1)\n    local max=${array[0]}\n    local\
    \ -a result=()\n    result+=($max)\n    for i in \"${array[@]:1}\"; do\n     \
    \   if (( i > max )); then\n            max=$i\n        fi\n        result+=($max)\n\
    \    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local -a\
    \ result=($max)\n    for (( i=1; i<${#arr[@]}; i++ )); do\n        if (( arr[i]\
    \ > max )); then\n            max=${arr[i]}\n        fi\n        result+=($max)\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local -a\
    \ result=()\n    result+=($max)\n    for ((i=1; i<${#arr[@]}; i++)); do\n    \
    \    if [[ ${arr[$i]} -gt $max ]]; then\n            max=${arr[$i]}\n        fi\n\
    \        result+=($max)\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n  local -a arr=($1)\n  local -a maxs\n  local max=${arr[0]}\n\
    \  maxs+=($max)\n  for i in \"${arr[@]:1}\"; do\n    if (( i > max )); then\n\
    \      max=$i\n    fi\n    maxs+=($max)\n  done\n  echo \"${maxs[@]}\"\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local -a max_arr=()\n    local max=${arr[0]}\n\
    \    max_arr+=($max)\n    for i in ${arr[@]:1}; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        max_arr+=($max)\n    done\n\
    \    echo ${max_arr[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -a max\n    local i=0\n    for n\
    \ in $1; do\n        arr[$i]=$n\n        if [ $i -eq 0 ]; then\n            max[$i]=$n\n\
    \        else\n            if [ ${arr[$i]} -gt ${max[$((i-1))]} ]; then\n    \
    \            max[$i]=${arr[$i]}\n            else\n                max[$i]=${max[$((i-1))]}\n\
    \            fi\n        fi\n        i=$((i+1))\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -a res\n    local i=0\n    local\
    \ max=0\n    for i in $1; do\n        arr[$i]=$i\n        if [[ $i -gt $max ]];\
    \ then\n            max=$i\n        fi\n        res[$i]=$max\n    done\n    echo\
    \ ${res[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    arr=($1)\n    local max=${arr[0]}\n   \
    \ echo $max\n    for i in ${arr[@]:1}; do\n        if [[ $i -gt $max ]]; then\n\
    \            max=$i\n        fi\n        echo $max\n    done\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local -a result=()\n    local max=${arr[0]}\n\
    \    result+=($max)\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]}\
    \ -gt $max ]]; then\n            max=${arr[$i]}\n        fi\n        result+=($max)\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=()\n    local max=0\n    for i in $1; do\n \
    \       arr+=($i)\n        if (( i > max )); then\n            max=$i\n      \
    \  fi\n        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=()\n    local -i max=0\n    for i in $1; do\n\
    \        arr+=($i)\n        if (( i > max )); then\n            max=$i\n     \
    \   fi\n        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  for (( i=1; i<${#arr[@]};\
    \ i++ )); do\n    if [[ ${arr[$i]} -gt $max ]]; then\n      max=${arr[$i]}\n \
    \   fi\n    echo $max\n  done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n\
    \      max=$i\n    fi\n    echo $max\n  done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n  local -a list=($1)\n  local max=${list[0]}\n  local -a result=()\n\
    \  for i in \"${list[@]}\"; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n\
    \    fi\n    result+=($max)\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a a=()\n    local max=0\n    for i in $1; do\n   \
    \     a+=($i)\n        if [[ $i -gt $max ]]; then\n            max=$i\n      \
    \  fi\n        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n    IFS='\
    \ ' read -r -a arr <<< \"$1\"\n    max=${arr[0]}\n    echo \"$max\"\n    for ((i=1;\
    \ i<${#arr[@]}; i++)); do\n        if ((arr[i] > max)); then\n            max=${arr[i]}\n\
    \        fi\n        echo \"$max\"\n    done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=(\"$@\")\n    local max=${arr[0]}\n    echo\
    \ $max\n    for i in \"${arr[@]:1}\"; do\n        if (( i > max )); then\n   \
    \         max=$i\n        fi\n        echo $max\n    done\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local -a max_arr\n    local max=${arr[0]}\n\
    \    max_arr=($max)\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]}\
    \ -gt $max ]]; then\n            max=${arr[$i]}\n        fi\n        max_arr+=($max)\n\
    \    done\n    echo ${max_arr[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a array=($1)\n    local max=${array[0]}\n    local\
    \ -a result=($max)\n    for i in \"${array[@]:1}\"; do\n        if (( i > max\
    \ )); then\n            max=$i\n        fi\n        result+=($max)\n    done\n\
    \    echo \"${result[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a list=($1)\n    local -a result=()\n    local max=0\n\
    \    for i in \"${list[@]}\"; do\n        if (( i > max )); then\n           \
    \ max=$i\n        fi\n        result+=($max)\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n    local\
    \ -i n\n    local -i len\n    local -i j\n\n    arr=($1)\n    len=${#arr[@]}\n\
    \    max=${arr[0]}\n    echo -n \"$max \"\n    for ((i=1; i<len; i++)); do\n \
    \       n=${arr[i]}\n        if ((n > max)); then\n            max=$n\n      \
    \  fi\n        echo -n \"$max \"\n    done\n    echo\n}\n\ncandidate() {\n   \
    \ rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"\
    4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100\
    \ 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a list=($1)\n    local max=${list[0]}\n    echo $max\n\
    \    for i in ${list[@]:1}; do\n        if [[ $i -gt $max ]]; then\n         \
    \   max=$i\n        fi\n        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo -n \"$max \"\n    done\n\
    \    echo\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n  local -a arr=($1)\n  local -a res=()\n  local max=${arr[0]}\n\
    \  res+=($max)\n  for ((i=1; i<${#arr[@]}; i++)); do\n    if (( arr[i] > max ));\
    \ then\n      max=${arr[i]}\n    fi\n    res+=($max)\n  done\n  echo ${res[@]}\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local -a max_arr\n    local max=${arr[0]}\n\
    \    max_arr=($max)\n    for i in \"${arr[@]:1}\"; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        max_arr+=($max)\n    done\n\
    \    echo \"${max_arr[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n  local -a arr=()\n  local -i max=0\n  for i in $1; do\n    arr+=($i)\n\
    \    if (( i > max )); then\n      max=$i\n    fi\n    echo -n \"$max \"\n  done\n\
    \  echo\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local -a\
    \ res=($max)\n    for i in ${arr[@]:1}; do\n        if ((i > max)); then\n   \
    \         max=$i\n        fi\n        res+=($max)\n    done\n    echo ${res[@]}\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n  local -a array=($1)\n  local max=${array[0]}\n  echo -n \"\
    $max \"\n  for i in \"${array[@]:1}\"; do\n    if [[ $i -gt $max ]]; then\n  \
    \    max=$i\n    fi\n    echo -n \"$max \"\n  done\n  echo\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local -a\
    \ res=()\n    res+=($max)\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if\
    \ (( arr[i] > max )); then\n            max=${arr[i]}\n        fi\n        res+=($max)\n\
    \    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n    local\
    \ -i len\n    local -i j\n    local -i tmp\n    arr=($1)\n    len=${#arr[@]}\n\
    \    max=${arr[0]}\n    for ((i=1; i<len; i++)); do\n        tmp=${arr[i]}\n \
    \       if ((tmp > max)); then\n            max=$tmp\n        fi\n        arr[i]=$max\n\
    \    done\n    echo ${arr[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n    local\
    \ -i len\n\n    arr=($1)\n    len=${#arr[@]}\n    max=${arr[0]}\n    echo -n \"\
    $max \"\n    for ((i=1; i<len; i++)); do\n        if (( arr[i] > max )); then\n\
    \            max=${arr[i]}\n        fi\n        echo -n \"$max \"\n    done\n\
    \    echo\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -a max\n    local i\n    local j\n\
    \    local max_val\n    local max_idx\n    local max_len\n    local max_len_prev\n\
    \    local max_len_curr\n    local max_len_next\n    local max_len_next_next\n\
    \    local max_len_next_next_next\n    local max_len_next_next_next_next\n   \
    \ local max_len_next_next_next_next_next\n    local max_len_next_next_next_next_next_next\n\
    \    local max_len_next_next_next_next_next_next_next\n    local max_len_next_next_next_next_next_next_next_next\n\
    \    local max_len_next_next_next_next_next_next_next_next_next\n    local max_len_next_next_next_next_next_next_next_next_next_next\n\
    \    local max_len_next_next_next_next_next_next_next_next_next_next_next\n  \
    \  local max_len_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \    local max_len_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \    local max_len_next_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \    local max_len_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \    local max_len_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \    local max_len_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \    local max_len_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \    local max_len\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=()\n    local -a res=()\n    local max=0\n \
    \   for i in $1; do\n        arr+=($i)\n    done\n    for i in ${arr[@]}; do\n\
    \        if [ $i -gt $max ]; then\n            max=$i\n        fi\n        res+=($max)\n\
    \    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local -a max_arr\n    local max=${arr[0]}\n\
    \    max_arr=($max)\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]}\
    \ -gt $max ]]; then\n            max=${arr[$i]}\n        fi\n        max_arr+=($max)\n\
    \    done\n    echo ${max_arr[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a list=($1)\n    local max=${list[0]}\n    local -a\
    \ result=($max)\n    for i in \"${list[@]:1}\"; do\n        if ((i > max)); then\n\
    \            max=$i\n        fi\n        result+=($max)\n    done\n    echo \"\
    ${result[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a list=($1)\n    local -a result\n    local max=${list[0]}\n\
    \    result+=($max)\n    for i in \"${list[@]:1}\"; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        result+=($max)\n    done\n\
    \    echo \"${result[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a list=($1)\n    local -a result=()\n    local max=0\n\
    \    for i in \"${list[@]}\"; do\n        if [[ $i -gt $max ]]; then\n       \
    \     max=$i\n        fi\n        result+=($max)\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n    IFS='\
    \ ' read -r -a arr <<< \"$1\"\n    max=${arr[0]}\n    echo -n \"$max \"\n    for\
    \ ((i=1; i<${#arr[@]}; i++)); do\n        if (( arr[i] > max )); then\n      \
    \      max=${arr[i]}\n        fi\n        echo -n \"$max \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -a max\n    local i\n    local j\n\
    \    local max_i\n    local max_j\n    local max_val\n    local val\n    local\
    \ -i n\n    local -i m\n    local -i k\n    local -i l\n    local -i max_k\n \
    \   local -i max_l\n    local -i max_m\n    local -i max_n\n    local -i max_len\n\
    \    local -i len\n    local -i max_len_i\n    local -i max_len_j\n    local -i\
    \ max_len_k\n    local -i max_len_l\n    local -i max_len_m\n    local -i max_len_n\n\
    \    local -i max_len_val\n    local -i max_len_val_i\n    local -i max_len_val_j\n\
    \    local -i max_len_val_k\n    local -i max_len_val_l\n    local -i max_len_val_m\n\
    \    local -i max_len_val_n\n    local -i max_len_val_len\n    local -i max_len_val_len_i\n\
    \    local -i max_len_val_len_j\n    local -i max_len_val_len_k\n    local -i\
    \ max_len_val_len_l\n    local -i max_len_val_len_m\n    local -i max_len_val_len_n\n\
    \    local -i max_len_val_len_val\n    local -i max_len_val_len_val_i\n    local\
    \ -i max_len_val_len_val_j\n    local -i max_len_val_len_val_k\n    local -i max_len_val_len_val_l\n\
    \    local -i max_len_val_len_val_m\n    local -i max_len_val_len_val_n\n    local\
    \ -i max_len_val_len_val_len\n    local -i max_len_val_len_val_len_i\n    local\
    \ -i max_len_val_len_val_len_j\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=()\n    local max=0\n    for i in $1; do\n \
    \       arr+=($i)\n        if [[ $i -gt $max ]]; then\n            max=$i\n  \
    \      fi\n        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local -a\
    \ result=()\n    result+=($max)\n    for ((i=1; i<${#arr[@]}; i++)); do\n    \
    \    if [[ ${arr[$i]} -gt $max ]]; then\n            max=${arr[$i]}\n        fi\n\
    \        result+=($max)\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local i=0\n\
    \    local len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        if (( arr[i]\
    \ > max )); then\n            max=${arr[i]}\n        fi\n        echo $max\n \
    \   done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n  local -a arr\n  local -i i\n  local -i max\n  arr=($1)\n  max=${arr[0]}\n\
    \  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ ${arr[$i]} -gt $max ]]; then\n\
    \      max=${arr[$i]}\n    fi\n    echo $max\n  done\n}\n\ncandidate() {\n   \
    \ rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"\
    4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100\
    \ 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    echo $max\n\
    \    for i in ${arr[@]:1}; do\n        if [[ $i -gt $max ]]; then\n          \
    \  max=$i\n        fi\n        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a list=($1)\n    local max=${list[0]}\n    local i\n\
    \    for ((i=1; i<${#list[@]}; i++)); do\n        if [[ ${list[$i]} -gt $max ]];\
    \ then\n            max=${list[$i]}\n        fi\n        echo $max\n    done\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=(\"$@\")\n    local max=${arr[0]}\n    local\
    \ -a res=()\n    res+=($max)\n    for ((i=1; i<${#arr[@]}; i++)); do\n       \
    \ if [[ ${arr[$i]} -gt $max ]]; then\n            max=${arr[$i]}\n        fi\n\
    \        res+=($max)\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n \
    \   rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    echo $max\n\
    \    for i in ${arr[@]:1}; do\n        if [[ $i -gt $max ]]; then\n          \
    \  max=$i\n        fi\n        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a list=($1)\n    local -a result=()\n    local max=0\n\
    \    for i in \"${list[@]}\"; do\n        if (( i > max )); then\n           \
    \ max=$i\n        fi\n        result+=($max)\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local -a res=()\n    local max=${arr[0]}\n\
    \    res+=($max)\n    for (( i=1; i<${#arr[@]}; i++ )); do\n        if [[ ${arr[$i]}\
    \ -gt $max ]]; then\n            max=${arr[$i]}\n        fi\n        res+=($max)\n\
    \    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n  local list=($1)\n  local max=${list[0]}\n  local result=()\n\
    \  for i in \"${list[@]}\"; do\n    if (( i > max )); then\n      max=$i\n   \
    \ fi\n    result+=($max)\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local -a\
    \ res=($max)\n    for i in \"${arr[@]:1}\"; do\n        if (( i > max )); then\n\
    \            max=$i\n        fi\n        res+=($max)\n    done\n    echo \"${res[@]}\"\
    \n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local -a\
    \ result=($max)\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if (( arr[i]\
    \ > max )); then\n            max=${arr[i]}\n        fi\n        result+=($max)\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=(\"$@\")\n    local max=${arr[0]}\n    echo\
    \ -n \"$max \"\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if (( arr[i] >\
    \ max )); then\n            max=${arr[i]}\n        fi\n        echo -n \"$max\
    \ \"\n    done\n    echo\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local -a res=()\n    local max=${arr[0]}\n\
    \    res+=($max)\n    for i in \"${arr[@]:1}\"; do\n        if (( i > max ));\
    \ then\n            max=$i\n        fi\n        res+=($max)\n    done\n    echo\
    \ \"${res[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n  local -a arr\n  local -i i\n  local -i max\n  IFS=' ' read\
    \ -r -a arr <<< \"$1\"\n  max=${arr[0]}\n  for ((i=0; i<${#arr[@]}; i++)); do\n\
    \    if (( arr[i] > max )); then\n      max=${arr[i]}\n    fi\n    echo -n \"\
    $max \"\n  done\n  echo\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -a max\n    local -i i\n    local\
    \ -i j\n    local -i n\n    local -i m\n    local -i max_i\n    local -i max_j\n\
    \    local -i max_n\n    local -i max_m\n    local -i max_val\n    local -i val\n\
    \    local -i max_val_i\n    local -i max_val_j\n    local -i max_val_n\n    local\
    \ -i max_val_m\n    local -i max_val_val\n    local -i max_val_max_val\n    local\
    \ -i max_val_max_val_i\n    local -i max_val_max_val_j\n    local -i max_val_max_val_n\n\
    \    local -i max_val_max_val_m\n    local -i max_val_max_val_val\n    local -i\
    \ max_val_max_val_max_val\n    local -i max_val_max_val_max_val_i\n    local -i\
    \ max_val_max_val_max_val_j\n    local -i max_val_max_val_max_val_n\n    local\
    \ -i max_val_max_val_max_val_m\n    local -i max_val_max_val_max_val_val\n   \
    \ local -i max_val_max_val_max_val_max_val\n    local -i max_val_max_val_max_val_max_val_i\n\
    \    local -i max_val_max_val_max_val_max_val_j\n    local -i max_val_max_val_max_val_max_val_n\n\
    \    local -i max_val_max_val_max_val_max_val_m\n    local -i max_val_max_val_max_val_max_val_val\n\
    \    local -i max_val_max_val_max_val_max_val_max_val\n    local -i max_val_max_val_max_val_max_val_max_val_i\n\
    \    local -i max_val_max_val\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=(\"$@\")\n    local max=${arr[0]}\n    echo\
    \ $max\n    for i in \"${arr[@]:1}\"; do\n        if [[ $i -gt $max ]]; then\n\
    \            max=$i\n        fi\n        echo $max\n    done\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local -a max_arr\n    local max=${arr[0]}\n\
    \    max_arr=($max)\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]}\
    \ -gt $max ]]; then\n            max=${arr[$i]}\n        fi\n        max_arr+=($max)\n\
    \    done\n    echo ${max_arr[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=()\n    local max=0\n    for i in $1; do\n \
    \       arr+=($i)\n        if [[ $i -gt $max ]]; then\n            max=$i\n  \
    \      fi\n        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=(\"$@\")\n    local max=${arr[0]}\n    echo\
    \ $max\n    for i in \"${arr[@]:1}\"; do\n        if [[ $i -gt $max ]]; then\n\
    \            max=$i\n        fi\n        echo $max\n    done\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n    local\
    \ -i n\n    local -i len\n    local -i j\n    arr=($1)\n    len=${#arr[@]}\n \
    \   for ((i=0; i<len; i++)); do\n        max=${arr[i]}\n        for ((j=i; j<len;\
    \ j++)); do\n            n=${arr[j]}\n            if ((n > max)); then\n     \
    \           max=$n\n            fi\n        done\n        printf \"%d \" $max\n\
    \    done\n    echo\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n\n    IFS='\
    \ ' read -r -a arr <<< \"$1\"\n    max=${arr[0]}\n    echo \"$max\"\n    for ((i=1;\
    \ i<${#arr[@]}; i++)); do\n        if (( arr[i] > max )); then\n            max=${arr[i]}\n\
    \        fi\n        echo \"$max\"\n    done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    echo $max\n\
    \    for i in ${arr[@]:1}; do\n        if (( i > max )); then\n            max=$i\n\
    \        fi\n        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local i=0\n\
    \    local len=${#arr[@]}\n    local -a res=()\n    while [ $i -lt $len ]; do\n\
    \        if [ ${arr[$i]} -gt $max ]; then\n            max=${arr[$i]}\n      \
    \  fi\n        res[$i]=$max\n        i=$((i+1))\n    done\n    echo ${res[@]}\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a list=($1)\n    local max=${list[0]}\n    echo $max\n\
    \    for i in ${list[@]:1}; do\n        if [[ $i -gt $max ]]; then\n         \
    \   max=$i\n        fi\n        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n    IFS='\
    \ ' read -r -a arr <<< \"$1\"\n    max=${arr[0]}\n    echo \"$max\"\n    for ((i=1;\
    \ i<${#arr[@]}; i++)); do\n        if (( arr[i] > max )); then\n            max=${arr[i]}\n\
    \        fi\n        echo \"$max\"\n    done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    arr=($1)\n    local max=${arr[0]}\n   \
    \ echo $max\n    for i in \"${arr[@]:1}\"; do\n        if [[ $i -gt $max ]]; then\n\
    \            max=$i\n        fi\n        echo $max\n    done\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=(\"$@\")\n    local max=${arr[0]}\n    echo\
    \ -n \"$max \"\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]}\
    \ -gt $max ]]; then\n            max=${arr[$i]}\n        fi\n        echo -n \"\
    $max \"\n    done\n    echo\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local -a res=()\n    local max=${arr[0]}\n\
    \    res+=($max)\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if (( arr[i]\
    \ > max )); then\n            max=${arr[i]}\n        fi\n        res+=($max)\n\
    \    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=()\n    local -a max=()\n    local i=0\n   \
    \ local j=0\n    local max_val=0\n    local cur_val=0\n\n    for i in $1; do\n\
    \        arr[$j]=$i\n        cur_val=${arr[$j]}\n        if [ $cur_val -gt $max_val\
    \ ]; then\n            max_val=$cur_val\n        fi\n        max[$j]=$max_val\n\
    \        j=$((j+1))\n    done\n\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    echo $max\n\
    \    for i in ${arr[@]:1}; do\n        if [[ $i -gt $max ]]; then\n          \
    \  max=$i\n        fi\n        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n\
    \      max=$i\n    fi\n    echo $max\n  done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    echo $max\n\
    \    for i in \"${arr[@]:1}\"; do\n        if (( $i > $max )); then\n        \
    \    max=$i\n        fi\n        echo $max\n    done\n}\n\ncandidate() {\n   \
    \ rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"\
    4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100\
    \ 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=()\n    local -a res=()\n    local max=0\n \
    \   for i in $1; do\n        arr+=($i)\n    done\n    for i in ${arr[@]}; do\n\
    \        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        res+=($max)\n\
    \    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n  local -a arr\n  local -i i\n  local -i max\n  arr=($1)\n  max=${arr[0]}\n\
    \  echo -n \"$max \"\n  for ((i=1; i<${#arr[@]}; i++)); do\n    if [[ ${arr[$i]}\
    \ -gt $max ]]; then\n      max=${arr[$i]}\n    fi\n    echo -n \"$max \"\n  done\n\
    \  echo\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo -n \"$max \"\n    done\n\
    \    echo\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -a max\n    local i\n    local j\n\
    \    local max_val\n    local val\n\n    arr=($1)\n    max_val=${arr[0]}\n   \
    \ max[0]=$max_val\n    for ((i=1; i<${#arr[@]}; i++)); do\n        val=${arr[i]}\n\
    \        if [[ $val -gt $max_val ]]; then\n            max_val=$val\n        fi\n\
    \        max[i]=$max_val\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n \
    \   rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local -a result=()\n    local max=${arr[0]}\n\
    \    result+=($max)\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]}\
    \ -gt $max ]]; then\n            max=${arr[$i]}\n        fi\n        result+=($max)\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local -a\
    \ res=()\n    res+=($max)\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if\
    \ [[ ${arr[$i]} -gt $max ]]; then\n            max=${arr[$i]}\n        fi\n  \
    \      res+=($max)\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a list=($1)\n    local max=${list[0]}\n    local -a\
    \ result=()\n    for i in \"${list[@]}\"; do\n        if [[ $i -gt $max ]]; then\n\
    \            max=$i\n        fi\n        result+=($max)\n    done\n    echo \"\
    ${result[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local -a res=()\n    local max=${arr[0]}\n\
    \    res+=($max)\n    for i in \"${arr[@]:1}\"; do\n        if (( i > max ));\
    \ then\n            max=$i\n        fi\n        res+=($max)\n    done\n    echo\
    \ \"${res[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n    IFS='\
    \ ' read -r -a arr <<< \"$1\"\n    max=${arr[0]}\n    echo -n \"$max \"\n    for\
    \ ((i=1; i<${#arr[@]}; i++)); do\n        if (( arr[i] > max )); then\n      \
    \      max=${arr[i]}\n        fi\n        echo -n \"$max \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=()\n    local max=0\n    for i in $1; do\n \
    \       arr+=($i)\n        if (( i > max )); then\n            max=$i\n      \
    \  fi\n        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n  local -a list=($1)\n  local max=0\n  local i=0\n  for i in\
    \ \"${!list[@]}\"; do\n    if [[ ${list[$i]} -gt $max ]]; then\n      max=${list[$i]}\n\
    \    fi\n    echo $max\n  done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a list=($1)\n    local -a result\n    local max=${list[0]}\n\
    \    result+=($max)\n    for ((i=1; i<${#list[@]}; i++)); do\n        if [[ ${list[$i]}\
    \ -gt $max ]]; then\n            max=${list[$i]}\n        fi\n        result+=($max)\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local i=0\n\
    \    local len=${#arr[@]}\n    while [ $i -lt $len ]; do\n        if [ ${arr[$i]}\
    \ -gt $max ]; then\n            max=${arr[$i]}\n        fi\n        echo $max\n\
    \        i=$((i+1))\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a list=($1)\n    local -a max_list=()\n    local max=${list[0]}\n\
    \    max_list+=($max)\n    for i in \"${list[@]:1}\"; do\n        if [[ $i -gt\
    \ $max ]]; then\n            max=$i\n        fi\n        max_list+=($max)\n  \
    \  done\n    echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local -a max_arr\n    local max=${arr[0]}\n\
    \    max_arr=($max)\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]}\
    \ -gt $max ]]; then\n            max=${arr[$i]}\n        fi\n        max_arr+=($max)\n\
    \    done\n    echo ${max_arr[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=()\n    for i in $1; do\n        arr+=($i)\n\
    \        echo -n \"${arr[0]} \"\n        for j in ${arr[@]:1}; do\n          \
    \  if [[ $j -gt ${arr[0]} ]]; then\n                arr[0]=$j\n            fi\n\
    \            echo -n \"${arr[0]} \"\n        done\n        echo\n    done\n}\n\
    \ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=(\"$@\")\n    local max=${arr[0]}\n    echo\
    \ -n \"$max \"\n    for i in \"${arr[@]:1}\"; do\n        if (( i > max )); then\n\
    \            max=$i\n        fi\n        echo -n \"$max \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local list=($1)\n    local max=${list[0]}\n    local result=()\n\
    \    for i in ${list[@]}; do\n        if [[ $i -gt $max ]]; then\n           \
    \ max=$i\n        fi\n        result+=($max)\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=(\"$@\")\n    local max=${arr[0]}\n    echo\
    \ $max\n    for i in \"${arr[@]:1}\"; do\n        if [[ $i -gt $max ]]; then\n\
    \            max=$i\n        fi\n        echo $max\n    done\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=(\"$@\")\n    local max=${arr[0]}\n    echo\
    \ $max\n    for i in \"${arr[@]:1}\"; do\n        if [[ $i -gt $max ]]; then\n\
    \            max=$i\n        fi\n        echo $max\n    done\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a list=($1)\n    local -a max_list=()\n    local max=0\n\
    \    for i in \"${list[@]}\"; do\n        if (( i > max )); then\n           \
    \ max=$i\n        fi\n        max_list+=($max)\n    done\n    echo \"${max_list[@]}\"\
    \n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo -n \"$max \"\n    done\n\
    \    echo\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local -a\
    \ result=()\n    result+=($max)\n    for i in ${arr[@]:1}; do\n        if (( i\
    \ > max )); then\n            max=$i\n        fi\n        result+=($max)\n   \
    \ done\n    echo ${result[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local -a max\n    max[0]=${arr[0]}\n\
    \    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[i]} -gt ${max[i-1]}\
    \ ]]; then\n            max[i]=${arr[i]}\n        else\n            max[i]=${max[i-1]}\n\
    \        fi\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local i=0\n\
    \    for ((i=0; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]} -gt $max ]];\
    \ then\n            max=${arr[$i]}\n        fi\n        echo $max\n    done\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local list=($1)\n    local max=${list[0]}\n    echo $max\n\
    \    for i in ${list[@]:1}; do\n        if [[ $i -gt $max ]]; then\n         \
    \   max=$i\n        fi\n        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n    arr=($1)\n\
    \    max=${arr[0]}\n    echo -n \"$max \"\n    for ((i=1; i<${#arr[@]}; i++));\
    \ do\n        if (( arr[i] > max )); then\n            max=${arr[i]}\n       \
    \ fi\n        echo -n \"$max \"\n    done\n    echo\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a a=($1)\n    local -a b=()\n    local max=0\n   \
    \ for i in ${a[@]}; do\n        if (( i > max )); then\n            max=$i\n \
    \       fi\n        b+=($max)\n    done\n    echo ${b[@]}\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local -a\
    \ result\n    result[0]=$max\n    for ((i=1; i<${#arr[@]}; i++)); do\n       \
    \ if [[ ${arr[$i]} -gt $max ]]; then\n            max=${arr[$i]}\n        fi\n\
    \        result[$i]=$max\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n\
    \      max=$i\n    fi\n    echo $max\n  done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n    local\
    \ -i n\n    arr=($1)\n    max=${arr[0]}\n    for ((i=1; i<${#arr[@]}; i++)); do\n\
    \        n=${arr[i]}\n        if ((n > max)); then\n            max=$n\n     \
    \   fi\n        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n    arr=($1)\n\
    \    max=${arr[0]}\n    echo $max\n    for ((i=1; i<${#arr[@]}; i++)); do\n  \
    \      if ((arr[i] > max)); then\n            max=${arr[i]}\n        fi\n    \
    \    echo $max\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a list=($1)\n    local max=${list[0]}\n    local -a\
    \ result\n    result[0]=$max\n    for ((i=1; i<${#list[@]}; i++)); do\n      \
    \  if [[ ${list[$i]} -gt $max ]]; then\n            max=${list[$i]}\n        fi\n\
    \        result[$i]=$max\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n    local\
    \ -i max_idx\n    local -i n\n\n    arr=($1)\n    n=${#arr[@]}\n    max_idx=0\n\
    \    max=${arr[0]}\n    for ((i=1; i<n; i++)); do\n        if [[ ${arr[i]} -gt\
    \ $max ]]; then\n            max=${arr[i]}\n            max_idx=$i\n        fi\n\
    \        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local -a res=()\n    local max=${arr[0]}\n\
    \    res+=($max)\n    for i in \"${arr[@]:1}\"; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        res+=($max)\n    done\n  \
    \  echo \"${res[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -a max\n    local i\n    local j\n\
    \    local m\n    arr=($1)\n    max[0]=${arr[0]}\n    for ((i=1; i<${#arr[@]};\
    \ i++)); do\n        m=${arr[i]}\n        for ((j=0; j<i; j++)); do\n        \
    \    if [[ ${arr[j]} -gt $m ]]; then\n                m=${arr[j]}\n          \
    \  fi\n        done\n        max[i]=$m\n    done\n    echo ${max[@]}\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a list\n    local -i i\n    local -i max\n    list=($1)\n\
    \    max=0\n    for ((i=0; i<${#list[@]}; i++)); do\n        if ((list[i] > max));\
    \ then\n            max=list[i]\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -a max\n    local i\n    local j\n\
    \    local max_val\n    arr=($1)\n    max_val=${arr[0]}\n    max[0]=$max_val\n\
    \    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]} -gt $max_val\
    \ ]]; then\n            max_val=${arr[$i]}\n        fi\n        max[$i]=$max_val\n\
    \    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n    local\
    \ -i len\n    local -i j\n\n    arr=($1)\n    len=${#arr[@]}\n    max=${arr[0]}\n\
    \    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -gt $max ]]; then\n\
    \            max=${arr[i]}\n        fi\n        echo $max\n    done\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n    local\
    \ -i n\n\n    arr=($1)\n    n=${#arr[@]}\n    max=${arr[0]}\n    echo -n \"$max\
    \ \"\n    for ((i=1; i<n; i++)); do\n        if ((arr[i] > max)); then\n     \
    \       max=${arr[i]}\n        fi\n        echo -n \"$max \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local -a max_arr=()\n    local max=${arr[0]}\n\
    \    max_arr+=($max)\n    for i in \"${arr[@]:1}\"; do\n        if (( i > max\
    \ )); then\n            max=$i\n        fi\n        max_arr+=($max)\n    done\n\
    \    echo \"${max_arr[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    local -a arr=($1)\n    for i in ${arr[@]};\
    \ do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n   \
    \     echo $max\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    echo $max\n\
    \    for i in ${arr[@]:1}; do\n        if [[ $i -gt $max ]]; then\n          \
    \  max=$i\n        fi\n        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i max=0\n    local -i i=0\n    local\
    \ -i len=0\n    local -i j=0\n    local -i max_len=0\n    local -i max_index=0\n\
    \    local -i max_value=0\n    local -i max_value_index=0\n    local -i max_value_len=0\n\
    \    local -i max_value_index_len=0\n    local -i max_value_index_len_index=0\n\
    \    local -i max_value_index_len_index_value=0\n    local -i max_value_index_len_index_value_index=0\n\
    \    local -i max_value_index_len_index_value_index_len=0\n    local -i max_value_index_len_index_value_index_len_index=0\n\
    \    local -i max_value_index_len_index_value_index_len_index_value=0\n    local\
    \ -i max_value_index_len_index_value_index_len_index_value_index=0\n    local\
    \ -i max_value_index_len_index_value_index_len_index_value_index_len=0\n    local\
    \ -i max_value_index_len_index_value_index_len_index_value_index_len_index=0\n\
    \    local -i max_value_index_len_index_value_index_len_index_value_index_len_index_value=0\n\
    \    local -i max_value_index_len_index_value_index_len_index_value_index_len_index_value_index=0\n\
    \    local -i max_value_index_len_index_value_index_len_index_value_index_len_index_value_index_len=0\n\
    \    local -i max_value_index_len_index_value_index_len_index_value_index_len_index_value_index_len_index=0\n\
    \    local -i max_value_index_len_index_value_index_len_index_value_index_len_index_value_index_len_index_value=0\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local -a max_arr\n    local max=${arr[0]}\n\
    \    max_arr=(\"$max\")\n    for i in \"${arr[@]:1}\"; do\n        if [[ $i -gt\
    \ $max ]]; then\n            max=$i\n        fi\n        max_arr+=(\"$max\")\n\
    \    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate() {\n    rolling_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    echo $max\n\
    \    for i in \"${arr[@]:1}\"; do\n        if (( i > max )); then\n          \
    \  max=$i\n        fi\n        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a list=($1)\n    local max=${list[0]}\n    local -a\
    \ result=()\n    result+=($max)\n    for i in \"${list[@]:1}\"; do\n        if\
    \ [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        result+=($max)\n\
    \    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1\n    do\n        if [ $i -gt\
    \ $max ]\n        then\n            max=$i\n        fi\n        echo $max\n  \
    \  done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n\
    \      max=$i\n    fi\n    echo $max\n  done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n  local -a arr\n  local -i i\n  local -i max\n  arr=($1)\n  max=${arr[0]}\n\
    \  for ((i=1; i<${#arr[@]}; i++)); do\n    if [[ ${arr[i]} -gt $max ]]; then\n\
    \      max=${arr[i]}\n    fi\n    echo $max\n  done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local -a res=()\n    local max=${arr[0]}\n\
    \    res+=($max)\n    for i in ${arr[@]:1}; do\n        if (( i > max )); then\n\
    \            max=$i\n        fi\n        res+=($max)\n    done\n    echo ${res[@]}\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo -n \"$max \"\n    done\n\
    \    echo\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    echo $max\n\
    \    for i in ${arr[@]:1}; do\n        if [[ $i -gt $max ]]; then\n          \
    \  max=$i\n        fi\n        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n  local -a arr=($1)\n  local -a res\n  local max=${arr[0]}\n\
    \  res+=(\"$max\")\n  for ((i=1; i<${#arr[@]}; i++)); do\n    if [[ ${arr[$i]}\
    \ -gt $max ]]; then\n      max=${arr[$i]}\n    fi\n    res+=(\"$max\")\n  done\n\
    \  echo \"${res[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    echo $max\n\
    \    for i in \"${arr[@]:1}\"; do\n        if (( i > max )); then\n          \
    \  max=$i\n        fi\n        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i=0\n    local -i max=0\n    for\
    \ i in $1; do\n        if (( i > max )); then\n            max=$i\n        fi\n\
    \        arr[${#arr[@]}]=$max\n    done\n    echo ${arr[@]}\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local -a max_arr\n    local max=${arr[0]}\n\
    \    max_arr=($max)\n    for i in \"${arr[@]:1}\"; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        max_arr+=($max)\n    done\n\
    \    echo \"${max_arr[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n    arr=($1)\n\
    \    max=${arr[0]}\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if (( ${arr[$i]}\
    \ > max )); then\n            max=${arr[$i]}\n        fi\n        echo $max\n\
    \    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=()\n    local max=0\n    for i in $1; do\n \
    \       arr+=($i)\n        if [[ $i -gt $max ]]; then\n            max=$i\n  \
    \      fi\n        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n    IFS='\
    \ ' read -r -a arr <<< \"$1\"\n    max=${arr[0]}\n    echo -n \"$max \"\n    for\
    \ ((i=1; i<${#arr[@]}; i++)); do\n        if (( arr[i] > max )); then\n      \
    \      max=${arr[i]}\n        fi\n        echo -n \"$max \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n  local max=0\n  for i in $1; do\n    if [ $i -gt $max ]; then\n\
    \      max=$i\n    fi\n    echo $max\n  done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    local -a\
    \ result=($max)\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]}\
    \ -gt $max ]]; then\n            max=${arr[$i]}\n        fi\n        result[$i]=$max\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n        echo $max\n    done\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i=0\n    local -i max=0\n    for\
    \ i in $1; do\n        if (( i > max )); then\n            max=$i\n        fi\n\
    \        arr[${#arr[@]}]=$max\n    done\n    echo ${arr[@]}\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n    IFS='\
    \ ' read -r -a arr <<< \"$1\"\n    max=${arr[0]}\n    echo -n \"$max \"\n    for\
    \ ((i=1; i<${#arr[@]}; i++)); do\n        if (( arr[i] > max )); then\n      \
    \      max=${arr[i]}\n        fi\n        echo -n \"$max \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local max=${arr[0]}\n    echo $max\n\
    \    for i in ${arr[@]:1}; do\n        if [[ $i -gt $max ]]; then\n          \
    \  max=$i\n        fi\n        echo $max\n    done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a list\n    local -i i\n    local -i max\n    local\
    \ -i max_index\n    local -i max_index_prev\n\n    list=($1)\n    max=${list[0]}\n\
    \    max_index=0\n    max_index_prev=0\n\n    for ((i=1; i<${#list[@]}; i++));\
    \ do\n        if [[ ${list[i]} -gt $max ]]; then\n            max=${list[i]}\n\
    \            max_index=i\n        fi\n        if [[ $i -gt $max_index_prev ]];\
    \ then\n            echo $max\n        fi\n        max_index_prev=$max_index\n\
    \    done\n    echo $max\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr=($1)\n    local -a res=()\n    local max=${arr[0]}\n\
    \    res+=($max)\n    for i in ${arr[@]:1}; do\n        if (( i > max )); then\n\
    \            max=$i\n        fi\n        res+=($max)\n    done\n    echo ${res[@]}\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659994135
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n#\n# $1 is a space-separated list\n\
    rolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n    local\
    \ -i n\n    local -i len\n    local -i j\n    arr=($1)\n    len=${#arr[@]}\n \
    \   for ((i=0; i<len; i++)); do\n        max=${arr[i]}\n        for ((j=i; j<len;\
    \ j++)); do\n            n=${arr[j]}\n            if ((n > max)); then\n     \
    \           max=$n\n            fi\n        done\n        echo -n \"$max \"\n\
    \    done\n    echo\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659994135
